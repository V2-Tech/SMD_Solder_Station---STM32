
SMDSolderStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c228  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce4  0800c338  0800c338  0001c338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d01c  0800d01c  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800d01c  0800d01c  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d01c  0800d01c  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d01c  0800d01c  0001d01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d020  0800d020  0001d020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800d024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b0  20000350  0800d374  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003400  0800d374  00023400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b55eb  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009eb1  00000000  00000000  000d5964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003440  00000000  00000000  000df818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00020fb8  00000000  00000000  000e2c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000411e1  00000000  00000000  00103c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000af9d7  00000000  00000000  00144df1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001f47c8  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00004a78  00000000  00000000  001f4820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b9b0  00000000  00000000  001f9298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0003eff3  00000000  00000000  00204c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c320 	.word	0x0800c320

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800c320 	.word	0x0800c320

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <vApplicationGetIdleTaskMemory+0x10>)
 8001072:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <vApplicationGetIdleTaskMemory+0x14>)
 8001076:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000056c 	.word	0x2000056c
 8001084:	2000036c 	.word	0x2000036c

08001088 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <vApplicationGetTimerTaskMemory+0x10>)
 800108a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <vApplicationGetTimerTaskMemory+0x14>)
 800108e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001096:	4770      	bx	lr
 8001098:	200009b8 	.word	0x200009b8
 800109c:	200005b8 	.word	0x200005b8

080010a0 <BlinkTimerCallback>:
	Interface->SignedEncActValue = (int16_t) EncActValue;
}

void BlinkTimerCallback(void const * argument)
{
	BlinkVar = !BlinkVar;
 80010a0:	4a02      	ldr	r2, [pc, #8]	; (80010ac <BlinkTimerCallback+0xc>)
 80010a2:	7813      	ldrb	r3, [r2, #0]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	7013      	strb	r3, [r2, #0]
}
 80010aa:	4770      	bx	lr
 80010ac:	20000a04 	.word	0x20000a04

080010b0 <MainPage>:
	}
	u8g2_SendBuffer(&u8g2);
}

void MainPage(VisualInterface* Interface)
{
 80010b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Draw target temperature icon */
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010b2:	250e      	movs	r5, #14
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MainPage+0x68>)
{
 80010b6:	4604      	mov	r4, r0
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2102      	movs	r1, #2
 80010bc:	4817      	ldr	r0, [pc, #92]	; (800111c <MainPage+0x6c>)
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	9500      	str	r5, [sp, #0]
 80010c2:	2316      	movs	r3, #22
 80010c4:	f000 ffaf 	bl	8002026 <u8g2_DrawXBMP>

	/* Draw actual temperature icon */
	u8g2_DrawXBMP(&u8g2, 100, 20, 23, 39, temperature_23x39);
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MainPage+0x70>)
 80010ca:	2214      	movs	r2, #20
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2327      	movs	r3, #39	; 0x27
 80010d0:	2164      	movs	r1, #100	; 0x64
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MainPage+0x6c>)
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2317      	movs	r3, #23
 80010d8:	f000 ffa5 	bl	8002026 <u8g2_DrawXBMP>

	/* Draw alarm icon */
	if (Interface->AlarmState || 1)
	{
		u8g2_DrawXBMP(&u8g2, 112, 0, 14, 14, alarm_icon14x14);
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MainPage+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	e9cd 5300 	strd	r5, r3, [sp]
 80010e4:	2170      	movs	r1, #112	; 0x70
 80010e6:	462b      	mov	r3, r5
 80010e8:	480c      	ldr	r0, [pc, #48]	; (800111c <MainPage+0x6c>)
 80010ea:	f000 ff9c 	bl	8002026 <u8g2_DrawXBMP>
	}

	/* Draw heat icon */
	if ((Interface->_ActualHeatState == HeatStatyState) ||
 80010ee:	79a3      	ldrb	r3, [r4, #6]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d002      	beq.n	80010fa <MainPage+0x4a>
			((Interface->_ActualHeatState == Heating || 1 ) && (BlinkVar == 1)))
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MainPage+0x78>)
	if ((Interface->_ActualHeatState == HeatStatyState) ||
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b14b      	cbz	r3, 800110e <MainPage+0x5e>
	{
		u8g2_DrawXBMP(&u8g2, 2, 26, 30, 28, Heater_30x28);
 80010fa:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MainPage+0x7c>)
 80010fc:	221a      	movs	r2, #26
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	231c      	movs	r3, #28
 8001102:	2102      	movs	r1, #2
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MainPage+0x6c>)
 8001108:	231e      	movs	r3, #30
 800110a:	f000 ff8c 	bl	8002026 <u8g2_DrawXBMP>
	/*
	u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
	uint8_t tempHeigth = u8g2_GetFontBBXHeight(&u8g2);
	u8g2_DrawStr(&u8g2, 1, tempHeigth, ScreenString[0]);
	*/
	Interface->_ActualPage = PageMain;
 800110e:	2300      	movs	r3, #0
 8001110:	7123      	strb	r3, [r4, #4]
}
 8001112:	b003      	add	sp, #12
 8001114:	bd30      	pop	{r4, r5, pc}
 8001116:	bf00      	nop
 8001118:	0800c471 	.word	0x0800c471
 800111c:	20001ea4 	.word	0x20001ea4
 8001120:	0800c3fc 	.word	0x0800c3fc
 8001124:	20001ea0 	.word	0x20001ea0
 8001128:	20000a04 	.word	0x20000a04
 800112c:	0800c38c 	.word	0x0800c38c

08001130 <Graphic>:
{
 8001130:	b510      	push	{r4, lr}
 8001132:	4604      	mov	r4, r0
	u8g2_ClearBuffer(&u8g2);
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <Graphic+0x20>)
 8001136:	f000 ffa5 	bl	8002084 <u8g2_ClearBuffer>
	switch(Interface->_ActualPage)
 800113a:	7923      	ldrb	r3, [r4, #4]
 800113c:	b913      	cbnz	r3, 8001144 <Graphic+0x14>
			MainPage(Interface);
 800113e:	4620      	mov	r0, r4
 8001140:	f7ff ffb6 	bl	80010b0 <MainPage>
}
 8001144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	u8g2_SendBuffer(&u8g2);
 8001148:	4801      	ldr	r0, [pc, #4]	; (8001150 <Graphic+0x20>)
 800114a:	f000 bfa5 	b.w	8002098 <u8g2_SendBuffer>
 800114e:	bf00      	nop
 8001150:	20001ea4 	.word	0x20001ea4

08001154 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001154:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001156:	f008 f809 	bl	800916c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f006 fb88 	bl	8007870 <osDelay>
  for(;;)
 8001160:	e7fb      	b.n	800115a <StartMainTask+0x6>
	...

08001164 <StartGraphicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGraphicTask */
void StartGraphicTask(void const * argument)
{
 8001164:	b508      	push	{r3, lr}
		  u8g2_DrawStr(&u8g2, 1, tempHeigth, ScreenString[0]);
		  u8g2_DrawStr(&u8g2, 1, tempHeigth*3 + LINESPACE, ScreenString[2]);
	  }
	  u8g2_SendBuffer(&u8g2);
	  */
	  Graphic(&GraphicVar);
 8001166:	4c04      	ldr	r4, [pc, #16]	; (8001178 <StartGraphicTask+0x14>)
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff ffe1 	bl	8001130 <Graphic>
	  osDelay(20);
 800116e:	2014      	movs	r0, #20
 8001170:	f006 fb7e 	bl	8007870 <osDelay>
  for(;;)
 8001174:	e7f8      	b.n	8001168 <StartGraphicTask+0x4>
 8001176:	bf00      	nop
 8001178:	200021ac 	.word	0x200021ac

0800117c <StartPID>:
{
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 800117c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
{
 8001180:	b508      	push	{r3, lr}
	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 8001182:	4e06      	ldr	r6, [pc, #24]	; (800119c <StartPID+0x20>)
 8001184:	4d06      	ldr	r5, [pc, #24]	; (80011a0 <StartPID+0x24>)
 8001186:	4628      	mov	r0, r5
 8001188:	6831      	ldr	r1, [r6, #0]
 800118a:	f000 fb2b 	bl	80017e4 <PIDUpdate>
 800118e:	63a0      	str	r0, [r4, #56]	; 0x38
	  osDelay(1000/PID_LOOP_FREQUENCY_HZ);
 8001190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001194:	f006 fb6c 	bl	8007870 <osDelay>
  for(;;)
 8001198:	e7f5      	b.n	8001186 <StartPID+0xa>
 800119a:	bf00      	nop
 800119c:	20001f2c 	.word	0x20001f2c
 80011a0:	20001ffc 	.word	0x20001ffc

080011a4 <ReadTempTimerCallback>:
  /* USER CODE END StartPID */
}

/* ReadTempTimerCallback function */
void ReadTempTimerCallback(void const * argument)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN ReadTempTimerCallback */
	Max6675_Read_TempValue(&ActTemperature);
 80011a6:	4c16      	ldr	r4, [pc, #88]	; (8001200 <ReadTempTimerCallback+0x5c>)
{
 80011a8:	b085      	sub	sp, #20
	Max6675_Read_TempValue(&ActTemperature);
 80011aa:	4620      	mov	r0, r4
 80011ac:	f001 fc1a 	bl	80029e4 <Max6675_Read_TempValue>
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 80011b0:	6821      	ldr	r1, [r4, #0]
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <ReadTempTimerCallback+0x60>)
 80011b4:	f000 fad2 	bl	800175c <LPFilterUpdate>
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	*/

	// Graph 2
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
					  TempPID.PID_P, TempPID.PID_I, TempPID.PID_D);
 80011b8:	4d13      	ldr	r5, [pc, #76]	; (8001208 <ReadTempTimerCallback+0x64>)
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <ReadTempTimerCallback+0x68>)
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 80011bc:	4c14      	ldr	r4, [pc, #80]	; (8001210 <ReadTempTimerCallback+0x6c>)
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 80011be:	6018      	str	r0, [r3, #0]
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 80011c0:	68a8      	ldr	r0, [r5, #8]
 80011c2:	f7ff f931 	bl	8000428 <__aeabi_f2d>
 80011c6:	4606      	mov	r6, r0
 80011c8:	6928      	ldr	r0, [r5, #16]
 80011ca:	460f      	mov	r7, r1
 80011cc:	f7ff f92c 	bl	8000428 <__aeabi_f2d>
 80011d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011d4:	68e8      	ldr	r0, [r5, #12]
 80011d6:	f7ff f927 	bl	8000428 <__aeabi_f2d>
 80011da:	4632      	mov	r2, r6
 80011dc:	e9cd 0100 	strd	r0, r1, [sp]
 80011e0:	463b      	mov	r3, r7
 80011e2:	490c      	ldr	r1, [pc, #48]	; (8001214 <ReadTempTimerCallback+0x70>)
 80011e4:	4620      	mov	r0, r4
 80011e6:	f008 fe71 	bl	8009ecc <siprintf>
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 80011ea:	4620      	mov	r0, r4
 80011ec:	f7fe ffb0 	bl	8000150 <strlen>
 80011f0:	b281      	uxth	r1, r0
 80011f2:	4620      	mov	r0, r4
	sprintf((uint8_t *) logBuf, "Actual Temp: %.1f, Actual PWM: %d, PID_D: %.1f\r\n",
					  FilteredTemperature, TIM2->CCR2, TempPID.PID_D);
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	 */
  /* USER CODE END ReadTempTimerCallback */
}
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 80011fa:	f008 b805 	b.w	8009208 <CDC_Transmit_FS>
 80011fe:	bf00      	nop
 8001200:	20002428 	.word	0x20002428
 8001204:	20001f88 	.word	0x20001f88
 8001208:	20001ffc 	.word	0x20001ffc
 800120c:	20001f2c 	.word	0x20001f2c
 8001210:	200020e9 	.word	0x200020e9
 8001214:	0800c4b8 	.word	0x0800c4b8

08001218 <SystemClock_Config>:
{
 8001218:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121a:	2410      	movs	r4, #16
{
 800121c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800121e:	4622      	mov	r2, r4
 8001220:	2100      	movs	r1, #0
 8001222:	a80d      	add	r0, sp, #52	; 0x34
 8001224:	f008 f9ea 	bl	80095fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001228:	2214      	movs	r2, #20
 800122a:	2100      	movs	r1, #0
 800122c:	eb0d 0002 	add.w	r0, sp, r2
 8001230:	f008 f9e4 	bl	80095fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	4622      	mov	r2, r4
 8001236:	2100      	movs	r1, #0
 8001238:	a801      	add	r0, sp, #4
 800123a:	f008 f9df 	bl	80095fc <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001244:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001246:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001248:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001254:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001256:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001258:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800125a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125c:	f003 fd00 	bl	8004c60 <HAL_RCC_OscConfig>
 8001260:	b108      	cbz	r0, 8001266 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001262:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800126c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001272:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001276:	4629      	mov	r1, r5
 8001278:	a805      	add	r0, sp, #20
 800127a:	f003 fec7 	bl	800500c <HAL_RCC_ClockConfig>
 800127e:	b108      	cbz	r0, 8001284 <SystemClock_Config+0x6c>
 8001280:	b672      	cpsid	i
  while (1)
 8001282:	e7fe      	b.n	8001282 <SystemClock_Config+0x6a>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001284:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001286:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001288:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128a:	f003 ff99 	bl	80051c0 <HAL_RCCEx_PeriphCLKConfig>
 800128e:	b108      	cbz	r0, 8001294 <SystemClock_Config+0x7c>
 8001290:	b672      	cpsid	i
  while (1)
 8001292:	e7fe      	b.n	8001292 <SystemClock_Config+0x7a>
}
 8001294:	b015      	add	sp, #84	; 0x54
 8001296:	bd30      	pop	{r4, r5, pc}

08001298 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f04f 0810 	mov.w	r8, #16
{
 800129c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2501      	movs	r5, #1
 80012a2:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2602      	movs	r6, #2
{
 80012a6:	b0a7      	sub	sp, #156	; 0x9c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4cae      	ldr	r4, [pc, #696]	; (8001564 <main+0x2cc>)
  HAL_Init();
 80012aa:	f001 fbc9 	bl	8002a40 <HAL_Init>
  SystemClock_Config();
 80012ae:	f7ff ffb3 	bl	8001218 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	4642      	mov	r2, r8
 80012b4:	2100      	movs	r1, #0
 80012b6:	a81d      	add	r0, sp, #116	; 0x74
 80012b8:	f008 f9a0 	bl	80095fc <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012bc:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	61a3      	str	r3, [r4, #24]
 80012c6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80012c8:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	9308      	str	r3, [sp, #32]
 80012d0:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80012d4:	48a4      	ldr	r0, [pc, #656]	; (8001568 <main+0x2d0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	61a3      	str	r3, [r4, #24]
 80012dc:	69a3      	ldr	r3, [r4, #24]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	9309      	str	r3, [sp, #36]	; 0x24
 80012e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	69a3      	ldr	r3, [r4, #24]
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	61a3      	str	r3, [r4, #24]
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	930a      	str	r3, [sp, #40]	; 0x28
 80012f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80012f8:	f001 fe10 	bl	8002f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2102      	movs	r1, #2
 8001300:	489a      	ldr	r0, [pc, #616]	; (800156c <main+0x2d4>)
 8001302:	f001 fe0b 	bl	8002f1c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 8001306:	4898      	ldr	r0, [pc, #608]	; (8001568 <main+0x2d0>)
 8001308:	a91d      	add	r1, sp, #116	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	e9cd 571e 	strd	r5, r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = MAX6675_NSS_Pin;
 8001310:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 8001314:	f001 fd26 	bl	8002d64 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	e9cd 761f 	strd	r7, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	e9cd 651d 	strd	r6, r5, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = ENC_PULS_Pin;
 8001320:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001322:	4892      	ldr	r0, [pc, #584]	; (800156c <main+0x2d4>)
 8001324:	a91d      	add	r1, sp, #116	; 0x74
 8001326:	f001 fd1d 	bl	8002d64 <HAL_GPIO_Init>
  HAL_GPIO_Init(ENC_PULS_GPIO_Port, &GPIO_InitStruct);
 800132a:	4890      	ldr	r0, [pc, #576]	; (800156c <main+0x2d4>)
 800132c:	a91d      	add	r1, sp, #116	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	e9cd 671d 	strd	r6, r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	951f      	str	r5, [sp, #124]	; 0x7c
  HAL_GPIO_Init(ENC_PULS_GPIO_Port, &GPIO_InitStruct);
 8001334:	f001 fd16 	bl	8002d64 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001338:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800133a:	463a      	mov	r2, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 800133c:	432b      	orrs	r3, r5
 800133e:	6163      	str	r3, [r4, #20]
 8001340:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001342:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001344:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001346:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001348:	9307      	str	r3, [sp, #28]
 800134a:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800134c:	f001 fbc0 	bl	8002ad0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001350:	200e      	movs	r0, #14
 8001352:	f001 fbef 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800135a:	4885      	ldr	r0, [pc, #532]	; (8001570 <main+0x2d8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800135c:	f8df c248 	ldr.w	ip, [pc, #584]	; 80015a8 <main+0x310>
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001360:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001364:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001368:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	e9c0 7704 	strd	r7, r7, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001370:	e9c0 e302 	strd	lr, r3, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001374:	e9c0 7708 	strd	r7, r7, [r0, #32]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001378:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	6287      	str	r7, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800137e:	270a      	movs	r7, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001380:	e9c0 3806 	strd	r3, r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001384:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001386:	f004 f81e 	bl	80053c6 <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	b108      	cbz	r0, 8001392 <main+0xfa>
 800138e:	b672      	cpsid	i
  while (1)
 8001390:	e7fe      	b.n	8001390 <main+0xf8>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001392:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8001396:	4877      	ldr	r0, [pc, #476]	; (8001574 <main+0x2dc>)
  hi2c1.Init.ClockSpeed = 400000;
 8001398:	4a77      	ldr	r2, [pc, #476]	; (8001578 <main+0x2e0>)
 800139a:	f8df a210 	ldr.w	sl, [pc, #528]	; 80015ac <main+0x314>
  hi2c1.Init.OwnAddress1 = 0;
 800139e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a2:	e9c0 9304 	strd	r9, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	6203      	str	r3, [r0, #32]
  hi2c1.Init.ClockSpeed = 400000;
 80013ac:	e9c0 2a00 	strd	r2, sl, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013b0:	f001 fe8c 	bl	80030cc <HAL_I2C_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	b108      	cbz	r0, 80013bc <main+0x124>
 80013b8:	b672      	cpsid	i
  while (1)
 80013ba:	e7fe      	b.n	80013ba <main+0x122>
  huart2.Init.BaudRate = 115200;
 80013bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 80013c0:	486e      	ldr	r0, [pc, #440]	; (800157c <main+0x2e4>)
  huart2.Init.BaudRate = 115200;
 80013c2:	4c6f      	ldr	r4, [pc, #444]	; (8001580 <main+0x2e8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80013c8:	e9c0 4200 	strd	r4, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013cc:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d0:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d6:	f004 fef1 	bl	80061bc <HAL_UART_Init>
 80013da:	4683      	mov	fp, r0
 80013dc:	b108      	cbz	r0, 80013e2 <main+0x14a>
 80013de:	b672      	cpsid	i
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <main+0x148>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	4601      	mov	r1, r0
 80013e4:	4642      	mov	r2, r8
 80013e6:	a816      	add	r0, sp, #88	; 0x58
 80013e8:	f008 f908 	bl	80095fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ec:	221c      	movs	r2, #28
 80013ee:	4659      	mov	r1, fp
 80013f0:	a81d      	add	r0, sp, #116	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f2:	e9cd bb0f 	strd	fp, fp, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	f008 f901 	bl	80095fc <memset>
  htim2.Instance = TIM2;
 80013fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013fe:	4c61      	ldr	r4, [pc, #388]	; (8001584 <main+0x2ec>)
  htim2.Init.Prescaler = 0;
 8001400:	e9c4 3b00 	strd	r3, fp, [r4]
  htim2.Init.Period = 1024-1;
 8001404:	f240 33ff 	movw	r3, #1023	; 0x3ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001408:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	e9c4 3b03 	strd	r3, fp, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140e:	f8c4 b008 	str.w	fp, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001412:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	f004 fc36 	bl	8005c84 <HAL_TIM_Base_Init>
 8001418:	b108      	cbz	r0, 800141e <main+0x186>
 800141a:	b672      	cpsid	i
  while (1)
 800141c:	e7fe      	b.n	800141c <main+0x184>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001422:	4620      	mov	r0, r4
 8001424:	a916      	add	r1, sp, #88	; 0x58
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001426:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001428:	f004 fd6b 	bl	8005f02 <HAL_TIM_ConfigClockSource>
 800142c:	b108      	cbz	r0, 8001432 <main+0x19a>
 800142e:	b672      	cpsid	i
  while (1)
 8001430:	e7fe      	b.n	8001430 <main+0x198>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001432:	4620      	mov	r0, r4
 8001434:	f004 fc52 	bl	8005cdc <HAL_TIM_PWM_Init>
 8001438:	b108      	cbz	r0, 800143e <main+0x1a6>
 800143a:	b672      	cpsid	i
  while (1)
 800143c:	e7fe      	b.n	800143c <main+0x1a4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143e:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001442:	a90f      	add	r1, sp, #60	; 0x3c
 8001444:	4620      	mov	r0, r4
 8001446:	f004 fe4f 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	b108      	cbz	r0, 8001450 <main+0x1b8>
 800144c:	b672      	cpsid	i
  while (1)
 800144e:	e7fe      	b.n	800144e <main+0x1b6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001452:	901f      	str	r0, [sp, #124]	; 0x7c
  sConfigOC.Pulse = 0;
 8001454:	e9cd 301d 	strd	r3, r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001458:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145a:	2204      	movs	r2, #4
 800145c:	4620      	mov	r0, r4
 800145e:	a91d      	add	r1, sp, #116	; 0x74
 8001460:	f004 fcea 	bl	8005e38 <HAL_TIM_PWM_ConfigChannel>
 8001464:	4680      	mov	r8, r0
 8001466:	b108      	cbz	r0, 800146c <main+0x1d4>
 8001468:	b672      	cpsid	i
  while (1)
 800146a:	e7fe      	b.n	800146a <main+0x1d2>
  HAL_TIM_MspPostInit(&htim2);
 800146c:	4620      	mov	r0, r4
 800146e:	f000 fbdd 	bl	8001c2c <HAL_TIM_MspPostInit>
  hi2c2.Instance = I2C2;
 8001472:	4845      	ldr	r0, [pc, #276]	; (8001588 <main+0x2f0>)
 8001474:	4b45      	ldr	r3, [pc, #276]	; (800158c <main+0x2f4>)
  hi2c2.Init.OwnAddress1 = 0;
 8001476:	e9c0 8802 	strd	r8, r8, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 800147a:	e9c0 3a00 	strd	r3, sl, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147e:	e9c0 9804 	strd	r9, r8, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001482:	e9c0 8806 	strd	r8, r8, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001486:	f8c0 8020 	str.w	r8, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148a:	f001 fe1f 	bl	80030cc <HAL_I2C_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	b108      	cbz	r0, 8001496 <main+0x1fe>
 8001492:	b672      	cpsid	i
  while (1)
 8001494:	e7fe      	b.n	8001494 <main+0x1fc>
  htim3.Instance = TIM3;
 8001496:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <main+0x2f8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  htim3.Instance = TIM3;
 800149c:	483d      	ldr	r0, [pc, #244]	; (8001594 <main+0x2fc>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800149e:	a91d      	add	r1, sp, #116	; 0x74
  htim3.Init.Prescaler = 0;
 80014a0:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 65535;
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	e9c0 2303 	strd	r2, r3, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ac:	2203      	movs	r2, #3
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014ae:	e9cd 531f 	strd	r5, r3, [sp, #124]	; 0x7c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b2:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014b6:	e9cd 7321 	strd	r7, r3, [sp, #132]	; 0x84
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ba:	e9cd 5323 	strd	r5, r3, [sp, #140]	; 0x8c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014be:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c0:	6186      	str	r6, [r0, #24]
  sConfig.IC2Filter = 10;
 80014c2:	9725      	str	r7, [sp, #148]	; 0x94
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014c4:	f004 fc36 	bl	8005d34 <HAL_TIM_Encoder_Init>
 80014c8:	b108      	cbz	r0, 80014ce <main+0x236>
 80014ca:	b672      	cpsid	i
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x234>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ce:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d0:	4830      	ldr	r0, [pc, #192]	; (8001594 <main+0x2fc>)
 80014d2:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d8:	f004 fe06 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014dc:	4603      	mov	r3, r0
 80014de:	b108      	cbz	r0, 80014e4 <main+0x24c>
 80014e0:	b672      	cpsid	i
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <main+0x24a>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014e4:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 80014e8:	482b      	ldr	r0, [pc, #172]	; (8001598 <main+0x300>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ea:	492c      	ldr	r1, [pc, #176]	; (800159c <main+0x304>)
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014f0:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80014f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014f8:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fa:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014fe:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001500:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001506:	2410      	movs	r4, #16
  hspi2.Init.CRCPolynomial = 10;
 8001508:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800150a:	e9c0 2406 	strd	r2, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800150e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001510:	f003 ff59 	bl	80053c6 <HAL_SPI_Init>
 8001514:	4605      	mov	r5, r0
 8001516:	b108      	cbz	r0, 800151c <main+0x284>
 8001518:	b672      	cpsid	i
  while (1)
 800151a:	e7fe      	b.n	800151a <main+0x282>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151c:	4622      	mov	r2, r4
 800151e:	4601      	mov	r1, r0
 8001520:	a81d      	add	r0, sp, #116	; 0x74
 8001522:	f008 f86b 	bl	80095fc <memset>
  htim4.Init.Prescaler = 1000-1;
 8001526:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim4.Instance = TIM4;
 800152a:	4c1d      	ldr	r4, [pc, #116]	; (80015a0 <main+0x308>)
  htim4.Init.Prescaler = 1000-1;
 800152c:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <main+0x30c>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800152e:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 1000-1;
 8001530:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 18000-1;
 8001534:	f244 634f 	movw	r3, #17999	; 0x464f
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001544:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001546:	f004 fb9d 	bl	8005c84 <HAL_TIM_Base_Init>
 800154a:	b108      	cbz	r0, 8001550 <main+0x2b8>
 800154c:	b672      	cpsid	i
  while (1)
 800154e:	e7fe      	b.n	800154e <main+0x2b6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001554:	4620      	mov	r0, r4
 8001556:	a91d      	add	r1, sp, #116	; 0x74
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800155a:	f004 fcd2 	bl	8005f02 <HAL_TIM_ConfigClockSource>
 800155e:	b338      	cbz	r0, 80015b0 <main+0x318>
 8001560:	b672      	cpsid	i
  while (1)
 8001562:	e7fe      	b.n	8001562 <main+0x2ca>
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800
 800156c:	40010c00 	.word	0x40010c00
 8001570:	20001fa0 	.word	0x20001fa0
 8001574:	20002094 	.word	0x20002094
 8001578:	40005400 	.word	0x40005400
 800157c:	2000216c 	.word	0x2000216c
 8001580:	40004400 	.word	0x40004400
 8001584:	20002348 	.word	0x20002348
 8001588:	20002040 	.word	0x20002040
 800158c:	40005800 	.word	0x40005800
 8001590:	40000400 	.word	0x40000400
 8001594:	20002390 	.word	0x20002390
 8001598:	20001f30 	.word	0x20001f30
 800159c:	40003800 	.word	0x40003800
 80015a0:	200022fc 	.word	0x200022fc
 80015a4:	40000800 	.word	0x40000800
 80015a8:	40013000 	.word	0x40013000
 80015ac:	00061a80 	.word	0x00061a80
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015b4:	a916      	add	r1, sp, #88	; 0x58
 80015b6:	4620      	mov	r0, r4
 80015b8:	f004 fd96 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 80015bc:	4605      	mov	r5, r0
 80015be:	b108      	cbz	r0, 80015c4 <main+0x32c>
 80015c0:	b672      	cpsid	i
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x32a>
  HAL_TIM_Base_Start(&htim2);
 80015c4:	4844      	ldr	r0, [pc, #272]	; (80016d8 <main+0x440>)
 80015c6:	f004 f9d3 	bl	8005970 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80015ca:	2104      	movs	r1, #4
 80015cc:	4842      	ldr	r0, [pc, #264]	; (80016d8 <main+0x440>)
 80015ce:	f004 fd89 	bl	80060e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015d2:	213c      	movs	r1, #60	; 0x3c
 80015d4:	4841      	ldr	r0, [pc, #260]	; (80016dc <main+0x444>)
 80015d6:	f004 fa1c 	bl	8005a12 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80015da:	4620      	mov	r0, r4
 80015dc:	f004 f9ee 	bl	80059bc <HAL_TIM_Base_Start_IT>
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <main+0x448>)
 80015e2:	4a40      	ldr	r2, [pc, #256]	; (80016e4 <main+0x44c>)
 80015e4:	4940      	ldr	r1, [pc, #256]	; (80016e8 <main+0x450>)
 80015e6:	4841      	ldr	r0, [pc, #260]	; (80016ec <main+0x454>)
 80015e8:	f000 fdae 	bl	8002148 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 80015ec:	483f      	ldr	r0, [pc, #252]	; (80016ec <main+0x454>)
 80015ee:	f001 f990 	bl	8002912 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 80015f2:	4629      	mov	r1, r5
 80015f4:	483d      	ldr	r0, [pc, #244]	; (80016ec <main+0x454>)
 80015f6:	f001 f994 	bl	8002922 <u8x8_SetPowerSave>
  u8g2_ClearDisplay(&u8g2);
 80015fa:	483c      	ldr	r0, [pc, #240]	; (80016ec <main+0x454>)
 80015fc:	f000 fd8e 	bl	800211c <u8g2_ClearDisplay>
  u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
 8001600:	493b      	ldr	r1, [pc, #236]	; (80016f0 <main+0x458>)
 8001602:	483a      	ldr	r0, [pc, #232]	; (80016ec <main+0x454>)
 8001604:	f000 fe2e 	bl	8002264 <u8g2_SetFont>
  LPFilterInit(&TempFilter);
 8001608:	483a      	ldr	r0, [pc, #232]	; (80016f4 <main+0x45c>)
 800160a:	f000 f89d 	bl	8001748 <LPFilterInit>
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 200, 60, 100, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <main+0x460>)
 8001610:	f04f 4289 	mov.w	r2, #1149239296	; 0x44800000
 8001614:	9305      	str	r3, [sp, #20]
 8001616:	f04f 4344 	mov.w	r3, #3288334336	; 0xc4000000
 800161a:	9304      	str	r3, [sp, #16]
 800161c:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 8001620:	9303      	str	r3, [sp, #12]
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <main+0x464>)
 8001624:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <main+0x468>)
 800162c:	4835      	ldr	r0, [pc, #212]	; (8001704 <main+0x46c>)
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <main+0x470>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001632:	4e36      	ldr	r6, [pc, #216]	; (800170c <main+0x474>)
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 200, 60, 100, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2300      	movs	r3, #0
 8001638:	f000 f8bc 	bl	80017b4 <PIDInit>
  PIDNewSetpoint(&TempPID, 120);
 800163c:	4934      	ldr	r1, [pc, #208]	; (8001710 <main+0x478>)
 800163e:	4831      	ldr	r0, [pc, #196]	; (8001704 <main+0x46c>)
 8001640:	f000 f8ce 	bl	80017e0 <PIDNewSetpoint>
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <main+0x47c>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001646:	462a      	mov	r2, r5
 8001648:	2101      	movs	r1, #1
 800164a:	a80b      	add	r0, sp, #44	; 0x2c
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 800164c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001650:	f006 f916 	bl	8007880 <osTimerCreate>
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 8001654:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x480>)
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 8001656:	462a      	mov	r2, r5
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001658:	6030      	str	r0, [r6, #0]
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 800165a:	2101      	movs	r1, #1
 800165c:	a80d      	add	r0, sp, #52	; 0x34
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 800165e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 8001662:	f006 f90d 	bl	8007880 <osTimerCreate>
 8001666:	4c2d      	ldr	r4, [pc, #180]	; (800171c <main+0x484>)
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 8001668:	21fa      	movs	r1, #250	; 0xfa
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 800166a:	6020      	str	r0, [r4, #0]
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 800166c:	6830      	ldr	r0, [r6, #0]
 800166e:	f006 f91f 	bl	80078b0 <osTimerStart>
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 8001672:	6820      	ldr	r0, [r4, #0]
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 8001674:	4c2a      	ldr	r4, [pc, #168]	; (8001720 <main+0x488>)
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 8001676:	21fa      	movs	r1, #250	; 0xfa
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 8001678:	ae0f      	add	r6, sp, #60	; 0x3c
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 800167a:	f006 f919 	bl	80078b0 <osTimerStart>
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 800167e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001680:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001682:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001686:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800168a:	4629      	mov	r1, r5
 800168c:	a80f      	add	r0, sp, #60	; 0x3c
 800168e:	f006 f8c7 	bl	8007820 <osThreadCreate>
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <main+0x48c>)
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 8001694:	f104 070c 	add.w	r7, r4, #12
 8001698:	ae16      	add	r6, sp, #88	; 0x58
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 800169a:	6018      	str	r0, [r3, #0]
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 800169c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800169e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016a0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80016a4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GraphicTaskHandle = osThreadCreate(osThread(GraphicTask), NULL);
 80016a8:	4629      	mov	r1, r5
 80016aa:	a816      	add	r0, sp, #88	; 0x58
 80016ac:	f006 f8b8 	bl	8007820 <osThreadCreate>
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <main+0x490>)
  osThreadDef(PIDTask, StartPID, osPriorityNormal, 0, 128);
 80016b2:	ae1d      	add	r6, sp, #116	; 0x74
 80016b4:	3428      	adds	r4, #40	; 0x28
  GraphicTaskHandle = osThreadCreate(osThread(GraphicTask), NULL);
 80016b6:	6018      	str	r0, [r3, #0]
  osThreadDef(PIDTask, StartPID, osPriorityNormal, 0, 128);
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016bc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016c0:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PIDTaskHandle = osThreadCreate(osThread(PIDTask), NULL);
 80016c4:	4629      	mov	r1, r5
 80016c6:	a81d      	add	r0, sp, #116	; 0x74
 80016c8:	f006 f8aa 	bl	8007820 <osThreadCreate>
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <main+0x494>)
 80016ce:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80016d0:	f006 f8a1 	bl	8007816 <osKernelStart>
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x43c>
 80016d6:	bf00      	nop
 80016d8:	20002348 	.word	0x20002348
 80016dc:	20002390 	.word	0x20002390
 80016e0:	08001f09 	.word	0x08001f09
 80016e4:	08001e95 	.word	0x08001e95
 80016e8:	0800cb5c 	.word	0x0800cb5c
 80016ec:	20001ea4 	.word	0x20001ea4
 80016f0:	0800c508 	.word	0x0800c508
 80016f4:	20001f88 	.word	0x20001f88
 80016f8:	3ca3d70a 	.word	0x3ca3d70a
 80016fc:	42c80000 	.word	0x42c80000
 8001700:	42700000 	.word	0x42700000
 8001704:	20001ffc 	.word	0x20001ffc
 8001708:	43480000 	.word	0x43480000
 800170c:	200022b4 	.word	0x200022b4
 8001710:	42f00000 	.word	0x42f00000
 8001714:	080011a5 	.word	0x080011a5
 8001718:	080010a1 	.word	0x080010a1
 800171c:	20002344 	.word	0x20002344
 8001720:	0800c338 	.word	0x0800c338
 8001724:	200022b0 	.word	0x200022b0
 8001728:	20001ff8 	.word	0x20001ff8
 800172c:	200023d8 	.word	0x200023d8

08001730 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001734:	429a      	cmp	r2, r3
 8001736:	d101      	bne.n	800173c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001738:	f001 b994 	b.w	8002a64 <HAL_IncTick>
}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40012c00 	.word	0x40012c00

08001744 <Error_Handler>:
 8001744:	b672      	cpsid	i
  while (1)
 8001746:	e7fe      	b.n	8001746 <Error_Handler+0x2>

08001748 <LPFilterInit>:
void LPFilterInit(LPFilter *filter)
{
	/* Clear buffer */
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		filter->buffer[n] = 0;
 8001748:	2300      	movs	r3, #0
	}

	/* Reset index */
	filter->bufferIndex = 0;
 800174a:	2200      	movs	r2, #0
		filter->buffer[n] = 0;
 800174c:	6003      	str	r3, [r0, #0]
 800174e:	6043      	str	r3, [r0, #4]
 8001750:	6083      	str	r3, [r0, #8]
 8001752:	60c3      	str	r3, [r0, #12]
	filter->bufferIndex = 0;
 8001754:	7402      	strb	r2, [r0, #16]

	/* Reset Output value */
	filter->FilteredValue = 0;
 8001756:	6143      	str	r3, [r0, #20]
}
 8001758:	4770      	bx	lr
	...

0800175c <LPFilterUpdate>:

float LPFilterUpdate(LPFilter *filter, float InValue)
{
 800175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Store last input value into the buffer */
	filter->buffer[filter->bufferIndex] = InValue;
 8001760:	7c03      	ldrb	r3, [r0, #16]
	{
		filter->bufferIndex = 0;
	}

	/* Compute output */
	filter->FilteredValue = 0;
 8001762:	2500      	movs	r5, #0
	filter->buffer[filter->bufferIndex] = InValue;
 8001764:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	filter->bufferIndex++;
 8001768:	3301      	adds	r3, #1
 800176a:	b2db      	uxtb	r3, r3
	if (filter->bufferIndex>=FILTER_LENGTH)
 800176c:	2b03      	cmp	r3, #3
		filter->bufferIndex = 0;
 800176e:	bf88      	it	hi
 8001770:	2300      	movhi	r3, #0
{
 8001772:	4604      	mov	r4, r0

	uint8_t ConvolvIndex = filter->bufferIndex;
 8001774:	2704      	movs	r7, #4
		filter->bufferIndex = 0;
 8001776:	7403      	strb	r3, [r0, #16]
	uint8_t ConvolvIndex = filter->bufferIndex;
 8001778:	7c06      	ldrb	r6, [r0, #16]
 800177a:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80017b0 <LPFilterUpdate+0x54>
	filter->FilteredValue = 0;
 800177e:	6145      	str	r5, [r0, #20]

	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		/* Shift the index (formula require [n-k] value ) */
		if (ConvolvIndex>0)
 8001780:	b19e      	cbz	r6, 80017aa <LPFilterUpdate+0x4e>
		{
			ConvolvIndex--;
 8001782:	3e01      	subs	r6, #1
 8001784:	b2f6      	uxtb	r6, r6
		else
		{
			ConvolvIndex = FILTER_LENGTH - 1;
		}
		/* Do the Convolution */
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 8001786:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 800178a:	f858 0b04 	ldr.w	r0, [r8], #4
 800178e:	f7ff fa89 	bl	8000ca4 <__aeabi_fmul>
 8001792:	4601      	mov	r1, r0
 8001794:	4628      	mov	r0, r5
 8001796:	f7ff f97d 	bl	8000a94 <__addsf3>
 800179a:	3f01      	subs	r7, #1
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 800179c:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 80017a0:	4605      	mov	r5, r0
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 80017a2:	d1ed      	bne.n	8001780 <LPFilterUpdate+0x24>
 80017a4:	6160      	str	r0, [r4, #20]
	}

	/* Return the actual filtered value output */

	return filter->FilteredValue;
}
 80017a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ConvolvIndex = FILTER_LENGTH - 1;
 80017aa:	2603      	movs	r6, #3
 80017ac:	e7eb      	b.n	8001786 <LPFilterUpdate+0x2a>
 80017ae:	bf00      	nop
 80017b0:	0800c4e0 	.word	0x0800c4e0

080017b4 <PIDInit>:
{
	/* Assign the value to the struct variable */
	PID->SampleTime = SampleTime;

	PID->MaxOutputVal = MaxOuputValue;
	PID->MinOutputVal = MinOutputVal;
 80017b4:	6283      	str	r3, [r0, #40]	; 0x28

	PID->Kp = Kp;
 80017b6:	9b00      	ldr	r3, [sp, #0]
	PID->SampleTime = SampleTime;
 80017b8:	6341      	str	r1, [r0, #52]	; 0x34
	PID->Kp = Kp;
 80017ba:	6143      	str	r3, [r0, #20]
	PID->Ki = Ki;
 80017bc:	9b01      	ldr	r3, [sp, #4]
	PID->MaxOutputVal = MaxOuputValue;
 80017be:	6242      	str	r2, [r0, #36]	; 0x24
	PID->Ki = Ki;
 80017c0:	6183      	str	r3, [r0, #24]
	PID->Kd = Kd;
 80017c2:	9b02      	ldr	r3, [sp, #8]
 80017c4:	61c3      	str	r3, [r0, #28]

	PID->PID_I_Max = PID_I_Max;
 80017c6:	9b03      	ldr	r3, [sp, #12]
 80017c8:	62c3      	str	r3, [r0, #44]	; 0x2c
	PID->PID_I_Min = PID_I_Min;
 80017ca:	9b04      	ldr	r3, [sp, #16]
 80017cc:	6303      	str	r3, [r0, #48]	; 0x30

	PID->PID_D_Tau = PID_D_Tau;
 80017ce:	9b05      	ldr	r3, [sp, #20]
 80017d0:	6203      	str	r3, [r0, #32]

	/* Reset the memory */
	PID->Setpoint = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	6003      	str	r3, [r0, #0]
	PID->OutputVal = 0;
 80017d6:	6043      	str	r3, [r0, #4]
	PID->lastError = 0;
 80017d8:	6383      	str	r3, [r0, #56]	; 0x38
	PID->lastInValue = 0;
 80017da:	63c3      	str	r3, [r0, #60]	; 0x3c
	PID->PID_Error = 0;
 80017dc:	6403      	str	r3, [r0, #64]	; 0x40
}
 80017de:	4770      	bx	lr

080017e0 <PIDNewSetpoint>:

void PIDNewSetpoint(PID *PID, float Setpoint)
{
	PID->Setpoint = Setpoint;
 80017e0:	6001      	str	r1, [r0, #0]
}
 80017e2:	4770      	bx	lr

080017e4 <PIDUpdate>:
	PID->lastError = 0;
	PID->lastInValue = 0;
}

uint32_t PIDUpdate(PID *PID, float ActValue)
{
 80017e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017e8:	4604      	mov	r4, r0
	/* Calculation of the actual error */
	PID->PID_Error = PID->Setpoint - ActValue;
 80017ea:	6800      	ldr	r0, [r0, #0]
{
 80017ec:	460e      	mov	r6, r1
	PID->PID_Error = PID->Setpoint - ActValue;
 80017ee:	f7ff f94f 	bl	8000a90 <__aeabi_fsub>

	/* Calculate the PROPORTIONAL part */
	PID->PID_P = PID->Kp * PID->PID_Error;
 80017f2:	6961      	ldr	r1, [r4, #20]
	PID->PID_Error = PID->Setpoint - ActValue;
 80017f4:	6420      	str	r0, [r4, #64]	; 0x40
 80017f6:	4605      	mov	r5, r0
	PID->PID_P = PID->Kp * PID->PID_Error;
 80017f8:	f7ff fa54 	bl	8000ca4 <__aeabi_fmul>

	/* Calculate the INTEGRATIVE part */
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 80017fc:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 8001800:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001804:	60a0      	str	r0, [r4, #8]
 8001806:	4680      	mov	r8, r0
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001808:	69a0      	ldr	r0, [r4, #24]
 800180a:	f7ff fa4b 	bl	8000ca4 <__aeabi_fmul>
 800180e:	4649      	mov	r1, r9
 8001810:	f7ff fa48 	bl	8000ca4 <__aeabi_fmul>
 8001814:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001816:	4607      	mov	r7, r0
 8001818:	4628      	mov	r0, r5
 800181a:	f7ff f939 	bl	8000a90 <__aeabi_fsub>
 800181e:	4601      	mov	r1, r0
 8001820:	4638      	mov	r0, r7
 8001822:	f7ff fa3f 	bl	8000ca4 <__aeabi_fmul>
 8001826:	68e1      	ldr	r1, [r4, #12]
 8001828:	f7ff f934 	bl	8000a94 <__addsf3>

	//Anti-wind-up via integrator clamping
	if (PID->PID_I>PID->PID_I_Max)
 800182c:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001830:	60e0      	str	r0, [r4, #12]
	if (PID->PID_I>PID->PID_I_Max)
 8001832:	4651      	mov	r1, sl
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001834:	4607      	mov	r7, r0
	if (PID->PID_I>PID->PID_I_Max)
 8001836:	f7ff fbf1 	bl	800101c <__aeabi_fcmpgt>
 800183a:	b110      	cbz	r0, 8001842 <PIDUpdate+0x5e>
	{
		PID->PID_I = PID->PID_I_Max;
	}
	else if (PID->PID_I<PID->PID_I_Min)
	{
		PID->PID_I = PID->PID_I_Min;
 800183c:	f8c4 a00c 	str.w	sl, [r4, #12]
 8001840:	e007      	b.n	8001852 <PIDUpdate+0x6e>
	else if (PID->PID_I<PID->PID_I_Min)
 8001842:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8001846:	4638      	mov	r0, r7
 8001848:	4651      	mov	r1, sl
 800184a:	f7ff fbc9 	bl	8000fe0 <__aeabi_fcmplt>
 800184e:	2800      	cmp	r0, #0
 8001850:	d1f4      	bne.n	800183c <PIDUpdate+0x58>
	}

	/* Calculate the DERIVATIVE part (band limited and measurement dependent) */
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001852:	6a21      	ldr	r1, [r4, #32]
 8001854:	4608      	mov	r0, r1
 8001856:	f7ff f91d 	bl	8000a94 <__addsf3>
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 800185a:	69e1      	ldr	r1, [r4, #28]
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 800185c:	4607      	mov	r7, r0
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 800185e:	4608      	mov	r0, r1
 8001860:	f7ff f918 	bl	8000a94 <__addsf3>
 8001864:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001866:	4682      	mov	sl, r0
 8001868:	4630      	mov	r0, r6
 800186a:	f7ff f911 	bl	8000a90 <__aeabi_fsub>
 800186e:	4601      	mov	r1, r0
 8001870:	4650      	mov	r0, sl
 8001872:	f7ff fa17 	bl	8000ca4 <__aeabi_fmul>
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001876:	4649      	mov	r1, r9
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001878:	4682      	mov	sl, r0
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 800187a:	4638      	mov	r0, r7
 800187c:	f7ff f908 	bl	8000a90 <__aeabi_fsub>
 8001880:	6921      	ldr	r1, [r4, #16]
 8001882:	f7ff fa0f 	bl	8000ca4 <__aeabi_fmul>
 8001886:	4601      	mov	r1, r0
 8001888:	4650      	mov	r0, sl
 800188a:	f7ff f903 	bl	8000a94 <__addsf3>
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 800188e:	4639      	mov	r1, r7
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001890:	f100 4a00 	add.w	sl, r0, #2147483648	; 0x80000000
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 8001894:	4648      	mov	r0, r9
 8001896:	f7ff f8fd 	bl	8000a94 <__addsf3>
 800189a:	4601      	mov	r1, r0
 800189c:	4650      	mov	r0, sl
 800189e:	f7ff fab5 	bl	8000e0c <__aeabi_fdiv>
 80018a2:	4607      	mov	r7, r0

	/* Calculate the total PID value and check the upper/lower output limits*/
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018a4:	68e1      	ldr	r1, [r4, #12]
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018a6:	6120      	str	r0, [r4, #16]
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018a8:	4640      	mov	r0, r8
 80018aa:	f7ff f8f3 	bl	8000a94 <__addsf3>
 80018ae:	4639      	mov	r1, r7
 80018b0:	f7ff f8f0 	bl	8000a94 <__addsf3>

	if (PID->OutputVal>PID->MaxOutputVal)
 80018b4:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018b8:	6060      	str	r0, [r4, #4]
	if (PID->OutputVal>PID->MaxOutputVal)
 80018ba:	4641      	mov	r1, r8
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018bc:	4607      	mov	r7, r0
	if (PID->OutputVal>PID->MaxOutputVal)
 80018be:	f7ff fbad 	bl	800101c <__aeabi_fcmpgt>
 80018c2:	b110      	cbz	r0, 80018ca <PIDUpdate+0xe6>
	{
		PID->OutputVal = PID->MaxOutputVal;
	}
	else if (PID->OutputVal<PID->MinOutputVal)
	{
		PID->OutputVal = PID->MinOutputVal;
 80018c4:	f8c4 8004 	str.w	r8, [r4, #4]
 80018c8:	e007      	b.n	80018da <PIDUpdate+0xf6>
	else if (PID->OutputVal<PID->MinOutputVal)
 80018ca:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 80018ce:	4638      	mov	r0, r7
 80018d0:	4641      	mov	r1, r8
 80018d2:	f7ff fb85 	bl	8000fe0 <__aeabi_fcmplt>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1f4      	bne.n	80018c4 <PIDUpdate+0xe0>
	/* Update the last values*/
	PID->lastError = PID->PID_Error;
	PID->lastInValue = ActValue;

	/* Return the actual PID output value */
	return (uint32_t)PID->OutputVal;
 80018da:	6860      	ldr	r0, [r4, #4]
	PID->lastError = PID->PID_Error;
 80018dc:	63a5      	str	r5, [r4, #56]	; 0x38
	PID->lastInValue = ActValue;
 80018de:	63e6      	str	r6, [r4, #60]	; 0x3c
	return (uint32_t)PID->OutputVal;
 80018e0:	f7ff fba6 	bl	8001030 <__aeabi_f2uiz>
}
 80018e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080018e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x48>)
{
 80018ea:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ee:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f0:	f042 0201 	orr.w	r2, r2, #1
 80018f4:	619a      	str	r2, [r3, #24]
 80018f6:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f8:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80018fc:	f002 0201 	and.w	r2, r2, #1
 8001900:	9200      	str	r2, [sp, #0]
 8001902:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800190a:	61da      	str	r2, [r3, #28]
 800190c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800190e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001918:	f001 f8da 	bl	8002ad0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_MspInit+0x4c>)
 800191e:	6853      	ldr	r3, [r2, #4]
 8001920:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001924:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001928:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	b003      	add	sp, #12
 800192c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000

08001938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001938:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	2610      	movs	r6, #16
{
 800193c:	4605      	mov	r5, r0
 800193e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	4632      	mov	r2, r6
 8001942:	2100      	movs	r1, #0
 8001944:	eb0d 0006 	add.w	r0, sp, r6
 8001948:	f007 fe58 	bl	80095fc <memset>
  if(hi2c->Instance==I2C1)
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	4a3b      	ldr	r2, [pc, #236]	; (8001a3c <HAL_I2C_MspInit+0x104>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d137      	bne.n	80019c4 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	4c3a      	ldr	r4, [pc, #232]	; (8001a40 <HAL_I2C_MspInit+0x108>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001956:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	4839      	ldr	r0, [pc, #228]	; (8001a44 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	61a3      	str	r3, [r4, #24]
 8001964:	69a3      	ldr	r3, [r4, #24]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196e:	2312      	movs	r3, #18
 8001970:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001974:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	eb0d 0106 	add.w	r1, sp, r6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f001 f9f2 	bl	8002d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_I2C_MspInit+0x110>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001982:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001984:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001986:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001988:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001992:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001994:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800199a:	61e3      	str	r3, [r4, #28]
 800199c:	69e3      	ldr	r3, [r4, #28]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019a6:	f001 f893 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019aa:	201f      	movs	r0, #31
 80019ac:	f001 f8c2 	bl	8002b34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80019b0:	2020      	movs	r0, #32
 80019b2:	2200      	movs	r2, #0
 80019b4:	2105      	movs	r1, #5
 80019b6:	f001 f88b 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019ba:	2020      	movs	r0, #32

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80019bc:	f001 f8ba 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019c0:	b008      	add	sp, #32
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2c->Instance==I2C2)
 80019c4:	4a21      	ldr	r2, [pc, #132]	; (8001a4c <HAL_I2C_MspInit+0x114>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d1fa      	bne.n	80019c0 <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4c1d      	ldr	r4, [pc, #116]	; (8001a40 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d2:	481c      	ldr	r0, [pc, #112]	; (8001a44 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	61a3      	str	r3, [r4, #24]
 80019da:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2303      	movs	r3, #3
 80019ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f001 f9b8 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f4:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019fc:	61e3      	str	r3, [r4, #28]
 80019fe:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001a00:	4c13      	ldr	r4, [pc, #76]	; (8001a50 <HAL_I2C_MspInit+0x118>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	9303      	str	r3, [sp, #12]
 8001a08:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_I2C_MspInit+0x11c>)
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a0c:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a0e:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a18:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a20:	f001 f896 	bl	8002b50 <HAL_DMA_Init>
 8001a24:	b108      	cbz	r0, 8001a2a <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001a26:	f7ff fe8d 	bl	8001744 <Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a2a:	2021      	movs	r0, #33	; 0x21
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2105      	movs	r1, #5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001a30:	636c      	str	r4, [r5, #52]	; 0x34
 8001a32:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a34:	f001 f84c 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a38:	2021      	movs	r0, #33	; 0x21
 8001a3a:	e7bf      	b.n	80019bc <HAL_I2C_MspInit+0x84>
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40005800 	.word	0x40005800
 8001a50:	200022b8 	.word	0x200022b8
 8001a54:	40020044 	.word	0x40020044

08001a58 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	2210      	movs	r2, #16
{
 8001a5a:	b510      	push	{r4, lr}
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	eb0d 0002 	add.w	r0, sp, r2
 8001a64:	2100      	movs	r1, #0
 8001a66:	f007 fdc9 	bl	80095fc <memset>
  if(hspi->Instance==SPI1)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_SPI_MspInit+0xe0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d12f      	bne.n	8001ad2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_SPI_MspInit+0xe4>)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2120      	movs	r1, #32
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a76:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	4831      	ldr	r0, [pc, #196]	; (8001b40 <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a7e:	619a      	str	r2, [r3, #24]
 8001a80:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a82:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a84:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a88:	9200      	str	r2, [sp, #0]
 8001a8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	699a      	ldr	r2, [r3, #24]
 8001a8e:	f042 0204 	orr.w	r2, r2, #4
 8001a92:	619a      	str	r2, [r3, #24]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f001 f95b 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aae:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	4823      	ldr	r0, [pc, #140]	; (8001b40 <HAL_SPI_MspInit+0xe8>)
 8001ab2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f001 f953 	bl	8002d64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001abe:	2023      	movs	r0, #35	; 0x23
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	f001 f804 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001ac8:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001aca:	f001 f833 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ace:	b008      	add	sp, #32
 8001ad0:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <HAL_SPI_MspInit+0xec>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d1fa      	bne.n	8001ace <HAL_SPI_MspInit+0x76>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_SPI_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	481b      	ldr	r0, [pc, #108]	; (8001b48 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001adc:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ae4:	61da      	str	r2, [r3, #28]
 8001ae6:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae8:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001aee:	9202      	str	r2, [sp, #8]
 8001af0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	699a      	ldr	r2, [r3, #24]
 8001af4:	f042 0208 	orr.w	r2, r2, #8
 8001af8:	619a      	str	r2, [r3, #24]
 8001afa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	9303      	str	r3, [sp, #12]
 8001b06:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f001 f927 	bl	8002d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	480b      	ldr	r0, [pc, #44]	; (8001b48 <HAL_SPI_MspInit+0xf0>)
 8001b1c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f001 f91e 	bl	8002d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b28:	2024      	movs	r0, #36	; 0x24
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	2105      	movs	r1, #5
 8001b2e:	f000 ffcf 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b32:	2024      	movs	r0, #36	; 0x24
 8001b34:	e7c9      	b.n	8001aca <HAL_SPI_MspInit+0x72>
 8001b36:	bf00      	nop
 8001b38:	40013000 	.word	0x40013000
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40003800 	.word	0x40003800
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001b4c:	6803      	ldr	r3, [r0, #0]
{
 8001b4e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d115      	bne.n	8001b82 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b5a:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b5c:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	61da      	str	r2, [r3, #28]
 8001b64:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b66:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b6e:	2105      	movs	r1, #5
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b70:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001b72:	f000 ffad 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b76:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b78:	b003      	add	sp, #12
 8001b7a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b7e:	f000 bfd9 	b.w	8002b34 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM4)
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <HAL_TIM_Base_MspInit+0x64>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d110      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b8a:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b8c:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b8e:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b90:	f042 0204 	orr.w	r2, r2, #4
 8001b94:	61da      	str	r2, [r3, #28]
 8001b96:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001b98:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ba2:	f000 ff95 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ba6:	201e      	movs	r0, #30
 8001ba8:	e7e6      	b.n	8001b78 <HAL_TIM_Base_MspInit+0x2c>
}
 8001baa:	b003      	add	sp, #12
 8001bac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bb0:	40000800 	.word	0x40000800
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	4604      	mov	r4, r0
 8001bbc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	a802      	add	r0, sp, #8
 8001bc4:	f007 fd1a 	bl	80095fc <memset>
  if(htim_encoder->Instance==TIM3)
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <HAL_TIM_Encoder_MspInit+0x68>)
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d125      	bne.n	8001c1c <HAL_TIM_Encoder_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001bd4:	69da      	ldr	r2, [r3, #28]
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd6:	4813      	ldr	r0, [pc, #76]	; (8001c24 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bd8:	f042 0202 	orr.w	r2, r2, #2
 8001bdc:	61da      	str	r2, [r3, #28]
 8001bde:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001be2:	f002 0202 	and.w	r2, r2, #2
 8001be6:	9200      	str	r2, [sp, #0]
 8001be8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	f042 0208 	orr.w	r2, r2, #8
 8001bf0:	619a      	str	r2, [r3, #24]
 8001bf2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f001 f8ad 	bl	8002d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c12:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c1a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c1c:	b006      	add	sp, #24
 8001c1e:	bd10      	pop	{r4, pc}
 8001c20:	40000400 	.word	0x40000400
 8001c24:	40010c00 	.word	0x40010c00
 8001c28:	40010000 	.word	0x40010000

08001c2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c2c:	b510      	push	{r4, lr}
 8001c2e:	4604      	mov	r4, r0
 8001c30:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c32:	2210      	movs	r2, #16
 8001c34:	2100      	movs	r1, #0
 8001c36:	a802      	add	r0, sp, #8
 8001c38:	f007 fce0 	bl	80095fc <memset>
  if(htim->Instance==TIM2)
 8001c3c:	6823      	ldr	r3, [r4, #0]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c42:	d112      	bne.n	8001c6a <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c44:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c48:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	f042 0204 	orr.w	r2, r2, #4
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c54:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8001c5e:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c66:	f001 f87d 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c6a:	b006      	add	sp, #24
 8001c6c:	bd10      	pop	{r4, pc}
 8001c6e:	bf00      	nop
 8001c70:	40010800 	.word	0x40010800

08001c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c74:	b510      	push	{r4, lr}
 8001c76:	4604      	mov	r4, r0
 8001c78:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	a802      	add	r0, sp, #8
 8001c80:	f007 fcbc 	bl	80095fc <memset>
  if(huart->Instance==USART2)
 8001c84:	6822      	ldr	r2, [r4, #0]
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_UART_MspInit+0x6c>)
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d126      	bne.n	8001cda <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c90:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	4814      	ldr	r0, [pc, #80]	; (8001ce4 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c98:	61da      	str	r2, [r3, #28]
 8001c9a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c9e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ca2:	9200      	str	r2, [sp, #0]
 8001ca4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	f042 0204 	orr.w	r2, r2, #4
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	9301      	str	r3, [sp, #4]
 8001cb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f001 f84e 	bl	8002d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2108      	movs	r1, #8
 8001cca:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cce:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f001 f845 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cda:	b006      	add	sp, #24
 8001cdc:	bd10      	pop	{r4, pc}
 8001cde:	bf00      	nop
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	40010800 	.word	0x40010800

08001ce8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b510      	push	{r4, lr}
 8001cea:	4601      	mov	r1, r0
 8001cec:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2019      	movs	r0, #25
 8001cf2:	f000 feed 	bl	8002ad0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001cf6:	2019      	movs	r0, #25
 8001cf8:	f000 ff1c 	bl	8002b34 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cfe:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d00:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d02:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d08:	619a      	str	r2, [r3, #24]
 8001d0a:	699b      	ldr	r3, [r3, #24]
  uwTimclock = HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d0c:	4c11      	ldr	r4, [pc, #68]	; (8001d54 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d12:	9302      	str	r3, [sp, #8]
 8001d14:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d16:	f003 fa35 	bl	8005184 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d1a:	f003 fa23 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_InitTick+0x70>)
 8001d20:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d22:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d26:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_InitTick+0x74>)
 8001d2a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001d2e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d30:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d32:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d34:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001d36:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d3a:	f003 ffa3 	bl	8005c84 <HAL_TIM_Base_Init>
 8001d3e:	b920      	cbnz	r0, 8001d4a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f003 fe3b 	bl	80059bc <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001d46:	b008      	add	sp, #32
 8001d48:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e7fb      	b.n	8001d46 <HAL_InitTick+0x5e>
 8001d4e:	bf00      	nop
 8001d50:	40021000 	.word	0x40021000
 8001d54:	200023dc 	.word	0x200023dc
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	000f4240 	.word	0x000f4240

08001d60 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler>

08001d62 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler>

08001d64 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <MemManage_Handler>

08001d66 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <BusFault_Handler>

08001d68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <UsageFault_Handler>

08001d6a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	4770      	bx	lr

08001d6c <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001d6c:	4801      	ldr	r0, [pc, #4]	; (8001d74 <DMA1_Channel4_IRQHandler+0x8>)
 8001d6e:	f000 bf63 	b.w	8002c38 <HAL_DMA_IRQHandler>
 8001d72:	bf00      	nop
 8001d74:	200022b8 	.word	0x200022b8

08001d78 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001d7a:	f002 ba1f 	b.w	80041bc <HAL_PCD_IRQHandler>
 8001d7e:	bf00      	nop
 8001d80:	20003104 	.word	0x20003104

08001d84 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <TIM1_UP_IRQHandler+0x8>)
 8001d86:	f003 bea3 	b.w	8005ad0 <HAL_TIM_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	200023dc 	.word	0x200023dc

08001d90 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d90:	4801      	ldr	r0, [pc, #4]	; (8001d98 <TIM2_IRQHandler+0x8>)
 8001d92:	f003 be9d 	b.w	8005ad0 <HAL_TIM_IRQHandler>
 8001d96:	bf00      	nop
 8001d98:	20002348 	.word	0x20002348

08001d9c <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d9c:	4801      	ldr	r0, [pc, #4]	; (8001da4 <TIM4_IRQHandler+0x8>)
 8001d9e:	f003 be97 	b.w	8005ad0 <HAL_TIM_IRQHandler>
 8001da2:	bf00      	nop
 8001da4:	200022fc 	.word	0x200022fc

08001da8 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001da8:	4801      	ldr	r0, [pc, #4]	; (8001db0 <I2C1_EV_IRQHandler+0x8>)
 8001daa:	f001 bc73 	b.w	8003694 <HAL_I2C_EV_IRQHandler>
 8001dae:	bf00      	nop
 8001db0:	20002094 	.word	0x20002094

08001db4 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001db4:	4801      	ldr	r0, [pc, #4]	; (8001dbc <I2C1_ER_IRQHandler+0x8>)
 8001db6:	f002 b8bd 	b.w	8003f34 <HAL_I2C_ER_IRQHandler>
 8001dba:	bf00      	nop
 8001dbc:	20002094 	.word	0x20002094

08001dc0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001dc0:	4801      	ldr	r0, [pc, #4]	; (8001dc8 <I2C2_EV_IRQHandler+0x8>)
 8001dc2:	f001 bc67 	b.w	8003694 <HAL_I2C_EV_IRQHandler>
 8001dc6:	bf00      	nop
 8001dc8:	20002040 	.word	0x20002040

08001dcc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dcc:	4801      	ldr	r0, [pc, #4]	; (8001dd4 <SPI1_IRQHandler+0x8>)
 8001dce:	f003 bcdd 	b.w	800578c <HAL_SPI_IRQHandler>
 8001dd2:	bf00      	nop
 8001dd4:	20001fa0 	.word	0x20001fa0

08001dd8 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001dd8:	4801      	ldr	r0, [pc, #4]	; (8001de0 <SPI2_IRQHandler+0x8>)
 8001dda:	f003 bcd7 	b.w	800578c <HAL_SPI_IRQHandler>
 8001dde:	bf00      	nop
 8001de0:	20001f30 	.word	0x20001f30

08001de4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001de4:	2001      	movs	r0, #1
 8001de6:	4770      	bx	lr

08001de8 <_kill>:

int _kill(int pid, int sig)
{
 8001de8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dea:	f007 fbcf 	bl	800958c <__errno>
 8001dee:	2316      	movs	r3, #22
 8001df0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001df2:	f04f 30ff 	mov.w	r0, #4294967295
 8001df6:	bd08      	pop	{r3, pc}

08001df8 <_exit>:

void _exit (int status)
{
 8001df8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001dfa:	f007 fbc7 	bl	800958c <__errno>
 8001dfe:	2316      	movs	r3, #22
 8001e00:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e02:	e7fe      	b.n	8001e02 <_exit+0xa>

08001e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e04:	b570      	push	{r4, r5, r6, lr}
 8001e06:	460e      	mov	r6, r1
 8001e08:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2500      	movs	r5, #0
 8001e0c:	42a5      	cmp	r5, r4
 8001e0e:	db01      	blt.n	8001e14 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001e10:	4620      	mov	r0, r4
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e14:	f3af 8000 	nop.w
 8001e18:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1a:	3501      	adds	r5, #1
 8001e1c:	e7f6      	b.n	8001e0c <_read+0x8>

08001e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1e:	b570      	push	{r4, r5, r6, lr}
 8001e20:	460e      	mov	r6, r1
 8001e22:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2500      	movs	r5, #0
 8001e26:	42a5      	cmp	r5, r4
 8001e28:	db01      	blt.n	8001e2e <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001e2e:	5d70      	ldrb	r0, [r6, r5]
 8001e30:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	3501      	adds	r5, #1
 8001e36:	e7f6      	b.n	8001e26 <_write+0x8>

08001e38 <_close>:

int _close(int file)
{
	return -1;
}
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	4770      	bx	lr

08001e3e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001e42:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001e44:	604b      	str	r3, [r1, #4]
}
 8001e46:	4770      	bx	lr

08001e48 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr

08001e50 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <_sbrk+0x30>)
{
 8001e52:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001e54:	6819      	ldr	r1, [r3, #0]
{
 8001e56:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001e58:	b909      	cbnz	r1, 8001e5e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001e5a:	490a      	ldr	r1, [pc, #40]	; (8001e84 <_sbrk+0x34>)
 8001e5c:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	4909      	ldr	r1, [pc, #36]	; (8001e88 <_sbrk+0x38>)
 8001e62:	4c0a      	ldr	r4, [pc, #40]	; (8001e8c <_sbrk+0x3c>)
 8001e64:	4402      	add	r2, r0
 8001e66:	1b09      	subs	r1, r1, r4
 8001e68:	428a      	cmp	r2, r1
 8001e6a:	d906      	bls.n	8001e7a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001e6c:	f007 fb8e 	bl	800958c <__errno>
 8001e70:	230c      	movs	r3, #12
 8001e72:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001e78:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001e7a:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001e7c:	e7fc      	b.n	8001e78 <_sbrk+0x28>
 8001e7e:	bf00      	nop
 8001e80:	20000a08 	.word	0x20000a08
 8001e84:	20003400 	.word	0x20003400
 8001e88:	20005000 	.word	0x20005000
 8001e8c:	00000400 	.word	0x00000400

08001e90 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e90:	4770      	bx	lr
	...

08001e94 <u8x8_byte_stm32_hw_i2c>:

extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e96:	3914      	subs	r1, #20
 8001e98:	290c      	cmp	r1, #12
 8001e9a:	d82d      	bhi.n	8001ef8 <u8x8_byte_stm32_hw_i2c+0x64>
 8001e9c:	e8df f001 	tbb	[pc, r1]
 8001ea0:	072c2c11 	.word	0x072c2c11
 8001ea4:	2c2c1f1b 	.word	0x2c2c1f1b
 8001ea8:	2c2c2c2c 	.word	0x2c2c2c2c
 8001eac:	11          	.byte	0x11
 8001ead:	00          	.byte	0x00
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
		{
			buffer[buf_idx++] = *data;
			data++;
 8001eae:	2400      	movs	r4, #0
 8001eb0:	4812      	ldr	r0, [pc, #72]	; (8001efc <u8x8_byte_stm32_hw_i2c+0x68>)
			buffer[buf_idx++] = *data;
 8001eb2:	4d13      	ldr	r5, [pc, #76]	; (8001f00 <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001eb4:	7801      	ldrb	r1, [r0, #0]
 8001eb6:	440a      	add	r2, r1
 8001eb8:	b2d2      	uxtb	r2, r2
		while( arg_int > 0 )
 8001eba:	4291      	cmp	r1, r2
 8001ebc:	d104      	bne.n	8001ec8 <u8x8_byte_stm32_hw_i2c+0x34>
 8001ebe:	b104      	cbz	r4, 8001ec2 <u8x8_byte_stm32_hw_i2c+0x2e>
 8001ec0:	7001      	strb	r1, [r0, #0]
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
		break;
	default:
		return 0;
	}
	return 1;
 8001ec2:	2001      	movs	r0, #1
}
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
			buffer[buf_idx++] = *data;
 8001ec8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001ecc:	1c4c      	adds	r4, r1, #1
 8001ece:	546e      	strb	r6, [r5, r1]
 8001ed0:	b2e1      	uxtb	r1, r4
			data++;
 8001ed2:	2401      	movs	r4, #1
 8001ed4:	e7f1      	b.n	8001eba <u8x8_byte_stm32_hw_i2c+0x26>
		buf_idx = 0;
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <u8x8_byte_stm32_hw_i2c+0x68>)
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e7f1      	b.n	8001ec2 <u8x8_byte_stm32_hw_i2c+0x2e>
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8001ede:	2364      	movs	r3, #100	; 0x64
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <u8x8_byte_stm32_hw_i2c+0x68>)
 8001ee4:	2178      	movs	r1, #120	; 0x78
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <u8x8_byte_stm32_hw_i2c+0x70>)
 8001eec:	f001 f996 	bl	800321c <HAL_I2C_Master_Transmit>
 8001ef0:	fab0 f080 	clz	r0, r0
 8001ef4:	0940      	lsrs	r0, r0, #5
 8001ef6:	e7e5      	b.n	8001ec4 <u8x8_byte_stm32_hw_i2c+0x30>
		return 0;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7e3      	b.n	8001ec4 <u8x8_byte_stm32_hw_i2c+0x30>
 8001efc:	20000a0c 	.word	0x20000a0c
 8001f00:	20000a0d 	.word	0x20000a0d
 8001f04:	20002040 	.word	0x20002040

08001f08 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 8001f08:	292d      	cmp	r1, #45	; 0x2d
{
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	b507      	push	{r0, r1, r2, lr}
 8001f0e:	4610      	mov	r0, r2
  switch(msg)
 8001f10:	d808      	bhi.n	8001f24 <psoc_gpio_and_delay_cb+0x1c>
 8001f12:	2927      	cmp	r1, #39	; 0x27
 8001f14:	d91a      	bls.n	8001f4c <psoc_gpio_and_delay_cb+0x44>
 8001f16:	3929      	subs	r1, #41	; 0x29
 8001f18:	2903      	cmp	r1, #3
 8001f1a:	d805      	bhi.n	8001f28 <psoc_gpio_and_delay_cb+0x20>
 8001f1c:	e8df f001 	tbb	[pc, r1]
 8001f20:	08040413 	.word	0x08040413
 8001f24:	294c      	cmp	r1, #76	; 0x4c
 8001f26:	d111      	bne.n	8001f4c <psoc_gpio_and_delay_cb+0x44>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8001f28:	2001      	movs	r0, #1
 8001f2a:	b003      	add	sp, #12
 8001f2c:	f85d fb04 	ldr.w	pc, [sp], #4
		for (i = 1; i <= arg_int*10; i++);
 8001f30:	220a      	movs	r2, #10
 8001f32:	2301      	movs	r3, #1
 8001f34:	4350      	muls	r0, r2
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	9b01      	ldr	r3, [sp, #4]
 8001f3a:	4298      	cmp	r0, r3
 8001f3c:	d3f4      	bcc.n	8001f28 <psoc_gpio_and_delay_cb+0x20>
 8001f3e:	9b01      	ldr	r3, [sp, #4]
 8001f40:	3301      	adds	r3, #1
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	e7f8      	b.n	8001f38 <psoc_gpio_and_delay_cb+0x30>
      HAL_Delay(arg_int);
 8001f46:	f000 fd9f 	bl	8002a88 <HAL_Delay>
      break;
 8001f4a:	e7ed      	b.n	8001f28 <psoc_gpio_and_delay_cb+0x20>
      u8x8_SetGPIOResult(u8x8, 1);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 8001f52:	e7e9      	b.n	8001f28 <psoc_gpio_and_delay_cb+0x20>

08001f54 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001f54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001f58:	18cf      	adds	r7, r1, r3
 8001f5a:	1c53      	adds	r3, r2, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	b2ff      	uxtb	r7, r7
  uint8_t color = u8g2->draw_color;
 8001f60:	f890 9086 	ldrb.w	r9, [r0, #134]	; 0x86
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	463b      	mov	r3, r7
{
 8001f68:	4605      	mov	r5, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	4690      	mov	r8, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001f6e:	f000 fa0b 	bl	8002388 <u8g2_IsIntersection>
 8001f72:	b150      	cbz	r0, 8001f8a <u8g2_DrawHXBM+0x36>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001f74:	fab9 fa89 	clz	sl, r9
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001f78:	2601      	movs	r6, #1
  while(len > 0) {
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001f7a:	f04f 0b00 	mov.w	fp, #0
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001f7e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  while(len > 0) {
 8001f82:	42a7      	cmp	r7, r4
 8001f84:	d104      	bne.n	8001f90 <u8g2_DrawHXBM+0x3c>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
 8001f86:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
}
 8001f8a:	b003      	add	sp, #12
 8001f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( *b & mask ) {
 8001f90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	421e      	tst	r6, r3
 8001f96:	d017      	beq.n	8001fc8 <u8g2_DrawHXBM+0x74>
      u8g2->draw_color = color;
 8001f98:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001f9c:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	4642      	mov	r2, r8
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f000 f977 	bl	800229a <u8g2_DrawHVLine>
    mask <<= 1;
 8001fac:	0076      	lsls	r6, r6, #1
    if ( mask == 0 )
 8001fae:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      b++;
 8001fb2:	bf08      	it	eq
 8001fb4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
    x++;
 8001fb6:	f104 0401 	add.w	r4, r4, #1
      b++;
 8001fba:	bf04      	itt	eq
 8001fbc:	3301      	addeq	r3, #1
      mask = 1;
 8001fbe:	2601      	moveq	r6, #1
    x++;
 8001fc0:	b2e4      	uxtb	r4, r4
      b++;
 8001fc2:	bf08      	it	eq
 8001fc4:	930c      	streq	r3, [sp, #48]	; 0x30
    len--;
 8001fc6:	e7dc      	b.n	8001f82 <u8g2_DrawHXBM+0x2e>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001fc8:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ed      	bne.n	8001fac <u8g2_DrawHXBM+0x58>
      u8g2->draw_color = ncolor;
 8001fd0:	f885 a086 	strb.w	sl, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	e7e3      	b.n	8001fa0 <u8g2_DrawHXBM+0x4c>

08001fd8 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001fd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001fdc:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
{
 8001fe0:	461e      	mov	r6, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001fe2:	4415      	add	r5, r2
 8001fe4:	b2ed      	uxtb	r5, r5
 8001fe6:	440b      	add	r3, r1
 8001fe8:	9500      	str	r5, [sp, #0]
 8001fea:	b2db      	uxtb	r3, r3
{
 8001fec:	4681      	mov	r9, r0
 8001fee:	460f      	mov	r7, r1
 8001ff0:	4614      	mov	r4, r2
 8001ff2:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001ff6:	f000 f9c7 	bl	8002388 <u8g2_IsIntersection>
 8001ffa:	b128      	cbz	r0, 8002008 <u8g2_DrawXBM+0x30>
  blen += 7;
 8001ffc:	f106 0807 	add.w	r8, r6, #7
  blen >>= 3;
 8002000:	f3c8 08c4 	ubfx	r8, r8, #3, #5
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8002004:	42a5      	cmp	r5, r4
 8002006:	d102      	bne.n	800200e <u8g2_DrawXBM+0x36>
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
    y++;
    h--;
  }
}
 8002008:	b002      	add	sp, #8
 800200a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800200e:	4622      	mov	r2, r4
 8002010:	f8cd a000 	str.w	sl, [sp]
 8002014:	4633      	mov	r3, r6
 8002016:	4639      	mov	r1, r7
 8002018:	4648      	mov	r0, r9
    y++;
 800201a:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800201c:	f7ff ff9a 	bl	8001f54 <u8g2_DrawHXBM>
    bitmap += blen;
 8002020:	44c2      	add	sl, r8
    y++;
 8002022:	b2e4      	uxtb	r4, r4
    h--;
 8002024:	e7ee      	b.n	8002004 <u8g2_DrawXBM+0x2c>

08002026 <u8g2_DrawXBMP>:
 8002026:	b410      	push	{r4}
 8002028:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800202c:	9401      	str	r4, [sp, #4]
 800202e:	bc10      	pop	{r4}
 8002030:	f7ff bfd2 	b.w	8001fd8 <u8g2_DrawXBM>

08002034 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002038:	4604      	mov	r4, r0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 800203a:	2600      	movs	r6, #0
 800203c:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 800203e:	f890 903c 	ldrb.w	r9, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 8002042:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002046:	f893 8011 	ldrb.w	r8, [r3, #17]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800204a:	6823      	ldr	r3, [r4, #0]
  ptr = u8g2->tile_buf_ptr;
 800204c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800204e:	7c1b      	ldrb	r3, [r3, #16]
 8002050:	b2f5      	uxtb	r5, r6
  offset *= 8;
 8002052:	fb06 f103 	mul.w	r1, r6, r3
 8002056:	b289      	uxth	r1, r1
 8002058:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 800205a:	b289      	uxth	r1, r1
 800205c:	4401      	add	r1, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800205e:	197a      	adds	r2, r7, r5
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 8002060:	3501      	adds	r5, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002062:	9100      	str	r1, [sp, #0]
 8002064:	4620      	mov	r0, r4
 8002066:	2100      	movs	r1, #0
 8002068:	b2d2      	uxtb	r2, r2
  } while( src_row < src_max && dest_row < dest_max );
 800206a:	b2ed      	uxtb	r5, r5
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800206c:	f000 fc39 	bl	80028e2 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 8002070:	45a9      	cmp	r9, r5
 8002072:	d904      	bls.n	800207e <u8g2_send_buffer+0x4a>
 8002074:	3601      	adds	r6, #1
 8002076:	19bb      	adds	r3, r7, r6
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4598      	cmp	r8, r3
 800207c:	d8e5      	bhi.n	800204a <u8g2_send_buffer+0x16>
}
 800207e:	b003      	add	sp, #12
 8002080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002084 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002084:	6803      	ldr	r3, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 8002086:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800208a:	7c1b      	ldrb	r3, [r3, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800208c:	2100      	movs	r1, #0
 800208e:	435a      	muls	r2, r3
 8002090:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002092:	00d2      	lsls	r2, r2, #3
 8002094:	f007 bab2 	b.w	80095fc <memset>

08002098 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8002098:	b510      	push	{r4, lr}
 800209a:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 800209c:	f7ff ffca 	bl	8002034 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80020a0:	4620      	mov	r0, r4
}
 80020a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80020a6:	f000 bc44 	b.w	8002932 <u8x8_RefreshDisplay>

080020aa <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80020aa:	b510      	push	{r4, lr}
 80020ac:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 80020ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->tile_curr_row = row;
 80020b0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80020b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020ba:	4620      	mov	r0, r4
}
 80020bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4718      	bx	r3

080020c4 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80020c4:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 80020c6:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
{
 80020ca:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 80020cc:	b10b      	cbz	r3, 80020d2 <u8g2_FirstPage+0xe>
  {
    u8g2_ClearBuffer(u8g2);
 80020ce:	f7ff ffd9 	bl	8002084 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80020d2:	4620      	mov	r0, r4
}
 80020d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80020d8:	2100      	movs	r1, #0
 80020da:	f7ff bfe6 	b.w	80020aa <u8g2_SetBufferCurrTileRow>

080020de <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80020de:	b538      	push	{r3, r4, r5, lr}
 80020e0:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80020e2:	f7ff ffa7 	bl	8002034 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80020e6:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 80020ea:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80020ee:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 80020f0:	440d      	add	r5, r1
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80020f2:	7c5b      	ldrb	r3, [r3, #17]
  row += u8g2->tile_buf_height;
 80020f4:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80020f6:	42ab      	cmp	r3, r5
 80020f8:	d804      	bhi.n	8002104 <u8g2_NextPage+0x26>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80020fa:	4620      	mov	r0, r4
 80020fc:	f000 fc19 	bl	8002932 <u8x8_RefreshDisplay>
    return 0;
 8002100:	2000      	movs	r0, #0
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
 8002102:	bd38      	pop	{r3, r4, r5, pc}
  if ( u8g2->is_auto_page_clear )
 8002104:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8002108:	b113      	cbz	r3, 8002110 <u8g2_NextPage+0x32>
    u8g2_ClearBuffer(u8g2);
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff ffba 	bl	8002084 <u8g2_ClearBuffer>
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7ff ffc9 	bl	80020aa <u8g2_SetBufferCurrTileRow>
  return 1;
 8002118:	2001      	movs	r0, #1
 800211a:	e7f2      	b.n	8002102 <u8g2_NextPage+0x24>

0800211c <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 800211c:	b510      	push	{r4, lr}
 800211e:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 8002120:	f7ff ffd0 	bl	80020c4 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002124:	4620      	mov	r0, r4
 8002126:	f7ff ffda 	bl	80020de <u8g2_NextPage>
 800212a:	4601      	mov	r1, r0
 800212c:	2800      	cmp	r0, #0
 800212e:	d1f9      	bne.n	8002124 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002130:	4620      	mov	r0, r4
}
 8002132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002136:	f7ff bfb8 	b.w	80020aa <u8g2_SetBufferCurrTileRow>
	...

0800213c <u8g2_m_16_8_f>:
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
  static uint8_t buf[1024];
  *page_cnt = 8;
 800213c:	2308      	movs	r3, #8
 800213e:	7003      	strb	r3, [r0, #0]
  return buf;
}
 8002140:	4800      	ldr	r0, [pc, #0]	; (8002144 <u8g2_m_16_8_f+0x8>)
 8002142:	4770      	bx	lr
 8002144:	20000a2d 	.word	0x20000a2d

08002148 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002148:	b530      	push	{r4, r5, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4909      	ldr	r1, [pc, #36]	; (8002178 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 8002152:	4613      	mov	r3, r2
 8002154:	4a09      	ldr	r2, [pc, #36]	; (800217c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
{
 8002156:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002158:	f000 fc10 	bl	800297c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 800215c:	f10d 000f 	add.w	r0, sp, #15
 8002160:	f7ff ffec 	bl	800213c <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
  buf = u8g2_m_16_8_f(&tile_buf_height);
 8002166:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8002168:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800216c:	4620      	mov	r0, r4
 800216e:	9500      	str	r5, [sp, #0]
 8002170:	f000 f9f2 	bl	8002558 <u8g2_SetupBuffer>
}
 8002174:	b005      	add	sp, #20
 8002176:	bd30      	pop	{r4, r5, pc}
 8002178:	08002841 	.word	0x08002841
 800217c:	080026b9 	.word	0x080026b9
 8002180:	080023b9 	.word	0x080023b9

08002184 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 8002184:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 8002186:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 8002188:	7850      	ldrb	r0, [r2, #1]
 800218a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 800218e:	b280      	uxth	r0, r0
 8002190:	4770      	bx	lr

08002192 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8002192:	2000      	movs	r0, #0
 8002194:	4770      	bx	lr

08002196 <u8g2_read_font_info>:
{
 8002196:	b538      	push	{r3, r4, r5, lr}
  return u8x8_pgm_read( font );  
 8002198:	780b      	ldrb	r3, [r1, #0]
{
 800219a:	460d      	mov	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800219c:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 800219e:	784b      	ldrb	r3, [r1, #1]
{
 80021a0:	4604      	mov	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80021a2:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 80021a4:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80021a6:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 80021a8:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80021aa:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 80021ac:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80021ae:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 80021b0:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80021b2:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 80021b4:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80021b6:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 80021b8:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80021ba:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 80021bc:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80021be:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80021c0:	7a4b      	ldrb	r3, [r1, #9]
 80021c2:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80021c4:	7a8b      	ldrb	r3, [r1, #10]
 80021c6:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80021c8:	7acb      	ldrb	r3, [r1, #11]
 80021ca:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80021cc:	7b0b      	ldrb	r3, [r1, #12]
 80021ce:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80021d0:	7b4b      	ldrb	r3, [r1, #13]
 80021d2:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80021d4:	7b8b      	ldrb	r3, [r1, #14]
 80021d6:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80021d8:	7bcb      	ldrb	r3, [r1, #15]
 80021da:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80021dc:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80021de:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80021e0:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80021e2:	4628      	mov	r0, r5
 80021e4:	f7ff ffce 	bl	8002184 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80021e8:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80021ea:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80021ec:	4628      	mov	r0, r5
 80021ee:	f7ff ffc9 	bl	8002184 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80021f2:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80021f4:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80021f6:	4628      	mov	r0, r5
 80021f8:	f7ff ffc4 	bl	8002184 <u8g2_font_get_word>
 80021fc:	82e0      	strh	r0, [r4, #22]
}
 80021fe:	bd38      	pop	{r3, r4, r5, pc}

08002200 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 8002200:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8002202:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 8002204:	b1c3      	cbz	r3, 8002238 <u8g2_UpdateRefHeight+0x38>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002206:	f990 4075 	ldrsb.w	r4, [r0, #117]	; 0x75
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800220a:	f990 1076 	ldrsb.w	r1, [r0, #118]	; 0x76
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800220e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002212:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002216:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800221a:	b16b      	cbz	r3, 8002238 <u8g2_UpdateRefHeight+0x38>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <u8g2_UpdateRefHeight+0x3a>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002220:	f990 3077 	ldrsb.w	r3, [r0, #119]	; 0x77
 8002224:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002226:	bfb8      	it	lt
 8002228:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 800222c:	f990 3078 	ldrsb.w	r3, [r0, #120]	; 0x78
 8002230:	4299      	cmp	r1, r3
 8002232:	dd01      	ble.n	8002238 <u8g2_UpdateRefHeight+0x38>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002234:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
}
 8002238:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 800223a:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
 800223e:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
 8002242:	4413      	add	r3, r2
 8002244:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002246:	bfb8      	it	lt
 8002248:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800224c:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800224e:	bfc8      	it	gt
 8002250:	f880 2083 	strbgt.w	r2, [r0, #131]	; 0x83
 8002254:	e7f0      	b.n	8002238 <u8g2_UpdateRefHeight+0x38>
	...

08002258 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <u8g2_SetFontPosBaseline+0x8>)
 800225a:	6543      	str	r3, [r0, #84]	; 0x54
}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	08002193 	.word	0x08002193

08002264 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8002264:	6d02      	ldr	r2, [r0, #80]	; 0x50
{
 8002266:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 8002268:	428a      	cmp	r2, r1
{
 800226a:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 800226c:	d008      	beq.n	8002280 <u8g2_SetFont+0x1c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800226e:	6501      	str	r1, [r0, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8002270:	3068      	adds	r0, #104	; 0x68
 8002272:	f7ff ff90 	bl	8002196 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002276:	4620      	mov	r0, r4
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8002278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 800227c:	f7ff bfc0 	b.w	8002200 <u8g2_UpdateRefHeight>
}
 8002280:	bd10      	pop	{r4, pc}

08002282 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002282:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002284:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
{
 8002288:	f89d 500c 	ldrb.w	r5, [sp, #12]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800228c:	6b04      	ldr	r4, [r0, #48]	; 0x30
  y -= u8g2->pixel_curr_row;
 800228e:	1b92      	subs	r2, r2, r6
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002290:	46a4      	mov	ip, r4
 8002292:	9503      	str	r5, [sp, #12]
 8002294:	b2d2      	uxtb	r2, r2
}
 8002296:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002298:	4760      	bx	ip

0800229a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800229a:	b470      	push	{r4, r5, r6}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800229c:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
{
 80022a0:	f89d 500c 	ldrb.w	r5, [sp, #12]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d03a      	beq.n	800231e <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d038      	beq.n	800231e <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d904      	bls.n	80022ba <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 80022b0:	2d02      	cmp	r5, #2
 80022b2:	d12b      	bne.n	800230c <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 80022b4:	3101      	adds	r1, #1
 80022b6:	1ac9      	subs	r1, r1, r3
 80022b8:	b2c9      	uxtb	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 80022ba:	f015 0501 	ands.w	r5, r5, #1
 80022be:	d130      	bne.n	8002322 <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 80022c0:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 80022c4:	4294      	cmp	r4, r2
 80022c6:	d82a      	bhi.n	800231e <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 80022c8:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 80022cc:	4294      	cmp	r4, r2
 80022ce:	d926      	bls.n	800231e <u8g2_DrawHVLine+0x84>
  b += *len;
 80022d0:	440b      	add	r3, r1
 80022d2:	b2db      	uxtb	r3, r3
  if ( a > b )
 80022d4:	428b      	cmp	r3, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80022d6:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 80022da:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
  if ( a > b )
 80022de:	d21c      	bcs.n	800231a <u8g2_DrawHVLine+0x80>
    if ( a < d )
 80022e0:	428c      	cmp	r4, r1
 80022e2:	d919      	bls.n	8002318 <u8g2_DrawHVLine+0x7e>
      b--;
 80022e4:	1e63      	subs	r3, r4, #1
 80022e6:	b2db      	uxtb	r3, r3
  if ( b <= c )
 80022e8:	429e      	cmp	r6, r3
 80022ea:	d218      	bcs.n	800231e <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 80022ec:	42b1      	cmp	r1, r6
 80022ee:	bf38      	it	cc
 80022f0:	4631      	movcc	r1, r6
  b -= a;
 80022f2:	429c      	cmp	r4, r3
 80022f4:	bf94      	ite	ls
 80022f6:	ebc1 0404 	rsbls	r4, r1, r4
 80022fa:	ebc1 0403 	rsbhi	r4, r1, r3
 80022fe:	b2e3      	uxtb	r3, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002300:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002302:	9503      	str	r5, [sp, #12]
 8002304:	68a4      	ldr	r4, [r4, #8]
 8002306:	46a4      	mov	ip, r4
    }
}
 8002308:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800230a:	4760      	bx	ip
	else if ( dir == 3 )
 800230c:	2d03      	cmp	r5, #3
	  y++;
 800230e:	bf02      	ittt	eq
 8002310:	3201      	addeq	r2, #1
 8002312:	1ad2      	subeq	r2, r2, r3
 8002314:	b2d2      	uxtbeq	r2, r2
 8002316:	e7d0      	b.n	80022ba <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002318:	4631      	mov	r1, r6
  if ( a >= d )
 800231a:	428c      	cmp	r4, r1
 800231c:	d8e4      	bhi.n	80022e8 <u8g2_DrawHVLine+0x4e>
}
 800231e:	bc70      	pop	{r4, r5, r6}
 8002320:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 8002322:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002326:	428c      	cmp	r4, r1
 8002328:	d8f9      	bhi.n	800231e <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 800232a:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 800232e:	428c      	cmp	r4, r1
 8002330:	d9f5      	bls.n	800231e <u8g2_DrawHVLine+0x84>
  b += *len;
 8002332:	4413      	add	r3, r2
 8002334:	b2db      	uxtb	r3, r3
  if ( a > b )
 8002336:	4293      	cmp	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002338:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 800233c:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
  if ( a > b )
 8002340:	d210      	bcs.n	8002364 <u8g2_DrawHVLine+0xca>
    if ( a < d )
 8002342:	4294      	cmp	r4, r2
 8002344:	d90d      	bls.n	8002362 <u8g2_DrawHVLine+0xc8>
      b--;
 8002346:	1e63      	subs	r3, r4, #1
 8002348:	b2db      	uxtb	r3, r3
  if ( b <= c )
 800234a:	429e      	cmp	r6, r3
 800234c:	d2e7      	bcs.n	800231e <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 800234e:	42b2      	cmp	r2, r6
 8002350:	bf38      	it	cc
 8002352:	4632      	movcc	r2, r6
  b -= a;
 8002354:	429c      	cmp	r4, r3
 8002356:	bf94      	ite	ls
 8002358:	ebc2 0404 	rsbls	r4, r2, r4
 800235c:	ebc2 0403 	rsbhi	r4, r2, r3
 8002360:	e7cd      	b.n	80022fe <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002362:	4632      	mov	r2, r6
  if ( a >= d )
 8002364:	4294      	cmp	r4, r2
 8002366:	d8f0      	bhi.n	800234a <u8g2_DrawHVLine+0xb0>
 8002368:	e7d9      	b.n	800231e <u8g2_DrawHVLine+0x84>

0800236a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 800236a:	428a      	cmp	r2, r1
 800236c:	d206      	bcs.n	800237c <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 800236e:	4283      	cmp	r3, r0
 8002370:	d808      	bhi.n	8002384 <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
 8002372:	429a      	cmp	r2, r3
 8002374:	bf94      	ite	ls
 8002376:	2000      	movls	r0, #0
 8002378:	2001      	movhi	r0, #1
 800237a:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 800237c:	4283      	cmp	r3, r0
 800237e:	d8f8      	bhi.n	8002372 <u8g2_is_intersection_decision_tree+0x8>
	return 0;
      }
    }
    else
    {
      return 0;
 8002380:	2000      	movs	r0, #0
 8002382:	4770      	bx	lr
      return 1;
 8002384:	2001      	movs	r0, #1
    }
  }
}
 8002386:	4770      	bx	lr

08002388 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	4604      	mov	r4, r0
 800238c:	460d      	mov	r5, r1
 800238e:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002390:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8002394:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002398:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 800239c:	f7ff ffe5 	bl	800236a <u8g2_is_intersection_decision_tree>
 80023a0:	b148      	cbz	r0, 80023b6 <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80023a2:	4633      	mov	r3, r6
 80023a4:	462a      	mov	r2, r5
 80023a6:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80023aa:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
}
 80023ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80023b2:	f7ff bfda 	b.w	800236a <u8g2_is_intersection_decision_tree>
}
 80023b6:	bd70      	pop	{r4, r5, r6, pc}

080023b8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 80023ba:	2401      	movs	r4, #1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 80023bc:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80023c0:	f002 0607 	and.w	r6, r2, #7
  mask <<= bit_pos;
 80023c4:	40b4      	lsls	r4, r6
  if ( u8g2->draw_color <= 1 )
 80023c6:	2d01      	cmp	r5, #1
{
 80023c8:	f89d 7014 	ldrb.w	r7, [sp, #20]
  mask <<= bit_pos;
 80023cc:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 80023ce:	d815      	bhi.n	80023fc <u8g2_ll_hvline_vertical_top_lsb+0x44>
    or_mask  = mask;
 80023d0:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 80023d2:	d015      	beq.n	8002400 <u8g2_ll_hvline_vertical_top_lsb+0x48>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 80023d4:	f002 0cf8 	and.w	ip, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80023d8:	6802      	ldr	r2, [r0, #0]
 80023da:	f892 e010 	ldrb.w	lr, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 80023de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80023e0:	fb0e 110c 	mla	r1, lr, ip, r1
 80023e4:	4411      	add	r1, r2
  
  if ( dir == 0 )
 80023e6:	b96f      	cbnz	r7, 8002404 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80023e8:	780a      	ldrb	r2, [r1, #0]
	*ptr ^= xor_mask;
	ptr++;
	len--;
 80023ea:	3b01      	subs	r3, #1
	*ptr |= or_mask;
 80023ec:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 80023ee:	4062      	eors	r2, r4
      } while( len != 0 );
 80023f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	*ptr ^= xor_mask;
 80023f4:	f801 2b01 	strb.w	r2, [r1], #1
      } while( len != 0 );
 80023f8:	d1f6      	bne.n	80023e8 <u8g2_ll_hvline_vertical_top_lsb+0x30>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 80023fc:	2500      	movs	r5, #0
 80023fe:	e7e9      	b.n	80023d4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  xor_mask = 0;
 8002400:	2400      	movs	r4, #0
 8002402:	e7e7      	b.n	80023d4 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
      *ptr |= or_mask;
 8002404:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 8002406:	3601      	adds	r6, #1
      *ptr |= or_mask;
 8002408:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 800240a:	4062      	eors	r2, r4
      len--;
 800240c:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 800240e:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
 8002412:	700a      	strb	r2, [r1, #0]
      len--;
 8002414:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 8002416:	d10c      	bne.n	8002432 <u8g2_ll_hvline_vertical_top_lsb+0x7a>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002418:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800241c:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 800241e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 8002422:	2a01      	cmp	r2, #1
 8002424:	d80a      	bhi.n	800243c <u8g2_ll_hvline_vertical_top_lsb+0x84>
	if ( u8g2->draw_color != 1 )
 8002426:	d00b      	beq.n	8002440 <u8g2_ll_hvline_vertical_top_lsb+0x88>
	  xor_mask = 1;
 8002428:	2401      	movs	r4, #1
	  or_mask  = 1;
 800242a:	4625      	mov	r5, r4
    } while( len != 0 );
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1e9      	bne.n	8002404 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 8002430:	e7e3      	b.n	80023fa <u8g2_ll_hvline_vertical_top_lsb+0x42>
	or_mask <<= 1;
 8002432:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 8002434:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 8002436:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8002438:	b2e4      	uxtb	r4, r4
 800243a:	e7f7      	b.n	800242c <u8g2_ll_hvline_vertical_top_lsb+0x74>
	  xor_mask = 1;
 800243c:	2401      	movs	r4, #1
 800243e:	e7f5      	b.n	800242c <u8g2_ll_hvline_vertical_top_lsb+0x74>
	  or_mask  = 1;
 8002440:	4615      	mov	r5, r2
 8002442:	e7f3      	b.n	800242c <u8g2_ll_hvline_vertical_top_lsb+0x74>

08002444 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002444:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002446:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800244a:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 800244c:	00e3      	lsls	r3, r4, #3
  u8g2->pixel_buf_height = t;
 800244e:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  
  t = display_info->tile_width;
 8002452:	7c0a      	ldrb	r2, [r1, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 8002454:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8002458:	2a1f      	cmp	r2, #31
 800245a:	bf28      	it	cs
 800245c:	221f      	movcs	r2, #31
  t *= 8;
 800245e:	00eb      	lsls	r3, r5, #3
 8002460:	b2db      	uxtb	r3, r3
  t *= 8;
 8002462:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_curr_row = t;
 8002464:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  u8g2->pixel_buf_width = t;
 8002468:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800246c:	7c4a      	ldrb	r2, [r1, #17]
 800246e:	1966      	adds	r6, r4, r5
 8002470:	4296      	cmp	r6, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002472:	bfc8      	it	gt
 8002474:	1b54      	subgt	r4, r2, r5
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8002476:	f04f 02f0 	mov.w	r2, #240	; 0xf0
    t = display_info->tile_height - u8g2->tile_curr_row;
 800247a:	bfc8      	it	gt
 800247c:	b2e4      	uxtbgt	r4, r4
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800247e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  u8g2->buf_y1 += t;
 8002482:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  u8g2->width = 240;
 8002486:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
  u8g2->buf_y1 += t;
 800248a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if ( display_info->pixel_width <= 240 )
 800248e:	8a8b      	ldrh	r3, [r1, #20]
    u8g2->width = display_info->pixel_width;
 8002490:	4293      	cmp	r3, r2
 8002492:	bf88      	it	hi
 8002494:	4613      	movhi	r3, r2
 8002496:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 800249a:	8acb      	ldrh	r3, [r1, #22]
 800249c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
#endif

}
 80024a0:	bd70      	pop	{r4, r5, r6, pc}

080024a2 <u8g2_update_dimension_r0>:
/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
 80024a2:	f7ff bfcf 	b.w	8002444 <u8g2_update_dimension_common>

080024a6 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80024a6:	b410      	push	{r4}
 80024a8:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80024ac:	9401      	str	r4, [sp, #4]
}
 80024ae:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80024b0:	f7ff bee7 	b.w	8002282 <u8g2_draw_hv_line_2dir>

080024b4 <u8g2_apply_clip_window>:
{
 80024b4:	b513      	push	{r0, r1, r4, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80024b6:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
 80024ba:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80024c2:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 80024c6:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 80024ca:	f7ff ff5d 	bl	8002388 <u8g2_IsIntersection>
 80024ce:	b918      	cbnz	r0, 80024d8 <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 80024d0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 80024d4:	b002      	add	sp, #8
 80024d6:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 80024d8:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80024da:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    u8g2->is_page_clip_window_intersection = 1;
 80024de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80024e2:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80024e6:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 80024e8:	bf38      	it	cc
 80024ea:	f884 3045 	strbcc.w	r3, [r4, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80024ee:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80024f2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80024f6:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 80024f8:	bf88      	it	hi
 80024fa:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80024fe:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8002502:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8002506:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8002508:	bf38      	it	cc
 800250a:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800250e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002512:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002516:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 8002518:	bf88      	it	hi
 800251a:	f884 3048 	strbhi.w	r3, [r4, #72]	; 0x48
}
 800251e:	e7d9      	b.n	80024d4 <u8g2_apply_clip_window+0x20>

08002520 <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8002520:	2200      	movs	r2, #0
 8002522:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002526:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 800252a:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  u8g2->user_y0 = u8g2->buf_y0;
 800252e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002532:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002536:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 800253a:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  u8g2_apply_clip_window(u8g2);
 800253e:	f7ff bfb9 	b.w	80024b4 <u8g2_apply_clip_window>

08002542 <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 8002542:	2200      	movs	r2, #0
 8002544:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002548:	22ff      	movs	r2, #255	; 0xff
  u8g2->cb->update_page_win(u8g2);
 800254a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800254c:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002550:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  u8g2->cb->update_page_win(u8g2);
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4718      	bx	r3

08002558 <u8g2_SetupBuffer>:
{
 8002558:	b570      	push	{r4, r5, r6, lr}
  u8g2->font = NULL;
 800255a:	2500      	movs	r5, #0
  u8g2->ll_hvline = ll_hvline_cb;
 800255c:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->draw_color = 1;
 800255e:	f240 1301 	movw	r3, #257	; 0x101
{
 8002562:	4604      	mov	r4, r0
 8002564:	9e04      	ldr	r6, [sp, #16]
  u8g2->tile_buf_height = tile_buf_height;
 8002566:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 800256a:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800256e:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8002572:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
  u8g2->draw_color = 1;
 8002576:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  u8g2->tile_buf_ptr = buf;
 800257a:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->cb->update_dimension(u8g2);
 800257c:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 800257e:	6505      	str	r5, [r0, #80]	; 0x50
  u8g2->cb = u8g2_cb;
 8002580:	6346      	str	r6, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002582:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002584:	4620      	mov	r0, r4
 8002586:	f7ff ffdc 	bl	8002542 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800258a:	4620      	mov	r0, r4
 800258c:	f7ff fe64 	bl	8002258 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8002590:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
}
 8002594:	bd70      	pop	{r4, r5, r6, pc}

08002596 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002596:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002598:	6904      	ldr	r4, [r0, #16]
{
 800259a:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 800259c:	46a4      	mov	ip, r4
 800259e:	460a      	mov	r2, r1
}
 80025a0:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80025a2:	2117      	movs	r1, #23
 80025a4:	4760      	bx	ip

080025a6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80025a6:	b507      	push	{r0, r1, r2, lr}
 80025a8:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80025ac:	f10d 0207 	add.w	r2, sp, #7
 80025b0:	2101      	movs	r1, #1
 80025b2:	f7ff fff0 	bl	8002596 <u8x8_byte_SendBytes>
}
 80025b6:	b003      	add	sp, #12
 80025b8:	f85d fb04 	ldr.w	pc, [sp], #4

080025bc <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80025bc:	2300      	movs	r3, #0
{
 80025be:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80025c0:	6904      	ldr	r4, [r0, #16]
 80025c2:	461a      	mov	r2, r3
 80025c4:	46a4      	mov	ip, r4
 80025c6:	2118      	movs	r1, #24
}
 80025c8:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80025ca:	4760      	bx	ip

080025cc <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80025cc:	2300      	movs	r3, #0
{
 80025ce:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80025d0:	6904      	ldr	r4, [r0, #16]
 80025d2:	461a      	mov	r2, r3
 80025d4:	46a4      	mov	ip, r4
 80025d6:	2119      	movs	r1, #25
}
 80025d8:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80025da:	4760      	bx	ip

080025dc <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80025dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025de:	4604      	mov	r4, r0
 80025e0:	4616      	mov	r6, r2
 80025e2:	460d      	mov	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
 80025e4:	f7ff ffea 	bl	80025bc <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80025e8:	2140      	movs	r1, #64	; 0x40
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7ff ffdb 	bl	80025a6 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80025f0:	4633      	mov	r3, r6
 80025f2:	462a      	mov	r2, r5
 80025f4:	4620      	mov	r0, r4
 80025f6:	6927      	ldr	r7, [r4, #16]
 80025f8:	2117      	movs	r1, #23
 80025fa:	47b8      	blx	r7
    u8x8_byte_EndTransfer(u8x8);
 80025fc:	4620      	mov	r0, r4
}
 80025fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    u8x8_byte_EndTransfer(u8x8);
 8002602:	f7ff bfe3 	b.w	80025cc <u8x8_byte_EndTransfer>

08002606 <u8x8_cad_SendCmd>:
{
 8002606:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002608:	68c4      	ldr	r4, [r0, #12]
{
 800260a:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800260c:	46a4      	mov	ip, r4
 800260e:	2300      	movs	r3, #0
 8002610:	2115      	movs	r1, #21
}
 8002612:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002614:	4760      	bx	ip

08002616 <u8x8_cad_SendArg>:
{
 8002616:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002618:	68c4      	ldr	r4, [r0, #12]
{
 800261a:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800261c:	46a4      	mov	ip, r4
 800261e:	2300      	movs	r3, #0
 8002620:	2116      	movs	r1, #22
}
 8002622:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002624:	4760      	bx	ip

08002626 <u8x8_cad_SendData>:
{
 8002626:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002628:	68c4      	ldr	r4, [r0, #12]
{
 800262a:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800262c:	46a4      	mov	ip, r4
 800262e:	460a      	mov	r2, r1
}
 8002630:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002632:	2117      	movs	r1, #23
 8002634:	4760      	bx	ip

08002636 <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002636:	2300      	movs	r3, #0
{
 8002638:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800263a:	68c4      	ldr	r4, [r0, #12]
 800263c:	461a      	mov	r2, r3
 800263e:	46a4      	mov	ip, r4
 8002640:	2118      	movs	r1, #24
}
 8002642:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002644:	4760      	bx	ip

08002646 <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002646:	2300      	movs	r3, #0
{
 8002648:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 800264a:	68c4      	ldr	r4, [r0, #12]
 800264c:	461a      	mov	r2, r3
 800264e:	46a4      	mov	ip, r4
 8002650:	2119      	movs	r1, #25
}
 8002652:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002654:	4760      	bx	ip

08002656 <u8x8_cad_SendSequence>:
{
 8002656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002658:	4605      	mov	r5, r0
 800265a:	460c      	mov	r4, r1
    cmd = *data;
 800265c:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 800265e:	2919      	cmp	r1, #25
 8002660:	d80d      	bhi.n	800267e <u8x8_cad_SendSequence+0x28>
 8002662:	2917      	cmp	r1, #23
 8002664:	d819      	bhi.n	800269a <u8x8_cad_SendSequence+0x44>
 8002666:	d00e      	beq.n	8002686 <u8x8_cad_SendSequence+0x30>
 8002668:	2914      	cmp	r1, #20
 800266a:	d90a      	bls.n	8002682 <u8x8_cad_SendSequence+0x2c>
	  v = *data;
 800266c:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800266e:	2300      	movs	r3, #0
 8002670:	4628      	mov	r0, r5
 8002672:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002674:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002678:	47b0      	blx	r6
	  data++;
 800267a:	3402      	adds	r4, #2
	  break;
 800267c:	e7ee      	b.n	800265c <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 800267e:	29fe      	cmp	r1, #254	; 0xfe
 8002680:	d012      	beq.n	80026a8 <u8x8_cad_SendSequence+0x52>
}
 8002682:	b002      	add	sp, #8
 8002684:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 8002686:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002688:	2101      	movs	r1, #1
 800268a:	4628      	mov	r0, r5
 800268c:	f10d 0207 	add.w	r2, sp, #7
	  v = *data;
 8002690:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002694:	f7ff ffc7 	bl	8002626 <u8x8_cad_SendData>
	  data++;
 8002698:	e7ef      	b.n	800267a <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800269a:	2300      	movs	r3, #0
 800269c:	4628      	mov	r0, r5
 800269e:	461a      	mov	r2, r3
 80026a0:	68ee      	ldr	r6, [r5, #12]
    data++;
 80026a2:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80026a4:	47b0      	blx	r6
	  break;
 80026a6:	e7d9      	b.n	800265c <u8x8_cad_SendSequence+0x6>
	  v = *data;
 80026a8:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026aa:	2129      	movs	r1, #41	; 0x29
 80026ac:	4628      	mov	r0, r5
	  v = *data;
 80026ae:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80026b2:	f000 f946 	bl	8002942 <u8x8_gpio_call>
 80026b6:	e7e0      	b.n	800267a <u8x8_cad_SendSequence+0x24>

080026b8 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80026b8:	3914      	subs	r1, #20
{
 80026ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026be:	4604      	mov	r4, r0
 80026c0:	4615      	mov	r5, r2
 80026c2:	461e      	mov	r6, r3
 80026c4:	2905      	cmp	r1, #5
 80026c6:	d84e      	bhi.n	8002766 <u8x8_cad_ssd13xx_fast_i2c+0xae>
 80026c8:	e8df f001 	tbb	[pc, r1]
 80026cc:	1c170333 	.word	0x1c170333
 80026d0:	4541      	.short	0x4541
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80026d2:	4e26      	ldr	r6, [pc, #152]	; (800276c <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 80026d4:	7832      	ldrb	r2, [r6, #0]
 80026d6:	b10a      	cbz	r2, 80026dc <u8x8_cad_ssd13xx_fast_i2c+0x24>
	 u8x8_byte_EndTransfer(u8x8); 
 80026d8:	f7ff ff78 	bl	80025cc <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff6d 	bl	80025bc <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80026e2:	2100      	movs	r1, #0
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff ff5e 	bl	80025a6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80026ea:	4629      	mov	r1, r5
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ff5a 	bl	80025a6 <u8x8_byte_SendByte>
      in_transfer = 1;
 80026f2:	2001      	movs	r0, #1
 80026f4:	7030      	strb	r0, [r6, #0]
      break;
    default:
      return 0;
  }
  return 1;
}
 80026f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 80026fa:	4611      	mov	r1, r2
 80026fc:	f7ff ff53 	bl	80025a6 <u8x8_byte_SendByte>
  return 1;
 8002700:	2001      	movs	r0, #1
      break;
 8002702:	e7f8      	b.n	80026f6 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
      if ( in_transfer != 0 )
 8002704:	4f19      	ldr	r7, [pc, #100]	; (800276c <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002706:	783a      	ldrb	r2, [r7, #0]
 8002708:	b10a      	cbz	r2, 800270e <u8x8_cad_ssd13xx_fast_i2c+0x56>
	u8x8_byte_EndTransfer(u8x8); 
 800270a:	f7ff ff5f 	bl	80025cc <u8x8_byte_EndTransfer>
       while( arg_int > 24 )
 800270e:	2d18      	cmp	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002710:	4632      	mov	r2, r6
       while( arg_int > 24 )
 8002712:	d806      	bhi.n	8002722 <u8x8_cad_ssd13xx_fast_i2c+0x6a>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002714:	4629      	mov	r1, r5
 8002716:	4620      	mov	r0, r4
 8002718:	f7ff ff60 	bl	80025dc <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	703b      	strb	r3, [r7, #0]
      break;
 8002720:	e7ee      	b.n	8002700 <u8x8_cad_ssd13xx_fast_i2c+0x48>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002722:	2118      	movs	r1, #24
 8002724:	4620      	mov	r0, r4
	arg_int-=24;
 8002726:	3d18      	subs	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002728:	f7ff ff58 	bl	80025dc <u8x8_i2c_data_transfer>
	arg_int-=24;
 800272c:	b2ed      	uxtb	r5, r5
	p+=24;
 800272e:	3618      	adds	r6, #24
 8002730:	e7ed      	b.n	800270e <u8x8_cad_ssd13xx_fast_i2c+0x56>
      if ( u8x8->i2c_address == 255 )
 8002732:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002736:	6907      	ldr	r7, [r0, #16]
      if ( u8x8->i2c_address == 255 )
 8002738:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 800273a:	bf04      	itt	eq
 800273c:	2378      	moveq	r3, #120	; 0x78
 800273e:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002742:	46bc      	mov	ip, r7
 8002744:	4633      	mov	r3, r6
}
 8002746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 800274a:	2114      	movs	r1, #20
 800274c:	4760      	bx	ip
      in_transfer = 0;
 800274e:	2200      	movs	r2, #0
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	e7d4      	b.n	8002700 <u8x8_cad_ssd13xx_fast_i2c+0x48>
      if ( in_transfer != 0 )
 8002756:	4d05      	ldr	r5, [pc, #20]	; (800276c <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002758:	782a      	ldrb	r2, [r5, #0]
 800275a:	b10a      	cbz	r2, 8002760 <u8x8_cad_ssd13xx_fast_i2c+0xa8>
	u8x8_byte_EndTransfer(u8x8); 
 800275c:	f7ff ff36 	bl	80025cc <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	702b      	strb	r3, [r5, #0]
      break;
 8002764:	e7cc      	b.n	8002700 <u8x8_cad_ssd13xx_fast_i2c+0x48>
  return 1;
 8002766:	2000      	movs	r0, #0
 8002768:	e7c5      	b.n	80026f6 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
 800276a:	bf00      	nop
 800276c:	20000e2d 	.word	0x20000e2d

08002770 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002770:	390b      	subs	r1, #11
{
 8002772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002774:	4604      	mov	r4, r0
 8002776:	4615      	mov	r5, r2
 8002778:	461e      	mov	r6, r3
 800277a:	2904      	cmp	r1, #4
 800277c:	d855      	bhi.n	800282a <u8x8_d_ssd1306_sh1106_generic+0xba>
 800277e:	e8df f001 	tbb	[pc, r1]
 8002782:	5403      	.short	0x5403
 8002784:	1b0c      	.short	0x1b0c
 8002786:	29          	.byte	0x29
 8002787:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002788:	b92a      	cbnz	r2, 8002796 <u8x8_d_ssd1306_sh1106_generic+0x26>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 800278a:	4929      	ldr	r1, [pc, #164]	; (8002830 <u8x8_d_ssd1306_sh1106_generic+0xc0>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff ff62 	bl	8002656 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002792:	2001      	movs	r0, #1
}
 8002794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002796:	4927      	ldr	r1, [pc, #156]	; (8002834 <u8x8_d_ssd1306_sh1106_generic+0xc4>)
 8002798:	e7f8      	b.n	800278c <u8x8_d_ssd1306_sh1106_generic+0x1c>
      if ( arg_int == 0 )
 800279a:	b93a      	cbnz	r2, 80027ac <u8x8_d_ssd1306_sh1106_generic+0x3c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 800279c:	4926      	ldr	r1, [pc, #152]	; (8002838 <u8x8_d_ssd1306_sh1106_generic+0xc8>)
 800279e:	f7ff ff5a 	bl	8002656 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027a6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80027aa:	e7f2      	b.n	8002792 <u8x8_d_ssd1306_sh1106_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 80027ac:	4923      	ldr	r1, [pc, #140]	; (800283c <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 80027ae:	f7ff ff52 	bl	8002656 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	7cdb      	ldrb	r3, [r3, #19]
 80027b6:	e7f6      	b.n	80027a6 <u8x8_d_ssd1306_sh1106_generic+0x36>
      u8x8_cad_StartTransfer(u8x8);
 80027b8:	f7ff ff3d 	bl	8002636 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80027bc:	2181      	movs	r1, #129	; 0x81
 80027be:	4620      	mov	r0, r4
 80027c0:	f7ff ff21 	bl	8002606 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 80027c4:	4629      	mov	r1, r5
 80027c6:	4620      	mov	r0, r4
 80027c8:	f7ff ff25 	bl	8002616 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff ff3a 	bl	8002646 <u8x8_cad_EndTransfer>
 80027d2:	e7de      	b.n	8002792 <u8x8_d_ssd1306_sh1106_generic+0x22>
      u8x8_cad_StartTransfer(u8x8);
 80027d4:	f7ff ff2f 	bl	8002636 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80027d8:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 80027da:	f894 7022 	ldrb.w	r7, [r4, #34]	; 0x22
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80027de:	2140      	movs	r1, #64	; 0x40
      x += u8x8->x_offset;
 80027e0:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 80027e4:	f007 07ff 	and.w	r7, r7, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff ff0c 	bl	8002606 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80027ee:	0939      	lsrs	r1, r7, #4
 80027f0:	f041 0110 	orr.w	r1, r1, #16
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7ff ff06 	bl	8002606 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 80027fa:	f007 010f 	and.w	r1, r7, #15
 80027fe:	4620      	mov	r0, r4
 8002800:	f7ff ff09 	bl	8002616 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002804:	79b1      	ldrb	r1, [r6, #6]
 8002806:	4620      	mov	r0, r4
 8002808:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 800280c:	f7ff ff03 	bl	8002616 <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002810:	7931      	ldrb	r1, [r6, #4]
 8002812:	4620      	mov	r0, r4
 8002814:	00c9      	lsls	r1, r1, #3
 8002816:	6832      	ldr	r2, [r6, #0]
 8002818:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
	arg_int--;
 800281c:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 800281e:	f7ff ff02 	bl	8002626 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8002822:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002826:	d1f3      	bne.n	8002810 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8002828:	e7d0      	b.n	80027cc <u8x8_d_ssd1306_sh1106_generic+0x5c>
  return 1;
 800282a:	2000      	movs	r0, #0
 800282c:	e7b2      	b.n	8002794 <u8x8_d_ssd1306_sh1106_generic+0x24>
 800282e:	bf00      	nop
 8002830:	0800cbab 	.word	0x0800cbab
 8002834:	0800cbb0 	.word	0x0800cbb0
 8002838:	0800cb68 	.word	0x0800cb68
 800283c:	0800cb6f 	.word	0x0800cb6f

08002840 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002840:	b538      	push	{r3, r4, r5, lr}
 8002842:	4604      	mov	r4, r0
 8002844:	460d      	mov	r5, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002846:	f7ff ff93 	bl	8002770 <u8x8_d_ssd1306_sh1106_generic>
 800284a:	b950      	cbnz	r0, 8002862 <u8x8_d_ssd1306_128x64_noname+0x22>
    return 1;
  
  switch(msg)
 800284c:	2d09      	cmp	r5, #9
 800284e:	d00a      	beq.n	8002866 <u8x8_d_ssd1306_128x64_noname+0x26>
 8002850:	2d0a      	cmp	r5, #10
 8002852:	d107      	bne.n	8002864 <u8x8_d_ssd1306_128x64_noname+0x24>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002854:	4620      	mov	r0, r4
 8002856:	f000 f814 	bl	8002882 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 800285a:	4620      	mov	r0, r4
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <u8x8_d_ssd1306_128x64_noname+0x30>)
 800285e:	f7ff fefa 	bl	8002656 <u8x8_cad_SendSequence>
    return 1;
 8002862:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
 8002864:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002866:	4620      	mov	r0, r4
 8002868:	4902      	ldr	r1, [pc, #8]	; (8002874 <u8x8_d_ssd1306_128x64_noname+0x34>)
 800286a:	f000 f805 	bl	8002878 <u8x8_d_helper_display_setup_memory>
      break;
 800286e:	e7f8      	b.n	8002862 <u8x8_d_ssd1306_128x64_noname+0x22>
 8002870:	0800cb76 	.word	0x0800cb76
 8002874:	0800cbb8 	.word	0x0800cbb8

08002878 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002878:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800287a:	7c8b      	ldrb	r3, [r1, #18]
 800287c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8002880:	4770      	bx	lr

08002882 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002882:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002884:	2300      	movs	r3, #0
 8002886:	2128      	movs	r1, #40	; 0x28
 8002888:	461a      	mov	r2, r3
 800288a:	6945      	ldr	r5, [r0, #20]
{
 800288c:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 800288e:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002890:	2300      	movs	r3, #0
 8002892:	2114      	movs	r1, #20
 8002894:	461a      	mov	r2, r3
 8002896:	4620      	mov	r0, r4
 8002898:	68e5      	ldr	r5, [r4, #12]
 800289a:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800289c:	4620      	mov	r0, r4
 800289e:	2201      	movs	r2, #1
 80028a0:	214b      	movs	r1, #75	; 0x4b
 80028a2:	f000 f84e 	bl	8002942 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	4620      	mov	r0, r4
 80028aa:	791a      	ldrb	r2, [r3, #4]
 80028ac:	2129      	movs	r1, #41	; 0x29
 80028ae:	f000 f848 	bl	8002942 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028b2:	4620      	mov	r0, r4
 80028b4:	2200      	movs	r2, #0
 80028b6:	214b      	movs	r1, #75	; 0x4b
 80028b8:	f000 f843 	bl	8002942 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028bc:	6823      	ldr	r3, [r4, #0]
 80028be:	4620      	mov	r0, r4
 80028c0:	791a      	ldrb	r2, [r3, #4]
 80028c2:	2129      	movs	r1, #41	; 0x29
 80028c4:	f000 f83d 	bl	8002942 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028c8:	4620      	mov	r0, r4
 80028ca:	2201      	movs	r2, #1
 80028cc:	214b      	movs	r1, #75	; 0x4b
 80028ce:	f000 f838 	bl	8002942 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028d2:	6823      	ldr	r3, [r4, #0]
 80028d4:	4620      	mov	r0, r4
 80028d6:	795a      	ldrb	r2, [r3, #5]
 80028d8:	2129      	movs	r1, #41	; 0x29
}    
 80028da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028de:	f000 b830 	b.w	8002942 <u8x8_gpio_call>

080028e2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80028e2:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
 80028e4:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 80028e8:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 80028ea:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 80028ee:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.tile_ptr = tile_ptr;
 80028f2:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028f4:	2201      	movs	r2, #1
 80028f6:	466b      	mov	r3, sp
 80028f8:	210f      	movs	r1, #15
 80028fa:	6884      	ldr	r4, [r0, #8]
 80028fc:	47a0      	blx	r4
}
 80028fe:	b002      	add	sp, #8
 8002900:	bd10      	pop	{r4, pc}

08002902 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002902:	2300      	movs	r3, #0
{
 8002904:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002906:	6884      	ldr	r4, [r0, #8]
 8002908:	461a      	mov	r2, r3
 800290a:	46a4      	mov	ip, r4
 800290c:	2109      	movs	r1, #9
}
 800290e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002910:	4760      	bx	ip

08002912 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002912:	2300      	movs	r3, #0
{
 8002914:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002916:	6884      	ldr	r4, [r0, #8]
 8002918:	461a      	mov	r2, r3
 800291a:	46a4      	mov	ip, r4
 800291c:	210a      	movs	r1, #10
}
 800291e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002920:	4760      	bx	ip

08002922 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002922:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002924:	6884      	ldr	r4, [r0, #8]
{
 8002926:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002928:	46a4      	mov	ip, r4
 800292a:	2300      	movs	r3, #0
 800292c:	210b      	movs	r1, #11
}
 800292e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002930:	4760      	bx	ip

08002932 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002932:	2300      	movs	r3, #0
{
 8002934:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002936:	6884      	ldr	r4, [r0, #8]
 8002938:	461a      	mov	r2, r3
 800293a:	46a4      	mov	ip, r4
 800293c:	2110      	movs	r1, #16
}
 800293e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002940:	4760      	bx	ip

08002942 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002942:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002944:	6944      	ldr	r4, [r0, #20]
 8002946:	2300      	movs	r3, #0
 8002948:	46a4      	mov	ip, r4
}
 800294a:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800294c:	4760      	bx	ip

0800294e <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 800294e:	2000      	movs	r0, #0
 8002950:	4770      	bx	lr
	...

08002954 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002954:	2300      	movs	r3, #0
 8002956:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8002958:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 800295c:	84c3      	strh	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
 800295e:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8002960:	23ff      	movs	r3, #255	; 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <u8x8_SetupDefaults+0x24>)
    u8x8->i2c_address = 255;
 8002964:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->cad_cb = u8x8_dummy_cb;
 8002968:	e9c0 2202 	strd	r2, r2, [r0, #8]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800296c:	e9c0 2204 	strd	r2, r2, [r0, #16]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002970:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	0800294f 	.word	0x0800294f

0800297c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	9f06      	ldr	r7, [sp, #24]
 8002980:	4616      	mov	r6, r2
 8002982:	461d      	mov	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002984:	f7ff ffe6 	bl	8002954 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8002988:	e9c0 1602 	strd	r1, r6, [r0, #8]
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800298c:	e9c0 5704 	strd	r5, r7, [r0, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8002990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 8002994:	f7ff bfb5 	b.w	8002902 <u8x8_SetupMemory>

08002998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002998:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800299a:	e003      	b.n	80029a4 <LoopCopyDataInit>

0800299c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800299e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029a2:	3104      	adds	r1, #4

080029a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029a4:	480a      	ldr	r0, [pc, #40]	; (80029d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029ac:	d3f6      	bcc.n	800299c <CopyDataInit>
  ldr r2, =_sbss
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80029b0:	e002      	b.n	80029b8 <LoopFillZerobss>

080029b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80029b4:	f842 3b04 	str.w	r3, [r2], #4

080029b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80029ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80029bc:	d3f9      	bcc.n	80029b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029be:	f7ff fa67 	bl	8001e90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029c2:	f006 fde9 	bl	8009598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029c6:	f7fe fc67 	bl	8001298 <main>
  bx lr
 80029ca:	4770      	bx	lr
  ldr r3, =_sidata
 80029cc:	0800d024 	.word	0x0800d024
  ldr r0, =_sdata
 80029d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80029d4:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 80029d8:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 80029dc:	20003400 	.word	0x20003400

080029e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029e0:	e7fe      	b.n	80029e0 <ADC1_2_IRQHandler>
	...

080029e4 <Max6675_Read_TempValue>:
	Temp*=0.25;                                           // Data to Centigrade Conversation
	*tempartureVariable = Temp;
}

int8_t Max6675_Read_TempValue(float* tempartureVariable)
{
 80029e4:	b570      	push	{r4, r5, r6, lr}
	float Temp=0;                                  // Temperature Variable
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 80029e6:	4e11      	ldr	r6, [pc, #68]	; (8002a2c <Max6675_Read_TempValue+0x48>)
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 80029e8:	4d11      	ldr	r5, [pc, #68]	; (8002a30 <Max6675_Read_TempValue+0x4c>)
{
 80029ea:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 80029ec:	2200      	movs	r2, #0
 80029ee:	4630      	mov	r0, r6
 80029f0:	2110      	movs	r1, #16
 80029f2:	f000 fa93 	bl	8002f1c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 80029f6:	2332      	movs	r3, #50	; 0x32
 80029f8:	4629      	mov	r1, r5
 80029fa:	2201      	movs	r2, #1
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <Max6675_Read_TempValue+0x50>)
 80029fe:	f002 fe29 	bl	8005654 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_SET);         // High State for SPI Communication
 8002a02:	2201      	movs	r2, #1
 8002a04:	2110      	movs	r1, #16
 8002a06:	4630      	mov	r0, r6
 8002a08:	f000 fa88 	bl	8002f1c <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8002a0c:	8828      	ldrh	r0, [r5, #0]
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <Max6675_Read_TempValue+0x54>)
 8002a10:	f3c0 0580 	ubfx	r5, r0, #2, #1
 8002a14:	701d      	strb	r5, [r3, #0]
	Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8002a16:	08c0      	lsrs	r0, r0, #3
 8002a18:	f7fe f8f0 	bl	8000bfc <__aeabi_i2f>
	Temp*=0.25;                                           // Data to Centigrade Conversation
 8002a1c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002a20:	f7fe f940 	bl	8000ca4 <__aeabi_fmul>
	*tempartureVariable = Temp;
	AlarmVar = TCF;
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <Max6675_Read_TempValue+0x58>)
	*tempartureVariable = Temp;
 8002a26:	6020      	str	r0, [r4, #0]
	AlarmVar = TCF;
 8002a28:	701d      	strb	r5, [r3, #0]
}
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	40010800 	.word	0x40010800
 8002a30:	20002424 	.word	0x20002424
 8002a34:	20001fa0 	.word	0x20001fa0
 8002a38:	20000e2f 	.word	0x20000e2f
 8002a3c:	20000e2e 	.word	0x20000e2e

08002a40 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a40:	4a07      	ldr	r2, [pc, #28]	; (8002a60 <HAL_Init+0x20>)
{
 8002a42:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a44:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a46:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a4e:	f000 f82d 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7ff f948 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a58:	f7fe ff46 	bl	80018e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	bd08      	pop	{r3, pc}
 8002a60:	40022000 	.word	0x40022000

08002a64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a64:	4a03      	ldr	r2, [pc, #12]	; (8002a74 <HAL_IncTick+0x10>)
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <HAL_IncTick+0x14>)
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	440b      	add	r3, r1
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000242c 	.word	0x2000242c
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a7c:	4b01      	ldr	r3, [pc, #4]	; (8002a84 <HAL_GetTick+0x8>)
 8002a7e:	6818      	ldr	r0, [r3, #0]
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	2000242c 	.word	0x2000242c

08002a88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a88:	b538      	push	{r3, r4, r5, lr}
 8002a8a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff fff6 	bl	8002a7c <HAL_GetTick>
 8002a90:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a92:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002a94:	bf1e      	ittt	ne
 8002a96:	4b04      	ldrne	r3, [pc, #16]	; (8002aa8 <HAL_Delay+0x20>)
 8002a98:	781b      	ldrbne	r3, [r3, #0]
 8002a9a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	1b43      	subs	r3, r0, r5
 8002aa2:	42a3      	cmp	r3, r4
 8002aa4:	d3fa      	bcc.n	8002a9c <HAL_Delay+0x14>
  {
  }
}
 8002aa6:	bd38      	pop	{r3, r4, r5, pc}
 8002aa8:	20000004 	.word	0x20000004

08002aac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aac:	4907      	ldr	r1, [pc, #28]	; (8002acc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002aae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ab2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ab6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aba:	0412      	lsls	r2, r2, #16
 8002abc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002ac8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b530      	push	{r4, r5, lr}
 8002ad4:	68dc      	ldr	r4, [r3, #12]
 8002ad6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ada:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ade:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	bf28      	it	cs
 8002ae4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aec:	bf98      	it	ls
 8002aee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af4:	bf88      	it	hi
 8002af6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	ea21 0303 	bic.w	r3, r1, r3
 8002afc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002afe:	fa05 f404 	lsl.w	r4, r5, r4
 8002b02:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002b06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0c:	bfac      	ite	ge
 8002b0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	4a07      	ldrlt	r2, [pc, #28]	; (8002b30 <HAL_NVIC_SetPriority+0x60>)
 8002b14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002b18:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	bfab      	itete	ge
 8002b1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b20:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b28:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002b2a:	bd30      	pop	{r4, r5, pc}
 8002b2c:	e000ed00 	.word	0xe000ed00
 8002b30:	e000ed14 	.word	0xe000ed14

08002b34 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002b34:	2800      	cmp	r0, #0
 8002b36:	db08      	blt.n	8002b4a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b38:	2301      	movs	r3, #1
 8002b3a:	0942      	lsrs	r2, r0, #5
 8002b3c:	f000 001f 	and.w	r0, r0, #31
 8002b40:	fa03 f000 	lsl.w	r0, r3, r0
 8002b44:	4b01      	ldr	r3, [pc, #4]	; (8002b4c <HAL_NVIC_EnableIRQ+0x18>)
 8002b46:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b50:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b52:	b320      	cbz	r0, 8002b9e <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b54:	2214      	movs	r2, #20
 8002b56:	6801      	ldr	r1, [r0, #0]
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <HAL_DMA_Init+0x54>)
 8002b5a:	440b      	add	r3, r1
 8002b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b66:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8002b68:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b6a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002b6e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b70:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b72:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b76:	4323      	orrs	r3, r4
 8002b78:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b7a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	6944      	ldr	r4, [r0, #20]
 8002b82:	4323      	orrs	r3, r4
 8002b84:	6984      	ldr	r4, [r0, #24]
 8002b86:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b88:	69c4      	ldr	r4, [r0, #28]
 8002b8a:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002b8c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b8e:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b94:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8002b96:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b98:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002b9a:	4618      	mov	r0, r3
}
 8002b9c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	e7fc      	b.n	8002b9c <HAL_DMA_Init+0x4c>
 8002ba2:	bf00      	nop
 8002ba4:	bffdfff8 	.word	0xbffdfff8
 8002ba8:	40020000 	.word	0x40020000

08002bac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002bac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d003      	beq.n	8002bbe <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bba:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8002bbc:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bbe:	6803      	ldr	r3, [r0, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	f022 020e 	bic.w	r2, r2, #14
 8002bc6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_DMA_Abort_IT+0x84>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01c      	beq.n	8002c10 <HAL_DMA_Abort_IT+0x64>
 8002bd6:	3214      	adds	r2, #20
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01b      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x68>
 8002bdc:	3214      	adds	r2, #20
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01a      	beq.n	8002c18 <HAL_DMA_Abort_IT+0x6c>
 8002be2:	3214      	adds	r2, #20
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d01a      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x72>
 8002be8:	3214      	adds	r2, #20
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01a      	beq.n	8002c24 <HAL_DMA_Abort_IT+0x78>
 8002bee:	3214      	adds	r2, #20
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	bf0c      	ite	eq
 8002bf4:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8002bf8:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8002bfc:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_DMA_Abort_IT+0x88>)
 8002bfe:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c04:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8002c06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c08:	b17b      	cbz	r3, 8002c2a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8002c0a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	e7d5      	b.n	8002bbc <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002c10:	2301      	movs	r3, #1
 8002c12:	e7f3      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c14:	2310      	movs	r3, #16
 8002c16:	e7f1      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1c:	e7ee      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c22:	e7eb      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
 8002c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c28:	e7e8      	b.n	8002bfc <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	e7c6      	b.n	8002bbc <HAL_DMA_Abort_IT+0x10>
 8002c2e:	bf00      	nop
 8002c30:	40020008 	.word	0x40020008
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c38:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c3a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c3c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c3e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c40:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002c42:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c44:	4095      	lsls	r5, r2
 8002c46:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8002c48:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002c4a:	d032      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0x7a>
 8002c4c:	074d      	lsls	r5, r1, #29
 8002c4e:	d530      	bpl.n	8002cb2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c54:	bf5e      	ittt	pl
 8002c56:	681a      	ldrpl	r2, [r3, #0]
 8002c58:	f022 0204 	bicpl.w	r2, r2, #4
 8002c5c:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c5e:	4a3d      	ldr	r2, [pc, #244]	; (8002d54 <HAL_DMA_IRQHandler+0x11c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d019      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x60>
 8002c64:	3214      	adds	r2, #20
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d018      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x64>
 8002c6a:	3214      	adds	r2, #20
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d017      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x68>
 8002c70:	3214      	adds	r2, #20
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d017      	beq.n	8002ca6 <HAL_DMA_IRQHandler+0x6e>
 8002c76:	3214      	adds	r2, #20
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d017      	beq.n	8002cac <HAL_DMA_IRQHandler+0x74>
 8002c7c:	3214      	adds	r2, #20
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	bf0c      	ite	eq
 8002c82:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002c86:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002c8a:	4a33      	ldr	r2, [pc, #204]	; (8002d58 <HAL_DMA_IRQHandler+0x120>)
 8002c8c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8002c94:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002c96:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c98:	2304      	movs	r3, #4
 8002c9a:	e7f6      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002c9c:	2340      	movs	r3, #64	; 0x40
 8002c9e:	e7f4      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca4:	e7f1      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002caa:	e7ee      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
 8002cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002cb0:	e7eb      	b.n	8002c8a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002cb2:	2502      	movs	r5, #2
 8002cb4:	4095      	lsls	r5, r2
 8002cb6:	4225      	tst	r5, r4
 8002cb8:	d035      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xee>
 8002cba:	078d      	lsls	r5, r1, #30
 8002cbc:	d533      	bpl.n	8002d26 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	0694      	lsls	r4, r2, #26
 8002cc2:	d406      	bmi.n	8002cd2 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f022 020a 	bic.w	r2, r2, #10
 8002cca:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cd2:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_DMA_IRQHandler+0x11c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d019      	beq.n	8002d0c <HAL_DMA_IRQHandler+0xd4>
 8002cd8:	3214      	adds	r2, #20
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_DMA_IRQHandler+0xd8>
 8002cde:	3214      	adds	r2, #20
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d017      	beq.n	8002d14 <HAL_DMA_IRQHandler+0xdc>
 8002ce4:	3214      	adds	r2, #20
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d017      	beq.n	8002d1a <HAL_DMA_IRQHandler+0xe2>
 8002cea:	3214      	adds	r2, #20
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d017      	beq.n	8002d20 <HAL_DMA_IRQHandler+0xe8>
 8002cf0:	3214      	adds	r2, #20
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	bf0c      	ite	eq
 8002cf6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002cfa:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002cfe:	4a16      	ldr	r2, [pc, #88]	; (8002d58 <HAL_DMA_IRQHandler+0x120>)
 8002d00:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8002d02:	2300      	movs	r3, #0
 8002d04:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002d08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d0a:	e7c1      	b.n	8002c90 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e7f6      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d10:	2320      	movs	r3, #32
 8002d12:	e7f4      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d18:	e7f1      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d1e:	e7ee      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
 8002d20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d24:	e7eb      	b.n	8002cfe <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d26:	2508      	movs	r5, #8
 8002d28:	4095      	lsls	r5, r2
 8002d2a:	4225      	tst	r5, r4
 8002d2c:	d00f      	beq.n	8002d4e <HAL_DMA_IRQHandler+0x116>
 8002d2e:	0709      	lsls	r1, r1, #28
 8002d30:	d50d      	bpl.n	8002d4e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	f021 010e 	bic.w	r1, r1, #14
 8002d38:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	fa03 f202 	lsl.w	r2, r3, r2
 8002d40:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d42:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d48:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002d4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d4c:	e7a0      	b.n	8002c90 <HAL_DMA_IRQHandler+0x58>
}
 8002d4e:	bc70      	pop	{r4, r5, r6}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40020008 	.word	0x40020008
 8002d58:	40020000 	.word	0x40020000

08002d5c <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8002d5c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d68:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002d6a:	4616      	mov	r6, r2
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d6e:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8002f10 <HAL_GPIO_Init+0x1ac>
 8002d72:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8002f14 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d76:	680d      	ldr	r5, [r1, #0]
 8002d78:	fa35 f406 	lsrs.w	r4, r5, r6
 8002d7c:	d102      	bne.n	8002d84 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8002d7e:	b003      	add	sp, #12
 8002d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8002d84:	f04f 0801 	mov.w	r8, #1
 8002d88:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8c:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8002d90:	ea38 0505 	bics.w	r5, r8, r5
 8002d94:	d17c      	bne.n	8002e90 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8002d96:	684d      	ldr	r5, [r1, #4]
 8002d98:	2d03      	cmp	r5, #3
 8002d9a:	d807      	bhi.n	8002dac <HAL_GPIO_Init+0x48>
 8002d9c:	3d01      	subs	r5, #1
 8002d9e:	2d02      	cmp	r5, #2
 8002da0:	f200 8088 	bhi.w	8002eb4 <HAL_GPIO_Init+0x150>
 8002da4:	e8df f005 	tbb	[pc, r5]
 8002da8:	9b96      	.short	0x9b96
 8002daa:	a1          	.byte	0xa1
 8002dab:	00          	.byte	0x00
 8002dac:	2d12      	cmp	r5, #18
 8002dae:	f000 8099 	beq.w	8002ee4 <HAL_GPIO_Init+0x180>
 8002db2:	d86f      	bhi.n	8002e94 <HAL_GPIO_Init+0x130>
 8002db4:	2d11      	cmp	r5, #17
 8002db6:	f000 808f 	beq.w	8002ed8 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dba:	2cff      	cmp	r4, #255	; 0xff
 8002dbc:	bf98      	it	ls
 8002dbe:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dc0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc4:	bf88      	it	hi
 8002dc6:	f100 0a04 	addhi.w	sl, r0, #4
 8002dca:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dce:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd2:	bf88      	it	hi
 8002dd4:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dd6:	fa09 fb05 	lsl.w	fp, r9, r5
 8002dda:	ea28 080b 	bic.w	r8, r8, fp
 8002dde:	fa02 f505 	lsl.w	r5, r2, r5
 8002de2:	ea48 0505 	orr.w	r5, r8, r5
 8002de6:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dea:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8002dee:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8002df2:	d04d      	beq.n	8002e90 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002df4:	4f43      	ldr	r7, [pc, #268]	; (8002f04 <HAL_GPIO_Init+0x1a0>)
 8002df6:	f026 0803 	bic.w	r8, r6, #3
 8002dfa:	69bd      	ldr	r5, [r7, #24]
 8002dfc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002e00:	f045 0501 	orr.w	r5, r5, #1
 8002e04:	61bd      	str	r5, [r7, #24]
 8002e06:	69bd      	ldr	r5, [r7, #24]
 8002e08:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8002e0c:	f005 0501 	and.w	r5, r5, #1
 8002e10:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e12:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e16:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e18:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002e1c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e20:	fa09 f90b 	lsl.w	r9, r9, fp
 8002e24:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e28:	4d37      	ldr	r5, [pc, #220]	; (8002f08 <HAL_GPIO_Init+0x1a4>)
 8002e2a:	42a8      	cmp	r0, r5
 8002e2c:	d061      	beq.n	8002ef2 <HAL_GPIO_Init+0x18e>
 8002e2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e32:	42a8      	cmp	r0, r5
 8002e34:	d05f      	beq.n	8002ef6 <HAL_GPIO_Init+0x192>
 8002e36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e3a:	42a8      	cmp	r0, r5
 8002e3c:	d05d      	beq.n	8002efa <HAL_GPIO_Init+0x196>
 8002e3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e42:	42a8      	cmp	r0, r5
 8002e44:	bf0c      	ite	eq
 8002e46:	2503      	moveq	r5, #3
 8002e48:	2504      	movne	r5, #4
 8002e4a:	fa05 f50b 	lsl.w	r5, r5, fp
 8002e4e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002e52:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002e56:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e58:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002e5c:	bf14      	ite	ne
 8002e5e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e60:	43a5      	biceq	r5, r4
 8002e62:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002e64:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e66:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002e6a:	bf14      	ite	ne
 8002e6c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e6e:	43a5      	biceq	r5, r4
 8002e70:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e72:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e74:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e78:	bf14      	ite	ne
 8002e7a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7c:	43a5      	biceq	r5, r4
 8002e7e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e80:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e82:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e86:	bf14      	ite	ne
 8002e88:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e8a:	ea25 0404 	biceq.w	r4, r5, r4
 8002e8e:	60dc      	str	r4, [r3, #12]
	position++;
 8002e90:	3601      	adds	r6, #1
 8002e92:	e770      	b.n	8002d76 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8002e94:	4f1d      	ldr	r7, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x1a8>)
 8002e96:	42bd      	cmp	r5, r7
 8002e98:	d00c      	beq.n	8002eb4 <HAL_GPIO_Init+0x150>
 8002e9a:	d817      	bhi.n	8002ecc <HAL_GPIO_Init+0x168>
 8002e9c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8002f18 <HAL_GPIO_Init+0x1b4>
 8002ea0:	454d      	cmp	r5, r9
 8002ea2:	d007      	beq.n	8002eb4 <HAL_GPIO_Init+0x150>
 8002ea4:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002ea8:	454d      	cmp	r5, r9
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x150>
 8002eac:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002eb0:	454d      	cmp	r5, r9
 8002eb2:	d182      	bne.n	8002dba <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eb4:	688a      	ldr	r2, [r1, #8]
 8002eb6:	b1d2      	cbz	r2, 8002eee <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eb8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002eba:	bf08      	it	eq
 8002ebc:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8002ec4:	bf18      	it	ne
 8002ec6:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002eca:	e776      	b.n	8002dba <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002ecc:	4565      	cmp	r5, ip
 8002ece:	d0f1      	beq.n	8002eb4 <HAL_GPIO_Init+0x150>
 8002ed0:	4575      	cmp	r5, lr
 8002ed2:	e7ee      	b.n	8002eb2 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ed4:	68ca      	ldr	r2, [r1, #12]
          break;
 8002ed6:	e770      	b.n	8002dba <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ed8:	68ca      	ldr	r2, [r1, #12]
 8002eda:	3204      	adds	r2, #4
          break;
 8002edc:	e76d      	b.n	8002dba <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ede:	68ca      	ldr	r2, [r1, #12]
 8002ee0:	3208      	adds	r2, #8
          break;
 8002ee2:	e76a      	b.n	8002dba <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ee4:	68ca      	ldr	r2, [r1, #12]
 8002ee6:	320c      	adds	r2, #12
          break;
 8002ee8:	e767      	b.n	8002dba <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8002eea:	2200      	movs	r2, #0
 8002eec:	e765      	b.n	8002dba <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eee:	2204      	movs	r2, #4
 8002ef0:	e763      	b.n	8002dba <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	e7a9      	b.n	8002e4a <HAL_GPIO_Init+0xe6>
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	e7a7      	b.n	8002e4a <HAL_GPIO_Init+0xe6>
 8002efa:	2502      	movs	r5, #2
 8002efc:	e7a5      	b.n	8002e4a <HAL_GPIO_Init+0xe6>
 8002efe:	bf00      	nop
 8002f00:	40010400 	.word	0x40010400
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010800 	.word	0x40010800
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10310000 	.word	0x10310000
 8002f14:	10320000 	.word	0x10320000
 8002f18:	10120000 	.word	0x10120000

08002f1c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f1c:	b10a      	cbz	r2, 8002f22 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f1e:	6101      	str	r1, [r0, #16]
  }
}
 8002f20:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f22:	0409      	lsls	r1, r1, #16
 8002f24:	e7fb      	b.n	8002f1e <HAL_GPIO_WritePin+0x2>

08002f26 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f26:	6801      	ldr	r1, [r0, #0]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	694b      	ldr	r3, [r1, #20]
 8002f2c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f30:	d010      	beq.n	8002f54 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f32:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002f36:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f38:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f3c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f40:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f44:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f4a:	f043 0304 	orr.w	r3, r3, #4
 8002f4e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002f50:	2001      	movs	r0, #1
 8002f52:	4770      	bx	lr
  }
  return HAL_OK;
 8002f54:	4618      	mov	r0, r3
}
 8002f56:	4770      	bx	lr

08002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460f      	mov	r7, r1
 8002f60:	4616      	mov	r6, r2
 8002f62:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f64:	6825      	ldr	r5, [r4, #0]
 8002f66:	6968      	ldr	r0, [r5, #20]
 8002f68:	ea27 0000 	bic.w	r0, r7, r0
 8002f6c:	b280      	uxth	r0, r0
 8002f6e:	b1b8      	cbz	r0, 8002fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f70:	696b      	ldr	r3, [r5, #20]
 8002f72:	055a      	lsls	r2, r3, #21
 8002f74:	d516      	bpl.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002f84:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002f94:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f9c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	1c73      	adds	r3, r6, #1
 8002fa6:	d0de      	beq.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa8:	f7ff fd68 	bl	8002a7c <HAL_GetTick>
 8002fac:	eba0 0008 	sub.w	r0, r0, r8
 8002fb0:	42b0      	cmp	r0, r6
 8002fb2:	d801      	bhi.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002fb4:	2e00      	cmp	r6, #0
 8002fb6:	d1d5      	bne.n	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb8:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fbc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fbe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002fc8:	f042 0220 	orr.w	r2, r2, #32
 8002fcc:	e7e4      	b.n	8002f98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002fce <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002fce:	b570      	push	{r4, r5, r6, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	075b      	lsls	r3, r3, #29
 8002fdc:	d501      	bpl.n	8002fe2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002fde:	2000      	movs	r0, #0
}
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe2:	4620      	mov	r0, r4
 8002fe4:	f7ff ff9f 	bl	8002f26 <I2C_IsAcknowledgeFailed>
 8002fe8:	b9a8      	cbnz	r0, 8003016 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002fea:	1c6a      	adds	r2, r5, #1
 8002fec:	d0f3      	beq.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fee:	f7ff fd45 	bl	8002a7c <HAL_GetTick>
 8002ff2:	1b80      	subs	r0, r0, r6
 8002ff4:	42a8      	cmp	r0, r5
 8002ff6:	d801      	bhi.n	8002ffc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002ff8:	2d00      	cmp	r5, #0
 8002ffa:	d1ec      	bne.n	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ffc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ffe:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003000:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003002:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003006:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800300a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800300c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003016:	2001      	movs	r0, #1
 8003018:	e7e2      	b.n	8002fe0 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800301a <I2C_WaitOnFlagUntilTimeout>:
{
 800301a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800301e:	4606      	mov	r6, r0
 8003020:	460f      	mov	r7, r1
 8003022:	4691      	mov	r9, r2
 8003024:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003026:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800302a:	6833      	ldr	r3, [r6, #0]
 800302c:	f1ba 0f01 	cmp.w	sl, #1
 8003030:	bf0c      	ite	eq
 8003032:	695c      	ldreq	r4, [r3, #20]
 8003034:	699c      	ldrne	r4, [r3, #24]
 8003036:	ea27 0404 	bic.w	r4, r7, r4
 800303a:	b2a4      	uxth	r4, r4
 800303c:	fab4 f484 	clz	r4, r4
 8003040:	0964      	lsrs	r4, r4, #5
 8003042:	45a1      	cmp	r9, r4
 8003044:	d001      	beq.n	800304a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003046:	2000      	movs	r0, #0
 8003048:	e017      	b.n	800307a <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800304a:	1c6a      	adds	r2, r5, #1
 800304c:	d0ee      	beq.n	800302c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7ff fd15 	bl	8002a7c <HAL_GetTick>
 8003052:	9b08      	ldr	r3, [sp, #32]
 8003054:	1ac0      	subs	r0, r0, r3
 8003056:	42a8      	cmp	r0, r5
 8003058:	d801      	bhi.n	800305e <I2C_WaitOnFlagUntilTimeout+0x44>
 800305a:	2d00      	cmp	r5, #0
 800305c:	d1e5      	bne.n	800302a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800305e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003060:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8003062:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003064:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003066:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306a:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800306e:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003070:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003074:	f042 0220 	orr.w	r2, r2, #32
 8003078:	6432      	str	r2, [r6, #64]	; 0x40
}
 800307a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800307e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800307e:	b570      	push	{r4, r5, r6, lr}
 8003080:	4604      	mov	r4, r0
 8003082:	460d      	mov	r5, r1
 8003084:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003086:	6823      	ldr	r3, [r4, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	d501      	bpl.n	8003092 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800308e:	2000      	movs	r0, #0
}
 8003090:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff ff47 	bl	8002f26 <I2C_IsAcknowledgeFailed>
 8003098:	b9a8      	cbnz	r0, 80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800309a:	1c6a      	adds	r2, r5, #1
 800309c:	d0f3      	beq.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7ff fced 	bl	8002a7c <HAL_GetTick>
 80030a2:	1b80      	subs	r0, r0, r6
 80030a4:	42a8      	cmp	r0, r5
 80030a6:	d801      	bhi.n	80030ac <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80030a8:	2d00      	cmp	r5, #0
 80030aa:	d1ec      	bne.n	8003086 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030ac:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ae:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030b0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c0:	f042 0220 	orr.w	r2, r2, #32
 80030c4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
 80030c8:	e7e2      	b.n	8003090 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080030cc <HAL_I2C_Init>:
{
 80030cc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80030ce:	4604      	mov	r4, r0
 80030d0:	b908      	cbnz	r0, 80030d6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80030d2:	2001      	movs	r0, #1
}
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030de:	b91b      	cbnz	r3, 80030e8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80030e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80030e4:	f7fe fc28 	bl	8001938 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e8:	2324      	movs	r3, #36	; 0x24
 80030ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f022 0201 	bic.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003106:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003108:	f002 f81c 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800310c:	4a3f      	ldr	r2, [pc, #252]	; (800320c <HAL_I2C_Init+0x140>)
 800310e:	6863      	ldr	r3, [r4, #4]
 8003110:	4293      	cmp	r3, r2
 8003112:	bf94      	ite	ls
 8003114:	4a3e      	ldrls	r2, [pc, #248]	; (8003210 <HAL_I2C_Init+0x144>)
 8003116:	4a3f      	ldrhi	r2, [pc, #252]	; (8003214 <HAL_I2C_Init+0x148>)
 8003118:	4290      	cmp	r0, r2
 800311a:	bf8c      	ite	hi
 800311c:	2200      	movhi	r2, #0
 800311e:	2201      	movls	r2, #1
 8003120:	2a00      	cmp	r2, #0
 8003122:	d1d6      	bne.n	80030d2 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003124:	4e3c      	ldr	r6, [pc, #240]	; (8003218 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003126:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003128:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800312c:	6851      	ldr	r1, [r2, #4]
 800312e:	3801      	subs	r0, #1
 8003130:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003134:	4331      	orrs	r1, r6
 8003136:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003138:	4934      	ldr	r1, [pc, #208]	; (800320c <HAL_I2C_Init+0x140>)
 800313a:	6a15      	ldr	r5, [r2, #32]
 800313c:	428b      	cmp	r3, r1
 800313e:	bf81      	itttt	hi
 8003140:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8003144:	4371      	mulhi	r1, r6
 8003146:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800314a:	fbb1 f1f6 	udivhi	r1, r1, r6
 800314e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003152:	bf94      	ite	ls
 8003154:	1c71      	addls	r1, r6, #1
 8003156:	3101      	addhi	r1, #1
 8003158:	4329      	orrs	r1, r5
 800315a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800315c:	69d1      	ldr	r1, [r2, #28]
 800315e:	4d2b      	ldr	r5, [pc, #172]	; (800320c <HAL_I2C_Init+0x140>)
 8003160:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003164:	42ab      	cmp	r3, r5
 8003166:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800316a:	d832      	bhi.n	80031d2 <HAL_I2C_Init+0x106>
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003178:	4203      	tst	r3, r0
 800317a:	d042      	beq.n	8003202 <HAL_I2C_Init+0x136>
 800317c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003180:	430b      	orrs	r3, r1
 8003182:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003184:	6811      	ldr	r1, [r2, #0]
 8003186:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800318a:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800318e:	4303      	orrs	r3, r0
 8003190:	430b      	orrs	r3, r1
 8003192:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003194:	6891      	ldr	r1, [r2, #8]
 8003196:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800319a:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800319e:	4303      	orrs	r3, r0
 80031a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031a8:	68d1      	ldr	r1, [r2, #12]
 80031aa:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80031ae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031b2:	4303      	orrs	r3, r0
 80031b4:	430b      	orrs	r3, r1
 80031b6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80031b8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ba:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80031d0:	e780      	b.n	80030d4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d2:	68a5      	ldr	r5, [r4, #8]
 80031d4:	b955      	cbnz	r5, 80031ec <HAL_I2C_Init+0x120>
 80031d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	b17b      	cbz	r3, 8003206 <HAL_I2C_Init+0x13a>
 80031e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ea:	e7c9      	b.n	8003180 <HAL_I2C_Init+0xb4>
 80031ec:	2519      	movs	r5, #25
 80031ee:	436b      	muls	r3, r5
 80031f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f4:	3301      	adds	r3, #1
 80031f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fa:	b123      	cbz	r3, 8003206 <HAL_I2C_Init+0x13a>
 80031fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003200:	e7be      	b.n	8003180 <HAL_I2C_Init+0xb4>
 8003202:	2304      	movs	r3, #4
 8003204:	e7bc      	b.n	8003180 <HAL_I2C_Init+0xb4>
 8003206:	2301      	movs	r3, #1
 8003208:	e7ba      	b.n	8003180 <HAL_I2C_Init+0xb4>
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	000f4240 	.word	0x000f4240

0800321c <HAL_I2C_Master_Transmit>:
{
 800321c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003220:	4604      	mov	r4, r0
 8003222:	b085      	sub	sp, #20
 8003224:	4698      	mov	r8, r3
 8003226:	460d      	mov	r5, r1
 8003228:	4691      	mov	r9, r2
 800322a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff fc26 	bl	8002a7c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003230:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003234:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	2b20      	cmp	r3, #32
 8003238:	d004      	beq.n	8003244 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800323a:	2502      	movs	r5, #2
}
 800323c:	4628      	mov	r0, r5
 800323e:	b005      	add	sp, #20
 8003240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003244:	9000      	str	r0, [sp, #0]
 8003246:	2319      	movs	r3, #25
 8003248:	2201      	movs	r2, #1
 800324a:	4620      	mov	r0, r4
 800324c:	495b      	ldr	r1, [pc, #364]	; (80033bc <HAL_I2C_Master_Transmit+0x1a0>)
 800324e:	f7ff fee4 	bl	800301a <I2C_WaitOnFlagUntilTimeout>
 8003252:	2800      	cmp	r0, #0
 8003254:	d1f1      	bne.n	800323a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8003256:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d0ed      	beq.n	800323a <HAL_I2C_Master_Transmit+0x1e>
 800325e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003260:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8003262:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003266:	680b      	ldr	r3, [r1, #0]
 8003268:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800326a:	bf5e      	ittt	pl
 800326c:	680b      	ldrpl	r3, [r1, #0]
 800326e:	f043 0301 	orrpl.w	r3, r3, #1
 8003272:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003274:	680b      	ldr	r3, [r1, #0]
 8003276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800327c:	2321      	movs	r3, #33	; 0x21
 800327e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003282:	2310      	movs	r3, #16
 8003284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003288:	2300      	movs	r3, #0
 800328a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800328c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003290:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8003292:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003296:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_I2C_Master_Transmit+0x1a4>)
 800329a:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800329c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d004      	beq.n	80032ac <HAL_I2C_Master_Transmit+0x90>
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <HAL_I2C_Master_Transmit+0x90>
 80032a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032aa:	d104      	bne.n	80032b6 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ac:	680b      	ldr	r3, [r1, #0]
 80032ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e002      	b.n	80032bc <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032b8:	2b12      	cmp	r3, #18
 80032ba:	d0f7      	beq.n	80032ac <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032bc:	2200      	movs	r2, #0
 80032be:	463b      	mov	r3, r7
 80032c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032c4:	4620      	mov	r0, r4
 80032c6:	9600      	str	r6, [sp, #0]
 80032c8:	f7ff fea7 	bl	800301a <I2C_WaitOnFlagUntilTimeout>
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	b138      	cbz	r0, 80032e0 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d0:	6813      	ldr	r3, [r2, #0]
 80032d2:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032d4:	bf44      	itt	mi
 80032d6:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80032da:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80032dc:	2501      	movs	r5, #1
 80032de:	e7ad      	b.n	800323c <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032e0:	6923      	ldr	r3, [r4, #16]
 80032e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032e6:	d121      	bne.n	800332c <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032e8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80032ec:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ee:	4633      	mov	r3, r6
 80032f0:	463a      	mov	r2, r7
 80032f2:	4620      	mov	r0, r4
 80032f4:	4933      	ldr	r1, [pc, #204]	; (80033c4 <HAL_I2C_Master_Transmit+0x1a8>)
 80032f6:	f7ff fe2f 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032fa:	4605      	mov	r5, r0
 80032fc:	2800      	cmp	r0, #0
 80032fe:	d1ed      	bne.n	80032dc <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	9003      	str	r0, [sp, #12]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	9203      	str	r2, [sp, #12]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	9303      	str	r3, [sp, #12]
 800330c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800330e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003310:	b9f3      	cbnz	r3, 8003350 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	6821      	ldr	r1, [r4, #0]
 8003314:	680a      	ldr	r2, [r1, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800331e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003322:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003326:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800332a:	e787      	b.n	800323c <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800332c:	11eb      	asrs	r3, r5, #7
 800332e:	f003 0306 	and.w	r3, r3, #6
 8003332:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003336:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003338:	4620      	mov	r0, r4
 800333a:	4633      	mov	r3, r6
 800333c:	463a      	mov	r2, r7
 800333e:	4922      	ldr	r1, [pc, #136]	; (80033c8 <HAL_I2C_Master_Transmit+0x1ac>)
 8003340:	f7ff fe0a 	bl	8002f58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003344:	2800      	cmp	r0, #0
 8003346:	d1c9      	bne.n	80032dc <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	b2ed      	uxtb	r5, r5
 800334c:	611d      	str	r5, [r3, #16]
 800334e:	e7ce      	b.n	80032ee <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003350:	4632      	mov	r2, r6
 8003352:	4639      	mov	r1, r7
 8003354:	4620      	mov	r0, r4
 8003356:	f7ff fe92 	bl	800307e <I2C_WaitOnTXEFlagUntilTimeout>
 800335a:	b140      	cbz	r0, 800336e <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d1bc      	bne.n	80032dc <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	6813      	ldr	r3, [r2, #0]
 8003366:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e7b6      	b.n	80032dc <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003370:	6820      	ldr	r0, [r4, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003378:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800337a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800337c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800337e:	3a01      	subs	r2, #1
 8003380:	b292      	uxth	r2, r2
 8003382:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003384:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003386:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 800338a:	1e51      	subs	r1, r2, #1
 800338c:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800338e:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8003392:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003394:	d00a      	beq.n	80033ac <HAL_I2C_Master_Transmit+0x190>
 8003396:	b149      	cbz	r1, 80033ac <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800339a:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339c:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 800339e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80033a0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033a2:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80033aa:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	4632      	mov	r2, r6
 80033ae:	4639      	mov	r1, r7
 80033b0:	4620      	mov	r0, r4
 80033b2:	f7ff fe0c 	bl	8002fce <I2C_WaitOnBTFFlagUntilTimeout>
 80033b6:	2800      	cmp	r0, #0
 80033b8:	d0a9      	beq.n	800330e <HAL_I2C_Master_Transmit+0xf2>
 80033ba:	e7cf      	b.n	800335c <HAL_I2C_Master_Transmit+0x140>
 80033bc:	00100002 	.word	0x00100002
 80033c0:	ffff0000 	.word	0xffff0000
 80033c4:	00010002 	.word	0x00010002
 80033c8:	00010008 	.word	0x00010008

080033cc <HAL_I2C_MasterTxCpltCallback>:
 80033cc:	4770      	bx	lr

080033ce <HAL_I2C_MasterRxCpltCallback>:
 80033ce:	4770      	bx	lr

080033d0 <HAL_I2C_SlaveTxCpltCallback>:
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2C_SlaveRxCpltCallback>:
 80033d2:	4770      	bx	lr

080033d4 <HAL_I2C_AddrCallback>:
}
 80033d4:	4770      	bx	lr

080033d6 <HAL_I2C_ListenCpltCallback>:
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_MemTxCpltCallback>:
 80033d8:	4770      	bx	lr

080033da <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033da:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80033de:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 80033e0:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033e2:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 80033e4:	b983      	cbnz	r3, 8003408 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80033e8:	6802      	ldr	r2, [r0, #0]
 80033ea:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80033ee:	d105      	bne.n	80033fc <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 80033f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80033f6:	3302      	adds	r3, #2
      hi2c->EventCount++;
 80033f8:	6503      	str	r3, [r0, #80]	; 0x50
}
 80033fa:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80033fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003400:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003402:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003404:	3301      	adds	r3, #1
 8003406:	e7f7      	b.n	80033f8 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8003408:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800340a:	2b01      	cmp	r3, #1
 800340c:	d103      	bne.n	8003416 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800340e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003410:	6802      	ldr	r2, [r0, #0]
 8003412:	b2db      	uxtb	r3, r3
 8003414:	e7f4      	b.n	8003400 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8003416:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003418:	2b02      	cmp	r3, #2
 800341a:	d1ee      	bne.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800341c:	2a22      	cmp	r2, #34	; 0x22
 800341e:	d105      	bne.n	800342c <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003420:	6802      	ldr	r2, [r0, #0]
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	e7e6      	b.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800342c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	b163      	cbz	r3, 800344c <I2C_MemoryTransmit_TXE_BTF+0x72>
 8003432:	2a21      	cmp	r2, #33	; 0x21
 8003434:	d10a      	bne.n	800344c <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003436:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003438:	6802      	ldr	r2, [r0, #0]
 800343a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800343e:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8003440:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003442:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003444:	3b01      	subs	r3, #1
 8003446:	b29b      	uxth	r3, r3
 8003448:	8543      	strh	r3, [r0, #42]	; 0x2a
 800344a:	e7d6      	b.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800344c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1d2      	bne.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003454:	2a21      	cmp	r2, #33	; 0x21
 8003456:	d1d0      	bne.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003458:	6802      	ldr	r2, [r0, #0]
 800345a:	6851      	ldr	r1, [r2, #4]
 800345c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003460:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003468:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 800346a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800346c:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800346e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003472:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003476:	f7ff ffaf 	bl	80033d8 <HAL_I2C_MemTxCpltCallback>
}
 800347a:	e7be      	b.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0x20>

0800347c <HAL_I2C_MemRxCpltCallback>:
 800347c:	4770      	bx	lr

0800347e <HAL_I2C_ErrorCallback>:
 800347e:	4770      	bx	lr

08003480 <HAL_I2C_AbortCpltCallback>:
 8003480:	4770      	bx	lr
	...

08003484 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003484:	2300      	movs	r3, #0
{
 8003486:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003488:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 800348a:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800348c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003490:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003492:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003494:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	fbb3 f2f2 	udiv	r2, r3, r2
 800349e:	2323      	movs	r3, #35	; 0x23
 80034a0:	4353      	muls	r3, r2
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 80034a6:	9a01      	ldr	r2, [sp, #4]
 80034a8:	bb42      	cbnz	r2, 80034fc <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034aa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80034ac:	f042 0220 	orr.w	r2, r2, #32
 80034b0:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 80034b2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80034b4:	b10d      	cbz	r5, 80034ba <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034b6:	2200      	movs	r2, #0
 80034b8:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 80034ba:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80034bc:	b10c      	cbz	r4, 80034c2 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034be:	2200      	movs	r2, #0
 80034c0:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c8:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 80034ca:	2200      	movs	r2, #0
 80034cc:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 80034ce:	b105      	cbz	r5, 80034d2 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034d0:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 80034d2:	b104      	cbz	r4, 80034d6 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034d4:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034de:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80034e2:	2a60      	cmp	r2, #96	; 0x60
 80034e4:	d111      	bne.n	800350a <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 80034e6:	2320      	movs	r3, #32
 80034e8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034f2:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80034f4:	f7ff ffc4 	bl	8003480 <HAL_I2C_AbortCpltCallback>
}
 80034f8:	b003      	add	sp, #12
 80034fa:	bd30      	pop	{r4, r5, pc}
    count--;
 80034fc:	9a01      	ldr	r2, [sp, #4]
 80034fe:	3a01      	subs	r2, #1
 8003500:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	0592      	lsls	r2, r2, #22
 8003506:	d4ce      	bmi.n	80034a6 <I2C_DMAAbort+0x22>
 8003508:	e7d3      	b.n	80034b2 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800350a:	f001 0228 	and.w	r2, r1, #40	; 0x28
 800350e:	2a28      	cmp	r2, #40	; 0x28
 8003510:	d10e      	bne.n	8003530 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8003512:	6819      	ldr	r1, [r3, #0]
 8003514:	f041 0101 	orr.w	r1, r1, #1
 8003518:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003520:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003526:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800352a:	f7ff ffa8 	bl	800347e <HAL_I2C_ErrorCallback>
}
 800352e:	e7e3      	b.n	80034f8 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8003530:	2320      	movs	r3, #32
 8003532:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003536:	2300      	movs	r3, #0
 8003538:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800353c:	e7f5      	b.n	800352a <I2C_DMAAbort+0xa6>
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000

08003544 <I2C_ITError>:
{
 8003544:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003546:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800354a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 800354e:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003550:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003552:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003554:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003556:	6803      	ldr	r3, [r0, #0]
 8003558:	d001      	beq.n	800355e <I2C_ITError+0x1a>
 800355a:	2940      	cmp	r1, #64	; 0x40
 800355c:	d113      	bne.n	8003586 <I2C_ITError+0x42>
 800355e:	2a22      	cmp	r2, #34	; 0x22
 8003560:	d111      	bne.n	8003586 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003568:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8003570:	d106      	bne.n	8003580 <I2C_ITError+0x3c>
 8003572:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8003574:	bf1e      	ittt	ne
 8003576:	2220      	movne	r2, #32
 8003578:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	2200      	movs	r2, #0
 8003582:	6322      	str	r2, [r4, #48]	; 0x30
 8003584:	e007      	b.n	8003596 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003586:	f002 0128 	and.w	r1, r2, #40	; 0x28
 800358a:	2928      	cmp	r1, #40	; 0x28
 800358c:	d1ed      	bne.n	800356a <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	2200      	movs	r2, #0
 8003590:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003592:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 800359c:	d04f      	beq.n	800363e <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800359e:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035a6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035a8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <I2C_ITError+0x148>)
 80035b0:	d02b      	beq.n	800360a <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035b2:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035b4:	f7ff fafa 	bl	8002bac <HAL_DMA_Abort_IT>
 80035b8:	b150      	cbz	r0, 80035d0 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 80035ba:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	2320      	movs	r3, #32
 80035c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80035ce:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 80035d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80035d2:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d4:	bf1f      	itttt	ne
 80035d6:	6822      	ldrne	r2, [r4, #0]
 80035d8:	6853      	ldrne	r3, [r2, #4]
 80035da:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 80035de:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 80035e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 80035e6:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80035e8:	0752      	lsls	r2, r2, #29
 80035ea:	d50d      	bpl.n	8003608 <I2C_ITError+0xc4>
 80035ec:	2b28      	cmp	r3, #40	; 0x28
 80035ee:	d10b      	bne.n	8003608 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f2:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 80035f8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80035fc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003600:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003604:	f7ff fee7 	bl	80033d6 <HAL_I2C_ListenCpltCallback>
}
 8003608:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800360a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800360c:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800360e:	f7ff facd 	bl	8002bac <HAL_DMA_Abort_IT>
 8003612:	2800      	cmp	r0, #0
 8003614:	d0dc      	beq.n	80035d0 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	0651      	lsls	r1, r2, #25
 800361c:	d505      	bpl.n	800362a <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003622:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003626:	3301      	adds	r3, #1
 8003628:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 800362a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 800362e:	6813      	ldr	r3, [r2, #0]
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003636:	2320      	movs	r3, #32
 8003638:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800363c:	e7c6      	b.n	80035cc <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800363e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003642:	2960      	cmp	r1, #96	; 0x60
 8003644:	d115      	bne.n	8003672 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003646:	2120      	movs	r1, #32
 8003648:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364c:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	0652      	lsls	r2, r2, #25
 8003652:	d505      	bpl.n	8003660 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003654:	691a      	ldr	r2, [r3, #16]
 8003656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003658:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800365a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800365c:	3301      	adds	r3, #1
 800365e:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003660:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003662:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003664:	6813      	ldr	r3, [r2, #0]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800366c:	f7ff ff08 	bl	8003480 <HAL_I2C_AbortCpltCallback>
 8003670:	e7ae      	b.n	80035d0 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	0650      	lsls	r0, r2, #25
 8003676:	d505      	bpl.n	8003684 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800367c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800367e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003680:	3301      	adds	r3, #1
 8003682:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003684:	4620      	mov	r0, r4
 8003686:	f7ff fefa 	bl	800347e <HAL_I2C_ErrorCallback>
 800368a:	e7a1      	b.n	80035d0 <I2C_ITError+0x8c>
 800368c:	08003485 	.word	0x08003485
 8003690:	ffff0000 	.word	0xffff0000

08003694 <HAL_I2C_EV_IRQHandler>:
{
 8003694:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003696:	6803      	ldr	r3, [r0, #0]
{
 8003698:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800369a:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800369c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800369e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036a2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036a6:	2910      	cmp	r1, #16
{
 80036a8:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036aa:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ac:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036ae:	d002      	beq.n	80036b6 <HAL_I2C_EV_IRQHandler+0x22>
 80036b0:	2d40      	cmp	r5, #64	; 0x40
 80036b2:	f040 82e0 	bne.w	8003c76 <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036b6:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036b8:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036ba:	f011 0f01 	tst.w	r1, #1
 80036be:	d107      	bne.n	80036d0 <HAL_I2C_EV_IRQHandler+0x3c>
 80036c0:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 80036c4:	d002      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 80036c6:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 80036ca:	d150      	bne.n	800376e <HAL_I2C_EV_IRQHandler+0xda>
}
 80036cc:	b00e      	add	sp, #56	; 0x38
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036d0:	0596      	lsls	r6, r2, #22
 80036d2:	d54c      	bpl.n	800376e <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80036d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036d6:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 80036da:	d10c      	bne.n	80036f6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80036dc:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036de:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80036e0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80036e4:	2a40      	cmp	r2, #64	; 0x40
 80036e6:	d111      	bne.n	800370c <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 80036e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80036ea:	b952      	cbnz	r2, 8003702 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80036ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80036ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80036f2:	611a      	str	r2, [r3, #16]
 80036f4:	e7ea      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80036f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036f8:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 80036fc:	d1f0      	bne.n	80036e0 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80036fe:	2208      	movs	r2, #8
 8003700:	e7ed      	b.n	80036de <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003702:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003704:	f042 0201 	orr.w	r2, r2, #1
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	e7f2      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370c:	6922      	ldr	r2, [r4, #16]
 800370e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003712:	d119      	bne.n	8003748 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003714:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003718:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800371a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800371c:	bf16      	itet	ne
 800371e:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003722:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003726:	b2d2      	uxtbne	r2, r2
 8003728:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800372a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800372c:	b10a      	cbz	r2, 8003732 <HAL_I2C_EV_IRQHandler+0x9e>
 800372e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003730:	b92a      	cbnz	r2, 800373e <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003734:	2a00      	cmp	r2, #0
 8003736:	d0c9      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003738:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800373a:	2a00      	cmp	r2, #0
 800373c:	d0c6      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e7c1      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 8003748:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800374a:	b932      	cbnz	r2, 800375a <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800374c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800374e:	11d2      	asrs	r2, r2, #7
 8003750:	f002 0206 	and.w	r2, r2, #6
 8003754:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003758:	e7cb      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800375a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800375c:	2a01      	cmp	r2, #1
 800375e:	d1b5      	bne.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003760:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003762:	11d2      	asrs	r2, r2, #7
 8003764:	f002 0206 	and.w	r2, r2, #6
 8003768:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 800376c:	e7c1      	b.n	80036f2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800376e:	070e      	lsls	r6, r1, #28
 8003770:	d50e      	bpl.n	8003790 <HAL_I2C_EV_IRQHandler+0xfc>
 8003772:	0596      	lsls	r6, r2, #22
 8003774:	d50c      	bpl.n	8003790 <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003776:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800377c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800377e:	b912      	cbnz	r2, 8003786 <HAL_I2C_EV_IRQHandler+0xf2>
 8003780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003782:	2900      	cmp	r1, #0
 8003784:	d0a2      	beq.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003786:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003788:	2a00      	cmp	r2, #0
 800378a:	d1d8      	bne.n	800373e <HAL_I2C_EV_IRQHandler+0xaa>
 800378c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800378e:	e7d3      	b.n	8003738 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003790:	078e      	lsls	r6, r1, #30
 8003792:	f140 80e6 	bpl.w	8003962 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003796:	0596      	lsls	r6, r2, #22
 8003798:	f140 80e3 	bpl.w	8003962 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800379c:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80037a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80037a2:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037a4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80037a8:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037aa:	2822      	cmp	r0, #34	; 0x22
 80037ac:	f040 80d1 	bne.w	8003952 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80037b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80037b2:	b940      	cbnz	r0, 80037c6 <HAL_I2C_EV_IRQHandler+0x132>
 80037b4:	2940      	cmp	r1, #64	; 0x40
 80037b6:	d106      	bne.n	80037c6 <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b8:	9001      	str	r0, [sp, #4]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	9201      	str	r2, [sp, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	9301      	str	r3, [sp, #4]
 80037c2:	9b01      	ldr	r3, [sp, #4]
 80037c4:	e782      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80037c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80037c8:	b989      	cbnz	r1, 80037ee <HAL_I2C_EV_IRQHandler+0x15a>
 80037ca:	6920      	ldr	r0, [r4, #16]
 80037cc:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 80037d0:	d10d      	bne.n	80037ee <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	9102      	str	r1, [sp, #8]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	9202      	str	r2, [sp, #8]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	9202      	str	r2, [sp, #8]
 80037dc:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80037e6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80037e8:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 80037ea:	6523      	str	r3, [r4, #80]	; 0x50
 80037ec:	e76e      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 80037ee:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80037f0:	b289      	uxth	r1, r1
 80037f2:	b951      	cbnz	r1, 800380a <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	9103      	str	r1, [sp, #12]
 80037f6:	695a      	ldr	r2, [r3, #20]
 80037f8:	9203      	str	r2, [sp, #12]
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	9203      	str	r2, [sp, #12]
 80037fe:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e019      	b.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 800380a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800380c:	b289      	uxth	r1, r1
 800380e:	2901      	cmp	r1, #1
 8003810:	d149      	bne.n	80038a6 <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003812:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003816:	d11b      	bne.n	8003850 <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003826:	d00c      	beq.n	8003842 <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003830:	2200      	movs	r2, #0
 8003832:	9204      	str	r2, [sp, #16]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	9204      	str	r2, [sp, #16]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	9304      	str	r3, [sp, #16]
 800383c:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	e7d3      	b.n	80037ea <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003842:	9205      	str	r2, [sp, #20]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	9205      	str	r2, [sp, #20]
 8003848:	699a      	ldr	r2, [r3, #24]
 800384a:	9205      	str	r2, [sp, #20]
 800384c:	9a05      	ldr	r2, [sp, #20]
 800384e:	e7d7      	b.n	8003800 <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003850:	2a08      	cmp	r2, #8
 8003852:	d01c      	beq.n	800388e <HAL_I2C_EV_IRQHandler+0x1fa>
 8003854:	2a20      	cmp	r2, #32
 8003856:	d01a      	beq.n	800388e <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003858:	2d12      	cmp	r5, #18
 800385a:	d10d      	bne.n	8003878 <HAL_I2C_EV_IRQHandler+0x1e4>
 800385c:	2a01      	cmp	r2, #1
 800385e:	d116      	bne.n	800388e <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003868:	2200      	movs	r2, #0
 800386a:	9206      	str	r2, [sp, #24]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	9206      	str	r2, [sp, #24]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	9306      	str	r3, [sp, #24]
 8003874:	9b06      	ldr	r3, [sp, #24]
 8003876:	e7e2      	b.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003878:	2a10      	cmp	r2, #16
 800387a:	d8f1      	bhi.n	8003860 <HAL_I2C_EV_IRQHandler+0x1cc>
 800387c:	499c      	ldr	r1, [pc, #624]	; (8003af0 <HAL_I2C_EV_IRQHandler+0x45c>)
 800387e:	fa21 f202 	lsr.w	r2, r1, r2
 8003882:	07d0      	lsls	r0, r2, #31
 8003884:	d5ec      	bpl.n	8003860 <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800388c:	e7eb      	b.n	8003866 <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003894:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2200      	movs	r2, #0
 8003898:	9207      	str	r2, [sp, #28]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	9207      	str	r2, [sp, #28]
 800389e:	699a      	ldr	r2, [r3, #24]
 80038a0:	9207      	str	r2, [sp, #28]
 80038a2:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a4:	e7ac      	b.n	8003800 <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 80038a6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 80038a8:	b289      	uxth	r1, r1
 80038aa:	2902      	cmp	r1, #2
 80038ac:	d133      	bne.n	8003916 <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80038ae:	2a10      	cmp	r2, #16
 80038b0:	d805      	bhi.n	80038be <HAL_I2C_EV_IRQHandler+0x22a>
 80038b2:	498f      	ldr	r1, [pc, #572]	; (8003af0 <HAL_I2C_EV_IRQHandler+0x45c>)
 80038b4:	40d1      	lsrs	r1, r2
 80038b6:	43c9      	mvns	r1, r1
 80038b8:	f011 0101 	ands.w	r1, r1, #1
 80038bc:	d020      	beq.n	8003900 <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80038c4:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038c6:	2100      	movs	r1, #0
 80038c8:	9108      	str	r1, [sp, #32]
 80038ca:	6959      	ldr	r1, [r3, #20]
 80038cc:	9108      	str	r1, [sp, #32]
 80038ce:	6999      	ldr	r1, [r3, #24]
 80038d0:	9108      	str	r1, [sp, #32]
 80038d2:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80038da:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	0509      	lsls	r1, r1, #20
 80038e0:	d5ad      	bpl.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
 80038e2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80038e6:	d006      	beq.n	80038f6 <HAL_I2C_EV_IRQHandler+0x262>
 80038e8:	1e51      	subs	r1, r2, #1
 80038ea:	291f      	cmp	r1, #31
 80038ec:	d8a7      	bhi.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
 80038ee:	4a81      	ldr	r2, [pc, #516]	; (8003af4 <HAL_I2C_EV_IRQHandler+0x460>)
 80038f0:	40ca      	lsrs	r2, r1
 80038f2:	07d2      	lsls	r2, r2, #31
 80038f4:	d5a3      	bpl.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	e79e      	b.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8003906:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003908:	9109      	str	r1, [sp, #36]	; 0x24
 800390a:	6959      	ldr	r1, [r3, #20]
 800390c:	9109      	str	r1, [sp, #36]	; 0x24
 800390e:	6999      	ldr	r1, [r3, #24]
 8003910:	9109      	str	r1, [sp, #36]	; 0x24
 8003912:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003914:	e7e2      	b.n	80038dc <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800391c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	050e      	lsls	r6, r1, #20
 8003922:	d50e      	bpl.n	8003942 <HAL_I2C_EV_IRQHandler+0x2ae>
 8003924:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003928:	d007      	beq.n	800393a <HAL_I2C_EV_IRQHandler+0x2a6>
 800392a:	3a01      	subs	r2, #1
 800392c:	2a1f      	cmp	r2, #31
 800392e:	d808      	bhi.n	8003942 <HAL_I2C_EV_IRQHandler+0x2ae>
 8003930:	4970      	ldr	r1, [pc, #448]	; (8003af4 <HAL_I2C_EV_IRQHandler+0x460>)
 8003932:	fa21 f202 	lsr.w	r2, r1, r2
 8003936:	07d5      	lsls	r5, r2, #31
 8003938:	d503      	bpl.n	8003942 <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003940:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2200      	movs	r2, #0
 8003944:	920a      	str	r2, [sp, #40]	; 0x28
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	920a      	str	r2, [sp, #40]	; 0x28
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	930a      	str	r3, [sp, #40]	; 0x28
 800394e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003950:	e775      	b.n	800383e <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003952:	2200      	movs	r2, #0
 8003954:	920b      	str	r2, [sp, #44]	; 0x2c
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	920b      	str	r2, [sp, #44]	; 0x2c
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	930b      	str	r3, [sp, #44]	; 0x2c
 800395e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003960:	e6b4      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003962:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003966:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003968:	f000 8098 	beq.w	8003a9c <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800396c:	0500      	lsls	r0, r0, #20
 800396e:	f53f aead 	bmi.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003972:	060e      	lsls	r6, r1, #24
 8003974:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003978:	d555      	bpl.n	8003a26 <HAL_I2C_EV_IRQHandler+0x392>
 800397a:	0551      	lsls	r1, r2, #21
 800397c:	d553      	bpl.n	8003a26 <HAL_I2C_EV_IRQHandler+0x392>
 800397e:	2800      	cmp	r0, #0
 8003980:	d154      	bne.n	8003a2c <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003982:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003986:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003988:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800398c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800398e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003990:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003992:	bb7d      	cbnz	r5, 80039f4 <HAL_I2C_EV_IRQHandler+0x360>
 8003994:	2a21      	cmp	r2, #33	; 0x21
 8003996:	d12f      	bne.n	80039f8 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003998:	2808      	cmp	r0, #8
 800399a:	d014      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x332>
 800399c:	2820      	cmp	r0, #32
 800399e:	d012      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x332>
 80039a0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 80039a4:	d00f      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ac:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80039ae:	2311      	movs	r3, #17
 80039b0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	2320      	movs	r3, #32
 80039ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80039be:	4620      	mov	r0, r4
 80039c0:	f7ff fd04 	bl	80033cc <HAL_I2C_MasterTxCpltCallback>
 80039c4:	e682      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039c6:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039c8:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80039ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039d8:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80039da:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80039dc:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80039de:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039e2:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039ea:	2a40      	cmp	r2, #64	; 0x40
 80039ec:	d1e8      	bne.n	80039c0 <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 80039ee:	f7ff fcf3 	bl	80033d8 <HAL_I2C_MemTxCpltCallback>
 80039f2:	e66b      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80039f4:	2a21      	cmp	r2, #33	; 0x21
 80039f6:	d005      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x370>
 80039f8:	2940      	cmp	r1, #64	; 0x40
 80039fa:	f47f ae67 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80039fe:	2a22      	cmp	r2, #34	; 0x22
 8003a00:	f47f ae64 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8003a04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a06:	b292      	uxth	r2, r2
 8003a08:	b91a      	cbnz	r2, 8003a12 <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	e698      	b.n	8003744 <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a12:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003a16:	2a40      	cmp	r2, #64	; 0x40
 8003a18:	d116      	bne.n	8003a48 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a1a:	4620      	mov	r0, r4
}
 8003a1c:	b00e      	add	sp, #56	; 0x38
 8003a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a22:	f7ff bcda 	b.w	80033da <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	2800      	cmp	r0, #0
 8003a28:	f43f ae50 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003a2c:	0592      	lsls	r2, r2, #22
 8003a2e:	f57f ae4d 	bpl.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003a32:	2d10      	cmp	r5, #16
 8003a34:	d1f1      	bne.n	8003a1a <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a36:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a38:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003a3c:	2a21      	cmp	r2, #33	; 0x21
 8003a3e:	f47f ae45 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8003a42:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003a44:	b292      	uxth	r2, r2
 8003a46:	b14a      	cbz	r2, 8003a5c <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a4a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a4e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003a50:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8003a5a:	e637      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a5c:	2908      	cmp	r1, #8
 8003a5e:	d00d      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x3e8>
 8003a60:	2920      	cmp	r1, #32
 8003a62:	d00b      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x3e8>
 8003a64:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003a68:	d008      	beq.n	8003a7c <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003a70:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a72:	2311      	movs	r3, #17
 8003a74:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a76:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8003a7a:	e79d      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a82:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003a8e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a90:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a9a:	e790      	b.n	80039be <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a9c:	0506      	lsls	r6, r0, #20
 8003a9e:	f53f ae15 	bmi.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aa2:	064d      	lsls	r5, r1, #25
 8003aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003aa8:	d57b      	bpl.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x50e>
 8003aaa:	0551      	lsls	r1, r2, #21
 8003aac:	d579      	bpl.n	8003ba2 <HAL_I2C_EV_IRQHandler+0x50e>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d17a      	bne.n	8003ba8 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ab2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003ab6:	2a22      	cmp	r2, #34	; 0x22
 8003ab8:	f47f ae08 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8003abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003abe:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003ac0:	2a03      	cmp	r2, #3
 8003ac2:	d919      	bls.n	8003af8 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ad0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	f47f adf5 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	6853      	ldr	r3, [r2, #4]
 8003ae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003aea:	6053      	str	r3, [r2, #4]
 8003aec:	e5ee      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003aee:	bf00      	nop
 8003af0:	00010014 	.word	0x00010014
 8003af4:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003af8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003afa:	2902      	cmp	r1, #2
 8003afc:	f43f ade6 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003b00:	2a01      	cmp	r2, #1
 8003b02:	f63f ade3 	bhi.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b06:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003b0a:	4a72      	ldr	r2, [pc, #456]	; (8003cd4 <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8003b0c:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	fbb2 f2f1 	udiv	r2, r2, r1
 8003b14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003b18:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8003b1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b1c:	3a01      	subs	r2, #1
 8003b1e:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 8003b20:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b22:	b9d1      	cbnz	r1, 8003b5a <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b24:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8003b26:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b28:	f042 0220 	orr.w	r2, r2, #32
 8003b2c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003b42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b50:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b54:	f7ff fc93 	bl	800347e <HAL_I2C_ErrorCallback>
 8003b58:	e5b8      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003b60:	d1db      	bne.n	8003b1a <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b62:	6819      	ldr	r1, [r3, #0]
 8003b64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003b68:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003b70:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b72:	6919      	ldr	r1, [r3, #16]
 8003b74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b76:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8003b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003b7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003b86:	2320      	movs	r3, #32
 8003b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b8c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d168      	bne.n	8003c6a <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff fc6e 	bl	800347c <HAL_I2C_MemRxCpltCallback>
 8003ba0:	e594      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f43f ad92 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003ba8:	0592      	lsls	r2, r2, #22
 8003baa:	f57f ad8f 	bpl.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8003bb0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003bb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003bb4:	b280      	uxth	r0, r0
 8003bb6:	2804      	cmp	r0, #4
 8003bb8:	d109      	bne.n	8003bce <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc0:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bc8:	3301      	adds	r3, #1
 8003bca:	6263      	str	r3, [r4, #36]	; 0x24
 8003bcc:	e741      	b.n	8003a52 <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 8003bce:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003bd0:	b280      	uxth	r0, r0
 8003bd2:	2803      	cmp	r0, #3
 8003bd4:	d10c      	bne.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bd6:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003bd8:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bda:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8003bde:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003be0:	d0ef      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x52e>
 8003be2:	2a02      	cmp	r2, #2
 8003be4:	d0ed      	beq.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	e7e8      	b.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8003bf0:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8003bf2:	b280      	uxth	r0, r0
 8003bf4:	2802      	cmp	r0, #2
 8003bf6:	d1e4      	bne.n	8003bc2 <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bf8:	2a01      	cmp	r2, #1
 8003bfa:	d001      	beq.n	8003c00 <HAL_I2C_EV_IRQHandler+0x56c>
 8003bfc:	2a10      	cmp	r2, #16
 8003bfe:	d128      	bne.n	8003c52 <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003c0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c0e:	1c53      	adds	r3, r2, #1
 8003c10:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8003c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c22:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8003c24:	3301      	adds	r3, #1
 8003c26:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003c28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c30:	6853      	ldr	r3, [r2, #4]
 8003c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c36:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c3e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c48:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c4c:	d10d      	bne.n	8003c6a <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c50:	e7a3      	b.n	8003b9a <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c52:	2a04      	cmp	r2, #4
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_EV_IRQHandler+0x5c6>
 8003c56:	2a02      	cmp	r2, #2
 8003c58:	d103      	bne.n	8003c62 <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c60:	e7d1      	b.n	8003c06 <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	e7cd      	b.n	8003c06 <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6a:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c6c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003c6e:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c70:	f7ff fbad 	bl	80033ce <HAL_I2C_MasterRxCpltCallback>
 8003c74:	e52a      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c78:	b311      	cbz	r1, 8003cc0 <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 8003c7a:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c7c:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c7e:	078e      	lsls	r6, r1, #30
 8003c80:	d52a      	bpl.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x644>
 8003c82:	0596      	lsls	r6, r2, #22
 8003c84:	d528      	bpl.n	8003cd8 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c88:	b102      	cbz	r2, 8003c8c <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c8a:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c8c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003c90:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8003c94:	2a28      	cmp	r2, #40	; 0x28
 8003c96:	d116      	bne.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c98:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003c9a:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003ca4:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 8003ca6:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003caa:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003cac:	bf54      	ite	pl
 8003cae:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003cb0:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003cb2:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8003cb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003cba:	f7ff fb8b 	bl	80033d4 <HAL_I2C_AddrCallback>
 8003cbe:	e505      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003cc0:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cc2:	6959      	ldr	r1, [r3, #20]
 8003cc4:	e7db      	b.n	8003c7e <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc6:	f06f 0202 	mvn.w	r2, #2
 8003cca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003cd2:	e4fb      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003cd4:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd8:	06ce      	lsls	r6, r1, #27
 8003cda:	f140 80b1 	bpl.w	8003e40 <HAL_I2C_EV_IRQHandler+0x7ac>
 8003cde:	0595      	lsls	r5, r2, #22
 8003ce0:	f140 80ae 	bpl.w	8003e40 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce4:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ce8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cea:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003cf0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	920d      	str	r2, [sp, #52]	; 0x34
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	920d      	str	r2, [sp, #52]	; 0x34
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]
 8003d02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	0512      	lsls	r2, r2, #20
 8003d10:	d520      	bpl.n	8003d54 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d12:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8003d16:	2a22      	cmp	r2, #34	; 0x22
 8003d18:	d14a      	bne.n	8003db0 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003d1a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d1c:	6802      	ldr	r2, [r0, #0]
 8003d1e:	6852      	ldr	r2, [r2, #4]
 8003d20:	b292      	uxth	r2, r2
 8003d22:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003d24:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d26:	b292      	uxth	r2, r2
 8003d28:	b11a      	cbz	r2, 8003d32 <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d2a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d2c:	f042 0204 	orr.w	r2, r2, #4
 8003d30:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d38:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003d3a:	f7ff f80f 	bl	8002d5c <HAL_DMA_GetState>
 8003d3e:	2801      	cmp	r0, #1
 8003d40:	d008      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d42:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d44:	4b79      	ldr	r3, [pc, #484]	; (8003f2c <HAL_I2C_EV_IRQHandler+0x898>)
 8003d46:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d48:	f7fe ff30 	bl	8002bac <HAL_DMA_Abort_IT>
 8003d4c:	b110      	cbz	r0, 8003d54 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d52:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003d54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	b313      	cbz	r3, 8003da0 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	0756      	lsls	r6, r2, #29
 8003d60:	d509      	bpl.n	8003d76 <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d66:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d6e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d70:	3b01      	subs	r3, #1
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	0650      	lsls	r0, r2, #25
 8003d7c:	d509      	bpl.n	8003d92 <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d82:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d86:	3301      	adds	r3, #1
 8003d88:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8003d92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	b11b      	cbz	r3, 8003da0 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003da2:	b313      	cbz	r3, 8003dea <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 8003da4:	4620      	mov	r0, r4
}
 8003da6:	b00e      	add	sp, #56	; 0x38
 8003da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8003dac:	f7ff bbca 	b.w	8003544 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003db0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003db2:	6802      	ldr	r2, [r0, #0]
 8003db4:	6852      	ldr	r2, [r2, #4]
 8003db6:	b292      	uxth	r2, r2
 8003db8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8003dba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003dbc:	b292      	uxth	r2, r2
 8003dbe:	b11a      	cbz	r2, 8003dc8 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003dc2:	f042 0204 	orr.w	r2, r2, #4
 8003dc6:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dce:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dd0:	f7fe ffc4 	bl	8002d5c <HAL_DMA_GetState>
 8003dd4:	2801      	cmp	r0, #1
 8003dd6:	d0bd      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dd8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003dda:	4b54      	ldr	r3, [pc, #336]	; (8003f2c <HAL_I2C_EV_IRQHandler+0x898>)
 8003ddc:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dde:	f7fe fee5 	bl	8002bac <HAL_DMA_Abort_IT>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d0b6      	beq.n	8003d54 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003de6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003de8:	e7b2      	b.n	8003d50 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003dea:	2d2a      	cmp	r5, #42	; 0x2a
 8003dec:	d106      	bne.n	8003dfc <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003df0:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003df4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003df8:	f7ff faeb 	bl	80033d2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003dfc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8003e00:	2b28      	cmp	r3, #40	; 0x28
 8003e02:	d10c      	bne.n	8003e1e <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e04:	4b4a      	ldr	r3, [pc, #296]	; (8003f30 <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e08:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e0a:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e0c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e0e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003e18:	f7ff fadd 	bl	80033d6 <HAL_I2C_ListenCpltCallback>
 8003e1c:	e456      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003e1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e20:	2b22      	cmp	r3, #34	; 0x22
 8003e22:	d002      	beq.n	8003e2a <HAL_I2C_EV_IRQHandler+0x796>
 8003e24:	2d22      	cmp	r5, #34	; 0x22
 8003e26:	f47f ac51 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e2a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e38:	4620      	mov	r0, r4
 8003e3a:	f7ff faca 	bl	80033d2 <HAL_I2C_SlaveRxCpltCallback>
 8003e3e:	e445      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e40:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8003e44:	2821      	cmp	r0, #33	; 0x21
 8003e46:	f3c1 0580 	ubfx	r5, r1, #2, #1
 8003e4a:	d135      	bne.n	8003eb8 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4c:	0609      	lsls	r1, r1, #24
 8003e4e:	d527      	bpl.n	8003ea0 <HAL_I2C_EV_IRQHandler+0x80c>
 8003e50:	0556      	lsls	r6, r2, #21
 8003e52:	d525      	bpl.n	8003ea0 <HAL_I2C_EV_IRQHandler+0x80c>
 8003e54:	bb3d      	cbnz	r5, 8003ea6 <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e56:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003e5a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e5c:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 8003e5e:	b292      	uxth	r2, r2
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	f43f ac33 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e68:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003e6c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003e6e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003e70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e72:	3a01      	subs	r2, #1
 8003e74:	b292      	uxth	r2, r2
 8003e76:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e78:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	f47f ac25 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003e82:	2929      	cmp	r1, #41	; 0x29
 8003e84:	f47f ac22 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e8e:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e90:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e92:	6320      	str	r0, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e94:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e9a:	f7ff fa99 	bl	80033d0 <HAL_I2C_SlaveTxCpltCallback>
 8003e9e:	e415      	b.n	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea0:	2d00      	cmp	r5, #0
 8003ea2:	f43f ac13 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003ea6:	0595      	lsls	r5, r2, #22
 8003ea8:	f57f ac10 	bpl.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003eac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	2a00      	cmp	r2, #0
 8003eb2:	f43f ac0b 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003eb6:	e5c7      	b.n	8003a48 <HAL_I2C_EV_IRQHandler+0x3b4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eb8:	0648      	lsls	r0, r1, #25
 8003eba:	d527      	bpl.n	8003f0c <HAL_I2C_EV_IRQHandler+0x878>
 8003ebc:	0551      	lsls	r1, r2, #21
 8003ebe:	d525      	bpl.n	8003f0c <HAL_I2C_EV_IRQHandler+0x878>
 8003ec0:	bb3d      	cbnz	r5, 8003f12 <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8003ec6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ec8:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8003eca:	b289      	uxth	r1, r1
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	f43f abfd 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed2:	6919      	ldr	r1, [r3, #16]
 8003ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ed6:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eda:	3301      	adds	r3, #1
 8003edc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003ede:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ee6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f47f abee 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003ef0:	2a2a      	cmp	r2, #42	; 0x2a
 8003ef2:	f47f abeb 	bne.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	6853      	ldr	r3, [r2, #4]
 8003efa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003efe:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f00:	2322      	movs	r3, #34	; 0x22
 8003f02:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003f04:	2328      	movs	r3, #40	; 0x28
 8003f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003f0a:	e795      	b.n	8003e38 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0c:	2d00      	cmp	r5, #0
 8003f0e:	f43f abdd 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
 8003f12:	0592      	lsls	r2, r2, #22
 8003f14:	f57f abda 	bpl.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8003f18:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	f43f abd5 	beq.w	80036cc <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e64d      	b.n	8003bc6 <HAL_I2C_EV_IRQHandler+0x532>
 8003f2a:	bf00      	nop
 8003f2c:	08003485 	.word	0x08003485
 8003f30:	ffff0000 	.word	0xffff0000

08003f34 <HAL_I2C_ER_IRQHandler>:
{
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f36:	6803      	ldr	r3, [r0, #0]
{
 8003f38:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f3a:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f3c:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f3e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f42:	05f8      	lsls	r0, r7, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f44:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f46:	f3c7 2500 	ubfx	r5, r7, #8, #1
 8003f4a:	d50b      	bpl.n	8003f64 <HAL_I2C_ER_IRQHandler+0x30>
 8003f4c:	05f1      	lsls	r1, r6, #23
 8003f4e:	f3c6 2500 	ubfx	r5, r6, #8, #1
 8003f52:	d507      	bpl.n	8003f64 <HAL_I2C_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f54:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 8003f58:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f5a:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8003f62:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f64:	05b8      	lsls	r0, r7, #22
 8003f66:	d506      	bpl.n	8003f76 <HAL_I2C_ER_IRQHandler+0x42>
 8003f68:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f6a:	bf42      	ittt	mi
 8003f6c:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8003f70:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f74:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f76:	0578      	lsls	r0, r7, #21
 8003f78:	d536      	bpl.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
 8003f7a:	05f1      	lsls	r1, r6, #23
 8003f7c:	d534      	bpl.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
    tmp2 = hi2c->XferCount;
 8003f7e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8003f80:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f84:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8003f86:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 8003f8a:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8003f8c:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f8e:	d15b      	bne.n	8004048 <HAL_I2C_ER_IRQHandler+0x114>
 8003f90:	2800      	cmp	r0, #0
 8003f92:	d159      	bne.n	8004048 <HAL_I2C_ER_IRQHandler+0x114>
 8003f94:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8003f98:	2821      	cmp	r0, #33	; 0x21
 8003f9a:	d004      	beq.n	8003fa6 <HAL_I2C_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f9c:	2928      	cmp	r1, #40	; 0x28
 8003f9e:	d153      	bne.n	8004048 <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003fa0:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 8003fa4:	d150      	bne.n	8004048 <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fa6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003faa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fac:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003fae:	2908      	cmp	r1, #8
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_ER_IRQHandler+0x82>
 8003fb2:	2920      	cmp	r1, #32
 8003fb4:	d12a      	bne.n	800400c <HAL_I2C_ER_IRQHandler+0xd8>
 8003fb6:	2a28      	cmp	r2, #40	; 0x28
 8003fb8:	d128      	bne.n	800400c <HAL_I2C_ER_IRQHandler+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fba:	4a2c      	ldr	r2, [pc, #176]	; (800406c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fbc:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fbe:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fcc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fd8:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fdc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fe0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003fe4:	f7ff f9f7 	bl	80033d6 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fe8:	053a      	lsls	r2, r7, #20
 8003fea:	d53b      	bpl.n	8004064 <HAL_I2C_ER_IRQHandler+0x130>
 8003fec:	05f3      	lsls	r3, r6, #23
 8003fee:	d539      	bpl.n	8004064 <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ff0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003ff4:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003ff6:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ffa:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8003ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8003ffe:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8004000:	431d      	orrs	r5, r3
 8004002:	6425      	str	r5, [r4, #64]	; 0x40
}
 8004004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004008:	f7ff ba9c 	b.w	8003544 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800400c:	2a21      	cmp	r2, #33	; 0x21
 800400e:	d117      	bne.n	8004040 <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004010:	4916      	ldr	r1, [pc, #88]	; (800406c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004012:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004014:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004016:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004018:	2220      	movs	r2, #32
 800401a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800401e:	2200      	movs	r2, #0
 8004020:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800402c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004030:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800403a:	f7ff f9c9 	bl	80033d0 <HAL_I2C_SlaveTxCpltCallback>
 800403e:	e7d3      	b.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004044:	615a      	str	r2, [r3, #20]
 8004046:	e7cf      	b.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004048:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800404c:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800404e:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004050:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004054:	d001      	beq.n	800405a <HAL_I2C_ER_IRQHandler+0x126>
 8004056:	2a40      	cmp	r2, #64	; 0x40
 8004058:	d1c6      	bne.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e7c1      	b.n	8003fe8 <HAL_I2C_ER_IRQHandler+0xb4>
  if (error != HAL_I2C_ERROR_NONE)
 8004064:	2d00      	cmp	r5, #0
 8004066:	d1c9      	bne.n	8003ffc <HAL_I2C_ER_IRQHandler+0xc8>
}
 8004068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406a:	bf00      	nop
 800406c:	ffff0000 	.word	0xffff0000

08004070 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004070:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004072:	4604      	mov	r4, r0
{
 8004074:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8004076:	b310      	cbz	r0, 80040be <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004078:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 800407c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004080:	b91b      	cbnz	r3, 800408a <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004082:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004086:	f005 f94f 	bl	8009328 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800408a:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800408c:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800408e:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004090:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8004094:	f855 0b10 	ldr.w	r0, [r5], #16
 8004098:	f002 f8ce 	bl	8006238 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800409e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	1d27      	adds	r7, r4, #4
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	4626      	mov	r6, r4
 80040a8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80040ac:	f856 0b10 	ldr.w	r0, [r6], #16
 80040b0:	f002 f8b2 	bl	8006218 <USB_CoreInit>
 80040b4:	4605      	mov	r5, r0
 80040b6:	b120      	cbz	r0, 80040c2 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b8:	2302      	movs	r3, #2
 80040ba:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80040be:	2501      	movs	r5, #1
 80040c0:	e04c      	b.n	800415c <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80040c2:	4601      	mov	r1, r0
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	f002 f8c1 	bl	800624c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ca:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040cc:	f04f 0e01 	mov.w	lr, #1
 80040d0:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80040d2:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80040d8:	b2ca      	uxtb	r2, r1
 80040da:	4594      	cmp	ip, r2
 80040dc:	f101 0101 	add.w	r1, r1, #1
 80040e0:	d81b      	bhi.n	800411a <HAL_PCD_Init+0xaa>
 80040e2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040e4:	2528      	movs	r5, #40	; 0x28
 80040e6:	4619      	mov	r1, r3
 80040e8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ea:	4584      	cmp	ip, r0
 80040ec:	f103 0301 	add.w	r3, r3, #1
 80040f0:	d820      	bhi.n	8004134 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040f2:	46ec      	mov	ip, sp
 80040f4:	4635      	mov	r5, r6
 80040f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	f8cc 3000 	str.w	r3, [ip]
 8004102:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004106:	6820      	ldr	r0, [r4, #0]
 8004108:	f002 f8a2 	bl	8006250 <USB_DevInit>
 800410c:	2301      	movs	r3, #1
 800410e:	4605      	mov	r5, r0
 8004110:	b1e8      	cbz	r0, 800414e <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004112:	2202      	movs	r2, #2
 8004114:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004118:	e7d1      	b.n	80040be <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800411a:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800411e:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8004122:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8004126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800412c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8004130:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004132:	e7d1      	b.n	80040d8 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8004134:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004138:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800413c:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8004140:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004144:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004148:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	e7cc      	b.n	80040e8 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 800414e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 8004152:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004154:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004158:	f002 fb38 	bl	80067cc <USB_DevDisconnect>

  return HAL_OK;
}
 800415c:	4628      	mov	r0, r5
 800415e:	b007      	add	sp, #28
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004162 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004162:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8004164:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 8004168:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800416a:	2b01      	cmp	r3, #1
 800416c:	d010      	beq.n	8004190 <HAL_PCD_Start+0x2e>
 800416e:	2501      	movs	r5, #1
 8004170:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004174:	6800      	ldr	r0, [r0, #0]
 8004176:	f002 f856 	bl	8006226 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800417a:	4629      	mov	r1, r5
 800417c:	4620      	mov	r0, r4
 800417e:	f005 fa04 	bl	800958a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004182:	6820      	ldr	r0, [r4, #0]
 8004184:	f002 fb20 	bl	80067c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004188:	2000      	movs	r0, #0
 800418a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800418e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004190:	2002      	movs	r0, #2
 8004192:	e7fc      	b.n	800418e <HAL_PCD_Start+0x2c>

08004194 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004194:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004196:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 800419a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800419c:	2a01      	cmp	r2, #1
 800419e:	d00b      	beq.n	80041b8 <HAL_PCD_SetAddress+0x24>
 80041a0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80041a2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80041a6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	f002 fb06 	bl	80067bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80041b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80041b8:	2002      	movs	r0, #2
 80041ba:	e7fc      	b.n	80041b6 <HAL_PCD_SetAddress+0x22>

080041bc <HAL_PCD_IRQHandler>:
{
 80041bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c0:	4604      	mov	r4, r0
 80041c2:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80041c4:	6800      	ldr	r0, [r0, #0]
 80041c6:	f002 fb03 	bl	80067d0 <USB_ReadInterrupts>
 80041ca:	0402      	lsls	r2, r0, #16
 80041cc:	d509      	bpl.n	80041e2 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80041ce:	f8df 9860 	ldr.w	r9, [pc, #2144]	; 8004a30 <HAL_PCD_IRQHandler+0x874>
 80041d2:	f8df 8860 	ldr.w	r8, [pc, #2144]	; 8004a34 <HAL_PCD_IRQHandler+0x878>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041d6:	6820      	ldr	r0, [r4, #0]
 80041d8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80041dc:	041d      	lsls	r5, r3, #16
 80041de:	f100 80c1 	bmi.w	8004364 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80041e2:	6820      	ldr	r0, [r4, #0]
 80041e4:	f002 faf4 	bl	80067d0 <USB_ReadInterrupts>
 80041e8:	0543      	lsls	r3, r0, #21
 80041ea:	d50f      	bpl.n	800420c <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041ec:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80041ee:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80041f0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80041f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f8:	041b      	lsls	r3, r3, #16
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004200:	f005 f8cd 	bl	800939e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004204:	2100      	movs	r1, #0
 8004206:	4620      	mov	r0, r4
 8004208:	f7ff ffc4 	bl	8004194 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800420c:	6820      	ldr	r0, [r4, #0]
 800420e:	f002 fadf 	bl	80067d0 <USB_ReadInterrupts>
 8004212:	0441      	lsls	r1, r0, #17
 8004214:	d508      	bpl.n	8004228 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800421c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004220:	041b      	lsls	r3, r3, #16
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	f002 fad1 	bl	80067d0 <USB_ReadInterrupts>
 800422e:	0482      	lsls	r2, r0, #18
 8004230:	d508      	bpl.n	8004244 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	0c1b      	lsrs	r3, r3, #16
 8004240:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004244:	6820      	ldr	r0, [r4, #0]
 8004246:	f002 fac3 	bl	80067d0 <USB_ReadInterrupts>
 800424a:	04c3      	lsls	r3, r0, #19
 800424c:	d51c      	bpl.n	8004288 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800424e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8004250:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004252:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004256:	f023 0304 	bic.w	r3, r3, #4
 800425a:	041b      	lsls	r3, r3, #16
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004262:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8004266:	f023 0308 	bic.w	r3, r3, #8
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8004272:	f005 f8b7 	bl	80093e4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004276:	6822      	ldr	r2, [r4, #0]
 8004278:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800427c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004280:	041b      	lsls	r3, r3, #16
 8004282:	0c1b      	lsrs	r3, r3, #16
 8004284:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004288:	6820      	ldr	r0, [r4, #0]
 800428a:	f002 faa1 	bl	80067d0 <USB_ReadInterrupts>
 800428e:	0507      	lsls	r7, r0, #20
 8004290:	d546      	bpl.n	8004320 <HAL_PCD_IRQHandler+0x164>
 8004292:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	4606      	mov	r6, r0
 8004298:	4619      	mov	r1, r3
 800429a:	461a      	mov	r2, r3
 800429c:	f103 0520 	add.w	r5, r3, #32
 80042a0:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80042a4:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80042a6:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80042aa:	d1f9      	bne.n	80042a0 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80042ac:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80042b0:	b292      	uxth	r2, r2
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80042ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	0412      	lsls	r2, r2, #16
 80042c4:	0c12      	lsrs	r2, r2, #16
 80042c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80042ca:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80042ce:	0556      	lsls	r6, r2, #21
 80042d0:	d5fb      	bpl.n	80042ca <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80042d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80042d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042da:	0412      	lsls	r2, r2, #16
 80042dc:	0c12      	lsrs	r2, r2, #16
 80042de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80042e2:	f830 2b02 	ldrh.w	r2, [r0], #2
 80042e6:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80042ea:	428d      	cmp	r5, r1
 80042ec:	d1f9      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042ee:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80042f2:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80042f4:	b292      	uxth	r2, r2
 80042f6:	f042 0208 	orr.w	r2, r2, #8
 80042fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80042fe:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	0412      	lsls	r2, r2, #16
 8004308:	0c12      	lsrs	r2, r2, #16
 800430a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800430e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004312:	b292      	uxth	r2, r2
 8004314:	f042 0204 	orr.w	r2, r2, #4
 8004318:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800431c:	f005 f852 	bl	80093c4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	f002 fa55 	bl	80067d0 <USB_ReadInterrupts>
 8004326:	0582      	lsls	r2, r0, #22
 8004328:	d50b      	bpl.n	8004342 <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800432a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800432c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800432e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004332:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800433e:	f005 f82a 	bl	8009396 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004342:	6820      	ldr	r0, [r4, #0]
 8004344:	f002 fa44 	bl	80067d0 <USB_ReadInterrupts>
 8004348:	05c3      	lsls	r3, r0, #23
 800434a:	d508      	bpl.n	800435e <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004356:	041b      	lsls	r3, r3, #16
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 800435e:	b005      	add	sp, #20
 8004360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004364:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8004368:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 800436a:	f016 060f 	ands.w	r6, r6, #15
 800436e:	f040 80b9 	bne.w	80044e4 <HAL_PCD_IRQHandler+0x328>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004372:	f011 0110 	ands.w	r1, r1, #16
 8004376:	d12d      	bne.n	80043d4 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004378:	8803      	ldrh	r3, [r0, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea03 0309 	and.w	r3, r3, r9
 8004380:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004384:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004386:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800438a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800438e:	b29b      	uxth	r3, r3
 8004390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004394:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004398:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 800439c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800439e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043a2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80043a4:	4413      	add	r3, r2
 80043a6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80043a8:	4620      	mov	r0, r4
 80043aa:	f004 ffec 	bl	8009386 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043ae:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f43f af0f 	beq.w	80041d6 <HAL_PCD_IRQHandler+0x1a>
 80043b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	f47f af0b 	bne.w	80041d6 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043c0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80043c4:	6821      	ldr	r1, [r4, #0]
 80043c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ca:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80043ce:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80043d2:	e700      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043d4:	8805      	ldrh	r5, [r0, #0]
 80043d6:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80043d8:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 80043dc:	d021      	beq.n	8004422 <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043de:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80043e2:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80043ec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80043f0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043f4:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80043f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fc:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004400:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004404:	f002 fcd8 	bl	8006db8 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004408:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800440a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800440c:	8813      	ldrh	r3, [r2, #0]
 800440e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004412:	051b      	lsls	r3, r3, #20
 8004414:	0d1b      	lsrs	r3, r3, #20
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800441c:	f004 ffa4 	bl	8009368 <HAL_PCD_SetupStageCallback>
 8004420:	e6d9      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004422:	041f      	lsls	r7, r3, #16
 8004424:	f57f aed7 	bpl.w	80041d6 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004428:	8803      	ldrh	r3, [r0, #0]
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	051b      	lsls	r3, r3, #20
 8004430:	0d1b      	lsrs	r3, r3, #20
 8004432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004436:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004438:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800443c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8004440:	b29b      	uxth	r3, r3
 8004442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004446:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800444a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800444e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004452:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004456:	b18b      	cbz	r3, 800447c <HAL_PCD_IRQHandler+0x2c0>
 8004458:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 800445c:	b171      	cbz	r1, 800447c <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800445e:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8004462:	f002 fca9 	bl	8006db8 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004466:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800446a:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800446e:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8004470:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004472:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8004474:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004478:	f004 ff7c 	bl	8009374 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800447c:	6821      	ldr	r1, [r4, #0]
 800447e:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8004482:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004486:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 800448a:	b29b      	uxth	r3, r3
 800448c:	b9cd      	cbnz	r5, 80044c2 <HAL_PCD_IRQHandler+0x306>
 800448e:	5ac2      	ldrh	r2, [r0, r3]
 8004490:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004494:	0412      	lsls	r2, r2, #16
 8004496:	0c12      	lsrs	r2, r2, #16
 8004498:	52c2      	strh	r2, [r0, r3]
 800449a:	5ac2      	ldrh	r2, [r0, r3]
 800449c:	b292      	uxth	r2, r2
 800449e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a2:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044a4:	880b      	ldrh	r3, [r1, #0]
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	0c1b      	lsrs	r3, r3, #16
 80044b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044be:	800b      	strh	r3, [r1, #0]
 80044c0:	e689      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80044c2:	2d3e      	cmp	r5, #62	; 0x3e
 80044c4:	d806      	bhi.n	80044d4 <HAL_PCD_IRQHandler+0x318>
 80044c6:	086a      	lsrs	r2, r5, #1
 80044c8:	07ee      	lsls	r6, r5, #31
 80044ca:	bf48      	it	mi
 80044cc:	3201      	addmi	r2, #1
 80044ce:	0292      	lsls	r2, r2, #10
 80044d0:	b292      	uxth	r2, r2
 80044d2:	e7e6      	b.n	80044a2 <HAL_PCD_IRQHandler+0x2e6>
 80044d4:	096a      	lsrs	r2, r5, #5
 80044d6:	06ed      	lsls	r5, r5, #27
 80044d8:	bf08      	it	eq
 80044da:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80044de:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 80044e2:	e7f5      	b.n	80044d0 <HAL_PCD_IRQHandler+0x314>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044e4:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044e8:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044ea:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044ec:	f140 80f8 	bpl.w	80046e0 <HAL_PCD_IRQHandler+0x524>
        if (ep->doublebuffer == 0U)
 80044f0:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044f2:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80044f6:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	051b      	lsls	r3, r3, #20
 8004500:	0d1b      	lsrs	r3, r3, #20
 8004502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004506:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800450a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800450e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8004512:	b9b3      	cbnz	r3, 8004542 <HAL_PCD_IRQHandler+0x386>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004514:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004518:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800451c:	b29b      	uxth	r3, r3
 800451e:	3306      	adds	r3, #6
 8004520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004524:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004528:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800452c:	2d00      	cmp	r5, #0
 800452e:	f000 80bb 	beq.w	80046a8 <HAL_PCD_IRQHandler+0x4ec>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004532:	462b      	mov	r3, r5
 8004534:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004538:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800453c:	f002 fc3c 	bl	8006db8 <USB_ReadPMA>
 8004540:	e0b2      	b.n	80046a8 <HAL_PCD_IRQHandler+0x4ec>
          if (ep->type == EP_TYPE_BULK)
 8004542:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8004546:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800454a:	2b02      	cmp	r3, #2
 800454c:	f040 808b 	bne.w	8004666 <HAL_PCD_IRQHandler+0x4aa>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004550:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004554:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8004558:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 800455c:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004560:	b29b      	uxth	r3, r3
 8004562:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004566:	d040      	beq.n	80045ea <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004568:	449b      	add	fp, r3
 800456a:	f10b 0b02 	add.w	fp, fp, #2
 800456e:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8004572:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8004576:	4295      	cmp	r5, r2
 8004578:	d913      	bls.n	80045a2 <HAL_PCD_IRQHandler+0x3e6>
 800457a:	2300      	movs	r3, #0
 800457c:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004580:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458c:	041b      	lsls	r3, r3, #16
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459c:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80045a0:	e004      	b.n	80045ac <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len -= count;
 80045a2:	1b52      	subs	r2, r2, r5
 80045a4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80045a8:	2a00      	cmp	r2, #0
 80045aa:	d0e9      	beq.n	8004580 <HAL_PCD_IRQHandler+0x3c4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045ac:	f1be 0f00 	cmp.w	lr, #0
 80045b0:	d012      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x41c>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045b2:	2328      	movs	r3, #40	; 0x28
 80045b4:	fb03 4306 	mla	r3, r3, r6, r4
 80045b8:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 80045bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c8:	041b      	lsls	r3, r3, #16
 80045ca:	0c1b      	lsrs	r3, r3, #16
 80045cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 80045d8:	2d00      	cmp	r5, #0
 80045da:	d065      	beq.n	80046a8 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045dc:	2128      	movs	r1, #40	; 0x28
 80045de:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80045e2:	462b      	mov	r3, r5
 80045e4:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80045e8:	e7a6      	b.n	8004538 <HAL_PCD_IRQHandler+0x37c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80045ea:	445b      	add	r3, fp
 80045ec:	3306      	adds	r3, #6
 80045ee:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80045f2:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80045f6:	4295      	cmp	r5, r2
 80045f8:	d912      	bls.n	8004620 <HAL_PCD_IRQHandler+0x464>
 80045fa:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045fe:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	041b      	lsls	r3, r3, #16
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800461a:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 800461e:	e004      	b.n	800462a <HAL_PCD_IRQHandler+0x46e>
      ep->xfer_len -= count;
 8004620:	1b52      	subs	r2, r2, r5
 8004622:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004626:	2a00      	cmp	r2, #0
 8004628:	d0e9      	beq.n	80045fe <HAL_PCD_IRQHandler+0x442>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800462a:	f1be 0f00 	cmp.w	lr, #0
 800462e:	d112      	bne.n	8004656 <HAL_PCD_IRQHandler+0x49a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004630:	2328      	movs	r3, #40	; 0x28
 8004632:	fb03 4306 	mla	r3, r3, r6, r4
 8004636:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 800463a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	041b      	lsls	r3, r3, #16
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004652:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004656:	b33d      	cbz	r5, 80046a8 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004658:	2128      	movs	r1, #40	; 0x28
 800465a:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800465e:	462b      	mov	r3, r5
 8004660:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004664:	e768      	b.n	8004538 <HAL_PCD_IRQHandler+0x37c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004666:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	0c1b      	lsrs	r3, r3, #16
 8004676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800467a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800467e:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004682:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8004686:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004690:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004694:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004696:	d056      	beq.n	8004746 <HAL_PCD_IRQHandler+0x58a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004698:	3202      	adds	r2, #2
 800469a:	4413      	add	r3, r2
 800469c:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 80046a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	d19c      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x426>
        ep->xfer_count += count;
 80046a8:	2128      	movs	r1, #40	; 0x28
 80046aa:	4371      	muls	r1, r6
 80046ac:	1863      	adds	r3, r4, r1
 80046ae:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80046b2:	442a      	add	r2, r5
 80046b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 80046b8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80046bc:	442a      	add	r2, r5
 80046be:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046c2:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80046c6:	b11a      	cbz	r2, 80046d0 <HAL_PCD_IRQHandler+0x514>
 80046c8:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80046cc:	429d      	cmp	r5, r3
 80046ce:	d243      	bcs.n	8004758 <HAL_PCD_IRQHandler+0x59c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046d0:	2328      	movs	r3, #40	; 0x28
 80046d2:	fb03 4306 	mla	r3, r3, r6, r4
 80046d6:	4620      	mov	r0, r4
 80046d8:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 80046dc:	f004 fe4a 	bl	8009374 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046e0:	063a      	lsls	r2, r7, #24
 80046e2:	f57f ad78 	bpl.w	80041d6 <HAL_PCD_IRQHandler+0x1a>
 80046e6:	2528      	movs	r5, #40	; 0x28
 80046e8:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80046ea:	fb05 4506 	mla	r5, r5, r6, r4
 80046ee:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 80046f2:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	ea03 0309 	and.w	r3, r3, r9
 80046fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004700:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8004704:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8004708:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800470c:	2b02      	cmp	r3, #2
 800470e:	d101      	bne.n	8004714 <HAL_PCD_IRQHandler+0x558>
 8004710:	05fb      	lsls	r3, r7, #23
 8004712:	d439      	bmi.n	8004788 <HAL_PCD_IRQHandler+0x5cc>
          if (ep->xfer_len > TxByteNbre)
 8004714:	2728      	movs	r7, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004716:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 800471a:	fb07 4306 	mla	r3, r7, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800471e:	b292      	uxth	r2, r2
 8004720:	3202      	adds	r2, #2
 8004722:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8004726:	f83e e011 	ldrh.w	lr, [lr, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 800472a:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40
 800472e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004732:	45f4      	cmp	ip, lr
 8004734:	d817      	bhi.n	8004766 <HAL_PCD_IRQHandler+0x5aa>
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800473a:	4620      	mov	r0, r4
 800473c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004740:	f004 fe21 	bl	8009386 <HAL_PCD_DataInStageCallback>
 8004744:	e547      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004746:	3206      	adds	r2, #6
 8004748:	4413      	add	r3, r2
 800474a:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 800474e:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004752:	2d00      	cmp	r5, #0
 8004754:	d0a8      	beq.n	80046a8 <HAL_PCD_IRQHandler+0x4ec>
 8004756:	e782      	b.n	800465e <HAL_PCD_IRQHandler+0x4a2>
        ep = &hpcd->OUT_ep[epindex];
 8004758:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	4421      	add	r1, r4
 8004760:	f002 f84c 	bl	80067fc <USB_EPStartXfer>
 8004764:	e7bc      	b.n	80046e0 <HAL_PCD_IRQHandler+0x524>
            ep->xfer_len -= TxByteNbre;
 8004766:	ebac 020e 	sub.w	r2, ip, lr
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 800476c:	2a00      	cmp	r2, #0
 800476e:	d0e4      	beq.n	800473a <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8004770:	fb06 7707 	mla	r7, r6, r7, r7
            ep->xfer_buff += TxByteNbre;
 8004774:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8004778:	4471      	add	r1, lr
            ep->xfer_count += TxByteNbre;
 800477a:	4472      	add	r2, lr
            ep->xfer_buff += TxByteNbre;
 800477c:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004780:	19e1      	adds	r1, r4, r7
 8004782:	f002 f83b 	bl	80067fc <USB_EPStartXfer>
 8004786:	e526      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004788:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800478c:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004790:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004792:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
 8004796:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004798:	4452      	add	r2, sl
 800479a:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800479e:	f000 80a2 	beq.w	80048e6 <HAL_PCD_IRQHandler+0x72a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047a2:	3202      	adds	r2, #2
 80047a4:	f83e c012 	ldrh.w	ip, [lr, r2, lsl #1]
 80047a8:	2228      	movs	r2, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 80047aa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80047ae:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 80047b0:	bf28      	it	cs
 80047b2:	2300      	movcs	r3, #0
 80047b4:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 80047b8:	bf38      	it	cc
 80047ba:	eba3 030c 	subcc.w	r3, r3, ip
 80047be:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047c0:	b2bf      	uxth	r7, r7
 80047c2:	b9bb      	cbnz	r3, 80047f4 <HAL_PCD_IRQHandler+0x638>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80047c4:	4620      	mov	r0, r4
 80047c6:	f004 fdde 	bl	8009386 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047ca:	2f00      	cmp	r7, #0
 80047cc:	f000 80a3 	beq.w	8004916 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047d0:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80047da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ee:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80047f2:	e090      	b.n	8004916 <HAL_PCD_IRQHandler+0x75a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80047f4:	b16f      	cbz	r7, 8004812 <HAL_PCD_IRQHandler+0x656>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80047f6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80047fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800480a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004812:	2328      	movs	r3, #40	; 0x28
 8004814:	fb03 4306 	mla	r3, r3, r6, r4
 8004818:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800481c:	2a01      	cmp	r2, #1
 800481e:	d17a      	bne.n	8004916 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8004820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004822:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004824:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8004826:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800482a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 800482c:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 800482e:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8004830:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004832:	d327      	bcc.n	8004884 <HAL_PCD_IRQHandler+0x6c8>
          ep->xfer_len_db -= len;
 8004834:	1abf      	subs	r7, r7, r2
 8004836:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004838:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 800483c:	b293      	uxth	r3, r2
 800483e:	2f00      	cmp	r7, #0
 8004840:	d143      	bne.n	80048ca <HAL_PCD_IRQHandler+0x70e>
 8004842:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004846:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 800484a:	b2bf      	uxth	r7, r7
 800484c:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8004850:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004854:	4477      	add	r7, lr
 8004856:	bb02      	cbnz	r2, 800489a <HAL_PCD_IRQHandler+0x6de>
 8004858:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800485c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004860:	0412      	lsls	r2, r2, #16
 8004862:	0c12      	lsrs	r2, r2, #16
 8004864:	f82c 2007 	strh.w	r2, [ip, r7]
 8004868:	f83c 2007 	ldrh.w	r2, [ip, r7]
 800486c:	b292      	uxth	r2, r2
 800486e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004872:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004876:	2228      	movs	r2, #40	; 0x28
 8004878:	fb02 4606 	mla	r6, r2, r6, r4
 800487c:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800487e:	f001 ffad 	bl	80067dc <USB_WritePMA>
 8004882:	e048      	b.n	8004916 <HAL_PCD_IRQHandler+0x75a>
        else if (ep->xfer_len_db == 0U)
 8004884:	b91f      	cbnz	r7, 800488e <HAL_PCD_IRQHandler+0x6d2>
    if (ep->xfer_len > TxByteNbre)
 8004886:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8004888:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 800488c:	e7d4      	b.n	8004838 <HAL_PCD_IRQHandler+0x67c>
          ep->xfer_fill_db = 0U;
 800488e:	2200      	movs	r2, #0
 8004890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8004894:	649a      	str	r2, [r3, #72]	; 0x48
 8004896:	463a      	mov	r2, r7
 8004898:	e7ce      	b.n	8004838 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800489a:	2a3e      	cmp	r2, #62	; 0x3e
 800489c:	d80c      	bhi.n	80048b8 <HAL_PCD_IRQHandler+0x6fc>
 800489e:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 80048a2:	07d2      	lsls	r2, r2, #31
 80048a4:	bf48      	it	mi
 80048a6:	f10e 0e01 	addmi.w	lr, lr, #1
 80048aa:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80048ae:	fa1f fe8e 	uxth.w	lr, lr
 80048b2:	f82c e007 	strh.w	lr, [ip, r7]
 80048b6:	e7de      	b.n	8004876 <HAL_PCD_IRQHandler+0x6ba>
 80048b8:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80048bc:	06d2      	lsls	r2, r2, #27
 80048be:	bf08      	it	eq
 80048c0:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 80048c4:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 80048c8:	e7f1      	b.n	80048ae <HAL_PCD_IRQHandler+0x6f2>
 80048ca:	2f01      	cmp	r7, #1
 80048cc:	d1d3      	bne.n	8004876 <HAL_PCD_IRQHandler+0x6ba>
 80048ce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80048d2:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 80048d6:	fa1f fc82 	uxth.w	ip, r2
 80048da:	f200 4204 	addw	r2, r0, #1028	; 0x404
 80048de:	013f      	lsls	r7, r7, #4
 80048e0:	4462      	add	r2, ip
 80048e2:	52bb      	strh	r3, [r7, r2]
 80048e4:	e7c7      	b.n	8004876 <HAL_PCD_IRQHandler+0x6ba>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048e6:	3206      	adds	r2, #6
 80048e8:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80048ec:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 80048ee:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80048f2:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 80048f4:	bf88      	it	hi
 80048f6:	4663      	movhi	r3, ip
 80048f8:	f04f 0c28 	mov.w	ip, #40	; 0x28
 80048fc:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxByteNbre;
 8004900:	bf98      	it	ls
 8004902:	1a9b      	subls	r3, r3, r2
 8004904:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8004908:	b9c3      	cbnz	r3, 800493c <HAL_PCD_IRQHandler+0x780>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800490a:	4620      	mov	r0, r4
 800490c:	f004 fd3b 	bl	8009386 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004910:	2f00      	cmp	r7, #0
 8004912:	f43f af5d 	beq.w	80047d0 <HAL_PCD_IRQHandler+0x614>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004916:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004920:	b29b      	uxth	r3, r3
 8004922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800492e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004936:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 800493a:	e44c      	b.n	80041d6 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800493c:	b96f      	cbnz	r7, 800495a <HAL_PCD_IRQHandler+0x79e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800493e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004956:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 800495a:	2328      	movs	r3, #40	; 0x28
 800495c:	fb03 4306 	mla	r3, r3, r6, r4
 8004960:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8004964:	2901      	cmp	r1, #1
 8004966:	d1d6      	bne.n	8004916 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8004968:	6c5f      	ldr	r7, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 800496a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 800496c:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 800496e:	f8d3 c048 	ldr.w	ip, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004972:	645f      	str	r7, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004974:	6b9f      	ldr	r7, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004976:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8004978:	45bc      	cmp	ip, r7
        ep->xfer_buff += TxByteNbre;
 800497a:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800497c:	d326      	bcc.n	80049cc <HAL_PCD_IRQHandler+0x810>
          ep->xfer_len_db -= len;
 800497e:	ebac 0207 	sub.w	r2, ip, r7
 8004982:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004984:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004988:	b2bb      	uxth	r3, r7
 800498a:	2a00      	cmp	r2, #0
 800498c:	d143      	bne.n	8004a16 <HAL_PCD_IRQHandler+0x85a>
 800498e:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8004992:	fa1f f28c 	uxth.w	r2, ip
 8004996:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 800499a:	4494      	add	ip, r2
 800499c:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80049a0:	0112      	lsls	r2, r2, #4
 80049a2:	bb07      	cbnz	r7, 80049e6 <HAL_PCD_IRQHandler+0x82a>
 80049a4:	f83c 7002 	ldrh.w	r7, [ip, r2]
 80049a8:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80049ac:	043f      	lsls	r7, r7, #16
 80049ae:	0c3f      	lsrs	r7, r7, #16
 80049b0:	f82c 7002 	strh.w	r7, [ip, r2]
 80049b4:	f83c 7002 	ldrh.w	r7, [ip, r2]
 80049b8:	b2bf      	uxth	r7, r7
 80049ba:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 80049be:	f82c 7002 	strh.w	r7, [ip, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80049c2:	2228      	movs	r2, #40	; 0x28
 80049c4:	fb02 4606 	mla	r6, r2, r6, r4
 80049c8:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 80049ca:	e758      	b.n	800487e <HAL_PCD_IRQHandler+0x6c2>
        else if (ep->xfer_len_db == 0U)
 80049cc:	f1bc 0f00 	cmp.w	ip, #0
 80049d0:	d103      	bne.n	80049da <HAL_PCD_IRQHandler+0x81e>
    if (ep->xfer_len >= TxByteNbre)
 80049d2:	4617      	mov	r7, r2
          ep->xfer_fill_db = 0U;
 80049d4:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
 80049d8:	e7d4      	b.n	8004984 <HAL_PCD_IRQHandler+0x7c8>
          ep->xfer_len_db = 0U;
 80049da:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 80049dc:	4667      	mov	r7, ip
          ep->xfer_len_db = 0U;
 80049de:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 80049e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 80049e4:	e7ce      	b.n	8004984 <HAL_PCD_IRQHandler+0x7c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049e6:	2f3e      	cmp	r7, #62	; 0x3e
 80049e8:	d80c      	bhi.n	8004a04 <HAL_PCD_IRQHandler+0x848>
 80049ea:	ea4f 0e57 	mov.w	lr, r7, lsr #1
 80049ee:	07ff      	lsls	r7, r7, #31
 80049f0:	bf48      	it	mi
 80049f2:	f10e 0e01 	addmi.w	lr, lr, #1
 80049f6:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 80049fa:	fa1f fe8e 	uxth.w	lr, lr
 80049fe:	f82c e002 	strh.w	lr, [ip, r2]
 8004a02:	e7de      	b.n	80049c2 <HAL_PCD_IRQHandler+0x806>
 8004a04:	ea4f 1e57 	mov.w	lr, r7, lsr #5
 8004a08:	06ff      	lsls	r7, r7, #27
 8004a0a:	bf08      	it	eq
 8004a0c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8004a10:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8004a14:	e7f1      	b.n	80049fa <HAL_PCD_IRQHandler+0x83e>
 8004a16:	2a01      	cmp	r2, #1
 8004a18:	d1d3      	bne.n	80049c2 <HAL_PCD_IRQHandler+0x806>
 8004a1a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004a1e:	b2ba      	uxth	r2, r7
 8004a20:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8004a24:	4417      	add	r7, r2
 8004a26:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	52bb      	strh	r3, [r7, r2]
 8004a2e:	e7c8      	b.n	80049c2 <HAL_PCD_IRQHandler+0x806>
 8004a30:	ffff8f0f 	.word	0xffff8f0f
 8004a34:	ffff8000 	.word	0xffff8000

08004a38 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004a38:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	f001 0007 	and.w	r0, r1, #7
 8004a44:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8004a48:	d01c      	beq.n	8004a84 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8004a4a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4c:	fb00 1101 	mla	r1, r0, r1, r1
 8004a50:	4429      	add	r1, r5
    ep->is_in = 1U;
 8004a52:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8004a54:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8004a56:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a58:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8004a5a:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8004a5c:	b102      	cbz	r2, 8004a60 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8004a5e:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8004a60:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8004a62:	bf04      	itt	eq
 8004a64:	2300      	moveq	r3, #0
 8004a66:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004a68:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d013      	beq.n	8004a98 <HAL_PCD_EP_Open+0x60>
 8004a70:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a72:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004a74:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a78:	f001 fbfe 	bl	8006278 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a7c:	2000      	movs	r0, #0
 8004a7e:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004a84:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a86:	fb01 f400 	mul.w	r4, r1, r0
 8004a8a:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8004a8e:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a90:	4429      	add	r1, r5
    ep->is_in = 0U;
 8004a92:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8004a96:	e7dd      	b.n	8004a54 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8004a98:	2002      	movs	r0, #2
 8004a9a:	e7f2      	b.n	8004a82 <HAL_PCD_EP_Open+0x4a>

08004a9c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004a9c:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004aa0:	b510      	push	{r4, lr}
 8004aa2:	f001 0207 	and.w	r2, r1, #7
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8004aac:	d013      	beq.n	8004ad6 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8004aae:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab0:	fb02 1101 	mla	r1, r2, r1, r1
 8004ab4:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004ab6:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004ab8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004aba:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d013      	beq.n	8004aea <HAL_PCD_EP_Close+0x4e>
 8004ac2:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ac4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004ac6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aca:	f001 fd2d 	bl	8006528 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ace:	2000      	movs	r0, #0
 8004ad0:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004ad4:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	fb01 f302 	mul.w	r3, r1, r2
 8004ada:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8004ade:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004ae0:	4403      	add	r3, r0
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8004ae8:	e7e6      	b.n	8004ab8 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8004aea:	2002      	movs	r0, #2
 8004aec:	e7f2      	b.n	8004ad4 <HAL_PCD_EP_Close+0x38>

08004aee <HAL_PCD_EP_Receive>:
{
 8004aee:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8004af0:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8004af2:	2600      	movs	r6, #0
 8004af4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8004af8:	434c      	muls	r4, r1
 8004afa:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8004afc:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b00:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b04:	4401      	add	r1, r0
  ep->xfer_len = len;
 8004b06:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8004b0a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8004b0e:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	f001 fe72 	bl	80067fc <USB_EPStartXfer>
}
 8004b18:	4630      	mov	r0, r6
 8004b1a:	bd70      	pop	{r4, r5, r6, pc}

08004b1c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b1c:	2328      	movs	r3, #40	; 0x28
 8004b1e:	f001 0107 	and.w	r1, r1, #7
 8004b22:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004b26:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8004b2a:	4770      	bx	lr

08004b2c <HAL_PCD_EP_Transmit>:
{
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8004b32:	2128      	movs	r1, #40	; 0x28
 8004b34:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8004b38:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8004b3a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8004b3e:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8004b44:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b48:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8004b4a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8004b4c:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8004b4e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b52:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	f001 fe50 	bl	80067fc <USB_EPStartXfer>
}
 8004b5c:	4630      	mov	r0, r6
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}

08004b60 <HAL_PCD_EP_SetStall>:
{
 8004b60:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b62:	6843      	ldr	r3, [r0, #4]
 8004b64:	f001 0507 	and.w	r5, r1, #7
 8004b68:	429d      	cmp	r5, r3
{
 8004b6a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b6c:	d828      	bhi.n	8004bc0 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8004b6e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004b72:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004b76:	d01a      	beq.n	8004bae <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	fb05 3303 	mla	r3, r5, r3, r3
 8004b7c:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8004b82:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b84:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004b86:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004b88:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d019      	beq.n	8004bc4 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b90:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004b92:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b96:	f001 fda6 	bl	80066e6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b9a:	b925      	cbnz	r5, 8004ba6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b9c:	6820      	ldr	r0, [r4, #0]
 8004b9e:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004ba2:	f001 fe19 	bl	80067d8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004bae:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8004bb0:	434b      	muls	r3, r1
 8004bb2:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8004bb6:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8004bb8:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004bba:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8004bbe:	e7e0      	b.n	8004b82 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	e7f3      	b.n	8004bac <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	e7f1      	b.n	8004bac <HAL_PCD_EP_SetStall+0x4c>

08004bc8 <HAL_PCD_EP_ClrStall>:
{
 8004bc8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bca:	6843      	ldr	r3, [r0, #4]
 8004bcc:	f001 020f 	and.w	r2, r1, #15
 8004bd0:	429a      	cmp	r2, r3
{
 8004bd2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bd4:	d826      	bhi.n	8004c24 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8004bd6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004bda:	f001 0207 	and.w	r2, r1, #7
 8004bde:	f04f 0128 	mov.w	r1, #40	; 0x28
 8004be2:	d015      	beq.n	8004c10 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8004be4:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004be6:	fb02 1101 	mla	r1, r2, r1, r1
 8004bea:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004bec:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8004bee:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bf0:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8004bf2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8004bf4:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d015      	beq.n	8004c28 <HAL_PCD_EP_ClrStall+0x60>
 8004bfc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bfe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004c00:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c04:	f001 fd8f 	bl	8006726 <USB_EPClearStall>
  return HAL_OK;
 8004c08:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8004c0a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c10:	fb01 f302 	mul.w	r3, r1, r2
 8004c14:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8004c18:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004c1a:	4403      	add	r3, r0
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8004c22:	e7e4      	b.n	8004bee <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8004c24:	2001      	movs	r0, #1
 8004c26:	e7f2      	b.n	8004c0e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8004c28:	2002      	movs	r0, #2
 8004c2a:	e7f0      	b.n	8004c0e <HAL_PCD_EP_ClrStall+0x46>

08004c2c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c30:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c34:	bf1b      	ittet	ne
 8004c36:	f001 0107 	andne.w	r1, r1, #7
 8004c3a:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c3e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c42:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8004c44:	bf08      	it	eq
 8004c46:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c4a:	b299      	uxth	r1, r3
 8004c4c:	b91a      	cbnz	r2, 8004c56 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c4e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c50:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8004c52:	2000      	movs	r0, #0
 8004c54:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8004c56:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c58:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8004c5a:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c5c:	e7f9      	b.n	8004c52 <HAL_PCDEx_PMAConfig+0x26>
	...

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c64:	4605      	mov	r5, r0
 8004c66:	b338      	cbz	r0, 8004cb8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c68:	6803      	ldr	r3, [r0, #0]
 8004c6a:	07db      	lsls	r3, r3, #31
 8004c6c:	d410      	bmi.n	8004c90 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6e:	682b      	ldr	r3, [r5, #0]
 8004c70:	079f      	lsls	r7, r3, #30
 8004c72:	d45e      	bmi.n	8004d32 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c74:	682b      	ldr	r3, [r5, #0]
 8004c76:	0719      	lsls	r1, r3, #28
 8004c78:	f100 8095 	bmi.w	8004da6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7c:	682b      	ldr	r3, [r5, #0]
 8004c7e:	075a      	lsls	r2, r3, #29
 8004c80:	f100 80bf 	bmi.w	8004e02 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c84:	69e8      	ldr	r0, [r5, #28]
 8004c86:	2800      	cmp	r0, #0
 8004c88:	f040 812c 	bne.w	8004ee4 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	e029      	b.n	8004ce4 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c90:	4c8f      	ldr	r4, [pc, #572]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	d007      	beq.n	8004cac <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d10a      	bne.n	8004cbc <HAL_RCC_OscConfig+0x5c>
 8004ca6:	6863      	ldr	r3, [r4, #4]
 8004ca8:	03de      	lsls	r6, r3, #15
 8004caa:	d507      	bpl.n	8004cbc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	039c      	lsls	r4, r3, #14
 8004cb0:	d5dd      	bpl.n	8004c6e <HAL_RCC_OscConfig+0xe>
 8004cb2:	686b      	ldr	r3, [r5, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1da      	bne.n	8004c6e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8004cb8:	2001      	movs	r0, #1
 8004cba:	e013      	b.n	8004ce4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbc:	686b      	ldr	r3, [r5, #4]
 8004cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc2:	d112      	bne.n	8004cea <HAL_RCC_OscConfig+0x8a>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fed6 	bl	8002a7c <HAL_GetTick>
 8004cd0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	0398      	lsls	r0, r3, #14
 8004cd6:	d4ca      	bmi.n	8004c6e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fd fed0 	bl	8002a7c <HAL_GetTick>
 8004cdc:	1b80      	subs	r0, r0, r6
 8004cde:	2864      	cmp	r0, #100	; 0x64
 8004ce0:	d9f7      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004ce2:	2003      	movs	r0, #3
}
 8004ce4:	b002      	add	sp, #8
 8004ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cea:	b99b      	cbnz	r3, 8004d14 <HAL_RCC_OscConfig+0xb4>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	6023      	str	r3, [r4, #0]
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004cfc:	f7fd febe 	bl	8002a7c <HAL_GetTick>
 8004d00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	0399      	lsls	r1, r3, #14
 8004d06:	d5b2      	bpl.n	8004c6e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d08:	f7fd feb8 	bl	8002a7c <HAL_GetTick>
 8004d0c:	1b80      	subs	r0, r0, r6
 8004d0e:	2864      	cmp	r0, #100	; 0x64
 8004d10:	d9f7      	bls.n	8004d02 <HAL_RCC_OscConfig+0xa2>
 8004d12:	e7e6      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	d103      	bne.n	8004d24 <HAL_RCC_OscConfig+0xc4>
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d20:	6023      	str	r3, [r4, #0]
 8004d22:	e7cf      	b.n	8004cc4 <HAL_RCC_OscConfig+0x64>
 8004d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d30:	e7cb      	b.n	8004cca <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d32:	4c67      	ldr	r4, [pc, #412]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	f013 0f0c 	tst.w	r3, #12
 8004d3a:	d007      	beq.n	8004d4c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d110      	bne.n	8004d68 <HAL_RCC_OscConfig+0x108>
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	03da      	lsls	r2, r3, #15
 8004d4a:	d40d      	bmi.n	8004d68 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	079b      	lsls	r3, r3, #30
 8004d50:	d502      	bpl.n	8004d58 <HAL_RCC_OscConfig+0xf8>
 8004d52:	692b      	ldr	r3, [r5, #16]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d1af      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	696a      	ldr	r2, [r5, #20]
 8004d5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d60:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	e785      	b.n	8004c74 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d68:	692a      	ldr	r2, [r5, #16]
 8004d6a:	4b5a      	ldr	r3, [pc, #360]	; (8004ed4 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	b16a      	cbz	r2, 8004d8a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d72:	f7fd fe83 	bl	8002a7c <HAL_GetTick>
 8004d76:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	079f      	lsls	r7, r3, #30
 8004d7c:	d4ec      	bmi.n	8004d58 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d7e:	f7fd fe7d 	bl	8002a7c <HAL_GetTick>
 8004d82:	1b80      	subs	r0, r0, r6
 8004d84:	2802      	cmp	r0, #2
 8004d86:	d9f7      	bls.n	8004d78 <HAL_RCC_OscConfig+0x118>
 8004d88:	e7ab      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8004d8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004d8c:	f7fd fe76 	bl	8002a7c <HAL_GetTick>
 8004d90:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	0798      	lsls	r0, r3, #30
 8004d96:	f57f af6d 	bpl.w	8004c74 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d9a:	f7fd fe6f 	bl	8002a7c <HAL_GetTick>
 8004d9e:	1b80      	subs	r0, r0, r6
 8004da0:	2802      	cmp	r0, #2
 8004da2:	d9f6      	bls.n	8004d92 <HAL_RCC_OscConfig+0x132>
 8004da4:	e79d      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004da6:	69aa      	ldr	r2, [r5, #24]
 8004da8:	4e49      	ldr	r6, [pc, #292]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004dac:	b1da      	cbz	r2, 8004de6 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004db2:	f7fd fe63 	bl	8002a7c <HAL_GetTick>
 8004db6:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004dba:	079b      	lsls	r3, r3, #30
 8004dbc:	d50d      	bpl.n	8004dda <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dbe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004dc2:	4b46      	ldr	r3, [pc, #280]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dca:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004dcc:	bf00      	nop
  }
  while (Delay --);
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	1e5a      	subs	r2, r3, #1
 8004dd2:	9201      	str	r2, [sp, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f9      	bne.n	8004dcc <HAL_RCC_OscConfig+0x16c>
 8004dd8:	e750      	b.n	8004c7c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dda:	f7fd fe4f 	bl	8002a7c <HAL_GetTick>
 8004dde:	1b00      	subs	r0, r0, r4
 8004de0:	2802      	cmp	r0, #2
 8004de2:	d9e9      	bls.n	8004db8 <HAL_RCC_OscConfig+0x158>
 8004de4:	e77d      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8004de6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004de8:	f7fd fe48 	bl	8002a7c <HAL_GetTick>
 8004dec:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004df0:	079f      	lsls	r7, r3, #30
 8004df2:	f57f af43 	bpl.w	8004c7c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004df6:	f7fd fe41 	bl	8002a7c <HAL_GetTick>
 8004dfa:	1b00      	subs	r0, r0, r4
 8004dfc:	2802      	cmp	r0, #2
 8004dfe:	d9f6      	bls.n	8004dee <HAL_RCC_OscConfig+0x18e>
 8004e00:	e76f      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e02:	4c33      	ldr	r4, [pc, #204]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e04:	69e3      	ldr	r3, [r4, #28]
 8004e06:	00d8      	lsls	r0, r3, #3
 8004e08:	d424      	bmi.n	8004e54 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8004e0a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0c:	69e3      	ldr	r3, [r4, #28]
 8004e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e12:	61e3      	str	r3, [r4, #28]
 8004e14:	69e3      	ldr	r3, [r4, #28]
 8004e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	9300      	str	r3, [sp, #0]
 8004e1c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4e30      	ldr	r6, [pc, #192]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e20:	6833      	ldr	r3, [r6, #0]
 8004e22:	05d9      	lsls	r1, r3, #23
 8004e24:	d518      	bpl.n	8004e58 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e26:	68eb      	ldr	r3, [r5, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d126      	bne.n	8004e7a <HAL_RCC_OscConfig+0x21a>
 8004e2c:	6a23      	ldr	r3, [r4, #32]
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004e34:	f7fd fe22 	bl	8002a7c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e38:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004e3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3e:	6a23      	ldr	r3, [r4, #32]
 8004e40:	079b      	lsls	r3, r3, #30
 8004e42:	d53f      	bpl.n	8004ec4 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8004e44:	2f00      	cmp	r7, #0
 8004e46:	f43f af1d 	beq.w	8004c84 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4a:	69e3      	ldr	r3, [r4, #28]
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	61e3      	str	r3, [r4, #28]
 8004e52:	e717      	b.n	8004c84 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004e54:	2700      	movs	r7, #0
 8004e56:	e7e2      	b.n	8004e1e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e58:	6833      	ldr	r3, [r6, #0]
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004e60:	f7fd fe0c 	bl	8002a7c <HAL_GetTick>
 8004e64:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	6833      	ldr	r3, [r6, #0]
 8004e68:	05da      	lsls	r2, r3, #23
 8004e6a:	d4dc      	bmi.n	8004e26 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e6c:	f7fd fe06 	bl	8002a7c <HAL_GetTick>
 8004e70:	eba0 0008 	sub.w	r0, r0, r8
 8004e74:	2864      	cmp	r0, #100	; 0x64
 8004e76:	d9f6      	bls.n	8004e66 <HAL_RCC_OscConfig+0x206>
 8004e78:	e733      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7a:	b9ab      	cbnz	r3, 8004ea8 <HAL_RCC_OscConfig+0x248>
 8004e7c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e82:	f023 0301 	bic.w	r3, r3, #1
 8004e86:	6223      	str	r3, [r4, #32]
 8004e88:	6a23      	ldr	r3, [r4, #32]
 8004e8a:	f023 0304 	bic.w	r3, r3, #4
 8004e8e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004e90:	f7fd fdf4 	bl	8002a7c <HAL_GetTick>
 8004e94:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e96:	6a23      	ldr	r3, [r4, #32]
 8004e98:	0798      	lsls	r0, r3, #30
 8004e9a:	d5d3      	bpl.n	8004e44 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9c:	f7fd fdee 	bl	8002a7c <HAL_GetTick>
 8004ea0:	1b80      	subs	r0, r0, r6
 8004ea2:	4540      	cmp	r0, r8
 8004ea4:	d9f7      	bls.n	8004e96 <HAL_RCC_OscConfig+0x236>
 8004ea6:	e71c      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	6a23      	ldr	r3, [r4, #32]
 8004eac:	d103      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x256>
 8004eae:	f043 0304 	orr.w	r3, r3, #4
 8004eb2:	6223      	str	r3, [r4, #32]
 8004eb4:	e7ba      	b.n	8004e2c <HAL_RCC_OscConfig+0x1cc>
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	6223      	str	r3, [r4, #32]
 8004ebc:	6a23      	ldr	r3, [r4, #32]
 8004ebe:	f023 0304 	bic.w	r3, r3, #4
 8004ec2:	e7b6      	b.n	8004e32 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec4:	f7fd fdda 	bl	8002a7c <HAL_GetTick>
 8004ec8:	1b80      	subs	r0, r0, r6
 8004eca:	4540      	cmp	r0, r8
 8004ecc:	d9b7      	bls.n	8004e3e <HAL_RCC_OscConfig+0x1de>
 8004ece:	e708      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	42420000 	.word	0x42420000
 8004ed8:	42420480 	.word	0x42420480
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee4:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCC_OscConfig+0x330>)
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	f002 020c 	and.w	r2, r2, #12
 8004eee:	2a08      	cmp	r2, #8
 8004ef0:	d03d      	beq.n	8004f6e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4e27      	ldr	r6, [pc, #156]	; (8004f94 <HAL_RCC_OscConfig+0x334>)
 8004ef6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004ef8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	d12b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004efc:	f7fd fdbe 	bl	8002a7c <HAL_GetTick>
 8004f00:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0199      	lsls	r1, r3, #6
 8004f06:	d41f      	bmi.n	8004f48 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f08:	6a2b      	ldr	r3, [r5, #32]
 8004f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f10:	6862      	ldr	r2, [r4, #4]
 8004f12:	68a9      	ldr	r1, [r5, #8]
 8004f14:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f1c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004f26:	4313      	orrs	r3, r2
 8004f28:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004f2e:	f7fd fda5 	bl	8002a7c <HAL_GetTick>
 8004f32:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	019a      	lsls	r2, r3, #6
 8004f38:	f53f aea8 	bmi.w	8004c8c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f3c:	f7fd fd9e 	bl	8002a7c <HAL_GetTick>
 8004f40:	1b40      	subs	r0, r0, r5
 8004f42:	2802      	cmp	r0, #2
 8004f44:	d9f6      	bls.n	8004f34 <HAL_RCC_OscConfig+0x2d4>
 8004f46:	e6cc      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd fd98 	bl	8002a7c <HAL_GetTick>
 8004f4c:	1bc0      	subs	r0, r0, r7
 8004f4e:	2802      	cmp	r0, #2
 8004f50:	d9d7      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2a2>
 8004f52:	e6c6      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004f54:	f7fd fd92 	bl	8002a7c <HAL_GetTick>
 8004f58:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	019b      	lsls	r3, r3, #6
 8004f5e:	f57f ae95 	bpl.w	8004c8c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fd fd8b 	bl	8002a7c <HAL_GetTick>
 8004f66:	1b40      	subs	r0, r0, r5
 8004f68:	2802      	cmp	r0, #2
 8004f6a:	d9f6      	bls.n	8004f5a <HAL_RCC_OscConfig+0x2fa>
 8004f6c:	e6b9      	b.n	8004ce2 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f6e:	2801      	cmp	r0, #1
 8004f70:	f43f aeb8 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004f74:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	6a2a      	ldr	r2, [r5, #32]
 8004f78:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004f7c:	4291      	cmp	r1, r2
 8004f7e:	f47f ae9b 	bne.w	8004cb8 <HAL_RCC_OscConfig+0x58>
 8004f82:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f84:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f43f ae7f 	beq.w	8004c8c <HAL_RCC_OscConfig+0x2c>
 8004f8e:	e693      	b.n	8004cb8 <HAL_RCC_OscConfig+0x58>
 8004f90:	40021000 	.word	0x40021000
 8004f94:	42420060 	.word	0x42420060

08004f98 <HAL_RCC_GetSysClockFreq>:
{
 8004f98:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f9a:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004f9c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f9e:	ac02      	add	r4, sp, #8
 8004fa0:	f103 0510 	add.w	r5, r3, #16
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	6859      	ldr	r1, [r3, #4]
 8004faa:	3308      	adds	r3, #8
 8004fac:	c203      	stmia	r2!, {r0, r1}
 8004fae:	42ab      	cmp	r3, r5
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	d1f7      	bne.n	8004fa4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fb4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8004fb8:	4911      	ldr	r1, [pc, #68]	; (8005000 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fba:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004fbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc0:	f003 020c 	and.w	r2, r3, #12
 8004fc4:	2a08      	cmp	r2, #8
 8004fc6:	d117      	bne.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004fcc:	a806      	add	r0, sp, #24
 8004fce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd6:	d50c      	bpl.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fda:	480a      	ldr	r0, [pc, #40]	; (8005004 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fe0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fe2:	aa06      	add	r2, sp, #24
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004fee:	b007      	add	sp, #28
 8004ff0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ff2:	4805      	ldr	r0, [pc, #20]	; (8005008 <HAL_RCC_GetSysClockFreq+0x70>)
 8004ff4:	4350      	muls	r0, r2
 8004ff6:	e7fa      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004ffa:	e7f8      	b.n	8004fee <HAL_RCC_GetSysClockFreq+0x56>
 8004ffc:	0800cbd0 	.word	0x0800cbd0
 8005000:	40021000 	.word	0x40021000
 8005004:	007a1200 	.word	0x007a1200
 8005008:	003d0900 	.word	0x003d0900

0800500c <HAL_RCC_ClockConfig>:
{
 800500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005010:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005012:	4604      	mov	r4, r0
 8005014:	b910      	cbnz	r0, 800501c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005016:	2001      	movs	r0, #1
}
 8005018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800501c:	4a44      	ldr	r2, [pc, #272]	; (8005130 <HAL_RCC_ClockConfig+0x124>)
 800501e:	6813      	ldr	r3, [r2, #0]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	428b      	cmp	r3, r1
 8005026:	d328      	bcc.n	800507a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005028:	6821      	ldr	r1, [r4, #0]
 800502a:	078e      	lsls	r6, r1, #30
 800502c:	d430      	bmi.n	8005090 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	07ca      	lsls	r2, r1, #31
 8005030:	d443      	bmi.n	80050ba <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005032:	4a3f      	ldr	r2, [pc, #252]	; (8005130 <HAL_RCC_ClockConfig+0x124>)
 8005034:	6813      	ldr	r3, [r2, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	42ab      	cmp	r3, r5
 800503c:	d865      	bhi.n	800510a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503e:	6822      	ldr	r2, [r4, #0]
 8005040:	4d3c      	ldr	r5, [pc, #240]	; (8005134 <HAL_RCC_ClockConfig+0x128>)
 8005042:	f012 0f04 	tst.w	r2, #4
 8005046:	d16c      	bne.n	8005122 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005048:	0713      	lsls	r3, r2, #28
 800504a:	d506      	bpl.n	800505a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800504c:	686b      	ldr	r3, [r5, #4]
 800504e:	6922      	ldr	r2, [r4, #16]
 8005050:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005054:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005058:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505a:	f7ff ff9d 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 800505e:	686b      	ldr	r3, [r5, #4]
 8005060:	4a35      	ldr	r2, [pc, #212]	; (8005138 <HAL_RCC_ClockConfig+0x12c>)
 8005062:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	40d8      	lsrs	r0, r3
 800506a:	4b34      	ldr	r3, [pc, #208]	; (800513c <HAL_RCC_ClockConfig+0x130>)
 800506c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800506e:	4b34      	ldr	r3, [pc, #208]	; (8005140 <HAL_RCC_ClockConfig+0x134>)
 8005070:	6818      	ldr	r0, [r3, #0]
 8005072:	f7fc fe39 	bl	8001ce8 <HAL_InitTick>
  return HAL_OK;
 8005076:	2000      	movs	r0, #0
 8005078:	e7ce      	b.n	8005018 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800507a:	6813      	ldr	r3, [r2, #0]
 800507c:	f023 0307 	bic.w	r3, r3, #7
 8005080:	430b      	orrs	r3, r1
 8005082:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	428b      	cmp	r3, r1
 800508c:	d1c3      	bne.n	8005016 <HAL_RCC_ClockConfig+0xa>
 800508e:	e7cb      	b.n	8005028 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	4b28      	ldr	r3, [pc, #160]	; (8005134 <HAL_RCC_ClockConfig+0x128>)
 8005092:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005096:	bf1e      	ittt	ne
 8005098:	685a      	ldrne	r2, [r3, #4]
 800509a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800509e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a2:	bf42      	ittt	mi
 80050a4:	685a      	ldrmi	r2, [r3, #4]
 80050a6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80050aa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68a0      	ldr	r0, [r4, #8]
 80050b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80050b4:	4302      	orrs	r2, r0
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	e7b9      	b.n	800502e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ba:	6862      	ldr	r2, [r4, #4]
 80050bc:	4e1d      	ldr	r6, [pc, #116]	; (8005134 <HAL_RCC_ClockConfig+0x128>)
 80050be:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	d11a      	bne.n	80050fa <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c8:	d0a5      	beq.n	8005016 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d0:	f023 0303 	bic.w	r3, r3, #3
 80050d4:	4313      	orrs	r3, r2
 80050d6:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80050d8:	f7fd fcd0 	bl	8002a7c <HAL_GetTick>
 80050dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	6873      	ldr	r3, [r6, #4]
 80050e0:	6862      	ldr	r2, [r4, #4]
 80050e2:	f003 030c 	and.w	r3, r3, #12
 80050e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050ea:	d0a2      	beq.n	8005032 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fd fcc6 	bl	8002a7c <HAL_GetTick>
 80050f0:	1bc0      	subs	r0, r0, r7
 80050f2:	4540      	cmp	r0, r8
 80050f4:	d9f3      	bls.n	80050de <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80050f6:	2003      	movs	r0, #3
 80050f8:	e78e      	b.n	8005018 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050fa:	2a02      	cmp	r2, #2
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005102:	e7e1      	b.n	80050c8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005104:	f013 0f02 	tst.w	r3, #2
 8005108:	e7de      	b.n	80050c8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f023 0307 	bic.w	r3, r3, #7
 8005110:	432b      	orrs	r3, r5
 8005112:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005114:	6813      	ldr	r3, [r2, #0]
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	42ab      	cmp	r3, r5
 800511c:	f47f af7b 	bne.w	8005016 <HAL_RCC_ClockConfig+0xa>
 8005120:	e78d      	b.n	800503e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005122:	686b      	ldr	r3, [r5, #4]
 8005124:	68e1      	ldr	r1, [r4, #12]
 8005126:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800512a:	430b      	orrs	r3, r1
 800512c:	606b      	str	r3, [r5, #4]
 800512e:	e78b      	b.n	8005048 <HAL_RCC_ClockConfig+0x3c>
 8005130:	40022000 	.word	0x40022000
 8005134:	40021000 	.word	0x40021000
 8005138:	0800c4f0 	.word	0x0800c4f0
 800513c:	20000000 	.word	0x20000000
 8005140:	20000008 	.word	0x20000008

08005144 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005146:	4a05      	ldr	r2, [pc, #20]	; (800515c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	4a03      	ldr	r2, [pc, #12]	; (8005160 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005152:	6810      	ldr	r0, [r2, #0]
}
 8005154:	40d8      	lsrs	r0, r3
 8005156:	4770      	bx	lr
 8005158:	40021000 	.word	0x40021000
 800515c:	0800c500 	.word	0x0800c500
 8005160:	20000000 	.word	0x20000000

08005164 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005164:	4b04      	ldr	r3, [pc, #16]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005166:	4a05      	ldr	r2, [pc, #20]	; (800517c <HAL_RCC_GetPCLK2Freq+0x18>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800516e:	5cd3      	ldrb	r3, [r2, r3]
 8005170:	4a03      	ldr	r2, [pc, #12]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005172:	6810      	ldr	r0, [r2, #0]
}
 8005174:	40d8      	lsrs	r0, r3
 8005176:	4770      	bx	lr
 8005178:	40021000 	.word	0x40021000
 800517c:	0800c500 	.word	0x0800c500
 8005180:	20000000 	.word	0x20000000

08005184 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005184:	230f      	movs	r3, #15
 8005186:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <HAL_RCC_GetClockConfig+0x34>)
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	f002 0203 	and.w	r2, r2, #3
 8005190:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005198:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80051a0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	08db      	lsrs	r3, r3, #3
 80051a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051aa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCC_GetClockConfig+0x38>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	600b      	str	r3, [r1, #0]
}
 80051b6:	4770      	bx	lr
 80051b8:	40021000 	.word	0x40021000
 80051bc:	40022000 	.word	0x40022000

080051c0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051c0:	6803      	ldr	r3, [r0, #0]
{
 80051c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051c6:	07d9      	lsls	r1, r3, #31
{
 80051c8:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051ca:	d520      	bpl.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051cc:	4c35      	ldr	r4, [pc, #212]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80051ce:	69e3      	ldr	r3, [r4, #28]
 80051d0:	00da      	lsls	r2, r3, #3
 80051d2:	d432      	bmi.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80051d4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80051d6:	69e3      	ldr	r3, [r4, #28]
 80051d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051dc:	61e3      	str	r3, [r4, #28]
 80051de:	69e3      	ldr	r3, [r4, #28]
 80051e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	4e2f      	ldr	r6, [pc, #188]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80051ea:	6833      	ldr	r3, [r6, #0]
 80051ec:	05db      	lsls	r3, r3, #23
 80051ee:	d526      	bpl.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051f0:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051f2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80051f6:	d136      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f8:	6a23      	ldr	r3, [r4, #32]
 80051fa:	686a      	ldr	r2, [r5, #4]
 80051fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005200:	4313      	orrs	r3, r2
 8005202:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005204:	b11f      	cbz	r7, 800520e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005206:	69e3      	ldr	r3, [r4, #28]
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800520c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800520e:	6828      	ldr	r0, [r5, #0]
 8005210:	0783      	lsls	r3, r0, #30
 8005212:	d506      	bpl.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005214:	4923      	ldr	r1, [pc, #140]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005216:	68ab      	ldr	r3, [r5, #8]
 8005218:	684a      	ldr	r2, [r1, #4]
 800521a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800521e:	431a      	orrs	r2, r3
 8005220:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005222:	f010 0010 	ands.w	r0, r0, #16
 8005226:	d01b      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800522a:	68e9      	ldr	r1, [r5, #12]
 800522c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800522e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005230:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005234:	430b      	orrs	r3, r1
 8005236:	6053      	str	r3, [r2, #4]
 8005238:	e012      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800523a:	2700      	movs	r7, #0
 800523c:	e7d4      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800523e:	6833      	ldr	r3, [r6, #0]
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005246:	f7fd fc19 	bl	8002a7c <HAL_GetTick>
 800524a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524c:	6833      	ldr	r3, [r6, #0]
 800524e:	05d8      	lsls	r0, r3, #23
 8005250:	d4ce      	bmi.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005252:	f7fd fc13 	bl	8002a7c <HAL_GetTick>
 8005256:	eba0 0008 	sub.w	r0, r0, r8
 800525a:	2864      	cmp	r0, #100	; 0x64
 800525c:	d9f6      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800525e:	2003      	movs	r0, #3
}
 8005260:	b002      	add	sp, #8
 8005262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005266:	686a      	ldr	r2, [r5, #4]
 8005268:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800526c:	429a      	cmp	r2, r3
 800526e:	d0c3      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005270:	2001      	movs	r0, #1
 8005272:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005274:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005276:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800527e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8005280:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005282:	07d9      	lsls	r1, r3, #31
 8005284:	d5b8      	bpl.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8005286:	f7fd fbf9 	bl	8002a7c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800528a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800528e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005290:	6a23      	ldr	r3, [r4, #32]
 8005292:	079a      	lsls	r2, r3, #30
 8005294:	d4b0      	bmi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fd fbf1 	bl	8002a7c <HAL_GetTick>
 800529a:	1b80      	subs	r0, r0, r6
 800529c:	4540      	cmp	r0, r8
 800529e:	d9f7      	bls.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80052a0:	e7dd      	b.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80052a2:	bf00      	nop
 80052a4:	40021000 	.word	0x40021000
 80052a8:	40007000 	.word	0x40007000
 80052ac:	42420440 	.word	0x42420440

080052b0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80052b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80052b4:	461c      	mov	r4, r3
 80052b6:	4616      	mov	r6, r2
 80052b8:	460f      	mov	r7, r1
 80052ba:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052bc:	f7fd fbde 	bl	8002a7c <HAL_GetTick>
 80052c0:	4434      	add	r4, r6
 80052c2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80052c4:	f7fd fbda 	bl	8002a7c <HAL_GetTick>
 80052c8:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80052d2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80052d6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052d8:	6893      	ldr	r3, [r2, #8]
 80052da:	ea37 0303 	bics.w	r3, r7, r3
 80052de:	d001      	beq.n	80052e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80052e0:	2000      	movs	r0, #0
 80052e2:	e02e      	b.n	8005342 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80052e4:	1c73      	adds	r3, r6, #1
 80052e6:	d0f7      	beq.n	80052d8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052e8:	f7fd fbc8 	bl	8002a7c <HAL_GetTick>
 80052ec:	eba0 0008 	sub.w	r0, r0, r8
 80052f0:	42a0      	cmp	r0, r4
 80052f2:	d329      	bcc.n	8005348 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f4:	682b      	ldr	r3, [r5, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052fc:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fe:	686a      	ldr	r2, [r5, #4]
 8005300:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005304:	d10a      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005306:	68aa      	ldr	r2, [r5, #8]
 8005308:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800530c:	d002      	beq.n	8005314 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800530e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005312:	d103      	bne.n	800531c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800531c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800531e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005322:	d107      	bne.n	8005334 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005332:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005334:	2301      	movs	r3, #1
 8005336:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800533a:	2300      	movs	r3, #0
 800533c:	2003      	movs	r0, #3
 800533e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8005342:	b002      	add	sp, #8
 8005344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8005348:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800534a:	2b00      	cmp	r3, #0
      count--;
 800534c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800534e:	bf08      	it	eq
 8005350:	2400      	moveq	r4, #0
      count--;
 8005352:	3b01      	subs	r3, #1
 8005354:	e7be      	b.n	80052d4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8005356:	bf00      	nop
 8005358:	20000000 	.word	0x20000000

0800535c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005360:	6842      	ldr	r2, [r0, #4]
{
 8005362:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005364:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005368:	d116      	bne.n	8005398 <SPI_EndRxTransaction+0x3c>
 800536a:	6882      	ldr	r2, [r0, #8]
 800536c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005370:	d002      	beq.n	8005378 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005372:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005376:	d10f      	bne.n	8005398 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005378:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800537a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800537e:	6828      	ldr	r0, [r5, #0]
 8005380:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005384:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005386:	d107      	bne.n	8005398 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005388:	460a      	mov	r2, r1
 800538a:	2101      	movs	r1, #1
 800538c:	4620      	mov	r0, r4
 800538e:	f7ff ff8f 	bl	80052b0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005392:	b920      	cbnz	r0, 800539e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005394:	2000      	movs	r0, #0
}
 8005396:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	460a      	mov	r2, r1
 800539a:	2180      	movs	r1, #128	; 0x80
 800539c:	e7f6      	b.n	800538c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800539e:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80053a0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a2:	f043 0320 	orr.w	r3, r3, #32
 80053a6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80053a8:	e7f5      	b.n	8005396 <SPI_EndRxTransaction+0x3a>

080053aa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053aa:	b510      	push	{r4, lr}
 80053ac:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	460a      	mov	r2, r1
 80053b0:	2180      	movs	r1, #128	; 0x80
{
 80053b2:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b4:	f7ff ff7c 	bl	80052b0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80053b8:	b120      	cbz	r0, 80053c4 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 80053ba:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80053be:	f043 0320 	orr.w	r3, r3, #32
 80053c2:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 80053c4:	bd10      	pop	{r4, pc}

080053c6 <HAL_SPI_Init>:
{
 80053c6:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80053c8:	4604      	mov	r4, r0
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d051      	beq.n	8005472 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d14a      	bne.n	800546a <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053d4:	6842      	ldr	r2, [r0, #4]
 80053d6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80053da:	d000      	beq.n	80053de <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053dc:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053de:	2300      	movs	r3, #0
 80053e0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80053e2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80053e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053ea:	b923      	cbnz	r3, 80053f6 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80053ec:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80053ee:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80053f2:	f7fc fb31 	bl	8001a58 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80053f6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80053f8:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80053fa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80053fe:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005400:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005406:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800540e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005412:	4303      	orrs	r3, r0
 8005414:	68e0      	ldr	r0, [r4, #12]
 8005416:	69a1      	ldr	r1, [r4, #24]
 8005418:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800541c:	4303      	orrs	r3, r0
 800541e:	6920      	ldr	r0, [r4, #16]
 8005420:	f000 0002 	and.w	r0, r0, #2
 8005424:	4303      	orrs	r3, r0
 8005426:	6960      	ldr	r0, [r4, #20]
 8005428:	f000 0001 	and.w	r0, r0, #1
 800542c:	4303      	orrs	r3, r0
 800542e:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8005432:	4303      	orrs	r3, r0
 8005434:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005436:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005438:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800543c:	4303      	orrs	r3, r0
 800543e:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005440:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005444:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8005448:	4303      	orrs	r3, r0
 800544a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800544c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8005450:	4303      	orrs	r3, r0
 8005452:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005454:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005456:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005458:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800545a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800545e:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005460:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005462:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005464:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005468:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800546a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800546c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005470:	e7b5      	b.n	80053de <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005472:	2001      	movs	r0, #1
 8005474:	e7f8      	b.n	8005468 <HAL_SPI_Init+0xa2>

08005476 <HAL_SPI_TransmitReceive>:
{
 8005476:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800547a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800547c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005480:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005482:	2b01      	cmp	r3, #1
{
 8005484:	460d      	mov	r5, r1
 8005486:	4691      	mov	r9, r2
 8005488:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 800548c:	f000 80e0 	beq.w	8005650 <HAL_SPI_TransmitReceive+0x1da>
 8005490:	2301      	movs	r3, #1
 8005492:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005496:	f7fd faf1 	bl	8002a7c <HAL_GetTick>
  tmp_state           = hspi->State;
 800549a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800549e:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054a0:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80054a2:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80054a4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054a6:	d00a      	beq.n	80054be <HAL_SPI_TransmitReceive+0x48>
 80054a8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80054ac:	f040 80ce 	bne.w	800564c <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f040 80ca 	bne.w	800564c <HAL_SPI_TransmitReceive+0x1d6>
 80054b8:	2904      	cmp	r1, #4
 80054ba:	f040 80c7 	bne.w	800564c <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054be:	2d00      	cmp	r5, #0
 80054c0:	d03f      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xcc>
 80054c2:	f1b9 0f00 	cmp.w	r9, #0
 80054c6:	d03c      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xcc>
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	d03a      	beq.n	8005542 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054cc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054d0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054d4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054d6:	bf1c      	itt	ne
 80054d8:	2305      	movne	r3, #5
 80054da:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054de:	2300      	movs	r3, #0
 80054e0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80054e2:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054e6:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80054e8:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80054ea:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ec:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80054ee:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f0:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80054f2:	bf58      	it	pl
 80054f4:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054f6:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80054f8:	bf58      	it	pl
 80054fa:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80054fe:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8005500:	bf58      	it	pl
 8005502:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005504:	68e1      	ldr	r1, [r4, #12]
 8005506:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800550a:	d151      	bne.n	80055b0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550c:	b10a      	cbz	r2, 8005512 <HAL_SPI_TransmitReceive+0x9c>
 800550e:	2e01      	cmp	r6, #1
 8005510:	d107      	bne.n	8005522 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005512:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005516:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005518:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800551a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800551c:	3b01      	subs	r3, #1
 800551e:	b29b      	uxth	r3, r3
 8005520:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005522:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005524:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	b96b      	cbnz	r3, 8005546 <HAL_SPI_TransmitReceive+0xd0>
 800552a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	b953      	cbnz	r3, 8005546 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005530:	463a      	mov	r2, r7
 8005532:	4641      	mov	r1, r8
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff ff38 	bl	80053aa <SPI_EndRxTxTransaction>
 800553a:	2800      	cmp	r0, #0
 800553c:	d07b      	beq.n	8005636 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800553e:	2320      	movs	r3, #32
 8005540:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005542:	2001      	movs	r0, #1
 8005544:	e02b      	b.n	800559e <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005546:	6821      	ldr	r1, [r4, #0]
 8005548:	688b      	ldr	r3, [r1, #8]
 800554a:	079a      	lsls	r2, r3, #30
 800554c:	d50d      	bpl.n	800556a <HAL_SPI_TransmitReceive+0xf4>
 800554e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005550:	b29b      	uxth	r3, r3
 8005552:	b153      	cbz	r3, 800556a <HAL_SPI_TransmitReceive+0xf4>
 8005554:	b14d      	cbz	r5, 800556a <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8005556:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005558:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800555a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800555e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005560:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005562:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005564:	3b01      	subs	r3, #1
 8005566:	b29b      	uxth	r3, r3
 8005568:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800556a:	688a      	ldr	r2, [r1, #8]
 800556c:	f012 0201 	ands.w	r2, r2, #1
 8005570:	d00c      	beq.n	800558c <HAL_SPI_TransmitReceive+0x116>
 8005572:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005574:	b29b      	uxth	r3, r3
 8005576:	b14b      	cbz	r3, 800558c <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8005578:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800557a:	68c9      	ldr	r1, [r1, #12]
 800557c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800557e:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005582:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005584:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005586:	3b01      	subs	r3, #1
 8005588:	b29b      	uxth	r3, r3
 800558a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800558c:	f7fd fa76 	bl	8002a7c <HAL_GetTick>
 8005590:	1bc0      	subs	r0, r0, r7
 8005592:	4540      	cmp	r0, r8
 8005594:	d3c6      	bcc.n	8005524 <HAL_SPI_TransmitReceive+0xae>
 8005596:	f1b8 3fff 	cmp.w	r8, #4294967295
 800559a:	d0c3      	beq.n	8005524 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 800559c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800559e:	2301      	movs	r3, #1
 80055a0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80055a4:	2300      	movs	r3, #0
 80055a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80055aa:	b003      	add	sp, #12
 80055ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055b0:	b10a      	cbz	r2, 80055b6 <HAL_SPI_TransmitReceive+0x140>
 80055b2:	2e01      	cmp	r6, #1
 80055b4:	d108      	bne.n	80055c8 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b6:	782a      	ldrb	r2, [r5, #0]
 80055b8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055bc:	3301      	adds	r3, #1
 80055be:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80055c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80055c8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	b91b      	cbnz	r3, 80055d8 <HAL_SPI_TransmitReceive+0x162>
 80055d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ab      	beq.n	8005530 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	6893      	ldr	r3, [r2, #8]
 80055dc:	079b      	lsls	r3, r3, #30
 80055de:	d50e      	bpl.n	80055fe <HAL_SPI_TransmitReceive+0x188>
 80055e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	b15b      	cbz	r3, 80055fe <HAL_SPI_TransmitReceive+0x188>
 80055e6:	b155      	cbz	r5, 80055fe <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 80055e8:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80055f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80055f2:	3301      	adds	r3, #1
 80055f4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80055f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80055f8:	3b01      	subs	r3, #1
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	6891      	ldr	r1, [r2, #8]
 8005602:	f011 0101 	ands.w	r1, r1, #1
 8005606:	d00d      	beq.n	8005624 <HAL_SPI_TransmitReceive+0x1ae>
 8005608:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	b153      	cbz	r3, 8005624 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 800560e:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005610:	68d2      	ldr	r2, [r2, #12]
 8005612:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005616:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005618:	3301      	adds	r3, #1
 800561a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800561c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800561e:	3b01      	subs	r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005624:	f7fd fa2a 	bl	8002a7c <HAL_GetTick>
 8005628:	1bc0      	subs	r0, r0, r7
 800562a:	4540      	cmp	r0, r8
 800562c:	d3cd      	bcc.n	80055ca <HAL_SPI_TransmitReceive+0x154>
 800562e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005632:	d0ca      	beq.n	80055ca <HAL_SPI_TransmitReceive+0x154>
 8005634:	e7b2      	b.n	800559c <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005636:	68a3      	ldr	r3, [r4, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1b0      	bne.n	800559e <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	9001      	str	r0, [sp, #4]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	9201      	str	r2, [sp, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	e7a8      	b.n	800559e <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800564c:	2002      	movs	r0, #2
 800564e:	e7a6      	b.n	800559e <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8005650:	2002      	movs	r0, #2
 8005652:	e7aa      	b.n	80055aa <HAL_SPI_TransmitReceive+0x134>

08005654 <HAL_SPI_Receive>:
{
 8005654:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005658:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800565a:	6843      	ldr	r3, [r0, #4]
{
 800565c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800565e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8005662:	4688      	mov	r8, r1
 8005664:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005666:	d10c      	bne.n	8005682 <HAL_SPI_Receive+0x2e>
 8005668:	6883      	ldr	r3, [r0, #8]
 800566a:	b953      	cbnz	r3, 8005682 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800566c:	2304      	movs	r3, #4
 800566e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005672:	4613      	mov	r3, r2
 8005674:	9500      	str	r5, [sp, #0]
 8005676:	460a      	mov	r2, r1
 8005678:	f7ff fefd 	bl	8005476 <HAL_SPI_TransmitReceive>
}
 800567c:	b002      	add	sp, #8
 800567e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8005682:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005686:	2b01      	cmp	r3, #1
 8005688:	d07d      	beq.n	8005786 <HAL_SPI_Receive+0x132>
 800568a:	2301      	movs	r3, #1
 800568c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005690:	f7fd f9f4 	bl	8002a7c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005694:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8005698:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800569a:	2b01      	cmp	r3, #1
 800569c:	b2d8      	uxtb	r0, r3
 800569e:	d170      	bne.n	8005782 <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 80056a0:	f1b8 0f00 	cmp.w	r8, #0
 80056a4:	d05b      	beq.n	800575e <HAL_SPI_Receive+0x10a>
 80056a6:	2e00      	cmp	r6, #0
 80056a8:	d059      	beq.n	800575e <HAL_SPI_Receive+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056aa:	2304      	movs	r3, #4
 80056ac:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b0:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b2:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b4:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->TxISR       = NULL;
 80056ba:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80056be:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056c0:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80056c2:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80056c4:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056c6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056ce:	d107      	bne.n	80056e0 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80056de:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80056e4:	bf5e      	ittt	pl
 80056e6:	681a      	ldrpl	r2, [r3, #0]
 80056e8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80056ec:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056ee:	68e3      	ldr	r3, [r4, #12]
 80056f0:	b1f3      	cbz	r3, 8005730 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 80056f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	b1fb      	cbz	r3, 8005738 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	07d2      	lsls	r2, r2, #31
 80056fe:	d535      	bpl.n	800576c <HAL_SPI_Receive+0x118>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005704:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005708:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800570a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800570c:	3b01      	subs	r3, #1
 800570e:	b29b      	uxth	r3, r3
 8005710:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005712:	e7ee      	b.n	80056f2 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	07d0      	lsls	r0, r2, #31
 800571a:	d518      	bpl.n	800574e <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800571c:	7b1b      	ldrb	r3, [r3, #12]
 800571e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005720:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005724:	3301      	adds	r3, #1
 8005726:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005728:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800572a:	3b01      	subs	r3, #1
 800572c:	b29b      	uxth	r3, r3
 800572e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8005730:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1ed      	bne.n	8005714 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005738:	463a      	mov	r2, r7
 800573a:	4629      	mov	r1, r5
 800573c:	4620      	mov	r0, r4
 800573e:	f7ff fe0d 	bl	800535c <SPI_EndRxTransaction>
 8005742:	b9d8      	cbnz	r0, 800577c <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005744:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005746:	3800      	subs	r0, #0
 8005748:	bf18      	it	ne
 800574a:	2001      	movne	r0, #1
error :
 800574c:	e007      	b.n	800575e <HAL_SPI_Receive+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800574e:	f7fd f995 	bl	8002a7c <HAL_GetTick>
 8005752:	1bc0      	subs	r0, r0, r7
 8005754:	42a8      	cmp	r0, r5
 8005756:	d3eb      	bcc.n	8005730 <HAL_SPI_Receive+0xdc>
 8005758:	1c69      	adds	r1, r5, #1
 800575a:	d0e9      	beq.n	8005730 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 800575c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800575e:	2301      	movs	r3, #1
 8005760:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005764:	2300      	movs	r3, #0
 8005766:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 800576a:	e787      	b.n	800567c <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576c:	f7fd f986 	bl	8002a7c <HAL_GetTick>
 8005770:	1bc0      	subs	r0, r0, r7
 8005772:	42a8      	cmp	r0, r5
 8005774:	d3bd      	bcc.n	80056f2 <HAL_SPI_Receive+0x9e>
 8005776:	1c6b      	adds	r3, r5, #1
 8005778:	d0bb      	beq.n	80056f2 <HAL_SPI_Receive+0x9e>
 800577a:	e7ef      	b.n	800575c <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800577c:	2320      	movs	r3, #32
 800577e:	6563      	str	r3, [r4, #84]	; 0x54
 8005780:	e7e0      	b.n	8005744 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005782:	2002      	movs	r0, #2
 8005784:	e7eb      	b.n	800575e <HAL_SPI_Receive+0x10a>
  __HAL_LOCK(hspi);
 8005786:	2002      	movs	r0, #2
 8005788:	e778      	b.n	800567c <HAL_SPI_Receive+0x28>

0800578a <HAL_SPI_ErrorCallback>:
 800578a:	4770      	bx	lr

0800578c <HAL_SPI_IRQHandler>:
{
 800578c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800578e:	6803      	ldr	r3, [r0, #0]
{
 8005790:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005792:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005794:	689a      	ldr	r2, [r3, #8]
{
 8005796:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005798:	0656      	lsls	r6, r2, #25
 800579a:	ea4f 1592 	mov.w	r5, r2, lsr #6
 800579e:	f3c2 1780 	ubfx	r7, r2, #6, #1
 80057a2:	d408      	bmi.n	80057b6 <HAL_SPI_IRQHandler+0x2a>
 80057a4:	07d6      	lsls	r6, r2, #31
 80057a6:	d506      	bpl.n	80057b6 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057a8:	064e      	lsls	r6, r1, #25
 80057aa:	d504      	bpl.n	80057b6 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 80057ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 80057ae:	b005      	add	sp, #20
 80057b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 80057b4:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057b6:	0796      	lsls	r6, r2, #30
 80057b8:	d504      	bpl.n	80057c4 <HAL_SPI_IRQHandler+0x38>
 80057ba:	0608      	lsls	r0, r1, #24
 80057bc:	d502      	bpl.n	80057c4 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 80057be:	4620      	mov	r0, r4
 80057c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057c2:	e7f4      	b.n	80057ae <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80057c4:	0956      	lsrs	r6, r2, #5
 80057c6:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 80057ca:	07d2      	lsls	r2, r2, #31
 80057cc:	d54c      	bpl.n	8005868 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057ce:	068d      	lsls	r5, r1, #26
 80057d0:	d54a      	bpl.n	8005868 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80057d2:	b177      	cbz	r7, 80057f2 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80057d4:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80057d8:	2000      	movs	r0, #0
 80057da:	2a03      	cmp	r2, #3
 80057dc:	d03e      	beq.n	800585c <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80057de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057e0:	f042 0204 	orr.w	r2, r2, #4
 80057e4:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e6:	9001      	str	r0, [sp, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	9201      	str	r2, [sp, #4]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	9201      	str	r2, [sp, #4]
 80057f0:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80057f2:	07f0      	lsls	r0, r6, #31
 80057f4:	d50c      	bpl.n	8005810 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80057f6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80057fe:	2200      	movs	r2, #0
 8005800:	9203      	str	r2, [sp, #12]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	9203      	str	r2, [sp, #12]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005810:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005812:	b34a      	cbz	r2, 8005868 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800581a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800581c:	2201      	movs	r2, #1
 800581e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005822:	078a      	lsls	r2, r1, #30
 8005824:	d022      	beq.n	800586c <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005826:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005828:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800582a:	f022 0203 	bic.w	r2, r2, #3
 800582e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005830:	b140      	cbz	r0, 8005844 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <HAL_SPI_IRQHandler+0xe8>)
 8005834:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005836:	f7fd f9b9 	bl	8002bac <HAL_DMA_Abort_IT>
 800583a:	b118      	cbz	r0, 8005844 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800583c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800583e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005842:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005844:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005846:	b178      	cbz	r0, 8005868 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <HAL_SPI_IRQHandler+0xe8>)
 800584a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800584c:	f7fd f9ae 	bl	8002bac <HAL_DMA_Abort_IT>
 8005850:	b150      	cbz	r0, 8005868 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005852:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005858:	6563      	str	r3, [r4, #84]	; 0x54
 800585a:	e005      	b.n	8005868 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800585c:	9002      	str	r0, [sp, #8]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	9202      	str	r2, [sp, #8]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	9b02      	ldr	r3, [sp, #8]
}
 8005868:	b005      	add	sp, #20
 800586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff ff8c 	bl	800578a <HAL_SPI_ErrorCallback>
 8005872:	e7f9      	b.n	8005868 <HAL_SPI_IRQHandler+0xdc>
 8005874:	08005879 	.word	0x08005879

08005878 <SPI_DMAAbortOnError>:
{
 8005878:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800587a:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800587c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800587e:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005880:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8005882:	f7ff ff82 	bl	800578a <HAL_SPI_ErrorCallback>
}
 8005886:	bd08      	pop	{r3, pc}

08005888 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005888:	6a03      	ldr	r3, [r0, #32]
{
 800588a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800588c:	f023 0301 	bic.w	r3, r3, #1
 8005890:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005894:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005898:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800589a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800589e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80058a2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80058a6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a8:	4d0a      	ldr	r5, [pc, #40]	; (80058d4 <TIM_OC1_SetConfig+0x4c>)
 80058aa:	42a8      	cmp	r0, r5
 80058ac:	d10b      	bne.n	80058c6 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058ae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80058b4:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058b6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058ba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80058be:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80058c4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058ca:	684a      	ldr	r2, [r1, #4]
 80058cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	6203      	str	r3, [r0, #32]
}
 80058d0:	bd70      	pop	{r4, r5, r6, pc}
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00

080058d8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d8:	6a03      	ldr	r3, [r0, #32]
{
 80058da:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058ea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80058ee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80058f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058fa:	4d0b      	ldr	r5, [pc, #44]	; (8005928 <TIM_OC3_SetConfig+0x50>)
 80058fc:	42a8      	cmp	r0, r5
 80058fe:	d10d      	bne.n	800591c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005900:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005906:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800590a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800590e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005912:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005914:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005918:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800591c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800591e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005920:	684a      	ldr	r2, [r1, #4]
 8005922:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	6203      	str	r3, [r0, #32]
}
 8005926:	bd70      	pop	{r4, r5, r6, pc}
 8005928:	40012c00 	.word	0x40012c00

0800592c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800592c:	6a03      	ldr	r3, [r0, #32]
{
 800592e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005934:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005938:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800593a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800593c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800593e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005942:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005946:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800594c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	4d06      	ldr	r5, [pc, #24]	; (800596c <TIM_OC4_SetConfig+0x40>)
 8005952:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005954:	bf02      	ittt	eq
 8005956:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005958:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800595c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005962:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005964:	684a      	ldr	r2, [r1, #4]
 8005966:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	6203      	str	r3, [r0, #32]
}
 800596a:	bd30      	pop	{r4, r5, pc}
 800596c:	40012c00 	.word	0x40012c00

08005970 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005970:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005974:	2b01      	cmp	r3, #1
 8005976:	d11c      	bne.n	80059b2 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597a:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005980:	6803      	ldr	r3, [r0, #0]
 8005982:	4293      	cmp	r3, r2
 8005984:	d00a      	beq.n	800599c <HAL_TIM_Base_Start+0x2c>
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598a:	d007      	beq.n	800599c <HAL_TIM_Base_Start+0x2c>
 800598c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <HAL_TIM_Base_Start+0x2c>
 8005994:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005998:	4293      	cmp	r3, r2
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a2:	2a06      	cmp	r2, #6
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	f042 0201 	orr.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80059ae:	2000      	movs	r0, #0
}
 80059b0:	4770      	bx	lr
    return HAL_ERROR;
 80059b2:	2001      	movs	r0, #1
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40012c00 	.word	0x40012c00

080059bc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80059bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d120      	bne.n	8005a06 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80059c4:	2302      	movs	r3, #2
 80059c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059ca:	6803      	ldr	r3, [r0, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	4a0d      	ldr	r2, [pc, #52]	; (8005a0c <HAL_TIM_Base_Start_IT+0x50>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d00a      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x34>
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d007      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x34>
 80059e0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0x34>
 80059e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f6:	2a06      	cmp	r2, #6
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	f042 0201 	orr.w	r2, r2, #1
 8005a00:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005a02:	2000      	movs	r0, #0
}
 8005a04:	4770      	bx	lr
    return HAL_ERROR;
 8005a06:	2001      	movs	r0, #1
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40012c00 	.word	0x40012c00

08005a10 <HAL_TIM_PWM_MspInit>:
 8005a10:	4770      	bx	lr

08005a12 <HAL_TIM_Encoder_Start>:
{
 8005a12:	4603      	mov	r3, r0
 8005a14:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a16:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a1a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a1e:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a22:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a26:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a28:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a2a:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005a2c:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8005a2e:	b9c1      	cbnz	r1, 8005a62 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a30:	2a01      	cmp	r2, #1
 8005a32:	d145      	bne.n	8005ac0 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a34:	2d01      	cmp	r5, #1
 8005a36:	d145      	bne.n	8005ac4 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a42:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a44:	6a11      	ldr	r1, [r2, #32]
 8005a46:	f021 0101 	bic.w	r1, r1, #1
 8005a4a:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a4c:	6a11      	ldr	r1, [r2, #32]
 8005a4e:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 8005a52:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a54:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	6813      	ldr	r3, [r2, #0]
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	6013      	str	r3, [r2, #0]
}
 8005a60:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8005a62:	2904      	cmp	r1, #4
 8005a64:	d111      	bne.n	8005a8a <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a66:	2801      	cmp	r0, #1
 8005a68:	d12a      	bne.n	8005ac0 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a6a:	2c01      	cmp	r4, #1
 8005a6c:	d1f8      	bne.n	8005a60 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a78:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005a7a:	6a11      	ldr	r1, [r2, #32]
 8005a7c:	f021 0110 	bic.w	r1, r1, #16
 8005a80:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a82:	6a11      	ldr	r1, [r2, #32]
 8005a84:	f041 0110 	orr.w	r1, r1, #16
 8005a88:	e7e3      	b.n	8005a52 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	2a01      	cmp	r2, #1
 8005a8c:	d118      	bne.n	8005ac0 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8e:	2801      	cmp	r0, #1
 8005a90:	d118      	bne.n	8005ac4 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a92:	2d01      	cmp	r5, #1
 8005a94:	d1e4      	bne.n	8005a60 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a96:	2c01      	cmp	r4, #1
 8005a98:	d1e2      	bne.n	8005a60 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  switch (Channel)
 8005aac:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005aae:	6a11      	ldr	r1, [r2, #32]
 8005ab0:	f021 0101 	bic.w	r1, r1, #1
 8005ab4:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab6:	6a11      	ldr	r1, [r2, #32]
 8005ab8:	f041 0101 	orr.w	r1, r1, #1
 8005abc:	6211      	str	r1, [r2, #32]
 8005abe:	e7dc      	b.n	8005a7a <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	e7cd      	b.n	8005a60 <HAL_TIM_Encoder_Start+0x4e>
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	e7cb      	b.n	8005a60 <HAL_TIM_Encoder_Start+0x4e>

08005ac8 <HAL_TIM_OC_DelayElapsedCallback>:
 8005ac8:	4770      	bx	lr

08005aca <HAL_TIM_IC_CaptureCallback>:
 8005aca:	4770      	bx	lr

08005acc <HAL_TIM_PWM_PulseFinishedCallback>:
 8005acc:	4770      	bx	lr

08005ace <HAL_TIM_TriggerCallback>:
 8005ace:	4770      	bx	lr

08005ad0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad0:	6803      	ldr	r3, [r0, #0]
{
 8005ad2:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad4:	691a      	ldr	r2, [r3, #16]
{
 8005ad6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ad8:	0791      	lsls	r1, r2, #30
 8005ada:	d50e      	bpl.n	8005afa <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	0792      	lsls	r2, r2, #30
 8005ae0:	d50b      	bpl.n	8005afa <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ae2:	f06f 0202 	mvn.w	r2, #2
 8005ae6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	079b      	lsls	r3, r3, #30
 8005af0:	d077      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	f7ff ffea 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005af6:	2300      	movs	r3, #0
 8005af8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	0750      	lsls	r0, r2, #29
 8005b00:	d510      	bpl.n	8005b24 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	0751      	lsls	r1, r2, #29
 8005b06:	d50d      	bpl.n	8005b24 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b08:	f06f 0204 	mvn.w	r2, #4
 8005b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b0e:	2202      	movs	r2, #2
 8005b10:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b12:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b16:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b1a:	d068      	beq.n	8005bee <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1c:	f7ff ffd5 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b20:	2300      	movs	r3, #0
 8005b22:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	0712      	lsls	r2, r2, #28
 8005b2a:	d50f      	bpl.n	8005b4c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	0710      	lsls	r0, r2, #28
 8005b30:	d50c      	bpl.n	8005b4c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b32:	f06f 0208 	mvn.w	r2, #8
 8005b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b38:	2204      	movs	r2, #4
 8005b3a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b3c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b40:	0799      	lsls	r1, r3, #30
 8005b42:	d05a      	beq.n	8005bfa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b44:	f7ff ffc1 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	06d2      	lsls	r2, r2, #27
 8005b52:	d510      	bpl.n	8005b76 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	06d0      	lsls	r0, r2, #27
 8005b58:	d50d      	bpl.n	8005b76 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b5a:	f06f 0210 	mvn.w	r2, #16
 8005b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b60:	2208      	movs	r2, #8
 8005b62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b64:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b68:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005b6c:	d04b      	beq.n	8005c06 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	f7ff ffac 	bl	8005aca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	2300      	movs	r3, #0
 8005b74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	07d1      	lsls	r1, r2, #31
 8005b7c:	d508      	bpl.n	8005b90 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	07d2      	lsls	r2, r2, #31
 8005b82:	d505      	bpl.n	8005b90 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b84:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b88:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8c:	f7fb fdd0 	bl	8001730 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	0610      	lsls	r0, r2, #24
 8005b96:	d508      	bpl.n	8005baa <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	0611      	lsls	r1, r2, #24
 8005b9c:	d505      	bpl.n	8005baa <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005ba2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ba6:	f000 face 	bl	8006146 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	0652      	lsls	r2, r2, #25
 8005bb0:	d508      	bpl.n	8005bc4 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bb2:	68da      	ldr	r2, [r3, #12]
 8005bb4:	0650      	lsls	r0, r2, #25
 8005bb6:	d505      	bpl.n	8005bc4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8005bbc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bbe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005bc0:	f7ff ff85 	bl	8005ace <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	0691      	lsls	r1, r2, #26
 8005bca:	d522      	bpl.n	8005c12 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bcc:	68da      	ldr	r2, [r3, #12]
 8005bce:	0692      	lsls	r2, r2, #26
 8005bd0:	d51f      	bpl.n	8005c12 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bd2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8005bd6:	4620      	mov	r0, r4
}
 8005bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bdc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8005bde:	f000 bab1 	b.w	8006144 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	f7ff ff71 	bl	8005ac8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be6:	4620      	mov	r0, r4
 8005be8:	f7ff ff70 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
 8005bec:	e783      	b.n	8005af6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	f7ff ff6b 	bl	8005ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7ff ff6a 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
 8005bf8:	e792      	b.n	8005b20 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfa:	f7ff ff65 	bl	8005ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f7ff ff64 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
 8005c04:	e7a0      	b.n	8005b48 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c06:	f7ff ff5f 	bl	8005ac8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f7ff ff5e 	bl	8005acc <HAL_TIM_PWM_PulseFinishedCallback>
 8005c10:	e7af      	b.n	8005b72 <HAL_TIM_IRQHandler+0xa2>
}
 8005c12:	bd10      	pop	{r4, pc}

08005c14 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c14:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8005c16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c18:	4290      	cmp	r0, r2
 8005c1a:	d00a      	beq.n	8005c32 <TIM_Base_SetConfig+0x1e>
 8005c1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c20:	d007      	beq.n	8005c32 <TIM_Base_SetConfig+0x1e>
 8005c22:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c26:	4290      	cmp	r0, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_Base_SetConfig+0x1e>
 8005c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c2e:	4290      	cmp	r0, r2
 8005c30:	d115      	bne.n	8005c5e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8005c32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005c38:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c3a:	4a11      	ldr	r2, [pc, #68]	; (8005c80 <TIM_Base_SetConfig+0x6c>)
 8005c3c:	4290      	cmp	r0, r2
 8005c3e:	d00a      	beq.n	8005c56 <TIM_Base_SetConfig+0x42>
 8005c40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c44:	d007      	beq.n	8005c56 <TIM_Base_SetConfig+0x42>
 8005c46:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005c4a:	4290      	cmp	r0, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_Base_SetConfig+0x42>
 8005c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c52:	4290      	cmp	r0, r2
 8005c54:	d103      	bne.n	8005c5e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c56:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c5c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c5e:	694a      	ldr	r2, [r1, #20]
 8005c60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c64:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005c66:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c68:	688b      	ldr	r3, [r1, #8]
 8005c6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <TIM_Base_SetConfig+0x6c>)
 8005c72:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8005c74:	bf04      	itt	eq
 8005c76:	690b      	ldreq	r3, [r1, #16]
 8005c78:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	6143      	str	r3, [r0, #20]
}
 8005c7e:	4770      	bx	lr
 8005c80:	40012c00 	.word	0x40012c00

08005c84 <HAL_TIM_Base_Init>:
{
 8005c84:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005c86:	4604      	mov	r4, r0
 8005c88:	b330      	cbz	r0, 8005cd8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005c8e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005c92:	b91b      	cbnz	r3, 8005c9c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005c94:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005c98:	f7fb ff58 	bl	8001b4c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c9e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	1d21      	adds	r1, r4, #4
 8005ca6:	f7ff ffb5 	bl	8005c14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005caa:	2301      	movs	r3, #1
  return HAL_OK;
 8005cac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cb2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005cb6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005cba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005cbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005cd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005cd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005cd8:	2001      	movs	r0, #1
 8005cda:	e7fc      	b.n	8005cd6 <HAL_TIM_Base_Init+0x52>

08005cdc <HAL_TIM_PWM_Init>:
{
 8005cdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005cde:	4604      	mov	r4, r0
 8005ce0:	b330      	cbz	r0, 8005d30 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005ce6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cea:	b91b      	cbnz	r3, 8005cf4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005cec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005cf0:	f7ff fe8e 	bl	8005a10 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cf6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	1d21      	adds	r1, r4, #4
 8005cfe:	f7ff ff89 	bl	8005c14 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d02:	2301      	movs	r3, #1
  return HAL_OK;
 8005d04:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005d0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005d12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005d16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005d2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005d2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
 8005d32:	e7fc      	b.n	8005d2e <HAL_TIM_PWM_Init+0x52>

08005d34 <HAL_TIM_Encoder_Init>:
{
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	460d      	mov	r5, r1
  if (htim == NULL)
 8005d38:	4604      	mov	r4, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	d04d      	beq.n	8005dda <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005d42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d46:	b91b      	cbnz	r3, 8005d50 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8005d48:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005d4c:	f7fb ff34 	bl	8001bb8 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005d50:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d52:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d58:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d5c:	6883      	ldr	r3, [r0, #8]
 8005d5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d62:	f023 0307 	bic.w	r3, r3, #7
 8005d66:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	f7ff ff54 	bl	8005c14 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8005d6e:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 8005d70:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005d72:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d74:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 8005d76:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d78:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d7a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d7e:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d82:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8005d86:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d88:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d8c:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d8e:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d96:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8005d98:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d9e:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005da2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005da6:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005da8:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005daa:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005dae:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8005db0:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005db2:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8005db6:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005db8:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dba:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8005dbc:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8005dbe:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005dda:	2001      	movs	r0, #1
 8005ddc:	e7fc      	b.n	8005dd8 <HAL_TIM_Encoder_Init+0xa4>
	...

08005de0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de0:	6a03      	ldr	r3, [r0, #32]
{
 8005de2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de4:	f023 0310 	bic.w	r3, r3, #16
 8005de8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005dea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005dec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005dee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005df2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dfa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005dfc:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e00:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e04:	4d0b      	ldr	r5, [pc, #44]	; (8005e34 <TIM_OC2_SetConfig+0x54>)
 8005e06:	42a8      	cmp	r0, r5
 8005e08:	d10d      	bne.n	8005e26 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e0a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e14:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e18:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005e1c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e22:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005e26:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e28:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e2a:	684a      	ldr	r2, [r1, #4]
 8005e2c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e2e:	6203      	str	r3, [r0, #32]
}
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00

08005e38 <HAL_TIM_PWM_ConfigChannel>:
{
 8005e38:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005e3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005e3e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d052      	beq.n	8005eea <HAL_TIM_PWM_ConfigChannel+0xb2>
 8005e44:	2301      	movs	r3, #1
  switch (Channel)
 8005e46:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005e48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005e4c:	d03c      	beq.n	8005ec8 <HAL_TIM_PWM_ConfigChannel+0x90>
 8005e4e:	d806      	bhi.n	8005e5e <HAL_TIM_PWM_ConfigChannel+0x26>
 8005e50:	b1c2      	cbz	r2, 8005e84 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8005e52:	2a04      	cmp	r2, #4
 8005e54:	d027      	beq.n	8005ea6 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8005e56:	2000      	movs	r0, #0
 8005e58:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005e5c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005e5e:	2a0c      	cmp	r2, #12
 8005e60:	d1f9      	bne.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e62:	6800      	ldr	r0, [r0, #0]
 8005e64:	f7ff fd62 	bl	800592c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e68:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e6c:	69da      	ldr	r2, [r3, #28]
 8005e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7c:	69da      	ldr	r2, [r3, #28]
 8005e7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005e82:	e030      	b.n	8005ee6 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e84:	6800      	ldr	r0, [r0, #0]
 8005e86:	f7ff fcff 	bl	8005888 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e8a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e8c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e8e:	699a      	ldr	r2, [r3, #24]
 8005e90:	f042 0208 	orr.w	r2, r2, #8
 8005e94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	f022 0204 	bic.w	r2, r2, #4
 8005e9c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e9e:	699a      	ldr	r2, [r3, #24]
 8005ea0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ea2:	619a      	str	r2, [r3, #24]
      break;
 8005ea4:	e7d7      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ea6:	6800      	ldr	r0, [r0, #0]
 8005ea8:	f7ff ff9a 	bl	8005de0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eac:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eae:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005eb8:	699a      	ldr	r2, [r3, #24]
 8005eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005ec6:	e7ec      	b.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ec8:	6800      	ldr	r0, [r0, #0]
 8005eca:	f7ff fd05 	bl	80058d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ece:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ed0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	f042 0208 	orr.w	r2, r2, #8
 8005ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	f022 0204 	bic.w	r2, r2, #4
 8005ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee6:	61da      	str	r2, [r3, #28]
      break;
 8005ee8:	e7b5      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8005eea:	2002      	movs	r0, #2
 8005eec:	e7b6      	b.n	8005e5c <HAL_TIM_PWM_ConfigChannel+0x24>

08005eee <TIM_ETR_SetConfig>:
{
 8005eee:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8005ef0:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef2:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ef4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ef8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8005efc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8005efe:	6082      	str	r2, [r0, #8]
}
 8005f00:	bd10      	pop	{r4, pc}

08005f02 <HAL_TIM_ConfigClockSource>:
{
 8005f02:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8005f04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005f08:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	f04f 0002 	mov.w	r0, #2
 8005f10:	d027      	beq.n	8005f62 <HAL_TIM_ConfigClockSource+0x60>
 8005f12:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8005f18:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8005f1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005f1e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8005f28:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8005f2a:	680b      	ldr	r3, [r1, #0]
 8005f2c:	2b60      	cmp	r3, #96	; 0x60
 8005f2e:	d04d      	beq.n	8005fcc <HAL_TIM_ConfigClockSource+0xca>
 8005f30:	d832      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x96>
 8005f32:	2b40      	cmp	r3, #64	; 0x40
 8005f34:	d062      	beq.n	8005ffc <HAL_TIM_ConfigClockSource+0xfa>
 8005f36:	d815      	bhi.n	8005f64 <HAL_TIM_ConfigClockSource+0x62>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d003      	beq.n	8005f44 <HAL_TIM_ConfigClockSource+0x42>
 8005f3c:	d809      	bhi.n	8005f52 <HAL_TIM_ConfigClockSource+0x50>
 8005f3e:	f033 0210 	bics.w	r2, r3, #16
 8005f42:	d108      	bne.n	8005f56 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8005f44:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f043 0307 	orr.w	r3, r3, #7
 8005f50:	e020      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8005f52:	2b30      	cmp	r3, #48	; 0x30
 8005f54:	d0f6      	beq.n	8005f44 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005f58:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f5a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f5e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005f64:	2b50      	cmp	r3, #80	; 0x50
 8005f66:	d1f6      	bne.n	8005f56 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f68:	684a      	ldr	r2, [r1, #4]
 8005f6a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005f6c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f6e:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f70:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f74:	f025 0501 	bic.w	r5, r5, #1
 8005f78:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f7a:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005f7c:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f82:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005f86:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005f88:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005f8a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f90:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005f94:	6083      	str	r3, [r0, #8]
}
 8005f96:	e7de      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8005f98:	2b70      	cmp	r3, #112	; 0x70
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_TIM_ConfigClockSource+0xb4>
 8005f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa0:	d1d9      	bne.n	8005f56 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 8005fa2:	68cb      	ldr	r3, [r1, #12]
 8005fa4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005fa8:	f7ff ffa1 	bl	8005eee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fac:	6822      	ldr	r2, [r4, #0]
 8005fae:	6893      	ldr	r3, [r2, #8]
 8005fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb4:	e008      	b.n	8005fc8 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8005fb6:	68cb      	ldr	r3, [r1, #12]
 8005fb8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005fbc:	f7ff ff97 	bl	8005eee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005fc0:	6822      	ldr	r2, [r4, #0]
 8005fc2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc8:	6093      	str	r3, [r2, #8]
      break;
 8005fca:	e7c4      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fcc:	684d      	ldr	r5, [r1, #4]
 8005fce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd0:	6a01      	ldr	r1, [r0, #32]
 8005fd2:	f021 0110 	bic.w	r1, r1, #16
 8005fd6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005fda:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fdc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005fec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005fee:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005ff0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ff6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8005ffa:	e7cb      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ffc:	684a      	ldr	r2, [r1, #4]
 8005ffe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006000:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006002:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006004:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006008:	f025 0501 	bic.w	r5, r5, #1
 800600c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006010:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006016:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800601a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800601c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800601e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006024:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006028:	e7b4      	b.n	8005f94 <HAL_TIM_ConfigClockSource+0x92>

0800602a <TIM_CCxChannelCmd>:
{
 800602a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800602c:	2401      	movs	r4, #1
  TIMx->CCER &= ~tmp;
 800602e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006030:	f001 011f 	and.w	r1, r1, #31
 8006034:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006036:	ea23 0304 	bic.w	r3, r3, r4
 800603a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	408a      	lsls	r2, r1
 8006040:	431a      	orrs	r2, r3
 8006042:	6202      	str	r2, [r0, #32]
}
 8006044:	bd10      	pop	{r4, pc}
	...

08006048 <HAL_TIM_OC_Start>:
{
 8006048:	b510      	push	{r4, lr}
 800604a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800604c:	b929      	cbnz	r1, 800605a <HAL_TIM_OC_Start+0x12>
 800604e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8006052:	2b01      	cmp	r3, #1
 8006054:	d01d      	beq.n	8006092 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8006056:	2001      	movs	r0, #1
}
 8006058:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800605a:	2904      	cmp	r1, #4
 800605c:	d107      	bne.n	800606e <HAL_TIM_OC_Start+0x26>
 800605e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8006062:	2b01      	cmp	r3, #1
 8006064:	d1f7      	bne.n	8006056 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006066:	2302      	movs	r3, #2
 8006068:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 800606c:	e014      	b.n	8006098 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800606e:	2908      	cmp	r1, #8
 8006070:	d107      	bne.n	8006082 <HAL_TIM_OC_Start+0x3a>
 8006072:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006076:	2b01      	cmp	r3, #1
 8006078:	d1ed      	bne.n	8006056 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800607a:	2302      	movs	r3, #2
 800607c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006080:	e00a      	b.n	8006098 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006082:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006086:	2b01      	cmp	r3, #1
 8006088:	d1e5      	bne.n	8006056 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800608a:	2302      	movs	r3, #2
 800608c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006090:	e002      	b.n	8006098 <HAL_TIM_OC_Start+0x50>
 8006092:	2302      	movs	r3, #2
 8006094:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006098:	2201      	movs	r2, #1
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	f7ff ffc5 	bl	800602a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	4a0e      	ldr	r2, [pc, #56]	; (80060dc <HAL_TIM_OC_Start+0x94>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d10a      	bne.n	80060be <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 80060a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ae:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	2a06      	cmp	r2, #6
 80060b8:	d10b      	bne.n	80060d2 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 80060ba:	2000      	movs	r0, #0
 80060bc:	e7cc      	b.n	8006058 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c2:	d0f5      	beq.n	80060b0 <HAL_TIM_OC_Start+0x68>
 80060c4:	4a06      	ldr	r2, [pc, #24]	; (80060e0 <HAL_TIM_OC_Start+0x98>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d0f2      	beq.n	80060b0 <HAL_TIM_OC_Start+0x68>
 80060ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d0ee      	beq.n	80060b0 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e7ee      	b.n	80060ba <HAL_TIM_OC_Start+0x72>
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400

080060e4 <HAL_TIM_PWM_Start>:
 80060e4:	f7ff bfb0 	b.w	8006048 <HAL_TIM_OC_Start>

080060e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80060ee:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	f04f 0002 	mov.w	r0, #2
 80060f6:	d022      	beq.n	800613e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80060fa:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80060fe:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006100:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006102:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006106:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006108:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800610a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610c:	4c0c      	ldr	r4, [pc, #48]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800610e:	42a3      	cmp	r3, r4
 8006110:	d00a      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006116:	d007      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006118:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800611c:	42a3      	cmp	r3, r4
 800611e:	d003      	beq.n	8006128 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006120:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006124:	42a3      	cmp	r3, r4
 8006126:	d104      	bne.n	8006132 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006128:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800612a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800612e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006130:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006132:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006134:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006136:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800613a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	40012c00 	.word	0x40012c00

08006144 <HAL_TIMEx_CommutCallback>:
 8006144:	4770      	bx	lr

08006146 <HAL_TIMEx_BreakCallback>:
 8006146:	4770      	bx	lr

08006148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006148:	b510      	push	{r4, lr}
 800614a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800614c:	6803      	ldr	r3, [r0, #0]
 800614e:	68c1      	ldr	r1, [r0, #12]
 8006150:	691a      	ldr	r2, [r3, #16]
 8006152:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006156:	430a      	orrs	r2, r1
 8006158:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800615a:	6882      	ldr	r2, [r0, #8]
 800615c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800615e:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006160:	4302      	orrs	r2, r0
 8006162:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8006164:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8006168:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800616c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800616e:	430a      	orrs	r2, r1
 8006170:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	69a1      	ldr	r1, [r4, #24]
 8006176:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800617a:	430a      	orrs	r2, r1
 800617c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800617e:	4a0e      	ldr	r2, [pc, #56]	; (80061b8 <UART_SetConfig+0x70>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d115      	bne.n	80061b0 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006184:	f7fe ffee 	bl	8005164 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006188:	2319      	movs	r3, #25
 800618a:	4343      	muls	r3, r0
 800618c:	6862      	ldr	r2, [r4, #4]
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	0092      	lsls	r2, r2, #2
 8006192:	fbb3 f3f2 	udiv	r3, r3, r2
 8006196:	2264      	movs	r2, #100	; 0x64
 8006198:	fbb3 f1f2 	udiv	r1, r3, r2
 800619c:	fb02 3311 	mls	r3, r2, r1, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	; 0x32
 80061a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80061a8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80061ac:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80061ae:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80061b0:	f7fe ffc8 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80061b4:	e7e8      	b.n	8006188 <UART_SetConfig+0x40>
 80061b6:	bf00      	nop
 80061b8:	40013800 	.word	0x40013800

080061bc <HAL_UART_Init>:
{
 80061bc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80061be:	4604      	mov	r4, r0
 80061c0:	b340      	cbz	r0, 8006214 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80061c2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80061c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80061ca:	b91b      	cbnz	r3, 80061d4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80061cc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80061d0:	f7fb fd50 	bl	8001c74 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80061d4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80061d6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80061dc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80061de:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80061e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061e4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80061e6:	f7ff ffaf 	bl	8006148 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ea:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ec:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006204:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006206:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800620a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800620e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006212:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006214:	2001      	movs	r0, #1
 8006216:	e7fc      	b.n	8006212 <HAL_UART_Init+0x56>

08006218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006218:	b084      	sub	sp, #16
 800621a:	a801      	add	r0, sp, #4
 800621c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006220:	b004      	add	sp, #16
 8006222:	2000      	movs	r0, #0
 8006224:	4770      	bx	lr

08006226 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006226:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006228:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800622c:	2000      	movs	r0, #0
 800622e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006232:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006236:	4770      	bx	lr

08006238 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006238:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800623c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006240:	045b      	lsls	r3, r3, #17
 8006242:	0c5b      	lsrs	r3, r3, #17
 8006244:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006248:	2000      	movs	r0, #0
 800624a:	4770      	bx	lr

0800624c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800624c:	2000      	movs	r0, #0
 800624e:	4770      	bx	lr

08006250 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006250:	b084      	sub	sp, #16
 8006252:	b510      	push	{r4, lr}
 8006254:	4604      	mov	r4, r0
 8006256:	a803      	add	r0, sp, #12
 8006258:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800625c:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800625e:	2301      	movs	r3, #1
 8006260:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 8006264:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006268:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800626c:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 8006270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006274:	b004      	add	sp, #16
 8006276:	4770      	bx	lr

08006278 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800627a:	780d      	ldrb	r5, [r1, #0]
{
 800627c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800627e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8006282:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006284:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8006288:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800628c:	0412      	lsls	r2, r2, #16
 800628e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8006290:	2803      	cmp	r0, #3
 8006292:	d84f      	bhi.n	8006334 <USB_ActivateEndpoint+0xbc>
 8006294:	e8df f000 	tbb	[pc, r0]
 8006298:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80062a0:	f248 0480 	movw	r4, #32896	; 0x8080
 80062a4:	4322      	orrs	r2, r4
 80062a6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80062aa:	780e      	ldrb	r6, [r1, #0]
 80062ac:	4d9b      	ldr	r5, [pc, #620]	; (800651c <USB_ActivateEndpoint+0x2a4>)
 80062ae:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 80062b2:	b292      	uxth	r2, r2
 80062b4:	402a      	ands	r2, r5
 80062b6:	4332      	orrs	r2, r6
 80062b8:	4322      	orrs	r2, r4
 80062ba:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 80062be:	7b0c      	ldrb	r4, [r1, #12]
 80062c0:	780a      	ldrb	r2, [r1, #0]
 80062c2:	2c00      	cmp	r4, #0
 80062c4:	f040 8089 	bne.w	80063da <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 80062c8:	88cc      	ldrh	r4, [r1, #6]
 80062ca:	784e      	ldrb	r6, [r1, #1]
 80062cc:	0864      	lsrs	r4, r4, #1
 80062ce:	0064      	lsls	r4, r4, #1
 80062d0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80062d4:	b386      	cbz	r6, 8006338 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062d6:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80062da:	b2b6      	uxth	r6, r6
 80062dc:	4432      	add	r2, r6
 80062de:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062e2:	780c      	ldrb	r4, [r1, #0]
 80062e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80062e8:	0652      	lsls	r2, r2, #25
 80062ea:	d509      	bpl.n	8006300 <USB_ActivateEndpoint+0x88>
 80062ec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80062f0:	b292      	uxth	r2, r2
 80062f2:	402a      	ands	r2, r5
 80062f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80062fc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006300:	78ca      	ldrb	r2, [r1, #3]
 8006302:	780c      	ldrb	r4, [r1, #0]
 8006304:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006306:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800630a:	4985      	ldr	r1, [pc, #532]	; (8006520 <USB_ActivateEndpoint+0x2a8>)
 800630c:	b292      	uxth	r2, r2
 800630e:	ea02 0201 	and.w	r2, r2, r1
 8006312:	bf18      	it	ne
 8006314:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800631c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006320:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8006326:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800632a:	2000      	movs	r0, #0
      break;
 800632c:	e7b8      	b.n	80062a0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800632e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8006332:	e7fa      	b.n	800632a <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8006334:	2001      	movs	r0, #1
 8006336:	e7b3      	b.n	80062a0 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006338:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800633c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800633e:	b2ad      	uxth	r5, r5
 8006340:	442a      	add	r2, r5
 8006342:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006346:	780a      	ldrb	r2, [r1, #0]
 8006348:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800634c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006350:	b2a4      	uxth	r4, r4
 8006352:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006356:	bb7e      	cbnz	r6, 80063b8 <USB_ActivateEndpoint+0x140>
 8006358:	5b15      	ldrh	r5, [r2, r4]
 800635a:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800635e:	042d      	lsls	r5, r5, #16
 8006360:	0c2d      	lsrs	r5, r5, #16
 8006362:	5315      	strh	r5, [r2, r4]
 8006364:	5b15      	ldrh	r5, [r2, r4]
 8006366:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 800636a:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 800636e:	b2ad      	uxth	r5, r5
 8006370:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006372:	780c      	ldrb	r4, [r1, #0]
 8006374:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006378:	0455      	lsls	r5, r2, #17
 800637a:	d50d      	bpl.n	8006398 <USB_ActivateEndpoint+0x120>
 800637c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006380:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006384:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006388:	0412      	lsls	r2, r2, #16
 800638a:	0c12      	lsrs	r2, r2, #16
 800638c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006394:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006398:	7809      	ldrb	r1, [r1, #0]
 800639a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800639e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80063a6:	0412      	lsls	r2, r2, #16
 80063a8:	0c12      	lsrs	r2, r2, #16
 80063aa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063b6:	e071      	b.n	800649c <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80063b8:	2e3e      	cmp	r6, #62	; 0x3e
 80063ba:	d805      	bhi.n	80063c8 <USB_ActivateEndpoint+0x150>
 80063bc:	0875      	lsrs	r5, r6, #1
 80063be:	07f7      	lsls	r7, r6, #31
 80063c0:	bf48      	it	mi
 80063c2:	3501      	addmi	r5, #1
 80063c4:	02ad      	lsls	r5, r5, #10
 80063c6:	e7d2      	b.n	800636e <USB_ActivateEndpoint+0xf6>
 80063c8:	0977      	lsrs	r7, r6, #5
 80063ca:	4d56      	ldr	r5, [pc, #344]	; (8006524 <USB_ActivateEndpoint+0x2ac>)
 80063cc:	06f6      	lsls	r6, r6, #27
 80063ce:	bf08      	it	eq
 80063d0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80063d4:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 80063d8:	e7c9      	b.n	800636e <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80063da:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80063de:	b2a4      	uxth	r4, r4
 80063e0:	402c      	ands	r4, r5
 80063e2:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 80063e6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80063ea:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80063ee:	780a      	ldrb	r2, [r1, #0]
 80063f0:	890c      	ldrh	r4, [r1, #8]
 80063f2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80063f6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80063fa:	0864      	lsrs	r4, r4, #1
 80063fc:	b2b6      	uxth	r6, r6
 80063fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006402:	0064      	lsls	r4, r4, #1
 8006404:	5394      	strh	r4, [r2, r6]
 8006406:	780a      	ldrb	r2, [r1, #0]
 8006408:	894c      	ldrh	r4, [r1, #10]
 800640a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800640e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006412:	0864      	lsrs	r4, r4, #1
 8006414:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8006418:	0064      	lsls	r4, r4, #1
 800641a:	b2b6      	uxth	r6, r6
 800641c:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 800641e:	784a      	ldrb	r2, [r1, #1]
 8006420:	780c      	ldrb	r4, [r1, #0]
 8006422:	2a00      	cmp	r2, #0
 8006424:	d13d      	bne.n	80064a2 <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006426:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800642a:	0452      	lsls	r2, r2, #17
 800642c:	d509      	bpl.n	8006442 <USB_ActivateEndpoint+0x1ca>
 800642e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006432:	b292      	uxth	r2, r2
 8006434:	402a      	ands	r2, r5
 8006436:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800643a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800643e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006442:	780c      	ldrb	r4, [r1, #0]
 8006444:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006448:	0657      	lsls	r7, r2, #25
 800644a:	d50d      	bpl.n	8006468 <USB_ActivateEndpoint+0x1f0>
 800644c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006450:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006454:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006458:	0412      	lsls	r2, r2, #16
 800645a:	0c12      	lsrs	r2, r2, #16
 800645c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006460:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006464:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006468:	f248 0480 	movw	r4, #32896	; 0x8080
 800646c:	780d      	ldrb	r5, [r1, #0]
 800646e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8006472:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006476:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800647a:	0412      	lsls	r2, r2, #16
 800647c:	0c12      	lsrs	r2, r2, #16
 800647e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006482:	4322      	orrs	r2, r4
 8006484:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006488:	7809      	ldrb	r1, [r1, #0]
 800648a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800648e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006496:	0412      	lsls	r2, r2, #16
 8006498:	0c12      	lsrs	r2, r2, #16
 800649a:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800649c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80064a0:	e740      	b.n	8006324 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80064a6:	0456      	lsls	r6, r2, #17
 80064a8:	d509      	bpl.n	80064be <USB_ActivateEndpoint+0x246>
 80064aa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80064ae:	b292      	uxth	r2, r2
 80064b0:	402a      	ands	r2, r5
 80064b2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80064b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ba:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064be:	780c      	ldrb	r4, [r1, #0]
 80064c0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80064c4:	0652      	lsls	r2, r2, #25
 80064c6:	d50d      	bpl.n	80064e4 <USB_ActivateEndpoint+0x26c>
 80064c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80064cc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80064d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064d4:	0412      	lsls	r2, r2, #16
 80064d6:	0c12      	lsrs	r2, r2, #16
 80064d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80064e0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80064e4:	78ca      	ldrb	r2, [r1, #3]
 80064e6:	780c      	ldrb	r4, [r1, #0]
 80064e8:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80064ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80064ee:	4d0c      	ldr	r5, [pc, #48]	; (8006520 <USB_ActivateEndpoint+0x2a8>)
 80064f0:	b292      	uxth	r2, r2
 80064f2:	ea02 0205 	and.w	r2, r2, r5
 80064f6:	bf18      	it	ne
 80064f8:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006504:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006508:	7809      	ldrb	r1, [r1, #0]
 800650a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800650e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006516:	0412      	lsls	r2, r2, #16
 8006518:	0c12      	lsrs	r2, r2, #16
 800651a:	e748      	b.n	80063ae <USB_ActivateEndpoint+0x136>
 800651c:	ffff8f8f 	.word	0xffff8f8f
 8006520:	ffff8fbf 	.word	0xffff8fbf
 8006524:	ffff8000 	.word	0xffff8000

08006528 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006528:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800652a:	7b0c      	ldrb	r4, [r1, #12]
 800652c:	784b      	ldrb	r3, [r1, #1]
 800652e:	780a      	ldrb	r2, [r1, #0]
 8006530:	2c00      	cmp	r4, #0
 8006532:	d13d      	bne.n	80065b0 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8006534:	b313      	cbz	r3, 800657c <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006536:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800653a:	065c      	lsls	r4, r3, #25
 800653c:	d50d      	bpl.n	800655a <USB_DeactivateEndpoint+0x32>
 800653e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	0c1b      	lsrs	r3, r3, #16
 800654e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006552:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006556:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800655a:	780a      	ldrb	r2, [r1, #0]
 800655c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	0c1b      	lsrs	r3, r3, #16
 800656c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006574:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8006578:	2000      	movs	r0, #0
 800657a:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800657c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006580:	045b      	lsls	r3, r3, #17
 8006582:	d50d      	bpl.n	80065a0 <USB_DeactivateEndpoint+0x78>
 8006584:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	0c1b      	lsrs	r3, r3, #16
 8006594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065a0:	780a      	ldrb	r2, [r1, #0]
 80065a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	e7db      	b.n	8006568 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d14e      	bne.n	8006652 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065b8:	045c      	lsls	r4, r3, #17
 80065ba:	d50d      	bpl.n	80065d8 <USB_DeactivateEndpoint+0xb0>
 80065bc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	0c1b      	lsrs	r3, r3, #16
 80065cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d8:	780a      	ldrb	r2, [r1, #0]
 80065da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065de:	065b      	lsls	r3, r3, #25
 80065e0:	d50d      	bpl.n	80065fe <USB_DeactivateEndpoint+0xd6>
 80065e2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	0c1b      	lsrs	r3, r3, #16
 80065f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80065fe:	780a      	ldrb	r2, [r1, #0]
 8006600:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660c:	041b      	lsls	r3, r3, #16
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006614:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006618:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800661c:	f248 0280 	movw	r2, #32896	; 0x8080
 8006620:	780c      	ldrb	r4, [r1, #0]
 8006622:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	041b      	lsls	r3, r3, #16
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	4313      	orrs	r3, r2
 8006634:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006638:	7809      	ldrb	r1, [r1, #0]
 800663a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	0c1b      	lsrs	r3, r3, #16
 800664a:	4313      	orrs	r3, r2
 800664c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8006650:	e792      	b.n	8006578 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006652:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006656:	045c      	lsls	r4, r3, #17
 8006658:	d50d      	bpl.n	8006676 <USB_DeactivateEndpoint+0x14e>
 800665a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800665e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	041b      	lsls	r3, r3, #16
 8006668:	0c1b      	lsrs	r3, r3, #16
 800666a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800666e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006672:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006676:	780a      	ldrb	r2, [r1, #0]
 8006678:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	d50d      	bpl.n	800669c <USB_DeactivateEndpoint+0x174>
 8006680:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800668c:	041b      	lsls	r3, r3, #16
 800668e:	0c1b      	lsrs	r3, r3, #16
 8006690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006698:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800669c:	780a      	ldrb	r2, [r1, #0]
 800669e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	041b      	lsls	r3, r3, #16
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066b6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80066ba:	f248 0280 	movw	r2, #32896	; 0x8080
 80066be:	780c      	ldrb	r4, [r1, #0]
 80066c0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	0c1b      	lsrs	r3, r3, #16
 80066d0:	4313      	orrs	r3, r2
 80066d2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80066d6:	7809      	ldrb	r1, [r1, #0]
 80066d8:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80066dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	e7af      	b.n	8006646 <USB_DeactivateEndpoint+0x11e>

080066e6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80066e6:	784b      	ldrb	r3, [r1, #1]
 80066e8:	780a      	ldrb	r2, [r1, #0]
 80066ea:	b18b      	cbz	r3, 8006710 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80066ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f8:	041b      	lsls	r3, r3, #16
 80066fa:	0c1b      	lsrs	r3, r3, #16
 80066fc:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006708:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800670c:	2000      	movs	r0, #0
 800670e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006710:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006724:	e7ec      	b.n	8006700 <USB_EPSetStall+0x1a>

08006726 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006726:	7b0b      	ldrb	r3, [r1, #12]
 8006728:	bb43      	cbnz	r3, 800677c <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800672a:	784b      	ldrb	r3, [r1, #1]
 800672c:	780a      	ldrb	r2, [r1, #0]
 800672e:	b33b      	cbz	r3, 8006780 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006730:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006734:	065b      	lsls	r3, r3, #25
 8006736:	d50d      	bpl.n	8006754 <USB_EPClearStall+0x2e>
 8006738:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800673c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006750:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006754:	78cb      	ldrb	r3, [r1, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d010      	beq.n	800677c <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800675a:	780a      	ldrb	r2, [r1, #0]
 800675c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006760:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006768:	041b      	lsls	r3, r3, #16
 800676a:	0c1b      	lsrs	r3, r3, #16
 800676c:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006778:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800677c:	2000      	movs	r0, #0
 800677e:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006780:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006784:	045b      	lsls	r3, r3, #17
 8006786:	d50d      	bpl.n	80067a4 <USB_EPClearStall+0x7e>
 8006788:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800678c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006794:	041b      	lsls	r3, r3, #16
 8006796:	0c1b      	lsrs	r3, r3, #16
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067a4:	780a      	ldrb	r2, [r1, #0]
 80067a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80067aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b2:	041b      	lsls	r3, r3, #16
 80067b4:	0c1b      	lsrs	r3, r3, #16
 80067b6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80067ba:	e7d9      	b.n	8006770 <USB_EPClearStall+0x4a>

080067bc <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80067bc:	b911      	cbnz	r1, 80067c4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80067c4:	2000      	movs	r0, #0
 80067c6:	4770      	bx	lr

080067c8 <USB_DevConnect>:
 80067c8:	2000      	movs	r0, #0
 80067ca:	4770      	bx	lr

080067cc <USB_DevDisconnect>:
 80067cc:	2000      	movs	r0, #0
 80067ce:	4770      	bx	lr

080067d0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80067d0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80067d4:	b280      	uxth	r0, r0
 80067d6:	4770      	bx	lr

080067d8 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80067d8:	2000      	movs	r0, #0
 80067da:	4770      	bx	lr

080067dc <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067dc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067e0:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067e6:	085b      	lsrs	r3, r3, #1
 80067e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d100      	bne.n	80067f2 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 80067f0:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80067f2:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 80067f6:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 80067fa:	e7f7      	b.n	80067ec <USB_WritePMA+0x10>

080067fc <USB_EPStartXfer>:
{
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8006800:	7849      	ldrb	r1, [r1, #1]
{
 8006802:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8006804:	2901      	cmp	r1, #1
 8006806:	7b2a      	ldrb	r2, [r5, #12]
 8006808:	f040 81a1 	bne.w	8006b4e <USB_EPStartXfer+0x352>
    if (ep->xfer_len > ep->maxpacket)
 800680c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006810:	69ae      	ldr	r6, [r5, #24]
 8006812:	6969      	ldr	r1, [r5, #20]
 8006814:	4566      	cmp	r6, ip
 8006816:	bf28      	it	cs
 8006818:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 800681a:	bb02      	cbnz	r2, 800685e <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800681c:	b2b6      	uxth	r6, r6
 800681e:	88ea      	ldrh	r2, [r5, #6]
 8006820:	4633      	mov	r3, r6
 8006822:	f7ff ffdb 	bl	80067dc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006826:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800682a:	7829      	ldrb	r1, [r5, #0]
 800682c:	b290      	uxth	r0, r2
 800682e:	f204 4204 	addw	r2, r4, #1028	; 0x404
 8006832:	0109      	lsls	r1, r1, #4
 8006834:	4402      	add	r2, r0
 8006836:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006838:	782a      	ldrb	r2, [r5, #0]
 800683a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 800684e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006858:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800685c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 800685e:	78eb      	ldrb	r3, [r5, #3]
 8006860:	782f      	ldrb	r7, [r5, #0]
 8006862:	2b02      	cmp	r3, #2
 8006864:	f040 8138 	bne.w	8006ad8 <USB_EPStartXfer+0x2dc>
        if (ep->xfer_len_db > ep->maxpacket)
 8006868:	6a2b      	ldr	r3, [r5, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 800686a:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800686e:	459c      	cmp	ip, r3
 8006870:	f080 811a 	bcs.w	8006aa8 <USB_EPStartXfer+0x2ac>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006874:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006878:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800687c:	0412      	lsls	r2, r2, #16
 800687e:	0c12      	lsrs	r2, r2, #16
 8006880:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006888:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800688c:	782a      	ldrb	r2, [r5, #0]
          ep->xfer_len_db -= len;
 800688e:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006890:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8006894:	622b      	str	r3, [r5, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006896:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689a:	b2b3      	uxth	r3, r6
 800689c:	7868      	ldrb	r0, [r5, #1]
 800689e:	f000 8083 	beq.w	80069a8 <USB_EPStartXfer+0x1ac>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d152      	bne.n	800694c <USB_EPStartXfer+0x150>
 80068a6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80068aa:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 80068ae:	b280      	uxth	r0, r0
 80068b0:	4438      	add	r0, r7
 80068b2:	0112      	lsls	r2, r2, #4
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	d136      	bne.n	8006926 <USB_EPStartXfer+0x12a>
 80068b8:	5a87      	ldrh	r7, [r0, r2]
 80068ba:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80068be:	043f      	lsls	r7, r7, #16
 80068c0:	0c3f      	lsrs	r7, r7, #16
 80068c2:	5287      	strh	r7, [r0, r2]
 80068c4:	5a87      	ldrh	r7, [r0, r2]
 80068c6:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80068ca:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80068ce:	b2bf      	uxth	r7, r7
 80068d0:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068d2:	4620      	mov	r0, r4
 80068d4:	896a      	ldrh	r2, [r5, #10]
 80068d6:	f7ff ff81 	bl	80067dc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80068da:	6a2a      	ldr	r2, [r5, #32]
 80068dc:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 80068de:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80068e0:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80068e2:	bf8a      	itet	hi
 80068e4:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80068e6:	2300      	movls	r3, #0
 80068e8:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068ea:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 80068ec:	4431      	add	r1, r6
 80068ee:	622b      	str	r3, [r5, #32]
 80068f0:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80068f2:	b293      	uxth	r3, r2
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d14b      	bne.n	8006990 <USB_EPStartXfer+0x194>
 80068f8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80068fc:	782e      	ldrb	r6, [r5, #0]
 80068fe:	b280      	uxth	r0, r0
 8006900:	f204 4704 	addw	r7, r4, #1028	; 0x404
 8006904:	0136      	lsls	r6, r6, #4
 8006906:	4438      	add	r0, r7
 8006908:	bb5a      	cbnz	r2, 8006962 <USB_EPStartXfer+0x166>
 800690a:	5a32      	ldrh	r2, [r6, r0]
 800690c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006910:	0412      	lsls	r2, r2, #16
 8006912:	0c12      	lsrs	r2, r2, #16
 8006914:	5232      	strh	r2, [r6, r0]
 8006916:	5a32      	ldrh	r2, [r6, r0]
 8006918:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800691c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006920:	b292      	uxth	r2, r2
 8006922:	5232      	strh	r2, [r6, r0]
 8006924:	e026      	b.n	8006974 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006926:	2e3e      	cmp	r6, #62	; 0x3e
 8006928:	d806      	bhi.n	8006938 <USB_EPStartXfer+0x13c>
 800692a:	0877      	lsrs	r7, r6, #1
 800692c:	f016 0f01 	tst.w	r6, #1
 8006930:	bf18      	it	ne
 8006932:	3701      	addne	r7, #1
 8006934:	02bf      	lsls	r7, r7, #10
 8006936:	e7ca      	b.n	80068ce <USB_EPStartXfer+0xd2>
 8006938:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 800693c:	06f7      	lsls	r7, r6, #27
 800693e:	4fa3      	ldr	r7, [pc, #652]	; (8006bcc <USB_EPStartXfer+0x3d0>)
 8006940:	bf08      	it	eq
 8006942:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006946:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 800694a:	e7c0      	b.n	80068ce <USB_EPStartXfer+0xd2>
 800694c:	2801      	cmp	r0, #1
 800694e:	d1c0      	bne.n	80068d2 <USB_EPStartXfer+0xd6>
 8006950:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006954:	0112      	lsls	r2, r2, #4
 8006956:	b287      	uxth	r7, r0
 8006958:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800695c:	4438      	add	r0, r7
 800695e:	5283      	strh	r3, [r0, r2]
 8006960:	e7b7      	b.n	80068d2 <USB_EPStartXfer+0xd6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006962:	2a3e      	cmp	r2, #62	; 0x3e
 8006964:	d80b      	bhi.n	800697e <USB_EPStartXfer+0x182>
 8006966:	0857      	lsrs	r7, r2, #1
 8006968:	07d2      	lsls	r2, r2, #31
 800696a:	bf48      	it	mi
 800696c:	3701      	addmi	r7, #1
 800696e:	02bf      	lsls	r7, r7, #10
 8006970:	b2bf      	uxth	r7, r7
 8006972:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006974:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006976:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006978:	f7ff ff30 	bl	80067dc <USB_WritePMA>
 800697c:	e75c      	b.n	8006838 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800697e:	0957      	lsrs	r7, r2, #5
 8006980:	06d2      	lsls	r2, r2, #27
 8006982:	4a92      	ldr	r2, [pc, #584]	; (8006bcc <USB_EPStartXfer+0x3d0>)
 8006984:	bf08      	it	eq
 8006986:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800698a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800698e:	e7c7      	b.n	8006920 <USB_EPStartXfer+0x124>
 8006990:	2801      	cmp	r0, #1
 8006992:	d1ef      	bne.n	8006974 <USB_EPStartXfer+0x178>
 8006994:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006998:	7828      	ldrb	r0, [r5, #0]
 800699a:	b296      	uxth	r6, r2
 800699c:	f204 4204 	addw	r2, r4, #1028	; 0x404
 80069a0:	0100      	lsls	r0, r0, #4
 80069a2:	4432      	add	r2, r6
 80069a4:	5283      	strh	r3, [r0, r2]
 80069a6:	e7e5      	b.n	8006974 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d152      	bne.n	8006a52 <USB_EPStartXfer+0x256>
 80069ac:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80069b0:	f204 4704 	addw	r7, r4, #1028	; 0x404
 80069b4:	b280      	uxth	r0, r0
 80069b6:	4438      	add	r0, r7
 80069b8:	0112      	lsls	r2, r2, #4
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	d136      	bne.n	8006a2c <USB_EPStartXfer+0x230>
 80069be:	5a87      	ldrh	r7, [r0, r2]
 80069c0:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 80069c4:	043f      	lsls	r7, r7, #16
 80069c6:	0c3f      	lsrs	r7, r7, #16
 80069c8:	5287      	strh	r7, [r0, r2]
 80069ca:	5a87      	ldrh	r7, [r0, r2]
 80069cc:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 80069d0:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 80069d4:	b2bf      	uxth	r7, r7
 80069d6:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069d8:	4620      	mov	r0, r4
 80069da:	892a      	ldrh	r2, [r5, #8]
 80069dc:	f7ff fefe 	bl	80067dc <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80069e0:	6a2a      	ldr	r2, [r5, #32]
 80069e2:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 80069e4:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80069e6:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 80069e8:	bf8a      	itet	hi
 80069ea:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 80069ec:	2300      	movls	r3, #0
 80069ee:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069f0:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 80069f2:	4431      	add	r1, r6
 80069f4:	622b      	str	r3, [r5, #32]
 80069f6:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069f8:	b293      	uxth	r3, r2
 80069fa:	2800      	cmp	r0, #0
 80069fc:	d148      	bne.n	8006a90 <USB_EPStartXfer+0x294>
 80069fe:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006a02:	782e      	ldrb	r6, [r5, #0]
 8006a04:	b280      	uxth	r0, r0
 8006a06:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8006a0a:	0136      	lsls	r6, r6, #4
 8006a0c:	4438      	add	r0, r7
 8006a0e:	bb5a      	cbnz	r2, 8006a68 <USB_EPStartXfer+0x26c>
 8006a10:	5a32      	ldrh	r2, [r6, r0]
 8006a12:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006a16:	0412      	lsls	r2, r2, #16
 8006a18:	0c12      	lsrs	r2, r2, #16
 8006a1a:	5232      	strh	r2, [r6, r0]
 8006a1c:	5a32      	ldrh	r2, [r6, r0]
 8006a1e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006a22:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006a26:	b292      	uxth	r2, r2
 8006a28:	5232      	strh	r2, [r6, r0]
 8006a2a:	e026      	b.n	8006a7a <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a2c:	2e3e      	cmp	r6, #62	; 0x3e
 8006a2e:	d806      	bhi.n	8006a3e <USB_EPStartXfer+0x242>
 8006a30:	0877      	lsrs	r7, r6, #1
 8006a32:	f016 0f01 	tst.w	r6, #1
 8006a36:	bf18      	it	ne
 8006a38:	3701      	addne	r7, #1
 8006a3a:	02bf      	lsls	r7, r7, #10
 8006a3c:	e7ca      	b.n	80069d4 <USB_EPStartXfer+0x1d8>
 8006a3e:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8006a42:	06f7      	lsls	r7, r6, #27
 8006a44:	4f61      	ldr	r7, [pc, #388]	; (8006bcc <USB_EPStartXfer+0x3d0>)
 8006a46:	bf08      	it	eq
 8006a48:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006a4c:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8006a50:	e7c0      	b.n	80069d4 <USB_EPStartXfer+0x1d8>
 8006a52:	2801      	cmp	r0, #1
 8006a54:	d1c0      	bne.n	80069d8 <USB_EPStartXfer+0x1dc>
 8006a56:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006a5a:	0112      	lsls	r2, r2, #4
 8006a5c:	b287      	uxth	r7, r0
 8006a5e:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8006a62:	4438      	add	r0, r7
 8006a64:	5283      	strh	r3, [r0, r2]
 8006a66:	e7b7      	b.n	80069d8 <USB_EPStartXfer+0x1dc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a68:	2a3e      	cmp	r2, #62	; 0x3e
 8006a6a:	d808      	bhi.n	8006a7e <USB_EPStartXfer+0x282>
 8006a6c:	0857      	lsrs	r7, r2, #1
 8006a6e:	07d2      	lsls	r2, r2, #31
 8006a70:	bf48      	it	mi
 8006a72:	3701      	addmi	r7, #1
 8006a74:	02bf      	lsls	r7, r7, #10
 8006a76:	b2bf      	uxth	r7, r7
 8006a78:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a7a:	896a      	ldrh	r2, [r5, #10]
 8006a7c:	e77b      	b.n	8006976 <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a7e:	0957      	lsrs	r7, r2, #5
 8006a80:	06d2      	lsls	r2, r2, #27
 8006a82:	4a52      	ldr	r2, [pc, #328]	; (8006bcc <USB_EPStartXfer+0x3d0>)
 8006a84:	bf08      	it	eq
 8006a86:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006a8a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006a8e:	e7ca      	b.n	8006a26 <USB_EPStartXfer+0x22a>
 8006a90:	2801      	cmp	r0, #1
 8006a92:	d1f2      	bne.n	8006a7a <USB_EPStartXfer+0x27e>
 8006a94:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006a98:	7828      	ldrb	r0, [r5, #0]
 8006a9a:	b296      	uxth	r6, r2
 8006a9c:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8006aa0:	0100      	lsls	r0, r0, #4
 8006aa2:	4432      	add	r2, r6
 8006aa4:	5283      	strh	r3, [r0, r2]
 8006aa6:	e7e8      	b.n	8006a7a <USB_EPStartXfer+0x27e>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006aa8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006aac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ab0:	0412      	lsls	r2, r2, #16
 8006ab2:	0c12      	lsrs	r2, r2, #16
 8006ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006abc:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ac0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006ac4:	782e      	ldrb	r6, [r5, #0]
 8006ac6:	b297      	uxth	r7, r2
 8006ac8:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006acc:	443a      	add	r2, r7
 8006ace:	0136      	lsls	r6, r6, #4
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad4:	892a      	ldrh	r2, [r5, #8]
 8006ad6:	e74f      	b.n	8006978 <USB_EPStartXfer+0x17c>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ad8:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8006adc:	b2b3      	uxth	r3, r6
 8006ade:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ae2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006ae6:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8006aea:	b290      	uxth	r0, r2
 8006aec:	bf15      	itete	ne
 8006aee:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006af2:	f204 4204 	addweq	r2, r4, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006af6:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006af8:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006afa:	bf15      	itete	ne
 8006afc:	53d3      	strhne	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006afe:	53d3      	strheq	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8006b00:	896a      	ldrhne	r2, [r5, #10]
          pmabuffer = ep->pmaaddr0;
 8006b02:	892a      	ldrheq	r2, [r5, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b04:	4620      	mov	r0, r4
 8006b06:	f7ff fe69 	bl	80067dc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006b0a:	786b      	ldrb	r3, [r5, #1]
 8006b0c:	782a      	ldrb	r2, [r5, #0]
 8006b0e:	b973      	cbnz	r3, 8006b2e <USB_EPStartXfer+0x332>
 8006b10:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b28:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006b2c:	e684      	b.n	8006838 <USB_EPStartXfer+0x3c>
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	f47f ae82 	bne.w	8006838 <USB_EPStartXfer+0x3c>
 8006b34:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b40:	041b      	lsls	r3, r3, #16
 8006b42:	0c1b      	lsrs	r3, r3, #16
 8006b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	e7ec      	b.n	8006b28 <USB_EPStartXfer+0x32c>
    if (ep->doublebuffer == 0U)
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	d13e      	bne.n	8006bd0 <USB_EPStartXfer+0x3d4>
      if (ep->xfer_len > ep->maxpacket)
 8006b52:	69ab      	ldr	r3, [r5, #24]
 8006b54:	6929      	ldr	r1, [r5, #16]
 8006b56:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8006b58:	bf84      	itt	hi
 8006b5a:	1a5a      	subhi	r2, r3, r1
 8006b5c:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b5e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8006b62:	7828      	ldrb	r0, [r5, #0]
 8006b64:	61aa      	str	r2, [r5, #24]
 8006b66:	b28a      	uxth	r2, r1
 8006b68:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8006b6c:	0100      	lsls	r0, r0, #4
 8006b6e:	4411      	add	r1, r2
 8006b70:	b96b      	cbnz	r3, 8006b8e <USB_EPStartXfer+0x392>
 8006b72:	5a43      	ldrh	r3, [r0, r1]
 8006b74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	0c1b      	lsrs	r3, r3, #16
 8006b7c:	5243      	strh	r3, [r0, r1]
 8006b7e:	5a43      	ldrh	r3, [r0, r1]
 8006b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	5243      	strh	r3, [r0, r1]
 8006b8c:	e008      	b.n	8006ba0 <USB_EPStartXfer+0x3a4>
 8006b8e:	2b3e      	cmp	r3, #62	; 0x3e
 8006b90:	d812      	bhi.n	8006bb8 <USB_EPStartXfer+0x3bc>
 8006b92:	085a      	lsrs	r2, r3, #1
 8006b94:	07df      	lsls	r7, r3, #31
 8006b96:	bf48      	it	mi
 8006b98:	3201      	addmi	r2, #1
 8006b9a:	0292      	lsls	r2, r2, #10
 8006b9c:	b292      	uxth	r2, r2
 8006b9e:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ba0:	782a      	ldrb	r2, [r5, #0]
 8006ba2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	041b      	lsls	r3, r3, #16
 8006bb0:	0c1b      	lsrs	r3, r3, #16
 8006bb2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006bb6:	e64a      	b.n	800684e <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bb8:	095a      	lsrs	r2, r3, #5
 8006bba:	06de      	lsls	r6, r3, #27
 8006bbc:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <USB_EPStartXfer+0x3d0>)
 8006bbe:	bf08      	it	eq
 8006bc0:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8006bc4:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8006bc8:	e7de      	b.n	8006b88 <USB_EPStartXfer+0x38c>
 8006bca:	bf00      	nop
 8006bcc:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8006bd0:	78eb      	ldrb	r3, [r5, #3]
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d17e      	bne.n	8006cd4 <USB_EPStartXfer+0x4d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006bd6:	b9b9      	cbnz	r1, 8006c08 <USB_EPStartXfer+0x40c>
 8006bd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006bdc:	7829      	ldrb	r1, [r5, #0]
 8006bde:	b293      	uxth	r3, r2
 8006be0:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006be4:	6928      	ldr	r0, [r5, #16]
 8006be6:	0109      	lsls	r1, r1, #4
 8006be8:	441a      	add	r2, r3
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d144      	bne.n	8006c78 <USB_EPStartXfer+0x47c>
 8006bee:	5a8b      	ldrh	r3, [r1, r2]
 8006bf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bf4:	041b      	lsls	r3, r3, #16
 8006bf6:	0c1b      	lsrs	r3, r3, #16
 8006bf8:	528b      	strh	r3, [r1, r2]
 8006bfa:	5a8b      	ldrh	r3, [r1, r2]
 8006bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	528b      	strh	r3, [r1, r2]
 8006c08:	786a      	ldrb	r2, [r5, #1]
 8006c0a:	782b      	ldrb	r3, [r5, #0]
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	d155      	bne.n	8006cbc <USB_EPStartXfer+0x4c0>
 8006c10:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006c14:	6928      	ldr	r0, [r5, #16]
 8006c16:	b28a      	uxth	r2, r1
 8006c18:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8006c1c:	4411      	add	r1, r2
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d13a      	bne.n	8006c9a <USB_EPStartXfer+0x49e>
 8006c24:	5aca      	ldrh	r2, [r1, r3]
 8006c26:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006c2a:	0412      	lsls	r2, r2, #16
 8006c2c:	0c12      	lsrs	r2, r2, #16
 8006c2e:	52ca      	strh	r2, [r1, r3]
 8006c30:	5aca      	ldrh	r2, [r1, r3]
 8006c32:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006c36:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006c3a:	b292      	uxth	r2, r2
 8006c3c:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8006c3e:	69eb      	ldr	r3, [r5, #28]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0ad      	beq.n	8006ba0 <USB_EPStartXfer+0x3a4>
 8006c44:	f244 0340 	movw	r3, #16448	; 0x4040
 8006c48:	782a      	ldrb	r2, [r5, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006c4a:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006c4e:	ea03 0001 	and.w	r0, r3, r1
 8006c52:	438b      	bics	r3, r1
 8006c54:	d001      	beq.n	8006c5a <USB_EPStartXfer+0x45e>
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d1a2      	bne.n	8006ba0 <USB_EPStartXfer+0x3a4>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006c5a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c66:	041b      	lsls	r3, r3, #16
 8006c68:	0c1b      	lsrs	r3, r3, #16
 8006c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c72:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006c76:	e793      	b.n	8006ba0 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c78:	283e      	cmp	r0, #62	; 0x3e
 8006c7a:	d805      	bhi.n	8006c88 <USB_EPStartXfer+0x48c>
 8006c7c:	0843      	lsrs	r3, r0, #1
 8006c7e:	07c0      	lsls	r0, r0, #31
 8006c80:	bf48      	it	mi
 8006c82:	3301      	addmi	r3, #1
 8006c84:	029b      	lsls	r3, r3, #10
 8006c86:	e7bd      	b.n	8006c04 <USB_EPStartXfer+0x408>
 8006c88:	0946      	lsrs	r6, r0, #5
 8006c8a:	4b4a      	ldr	r3, [pc, #296]	; (8006db4 <USB_EPStartXfer+0x5b8>)
 8006c8c:	06c7      	lsls	r7, r0, #27
 8006c8e:	bf08      	it	eq
 8006c90:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006c94:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8006c98:	e7b4      	b.n	8006c04 <USB_EPStartXfer+0x408>
 8006c9a:	283e      	cmp	r0, #62	; 0x3e
 8006c9c:	d805      	bhi.n	8006caa <USB_EPStartXfer+0x4ae>
 8006c9e:	0842      	lsrs	r2, r0, #1
 8006ca0:	07c0      	lsls	r0, r0, #31
 8006ca2:	bf48      	it	mi
 8006ca4:	3201      	addmi	r2, #1
 8006ca6:	0292      	lsls	r2, r2, #10
 8006ca8:	e7c7      	b.n	8006c3a <USB_EPStartXfer+0x43e>
 8006caa:	0946      	lsrs	r6, r0, #5
 8006cac:	4a41      	ldr	r2, [pc, #260]	; (8006db4 <USB_EPStartXfer+0x5b8>)
 8006cae:	06c7      	lsls	r7, r0, #27
 8006cb0:	bf08      	it	eq
 8006cb2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006cb6:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006cba:	e7be      	b.n	8006c3a <USB_EPStartXfer+0x43e>
 8006cbc:	2a01      	cmp	r2, #1
 8006cbe:	d1be      	bne.n	8006c3e <USB_EPStartXfer+0x442>
 8006cc0:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	b291      	uxth	r1, r2
 8006cc8:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8006ccc:	440a      	add	r2, r1
 8006cce:	8a29      	ldrh	r1, [r5, #16]
 8006cd0:	52d1      	strh	r1, [r2, r3]
 8006cd2:	e7b4      	b.n	8006c3e <USB_EPStartXfer+0x442>
      else if (ep->type == EP_TYPE_ISOC)
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d16a      	bne.n	8006dae <USB_EPStartXfer+0x5b2>
        if (ep->xfer_len > ep->maxpacket)
 8006cd8:	69ab      	ldr	r3, [r5, #24]
 8006cda:	692a      	ldr	r2, [r5, #16]
 8006cdc:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8006cde:	bf94      	ite	ls
 8006ce0:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8006ce2:	1a98      	subhi	r0, r3, r2
 8006ce4:	61a8      	str	r0, [r5, #24]
 8006ce6:	bf88      	it	hi
 8006ce8:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006cea:	b9a9      	cbnz	r1, 8006d18 <USB_EPStartXfer+0x51c>
 8006cec:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006cf0:	7828      	ldrb	r0, [r5, #0]
 8006cf2:	b28a      	uxth	r2, r1
 8006cf4:	f204 4104 	addw	r1, r4, #1028	; 0x404
 8006cf8:	0100      	lsls	r0, r0, #4
 8006cfa:	4411      	add	r1, r2
 8006cfc:	bb33      	cbnz	r3, 8006d4c <USB_EPStartXfer+0x550>
 8006cfe:	5a42      	ldrh	r2, [r0, r1]
 8006d00:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006d04:	0412      	lsls	r2, r2, #16
 8006d06:	0c12      	lsrs	r2, r2, #16
 8006d08:	5242      	strh	r2, [r0, r1]
 8006d0a:	5a42      	ldrh	r2, [r0, r1]
 8006d0c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006d10:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006d14:	b292      	uxth	r2, r2
 8006d16:	5242      	strh	r2, [r0, r1]
 8006d18:	7869      	ldrb	r1, [r5, #1]
 8006d1a:	782a      	ldrb	r2, [r5, #0]
 8006d1c:	2900      	cmp	r1, #0
 8006d1e:	d139      	bne.n	8006d94 <USB_EPStartXfer+0x598>
 8006d20:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006d24:	0112      	lsls	r2, r2, #4
 8006d26:	b281      	uxth	r1, r0
 8006d28:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8006d2c:	4408      	add	r0, r1
 8006d2e:	b9f3      	cbnz	r3, 8006d6e <USB_EPStartXfer+0x572>
 8006d30:	5a83      	ldrh	r3, [r0, r2]
 8006d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	5283      	strh	r3, [r0, r2]
 8006d3c:	5a83      	ldrh	r3, [r0, r2]
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	5283      	strh	r3, [r0, r2]
 8006d4a:	e729      	b.n	8006ba0 <USB_EPStartXfer+0x3a4>
 8006d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006d4e:	d805      	bhi.n	8006d5c <USB_EPStartXfer+0x560>
 8006d50:	085a      	lsrs	r2, r3, #1
 8006d52:	07de      	lsls	r6, r3, #31
 8006d54:	bf48      	it	mi
 8006d56:	3201      	addmi	r2, #1
 8006d58:	0292      	lsls	r2, r2, #10
 8006d5a:	e7db      	b.n	8006d14 <USB_EPStartXfer+0x518>
 8006d5c:	095e      	lsrs	r6, r3, #5
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <USB_EPStartXfer+0x5b8>)
 8006d60:	06df      	lsls	r7, r3, #27
 8006d62:	bf08      	it	eq
 8006d64:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8006d68:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006d6c:	e7d2      	b.n	8006d14 <USB_EPStartXfer+0x518>
 8006d6e:	2b3e      	cmp	r3, #62	; 0x3e
 8006d70:	d807      	bhi.n	8006d82 <USB_EPStartXfer+0x586>
 8006d72:	0859      	lsrs	r1, r3, #1
 8006d74:	07de      	lsls	r6, r3, #31
 8006d76:	bf48      	it	mi
 8006d78:	3101      	addmi	r1, #1
 8006d7a:	0289      	lsls	r1, r1, #10
 8006d7c:	b289      	uxth	r1, r1
 8006d7e:	5281      	strh	r1, [r0, r2]
 8006d80:	e70e      	b.n	8006ba0 <USB_EPStartXfer+0x3a4>
 8006d82:	0959      	lsrs	r1, r3, #5
 8006d84:	06db      	lsls	r3, r3, #27
 8006d86:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <USB_EPStartXfer+0x5b8>)
 8006d88:	bf08      	it	eq
 8006d8a:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8006d8e:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8006d92:	e7d8      	b.n	8006d46 <USB_EPStartXfer+0x54a>
 8006d94:	2901      	cmp	r1, #1
 8006d96:	f47f af03 	bne.w	8006ba0 <USB_EPStartXfer+0x3a4>
 8006d9a:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8006d9e:	0112      	lsls	r2, r2, #4
 8006da0:	b288      	uxth	r0, r1
 8006da2:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8006da6:	4401      	add	r1, r0
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	528b      	strh	r3, [r1, r2]
 8006dac:	e6f8      	b.n	8006ba0 <USB_EPStartXfer+0x3a4>
        return HAL_ERROR;
 8006dae:	2001      	movs	r0, #1
 8006db0:	e554      	b.n	800685c <USB_EPStartXfer+0x60>
 8006db2:	bf00      	nop
 8006db4:	ffff8000 	.word	0xffff8000

08006db8 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006db8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8006dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dc2:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8006dc4:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dc6:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8006dc8:	462e      	mov	r6, r5
 8006dca:	3402      	adds	r4, #2
 8006dcc:	b936      	cbnz	r6, 8006ddc <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006dce:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8006dd0:	bf44      	itt	mi
 8006dd2:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dd6:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8006dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8006ddc:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8006de0:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8006de2:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006de4:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006de8:	0a00      	lsrs	r0, r0, #8
 8006dea:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8006dee:	e7ec      	b.n	8006dca <USB_ReadPMA+0x12>

08006df0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006df0:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8006df4:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006df6:	b16b      	cbz	r3, 8006e14 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006df8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006dfc:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8006e00:	28ff      	cmp	r0, #255	; 0xff
 8006e02:	d007      	beq.n	8006e14 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	4621      	mov	r1, r4
 8006e08:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8006e0c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006e0e:	23ff      	movs	r3, #255	; 0xff
 8006e10:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8006e14:	2000      	movs	r0, #0
 8006e16:	bd10      	pop	{r4, pc}

08006e18 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e18:	2343      	movs	r3, #67	; 0x43
 8006e1a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8006e1c:	4800      	ldr	r0, [pc, #0]	; (8006e20 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006e1e:	4770      	bx	lr
 8006e20:	20000044 	.word	0x20000044

08006e24 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006e24:	2343      	movs	r3, #67	; 0x43
 8006e26:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8006e28:	4800      	ldr	r0, [pc, #0]	; (8006e2c <USBD_CDC_GetHSCfgDesc+0x8>)
 8006e2a:	4770      	bx	lr
 8006e2c:	20000088 	.word	0x20000088

08006e30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006e30:	2343      	movs	r3, #67	; 0x43
 8006e32:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006e34:	4800      	ldr	r0, [pc, #0]	; (8006e38 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8006e36:	4770      	bx	lr
 8006e38:	200000d8 	.word	0x200000d8

08006e3c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006e3c:	230a      	movs	r3, #10
 8006e3e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8006e40:	4800      	ldr	r0, [pc, #0]	; (8006e44 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8006e42:	4770      	bx	lr
 8006e44:	200000cc 	.word	0x200000cc

08006e48 <USBD_CDC_DataOut>:
{
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e4c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e50:	f002 fb92 	bl	8009578 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8006e54:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e58:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 8006e5c:	b14b      	cbz	r3, 8006e72 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e5e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006e62:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8006e6c:	4798      	blx	r3
    return USBD_OK;
 8006e6e:	2000      	movs	r0, #0
}
 8006e70:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8006e72:	2002      	movs	r0, #2
 8006e74:	e7fc      	b.n	8006e70 <USBD_CDC_DataOut+0x28>

08006e76 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e76:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8006e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 8006e7c:	b1d2      	cbz	r2, 8006eb4 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006e7e:	2714      	movs	r7, #20
 8006e80:	fb07 0701 	mla	r7, r7, r1, r0
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	b18b      	cbz	r3, 8006eac <USBD_CDC_DataIn+0x36>
 8006e88:	2628      	movs	r6, #40	; 0x28
 8006e8a:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8006e8e:	fb06 4501 	mla	r5, r6, r1, r4
 8006e92:	6bad      	ldr	r5, [r5, #56]	; 0x38
 8006e94:	fbb3 f4f5 	udiv	r4, r3, r5
 8006e98:	fb05 3414 	mls	r4, r5, r4, r3
 8006e9c:	b934      	cbnz	r4, 8006eac <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 8006ea2:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006ea4:	f002 fb4c 	bl	8009540 <USBD_LL_Transmit>
    return USBD_OK;
 8006ea8:	4620      	mov	r0, r4
}
 8006eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8006eac:	2000      	movs	r0, #0
 8006eae:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8006eb2:	e7fa      	b.n	8006eaa <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8006eb4:	2002      	movs	r0, #2
 8006eb6:	e7f8      	b.n	8006eaa <USBD_CDC_DataIn+0x34>

08006eb8 <USBD_CDC_Setup>:
{
 8006eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8006ebc:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec0:	780a      	ldrb	r2, [r1, #0]
{
 8006ec2:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ec4:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8006ec8:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006eca:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8006ece:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8006ed2:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed6:	d028      	beq.n	8006f2a <USBD_CDC_Setup+0x72>
 8006ed8:	2c20      	cmp	r4, #32
 8006eda:	d142      	bne.n	8006f62 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8006edc:	88cc      	ldrh	r4, [r1, #6]
 8006ede:	784b      	ldrb	r3, [r1, #1]
 8006ee0:	b1e4      	cbz	r4, 8006f1c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8006ee2:	0612      	lsls	r2, r2, #24
 8006ee4:	d511      	bpl.n	8006f0a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ee6:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006eea:	4639      	mov	r1, r7
 8006eec:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	4622      	mov	r2, r4
 8006ef4:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ef6:	4639      	mov	r1, r7
 8006ef8:	4628      	mov	r0, r5
 8006efa:	88f2      	ldrh	r2, [r6, #6]
 8006efc:	f000 fc4b 	bl	8007796 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8006f00:	4644      	mov	r4, r8
}
 8006f02:	4620      	mov	r0, r4
 8006f04:	b003      	add	sp, #12
 8006f06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8006f0e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f12:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f16:	f000 fc53 	bl	80077c0 <USBD_CtlPrepareRx>
 8006f1a:	e7f1      	b.n	8006f00 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f1c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8006f20:	4618      	mov	r0, r3
 8006f22:	6895      	ldr	r5, [r2, #8]
 8006f24:	4622      	mov	r2, r4
 8006f26:	47a8      	blx	r5
 8006f28:	e7eb      	b.n	8006f02 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 8006f2a:	784b      	ldrb	r3, [r1, #1]
 8006f2c:	2b0a      	cmp	r3, #10
 8006f2e:	d00c      	beq.n	8006f4a <USBD_CDC_Setup+0x92>
 8006f30:	2b0b      	cmp	r3, #11
 8006f32:	d012      	beq.n	8006f5a <USBD_CDC_Setup+0xa2>
 8006f34:	b9ab      	cbnz	r3, 8006f62 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f36:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d111      	bne.n	8006f62 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f44:	f000 fc27 	bl	8007796 <USBD_CtlSendData>
 8006f48:	e7db      	b.n	8006f02 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f4a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d107      	bne.n	8006f62 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f52:	2201      	movs	r2, #1
 8006f54:	f10d 0105 	add.w	r1, sp, #5
 8006f58:	e7f4      	b.n	8006f44 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f5a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d0cf      	beq.n	8006f02 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	f000 fbef 	bl	8007748 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f6a:	2402      	movs	r4, #2
          break;
 8006f6c:	e7c9      	b.n	8006f02 <USBD_CDC_Setup+0x4a>

08006f6e <USBD_CDC_DeInit>:
{
 8006f6e:	b538      	push	{r3, r4, r5, lr}
 8006f70:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f72:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006f74:	2181      	movs	r1, #129	; 0x81
 8006f76:	f002 fa99 	bl	80094ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006f7e:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006f80:	f002 fa94 	bl	80094ac <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f84:	2182      	movs	r1, #130	; 0x82
 8006f86:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006f88:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006f8c:	f002 fa8e 	bl	80094ac <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8006f90:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006f94:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8006f96:	b14b      	cbz	r3, 8006fac <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006f98:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006fa0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8006fa4:	f002 faf0 	bl	8009588 <USBD_static_free>
    pdev->pClassData = NULL;
 8006fa8:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8006fac:	2000      	movs	r0, #0
 8006fae:	bd38      	pop	{r3, r4, r5, pc}

08006fb0 <USBD_CDC_Init>:
{
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb4:	7c03      	ldrb	r3, [r0, #16]
{
 8006fb6:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fb8:	bbbb      	cbnz	r3, 800702a <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fc2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006fc4:	f002 fa62 	bl	800948c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006fcc:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006fce:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f002 fa59 	bl	800948c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fda:	2308      	movs	r3, #8
 8006fdc:	2203      	movs	r2, #3
 8006fde:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006fe0:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f002 fa51 	bl	800948c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006fea:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006fee:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ff0:	f002 fac6 	bl	8009580 <USBD_static_malloc>
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8006ffa:	b340      	cbz	r0, 800704e <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8006ffc:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007000:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4798      	blx	r3
    hcdc->TxState = 0U;
 8007008:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800700c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007010:	7c26      	ldrb	r6, [r4, #16]
 8007012:	b99e      	cbnz	r6, 800703c <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007018:	4639      	mov	r1, r7
 800701a:	4620      	mov	r0, r4
 800701c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007020:	f002 fa9c 	bl	800955c <USBD_LL_PrepareReceive>
}
 8007024:	4630      	mov	r0, r6
 8007026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800702a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800702c:	2340      	movs	r3, #64	; 0x40
 800702e:	2202      	movs	r2, #2
 8007030:	2181      	movs	r1, #129	; 0x81
 8007032:	f002 fa2b 	bl	800948c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007036:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007038:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800703a:	e7c8      	b.n	8006fce <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800703c:	2340      	movs	r3, #64	; 0x40
 800703e:	4639      	mov	r1, r7
 8007040:	4620      	mov	r0, r4
 8007042:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007046:	f002 fa89 	bl	800955c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800704a:	4646      	mov	r6, r8
 800704c:	e7ea      	b.n	8007024 <USBD_CDC_Init+0x74>
    ret = 1U;
 800704e:	463e      	mov	r6, r7
 8007050:	e7e8      	b.n	8007024 <USBD_CDC_Init+0x74>

08007052 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8007052:	b119      	cbz	r1, 800705c <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8007054:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8007058:	2000      	movs	r0, #0
 800705a:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800705c:	2002      	movs	r0, #2
  }

  return ret;
}
 800705e:	4770      	bx	lr

08007060 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007060:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8007064:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8007066:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800706a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800706e:	4770      	bx	lr

08007070 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8007070:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 8007074:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8007076:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800707a:	4770      	bx	lr

0800707c <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800707c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8007080:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8007082:	b182      	cbz	r2, 80070a6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8007084:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8007088:	2301      	movs	r3, #1
 800708a:	b974      	cbnz	r4, 80070aa <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800708c:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007090:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007094:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007096:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007098:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800709c:	b29b      	uxth	r3, r3
 800709e:	f002 fa4f 	bl	8009540 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80070a2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80070a4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80070a6:	2002      	movs	r0, #2
 80070a8:	e7fc      	b.n	80070a4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80070aa:	4618      	mov	r0, r3
 80070ac:	e7fa      	b.n	80070a4 <USBD_CDC_TransmitPacket+0x28>

080070ae <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070ae:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80070b2:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80070b4:	b182      	cbz	r2, 80070d8 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b6:	7c04      	ldrb	r4, [r0, #16]
 80070b8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80070bc:	b934      	cbnz	r4, 80070cc <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80070be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c2:	2101      	movs	r1, #1
 80070c4:	f002 fa4a 	bl	800955c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 80070c8:	4620      	mov	r0, r4
 80070ca:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80070cc:	2340      	movs	r3, #64	; 0x40
 80070ce:	2101      	movs	r1, #1
 80070d0:	f002 fa44 	bl	800955c <USBD_LL_PrepareReceive>
    return USBD_OK;
 80070d4:	2400      	movs	r4, #0
 80070d6:	e7f7      	b.n	80070c8 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 80070d8:	2402      	movs	r4, #2
 80070da:	e7f5      	b.n	80070c8 <USBD_CDC_ReceivePacket+0x1a>

080070dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070dc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070de:	b180      	cbz	r0, 8007102 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80070e0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80070e4:	b113      	cbz	r3, 80070ec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80070ec:	b109      	cbz	r1, 80070f2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80070ee:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f2:	2301      	movs	r3, #1
  pdev->id = id;
 80070f4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070f6:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80070fa:	f002 f977 	bl	80093ec <USBD_LL_Init>

  return USBD_OK;
 80070fe:	2000      	movs	r0, #0
}
 8007100:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007102:	2002      	movs	r0, #2
 8007104:	e7fc      	b.n	8007100 <USBD_Init+0x24>

08007106 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007106:	b119      	cbz	r1, 8007110 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007108:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800710c:	2000      	movs	r0, #0
 800710e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007110:	2002      	movs	r0, #2
  }

  return status;
}
 8007112:	4770      	bx	lr

08007114 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007114:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007116:	f002 f9ab 	bl	8009470 <USBD_LL_Start>

  return USBD_OK;
}
 800711a:	2000      	movs	r0, #0
 800711c:	bd08      	pop	{r3, pc}

0800711e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800711e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007120:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007124:	b90b      	cbnz	r3, 800712a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007126:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007128:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4798      	blx	r3
 800712e:	2800      	cmp	r0, #0
 8007130:	d0fa      	beq.n	8007128 <USBD_SetClassConfig+0xa>
 8007132:	e7f8      	b.n	8007126 <USBD_SetClassConfig+0x8>

08007134 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007134:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007136:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4798      	blx	r3

  return USBD_OK;
}
 800713e:	2000      	movs	r0, #0
 8007140:	bd08      	pop	{r3, pc}

08007142 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007142:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007144:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8007148:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800714a:	4628      	mov	r0, r5
 800714c:	f000 fae8 	bl	8007720 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007150:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007152:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8007156:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800715a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800715e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8007162:	f001 031f 	and.w	r3, r1, #31
 8007166:	2b01      	cmp	r3, #1
 8007168:	d008      	beq.n	800717c <USBD_LL_SetupStage+0x3a>
 800716a:	2b02      	cmp	r3, #2
 800716c:	d00b      	beq.n	8007186 <USBD_LL_SetupStage+0x44>
 800716e:	b97b      	cbnz	r3, 8007190 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007170:	4629      	mov	r1, r5
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f8fc 	bl	8007370 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8007178:	2000      	movs	r0, #0
 800717a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800717c:	4629      	mov	r1, r5
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fa20 	bl	80075c4 <USBD_StdItfReq>
      break;
 8007184:	e7f8      	b.n	8007178 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8007186:	4629      	mov	r1, r5
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fa3f 	bl	800760c <USBD_StdEPReq>
      break;
 800718e:	e7f3      	b.n	8007178 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007190:	4620      	mov	r0, r4
 8007192:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8007196:	f002 f997 	bl	80094c8 <USBD_LL_StallEP>
      break;
 800719a:	e7ed      	b.n	8007178 <USBD_LL_SetupStage+0x36>

0800719c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071a2:	460d      	mov	r5, r1
 80071a4:	bb39      	cbnz	r1, 80071f6 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071a6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d11c      	bne.n	80071e8 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ae:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 80071b2:	4291      	cmp	r1, r2
 80071b4:	d90b      	bls.n	80071ce <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 80071b6:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 80071b8:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 80071ba:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80071be:	bf8c      	ite	hi
 80071c0:	b28a      	uxthhi	r2, r1
 80071c2:	b292      	uxthls	r2, r2
 80071c4:	4631      	mov	r1, r6
 80071c6:	f000 fb08 	bl	80077da <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80071ca:	4628      	mov	r0, r5
 80071cc:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80071ce:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	b123      	cbz	r3, 80071e0 <USBD_LL_DataOutStage+0x44>
 80071d6:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80071da:	2a03      	cmp	r2, #3
 80071dc:	d100      	bne.n	80071e0 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 80071de:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fb02 	bl	80077ea <USBD_CtlSendStatus>
 80071e6:	e7f0      	b.n	80071ca <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80071e8:	2b05      	cmp	r3, #5
 80071ea:	d1ee      	bne.n	80071ca <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 80071ec:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80071f0:	f002 f96a 	bl	80094c8 <USBD_LL_StallEP>
 80071f4:	e7e9      	b.n	80071ca <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 80071f6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	b133      	cbz	r3, 800720c <USBD_LL_DataOutStage+0x70>
 80071fe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007202:	2a03      	cmp	r2, #3
 8007204:	d102      	bne.n	800720c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8007206:	4798      	blx	r3
  return USBD_OK;
 8007208:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800720a:	e7de      	b.n	80071ca <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800720c:	2502      	movs	r5, #2
 800720e:	e7dc      	b.n	80071ca <USBD_LL_DataOutStage+0x2e>

08007210 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007216:	460d      	mov	r5, r1
 8007218:	2900      	cmp	r1, #0
 800721a:	d147      	bne.n	80072ac <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800721c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007220:	2b02      	cmp	r3, #2
 8007222:	d13c      	bne.n	800729e <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007224:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8007228:	429e      	cmp	r6, r3
 800722a:	d914      	bls.n	8007256 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800722c:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800722e:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8007230:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007232:	b29a      	uxth	r2, r3
 8007234:	f000 fabc 	bl	80077b0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007238:	462b      	mov	r3, r5
 800723a:	462a      	mov	r2, r5
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
 8007240:	f002 f98c 	bl	800955c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007244:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007248:	2b01      	cmp	r3, #1
 800724a:	d102      	bne.n	8007252 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8007252:	4628      	mov	r0, r5
 8007254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007256:	69c2      	ldr	r2, [r0, #28]
 8007258:	fbb2 f6f3 	udiv	r6, r2, r3
 800725c:	fb03 2616 	mls	r6, r3, r6, r2
 8007260:	b95e      	cbnz	r6, 800727a <USBD_LL_DataInStage+0x6a>
 8007262:	4293      	cmp	r3, r2
 8007264:	d809      	bhi.n	800727a <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8007266:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 800726a:	429a      	cmp	r2, r3
 800726c:	d205      	bcs.n	800727a <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800726e:	460a      	mov	r2, r1
 8007270:	f000 fa9e 	bl	80077b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007274:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8007278:	e7de      	b.n	8007238 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800727a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	b12b      	cbz	r3, 800728e <USBD_LL_DataInStage+0x7e>
 8007282:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8007286:	2a03      	cmp	r2, #3
 8007288:	d101      	bne.n	800728e <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 800728a:	4620      	mov	r0, r4
 800728c:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	4620      	mov	r0, r4
 8007292:	f002 f919 	bl	80094c8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fab2 	bl	8007800 <USBD_CtlReceiveStatus>
 800729c:	e7d2      	b.n	8007244 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800729e:	f033 0304 	bics.w	r3, r3, #4
 80072a2:	d1cf      	bne.n	8007244 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80072a4:	2180      	movs	r1, #128	; 0x80
 80072a6:	f002 f90f 	bl	80094c8 <USBD_LL_StallEP>
 80072aa:	e7cb      	b.n	8007244 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80072ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	b133      	cbz	r3, 80072c2 <USBD_LL_DataInStage+0xb2>
 80072b4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80072b8:	2a03      	cmp	r2, #3
 80072ba:	d102      	bne.n	80072c2 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 80072bc:	4798      	blx	r3
  return USBD_OK;
 80072be:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 80072c0:	e7c7      	b.n	8007252 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 80072c2:	2502      	movs	r5, #2
 80072c4:	e7c5      	b.n	8007252 <USBD_LL_DataInStage+0x42>

080072c6 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072c6:	2200      	movs	r2, #0
{
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072cc:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072ce:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072d0:	4611      	mov	r1, r2
 80072d2:	2340      	movs	r3, #64	; 0x40
 80072d4:	f002 f8da 	bl	800948c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072d8:	4633      	mov	r3, r6
 80072da:	2180      	movs	r1, #128	; 0x80
 80072dc:	2200      	movs	r2, #0
 80072de:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072e0:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072e4:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072e8:	f002 f8d0 	bl	800948c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80072ec:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80072ee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072f2:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072f4:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80072f6:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80072fa:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 80072fe:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007300:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8007304:	b123      	cbz	r3, 8007310 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007306:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800730a:	4620      	mov	r0, r4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007310:	2000      	movs	r0, #0
 8007312:	bd70      	pop	{r4, r5, r6, pc}

08007314 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007314:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007316:	2000      	movs	r0, #0
 8007318:	4770      	bx	lr

0800731a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800731a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800731e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007322:	2304      	movs	r3, #4
 8007324:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007328:	2000      	movs	r0, #0
 800732a:	4770      	bx	lr

0800732c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800732c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007330:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007332:	bf04      	itt	eq
 8007334:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8007338:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800733c:	2000      	movs	r0, #0
 800733e:	4770      	bx	lr

08007340 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007340:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007346:	2a03      	cmp	r2, #3
 8007348:	d104      	bne.n	8007354 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800734a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800734e:	69db      	ldr	r3, [r3, #28]
 8007350:	b103      	cbz	r3, 8007354 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007352:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8007354:	2000      	movs	r0, #0
 8007356:	bd08      	pop	{r3, pc}

08007358 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8007358:	b510      	push	{r4, lr}
 800735a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 800735c:	2180      	movs	r1, #128	; 0x80
 800735e:	f002 f8b3 	bl	80094c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007362:	4620      	mov	r0, r4
}
 8007364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007368:	2100      	movs	r1, #0
 800736a:	f002 b8ad 	b.w	80094c8 <USBD_LL_StallEP>
	...

08007370 <USBD_StdDevReq>:
{
 8007370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007372:	780b      	ldrb	r3, [r1, #0]
 8007374:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800737a:	2b20      	cmp	r3, #32
{
 800737c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737e:	d012      	beq.n	80073a6 <USBD_StdDevReq+0x36>
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d010      	beq.n	80073a6 <USBD_StdDevReq+0x36>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d151      	bne.n	800742c <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8007388:	784b      	ldrb	r3, [r1, #1]
 800738a:	2b09      	cmp	r3, #9
 800738c:	d84e      	bhi.n	800742c <USBD_StdDevReq+0xbc>
 800738e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007392:	00ee      	.short	0x00ee
 8007394:	004d010a 	.word	0x004d010a
 8007398:	004d0103 	.word	0x004d0103
 800739c:	00130087 	.word	0x00130087
 80073a0:	00d6004d 	.word	0x00d6004d
 80073a4:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80073a6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80073aa:	4629      	mov	r1, r5
 80073ac:	4620      	mov	r0, r4
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4798      	blx	r3
}
 80073b2:	2000      	movs	r0, #0
 80073b4:	b003      	add	sp, #12
 80073b6:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 80073b8:	2300      	movs	r3, #0
 80073ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80073be:	884b      	ldrh	r3, [r1, #2]
 80073c0:	0a1a      	lsrs	r2, r3, #8
 80073c2:	3a01      	subs	r2, #1
 80073c4:	2a06      	cmp	r2, #6
 80073c6:	d831      	bhi.n	800742c <USBD_StdDevReq+0xbc>
 80073c8:	e8df f002 	tbb	[pc, r2]
 80073cc:	30231604 	.word	0x30231604
 80073d0:	4830      	.short	0x4830
 80073d2:	52          	.byte	0x52
 80073d3:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073d4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80073d8:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073da:	7c20      	ldrb	r0, [r4, #16]
 80073dc:	f10d 0106 	add.w	r1, sp, #6
 80073e0:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 80073e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80073e6:	2a00      	cmp	r2, #0
 80073e8:	d056      	beq.n	8007498 <USBD_StdDevReq+0x128>
 80073ea:	88eb      	ldrh	r3, [r5, #6]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d14a      	bne.n	8007486 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f9fa 	bl	80077ea <USBD_CtlSendStatus>
 80073f6:	e7dc      	b.n	80073b2 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073f8:	7c02      	ldrb	r2, [r0, #16]
 80073fa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80073fe:	b932      	cbnz	r2, 800740e <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007402:	f10d 0006 	add.w	r0, sp, #6
 8007406:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007408:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800740a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800740c:	e7e9      	b.n	80073e2 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	e7f7      	b.n	8007402 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b05      	cmp	r3, #5
 8007416:	d809      	bhi.n	800742c <USBD_StdDevReq+0xbc>
 8007418:	e8df f003 	tbb	[pc, r3]
 800741c:	14100c03 	.word	0x14100c03
 8007420:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007422:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007426:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1d6      	bne.n	80073da <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800742c:	4620      	mov	r0, r4
 800742e:	f7ff ff93 	bl	8007358 <USBD_CtlError.constprop.0>
        break;
 8007432:	e7be      	b.n	80073b2 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007434:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	e7f5      	b.n	8007428 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800743c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	e7f1      	b.n	8007428 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007444:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	e7ed      	b.n	8007428 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800744c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	e7e9      	b.n	8007428 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007454:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	e7e5      	b.n	8007428 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745c:	7c03      	ldrb	r3, [r0, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e4      	bne.n	800742c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007462:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007466:	f10d 0006 	add.w	r0, sp, #6
 800746a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746c:	4798      	blx	r3
  if (err != 0U)
 800746e:	e7b8      	b.n	80073e2 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007470:	7c03      	ldrb	r3, [r0, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1da      	bne.n	800742c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007476:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800747a:	f10d 0006 	add.w	r0, sp, #6
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007482:	2307      	movs	r3, #7
 8007484:	e7c1      	b.n	800740a <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8007486:	429a      	cmp	r2, r3
 8007488:	bf28      	it	cs
 800748a:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800748c:	4601      	mov	r1, r0
 800748e:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8007490:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007494:	f000 f97f 	bl	8007796 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007498:	88eb      	ldrh	r3, [r5, #6]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d189      	bne.n	80073b2 <USBD_StdDevReq+0x42>
 800749e:	e7a7      	b.n	80073f0 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074a0:	888b      	ldrh	r3, [r1, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1c2      	bne.n	800742c <USBD_StdDevReq+0xbc>
 80074a6:	88cb      	ldrh	r3, [r1, #6]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1bf      	bne.n	800742c <USBD_StdDevReq+0xbc>
 80074ac:	884d      	ldrh	r5, [r1, #2]
 80074ae:	2d7f      	cmp	r5, #127	; 0x7f
 80074b0:	d8bc      	bhi.n	800742c <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d0b8      	beq.n	800742c <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ba:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 80074bc:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074c0:	f002 f830 	bl	8009524 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074c4:	4620      	mov	r0, r4
 80074c6:	f000 f990 	bl	80077ea <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80074ca:	b11d      	cbz	r5, 80074d4 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074cc:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80074ce:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80074d2:	e76e      	b.n	80073b2 <USBD_StdDevReq+0x42>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7fa      	b.n	80074ce <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 80074d8:	7889      	ldrb	r1, [r1, #2]
 80074da:	4d39      	ldr	r5, [pc, #228]	; (80075c0 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074dc:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80074de:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80074e0:	d8a4      	bhi.n	800742c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80074e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d008      	beq.n	80074fc <USBD_StdDevReq+0x18c>
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d015      	beq.n	800751a <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 80074ee:	f7ff ff33 	bl	8007358 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 80074f2:	4620      	mov	r0, r4
 80074f4:	7829      	ldrb	r1, [r5, #0]
 80074f6:	f7ff fe1d 	bl	8007134 <USBD_ClrClassConfig>
        break;
 80074fa:	e75a      	b.n	80073b2 <USBD_StdDevReq+0x42>
        if (cfgidx)
 80074fc:	2900      	cmp	r1, #0
 80074fe:	f43f af77 	beq.w	80073f0 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8007502:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007504:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007506:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007508:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800750c:	4620      	mov	r0, r4
 800750e:	f7ff fe06 	bl	800711e <USBD_SetClassConfig>
 8007512:	2802      	cmp	r0, #2
 8007514:	f47f af6c 	bne.w	80073f0 <USBD_StdDevReq+0x80>
 8007518:	e788      	b.n	800742c <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800751a:	b931      	cbnz	r1, 800752a <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800751c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800751e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007520:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007524:	f7ff fe06 	bl	8007134 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007528:	e762      	b.n	80073f0 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800752a:	6841      	ldr	r1, [r0, #4]
 800752c:	2901      	cmp	r1, #1
 800752e:	f43f af5f 	beq.w	80073f0 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007532:	b2c9      	uxtb	r1, r1
 8007534:	f7ff fdfe 	bl	8007134 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007538:	7829      	ldrb	r1, [r5, #0]
 800753a:	6061      	str	r1, [r4, #4]
 800753c:	e7e6      	b.n	800750c <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800753e:	88ca      	ldrh	r2, [r1, #6]
 8007540:	2a01      	cmp	r2, #1
 8007542:	f47f af73 	bne.w	800742c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007546:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800754a:	2b02      	cmp	r3, #2
 800754c:	d80a      	bhi.n	8007564 <USBD_StdDevReq+0x1f4>
 800754e:	2b00      	cmp	r3, #0
 8007550:	f43f af6c 	beq.w	800742c <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8007554:	4601      	mov	r1, r0
 8007556:	2300      	movs	r3, #0
 8007558:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800755c:	4620      	mov	r0, r4
 800755e:	f000 f91a 	bl	8007796 <USBD_CtlSendData>
      break;
 8007562:	e726      	b.n	80073b2 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8007564:	2b03      	cmp	r3, #3
 8007566:	f47f af61 	bne.w	800742c <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800756a:	1d01      	adds	r1, r0, #4
 800756c:	e7f6      	b.n	800755c <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800756e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007572:	3b01      	subs	r3, #1
 8007574:	2b02      	cmp	r3, #2
 8007576:	f63f af59 	bhi.w	800742c <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 800757a:	88cb      	ldrh	r3, [r1, #6]
 800757c:	2b02      	cmp	r3, #2
 800757e:	f47f af55 	bne.w	800742c <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007582:	2301      	movs	r3, #1
 8007584:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8007586:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 800758a:	b10b      	cbz	r3, 8007590 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800758c:	2303      	movs	r3, #3
 800758e:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007590:	2202      	movs	r2, #2
 8007592:	f104 010c 	add.w	r1, r4, #12
 8007596:	e7e1      	b.n	800755c <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007598:	884b      	ldrh	r3, [r1, #2]
 800759a:	2b01      	cmp	r3, #1
 800759c:	f47f af09 	bne.w	80073b2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80075a0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80075a4:	e724      	b.n	80073f0 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 80075a6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80075aa:	3b01      	subs	r3, #1
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f63f af3d 	bhi.w	800742c <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075b2:	884b      	ldrh	r3, [r1, #2]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	f47f aefc 	bne.w	80073b2 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e7f0      	b.n	80075a0 <USBD_StdDevReq+0x230>
 80075be:	bf00      	nop
 80075c0:	20000e30 	.word	0x20000e30

080075c4 <USBD_StdItfReq>:
{
 80075c4:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075c6:	780b      	ldrb	r3, [r1, #0]
{
 80075c8:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80075ce:	2a40      	cmp	r2, #64	; 0x40
{
 80075d0:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075d2:	d001      	beq.n	80075d8 <USBD_StdItfReq+0x14>
 80075d4:	065b      	lsls	r3, r3, #25
 80075d6:	d415      	bmi.n	8007604 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 80075d8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80075dc:	3b01      	subs	r3, #1
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d810      	bhi.n	8007604 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075e2:	792b      	ldrb	r3, [r5, #4]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d80d      	bhi.n	8007604 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80075e8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80075ec:	4629      	mov	r1, r5
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	4620      	mov	r0, r4
 80075f2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075f4:	88eb      	ldrh	r3, [r5, #6]
 80075f6:	b91b      	cbnz	r3, 8007600 <USBD_StdItfReq+0x3c>
 80075f8:	b910      	cbnz	r0, 8007600 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80075fa:	4620      	mov	r0, r4
 80075fc:	f000 f8f5 	bl	80077ea <USBD_CtlSendStatus>
}
 8007600:	2000      	movs	r0, #0
 8007602:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fea7 	bl	8007358 <USBD_CtlError.constprop.0>
          break;
 800760a:	e7f9      	b.n	8007600 <USBD_StdItfReq+0x3c>

0800760c <USBD_StdEPReq>:
{
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	780a      	ldrb	r2, [r1, #0]
 8007610:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007612:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007616:	2a20      	cmp	r2, #32
{
 8007618:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800761a:	d027      	beq.n	800766c <USBD_StdEPReq+0x60>
 800761c:	2a40      	cmp	r2, #64	; 0x40
 800761e:	d025      	beq.n	800766c <USBD_StdEPReq+0x60>
 8007620:	bb92      	cbnz	r2, 8007688 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8007622:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007624:	888d      	ldrh	r5, [r1, #4]
 8007626:	2a01      	cmp	r2, #1
 8007628:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 800762a:	d03d      	beq.n	80076a8 <USBD_StdEPReq+0x9c>
 800762c:	2a03      	cmp	r2, #3
 800762e:	d025      	beq.n	800767c <USBD_StdEPReq+0x70>
 8007630:	bb52      	cbnz	r2, 8007688 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8007632:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007636:	2b02      	cmp	r3, #2
 8007638:	d04d      	beq.n	80076d6 <USBD_StdEPReq+0xca>
 800763a:	2b03      	cmp	r3, #3
 800763c:	d124      	bne.n	8007688 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 800763e:	2214      	movs	r2, #20
 8007640:	f001 030f 	and.w	r3, r1, #15
 8007644:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007648:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 800764c:	d054      	beq.n	80076f8 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	b1d3      	cbz	r3, 8007688 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007652:	2314      	movs	r3, #20
 8007654:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007658:	fb05 3303 	mla	r3, r5, r3, r3
 800765c:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800765e:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007662:	d155      	bne.n	8007710 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8007664:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007666:	2202      	movs	r2, #2
 8007668:	4629      	mov	r1, r5
 800766a:	e041      	b.n	80076f0 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 800766c:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8007670:	4619      	mov	r1, r3
 8007672:	4620      	mov	r0, r4
 8007674:	6892      	ldr	r2, [r2, #8]
 8007676:	4790      	blx	r2
}
 8007678:	2000      	movs	r0, #0
 800767a:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 800767c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007680:	2a02      	cmp	r2, #2
 8007682:	d01f      	beq.n	80076c4 <USBD_StdEPReq+0xb8>
 8007684:	2a03      	cmp	r2, #3
 8007686:	d003      	beq.n	8007690 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8007688:	4620      	mov	r0, r4
 800768a:	f7ff fe65 	bl	8007358 <USBD_CtlError.constprop.0>
              break;
 800768e:	e7f3      	b.n	8007678 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007690:	885a      	ldrh	r2, [r3, #2]
 8007692:	b92a      	cbnz	r2, 80076a0 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8007694:	064a      	lsls	r2, r1, #25
 8007696:	d003      	beq.n	80076a0 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007698:	88db      	ldrh	r3, [r3, #6]
 800769a:	b90b      	cbnz	r3, 80076a0 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 800769c:	f001 ff14 	bl	80094c8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 80076a0:	4620      	mov	r0, r4
 80076a2:	f000 f8a2 	bl	80077ea <USBD_CtlSendStatus>
              break;
 80076a6:	e7e7      	b.n	8007678 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 80076a8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80076ac:	2a02      	cmp	r2, #2
 80076ae:	d009      	beq.n	80076c4 <USBD_StdEPReq+0xb8>
 80076b0:	2a03      	cmp	r2, #3
 80076b2:	d1e9      	bne.n	8007688 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076b4:	885b      	ldrh	r3, [r3, #2]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1de      	bne.n	8007678 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 80076ba:	064d      	lsls	r5, r1, #25
 80076bc:	d0f0      	beq.n	80076a0 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80076be:	f001 ff11 	bl	80094e4 <USBD_LL_ClearStallEP>
 80076c2:	e7ed      	b.n	80076a0 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c4:	064b      	lsls	r3, r1, #25
 80076c6:	d0df      	beq.n	8007688 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 80076c8:	f001 fefe 	bl	80094c8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80076cc:	2180      	movs	r1, #128	; 0x80
 80076ce:	4620      	mov	r0, r4
 80076d0:	f001 fefa 	bl	80094c8 <USBD_LL_StallEP>
 80076d4:	e7d0      	b.n	8007678 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076d6:	064a      	lsls	r2, r1, #25
 80076d8:	d1d6      	bne.n	8007688 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076da:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80076dc:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076e0:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076e4:	bf4c      	ite	mi
 80076e6:	f100 0114 	addmi.w	r1, r0, #20
 80076ea:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80076ee:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 f850 	bl	8007796 <USBD_CtlSendData>
              break;
 80076f6:	e7bf      	b.n	8007678 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076f8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d0c3      	beq.n	8007688 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007700:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007702:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007706:	fb03 0505 	mla	r5, r3, r5, r0
 800770a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800770e:	e7a6      	b.n	800765e <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007710:	4620      	mov	r0, r4
 8007712:	f001 fef5 	bl	8009500 <USBD_LL_IsStallEP>
 8007716:	b108      	cbz	r0, 800771c <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8007718:	2301      	movs	r3, #1
 800771a:	e7a3      	b.n	8007664 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 800771c:	6028      	str	r0, [r5, #0]
 800771e:	e7a2      	b.n	8007666 <USBD_StdEPReq+0x5a>

08007720 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007720:	780b      	ldrb	r3, [r1, #0]
 8007722:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007724:	784b      	ldrb	r3, [r1, #1]
 8007726:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007728:	78ca      	ldrb	r2, [r1, #3]
 800772a:	788b      	ldrb	r3, [r1, #2]
 800772c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007730:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007732:	794a      	ldrb	r2, [r1, #5]
 8007734:	790b      	ldrb	r3, [r1, #4]
 8007736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800773a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800773c:	79ca      	ldrb	r2, [r1, #7]
 800773e:	798b      	ldrb	r3, [r1, #6]
 8007740:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007744:	80c3      	strh	r3, [r0, #6]
}
 8007746:	4770      	bx	lr

08007748 <USBD_CtlError>:
{
 8007748:	b510      	push	{r4, lr}
 800774a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800774c:	2180      	movs	r1, #128	; 0x80
 800774e:	f001 febb 	bl	80094c8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007752:	4620      	mov	r0, r4
}
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007758:	2100      	movs	r1, #0
 800775a:	f001 beb5 	b.w	80094c8 <USBD_LL_StallEP>

0800775e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800775e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007760:	b188      	cbz	r0, 8007786 <USBD_GetString+0x28>
 8007762:	2500      	movs	r5, #0
 8007764:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007766:	462b      	mov	r3, r5
 8007768:	3501      	adds	r5, #1
 800776a:	5d44      	ldrb	r4, [r0, r5]
 800776c:	2c00      	cmp	r4, #0
 800776e:	d1fa      	bne.n	8007766 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007770:	b2db      	uxtb	r3, r3
 8007772:	3301      	adds	r3, #1
 8007774:	005b      	lsls	r3, r3, #1
 8007776:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007778:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800777a:	2303      	movs	r3, #3
 800777c:	704b      	strb	r3, [r1, #1]
 800777e:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007780:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007784:	b905      	cbnz	r5, 8007788 <USBD_GetString+0x2a>
}
 8007786:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	54cd      	strb	r5, [r1, r3]
 800778c:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 800778e:	3302      	adds	r3, #2
 8007790:	b2db      	uxtb	r3, r3
 8007792:	548c      	strb	r4, [r1, r2]
 8007794:	e7f4      	b.n	8007780 <USBD_GetString+0x22>

08007796 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007796:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007798:	2202      	movs	r2, #2
{
 800779a:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800779c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077a0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077a4:	460a      	mov	r2, r1
 80077a6:	2100      	movs	r1, #0
 80077a8:	f001 feca 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
}
 80077ac:	2000      	movs	r0, #0
 80077ae:	bd10      	pop	{r4, pc}

080077b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80077b0:	b508      	push	{r3, lr}
 80077b2:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077b4:	460a      	mov	r2, r1
 80077b6:	2100      	movs	r1, #0
 80077b8:	f001 fec2 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
}
 80077bc:	2000      	movs	r0, #0
 80077be:	bd08      	pop	{r3, pc}

080077c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80077c0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077c2:	2203      	movs	r2, #3
{
 80077c4:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 80077c6:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077ca:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ce:	460a      	mov	r2, r1
 80077d0:	2100      	movs	r1, #0
 80077d2:	f001 fec3 	bl	800955c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80077d6:	2000      	movs	r0, #0
 80077d8:	bd10      	pop	{r4, pc}

080077da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077da:	b508      	push	{r3, lr}
 80077dc:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077de:	460a      	mov	r2, r1
 80077e0:	2100      	movs	r1, #0
 80077e2:	f001 febb 	bl	800955c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80077e6:	2000      	movs	r0, #0
 80077e8:	bd08      	pop	{r3, pc}

080077ea <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077ea:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077ec:	2304      	movs	r3, #4
 80077ee:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077f2:	2300      	movs	r3, #0
 80077f4:	461a      	mov	r2, r3
 80077f6:	4619      	mov	r1, r3
 80077f8:	f001 fea2 	bl	8009540 <USBD_LL_Transmit>

  return USBD_OK;
}
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd08      	pop	{r3, pc}

08007800 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007800:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007802:	2305      	movs	r3, #5
 8007804:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007808:	2300      	movs	r3, #0
 800780a:	461a      	mov	r2, r3
 800780c:	4619      	mov	r1, r3
 800780e:	f001 fea5 	bl	800955c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007812:	2000      	movs	r0, #0
 8007814:	bd08      	pop	{r3, pc}

08007816 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007816:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007818:	f000 fd8c 	bl	8008334 <vTaskStartScheduler>
  
  return osOK;
}
 800781c:	2000      	movs	r0, #0
 800781e:	bd08      	pop	{r3, pc}

08007820 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007824:	6946      	ldr	r6, [r0, #20]
{
 8007826:	460b      	mov	r3, r1
 8007828:	e9d0 1000 	ldrd	r1, r0, [r0]
 800782c:	692a      	ldr	r2, [r5, #16]
 800782e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8007832:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007834:	b176      	cbz	r6, 8007854 <osThreadCreate+0x34>
 8007836:	69ad      	ldr	r5, [r5, #24]
 8007838:	b165      	cbz	r5, 8007854 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 800783a:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800783c:	bf0c      	ite	eq
 800783e:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007840:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007842:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007846:	9400      	str	r4, [sp, #0]
 8007848:	f000 fd10 	bl	800826c <xTaskCreateStatic>
 800784c:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800784e:	9805      	ldr	r0, [sp, #20]
}
 8007850:	b006      	add	sp, #24
 8007852:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007854:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007856:	bf0c      	ite	eq
 8007858:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 800785a:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800785c:	ad05      	add	r5, sp, #20
 800785e:	e9cd 4500 	strd	r4, r5, [sp]
 8007862:	b292      	uxth	r2, r2
 8007864:	f000 fd39 	bl	80082da <xTaskCreate>
 8007868:	2801      	cmp	r0, #1
 800786a:	d0f0      	beq.n	800784e <osThreadCreate+0x2e>
      return NULL;
 800786c:	2000      	movs	r0, #0
 800786e:	e7ef      	b.n	8007850 <osThreadCreate+0x30>

08007870 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007870:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007872:	2801      	cmp	r0, #1
 8007874:	bf38      	it	cc
 8007876:	2001      	movcc	r0, #1
 8007878:	f000 feb6 	bl	80085e8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800787c:	2000      	movs	r0, #0
 800787e:	bd08      	pop	{r3, pc}

08007880 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007880:	b513      	push	{r0, r1, r4, lr}
 8007882:	c811      	ldmia	r0, {r0, r4}
 8007884:	3901      	subs	r1, #1
 8007886:	4613      	mov	r3, r2
 8007888:	424a      	negs	r2, r1
 800788a:	414a      	adcs	r2, r1
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800788c:	b13c      	cbz	r4, 800789e <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 800788e:	e9cd 0400 	strd	r0, r4, [sp]
 8007892:	2101      	movs	r1, #1
 8007894:	4805      	ldr	r0, [pc, #20]	; (80078ac <osTimerCreate+0x2c>)
 8007896:	f001 f88a 	bl	80089ae <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 800789a:	b002      	add	sp, #8
 800789c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 800789e:	9000      	str	r0, [sp, #0]
 80078a0:	2101      	movs	r1, #1
 80078a2:	4802      	ldr	r0, [pc, #8]	; (80078ac <osTimerCreate+0x2c>)
 80078a4:	f001 f85c 	bl	8008960 <xTimerCreate>
 80078a8:	e7f7      	b.n	800789a <osTimerCreate+0x1a>
 80078aa:	bf00      	nop
 80078ac:	0800c4df 	.word	0x0800c4df

080078b0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80078b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80078b2:	2400      	movs	r4, #0
 80078b4:	2901      	cmp	r1, #1
 80078b6:	460a      	mov	r2, r1
 80078b8:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 80078ba:	bf38      	it	cc
 80078bc:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078be:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 80078c2:	b1a3      	cbz	r3, 80078ee <osTimerStart+0x3e>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80078c4:	2109      	movs	r1, #9
 80078c6:	9400      	str	r4, [sp, #0]
 80078c8:	ab03      	add	r3, sp, #12
 80078ca:	f001 f8ad 	bl	8008a28 <xTimerGenericCommand>
 80078ce:	2801      	cmp	r0, #1
 80078d0:	d113      	bne.n	80078fa <osTimerStart+0x4a>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80078d2:	9b03      	ldr	r3, [sp, #12]
 80078d4:	b913      	cbnz	r3, 80078dc <osTimerStart+0x2c>
  osStatus result = osOK;
 80078d6:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 80078d8:	b004      	add	sp, #16
 80078da:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 80078dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e0:	4b07      	ldr	r3, [pc, #28]	; (8007900 <osTimerStart+0x50>)
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	e7f3      	b.n	80078d6 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80078ee:	2104      	movs	r1, #4
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	f001 f899 	bl	8008a28 <xTimerGenericCommand>
 80078f6:	2801      	cmp	r0, #1
 80078f8:	d0ed      	beq.n	80078d6 <osTimerStart+0x26>
      result = osErrorOS;
 80078fa:	20ff      	movs	r0, #255	; 0xff
  return result;
 80078fc:	e7ec      	b.n	80078d8 <osTimerStart+0x28>
 80078fe:	bf00      	nop
 8007900:	e000ed04 	.word	0xe000ed04

08007904 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007904:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007908:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800790c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007910:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007912:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007918:	4770      	bx	lr

0800791a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800791e:	4770      	bx	lr

08007920 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007920:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007922:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007924:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007926:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800792c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800792e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007930:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007932:	3301      	adds	r3, #1
 8007934:	6003      	str	r3, [r0, #0]
}
 8007936:	4770      	bx	lr

08007938 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007938:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800793a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800793c:	1c63      	adds	r3, r4, #1
 800793e:	d10a      	bne.n	8007956 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007940:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007946:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007948:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800794a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800794c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800794e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007950:	3301      	adds	r3, #1
 8007952:	6003      	str	r3, [r0, #0]
}
 8007954:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007956:	f100 0208 	add.w	r2, r0, #8
 800795a:	4613      	mov	r3, r2
 800795c:	6852      	ldr	r2, [r2, #4]
 800795e:	6815      	ldr	r5, [r2, #0]
 8007960:	42a5      	cmp	r5, r4
 8007962:	d9fa      	bls.n	800795a <vListInsert+0x22>
 8007964:	e7ed      	b.n	8007942 <vListInsert+0xa>

08007966 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007966:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007968:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800796c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800796e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007970:	6859      	ldr	r1, [r3, #4]
 8007972:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007974:	bf08      	it	eq
 8007976:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007978:	2200      	movs	r2, #0
 800797a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	3a01      	subs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007982:	6818      	ldr	r0, [r3, #0]
}
 8007984:	4770      	bx	lr

08007986 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007986:	b510      	push	{r4, lr}
 8007988:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800798a:	f001 f9fb 	bl	8008d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800798e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007990:	f001 fa1a 	bl	8008dc8 <vPortExitCritical>

	return xReturn;
}
 8007994:	fab4 f084 	clz	r0, r4
 8007998:	0940      	lsrs	r0, r0, #5
 800799a:	bd10      	pop	{r4, pc}

0800799c <prvCopyDataToQueue>:
{
 800799c:	b570      	push	{r4, r5, r6, lr}
 800799e:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80079a2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079a6:	b162      	cbz	r2, 80079c2 <prvCopyDataToQueue+0x26>
	else if( xPosition == queueSEND_TO_BACK )
 80079a8:	b97e      	cbnz	r6, 80079ca <prvCopyDataToQueue+0x2e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80079aa:	6880      	ldr	r0, [r0, #8]
 80079ac:	f001 fe18 	bl	80095e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079b0:	68a3      	ldr	r3, [r4, #8]
 80079b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80079b4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079b6:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80079b8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d301      	bcc.n	80079c2 <prvCopyDataToQueue+0x26>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079c2:	3501      	adds	r5, #1
}
 80079c4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079c6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ca:	68c0      	ldr	r0, [r0, #12]
 80079cc:	f001 fe08 	bl	80095e0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80079d2:	68e3      	ldr	r3, [r4, #12]
 80079d4:	4251      	negs	r1, r2
 80079d6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d8:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80079da:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079dc:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80079de:	bf3e      	ittt	cc
 80079e0:	6863      	ldrcc	r3, [r4, #4]
 80079e2:	185b      	addcc	r3, r3, r1
 80079e4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80079e6:	2e02      	cmp	r6, #2
 80079e8:	d1eb      	bne.n	80079c2 <prvCopyDataToQueue+0x26>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ea:	2d00      	cmp	r5, #0
 80079ec:	d0e9      	beq.n	80079c2 <prvCopyDataToQueue+0x26>
				--uxMessagesWaiting;
 80079ee:	3d01      	subs	r5, #1
 80079f0:	e7e7      	b.n	80079c2 <prvCopyDataToQueue+0x26>

080079f2 <prvCopyDataFromQueue>:
{
 80079f2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80079f6:	4608      	mov	r0, r1
 80079f8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079fa:	b162      	cbz	r2, 8007a16 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80079fc:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80079fe:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a00:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a02:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a04:	bf28      	it	cs
 8007a06:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007a08:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007a0a:	bf28      	it	cs
 8007a0c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a0e:	68d9      	ldr	r1, [r3, #12]
}
 8007a10:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007a12:	f001 bde5 	b.w	80095e0 <memcpy>
}
 8007a16:	bc10      	pop	{r4}
 8007a18:	4770      	bx	lr

08007a1a <prvUnlockQueue>:
{
 8007a1a:	b570      	push	{r4, r5, r6, lr}
 8007a1c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007a1e:	f001 f9b1 	bl	8008d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007a22:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a26:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007a2a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	dc14      	bgt.n	8007a5a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007a30:	23ff      	movs	r3, #255	; 0xff
 8007a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007a36:	f001 f9c7 	bl	8008dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007a3a:	f001 f9a3 	bl	8008d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007a3e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a42:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007a46:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a48:	2d00      	cmp	r5, #0
 8007a4a:	dc12      	bgt.n	8007a72 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007a4c:	23ff      	movs	r3, #255	; 0xff
 8007a4e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007a56:	f001 b9b7 	b.w	8008dc8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0e7      	beq.n	8007a30 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 fe59 	bl	8008718 <xTaskRemoveFromEventList>
 8007a66:	b108      	cbz	r0, 8007a6c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007a68:	f000 fee0 	bl	800882c <vTaskMissedYield>
			--cTxLock;
 8007a6c:	3d01      	subs	r5, #1
 8007a6e:	b26d      	sxtb	r5, r5
 8007a70:	e7dc      	b.n	8007a2c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0e9      	beq.n	8007a4c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f000 fe4d 	bl	8008718 <xTaskRemoveFromEventList>
 8007a7e:	b108      	cbz	r0, 8007a84 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007a80:	f000 fed4 	bl	800882c <vTaskMissedYield>
				--cRxLock;
 8007a84:	3d01      	subs	r5, #1
 8007a86:	b26d      	sxtb	r5, r5
 8007a88:	e7de      	b.n	8007a48 <prvUnlockQueue+0x2e>
	...

08007a8c <xQueueGenericReset>:
{
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007a90:	4604      	mov	r4, r0
 8007a92:	b940      	cbnz	r0, 8007aa6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	e7fe      	b.n	8007aa4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007aa6:	f001 f96d 	bl	8008d84 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007aaa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8007aae:	434b      	muls	r3, r1
 8007ab0:	6822      	ldr	r2, [r4, #0]
 8007ab2:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007ab4:	1a5b      	subs	r3, r3, r1
 8007ab6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007ab8:	6060      	str	r0, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007aba:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007abc:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007abe:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ac0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ac2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ac4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ac8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007acc:	b995      	cbnz	r5, 8007af4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	b163      	cbz	r3, 8007aec <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad2:	f104 0010 	add.w	r0, r4, #16
 8007ad6:	f000 fe1f 	bl	8008718 <xTaskRemoveFromEventList>
 8007ada:	b138      	cbz	r0, 8007aec <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8007adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <xQueueGenericReset+0x7c>)
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007aec:	f001 f96c 	bl	8008dc8 <vPortExitCritical>
}
 8007af0:	2001      	movs	r0, #1
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007af4:	f104 0010 	add.w	r0, r4, #16
 8007af8:	f7ff ff04 	bl	8007904 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007b00:	f7ff ff00 	bl	8007904 <vListInitialise>
 8007b04:	e7f2      	b.n	8007aec <xQueueGenericReset+0x60>
 8007b06:	bf00      	nop
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <xQueueGenericCreateStatic>:
	{
 8007b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b0e:	460d      	mov	r5, r1
 8007b10:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b12:	b940      	cbnz	r0, 8007b26 <xQueueGenericCreateStatic+0x1a>
 8007b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	e7fe      	b.n	8007b24 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007b26:	b943      	cbnz	r3, 8007b3a <xQueueGenericCreateStatic+0x2e>
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	e7fe      	b.n	8007b38 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b3a:	b14a      	cbz	r2, 8007b50 <xQueueGenericCreateStatic+0x44>
 8007b3c:	b991      	cbnz	r1, 8007b64 <xQueueGenericCreateStatic+0x58>
 8007b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	e7fe      	b.n	8007b4e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b50:	b141      	cbz	r1, 8007b64 <xQueueGenericCreateStatic+0x58>
 8007b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	e7fe      	b.n	8007b62 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b64:	2348      	movs	r3, #72	; 0x48
 8007b66:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	2b48      	cmp	r3, #72	; 0x48
 8007b6c:	d008      	beq.n	8007b80 <xQueueGenericCreateStatic+0x74>
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	e7fe      	b.n	8007b7e <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b80:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	bf08      	it	eq
 8007b86:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007b88:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b8c:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b90:	4620      	mov	r0, r4
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	f7ff ff7a 	bl	8007a8c <xQueueGenericReset>
	}
 8007b98:	4620      	mov	r0, r4
 8007b9a:	b003      	add	sp, #12
 8007b9c:	bd30      	pop	{r4, r5, pc}
	...

08007ba0 <xQueueGenericSend>:
{
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	4688      	mov	r8, r1
 8007ba6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007ba8:	4604      	mov	r4, r0
{
 8007baa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007bac:	b940      	cbnz	r0, 8007bc0 <xQueueGenericSend+0x20>
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	e7fe      	b.n	8007bbe <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc0:	b951      	cbnz	r1, 8007bd8 <xQueueGenericSend+0x38>
 8007bc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007bc4:	b143      	cbz	r3, 8007bd8 <xQueueGenericSend+0x38>
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	e7fe      	b.n	8007bd6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bd8:	2f02      	cmp	r7, #2
 8007bda:	d10b      	bne.n	8007bf4 <xQueueGenericSend+0x54>
 8007bdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d008      	beq.n	8007bf4 <xQueueGenericSend+0x54>
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bf4:	f000 fe20 	bl	8008838 <xTaskGetSchedulerState>
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	b950      	cbnz	r0, 8007c12 <xQueueGenericSend+0x72>
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	b14b      	cbz	r3, 8007c14 <xQueueGenericSend+0x74>
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	e7fe      	b.n	8007c10 <xQueueGenericSend+0x70>
 8007c12:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007c14:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8007c18:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007d00 <xQueueGenericSend+0x160>
 8007c1c:	e037      	b.n	8007c8e <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c1e:	9d01      	ldr	r5, [sp, #4]
 8007c20:	b91d      	cbnz	r5, 8007c2a <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8007c22:	f001 f8d1 	bl	8008dc8 <vPortExitCritical>
			return errQUEUE_FULL;
 8007c26:	2000      	movs	r0, #0
 8007c28:	e050      	b.n	8007ccc <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8007c2a:	b916      	cbnz	r6, 8007c32 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c2c:	a802      	add	r0, sp, #8
 8007c2e:	f000 fdb5 	bl	800879c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007c32:	f001 f8c9 	bl	8008dc8 <vPortExitCritical>
		vTaskSuspendAll();
 8007c36:	f000 fbc1 	bl	80083bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c3a:	f001 f8a3 	bl	8008d84 <vPortEnterCritical>
 8007c3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007c42:	2bff      	cmp	r3, #255	; 0xff
 8007c44:	bf08      	it	eq
 8007c46:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8007c4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007c4e:	2bff      	cmp	r3, #255	; 0xff
 8007c50:	bf08      	it	eq
 8007c52:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8007c56:	f001 f8b7 	bl	8008dc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c5a:	a901      	add	r1, sp, #4
 8007c5c:	a802      	add	r0, sp, #8
 8007c5e:	f000 fda9 	bl	80087b4 <xTaskCheckForTimeOut>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d146      	bne.n	8007cf4 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c66:	f001 f88d 	bl	8008d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d12f      	bne.n	8007cd2 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007c72:	f001 f8a9 	bl	8008dc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c76:	9901      	ldr	r1, [sp, #4]
 8007c78:	f104 0010 	add.w	r0, r4, #16
 8007c7c:	f000 fd12 	bl	80086a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7ff feca 	bl	8007a1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c86:	f000 fc39 	bl	80084fc <xTaskResumeAll>
 8007c8a:	b350      	cbz	r0, 8007ce2 <xQueueGenericSend+0x142>
 8007c8c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007c8e:	f001 f879 	bl	8008d84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d301      	bcc.n	8007c9e <xQueueGenericSend+0xfe>
 8007c9a:	2f02      	cmp	r7, #2
 8007c9c:	d1bf      	bne.n	8007c1e <xQueueGenericSend+0x7e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c9e:	463a      	mov	r2, r7
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f7ff fe7a 	bl	800799c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007caa:	b11b      	cbz	r3, 8007cb4 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007cb0:	f000 fd32 	bl	8008718 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8007cb4:	b138      	cbz	r0, 8007cc6 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8007cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <xQueueGenericSend+0x160>)
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007cc6:	f001 f87f 	bl	8008dc8 <vPortExitCritical>
				return pdPASS;
 8007cca:	2001      	movs	r0, #1
}
 8007ccc:	b004      	add	sp, #16
 8007cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8007cd2:	f001 f879 	bl	8008dc8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fe9f 	bl	8007a1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cdc:	f000 fc0e 	bl	80084fc <xTaskResumeAll>
 8007ce0:	e7d4      	b.n	8007c8c <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8007ce2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ce6:	f8ca 3000 	str.w	r3, [sl]
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	e7cb      	b.n	8007c8c <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff fe90 	bl	8007a1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cfa:	f000 fbff 	bl	80084fc <xTaskResumeAll>
 8007cfe:	e792      	b.n	8007c26 <xQueueGenericSend+0x86>
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <xQueueGenericSendFromISR>:
{
 8007d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d08:	4689      	mov	r9, r1
 8007d0a:	4690      	mov	r8, r2
 8007d0c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007d0e:	4604      	mov	r4, r0
 8007d10:	b940      	cbnz	r0, 8007d24 <xQueueGenericSendFromISR+0x20>
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	e7fe      	b.n	8007d22 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d24:	b951      	cbnz	r1, 8007d3c <xQueueGenericSendFromISR+0x38>
 8007d26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007d28:	b143      	cbz	r3, 8007d3c <xQueueGenericSendFromISR+0x38>
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	e7fe      	b.n	8007d3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d3c:	2f02      	cmp	r7, #2
 8007d3e:	d10b      	bne.n	8007d58 <xQueueGenericSendFromISR+0x54>
 8007d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d008      	beq.n	8007d58 <xQueueGenericSendFromISR+0x54>
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	e7fe      	b.n	8007d56 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d58:	f001 f8f4 	bl	8008f44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d5c:	f3ef 8611 	mrs	r6, BASEPRI
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007d72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d301      	bcc.n	8007d7c <xQueueGenericSendFromISR+0x78>
 8007d78:	2f02      	cmp	r7, #2
 8007d7a:	d122      	bne.n	8007dc2 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d7c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d80:	463a      	mov	r2, r7
 8007d82:	4649      	mov	r1, r9
 8007d84:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d86:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d88:	f7ff fe08 	bl	800799c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007d8c:	1c6b      	adds	r3, r5, #1
 8007d8e:	d113      	bne.n	8007db8 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d92:	b90b      	cbnz	r3, 8007d98 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 8007d94:	2001      	movs	r0, #1
 8007d96:	e00b      	b.n	8007db0 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007d9c:	f000 fcbc 	bl	8008718 <xTaskRemoveFromEventList>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d0f7      	beq.n	8007d94 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 8007da4:	f1b8 0f00 	cmp.w	r8, #0
 8007da8:	d0f4      	beq.n	8007d94 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007daa:	2001      	movs	r0, #1
 8007dac:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007db0:	f386 8811 	msr	BASEPRI, r6
}
 8007db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007db8:	3501      	adds	r5, #1
 8007dba:	b26d      	sxtb	r5, r5
 8007dbc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8007dc0:	e7e8      	b.n	8007d94 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7f4      	b.n	8007db0 <xQueueGenericSendFromISR+0xac>
	...

08007dc8 <xQueueReceive>:
{
 8007dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007dcc:	b085      	sub	sp, #20
 8007dce:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8007dd0:	4604      	mov	r4, r0
{
 8007dd2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007dd4:	b940      	cbnz	r0, 8007de8 <xQueueReceive+0x20>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	e7fe      	b.n	8007de6 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de8:	b951      	cbnz	r1, 8007e00 <xQueueReceive+0x38>
 8007dea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8007dec:	b143      	cbz	r3, 8007e00 <xQueueReceive+0x38>
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	e7fe      	b.n	8007dfe <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e00:	f000 fd1a 	bl	8008838 <xTaskGetSchedulerState>
 8007e04:	4606      	mov	r6, r0
 8007e06:	b950      	cbnz	r0, 8007e1e <xQueueReceive+0x56>
 8007e08:	9b01      	ldr	r3, [sp, #4]
 8007e0a:	b14b      	cbz	r3, 8007e20 <xQueueReceive+0x58>
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	e7fe      	b.n	8007e1c <xQueueReceive+0x54>
 8007e1e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8007e20:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8007e24:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8007f04 <xQueueReceive+0x13c>
 8007e28:	e03b      	b.n	8007ea2 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e2a:	9d01      	ldr	r5, [sp, #4]
 8007e2c:	b91d      	cbnz	r5, 8007e36 <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8007e2e:	f000 ffcb 	bl	8008dc8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8007e32:	2000      	movs	r0, #0
 8007e34:	e052      	b.n	8007edc <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8007e36:	b916      	cbnz	r6, 8007e3e <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e38:	a802      	add	r0, sp, #8
 8007e3a:	f000 fcaf 	bl	800879c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007e3e:	f000 ffc3 	bl	8008dc8 <vPortExitCritical>
		vTaskSuspendAll();
 8007e42:	f000 fabb 	bl	80083bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e46:	f000 ff9d 	bl	8008d84 <vPortEnterCritical>
 8007e4a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007e4e:	2bff      	cmp	r3, #255	; 0xff
 8007e50:	bf08      	it	eq
 8007e52:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8007e56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007e5a:	2bff      	cmp	r3, #255	; 0xff
 8007e5c:	bf08      	it	eq
 8007e5e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8007e62:	f000 ffb1 	bl	8008dc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e66:	a901      	add	r1, sp, #4
 8007e68:	a802      	add	r0, sp, #8
 8007e6a:	f000 fca3 	bl	80087b4 <xTaskCheckForTimeOut>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d13d      	bne.n	8007eee <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e72:	4620      	mov	r0, r4
 8007e74:	f7ff fd87 	bl	8007986 <prvIsQueueEmpty>
 8007e78:	b398      	cbz	r0, 8007ee2 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e7a:	9901      	ldr	r1, [sp, #4]
 8007e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007e80:	f000 fc10 	bl	80086a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e84:	4620      	mov	r0, r4
 8007e86:	f7ff fdc8 	bl	8007a1a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e8a:	f000 fb37 	bl	80084fc <xTaskResumeAll>
 8007e8e:	b938      	cbnz	r0, 8007ea0 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8007e90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e94:	f8c9 3000 	str.w	r3, [r9]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8007ea2:	f000 ff6f 	bl	8008d84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ea6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ea8:	2d00      	cmp	r5, #0
 8007eaa:	d0be      	beq.n	8007e2a <xQueueReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eac:	4639      	mov	r1, r7
 8007eae:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eb0:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007eb2:	f7ff fd9e 	bl	80079f2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007eb6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	b163      	cbz	r3, 8007ed6 <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ebc:	f104 0010 	add.w	r0, r4, #16
 8007ec0:	f000 fc2a 	bl	8008718 <xTaskRemoveFromEventList>
 8007ec4:	b138      	cbz	r0, 8007ed6 <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8007ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eca:	4b0e      	ldr	r3, [pc, #56]	; (8007f04 <xQueueReceive+0x13c>)
 8007ecc:	601a      	str	r2, [r3, #0]
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007ed6:	f000 ff77 	bl	8008dc8 <vPortExitCritical>
				return pdPASS;
 8007eda:	2001      	movs	r0, #1
}
 8007edc:	b005      	add	sp, #20
 8007ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff fd99 	bl	8007a1a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ee8:	f000 fb08 	bl	80084fc <xTaskResumeAll>
 8007eec:	e7d8      	b.n	8007ea0 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7ff fd93 	bl	8007a1a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ef4:	f000 fb02 	bl	80084fc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7ff fd44 	bl	8007986 <prvIsQueueEmpty>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	d0ce      	beq.n	8007ea0 <xQueueReceive+0xd8>
 8007f02:	e796      	b.n	8007e32 <xQueueReceive+0x6a>
 8007f04:	e000ed04 	.word	0xe000ed04

08007f08 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f08:	2300      	movs	r3, #0
	{
 8007f0a:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f0c:	4a06      	ldr	r2, [pc, #24]	; (8007f28 <vQueueAddToRegistry+0x20>)
 8007f0e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007f12:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007f16:	b91d      	cbnz	r5, 8007f20 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f1c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f1e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f20:	3301      	adds	r3, #1
 8007f22:	2b08      	cmp	r3, #8
 8007f24:	d1f3      	bne.n	8007f0e <vQueueAddToRegistry+0x6>
 8007f26:	e7fa      	b.n	8007f1e <vQueueAddToRegistry+0x16>
 8007f28:	20002430 	.word	0x20002430

08007f2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f2c:	b570      	push	{r4, r5, r6, lr}
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f34:	f000 ff26 	bl	8008d84 <vPortEnterCritical>
 8007f38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007f3c:	2bff      	cmp	r3, #255	; 0xff
 8007f3e:	bf04      	itt	eq
 8007f40:	2300      	moveq	r3, #0
 8007f42:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8007f46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007f4a:	2bff      	cmp	r3, #255	; 0xff
 8007f4c:	bf04      	itt	eq
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8007f54:	f000 ff38 	bl	8008dc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f5a:	b92b      	cbnz	r3, 8007f68 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f64:	f000 fbb8 	bl	80086d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f68:	4620      	mov	r0, r4
	}
 8007f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007f6e:	f7ff bd54 	b.w	8007a1a <prvUnlockQueue>
	...

08007f74 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f78:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f7a:	f000 ff03 	bl	8008d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f7e:	4b34      	ldr	r3, [pc, #208]	; (8008050 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8007f80:	4d34      	ldr	r5, [pc, #208]	; (8008054 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4e34      	ldr	r6, [pc, #208]	; (8008058 <prvAddNewTaskToReadyList+0xe4>)
 8007f86:	3201      	adds	r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007f8a:	682a      	ldr	r2, [r5, #0]
 8007f8c:	2a00      	cmp	r2, #0
 8007f8e:	d154      	bne.n	800803a <prvAddNewTaskToReadyList+0xc6>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f90:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d12b      	bne.n	8007ff0 <prvAddNewTaskToReadyList+0x7c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f98:	4830      	ldr	r0, [pc, #192]	; (800805c <prvAddNewTaskToReadyList+0xe8>)
 8007f9a:	f7ff fcb3 	bl	8007904 <vListInitialise>
 8007f9e:	4830      	ldr	r0, [pc, #192]	; (8008060 <prvAddNewTaskToReadyList+0xec>)
 8007fa0:	f7ff fcb0 	bl	8007904 <vListInitialise>
 8007fa4:	482f      	ldr	r0, [pc, #188]	; (8008064 <prvAddNewTaskToReadyList+0xf0>)
 8007fa6:	f7ff fcad 	bl	8007904 <vListInitialise>
 8007faa:	482f      	ldr	r0, [pc, #188]	; (8008068 <prvAddNewTaskToReadyList+0xf4>)
 8007fac:	f7ff fcaa 	bl	8007904 <vListInitialise>
 8007fb0:	482e      	ldr	r0, [pc, #184]	; (800806c <prvAddNewTaskToReadyList+0xf8>)
 8007fb2:	f7ff fca7 	bl	8007904 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800809c <prvAddNewTaskToReadyList+0x128>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fba:	482d      	ldr	r0, [pc, #180]	; (8008070 <prvAddNewTaskToReadyList+0xfc>)
 8007fbc:	f7ff fca2 	bl	8007904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fc0:	4f2c      	ldr	r7, [pc, #176]	; (8008074 <prvAddNewTaskToReadyList+0x100>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fc2:	482d      	ldr	r0, [pc, #180]	; (8008078 <prvAddNewTaskToReadyList+0x104>)
 8007fc4:	f7ff fc9e 	bl	8007904 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8007fc8:	4640      	mov	r0, r8
 8007fca:	f7ff fc9b 	bl	8007904 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fce:	4638      	mov	r0, r7
 8007fd0:	f7ff fc98 	bl	8007904 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fd4:	4829      	ldr	r0, [pc, #164]	; (800807c <prvAddNewTaskToReadyList+0x108>)
 8007fd6:	f7ff fc95 	bl	8007904 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fda:	4829      	ldr	r0, [pc, #164]	; (8008080 <prvAddNewTaskToReadyList+0x10c>)
 8007fdc:	f7ff fc92 	bl	8007904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fe0:	4828      	ldr	r0, [pc, #160]	; (8008084 <prvAddNewTaskToReadyList+0x110>)
 8007fe2:	f7ff fc8f 	bl	8007904 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fe6:	4b28      	ldr	r3, [pc, #160]	; (8008088 <prvAddNewTaskToReadyList+0x114>)
 8007fe8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fec:	4b27      	ldr	r3, [pc, #156]	; (800808c <prvAddNewTaskToReadyList+0x118>)
 8007fee:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8007ff0:	4a27      	ldr	r2, [pc, #156]	; (8008090 <prvAddNewTaskToReadyList+0x11c>)
		prvAddTaskToReadyList( pxNewTCB );
 8007ff2:	4928      	ldr	r1, [pc, #160]	; (8008094 <prvAddNewTaskToReadyList+0x120>)
		uxTaskNumber++;
 8007ff4:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007ff6:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008000:	4093      	lsls	r3, r2
 8008002:	4303      	orrs	r3, r0
 8008004:	2014      	movs	r0, #20
 8008006:	600b      	str	r3, [r1, #0]
 8008008:	4b14      	ldr	r3, [pc, #80]	; (800805c <prvAddNewTaskToReadyList+0xe8>)
 800800a:	1d21      	adds	r1, r4, #4
 800800c:	fb00 3002 	mla	r0, r0, r2, r3
 8008010:	f7ff fc86 	bl	8007920 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008014:	f000 fed8 	bl	8008dc8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008018:	6833      	ldr	r3, [r6, #0]
 800801a:	b163      	cbz	r3, 8008036 <prvAddNewTaskToReadyList+0xc2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d207      	bcs.n	8008036 <prvAddNewTaskToReadyList+0xc2>
			taskYIELD_IF_USING_PREEMPTION();
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <prvAddNewTaskToReadyList+0x124>)
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	f3bf 8f6f 	isb	sy
}
 8008036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800803a:	6833      	ldr	r3, [r6, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1d7      	bne.n	8007ff0 <prvAddNewTaskToReadyList+0x7c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008040:	682b      	ldr	r3, [r5, #0]
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008046:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008048:	bf98      	it	ls
 800804a:	602c      	strls	r4, [r5, #0]
 800804c:	e7d0      	b.n	8007ff0 <prvAddNewTaskToReadyList+0x7c>
 800804e:	bf00      	nop
 8008050:	20000ecc 	.word	0x20000ecc
 8008054:	20000e34 	.word	0x20000e34
 8008058:	20000f28 	.word	0x20000f28
 800805c:	20000e40 	.word	0x20000e40
 8008060:	20000e54 	.word	0x20000e54
 8008064:	20000e68 	.word	0x20000e68
 8008068:	20000e7c 	.word	0x20000e7c
 800806c:	20000e90 	.word	0x20000e90
 8008070:	20000ea4 	.word	0x20000ea4
 8008074:	20000ef8 	.word	0x20000ef8
 8008078:	20000eb8 	.word	0x20000eb8
 800807c:	20000f14 	.word	0x20000f14
 8008080:	20000f40 	.word	0x20000f40
 8008084:	20000f2c 	.word	0x20000f2c
 8008088:	20000e38 	.word	0x20000e38
 800808c:	20000e3c 	.word	0x20000e3c
 8008090:	20000edc 	.word	0x20000edc
 8008094:	20000ee0 	.word	0x20000ee0
 8008098:	e000ed04 	.word	0xe000ed04
 800809c:	20000ee4 	.word	0x20000ee4

080080a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a0:	4a06      	ldr	r2, [pc, #24]	; (80080bc <prvResetNextTaskUnblockTime+0x1c>)
 80080a2:	6813      	ldr	r3, [r2, #0]
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <prvResetNextTaskUnblockTime+0x20>)
 80080a8:	b919      	cbnz	r1, 80080b2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080ae:	601a      	str	r2, [r3, #0]
	}
}
 80080b0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080b6:	68d2      	ldr	r2, [r2, #12]
 80080b8:	6852      	ldr	r2, [r2, #4]
 80080ba:	e7f8      	b.n	80080ae <prvResetNextTaskUnblockTime+0xe>
 80080bc:	20000e38 	.word	0x20000e38
 80080c0:	20000f0c 	.word	0x20000f0c

080080c4 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80080c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c8:	4607      	mov	r7, r0
 80080ca:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80080ce:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 80080d2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80080d4:	3801      	subs	r0, #1
 80080d6:	eb06 0680 	add.w	r6, r6, r0, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80080da:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80080dc:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080e0:	1e4b      	subs	r3, r1, #1
 80080e2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80080e6:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080e8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80080ec:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80080f0:	7818      	ldrb	r0, [r3, #0]
 80080f2:	b108      	cbz	r0, 80080f8 <prvInitialiseNewTask.isra.0+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080f4:	428b      	cmp	r3, r1
 80080f6:	d1f7      	bne.n	80080e8 <prvInitialiseNewTask.isra.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080f8:	9d08      	ldr	r5, [sp, #32]
 80080fa:	f04f 0a00 	mov.w	sl, #0
 80080fe:	2d06      	cmp	r5, #6
 8008100:	bf28      	it	cs
 8008102:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008104:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8008106:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008108:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800810c:	f7ff fc05 	bl	800791a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008110:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008114:	f104 0018 	add.w	r0, r4, #24
 8008118:	f7ff fbff 	bl	800791a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800811c:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008120:	464a      	mov	r2, r9
 8008122:	4639      	mov	r1, r7
 8008124:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008126:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008128:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800812a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800812c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008130:	f000 fe04 	bl	8008d3c <pxPortInitialiseStack>
 8008134:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008136:	f1b8 0f00 	cmp.w	r8, #0
 800813a:	d001      	beq.n	8008140 <prvInitialiseNewTask.isra.0+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800813c:	f8c8 4000 	str.w	r4, [r8]
}
 8008140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008144 <prvDeleteTCB>:
	{
 8008144:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008146:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	{
 800814a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800814c:	b93b      	cbnz	r3, 800815e <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800814e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008150:	f000 ffd4 	bl	80090fc <vPortFree>
				vPortFree( pxTCB );
 8008154:	4620      	mov	r0, r4
	}
 8008156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800815a:	f000 bfcf 	b.w	80090fc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800815e:	2b01      	cmp	r3, #1
 8008160:	d0f9      	beq.n	8008156 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008162:	2b02      	cmp	r3, #2
 8008164:	d008      	beq.n	8008178 <prvDeleteTCB+0x34>
 8008166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	e7fe      	b.n	8008176 <prvDeleteTCB+0x32>
	}
 8008178:	bd10      	pop	{r4, pc}
	...

0800817c <prvIdleTask>:
{
 800817c:	b580      	push	{r7, lr}
				taskYIELD();
 800817e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80081dc <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008182:	4f12      	ldr	r7, [pc, #72]	; (80081cc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008184:	4c12      	ldr	r4, [pc, #72]	; (80081d0 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8008186:	4d13      	ldr	r5, [pc, #76]	; (80081d4 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	b963      	cbnz	r3, 80081a6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800818c:	4b12      	ldr	r3, [pc, #72]	; (80081d8 <prvIdleTask+0x5c>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d9f8      	bls.n	8008186 <prvIdleTask+0xa>
				taskYIELD();
 8008194:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008198:	f8c8 3000 	str.w	r3, [r8]
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	e7ee      	b.n	8008184 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80081a6:	f000 fded 	bl	8008d84 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081ae:	1d30      	adds	r0, r6, #4
 80081b0:	f7ff fbd9 	bl	8007966 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	3b01      	subs	r3, #1
 80081be:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80081c0:	f000 fe02 	bl	8008dc8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ffbd 	bl	8008144 <prvDeleteTCB>
 80081ca:	e7dd      	b.n	8008188 <prvIdleTask+0xc>
 80081cc:	20000f40 	.word	0x20000f40
 80081d0:	20000ed0 	.word	0x20000ed0
 80081d4:	20000ecc 	.word	0x20000ecc
 80081d8:	20000e40 	.word	0x20000e40
 80081dc:	e000ed04 	.word	0xe000ed04

080081e0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081e2:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081e4:	4f1b      	ldr	r7, [pc, #108]	; (8008254 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80081e6:	681c      	ldr	r4, [r3, #0]
{
 80081e8:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ea:	6838      	ldr	r0, [r7, #0]
{
 80081ec:	460e      	mov	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081ee:	3004      	adds	r0, #4
 80081f0:	f7ff fbb9 	bl	8007966 <uxListRemove>
 80081f4:	463b      	mov	r3, r7
 80081f6:	b940      	cbnz	r0, 800820a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80081f8:	6839      	ldr	r1, [r7, #0]
 80081fa:	4817      	ldr	r0, [pc, #92]	; (8008258 <prvAddCurrentTaskToDelayedList+0x78>)
 80081fc:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 80081fe:	2101      	movs	r1, #1
 8008200:	6802      	ldr	r2, [r0, #0]
 8008202:	40b9      	lsls	r1, r7
 8008204:	ea22 0201 	bic.w	r2, r2, r1
 8008208:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800820a:	1c6a      	adds	r2, r5, #1
 800820c:	d107      	bne.n	800821e <prvAddCurrentTaskToDelayedList+0x3e>
 800820e:	b136      	cbz	r6, 800821e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	4812      	ldr	r0, [pc, #72]	; (800825c <prvAddCurrentTaskToDelayedList+0x7c>)
 8008214:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800821a:	f7ff bb81 	b.w	8007920 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	1964      	adds	r4, r4, r5
 8008222:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8008224:	d307      	bcc.n	8008236 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008226:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <prvAddCurrentTaskToDelayedList+0x80>)
 8008228:	6810      	ldr	r0, [r2, #0]
 800822a:	6819      	ldr	r1, [r3, #0]
}
 800822c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008230:	3104      	adds	r1, #4
 8008232:	f7ff bb81 	b.w	8007938 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008236:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <prvAddCurrentTaskToDelayedList+0x84>)
 8008238:	6810      	ldr	r0, [r2, #0]
 800823a:	6819      	ldr	r1, [r3, #0]
 800823c:	3104      	adds	r1, #4
 800823e:	f7ff fb7b 	bl	8007938 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008242:	4b09      	ldr	r3, [pc, #36]	; (8008268 <prvAddCurrentTaskToDelayedList+0x88>)
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008248:	bf88      	it	hi
 800824a:	601c      	strhi	r4, [r3, #0]
}
 800824c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800824e:	bf00      	nop
 8008250:	20000f54 	.word	0x20000f54
 8008254:	20000e34 	.word	0x20000e34
 8008258:	20000ee0 	.word	0x20000ee0
 800825c:	20000f2c 	.word	0x20000f2c
 8008260:	20000e3c 	.word	0x20000e3c
 8008264:	20000e38 	.word	0x20000e38
 8008268:	20000f0c 	.word	0x20000f0c

0800826c <xTaskCreateStatic>:
	{
 800826c:	b570      	push	{r4, r5, r6, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008274:	b945      	cbnz	r5, 8008288 <xTaskCreateStatic+0x1c>
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	e7fe      	b.n	8008286 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008288:	b944      	cbnz	r4, 800829c <xTaskCreateStatic+0x30>
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	e7fe      	b.n	800829a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800829c:	264c      	movs	r6, #76	; 0x4c
 800829e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082a0:	9e04      	ldr	r6, [sp, #16]
 80082a2:	2e4c      	cmp	r6, #76	; 0x4c
 80082a4:	d008      	beq.n	80082b8 <xTaskCreateStatic+0x4c>
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	e7fe      	b.n	80082b6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082b8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082ba:	2502      	movs	r5, #2
 80082bc:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082c0:	ad05      	add	r5, sp, #20
 80082c2:	9501      	str	r5, [sp, #4]
 80082c4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80082c6:	9402      	str	r4, [sp, #8]
 80082c8:	9500      	str	r5, [sp, #0]
 80082ca:	f7ff fefb 	bl	80080c4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082ce:	4620      	mov	r0, r4
 80082d0:	f7ff fe50 	bl	8007f74 <prvAddNewTaskToReadyList>
	}
 80082d4:	9805      	ldr	r0, [sp, #20]
 80082d6:	b006      	add	sp, #24
 80082d8:	bd70      	pop	{r4, r5, r6, pc}

080082da <xTaskCreate>:
	{
 80082da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082de:	4607      	mov	r7, r0
 80082e0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082e2:	0090      	lsls	r0, r2, #2
	{
 80082e4:	4688      	mov	r8, r1
 80082e6:	4616      	mov	r6, r2
 80082e8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ea:	f000 fe7d 	bl	8008fe8 <pvPortMalloc>
			if( pxStack != NULL )
 80082ee:	4605      	mov	r5, r0
 80082f0:	b1e8      	cbz	r0, 800832e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80082f2:	204c      	movs	r0, #76	; 0x4c
 80082f4:	f000 fe78 	bl	8008fe8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80082f8:	4604      	mov	r4, r0
 80082fa:	b1a8      	cbz	r0, 8008328 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082fc:	2300      	movs	r3, #0
 80082fe:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008304:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800830a:	4632      	mov	r2, r6
 800830c:	4641      	mov	r1, r8
 800830e:	9002      	str	r0, [sp, #8]
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4638      	mov	r0, r7
 8008314:	464b      	mov	r3, r9
 8008316:	f7ff fed5 	bl	80080c4 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800831a:	4620      	mov	r0, r4
 800831c:	f7ff fe2a 	bl	8007f74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008320:	2001      	movs	r0, #1
	}
 8008322:	b005      	add	sp, #20
 8008324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008328:	4628      	mov	r0, r5
 800832a:	f000 fee7 	bl	80090fc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800832e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008332:	e7f6      	b.n	8008322 <xTaskCreate+0x48>

08008334 <vTaskStartScheduler>:
{
 8008334:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008336:	2400      	movs	r4, #0
{
 8008338:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800833a:	aa07      	add	r2, sp, #28
 800833c:	a906      	add	r1, sp, #24
 800833e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008340:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008344:	f7f8 fe94 	bl	8001070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008348:	9b05      	ldr	r3, [sp, #20]
 800834a:	9a07      	ldr	r2, [sp, #28]
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	9b06      	ldr	r3, [sp, #24]
 8008350:	4915      	ldr	r1, [pc, #84]	; (80083a8 <vTaskStartScheduler+0x74>)
 8008352:	e9cd 4300 	strd	r4, r3, [sp]
 8008356:	4815      	ldr	r0, [pc, #84]	; (80083ac <vTaskStartScheduler+0x78>)
 8008358:	4623      	mov	r3, r4
 800835a:	f7ff ff87 	bl	800826c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800835e:	b1a8      	cbz	r0, 800838c <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 8008360:	f000 facc 	bl	80088fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008364:	2801      	cmp	r0, #1
 8008366:	d113      	bne.n	8008390 <vTaskStartScheduler+0x5c>
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008378:	f04f 32ff 	mov.w	r2, #4294967295
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <vTaskStartScheduler+0x7c>)
 800837e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008380:	4b0c      	ldr	r3, [pc, #48]	; (80083b4 <vTaskStartScheduler+0x80>)
 8008382:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <vTaskStartScheduler+0x84>)
 8008386:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008388:	f000 fd84 	bl	8008e94 <xPortStartScheduler>
}
 800838c:	b008      	add	sp, #32
 800838e:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008390:	3001      	adds	r0, #1
 8008392:	d1fb      	bne.n	800838c <vTaskStartScheduler+0x58>
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	e7fe      	b.n	80083a4 <vTaskStartScheduler+0x70>
 80083a6:	bf00      	nop
 80083a8:	0800cbe1 	.word	0x0800cbe1
 80083ac:	0800817d 	.word	0x0800817d
 80083b0:	20000f0c 	.word	0x20000f0c
 80083b4:	20000f28 	.word	0x20000f28
 80083b8:	20000f54 	.word	0x20000f54

080083bc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80083bc:	4a02      	ldr	r2, [pc, #8]	; (80083c8 <vTaskSuspendAll+0xc>)
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	3301      	adds	r3, #1
 80083c2:	6013      	str	r3, [r2, #0]
}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000ed8 	.word	0x20000ed8

080083cc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80083cc:	4b01      	ldr	r3, [pc, #4]	; (80083d4 <xTaskGetTickCount+0x8>)
 80083ce:	6818      	ldr	r0, [r3, #0]
}
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	20000f54 	.word	0x20000f54

080083d8 <xTaskIncrementTick>:
{
 80083d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083dc:	4b3c      	ldr	r3, [pc, #240]	; (80084d0 <xTaskIncrementTick+0xf8>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d16e      	bne.n	80084c2 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083e4:	4b3b      	ldr	r3, [pc, #236]	; (80084d4 <xTaskIncrementTick+0xfc>)
 80083e6:	681d      	ldr	r5, [r3, #0]
 80083e8:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80083ea:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083ec:	b9bd      	cbnz	r5, 800841e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80083ee:	4b3a      	ldr	r3, [pc, #232]	; (80084d8 <xTaskIncrementTick+0x100>)
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	b142      	cbz	r2, 8008408 <xTaskIncrementTick+0x30>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	e7fe      	b.n	8008406 <xTaskIncrementTick+0x2e>
 8008408:	4a34      	ldr	r2, [pc, #208]	; (80084dc <xTaskIncrementTick+0x104>)
 800840a:	6819      	ldr	r1, [r3, #0]
 800840c:	6810      	ldr	r0, [r2, #0]
 800840e:	6018      	str	r0, [r3, #0]
 8008410:	6011      	str	r1, [r2, #0]
 8008412:	4a33      	ldr	r2, [pc, #204]	; (80084e0 <xTaskIncrementTick+0x108>)
 8008414:	6813      	ldr	r3, [r2, #0]
 8008416:	3301      	adds	r3, #1
 8008418:	6013      	str	r3, [r2, #0]
 800841a:	f7ff fe41 	bl	80080a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800841e:	4e31      	ldr	r6, [pc, #196]	; (80084e4 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008420:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008422:	6833      	ldr	r3, [r6, #0]
 8008424:	4f30      	ldr	r7, [pc, #192]	; (80084e8 <xTaskIncrementTick+0x110>)
 8008426:	42ab      	cmp	r3, r5
 8008428:	d910      	bls.n	800844c <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800842a:	4b30      	ldr	r3, [pc, #192]	; (80084ec <xTaskIncrementTick+0x114>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008430:	2314      	movs	r3, #20
 8008432:	4353      	muls	r3, r2
 8008434:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008436:	2b02      	cmp	r3, #2
 8008438:	bf28      	it	cs
 800843a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800843c:	4b2c      	ldr	r3, [pc, #176]	; (80084f0 <xTaskIncrementTick+0x118>)
 800843e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008440:	2b00      	cmp	r3, #0
}
 8008442:	bf0c      	ite	eq
 8008444:	4620      	moveq	r0, r4
 8008446:	2001      	movne	r0, #1
 8008448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800844c:	f8df a088 	ldr.w	sl, [pc, #136]	; 80084d8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008450:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80084f8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008454:	f8da 3000 	ldr.w	r3, [sl]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	b91b      	cbnz	r3, 8008464 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800845c:	f04f 33ff 	mov.w	r3, #4294967295
 8008460:	6033      	str	r3, [r6, #0]
					break;
 8008462:	e7e2      	b.n	800842a <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008464:	f8da 3000 	ldr.w	r3, [sl]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800846e:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008472:	4295      	cmp	r5, r2
 8008474:	d201      	bcs.n	800847a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008476:	6032      	str	r2, [r6, #0]
						break;
 8008478:	e7d7      	b.n	800842a <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800847a:	f10b 0804 	add.w	r8, fp, #4
 800847e:	4640      	mov	r0, r8
 8008480:	f7ff fa71 	bl	8007966 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008484:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008488:	b11a      	cbz	r2, 8008492 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800848a:	f10b 0018 	add.w	r0, fp, #24
 800848e:	f7ff fa6a 	bl	8007966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008492:	2201      	movs	r2, #1
 8008494:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008498:	f8d9 3000 	ldr.w	r3, [r9]
 800849c:	4082      	lsls	r2, r0
 800849e:	431a      	orrs	r2, r3
 80084a0:	f8c9 2000 	str.w	r2, [r9]
 80084a4:	2214      	movs	r2, #20
 80084a6:	4641      	mov	r1, r8
 80084a8:	fb02 7000 	mla	r0, r2, r0, r7
 80084ac:	f7ff fa38 	bl	8007920 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084b0:	4b0e      	ldr	r3, [pc, #56]	; (80084ec <xTaskIncrementTick+0x114>)
 80084b2:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80084b6:	6819      	ldr	r1, [r3, #0]
 80084b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80084ba:	429a      	cmp	r2, r3
 80084bc:	bf28      	it	cs
 80084be:	2401      	movcs	r4, #1
 80084c0:	e7c8      	b.n	8008454 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 80084c2:	4a0c      	ldr	r2, [pc, #48]	; (80084f4 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80084c4:	2400      	movs	r4, #0
		++uxPendedTicks;
 80084c6:	6813      	ldr	r3, [r2, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	6013      	str	r3, [r2, #0]
 80084cc:	e7b6      	b.n	800843c <xTaskIncrementTick+0x64>
 80084ce:	bf00      	nop
 80084d0:	20000ed8 	.word	0x20000ed8
 80084d4:	20000f54 	.word	0x20000f54
 80084d8:	20000e38 	.word	0x20000e38
 80084dc:	20000e3c 	.word	0x20000e3c
 80084e0:	20000f10 	.word	0x20000f10
 80084e4:	20000f0c 	.word	0x20000f0c
 80084e8:	20000e40 	.word	0x20000e40
 80084ec:	20000e34 	.word	0x20000e34
 80084f0:	20000f58 	.word	0x20000f58
 80084f4:	20000ed4 	.word	0x20000ed4
 80084f8:	20000ee0 	.word	0x20000ee0

080084fc <xTaskResumeAll>:
{
 80084fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008500:	4c30      	ldr	r4, [pc, #192]	; (80085c4 <xTaskResumeAll+0xc8>)
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	b943      	cbnz	r3, 8008518 <xTaskResumeAll+0x1c>
 8008506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	e7fe      	b.n	8008516 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008518:	f000 fc34 	bl	8008d84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	3b01      	subs	r3, #1
 8008520:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008522:	6824      	ldr	r4, [r4, #0]
 8008524:	b12c      	cbz	r4, 8008532 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008526:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008528:	f000 fc4e 	bl	8008dc8 <vPortExitCritical>
}
 800852c:	4620      	mov	r0, r4
 800852e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008532:	4b25      	ldr	r3, [pc, #148]	; (80085c8 <xTaskResumeAll+0xcc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f5      	beq.n	8008526 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800853a:	4d24      	ldr	r5, [pc, #144]	; (80085cc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800853c:	4e24      	ldr	r6, [pc, #144]	; (80085d0 <xTaskResumeAll+0xd4>)
 800853e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80085e4 <xTaskResumeAll+0xe8>
 8008542:	e01f      	b.n	8008584 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008544:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008546:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008548:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800854a:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800854e:	f104 0018 	add.w	r0, r4, #24
 8008552:	f7ff fa08 	bl	8007966 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008556:	4648      	mov	r0, r9
 8008558:	f7ff fa05 	bl	8007966 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800855c:	2014      	movs	r0, #20
 800855e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008560:	6831      	ldr	r1, [r6, #0]
 8008562:	fa07 f302 	lsl.w	r3, r7, r2
 8008566:	430b      	orrs	r3, r1
 8008568:	fb00 8002 	mla	r0, r0, r2, r8
 800856c:	4649      	mov	r1, r9
 800856e:	6033      	str	r3, [r6, #0]
 8008570:	f7ff f9d6 	bl	8007920 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008574:	4b17      	ldr	r3, [pc, #92]	; (80085d4 <xTaskResumeAll+0xd8>)
 8008576:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	429a      	cmp	r2, r3
 800857e:	d301      	bcc.n	8008584 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008580:	4b15      	ldr	r3, [pc, #84]	; (80085d8 <xTaskResumeAll+0xdc>)
 8008582:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008584:	682b      	ldr	r3, [r5, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1dc      	bne.n	8008544 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800858a:	b10c      	cbz	r4, 8008590 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 800858c:	f7ff fd88 	bl	80080a0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008590:	4d12      	ldr	r5, [pc, #72]	; (80085dc <xTaskResumeAll+0xe0>)
 8008592:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008594:	b144      	cbz	r4, 80085a8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008596:	2701      	movs	r7, #1
 8008598:	4e0f      	ldr	r6, [pc, #60]	; (80085d8 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800859a:	f7ff ff1d 	bl	80083d8 <xTaskIncrementTick>
 800859e:	b100      	cbz	r0, 80085a2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80085a0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80085a2:	3c01      	subs	r4, #1
 80085a4:	d1f9      	bne.n	800859a <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80085a6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <xTaskResumeAll+0xdc>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0ba      	beq.n	8008526 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80085b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b4:	4b0a      	ldr	r3, [pc, #40]	; (80085e0 <xTaskResumeAll+0xe4>)
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80085c0:	2401      	movs	r4, #1
 80085c2:	e7b1      	b.n	8008528 <xTaskResumeAll+0x2c>
 80085c4:	20000ed8 	.word	0x20000ed8
 80085c8:	20000ecc 	.word	0x20000ecc
 80085cc:	20000f14 	.word	0x20000f14
 80085d0:	20000ee0 	.word	0x20000ee0
 80085d4:	20000e34 	.word	0x20000e34
 80085d8:	20000f58 	.word	0x20000f58
 80085dc:	20000ed4 	.word	0x20000ed4
 80085e0:	e000ed04 	.word	0xe000ed04
 80085e4:	20000e40 	.word	0x20000e40

080085e8 <vTaskDelay>:
	{
 80085e8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085ea:	b940      	cbnz	r0, 80085fe <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <vTaskDelay+0x40>)
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	f3bf 8f6f 	isb	sy
	}
 80085fc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80085fe:	4b0b      	ldr	r3, [pc, #44]	; (800862c <vTaskDelay+0x44>)
 8008600:	6819      	ldr	r1, [r3, #0]
 8008602:	b141      	cbz	r1, 8008616 <vTaskDelay+0x2e>
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	e7fe      	b.n	8008614 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008616:	f7ff fed1 	bl	80083bc <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800861a:	f7ff fde1 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800861e:	f7ff ff6d 	bl	80084fc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008622:	2800      	cmp	r0, #0
 8008624:	d0e2      	beq.n	80085ec <vTaskDelay+0x4>
 8008626:	e7e9      	b.n	80085fc <vTaskDelay+0x14>
 8008628:	e000ed04 	.word	0xe000ed04
 800862c:	20000ed8 	.word	0x20000ed8

08008630 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008630:	4b17      	ldr	r3, [pc, #92]	; (8008690 <vTaskSwitchContext+0x60>)
{
 8008632:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4b17      	ldr	r3, [pc, #92]	; (8008694 <vTaskSwitchContext+0x64>)
 8008638:	b112      	cbz	r2, 8008640 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800863a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800863c:	601a      	str	r2, [r3, #0]
}
 800863e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008640:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008642:	4b15      	ldr	r3, [pc, #84]	; (8008698 <vTaskSwitchContext+0x68>)
 8008644:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008646:	fab3 f383 	clz	r3, r3
 800864a:	2214      	movs	r2, #20
 800864c:	b2db      	uxtb	r3, r3
 800864e:	f1c3 031f 	rsb	r3, r3, #31
 8008652:	435a      	muls	r2, r3
 8008654:	4911      	ldr	r1, [pc, #68]	; (800869c <vTaskSwitchContext+0x6c>)
 8008656:	588c      	ldr	r4, [r1, r2]
 8008658:	1888      	adds	r0, r1, r2
 800865a:	b944      	cbnz	r4, 800866e <vTaskSwitchContext+0x3e>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	e7fe      	b.n	800866c <vTaskSwitchContext+0x3c>
 800866e:	6844      	ldr	r4, [r0, #4]
 8008670:	3208      	adds	r2, #8
 8008672:	6864      	ldr	r4, [r4, #4]
 8008674:	440a      	add	r2, r1
 8008676:	4294      	cmp	r4, r2
 8008678:	bf08      	it	eq
 800867a:	6862      	ldreq	r2, [r4, #4]
 800867c:	6044      	str	r4, [r0, #4]
 800867e:	bf08      	it	eq
 8008680:	6042      	streq	r2, [r0, #4]
 8008682:	2214      	movs	r2, #20
 8008684:	fb02 1303 	mla	r3, r2, r3, r1
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <vTaskSwitchContext+0x70>)
 800868e:	e7d5      	b.n	800863c <vTaskSwitchContext+0xc>
 8008690:	20000ed8 	.word	0x20000ed8
 8008694:	20000f58 	.word	0x20000f58
 8008698:	20000ee0 	.word	0x20000ee0
 800869c:	20000e40 	.word	0x20000e40
 80086a0:	20000e34 	.word	0x20000e34

080086a4 <vTaskPlaceOnEventList>:
{
 80086a4:	b510      	push	{r4, lr}
 80086a6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80086a8:	b940      	cbnz	r0, 80086bc <vTaskPlaceOnEventList+0x18>
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	e7fe      	b.n	80086ba <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <vTaskPlaceOnEventList+0x30>)
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	3118      	adds	r1, #24
 80086c2:	f7ff f939 	bl	8007938 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086c6:	4620      	mov	r0, r4
}
 80086c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80086cc:	2101      	movs	r1, #1
 80086ce:	f7ff bd87 	b.w	80081e0 <prvAddCurrentTaskToDelayedList>
 80086d2:	bf00      	nop
 80086d4:	20000e34 	.word	0x20000e34

080086d8 <vTaskPlaceOnEventListRestricted>:
	{
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	460d      	mov	r5, r1
 80086dc:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80086de:	b940      	cbnz	r0, 80086f2 <vTaskPlaceOnEventListRestricted+0x1a>
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	e7fe      	b.n	80086f0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <vTaskPlaceOnEventListRestricted+0x3c>)
 80086f4:	6819      	ldr	r1, [r3, #0]
 80086f6:	3118      	adds	r1, #24
 80086f8:	f7ff f912 	bl	8007920 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80086fc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086fe:	4621      	mov	r1, r4
 8008700:	bf08      	it	eq
 8008702:	4628      	moveq	r0, r5
	}
 8008704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008708:	bf18      	it	ne
 800870a:	f04f 30ff 	movne.w	r0, #4294967295
 800870e:	f7ff bd67 	b.w	80081e0 <prvAddCurrentTaskToDelayedList>
 8008712:	bf00      	nop
 8008714:	20000e34 	.word	0x20000e34

08008718 <xTaskRemoveFromEventList>:
{
 8008718:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800871a:	68c3      	ldr	r3, [r0, #12]
 800871c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800871e:	b944      	cbnz	r4, 8008732 <xTaskRemoveFromEventList+0x1a>
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	e7fe      	b.n	8008730 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008732:	f104 0518 	add.w	r5, r4, #24
 8008736:	4628      	mov	r0, r5
 8008738:	f7ff f915 	bl	8007966 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873c:	4b11      	ldr	r3, [pc, #68]	; (8008784 <xTaskRemoveFromEventList+0x6c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	b9e3      	cbnz	r3, 800877c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008742:	1d25      	adds	r5, r4, #4
 8008744:	4628      	mov	r0, r5
 8008746:	f7ff f90e 	bl	8007966 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800874a:	2301      	movs	r3, #1
 800874c:	490e      	ldr	r1, [pc, #56]	; (8008788 <xTaskRemoveFromEventList+0x70>)
 800874e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008750:	6808      	ldr	r0, [r1, #0]
 8008752:	4093      	lsls	r3, r2
 8008754:	4303      	orrs	r3, r0
 8008756:	2014      	movs	r0, #20
 8008758:	600b      	str	r3, [r1, #0]
 800875a:	4629      	mov	r1, r5
 800875c:	4b0b      	ldr	r3, [pc, #44]	; (800878c <xTaskRemoveFromEventList+0x74>)
 800875e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008762:	f7ff f8dd 	bl	8007920 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <xTaskRemoveFromEventList+0x78>)
 8008768:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008770:	bf85      	ittet	hi
 8008772:	2001      	movhi	r0, #1
 8008774:	4b07      	ldrhi	r3, [pc, #28]	; (8008794 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8008776:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008778:	6018      	strhi	r0, [r3, #0]
}
 800877a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800877c:	4629      	mov	r1, r5
 800877e:	4806      	ldr	r0, [pc, #24]	; (8008798 <xTaskRemoveFromEventList+0x80>)
 8008780:	e7ef      	b.n	8008762 <xTaskRemoveFromEventList+0x4a>
 8008782:	bf00      	nop
 8008784:	20000ed8 	.word	0x20000ed8
 8008788:	20000ee0 	.word	0x20000ee0
 800878c:	20000e40 	.word	0x20000e40
 8008790:	20000e34 	.word	0x20000e34
 8008794:	20000f58 	.word	0x20000f58
 8008798:	20000f14 	.word	0x20000f14

0800879c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800879c:	4b03      	ldr	r3, [pc, #12]	; (80087ac <vTaskInternalSetTimeOutState+0x10>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80087a2:	4b03      	ldr	r3, [pc, #12]	; (80087b0 <vTaskInternalSetTimeOutState+0x14>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6043      	str	r3, [r0, #4]
}
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20000f10 	.word	0x20000f10
 80087b0:	20000f54 	.word	0x20000f54

080087b4 <xTaskCheckForTimeOut>:
{
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80087b8:	4605      	mov	r5, r0
 80087ba:	b940      	cbnz	r0, 80087ce <xTaskCheckForTimeOut+0x1a>
 80087bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	e7fe      	b.n	80087cc <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80087ce:	b941      	cbnz	r1, 80087e2 <xTaskCheckForTimeOut+0x2e>
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	e7fe      	b.n	80087e0 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80087e2:	f000 facf 	bl	8008d84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80087e6:	4b0f      	ldr	r3, [pc, #60]	; (8008824 <xTaskCheckForTimeOut+0x70>)
 80087e8:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	d010      	beq.n	8008812 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087f0:	480d      	ldr	r0, [pc, #52]	; (8008828 <xTaskCheckForTimeOut+0x74>)
 80087f2:	682e      	ldr	r6, [r5, #0]
 80087f4:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087f6:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087f8:	4286      	cmp	r6, r0
 80087fa:	d001      	beq.n	8008800 <xTaskCheckForTimeOut+0x4c>
 80087fc:	428a      	cmp	r2, r1
 80087fe:	d90f      	bls.n	8008820 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008800:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008802:	4283      	cmp	r3, r0
 8008804:	d90a      	bls.n	800881c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008806:	1a5b      	subs	r3, r3, r1
 8008808:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800880a:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800880c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800880e:	f7ff ffc5 	bl	800879c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008812:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008814:	f000 fad8 	bl	8008dc8 <vPortExitCritical>
}
 8008818:	4620      	mov	r0, r4
 800881a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008820:	2401      	movs	r4, #1
 8008822:	e7f7      	b.n	8008814 <xTaskCheckForTimeOut+0x60>
 8008824:	20000f54 	.word	0x20000f54
 8008828:	20000f10 	.word	0x20000f10

0800882c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800882c:	2201      	movs	r2, #1
 800882e:	4b01      	ldr	r3, [pc, #4]	; (8008834 <vTaskMissedYield+0x8>)
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	4770      	bx	lr
 8008834:	20000f58 	.word	0x20000f58

08008838 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <xTaskGetSchedulerState+0x18>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	b133      	cbz	r3, 800884c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <xTaskGetSchedulerState+0x1c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008844:	bf0c      	ite	eq
 8008846:	2002      	moveq	r0, #2
 8008848:	2000      	movne	r0, #0
 800884a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800884c:	2001      	movs	r0, #1
	}
 800884e:	4770      	bx	lr
 8008850:	20000f28 	.word	0x20000f28
 8008854:	20000ed8 	.word	0x20000ed8

08008858 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800885a:	4c11      	ldr	r4, [pc, #68]	; (80088a0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800885c:	f000 fa92 	bl	8008d84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008860:	6825      	ldr	r5, [r4, #0]
 8008862:	b9bd      	cbnz	r5, 8008894 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008864:	4f0f      	ldr	r7, [pc, #60]	; (80088a4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008866:	4e10      	ldr	r6, [pc, #64]	; (80088a8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008868:	4638      	mov	r0, r7
 800886a:	f7ff f84b 	bl	8007904 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800886e:	4630      	mov	r0, r6
 8008870:	f7ff f848 	bl	8007904 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008874:	4b0d      	ldr	r3, [pc, #52]	; (80088ac <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008876:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8008878:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800887a:	4b0d      	ldr	r3, [pc, #52]	; (80088b0 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800887c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800887e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008880:	4a0c      	ldr	r2, [pc, #48]	; (80088b4 <prvCheckForValidListAndQueue+0x5c>)
 8008882:	4b0d      	ldr	r3, [pc, #52]	; (80088b8 <prvCheckForValidListAndQueue+0x60>)
 8008884:	9500      	str	r5, [sp, #0]
 8008886:	f7ff f941 	bl	8007b0c <xQueueGenericCreateStatic>
 800888a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800888c:	b110      	cbz	r0, 8008894 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800888e:	490b      	ldr	r1, [pc, #44]	; (80088bc <prvCheckForValidListAndQueue+0x64>)
 8008890:	f7ff fb3a 	bl	8007f08 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008894:	b003      	add	sp, #12
 8008896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800889a:	f000 ba95 	b.w	8008dc8 <vPortExitCritical>
 800889e:	bf00      	nop
 80088a0:	20001050 	.word	0x20001050
 80088a4:	20000fdc 	.word	0x20000fdc
 80088a8:	20000ff0 	.word	0x20000ff0
 80088ac:	20000f5c 	.word	0x20000f5c
 80088b0:	20000f60 	.word	0x20000f60
 80088b4:	20000f64 	.word	0x20000f64
 80088b8:	20001008 	.word	0x20001008
 80088bc:	0800cbe6 	.word	0x0800cbe6

080088c0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80088c0:	4291      	cmp	r1, r2
{
 80088c2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088c4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088c6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80088c8:	d80a      	bhi.n	80088e0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ca:	1ad2      	subs	r2, r2, r3
 80088cc:	6983      	ldr	r3, [r0, #24]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d20d      	bcs.n	80088ee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088d2:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <prvInsertTimerInActiveList+0x34>)
 80088d4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088d6:	6818      	ldr	r0, [r3, #0]
 80088d8:	f7ff f82e 	bl	8007938 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80088dc:	2000      	movs	r0, #0
}
 80088de:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d201      	bcs.n	80088e8 <prvInsertTimerInActiveList+0x28>
 80088e4:	4299      	cmp	r1, r3
 80088e6:	d202      	bcs.n	80088ee <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088e8:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <prvInsertTimerInActiveList+0x38>)
 80088ea:	1d01      	adds	r1, r0, #4
 80088ec:	e7f3      	b.n	80088d6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80088ee:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80088f0:	e7f5      	b.n	80088de <prvInsertTimerInActiveList+0x1e>
 80088f2:	bf00      	nop
 80088f4:	20000f60 	.word	0x20000f60
 80088f8:	20000f5c 	.word	0x20000f5c

080088fc <xTimerCreateTimerTask>:
{
 80088fc:	b510      	push	{r4, lr}
 80088fe:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008900:	f7ff ffaa 	bl	8008858 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008904:	4b12      	ldr	r3, [pc, #72]	; (8008950 <xTimerCreateTimerTask+0x54>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	b1b3      	cbz	r3, 8008938 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800890a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800890c:	aa07      	add	r2, sp, #28
 800890e:	a906      	add	r1, sp, #24
 8008910:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008912:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008916:	f7f8 fbb7 	bl	8001088 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800891a:	9b05      	ldr	r3, [sp, #20]
 800891c:	9a07      	ldr	r2, [sp, #28]
 800891e:	9302      	str	r3, [sp, #8]
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	490c      	ldr	r1, [pc, #48]	; (8008954 <xTimerCreateTimerTask+0x58>)
 8008924:	9301      	str	r3, [sp, #4]
 8008926:	2302      	movs	r3, #2
 8008928:	480b      	ldr	r0, [pc, #44]	; (8008958 <xTimerCreateTimerTask+0x5c>)
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	4623      	mov	r3, r4
 800892e:	f7ff fc9d 	bl	800826c <xTaskCreateStatic>
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <xTimerCreateTimerTask+0x60>)
 8008934:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008936:	b940      	cbnz	r0, 800894a <xTimerCreateTimerTask+0x4e>
 8008938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008948:	e7fe      	b.n	8008948 <xTimerCreateTimerTask+0x4c>
}
 800894a:	2001      	movs	r0, #1
 800894c:	b008      	add	sp, #32
 800894e:	bd10      	pop	{r4, pc}
 8008950:	20001050 	.word	0x20001050
 8008954:	0800cbeb 	.word	0x0800cbeb
 8008958:	08008af9 	.word	0x08008af9
 800895c:	20001054 	.word	0x20001054

08008960 <xTimerCreate>:
	{
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008966:	202c      	movs	r0, #44	; 0x2c
	{
 8008968:	460d      	mov	r5, r1
 800896a:	4617      	mov	r7, r2
 800896c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800896e:	f000 fb3b 	bl	8008fe8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008972:	4604      	mov	r4, r0
 8008974:	b1c0      	cbz	r0, 80089a8 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008976:	b945      	cbnz	r5, 800898a <xTimerCreate+0x2a>
 8008978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897c:	f383 8811 	msr	BASEPRI, r3
 8008980:	f3bf 8f6f 	isb	sy
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	e7fe      	b.n	8008988 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 800898a:	f7ff ff65 	bl	8008858 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800898e:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008990:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008994:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8008996:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800899a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800899c:	1d20      	adds	r0, r4, #4
 800899e:	f7fe ffbc 	bl	800791a <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 80089a8:	4620      	mov	r0, r4
 80089aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080089ae <xTimerCreateStatic>:
	{
 80089ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80089b2:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80089b4:	232c      	movs	r3, #44	; 0x2c
 80089b6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80089b8:	9b01      	ldr	r3, [sp, #4]
	{
 80089ba:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 80089bc:	2b2c      	cmp	r3, #44	; 0x2c
	{
 80089be:	460d      	mov	r5, r1
 80089c0:	4617      	mov	r7, r2
 80089c2:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80089c4:	d008      	beq.n	80089d8 <xTimerCreateStatic+0x2a>
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	e7fe      	b.n	80089d6 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 80089d8:	b944      	cbnz	r4, 80089ec <xTimerCreateStatic+0x3e>
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	e7fe      	b.n	80089ea <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80089ec:	b941      	cbnz	r1, 8008a00 <xTimerCreateStatic+0x52>
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	e7fe      	b.n	80089fe <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8008a00:	f7ff ff2a 	bl	8008858 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a04:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a06:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008a08:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008a0a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8008a0e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8008a12:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008a14:	f7fe ff81 	bl	800791a <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008a18:	2301      	movs	r3, #1
	}
 8008a1a:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008a1c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8008a20:	b002      	add	sp, #8
 8008a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008a28 <xTimerGenericCommand>:
{
 8008a28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008a2a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008a2c:	4604      	mov	r4, r0
{
 8008a2e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008a30:	b940      	cbnz	r0, 8008a44 <xTimerGenericCommand+0x1c>
 8008a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a36:	f383 8811 	msr	BASEPRI, r3
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	f3bf 8f4f 	dsb	sy
 8008a42:	e7fe      	b.n	8008a42 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008a44:	4d0c      	ldr	r5, [pc, #48]	; (8008a78 <xTimerGenericCommand+0x50>)
 8008a46:	6828      	ldr	r0, [r5, #0]
 8008a48:	b178      	cbz	r0, 8008a6a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a4a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a4c:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008a50:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a52:	dc0c      	bgt.n	8008a6e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a54:	f7ff fef0 	bl	8008838 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a58:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a5a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a5c:	bf14      	ite	ne
 8008a5e:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a60:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a62:	6828      	ldr	r0, [r5, #0]
 8008a64:	a901      	add	r1, sp, #4
 8008a66:	f7ff f89b 	bl	8007ba0 <xQueueGenericSend>
}
 8008a6a:	b004      	add	sp, #16
 8008a6c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a6e:	2300      	movs	r3, #0
 8008a70:	a901      	add	r1, sp, #4
 8008a72:	f7ff f947 	bl	8007d04 <xQueueGenericSendFromISR>
 8008a76:	e7f8      	b.n	8008a6a <xTimerGenericCommand+0x42>
 8008a78:	20001050 	.word	0x20001050

08008a7c <prvSwitchTimerLists>:
{
 8008a7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a80:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a84:	4d1a      	ldr	r5, [pc, #104]	; (8008af0 <prvSwitchTimerLists+0x74>)
 8008a86:	682b      	ldr	r3, [r5, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	b932      	cbnz	r2, 8008a9a <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8008a8c:	4a19      	ldr	r2, [pc, #100]	; (8008af4 <prvSwitchTimerLists+0x78>)
 8008a8e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a90:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a92:	6029      	str	r1, [r5, #0]
}
 8008a94:	b002      	add	sp, #8
 8008a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a9a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a9c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a9e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008aa0:	1d27      	adds	r7, r4, #4
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	f7fe ff5f 	bl	8007966 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aaa:	4620      	mov	r0, r4
 8008aac:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008aae:	69e3      	ldr	r3, [r4, #28]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d1e8      	bne.n	8008a86 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ab4:	69a3      	ldr	r3, [r4, #24]
 8008ab6:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008ab8:	429e      	cmp	r6, r3
 8008aba:	d206      	bcs.n	8008aca <prvSwitchTimerLists+0x4e>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008abc:	4639      	mov	r1, r7
 8008abe:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ac0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ac2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ac4:	f7fe ff38 	bl	8007938 <vListInsert>
 8008ac8:	e7dd      	b.n	8008a86 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008aca:	2300      	movs	r3, #0
 8008acc:	4632      	mov	r2, r6
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f8cd 8000 	str.w	r8, [sp]
 8008ad6:	f7ff ffa7 	bl	8008a28 <xTimerGenericCommand>
				configASSERT( xResult );
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d1d3      	bne.n	8008a86 <prvSwitchTimerLists+0xa>
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	e7fe      	b.n	8008aee <prvSwitchTimerLists+0x72>
 8008af0:	20000f5c 	.word	0x20000f5c
 8008af4:	20000f60 	.word	0x20000f60

08008af8 <prvTimerTask>:
{
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008afc:	4e72      	ldr	r6, [pc, #456]	; (8008cc8 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 8008afe:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8008cd8 <prvTimerTask+0x1e0>
 8008b02:	46b0      	mov	r8, r6
{
 8008b04:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b06:	6833      	ldr	r3, [r6, #0]
 8008b08:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8008b0c:	f1bb 0f00 	cmp.w	fp, #0
 8008b10:	d04a      	beq.n	8008ba8 <prvTimerTask+0xb0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8008b18:	f7ff fc50 	bl	80083bc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008b1c:	f7ff fc56 	bl	80083cc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008b20:	4d6a      	ldr	r5, [pc, #424]	; (8008ccc <prvTimerTask+0x1d4>)
	xTimeNow = xTaskGetTickCount();
 8008b22:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	462f      	mov	r7, r5
 8008b28:	4298      	cmp	r0, r3
 8008b2a:	d23f      	bcs.n	8008bac <prvTimerTask+0xb4>
		prvSwitchTimerLists();
 8008b2c:	f7ff ffa6 	bl	8008a7c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008b30:	602c      	str	r4, [r5, #0]
			( void ) xTaskResumeAll();
 8008b32:	f7ff fce3 	bl	80084fc <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b36:	f04f 0b00 	mov.w	fp, #0
 8008b3a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8008cd4 <prvTimerTask+0x1dc>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f8da 0000 	ldr.w	r0, [sl]
 8008b44:	a903      	add	r1, sp, #12
 8008b46:	f7ff f93f 	bl	8007dc8 <xQueueReceive>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0db      	beq.n	8008b06 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dbf4      	blt.n	8008b3e <prvTimerTask+0x46>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b54:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b56:	6963      	ldr	r3, [r4, #20]
 8008b58:	b113      	cbz	r3, 8008b60 <prvTimerTask+0x68>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b5a:	1d20      	adds	r0, r4, #4
 8008b5c:	f7fe ff03 	bl	8007966 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008b60:	f7ff fc34 	bl	80083cc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008b64:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8008b66:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008b68:	4298      	cmp	r0, r3
 8008b6a:	d201      	bcs.n	8008b70 <prvTimerTask+0x78>
		prvSwitchTimerLists();
 8008b6c:	f7ff ff86 	bl	8008a7c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008b70:	9b03      	ldr	r3, [sp, #12]
 8008b72:	603d      	str	r5, [r7, #0]
			switch( xMessage.xMessageID )
 8008b74:	2b09      	cmp	r3, #9
 8008b76:	d8e2      	bhi.n	8008b3e <prvTimerTask+0x46>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <prvTimerTask+0x88>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008c41 	.word	0x08008c41
 8008b84:	08008c41 	.word	0x08008c41
 8008b88:	08008c41 	.word	0x08008c41
 8008b8c:	08008b3f 	.word	0x08008b3f
 8008b90:	08008c8f 	.word	0x08008c8f
 8008b94:	08008cb5 	.word	0x08008cb5
 8008b98:	08008c41 	.word	0x08008c41
 8008b9c:	08008c41 	.word	0x08008c41
 8008ba0:	08008b3f 	.word	0x08008b3f
 8008ba4:	08008c8f 	.word	0x08008c8f
		xNextExpireTime = ( TickType_t ) 0U;
 8008ba8:	46da      	mov	sl, fp
 8008baa:	e7b5      	b.n	8008b18 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8008bac:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008bae:	f1bb 0f00 	cmp.w	fp, #0
 8008bb2:	d02a      	beq.n	8008c0a <prvTimerTask+0x112>
 8008bb4:	4582      	cmp	sl, r0
 8008bb6:	d841      	bhi.n	8008c3c <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8008bb8:	f7ff fca0 	bl	80084fc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bc4:	1d28      	adds	r0, r5, #4
 8008bc6:	f7fe fece 	bl	8007966 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008bca:	69eb      	ldr	r3, [r5, #28]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d118      	bne.n	8008c02 <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008bd0:	69a9      	ldr	r1, [r5, #24]
 8008bd2:	4653      	mov	r3, sl
 8008bd4:	4622      	mov	r2, r4
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	4451      	add	r1, sl
 8008bda:	f7ff fe71 	bl	80088c0 <prvInsertTimerInActiveList>
 8008bde:	b180      	cbz	r0, 8008c02 <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008be0:	2300      	movs	r3, #0
 8008be2:	4652      	mov	r2, sl
 8008be4:	4619      	mov	r1, r3
 8008be6:	4628      	mov	r0, r5
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	f7ff ff1d 	bl	8008a28 <xTimerGenericCommand>
			configASSERT( xResult );
 8008bee:	b940      	cbnz	r0, 8008c02 <prvTimerTask+0x10a>
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	e7fe      	b.n	8008c00 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c02:	4628      	mov	r0, r5
 8008c04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008c06:	4798      	blx	r3
}
 8008c08:	e795      	b.n	8008b36 <prvTimerTask+0x3e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008c0a:	4b31      	ldr	r3, [pc, #196]	; (8008cd0 <prvTimerTask+0x1d8>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	fab2 f282 	clz	r2, r2
 8008c14:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008c16:	4b2f      	ldr	r3, [pc, #188]	; (8008cd4 <prvTimerTask+0x1dc>)
 8008c18:	ebaa 0104 	sub.w	r1, sl, r4
 8008c1c:	6818      	ldr	r0, [r3, #0]
 8008c1e:	f7ff f985 	bl	8007f2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008c22:	f7ff fc6b 	bl	80084fc <xTaskResumeAll>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d185      	bne.n	8008b36 <prvTimerTask+0x3e>
					portYIELD_WITHIN_API();
 8008c2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c2e:	f8c9 3000 	str.w	r3, [r9]
 8008c32:	f3bf 8f4f 	dsb	sy
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	e77c      	b.n	8008b36 <prvTimerTask+0x3e>
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	e7ea      	b.n	8008c16 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008c40:	69a1      	ldr	r1, [r4, #24]
 8008c42:	9b04      	ldr	r3, [sp, #16]
 8008c44:	462a      	mov	r2, r5
 8008c46:	4620      	mov	r0, r4
 8008c48:	4419      	add	r1, r3
 8008c4a:	f7ff fe39 	bl	80088c0 <prvInsertTimerInActiveList>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f af75 	beq.w	8008b3e <prvTimerTask+0x46>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c56:	4620      	mov	r0, r4
 8008c58:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008c5a:	69e3      	ldr	r3, [r4, #28]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	f47f af6e 	bne.w	8008b3e <prvTimerTask+0x46>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c62:	2300      	movs	r3, #0
 8008c64:	69a2      	ldr	r2, [r4, #24]
 8008c66:	9904      	ldr	r1, [sp, #16]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f8cd b000 	str.w	fp, [sp]
 8008c70:	4619      	mov	r1, r3
 8008c72:	f7ff fed9 	bl	8008a28 <xTimerGenericCommand>
							configASSERT( xResult );
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f47f af61 	bne.w	8008b3e <prvTimerTask+0x46>
 8008c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	e7fe      	b.n	8008c8c <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c8e:	9904      	ldr	r1, [sp, #16]
 8008c90:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c92:	b941      	cbnz	r1, 8008ca6 <prvTimerTask+0x1ae>
 8008c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c98:	f383 8811 	msr	BASEPRI, r3
 8008c9c:	f3bf 8f6f 	isb	sy
 8008ca0:	f3bf 8f4f 	dsb	sy
 8008ca4:	e7fe      	b.n	8008ca4 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	462a      	mov	r2, r5
 8008caa:	4620      	mov	r0, r4
 8008cac:	4429      	add	r1, r5
 8008cae:	f7ff fe07 	bl	80088c0 <prvInsertTimerInActiveList>
					break;
 8008cb2:	e744      	b.n	8008b3e <prvTimerTask+0x46>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008cb4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f af40 	bne.w	8008b3e <prvTimerTask+0x46>
							vPortFree( pxTimer );
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 fa1c 	bl	80090fc <vPortFree>
 8008cc4:	e73b      	b.n	8008b3e <prvTimerTask+0x46>
 8008cc6:	bf00      	nop
 8008cc8:	20000f5c 	.word	0x20000f5c
 8008ccc:	20001004 	.word	0x20001004
 8008cd0:	20000f60 	.word	0x20000f60
 8008cd4:	20001050 	.word	0x20001050
 8008cd8:	e000ed04 	.word	0xe000ed04

08008cdc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008cdc:	4806      	ldr	r0, [pc, #24]	; (8008cf8 <prvPortStartFirstTask+0x1c>)
 8008cde:	6800      	ldr	r0, [r0, #0]
 8008ce0:	6800      	ldr	r0, [r0, #0]
 8008ce2:	f380 8808 	msr	MSP, r0
 8008ce6:	b662      	cpsie	i
 8008ce8:	b661      	cpsie	f
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	df00      	svc	0
 8008cf4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cf6:	0000      	.short	0x0000
 8008cf8:	e000ed08 	.word	0xe000ed08

08008cfc <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8008cfc:	2300      	movs	r3, #0
{
 8008cfe:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8008d00:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8008d02:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <prvTaskExitError+0x3c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	3301      	adds	r3, #1
 8008d08:	d008      	beq.n	8008d1c <prvTaskExitError+0x20>
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	e7fe      	b.n	8008d1a <prvTaskExitError+0x1e>
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0fc      	beq.n	8008d2c <prvTaskExitError+0x30>
}
 8008d32:	b002      	add	sp, #8
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	2000011c 	.word	0x2000011c

08008d3c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d40:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d44:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d46:	f021 0101 	bic.w	r1, r1, #1
 8008d4a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d4e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d52:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8008d56:	3840      	subs	r0, #64	; 0x40
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	08008cfd 	.word	0x08008cfd

08008d60 <SVC_Handler>:
	__asm volatile (
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <pxCurrentTCBConst2>)
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	6808      	ldr	r0, [r1, #0]
 8008d66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d6a:	f380 8809 	msr	PSP, r0
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f04f 0000 	mov.w	r0, #0
 8008d76:	f380 8811 	msr	BASEPRI, r0
 8008d7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008d7e:	4770      	bx	lr

08008d80 <pxCurrentTCBConst2>:
 8008d80:	20000e34 	.word	0x20000e34

08008d84 <vPortEnterCritical>:
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d94:	4a0a      	ldr	r2, [pc, #40]	; (8008dc0 <vPortEnterCritical+0x3c>)
 8008d96:	6813      	ldr	r3, [r2, #0]
 8008d98:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8008d9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8008d9e:	d10d      	bne.n	8008dbc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <vPortEnterCritical+0x40>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008da8:	d008      	beq.n	8008dbc <vPortEnterCritical+0x38>
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	e7fe      	b.n	8008dba <vPortEnterCritical+0x36>
	}
}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	2000011c 	.word	0x2000011c
 8008dc4:	e000ed04 	.word	0xe000ed04

08008dc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8008dc8:	4a08      	ldr	r2, [pc, #32]	; (8008dec <vPortExitCritical+0x24>)
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	b943      	cbnz	r3, 8008de0 <vPortExitCritical+0x18>
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	e7fe      	b.n	8008dde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8008de0:	3b01      	subs	r3, #1
 8008de2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008de4:	b90b      	cbnz	r3, 8008dea <vPortExitCritical+0x22>
	__asm volatile
 8008de6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dea:	4770      	bx	lr
 8008dec:	2000011c 	.word	0x2000011c

08008df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008df0:	f3ef 8009 	mrs	r0, PSP
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	4b0d      	ldr	r3, [pc, #52]	; (8008e30 <pxCurrentTCBConst>)
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e00:	6010      	str	r0, [r2, #0]
 8008e02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e0a:	f380 8811 	msr	BASEPRI, r0
 8008e0e:	f7ff fc0f 	bl	8008630 <vTaskSwitchContext>
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8811 	msr	BASEPRI, r0
 8008e1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	6808      	ldr	r0, [r1, #0]
 8008e22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e26:	f380 8809 	msr	PSP, r0
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	4770      	bx	lr

08008e30 <pxCurrentTCBConst>:
 8008e30:	20000e34 	.word	0x20000e34

08008e34 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e34:	b508      	push	{r3, lr}
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e46:	f7ff fac7 	bl	80083d8 <xTaskIncrementTick>
 8008e4a:	b118      	cbz	r0, 8008e54 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e50:	4b02      	ldr	r3, [pc, #8]	; (8008e5c <SysTick_Handler+0x28>)
 8008e52:	601a      	str	r2, [r3, #0]
	__asm volatile
 8008e54:	2300      	movs	r3, #0
 8008e56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e5a:	bd08      	pop	{r3, pc}
 8008e5c:	e000ed04 	.word	0xe000ed04

08008e60 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e60:	2300      	movs	r3, #0
 8008e62:	4a08      	ldr	r2, [pc, #32]	; (8008e84 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e64:	4908      	ldr	r1, [pc, #32]	; (8008e88 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e68:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008e6e:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <vPortSetupTimerInterrupt+0x2c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e76:	4906      	ldr	r1, [pc, #24]	; (8008e90 <vPortSetupTimerInterrupt+0x30>)
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e7c:	2307      	movs	r3, #7
 8008e7e:	6013      	str	r3, [r2, #0]
}
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	e000e010 	.word	0xe000e010
 8008e88:	e000e018 	.word	0xe000e018
 8008e8c:	20000000 	.word	0x20000000
 8008e90:	e000e014 	.word	0xe000e014

08008e94 <xPortStartScheduler>:
{
 8008e94:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e96:	4b26      	ldr	r3, [pc, #152]	; (8008f30 <xPortStartScheduler+0x9c>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e98:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e9a:	781a      	ldrb	r2, [r3, #0]
 8008e9c:	b2d2      	uxtb	r2, r2
 8008e9e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ea0:	22ff      	movs	r2, #255	; 0xff
 8008ea2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ea4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ea6:	4a23      	ldr	r2, [pc, #140]	; (8008f34 <xPortStartScheduler+0xa0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008eae:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008eb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008eb6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008eb8:	2307      	movs	r3, #7
 8008eba:	4a1f      	ldr	r2, [pc, #124]	; (8008f38 <xPortStartScheduler+0xa4>)
 8008ebc:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ebe:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8008ec2:	1e5c      	subs	r4, r3, #1
 8008ec4:	0600      	lsls	r0, r0, #24
 8008ec6:	d40c      	bmi.n	8008ee2 <xPortStartScheduler+0x4e>
 8008ec8:	b111      	cbz	r1, 8008ed0 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	d011      	beq.n	8008ef4 <xPortStartScheduler+0x60>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	e7fe      	b.n	8008ee0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ee2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	f88d 3003 	strb.w	r3, [sp, #3]
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	e7e4      	b.n	8008ebe <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ef4:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8008ef8:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008efa:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	4a0c      	ldr	r2, [pc, #48]	; (8008f30 <xPortStartScheduler+0x9c>)
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f04:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <xPortStartScheduler+0xa8>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8008f0c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8008f14:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8008f16:	f7ff ffa3 	bl	8008e60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <xPortStartScheduler+0xac>)
 8008f1c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8008f1e:	f7ff fedd 	bl	8008cdc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8008f22:	f7ff fb85 	bl	8008630 <vTaskSwitchContext>
	prvTaskExitError();
 8008f26:	f7ff fee9 	bl	8008cfc <prvTaskExitError>
}
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd10      	pop	{r4, pc}
 8008f30:	e000e400 	.word	0xe000e400
 8008f34:	20001058 	.word	0x20001058
 8008f38:	2000105c 	.word	0x2000105c
 8008f3c:	e000ed20 	.word	0xe000ed20
 8008f40:	2000011c 	.word	0x2000011c

08008f44 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f44:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f48:	2b0f      	cmp	r3, #15
 8008f4a:	d90e      	bls.n	8008f6a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f4c:	4a10      	ldr	r2, [pc, #64]	; (8008f90 <vPortValidateInterruptPriority+0x4c>)
 8008f4e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f50:	4a10      	ldr	r2, [pc, #64]	; (8008f94 <vPortValidateInterruptPriority+0x50>)
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d908      	bls.n	8008f6a <vPortValidateInterruptPriority+0x26>
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	e7fe      	b.n	8008f68 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <vPortValidateInterruptPriority+0x54>)
 8008f6c:	4a0b      	ldr	r2, [pc, #44]	; (8008f9c <vPortValidateInterruptPriority+0x58>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6812      	ldr	r2, [r2, #0]
 8008f72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d908      	bls.n	8008f8c <vPortValidateInterruptPriority+0x48>
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	e7fe      	b.n	8008f8a <vPortValidateInterruptPriority+0x46>
	}
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	e000e3f0 	.word	0xe000e3f0
 8008f94:	20001058 	.word	0x20001058
 8008f98:	e000ed0c 	.word	0xe000ed0c
 8008f9c:	2000105c 	.word	0x2000105c

08008fa0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fa0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <prvInsertBlockIntoFreeList+0x40>)
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4283      	cmp	r3, r0
 8008faa:	d3fb      	bcc.n	8008fa4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fac:	6854      	ldr	r4, [r2, #4]
 8008fae:	1911      	adds	r1, r2, r4
 8008fb0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb2:	bf01      	itttt	eq
 8008fb4:	6841      	ldreq	r1, [r0, #4]
 8008fb6:	4610      	moveq	r0, r2
 8008fb8:	1909      	addeq	r1, r1, r4
 8008fba:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fbc:	6844      	ldr	r4, [r0, #4]
 8008fbe:	1901      	adds	r1, r0, r4
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	d107      	bne.n	8008fd4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fc4:	4907      	ldr	r1, [pc, #28]	; (8008fe4 <prvInsertBlockIntoFreeList+0x44>)
 8008fc6:	6809      	ldr	r1, [r1, #0]
 8008fc8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fca:	bf1f      	itttt	ne
 8008fcc:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fce:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fd0:	1909      	addne	r1, r1, r4
 8008fd2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fd4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fd6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fd8:	bf18      	it	ne
 8008fda:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	bf00      	nop
 8008fe0:	20001c70 	.word	0x20001c70
 8008fe4:	20001060 	.word	0x20001060

08008fe8 <pvPortMalloc>:
{
 8008fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8008fee:	f7ff f9e5 	bl	80083bc <vTaskSuspendAll>
		if( pxEnd == NULL )
 8008ff2:	4b3b      	ldr	r3, [pc, #236]	; (80090e0 <pvPortMalloc+0xf8>)
 8008ff4:	483b      	ldr	r0, [pc, #236]	; (80090e4 <pvPortMalloc+0xfc>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	469c      	mov	ip, r3
 8008ffa:	b9d2      	cbnz	r2, 8009032 <pvPortMalloc+0x4a>
	xStart.xBlockSize = ( size_t ) 0;
 8008ffc:	2100      	movs	r1, #0
	uxAddress = ( size_t ) ucHeap;
 8008ffe:	4a3a      	ldr	r2, [pc, #232]	; (80090e8 <pvPortMalloc+0x100>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009000:	4b3a      	ldr	r3, [pc, #232]	; (80090ec <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009002:	0755      	lsls	r5, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009004:	bf1c      	itt	ne
 8009006:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009008:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800900c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800900e:	6059      	str	r1, [r3, #4]
	uxAddress -= xHeapStructSize;
 8009010:	4b37      	ldr	r3, [pc, #220]	; (80090f0 <pvPortMalloc+0x108>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009012:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8009016:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800901a:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800901c:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 8009020:	f8cc 3000 	str.w	r3, [ip]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009024:	4b33      	ldr	r3, [pc, #204]	; (80090f4 <pvPortMalloc+0x10c>)
 8009026:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009028:	4b33      	ldr	r3, [pc, #204]	; (80090f8 <pvPortMalloc+0x110>)
 800902a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800902c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009030:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009032:	6807      	ldr	r7, [r0, #0]
 8009034:	4227      	tst	r7, r4
 8009036:	d14e      	bne.n	80090d6 <pvPortMalloc+0xee>
			if( xWantedSize > 0 )
 8009038:	2c00      	cmp	r4, #0
 800903a:	d03f      	beq.n	80090bc <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 800903c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009040:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009042:	bf1c      	itt	ne
 8009044:	f023 0307 	bicne.w	r3, r3, #7
 8009048:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800904a:	2b00      	cmp	r3, #0
 800904c:	d043      	beq.n	80090d6 <pvPortMalloc+0xee>
 800904e:	4a2a      	ldr	r2, [pc, #168]	; (80090f8 <pvPortMalloc+0x110>)
 8009050:	6816      	ldr	r6, [r2, #0]
 8009052:	4690      	mov	r8, r2
 8009054:	429e      	cmp	r6, r3
 8009056:	d33e      	bcc.n	80090d6 <pvPortMalloc+0xee>
				pxBlock = xStart.pxNextFreeBlock;
 8009058:	4a24      	ldr	r2, [pc, #144]	; (80090ec <pvPortMalloc+0x104>)
 800905a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800905c:	6869      	ldr	r1, [r5, #4]
 800905e:	4299      	cmp	r1, r3
 8009060:	d201      	bcs.n	8009066 <pvPortMalloc+0x7e>
 8009062:	6828      	ldr	r0, [r5, #0]
 8009064:	b9a8      	cbnz	r0, 8009092 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8009066:	f8dc 0000 	ldr.w	r0, [ip]
 800906a:	42a8      	cmp	r0, r5
 800906c:	d033      	beq.n	80090d6 <pvPortMalloc+0xee>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800906e:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009070:	1ac9      	subs	r1, r1, r3
 8009072:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009074:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009076:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009078:	d912      	bls.n	80090a0 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800907a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800907c:	0742      	lsls	r2, r0, #29
 800907e:	d00b      	beq.n	8009098 <pvPortMalloc+0xb0>
 8009080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	e7fe      	b.n	8009090 <pvPortMalloc+0xa8>
 8009092:	462a      	mov	r2, r5
 8009094:	4605      	mov	r5, r0
 8009096:	e7e1      	b.n	800905c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009098:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800909a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800909c:	f7ff ff80 	bl	8008fa0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090a0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090a2:	4914      	ldr	r1, [pc, #80]	; (80090f4 <pvPortMalloc+0x10c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090a4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090a6:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80090a8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090aa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090ac:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090b0:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090b2:	bf38      	it	cc
 80090b4:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090b6:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090b8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090ba:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80090bc:	f7ff fa1e 	bl	80084fc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c0:	0763      	lsls	r3, r4, #29
 80090c2:	d00a      	beq.n	80090da <pvPortMalloc+0xf2>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	e7fe      	b.n	80090d4 <pvPortMalloc+0xec>
void *pvReturn = NULL;
 80090d6:	2400      	movs	r4, #0
 80090d8:	e7f0      	b.n	80090bc <pvPortMalloc+0xd4>
}
 80090da:	4620      	mov	r0, r4
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e0:	20001060 	.word	0x20001060
 80090e4:	20001c64 	.word	0x20001c64
 80090e8:	20001064 	.word	0x20001064
 80090ec:	20001c70 	.word	0x20001c70
 80090f0:	20001c5c 	.word	0x20001c5c
 80090f4:	20001c6c 	.word	0x20001c6c
 80090f8:	20001c68 	.word	0x20001c68

080090fc <vPortFree>:
{
 80090fc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80090fe:	4604      	mov	r4, r0
 8009100:	b370      	cbz	r0, 8009160 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009102:	4a18      	ldr	r2, [pc, #96]	; (8009164 <vPortFree+0x68>)
 8009104:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	4213      	tst	r3, r2
 800910c:	d108      	bne.n	8009120 <vPortFree+0x24>
 800910e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009112:	f383 8811 	msr	BASEPRI, r3
 8009116:	f3bf 8f6f 	isb	sy
 800911a:	f3bf 8f4f 	dsb	sy
 800911e:	e7fe      	b.n	800911e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009120:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009124:	b141      	cbz	r1, 8009138 <vPortFree+0x3c>
 8009126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800912a:	f383 8811 	msr	BASEPRI, r3
 800912e:	f3bf 8f6f 	isb	sy
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	e7fe      	b.n	8009136 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009138:	ea23 0302 	bic.w	r3, r3, r2
 800913c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009140:	f7ff f93c 	bl	80083bc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009144:	4a08      	ldr	r2, [pc, #32]	; (8009168 <vPortFree+0x6c>)
 8009146:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800914a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800914c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009150:	440b      	add	r3, r1
 8009152:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009154:	f7ff ff24 	bl	8008fa0 <prvInsertBlockIntoFreeList>
}
 8009158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800915c:	f7ff b9ce 	b.w	80084fc <xTaskResumeAll>
}
 8009160:	bd10      	pop	{r4, pc}
 8009162:	bf00      	nop
 8009164:	20001c64 	.word	0x20001c64
 8009168:	20001c68 	.word	0x20001c68

0800916c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800916c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800916e:	2200      	movs	r2, #0
 8009170:	490e      	ldr	r1, [pc, #56]	; (80091ac <MX_USB_DEVICE_Init+0x40>)
 8009172:	480f      	ldr	r0, [pc, #60]	; (80091b0 <MX_USB_DEVICE_Init+0x44>)
 8009174:	f7fd ffb2 	bl	80070dc <USBD_Init>
 8009178:	b108      	cbz	r0, 800917e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800917a:	f7f8 fae3 	bl	8001744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800917e:	490d      	ldr	r1, [pc, #52]	; (80091b4 <MX_USB_DEVICE_Init+0x48>)
 8009180:	480b      	ldr	r0, [pc, #44]	; (80091b0 <MX_USB_DEVICE_Init+0x44>)
 8009182:	f7fd ffc0 	bl	8007106 <USBD_RegisterClass>
 8009186:	b108      	cbz	r0, 800918c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8009188:	f7f8 fadc 	bl	8001744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800918c:	490a      	ldr	r1, [pc, #40]	; (80091b8 <MX_USB_DEVICE_Init+0x4c>)
 800918e:	4808      	ldr	r0, [pc, #32]	; (80091b0 <MX_USB_DEVICE_Init+0x44>)
 8009190:	f7fd ff5f 	bl	8007052 <USBD_CDC_RegisterInterface>
 8009194:	b108      	cbz	r0, 800919a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009196:	f7f8 fad5 	bl	8001744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800919a:	4805      	ldr	r0, [pc, #20]	; (80091b0 <MX_USB_DEVICE_Init+0x44>)
 800919c:	f7fd ffba 	bl	8007114 <USBD_Start>
 80091a0:	b118      	cbz	r0, 80091aa <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80091a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80091a6:	f7f8 bacd 	b.w	8001744 <Error_Handler>
}
 80091aa:	bd08      	pop	{r3, pc}
 80091ac:	20000130 	.word	0x20000130
 80091b0:	20002470 	.word	0x20002470
 80091b4:	2000000c 	.word	0x2000000c
 80091b8:	20000120 	.word	0x20000120

080091bc <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80091bc:	2000      	movs	r0, #0
 80091be:	4770      	bx	lr

080091c0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80091c0:	2000      	movs	r0, #0
 80091c2:	4770      	bx	lr

080091c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091c6:	4c05      	ldr	r4, [pc, #20]	; (80091dc <CDC_Receive_FS+0x18>)
{
 80091c8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80091ca:	4620      	mov	r0, r4
 80091cc:	f7fd ff50 	bl	8007070 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80091d0:	4620      	mov	r0, r4
 80091d2:	f7fd ff6c 	bl	80070ae <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80091d6:	2000      	movs	r0, #0
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	bf00      	nop
 80091dc:	20002470 	.word	0x20002470

080091e0 <CDC_Init_FS>:
{
 80091e0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091e2:	4c06      	ldr	r4, [pc, #24]	; (80091fc <CDC_Init_FS+0x1c>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	4620      	mov	r0, r4
 80091e8:	4905      	ldr	r1, [pc, #20]	; (8009200 <CDC_Init_FS+0x20>)
 80091ea:	f7fd ff39 	bl	8007060 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091ee:	4620      	mov	r0, r4
 80091f0:	4904      	ldr	r1, [pc, #16]	; (8009204 <CDC_Init_FS+0x24>)
 80091f2:	f7fd ff3d 	bl	8007070 <USBD_CDC_SetRxBuffer>
}
 80091f6:	2000      	movs	r0, #0
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	20002470 	.word	0x20002470
 8009200:	20002734 	.word	0x20002734
 8009204:	20002b1c 	.word	0x20002b1c

08009208 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009208:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800920a:	4c09      	ldr	r4, [pc, #36]	; (8009230 <CDC_Transmit_FS+0x28>)
{
 800920c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800920e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8009212:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009216:	b943      	cbnz	r3, 800922a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009218:	4601      	mov	r1, r0
 800921a:	4620      	mov	r0, r4
 800921c:	f7fd ff20 	bl	8007060 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009220:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8009222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009226:	f7fd bf29 	b.w	800707c <USBD_CDC_TransmitPacket>
}
 800922a:	2001      	movs	r0, #1
 800922c:	bd10      	pop	{r4, pc}
 800922e:	bf00      	nop
 8009230:	20002470 	.word	0x20002470

08009234 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009234:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009236:	4801      	ldr	r0, [pc, #4]	; (800923c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009238:	800b      	strh	r3, [r1, #0]
}
 800923a:	4770      	bx	lr
 800923c:	2000014c 	.word	0x2000014c

08009240 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009240:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009242:	4801      	ldr	r0, [pc, #4]	; (8009248 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009244:	800b      	strh	r3, [r1, #0]
}
 8009246:	4770      	bx	lr
 8009248:	20000160 	.word	0x20000160

0800924c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800924c:	2300      	movs	r3, #0
 800924e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009250:	461e      	mov	r6, r3
 8009252:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 8009254:	0f04      	lsrs	r4, r0, #28
 8009256:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800925a:	bf34      	ite	cc
 800925c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800925e:	3437      	addcs	r4, #55	; 0x37
 8009260:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8009264:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8009268:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 800926a:	b2dc      	uxtb	r4, r3
 800926c:	42a2      	cmp	r2, r4
    value = value << 4;
 800926e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8009272:	d8ef      	bhi.n	8009254 <IntToUnicode+0x8>
  }
}
 8009274:	bd70      	pop	{r4, r5, r6, pc}
	...

08009278 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009278:	231a      	movs	r3, #26
{
 800927a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800927c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800927e:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <USBD_FS_SerialStrDescriptor+0x2c>)
 8009280:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009282:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8009284:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8009286:	18c0      	adds	r0, r0, r3
 8009288:	d00a      	beq.n	80092a0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800928a:	4b07      	ldr	r3, [pc, #28]	; (80092a8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800928c:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800928e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009290:	4906      	ldr	r1, [pc, #24]	; (80092ac <USBD_FS_SerialStrDescriptor+0x34>)
 8009292:	f7ff ffdb 	bl	800924c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009296:	2204      	movs	r2, #4
 8009298:	4620      	mov	r0, r4
 800929a:	4905      	ldr	r1, [pc, #20]	; (80092b0 <USBD_FS_SerialStrDescriptor+0x38>)
 800929c:	f7ff ffd6 	bl	800924c <IntToUnicode>
}
 80092a0:	4804      	ldr	r0, [pc, #16]	; (80092b4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80092a2:	bd10      	pop	{r4, pc}
 80092a4:	1ffff7e8 	.word	0x1ffff7e8
 80092a8:	1ffff7ec 	.word	0x1ffff7ec
 80092ac:	20000166 	.word	0x20000166
 80092b0:	20000176 	.word	0x20000176
 80092b4:	20000164 	.word	0x20000164

080092b8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80092b8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092ba:	4c04      	ldr	r4, [pc, #16]	; (80092cc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80092bc:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092be:	4804      	ldr	r0, [pc, #16]	; (80092d0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80092c0:	4621      	mov	r1, r4
 80092c2:	f7fe fa4c 	bl	800775e <USBD_GetString>
}
 80092c6:	4620      	mov	r0, r4
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	bf00      	nop
 80092cc:	20002f04 	.word	0x20002f04
 80092d0:	0800cbf3 	.word	0x0800cbf3

080092d4 <USBD_FS_ProductStrDescriptor>:
{
 80092d4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092d6:	4c04      	ldr	r4, [pc, #16]	; (80092e8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80092d8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <USBD_FS_ProductStrDescriptor+0x18>)
 80092dc:	4621      	mov	r1, r4
 80092de:	f7fe fa3e 	bl	800775e <USBD_GetString>
}
 80092e2:	4620      	mov	r0, r4
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	bf00      	nop
 80092e8:	20002f04 	.word	0x20002f04
 80092ec:	0800cc06 	.word	0x0800cc06

080092f0 <USBD_FS_ConfigStrDescriptor>:
{
 80092f0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092f2:	4c04      	ldr	r4, [pc, #16]	; (8009304 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80092f4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092f6:	4804      	ldr	r0, [pc, #16]	; (8009308 <USBD_FS_ConfigStrDescriptor+0x18>)
 80092f8:	4621      	mov	r1, r4
 80092fa:	f7fe fa30 	bl	800775e <USBD_GetString>
}
 80092fe:	4620      	mov	r0, r4
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	20002f04 	.word	0x20002f04
 8009308:	0800cc1c 	.word	0x0800cc1c

0800930c <USBD_FS_InterfaceStrDescriptor>:
{
 800930c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800930e:	4c04      	ldr	r4, [pc, #16]	; (8009320 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8009310:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009312:	4804      	ldr	r0, [pc, #16]	; (8009324 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009314:	4621      	mov	r1, r4
 8009316:	f7fe fa22 	bl	800775e <USBD_GetString>
}
 800931a:	4620      	mov	r0, r4
 800931c:	bd10      	pop	{r4, pc}
 800931e:	bf00      	nop
 8009320:	20002f04 	.word	0x20002f04
 8009324:	0800cc27 	.word	0x0800cc27

08009328 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009328:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800932a:	4b0e      	ldr	r3, [pc, #56]	; (8009364 <HAL_PCD_MspInit+0x3c>)
 800932c:	6802      	ldr	r2, [r0, #0]
 800932e:	429a      	cmp	r2, r3
 8009330:	d115      	bne.n	800935e <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009332:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8009336:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009338:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 800933a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800933e:	61da      	str	r2, [r3, #28]
 8009340:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009342:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009344:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009348:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800934a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800934c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800934e:	f7f9 fbbf 	bl	8002ad0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009352:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009354:	b003      	add	sp, #12
 8009356:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800935a:	f7f9 bbeb 	b.w	8002b34 <HAL_NVIC_EnableIRQ>
}
 800935e:	b003      	add	sp, #12
 8009360:	f85d fb04 	ldr.w	pc, [sp], #4
 8009364:	40005c00 	.word	0x40005c00

08009368 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009368:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800936c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009370:	f7fd bee7 	b.w	8007142 <USBD_LL_SetupStage>

08009374 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009374:	2328      	movs	r3, #40	; 0x28
 8009376:	fb03 0301 	mla	r3, r3, r1, r0
 800937a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800937e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009382:	f7fd bf0b 	b.w	800719c <USBD_LL_DataOutStage>

08009386 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009386:	2328      	movs	r3, #40	; 0x28
 8009388:	fb03 0301 	mla	r3, r3, r1, r0
 800938c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009392:	f7fd bf3d 	b.w	8007210 <USBD_LL_DataInStage>

08009396 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009396:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800939a:	f7fd bfd1 	b.w	8007340 <USBD_LL_SOF>

0800939e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800939e:	6883      	ldr	r3, [r0, #8]
{
 80093a0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a2:	2b02      	cmp	r3, #2
{
 80093a4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a6:	d001      	beq.n	80093ac <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80093a8:	f7f8 f9cc 	bl	8001744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ac:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 80093b0:	2101      	movs	r1, #1
 80093b2:	f7fd ffaf 	bl	8007314 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093b6:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 80093ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093be:	f7fd bf82 	b.w	80072c6 <USBD_LL_Reset>
	...

080093c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b510      	push	{r4, lr}
 80093c6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093c8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80093cc:	f7fd ffa5 	bl	800731a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093d0:	69a3      	ldr	r3, [r4, #24]
 80093d2:	b123      	cbz	r3, 80093de <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093d4:	4a02      	ldr	r2, [pc, #8]	; (80093e0 <HAL_PCD_SuspendCallback+0x1c>)
 80093d6:	6913      	ldr	r3, [r2, #16]
 80093d8:	f043 0306 	orr.w	r3, r3, #6
 80093dc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093de:	bd10      	pop	{r4, pc}
 80093e0:	e000ed00 	.word	0xe000ed00

080093e4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093e4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80093e8:	f7fd bfa0 	b.w	800732c <USBD_LL_Resume>

080093ec <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093ec:	2308      	movs	r3, #8
{
 80093ee:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093f0:	4a1d      	ldr	r2, [pc, #116]	; (8009468 <USBD_LL_Init+0x7c>)
{
 80093f2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 80093f4:	481d      	ldr	r0, [pc, #116]	; (800946c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80093f6:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80093fa:	2302      	movs	r3, #2
 80093fc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80093fe:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8009400:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009404:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009408:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800940c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800940e:	f7fa fe2f 	bl	8004070 <HAL_PCD_Init>
 8009412:	b108      	cbz	r0, 8009418 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8009414:	f7f8 f996 	bl	8001744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009418:	2200      	movs	r2, #0
 800941a:	2318      	movs	r3, #24
 800941c:	4611      	mov	r1, r2
 800941e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009422:	f7fb fc03 	bl	8004c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009426:	2358      	movs	r3, #88	; 0x58
 8009428:	2200      	movs	r2, #0
 800942a:	2180      	movs	r1, #128	; 0x80
 800942c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009430:	f7fb fbfc 	bl	8004c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009434:	23c0      	movs	r3, #192	; 0xc0
 8009436:	2200      	movs	r2, #0
 8009438:	2181      	movs	r1, #129	; 0x81
 800943a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800943e:	f7fb fbf5 	bl	8004c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009442:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009446:	2200      	movs	r2, #0
 8009448:	2101      	movs	r1, #1
 800944a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800944e:	f7fb fbed 	bl	8004c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009456:	2200      	movs	r2, #0
 8009458:	2182      	movs	r1, #130	; 0x82
 800945a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800945e:	f7fb fbe5 	bl	8004c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009462:	2000      	movs	r0, #0
 8009464:	bd10      	pop	{r4, pc}
 8009466:	bf00      	nop
 8009468:	40005c00 	.word	0x40005c00
 800946c:	20003104 	.word	0x20003104

08009470 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009470:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8009472:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009476:	f7fa fe74 	bl	8004162 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800947a:	2803      	cmp	r0, #3
 800947c:	bf96      	itet	ls
 800947e:	4b02      	ldrls	r3, [pc, #8]	; (8009488 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8009480:	2002      	movhi	r0, #2
 8009482:	5c18      	ldrbls	r0, [r3, r0]
}
 8009484:	bd08      	pop	{r3, pc}
 8009486:	bf00      	nop
 8009488:	0800cc35 	.word	0x0800cc35

0800948c <USBD_LL_OpenEP>:
{
 800948c:	b510      	push	{r4, lr}
 800948e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009490:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8009494:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009496:	4623      	mov	r3, r4
 8009498:	f7fb face 	bl	8004a38 <HAL_PCD_EP_Open>
  switch (hal_status)
 800949c:	2803      	cmp	r0, #3
 800949e:	bf96      	itet	ls
 80094a0:	4b01      	ldrls	r3, [pc, #4]	; (80094a8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094a2:	2002      	movhi	r0, #2
 80094a4:	5c18      	ldrbls	r0, [r3, r0]
}
 80094a6:	bd10      	pop	{r4, pc}
 80094a8:	0800cc35 	.word	0x0800cc35

080094ac <USBD_LL_CloseEP>:
{
 80094ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80094b2:	f7fb faf3 	bl	8004a9c <HAL_PCD_EP_Close>
  switch (hal_status)
 80094b6:	2803      	cmp	r0, #3
 80094b8:	bf96      	itet	ls
 80094ba:	4b02      	ldrls	r3, [pc, #8]	; (80094c4 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094bc:	2002      	movhi	r0, #2
 80094be:	5c18      	ldrbls	r0, [r3, r0]
}
 80094c0:	bd08      	pop	{r3, pc}
 80094c2:	bf00      	nop
 80094c4:	0800cc35 	.word	0x0800cc35

080094c8 <USBD_LL_StallEP>:
{
 80094c8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094ca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80094ce:	f7fb fb47 	bl	8004b60 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80094d2:	2803      	cmp	r0, #3
 80094d4:	bf96      	itet	ls
 80094d6:	4b02      	ldrls	r3, [pc, #8]	; (80094e0 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80094d8:	2002      	movhi	r0, #2
 80094da:	5c18      	ldrbls	r0, [r3, r0]
}
 80094dc:	bd08      	pop	{r3, pc}
 80094de:	bf00      	nop
 80094e0:	0800cc35 	.word	0x0800cc35

080094e4 <USBD_LL_ClearStallEP>:
{
 80094e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094e6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80094ea:	f7fb fb6d 	bl	8004bc8 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80094ee:	2803      	cmp	r0, #3
 80094f0:	bf96      	itet	ls
 80094f2:	4b02      	ldrls	r3, [pc, #8]	; (80094fc <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094f4:	2002      	movhi	r0, #2
 80094f6:	5c18      	ldrbls	r0, [r3, r0]
}
 80094f8:	bd08      	pop	{r3, pc}
 80094fa:	bf00      	nop
 80094fc:	0800cc35 	.word	0x0800cc35

08009500 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009500:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8009502:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009506:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800950a:	bf1b      	ittet	ne
 800950c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8009510:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009514:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009518:	1889      	addne	r1, r1, r2
 800951a:	bf14      	ite	ne
 800951c:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800951e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8009522:	4770      	bx	lr

08009524 <USBD_LL_SetUSBAddress>:
{
 8009524:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009526:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800952a:	f7fa fe33 	bl	8004194 <HAL_PCD_SetAddress>
  switch (hal_status)
 800952e:	2803      	cmp	r0, #3
 8009530:	bf96      	itet	ls
 8009532:	4b02      	ldrls	r3, [pc, #8]	; (800953c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009534:	2002      	movhi	r0, #2
 8009536:	5c18      	ldrbls	r0, [r3, r0]
}
 8009538:	bd08      	pop	{r3, pc}
 800953a:	bf00      	nop
 800953c:	0800cc35 	.word	0x0800cc35

08009540 <USBD_LL_Transmit>:
{
 8009540:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009542:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009546:	f7fb faf1 	bl	8004b2c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800954a:	2803      	cmp	r0, #3
 800954c:	bf96      	itet	ls
 800954e:	4b02      	ldrls	r3, [pc, #8]	; (8009558 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009550:	2002      	movhi	r0, #2
 8009552:	5c18      	ldrbls	r0, [r3, r0]
}
 8009554:	bd08      	pop	{r3, pc}
 8009556:	bf00      	nop
 8009558:	0800cc35 	.word	0x0800cc35

0800955c <USBD_LL_PrepareReceive>:
{
 800955c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800955e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009562:	f7fb fac4 	bl	8004aee <HAL_PCD_EP_Receive>
  switch (hal_status)
 8009566:	2803      	cmp	r0, #3
 8009568:	bf96      	itet	ls
 800956a:	4b02      	ldrls	r3, [pc, #8]	; (8009574 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800956c:	2002      	movhi	r0, #2
 800956e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009570:	bd08      	pop	{r3, pc}
 8009572:	bf00      	nop
 8009574:	0800cc35 	.word	0x0800cc35

08009578 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009578:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800957c:	f7fb bace 	b.w	8004b1c <HAL_PCD_EP_GetRxCount>

08009580 <USBD_static_malloc>:
}
 8009580:	4800      	ldr	r0, [pc, #0]	; (8009584 <USBD_static_malloc+0x4>)
 8009582:	4770      	bx	lr
 8009584:	20001c78 	.word	0x20001c78

08009588 <USBD_static_free>:
}
 8009588:	4770      	bx	lr

0800958a <HAL_PCDEx_SetConnectionState>:
}
 800958a:	4770      	bx	lr

0800958c <__errno>:
 800958c:	4b01      	ldr	r3, [pc, #4]	; (8009594 <__errno+0x8>)
 800958e:	6818      	ldr	r0, [r3, #0]
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000180 	.word	0x20000180

08009598 <__libc_init_array>:
 8009598:	b570      	push	{r4, r5, r6, lr}
 800959a:	2600      	movs	r6, #0
 800959c:	4d0c      	ldr	r5, [pc, #48]	; (80095d0 <__libc_init_array+0x38>)
 800959e:	4c0d      	ldr	r4, [pc, #52]	; (80095d4 <__libc_init_array+0x3c>)
 80095a0:	1b64      	subs	r4, r4, r5
 80095a2:	10a4      	asrs	r4, r4, #2
 80095a4:	42a6      	cmp	r6, r4
 80095a6:	d109      	bne.n	80095bc <__libc_init_array+0x24>
 80095a8:	f002 feba 	bl	800c320 <_init>
 80095ac:	2600      	movs	r6, #0
 80095ae:	4d0a      	ldr	r5, [pc, #40]	; (80095d8 <__libc_init_array+0x40>)
 80095b0:	4c0a      	ldr	r4, [pc, #40]	; (80095dc <__libc_init_array+0x44>)
 80095b2:	1b64      	subs	r4, r4, r5
 80095b4:	10a4      	asrs	r4, r4, #2
 80095b6:	42a6      	cmp	r6, r4
 80095b8:	d105      	bne.n	80095c6 <__libc_init_array+0x2e>
 80095ba:	bd70      	pop	{r4, r5, r6, pc}
 80095bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c0:	4798      	blx	r3
 80095c2:	3601      	adds	r6, #1
 80095c4:	e7ee      	b.n	80095a4 <__libc_init_array+0xc>
 80095c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ca:	4798      	blx	r3
 80095cc:	3601      	adds	r6, #1
 80095ce:	e7f2      	b.n	80095b6 <__libc_init_array+0x1e>
 80095d0:	0800d01c 	.word	0x0800d01c
 80095d4:	0800d01c 	.word	0x0800d01c
 80095d8:	0800d01c 	.word	0x0800d01c
 80095dc:	0800d020 	.word	0x0800d020

080095e0 <memcpy>:
 80095e0:	440a      	add	r2, r1
 80095e2:	4291      	cmp	r1, r2
 80095e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80095e8:	d100      	bne.n	80095ec <memcpy+0xc>
 80095ea:	4770      	bx	lr
 80095ec:	b510      	push	{r4, lr}
 80095ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f2:	4291      	cmp	r1, r2
 80095f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095f8:	d1f9      	bne.n	80095ee <memcpy+0xe>
 80095fa:	bd10      	pop	{r4, pc}

080095fc <memset>:
 80095fc:	4603      	mov	r3, r0
 80095fe:	4402      	add	r2, r0
 8009600:	4293      	cmp	r3, r2
 8009602:	d100      	bne.n	8009606 <memset+0xa>
 8009604:	4770      	bx	lr
 8009606:	f803 1b01 	strb.w	r1, [r3], #1
 800960a:	e7f9      	b.n	8009600 <memset+0x4>

0800960c <__cvt>:
 800960c:	2b00      	cmp	r3, #0
 800960e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009612:	461f      	mov	r7, r3
 8009614:	bfbb      	ittet	lt
 8009616:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800961a:	461f      	movlt	r7, r3
 800961c:	2300      	movge	r3, #0
 800961e:	232d      	movlt	r3, #45	; 0x2d
 8009620:	b088      	sub	sp, #32
 8009622:	4614      	mov	r4, r2
 8009624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009626:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009628:	7013      	strb	r3, [r2, #0]
 800962a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800962c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009630:	f023 0820 	bic.w	r8, r3, #32
 8009634:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009638:	d005      	beq.n	8009646 <__cvt+0x3a>
 800963a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800963e:	d100      	bne.n	8009642 <__cvt+0x36>
 8009640:	3501      	adds	r5, #1
 8009642:	2302      	movs	r3, #2
 8009644:	e000      	b.n	8009648 <__cvt+0x3c>
 8009646:	2303      	movs	r3, #3
 8009648:	aa07      	add	r2, sp, #28
 800964a:	9204      	str	r2, [sp, #16]
 800964c:	aa06      	add	r2, sp, #24
 800964e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009652:	e9cd 3500 	strd	r3, r5, [sp]
 8009656:	4622      	mov	r2, r4
 8009658:	463b      	mov	r3, r7
 800965a:	f000 fce5 	bl	800a028 <_dtoa_r>
 800965e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009662:	4606      	mov	r6, r0
 8009664:	d102      	bne.n	800966c <__cvt+0x60>
 8009666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009668:	07db      	lsls	r3, r3, #31
 800966a:	d522      	bpl.n	80096b2 <__cvt+0xa6>
 800966c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009670:	eb06 0905 	add.w	r9, r6, r5
 8009674:	d110      	bne.n	8009698 <__cvt+0x8c>
 8009676:	7833      	ldrb	r3, [r6, #0]
 8009678:	2b30      	cmp	r3, #48	; 0x30
 800967a:	d10a      	bne.n	8009692 <__cvt+0x86>
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	4620      	mov	r0, r4
 8009682:	4639      	mov	r1, r7
 8009684:	f7f7 f990 	bl	80009a8 <__aeabi_dcmpeq>
 8009688:	b918      	cbnz	r0, 8009692 <__cvt+0x86>
 800968a:	f1c5 0501 	rsb	r5, r5, #1
 800968e:	f8ca 5000 	str.w	r5, [sl]
 8009692:	f8da 3000 	ldr.w	r3, [sl]
 8009696:	4499      	add	r9, r3
 8009698:	2200      	movs	r2, #0
 800969a:	2300      	movs	r3, #0
 800969c:	4620      	mov	r0, r4
 800969e:	4639      	mov	r1, r7
 80096a0:	f7f7 f982 	bl	80009a8 <__aeabi_dcmpeq>
 80096a4:	b108      	cbz	r0, 80096aa <__cvt+0x9e>
 80096a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80096aa:	2230      	movs	r2, #48	; 0x30
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	454b      	cmp	r3, r9
 80096b0:	d307      	bcc.n	80096c2 <__cvt+0xb6>
 80096b2:	4630      	mov	r0, r6
 80096b4:	9b07      	ldr	r3, [sp, #28]
 80096b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096b8:	1b9b      	subs	r3, r3, r6
 80096ba:	6013      	str	r3, [r2, #0]
 80096bc:	b008      	add	sp, #32
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	1c59      	adds	r1, r3, #1
 80096c4:	9107      	str	r1, [sp, #28]
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e7f0      	b.n	80096ac <__cvt+0xa0>

080096ca <__exponent>:
 80096ca:	4603      	mov	r3, r0
 80096cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096ce:	2900      	cmp	r1, #0
 80096d0:	f803 2b02 	strb.w	r2, [r3], #2
 80096d4:	bfb6      	itet	lt
 80096d6:	222d      	movlt	r2, #45	; 0x2d
 80096d8:	222b      	movge	r2, #43	; 0x2b
 80096da:	4249      	neglt	r1, r1
 80096dc:	2909      	cmp	r1, #9
 80096de:	7042      	strb	r2, [r0, #1]
 80096e0:	dd2b      	ble.n	800973a <__exponent+0x70>
 80096e2:	f10d 0407 	add.w	r4, sp, #7
 80096e6:	46a4      	mov	ip, r4
 80096e8:	270a      	movs	r7, #10
 80096ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80096ee:	460a      	mov	r2, r1
 80096f0:	46a6      	mov	lr, r4
 80096f2:	fb07 1516 	mls	r5, r7, r6, r1
 80096f6:	2a63      	cmp	r2, #99	; 0x63
 80096f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80096fc:	4631      	mov	r1, r6
 80096fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8009702:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009706:	dcf0      	bgt.n	80096ea <__exponent+0x20>
 8009708:	3130      	adds	r1, #48	; 0x30
 800970a:	f1ae 0502 	sub.w	r5, lr, #2
 800970e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009712:	4629      	mov	r1, r5
 8009714:	1c44      	adds	r4, r0, #1
 8009716:	4561      	cmp	r1, ip
 8009718:	d30a      	bcc.n	8009730 <__exponent+0x66>
 800971a:	f10d 0209 	add.w	r2, sp, #9
 800971e:	eba2 020e 	sub.w	r2, r2, lr
 8009722:	4565      	cmp	r5, ip
 8009724:	bf88      	it	hi
 8009726:	2200      	movhi	r2, #0
 8009728:	4413      	add	r3, r2
 800972a:	1a18      	subs	r0, r3, r0
 800972c:	b003      	add	sp, #12
 800972e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009734:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009738:	e7ed      	b.n	8009716 <__exponent+0x4c>
 800973a:	2330      	movs	r3, #48	; 0x30
 800973c:	3130      	adds	r1, #48	; 0x30
 800973e:	7083      	strb	r3, [r0, #2]
 8009740:	70c1      	strb	r1, [r0, #3]
 8009742:	1d03      	adds	r3, r0, #4
 8009744:	e7f1      	b.n	800972a <__exponent+0x60>
	...

08009748 <_printf_float>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	b091      	sub	sp, #68	; 0x44
 800974e:	460c      	mov	r4, r1
 8009750:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009754:	4616      	mov	r6, r2
 8009756:	461f      	mov	r7, r3
 8009758:	4605      	mov	r5, r0
 800975a:	f001 fb49 	bl	800adf0 <_localeconv_r>
 800975e:	6803      	ldr	r3, [r0, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	9309      	str	r3, [sp, #36]	; 0x24
 8009764:	f7f6 fcf4 	bl	8000150 <strlen>
 8009768:	2300      	movs	r3, #0
 800976a:	930e      	str	r3, [sp, #56]	; 0x38
 800976c:	f8d8 3000 	ldr.w	r3, [r8]
 8009770:	900a      	str	r0, [sp, #40]	; 0x28
 8009772:	3307      	adds	r3, #7
 8009774:	f023 0307 	bic.w	r3, r3, #7
 8009778:	f103 0208 	add.w	r2, r3, #8
 800977c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009780:	f8d4 b000 	ldr.w	fp, [r4]
 8009784:	f8c8 2000 	str.w	r2, [r8]
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009790:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009794:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009798:	930b      	str	r3, [sp, #44]	; 0x2c
 800979a:	f04f 32ff 	mov.w	r2, #4294967295
 800979e:	4640      	mov	r0, r8
 80097a0:	4b9c      	ldr	r3, [pc, #624]	; (8009a14 <_printf_float+0x2cc>)
 80097a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097a4:	f7f7 f932 	bl	8000a0c <__aeabi_dcmpun>
 80097a8:	bb70      	cbnz	r0, 8009808 <_printf_float+0xc0>
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	4640      	mov	r0, r8
 80097b0:	4b98      	ldr	r3, [pc, #608]	; (8009a14 <_printf_float+0x2cc>)
 80097b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b4:	f7f7 f90c 	bl	80009d0 <__aeabi_dcmple>
 80097b8:	bb30      	cbnz	r0, 8009808 <_printf_float+0xc0>
 80097ba:	2200      	movs	r2, #0
 80097bc:	2300      	movs	r3, #0
 80097be:	4640      	mov	r0, r8
 80097c0:	4651      	mov	r1, sl
 80097c2:	f7f7 f8fb 	bl	80009bc <__aeabi_dcmplt>
 80097c6:	b110      	cbz	r0, 80097ce <_printf_float+0x86>
 80097c8:	232d      	movs	r3, #45	; 0x2d
 80097ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097ce:	4b92      	ldr	r3, [pc, #584]	; (8009a18 <_printf_float+0x2d0>)
 80097d0:	4892      	ldr	r0, [pc, #584]	; (8009a1c <_printf_float+0x2d4>)
 80097d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80097d6:	bf94      	ite	ls
 80097d8:	4698      	movls	r8, r3
 80097da:	4680      	movhi	r8, r0
 80097dc:	2303      	movs	r3, #3
 80097de:	f04f 0a00 	mov.w	sl, #0
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	f02b 0304 	bic.w	r3, fp, #4
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	4633      	mov	r3, r6
 80097ec:	4621      	mov	r1, r4
 80097ee:	4628      	mov	r0, r5
 80097f0:	9700      	str	r7, [sp, #0]
 80097f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80097f4:	f000 f9d4 	bl	8009ba0 <_printf_common>
 80097f8:	3001      	adds	r0, #1
 80097fa:	f040 8090 	bne.w	800991e <_printf_float+0x1d6>
 80097fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009802:	b011      	add	sp, #68	; 0x44
 8009804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009808:	4642      	mov	r2, r8
 800980a:	4653      	mov	r3, sl
 800980c:	4640      	mov	r0, r8
 800980e:	4651      	mov	r1, sl
 8009810:	f7f7 f8fc 	bl	8000a0c <__aeabi_dcmpun>
 8009814:	b148      	cbz	r0, 800982a <_printf_float+0xe2>
 8009816:	f1ba 0f00 	cmp.w	sl, #0
 800981a:	bfb8      	it	lt
 800981c:	232d      	movlt	r3, #45	; 0x2d
 800981e:	4880      	ldr	r0, [pc, #512]	; (8009a20 <_printf_float+0x2d8>)
 8009820:	bfb8      	it	lt
 8009822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009826:	4b7f      	ldr	r3, [pc, #508]	; (8009a24 <_printf_float+0x2dc>)
 8009828:	e7d3      	b.n	80097d2 <_printf_float+0x8a>
 800982a:	6863      	ldr	r3, [r4, #4]
 800982c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009830:	1c5a      	adds	r2, r3, #1
 8009832:	d142      	bne.n	80098ba <_printf_float+0x172>
 8009834:	2306      	movs	r3, #6
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	9206      	str	r2, [sp, #24]
 800983c:	aa0e      	add	r2, sp, #56	; 0x38
 800983e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009842:	aa0d      	add	r2, sp, #52	; 0x34
 8009844:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009848:	9203      	str	r2, [sp, #12]
 800984a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800984e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	6863      	ldr	r3, [r4, #4]
 8009856:	4642      	mov	r2, r8
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	4628      	mov	r0, r5
 800985c:	4653      	mov	r3, sl
 800985e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009860:	f7ff fed4 	bl	800960c <__cvt>
 8009864:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009866:	4680      	mov	r8, r0
 8009868:	2947      	cmp	r1, #71	; 0x47
 800986a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800986c:	d108      	bne.n	8009880 <_printf_float+0x138>
 800986e:	1cc8      	adds	r0, r1, #3
 8009870:	db02      	blt.n	8009878 <_printf_float+0x130>
 8009872:	6863      	ldr	r3, [r4, #4]
 8009874:	4299      	cmp	r1, r3
 8009876:	dd40      	ble.n	80098fa <_printf_float+0x1b2>
 8009878:	f1a9 0902 	sub.w	r9, r9, #2
 800987c:	fa5f f989 	uxtb.w	r9, r9
 8009880:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009884:	d81f      	bhi.n	80098c6 <_printf_float+0x17e>
 8009886:	464a      	mov	r2, r9
 8009888:	3901      	subs	r1, #1
 800988a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800988e:	910d      	str	r1, [sp, #52]	; 0x34
 8009890:	f7ff ff1b 	bl	80096ca <__exponent>
 8009894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009896:	4682      	mov	sl, r0
 8009898:	1813      	adds	r3, r2, r0
 800989a:	2a01      	cmp	r2, #1
 800989c:	6123      	str	r3, [r4, #16]
 800989e:	dc02      	bgt.n	80098a6 <_printf_float+0x15e>
 80098a0:	6822      	ldr	r2, [r4, #0]
 80098a2:	07d2      	lsls	r2, r2, #31
 80098a4:	d501      	bpl.n	80098aa <_printf_float+0x162>
 80098a6:	3301      	adds	r3, #1
 80098a8:	6123      	str	r3, [r4, #16]
 80098aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d09b      	beq.n	80097ea <_printf_float+0xa2>
 80098b2:	232d      	movs	r3, #45	; 0x2d
 80098b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b8:	e797      	b.n	80097ea <_printf_float+0xa2>
 80098ba:	2947      	cmp	r1, #71	; 0x47
 80098bc:	d1bc      	bne.n	8009838 <_printf_float+0xf0>
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1ba      	bne.n	8009838 <_printf_float+0xf0>
 80098c2:	2301      	movs	r3, #1
 80098c4:	e7b7      	b.n	8009836 <_printf_float+0xee>
 80098c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80098ca:	d118      	bne.n	80098fe <_printf_float+0x1b6>
 80098cc:	2900      	cmp	r1, #0
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	dd0b      	ble.n	80098ea <_printf_float+0x1a2>
 80098d2:	6121      	str	r1, [r4, #16]
 80098d4:	b913      	cbnz	r3, 80098dc <_printf_float+0x194>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	07d0      	lsls	r0, r2, #31
 80098da:	d502      	bpl.n	80098e2 <_printf_float+0x19a>
 80098dc:	3301      	adds	r3, #1
 80098de:	440b      	add	r3, r1
 80098e0:	6123      	str	r3, [r4, #16]
 80098e2:	f04f 0a00 	mov.w	sl, #0
 80098e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80098e8:	e7df      	b.n	80098aa <_printf_float+0x162>
 80098ea:	b913      	cbnz	r3, 80098f2 <_printf_float+0x1aa>
 80098ec:	6822      	ldr	r2, [r4, #0]
 80098ee:	07d2      	lsls	r2, r2, #31
 80098f0:	d501      	bpl.n	80098f6 <_printf_float+0x1ae>
 80098f2:	3302      	adds	r3, #2
 80098f4:	e7f4      	b.n	80098e0 <_printf_float+0x198>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e7f2      	b.n	80098e0 <_printf_float+0x198>
 80098fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80098fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009900:	4299      	cmp	r1, r3
 8009902:	db05      	blt.n	8009910 <_printf_float+0x1c8>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	6121      	str	r1, [r4, #16]
 8009908:	07d8      	lsls	r0, r3, #31
 800990a:	d5ea      	bpl.n	80098e2 <_printf_float+0x19a>
 800990c:	1c4b      	adds	r3, r1, #1
 800990e:	e7e7      	b.n	80098e0 <_printf_float+0x198>
 8009910:	2900      	cmp	r1, #0
 8009912:	bfcc      	ite	gt
 8009914:	2201      	movgt	r2, #1
 8009916:	f1c1 0202 	rsble	r2, r1, #2
 800991a:	4413      	add	r3, r2
 800991c:	e7e0      	b.n	80098e0 <_printf_float+0x198>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	055a      	lsls	r2, r3, #21
 8009922:	d407      	bmi.n	8009934 <_printf_float+0x1ec>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	4642      	mov	r2, r8
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	d12b      	bne.n	800998a <_printf_float+0x242>
 8009932:	e764      	b.n	80097fe <_printf_float+0xb6>
 8009934:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009938:	f240 80dd 	bls.w	8009af6 <_printf_float+0x3ae>
 800993c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009940:	2200      	movs	r2, #0
 8009942:	2300      	movs	r3, #0
 8009944:	f7f7 f830 	bl	80009a8 <__aeabi_dcmpeq>
 8009948:	2800      	cmp	r0, #0
 800994a:	d033      	beq.n	80099b4 <_printf_float+0x26c>
 800994c:	2301      	movs	r3, #1
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	4a35      	ldr	r2, [pc, #212]	; (8009a28 <_printf_float+0x2e0>)
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af51 	beq.w	80097fe <_printf_float+0xb6>
 800995c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009960:	429a      	cmp	r2, r3
 8009962:	db02      	blt.n	800996a <_printf_float+0x222>
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	07d8      	lsls	r0, r3, #31
 8009968:	d50f      	bpl.n	800998a <_printf_float+0x242>
 800996a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800996e:	4631      	mov	r1, r6
 8009970:	4628      	mov	r0, r5
 8009972:	47b8      	blx	r7
 8009974:	3001      	adds	r0, #1
 8009976:	f43f af42 	beq.w	80097fe <_printf_float+0xb6>
 800997a:	f04f 0800 	mov.w	r8, #0
 800997e:	f104 091a 	add.w	r9, r4, #26
 8009982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009984:	3b01      	subs	r3, #1
 8009986:	4543      	cmp	r3, r8
 8009988:	dc09      	bgt.n	800999e <_printf_float+0x256>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	079b      	lsls	r3, r3, #30
 800998e:	f100 8102 	bmi.w	8009b96 <_printf_float+0x44e>
 8009992:	68e0      	ldr	r0, [r4, #12]
 8009994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009996:	4298      	cmp	r0, r3
 8009998:	bfb8      	it	lt
 800999a:	4618      	movlt	r0, r3
 800999c:	e731      	b.n	8009802 <_printf_float+0xba>
 800999e:	2301      	movs	r3, #1
 80099a0:	464a      	mov	r2, r9
 80099a2:	4631      	mov	r1, r6
 80099a4:	4628      	mov	r0, r5
 80099a6:	47b8      	blx	r7
 80099a8:	3001      	adds	r0, #1
 80099aa:	f43f af28 	beq.w	80097fe <_printf_float+0xb6>
 80099ae:	f108 0801 	add.w	r8, r8, #1
 80099b2:	e7e6      	b.n	8009982 <_printf_float+0x23a>
 80099b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	dc38      	bgt.n	8009a2c <_printf_float+0x2e4>
 80099ba:	2301      	movs	r3, #1
 80099bc:	4631      	mov	r1, r6
 80099be:	4628      	mov	r0, r5
 80099c0:	4a19      	ldr	r2, [pc, #100]	; (8009a28 <_printf_float+0x2e0>)
 80099c2:	47b8      	blx	r7
 80099c4:	3001      	adds	r0, #1
 80099c6:	f43f af1a 	beq.w	80097fe <_printf_float+0xb6>
 80099ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d102      	bne.n	80099d8 <_printf_float+0x290>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	07d9      	lsls	r1, r3, #31
 80099d6:	d5d8      	bpl.n	800998a <_printf_float+0x242>
 80099d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	47b8      	blx	r7
 80099e2:	3001      	adds	r0, #1
 80099e4:	f43f af0b 	beq.w	80097fe <_printf_float+0xb6>
 80099e8:	f04f 0900 	mov.w	r9, #0
 80099ec:	f104 0a1a 	add.w	sl, r4, #26
 80099f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f2:	425b      	negs	r3, r3
 80099f4:	454b      	cmp	r3, r9
 80099f6:	dc01      	bgt.n	80099fc <_printf_float+0x2b4>
 80099f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099fa:	e794      	b.n	8009926 <_printf_float+0x1de>
 80099fc:	2301      	movs	r3, #1
 80099fe:	4652      	mov	r2, sl
 8009a00:	4631      	mov	r1, r6
 8009a02:	4628      	mov	r0, r5
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f aef9 	beq.w	80097fe <_printf_float+0xb6>
 8009a0c:	f109 0901 	add.w	r9, r9, #1
 8009a10:	e7ee      	b.n	80099f0 <_printf_float+0x2a8>
 8009a12:	bf00      	nop
 8009a14:	7fefffff 	.word	0x7fefffff
 8009a18:	0800cc40 	.word	0x0800cc40
 8009a1c:	0800cc44 	.word	0x0800cc44
 8009a20:	0800cc4c 	.word	0x0800cc4c
 8009a24:	0800cc48 	.word	0x0800cc48
 8009a28:	0800cc50 	.word	0x0800cc50
 8009a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a30:	429a      	cmp	r2, r3
 8009a32:	bfa8      	it	ge
 8009a34:	461a      	movge	r2, r3
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	4691      	mov	r9, r2
 8009a3a:	dc37      	bgt.n	8009aac <_printf_float+0x364>
 8009a3c:	f04f 0b00 	mov.w	fp, #0
 8009a40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a44:	f104 021a 	add.w	r2, r4, #26
 8009a48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009a4c:	ebaa 0309 	sub.w	r3, sl, r9
 8009a50:	455b      	cmp	r3, fp
 8009a52:	dc33      	bgt.n	8009abc <_printf_float+0x374>
 8009a54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	db3b      	blt.n	8009ad4 <_printf_float+0x38c>
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	07da      	lsls	r2, r3, #31
 8009a60:	d438      	bmi.n	8009ad4 <_printf_float+0x38c>
 8009a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a66:	eba2 030a 	sub.w	r3, r2, sl
 8009a6a:	eba2 0901 	sub.w	r9, r2, r1
 8009a6e:	4599      	cmp	r9, r3
 8009a70:	bfa8      	it	ge
 8009a72:	4699      	movge	r9, r3
 8009a74:	f1b9 0f00 	cmp.w	r9, #0
 8009a78:	dc34      	bgt.n	8009ae4 <_printf_float+0x39c>
 8009a7a:	f04f 0800 	mov.w	r8, #0
 8009a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a82:	f104 0a1a 	add.w	sl, r4, #26
 8009a86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a8a:	1a9b      	subs	r3, r3, r2
 8009a8c:	eba3 0309 	sub.w	r3, r3, r9
 8009a90:	4543      	cmp	r3, r8
 8009a92:	f77f af7a 	ble.w	800998a <_printf_float+0x242>
 8009a96:	2301      	movs	r3, #1
 8009a98:	4652      	mov	r2, sl
 8009a9a:	4631      	mov	r1, r6
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	47b8      	blx	r7
 8009aa0:	3001      	adds	r0, #1
 8009aa2:	f43f aeac 	beq.w	80097fe <_printf_float+0xb6>
 8009aa6:	f108 0801 	add.w	r8, r8, #1
 8009aaa:	e7ec      	b.n	8009a86 <_printf_float+0x33e>
 8009aac:	4613      	mov	r3, r2
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4642      	mov	r2, r8
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d1c0      	bne.n	8009a3c <_printf_float+0x2f4>
 8009aba:	e6a0      	b.n	80097fe <_printf_float+0xb6>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	920b      	str	r2, [sp, #44]	; 0x2c
 8009ac4:	47b8      	blx	r7
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f43f ae99 	beq.w	80097fe <_printf_float+0xb6>
 8009acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ace:	f10b 0b01 	add.w	fp, fp, #1
 8009ad2:	e7b9      	b.n	8009a48 <_printf_float+0x300>
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ada:	4628      	mov	r0, r5
 8009adc:	47b8      	blx	r7
 8009ade:	3001      	adds	r0, #1
 8009ae0:	d1bf      	bne.n	8009a62 <_printf_float+0x31a>
 8009ae2:	e68c      	b.n	80097fe <_printf_float+0xb6>
 8009ae4:	464b      	mov	r3, r9
 8009ae6:	4631      	mov	r1, r6
 8009ae8:	4628      	mov	r0, r5
 8009aea:	eb08 020a 	add.w	r2, r8, sl
 8009aee:	47b8      	blx	r7
 8009af0:	3001      	adds	r0, #1
 8009af2:	d1c2      	bne.n	8009a7a <_printf_float+0x332>
 8009af4:	e683      	b.n	80097fe <_printf_float+0xb6>
 8009af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af8:	2a01      	cmp	r2, #1
 8009afa:	dc01      	bgt.n	8009b00 <_printf_float+0x3b8>
 8009afc:	07db      	lsls	r3, r3, #31
 8009afe:	d537      	bpl.n	8009b70 <_printf_float+0x428>
 8009b00:	2301      	movs	r3, #1
 8009b02:	4642      	mov	r2, r8
 8009b04:	4631      	mov	r1, r6
 8009b06:	4628      	mov	r0, r5
 8009b08:	47b8      	blx	r7
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	f43f ae77 	beq.w	80097fe <_printf_float+0xb6>
 8009b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f ae6f 	beq.w	80097fe <_printf_float+0xb6>
 8009b20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b24:	2200      	movs	r2, #0
 8009b26:	2300      	movs	r3, #0
 8009b28:	f7f6 ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8009b2c:	b9d8      	cbnz	r0, 8009b66 <_printf_float+0x41e>
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b30:	f108 0201 	add.w	r2, r8, #1
 8009b34:	3b01      	subs	r3, #1
 8009b36:	4631      	mov	r1, r6
 8009b38:	4628      	mov	r0, r5
 8009b3a:	47b8      	blx	r7
 8009b3c:	3001      	adds	r0, #1
 8009b3e:	d10e      	bne.n	8009b5e <_printf_float+0x416>
 8009b40:	e65d      	b.n	80097fe <_printf_float+0xb6>
 8009b42:	2301      	movs	r3, #1
 8009b44:	464a      	mov	r2, r9
 8009b46:	4631      	mov	r1, r6
 8009b48:	4628      	mov	r0, r5
 8009b4a:	47b8      	blx	r7
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	f43f ae56 	beq.w	80097fe <_printf_float+0xb6>
 8009b52:	f108 0801 	add.w	r8, r8, #1
 8009b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	4543      	cmp	r3, r8
 8009b5c:	dcf1      	bgt.n	8009b42 <_printf_float+0x3fa>
 8009b5e:	4653      	mov	r3, sl
 8009b60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b64:	e6e0      	b.n	8009928 <_printf_float+0x1e0>
 8009b66:	f04f 0800 	mov.w	r8, #0
 8009b6a:	f104 091a 	add.w	r9, r4, #26
 8009b6e:	e7f2      	b.n	8009b56 <_printf_float+0x40e>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4642      	mov	r2, r8
 8009b74:	e7df      	b.n	8009b36 <_printf_float+0x3ee>
 8009b76:	2301      	movs	r3, #1
 8009b78:	464a      	mov	r2, r9
 8009b7a:	4631      	mov	r1, r6
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	47b8      	blx	r7
 8009b80:	3001      	adds	r0, #1
 8009b82:	f43f ae3c 	beq.w	80097fe <_printf_float+0xb6>
 8009b86:	f108 0801 	add.w	r8, r8, #1
 8009b8a:	68e3      	ldr	r3, [r4, #12]
 8009b8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009b8e:	1a5b      	subs	r3, r3, r1
 8009b90:	4543      	cmp	r3, r8
 8009b92:	dcf0      	bgt.n	8009b76 <_printf_float+0x42e>
 8009b94:	e6fd      	b.n	8009992 <_printf_float+0x24a>
 8009b96:	f04f 0800 	mov.w	r8, #0
 8009b9a:	f104 0919 	add.w	r9, r4, #25
 8009b9e:	e7f4      	b.n	8009b8a <_printf_float+0x442>

08009ba0 <_printf_common>:
 8009ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	4699      	mov	r9, r3
 8009ba8:	688a      	ldr	r2, [r1, #8]
 8009baa:	690b      	ldr	r3, [r1, #16]
 8009bac:	4607      	mov	r7, r0
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bfb8      	it	lt
 8009bb2:	4613      	movlt	r3, r2
 8009bb4:	6033      	str	r3, [r6, #0]
 8009bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009bba:	460c      	mov	r4, r1
 8009bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bc0:	b10a      	cbz	r2, 8009bc6 <_printf_common+0x26>
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	6033      	str	r3, [r6, #0]
 8009bc6:	6823      	ldr	r3, [r4, #0]
 8009bc8:	0699      	lsls	r1, r3, #26
 8009bca:	bf42      	ittt	mi
 8009bcc:	6833      	ldrmi	r3, [r6, #0]
 8009bce:	3302      	addmi	r3, #2
 8009bd0:	6033      	strmi	r3, [r6, #0]
 8009bd2:	6825      	ldr	r5, [r4, #0]
 8009bd4:	f015 0506 	ands.w	r5, r5, #6
 8009bd8:	d106      	bne.n	8009be8 <_printf_common+0x48>
 8009bda:	f104 0a19 	add.w	sl, r4, #25
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	6832      	ldr	r2, [r6, #0]
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	dc28      	bgt.n	8009c3a <_printf_common+0x9a>
 8009be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bec:	1e13      	subs	r3, r2, #0
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	bf18      	it	ne
 8009bf2:	2301      	movne	r3, #1
 8009bf4:	0692      	lsls	r2, r2, #26
 8009bf6:	d42d      	bmi.n	8009c54 <_printf_common+0xb4>
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c00:	47c0      	blx	r8
 8009c02:	3001      	adds	r0, #1
 8009c04:	d020      	beq.n	8009c48 <_printf_common+0xa8>
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	68e5      	ldr	r5, [r4, #12]
 8009c0a:	f003 0306 	and.w	r3, r3, #6
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	bf18      	it	ne
 8009c12:	2500      	movne	r5, #0
 8009c14:	6832      	ldr	r2, [r6, #0]
 8009c16:	f04f 0600 	mov.w	r6, #0
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	bf08      	it	eq
 8009c1e:	1aad      	subeq	r5, r5, r2
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	bf08      	it	eq
 8009c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	bfc4      	itt	gt
 8009c2c:	1a9b      	subgt	r3, r3, r2
 8009c2e:	18ed      	addgt	r5, r5, r3
 8009c30:	341a      	adds	r4, #26
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d11a      	bne.n	8009c6c <_printf_common+0xcc>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e008      	b.n	8009c4c <_printf_common+0xac>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4652      	mov	r2, sl
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4638      	mov	r0, r7
 8009c42:	47c0      	blx	r8
 8009c44:	3001      	adds	r0, #1
 8009c46:	d103      	bne.n	8009c50 <_printf_common+0xb0>
 8009c48:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c50:	3501      	adds	r5, #1
 8009c52:	e7c4      	b.n	8009bde <_printf_common+0x3e>
 8009c54:	2030      	movs	r0, #48	; 0x30
 8009c56:	18e1      	adds	r1, r4, r3
 8009c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c5c:	1c5a      	adds	r2, r3, #1
 8009c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c62:	4422      	add	r2, r4
 8009c64:	3302      	adds	r3, #2
 8009c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c6a:	e7c5      	b.n	8009bf8 <_printf_common+0x58>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	4622      	mov	r2, r4
 8009c70:	4649      	mov	r1, r9
 8009c72:	4638      	mov	r0, r7
 8009c74:	47c0      	blx	r8
 8009c76:	3001      	adds	r0, #1
 8009c78:	d0e6      	beq.n	8009c48 <_printf_common+0xa8>
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7d9      	b.n	8009c32 <_printf_common+0x92>
	...

08009c80 <_printf_i>:
 8009c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c84:	460c      	mov	r4, r1
 8009c86:	7e27      	ldrb	r7, [r4, #24]
 8009c88:	4691      	mov	r9, r2
 8009c8a:	2f78      	cmp	r7, #120	; 0x78
 8009c8c:	4680      	mov	r8, r0
 8009c8e:	469a      	mov	sl, r3
 8009c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c96:	d807      	bhi.n	8009ca8 <_printf_i+0x28>
 8009c98:	2f62      	cmp	r7, #98	; 0x62
 8009c9a:	d80a      	bhi.n	8009cb2 <_printf_i+0x32>
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f000 80d9 	beq.w	8009e54 <_printf_i+0x1d4>
 8009ca2:	2f58      	cmp	r7, #88	; 0x58
 8009ca4:	f000 80a4 	beq.w	8009df0 <_printf_i+0x170>
 8009ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009cb0:	e03a      	b.n	8009d28 <_printf_i+0xa8>
 8009cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009cb6:	2b15      	cmp	r3, #21
 8009cb8:	d8f6      	bhi.n	8009ca8 <_printf_i+0x28>
 8009cba:	a001      	add	r0, pc, #4	; (adr r0, 8009cc0 <_printf_i+0x40>)
 8009cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d2d 	.word	0x08009d2d
 8009cc8:	08009ca9 	.word	0x08009ca9
 8009ccc:	08009ca9 	.word	0x08009ca9
 8009cd0:	08009ca9 	.word	0x08009ca9
 8009cd4:	08009ca9 	.word	0x08009ca9
 8009cd8:	08009d2d 	.word	0x08009d2d
 8009cdc:	08009ca9 	.word	0x08009ca9
 8009ce0:	08009ca9 	.word	0x08009ca9
 8009ce4:	08009ca9 	.word	0x08009ca9
 8009ce8:	08009ca9 	.word	0x08009ca9
 8009cec:	08009e3b 	.word	0x08009e3b
 8009cf0:	08009d5d 	.word	0x08009d5d
 8009cf4:	08009e1d 	.word	0x08009e1d
 8009cf8:	08009ca9 	.word	0x08009ca9
 8009cfc:	08009ca9 	.word	0x08009ca9
 8009d00:	08009e5d 	.word	0x08009e5d
 8009d04:	08009ca9 	.word	0x08009ca9
 8009d08:	08009d5d 	.word	0x08009d5d
 8009d0c:	08009ca9 	.word	0x08009ca9
 8009d10:	08009ca9 	.word	0x08009ca9
 8009d14:	08009e25 	.word	0x08009e25
 8009d18:	680b      	ldr	r3, [r1, #0]
 8009d1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009d1e:	1d1a      	adds	r2, r3, #4
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	600a      	str	r2, [r1, #0]
 8009d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e0a4      	b.n	8009e76 <_printf_i+0x1f6>
 8009d2c:	6825      	ldr	r5, [r4, #0]
 8009d2e:	6808      	ldr	r0, [r1, #0]
 8009d30:	062e      	lsls	r6, r5, #24
 8009d32:	f100 0304 	add.w	r3, r0, #4
 8009d36:	d50a      	bpl.n	8009d4e <_printf_i+0xce>
 8009d38:	6805      	ldr	r5, [r0, #0]
 8009d3a:	600b      	str	r3, [r1, #0]
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	da03      	bge.n	8009d48 <_printf_i+0xc8>
 8009d40:	232d      	movs	r3, #45	; 0x2d
 8009d42:	426d      	negs	r5, r5
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	230a      	movs	r3, #10
 8009d4a:	485e      	ldr	r0, [pc, #376]	; (8009ec4 <_printf_i+0x244>)
 8009d4c:	e019      	b.n	8009d82 <_printf_i+0x102>
 8009d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d52:	6805      	ldr	r5, [r0, #0]
 8009d54:	600b      	str	r3, [r1, #0]
 8009d56:	bf18      	it	ne
 8009d58:	b22d      	sxthne	r5, r5
 8009d5a:	e7ef      	b.n	8009d3c <_printf_i+0xbc>
 8009d5c:	680b      	ldr	r3, [r1, #0]
 8009d5e:	6825      	ldr	r5, [r4, #0]
 8009d60:	1d18      	adds	r0, r3, #4
 8009d62:	6008      	str	r0, [r1, #0]
 8009d64:	0628      	lsls	r0, r5, #24
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0xec>
 8009d68:	681d      	ldr	r5, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0xf2>
 8009d6c:	0669      	lsls	r1, r5, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0xe8>
 8009d70:	881d      	ldrh	r5, [r3, #0]
 8009d72:	2f6f      	cmp	r7, #111	; 0x6f
 8009d74:	bf0c      	ite	eq
 8009d76:	2308      	moveq	r3, #8
 8009d78:	230a      	movne	r3, #10
 8009d7a:	4852      	ldr	r0, [pc, #328]	; (8009ec4 <_printf_i+0x244>)
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d82:	6866      	ldr	r6, [r4, #4]
 8009d84:	2e00      	cmp	r6, #0
 8009d86:	bfa8      	it	ge
 8009d88:	6821      	ldrge	r1, [r4, #0]
 8009d8a:	60a6      	str	r6, [r4, #8]
 8009d8c:	bfa4      	itt	ge
 8009d8e:	f021 0104 	bicge.w	r1, r1, #4
 8009d92:	6021      	strge	r1, [r4, #0]
 8009d94:	b90d      	cbnz	r5, 8009d9a <_printf_i+0x11a>
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d04d      	beq.n	8009e36 <_printf_i+0x1b6>
 8009d9a:	4616      	mov	r6, r2
 8009d9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009da0:	fb03 5711 	mls	r7, r3, r1, r5
 8009da4:	5dc7      	ldrb	r7, [r0, r7]
 8009da6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009daa:	462f      	mov	r7, r5
 8009dac:	42bb      	cmp	r3, r7
 8009dae:	460d      	mov	r5, r1
 8009db0:	d9f4      	bls.n	8009d9c <_printf_i+0x11c>
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d10b      	bne.n	8009dce <_printf_i+0x14e>
 8009db6:	6823      	ldr	r3, [r4, #0]
 8009db8:	07df      	lsls	r7, r3, #31
 8009dba:	d508      	bpl.n	8009dce <_printf_i+0x14e>
 8009dbc:	6923      	ldr	r3, [r4, #16]
 8009dbe:	6861      	ldr	r1, [r4, #4]
 8009dc0:	4299      	cmp	r1, r3
 8009dc2:	bfde      	ittt	le
 8009dc4:	2330      	movle	r3, #48	; 0x30
 8009dc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dce:	1b92      	subs	r2, r2, r6
 8009dd0:	6122      	str	r2, [r4, #16]
 8009dd2:	464b      	mov	r3, r9
 8009dd4:	4621      	mov	r1, r4
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f8cd a000 	str.w	sl, [sp]
 8009ddc:	aa03      	add	r2, sp, #12
 8009dde:	f7ff fedf 	bl	8009ba0 <_printf_common>
 8009de2:	3001      	adds	r0, #1
 8009de4:	d14c      	bne.n	8009e80 <_printf_i+0x200>
 8009de6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dea:	b004      	add	sp, #16
 8009dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df0:	4834      	ldr	r0, [pc, #208]	; (8009ec4 <_printf_i+0x244>)
 8009df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009df6:	680e      	ldr	r6, [r1, #0]
 8009df8:	6823      	ldr	r3, [r4, #0]
 8009dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dfe:	061f      	lsls	r7, r3, #24
 8009e00:	600e      	str	r6, [r1, #0]
 8009e02:	d514      	bpl.n	8009e2e <_printf_i+0x1ae>
 8009e04:	07d9      	lsls	r1, r3, #31
 8009e06:	bf44      	itt	mi
 8009e08:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0c:	6023      	strmi	r3, [r4, #0]
 8009e0e:	b91d      	cbnz	r5, 8009e18 <_printf_i+0x198>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	f023 0320 	bic.w	r3, r3, #32
 8009e16:	6023      	str	r3, [r4, #0]
 8009e18:	2310      	movs	r3, #16
 8009e1a:	e7af      	b.n	8009d7c <_printf_i+0xfc>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	f043 0320 	orr.w	r3, r3, #32
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	2378      	movs	r3, #120	; 0x78
 8009e26:	4828      	ldr	r0, [pc, #160]	; (8009ec8 <_printf_i+0x248>)
 8009e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e2c:	e7e3      	b.n	8009df6 <_printf_i+0x176>
 8009e2e:	065e      	lsls	r6, r3, #25
 8009e30:	bf48      	it	mi
 8009e32:	b2ad      	uxthmi	r5, r5
 8009e34:	e7e6      	b.n	8009e04 <_printf_i+0x184>
 8009e36:	4616      	mov	r6, r2
 8009e38:	e7bb      	b.n	8009db2 <_printf_i+0x132>
 8009e3a:	680b      	ldr	r3, [r1, #0]
 8009e3c:	6826      	ldr	r6, [r4, #0]
 8009e3e:	1d1d      	adds	r5, r3, #4
 8009e40:	6960      	ldr	r0, [r4, #20]
 8009e42:	600d      	str	r5, [r1, #0]
 8009e44:	0635      	lsls	r5, r6, #24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0x1ce>
 8009e4a:	6018      	str	r0, [r3, #0]
 8009e4c:	e002      	b.n	8009e54 <_printf_i+0x1d4>
 8009e4e:	0671      	lsls	r1, r6, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0x1ca>
 8009e52:	8018      	strh	r0, [r3, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	4616      	mov	r6, r2
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e7ba      	b.n	8009dd2 <_printf_i+0x152>
 8009e5c:	680b      	ldr	r3, [r1, #0]
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	600a      	str	r2, [r1, #0]
 8009e62:	681e      	ldr	r6, [r3, #0]
 8009e64:	2100      	movs	r1, #0
 8009e66:	4630      	mov	r0, r6
 8009e68:	6862      	ldr	r2, [r4, #4]
 8009e6a:	f000 ffd1 	bl	800ae10 <memchr>
 8009e6e:	b108      	cbz	r0, 8009e74 <_printf_i+0x1f4>
 8009e70:	1b80      	subs	r0, r0, r6
 8009e72:	6060      	str	r0, [r4, #4]
 8009e74:	6863      	ldr	r3, [r4, #4]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7e:	e7a8      	b.n	8009dd2 <_printf_i+0x152>
 8009e80:	4632      	mov	r2, r6
 8009e82:	4649      	mov	r1, r9
 8009e84:	4640      	mov	r0, r8
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	47d0      	blx	sl
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d0ab      	beq.n	8009de6 <_printf_i+0x166>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	079b      	lsls	r3, r3, #30
 8009e92:	d413      	bmi.n	8009ebc <_printf_i+0x23c>
 8009e94:	68e0      	ldr	r0, [r4, #12]
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	bfb8      	it	lt
 8009e9c:	4618      	movlt	r0, r3
 8009e9e:	e7a4      	b.n	8009dea <_printf_i+0x16a>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	47d0      	blx	sl
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d09b      	beq.n	8009de6 <_printf_i+0x166>
 8009eae:	3501      	adds	r5, #1
 8009eb0:	68e3      	ldr	r3, [r4, #12]
 8009eb2:	9903      	ldr	r1, [sp, #12]
 8009eb4:	1a5b      	subs	r3, r3, r1
 8009eb6:	42ab      	cmp	r3, r5
 8009eb8:	dcf2      	bgt.n	8009ea0 <_printf_i+0x220>
 8009eba:	e7eb      	b.n	8009e94 <_printf_i+0x214>
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	f104 0619 	add.w	r6, r4, #25
 8009ec2:	e7f5      	b.n	8009eb0 <_printf_i+0x230>
 8009ec4:	0800cc52 	.word	0x0800cc52
 8009ec8:	0800cc63 	.word	0x0800cc63

08009ecc <siprintf>:
 8009ecc:	b40e      	push	{r1, r2, r3}
 8009ece:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ed2:	b500      	push	{lr}
 8009ed4:	b09c      	sub	sp, #112	; 0x70
 8009ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ed8:	9002      	str	r0, [sp, #8]
 8009eda:	9006      	str	r0, [sp, #24]
 8009edc:	9107      	str	r1, [sp, #28]
 8009ede:	9104      	str	r1, [sp, #16]
 8009ee0:	4808      	ldr	r0, [pc, #32]	; (8009f04 <siprintf+0x38>)
 8009ee2:	4909      	ldr	r1, [pc, #36]	; (8009f08 <siprintf+0x3c>)
 8009ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee8:	9105      	str	r1, [sp, #20]
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	a902      	add	r1, sp, #8
 8009eee:	9301      	str	r3, [sp, #4]
 8009ef0:	f001 fc2e 	bl	800b750 <_svfiprintf_r>
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	b01c      	add	sp, #112	; 0x70
 8009efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f00:	b003      	add	sp, #12
 8009f02:	4770      	bx	lr
 8009f04:	20000180 	.word	0x20000180
 8009f08:	ffff0208 	.word	0xffff0208

08009f0c <quorem>:
 8009f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	6903      	ldr	r3, [r0, #16]
 8009f12:	690c      	ldr	r4, [r1, #16]
 8009f14:	4607      	mov	r7, r0
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	f2c0 8083 	blt.w	800a022 <quorem+0x116>
 8009f1c:	3c01      	subs	r4, #1
 8009f1e:	f100 0514 	add.w	r5, r0, #20
 8009f22:	f101 0814 	add.w	r8, r1, #20
 8009f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f34:	3301      	adds	r3, #1
 8009f36:	429a      	cmp	r2, r3
 8009f38:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f44:	d332      	bcc.n	8009fac <quorem+0xa0>
 8009f46:	f04f 0e00 	mov.w	lr, #0
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	46ac      	mov	ip, r5
 8009f4e:	46f2      	mov	sl, lr
 8009f50:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f54:	b293      	uxth	r3, r2
 8009f56:	fb06 e303 	mla	r3, r6, r3, lr
 8009f5a:	0c12      	lsrs	r2, r2, #16
 8009f5c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f60:	fb06 e202 	mla	r2, r6, r2, lr
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	ebaa 0303 	sub.w	r3, sl, r3
 8009f6a:	f8dc a000 	ldr.w	sl, [ip]
 8009f6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f72:	fa1f fa8a 	uxth.w	sl, sl
 8009f76:	4453      	add	r3, sl
 8009f78:	fa1f fa82 	uxth.w	sl, r2
 8009f7c:	f8dc 2000 	ldr.w	r2, [ip]
 8009f80:	4581      	cmp	r9, r0
 8009f82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f94:	f84c 3b04 	str.w	r3, [ip], #4
 8009f98:	d2da      	bcs.n	8009f50 <quorem+0x44>
 8009f9a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f9e:	b92b      	cbnz	r3, 8009fac <quorem+0xa0>
 8009fa0:	9b01      	ldr	r3, [sp, #4]
 8009fa2:	3b04      	subs	r3, #4
 8009fa4:	429d      	cmp	r5, r3
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	d32f      	bcc.n	800a00a <quorem+0xfe>
 8009faa:	613c      	str	r4, [r7, #16]
 8009fac:	4638      	mov	r0, r7
 8009fae:	f001 f9b7 	bl	800b320 <__mcmp>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	db25      	blt.n	800a002 <quorem+0xf6>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f04f 0c00 	mov.w	ip, #0
 8009fbc:	3601      	adds	r6, #1
 8009fbe:	f858 1b04 	ldr.w	r1, [r8], #4
 8009fc2:	f8d0 e000 	ldr.w	lr, [r0]
 8009fc6:	b28b      	uxth	r3, r1
 8009fc8:	ebac 0303 	sub.w	r3, ip, r3
 8009fcc:	fa1f f28e 	uxth.w	r2, lr
 8009fd0:	4413      	add	r3, r2
 8009fd2:	0c0a      	lsrs	r2, r1, #16
 8009fd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fe2:	45c1      	cmp	r9, r8
 8009fe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fe8:	f840 3b04 	str.w	r3, [r0], #4
 8009fec:	d2e7      	bcs.n	8009fbe <quorem+0xb2>
 8009fee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff6:	b922      	cbnz	r2, 800a002 <quorem+0xf6>
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	429d      	cmp	r5, r3
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	d30a      	bcc.n	800a016 <quorem+0x10a>
 800a000:	613c      	str	r4, [r7, #16]
 800a002:	4630      	mov	r0, r6
 800a004:	b003      	add	sp, #12
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	6812      	ldr	r2, [r2, #0]
 800a00c:	3b04      	subs	r3, #4
 800a00e:	2a00      	cmp	r2, #0
 800a010:	d1cb      	bne.n	8009faa <quorem+0x9e>
 800a012:	3c01      	subs	r4, #1
 800a014:	e7c6      	b.n	8009fa4 <quorem+0x98>
 800a016:	6812      	ldr	r2, [r2, #0]
 800a018:	3b04      	subs	r3, #4
 800a01a:	2a00      	cmp	r2, #0
 800a01c:	d1f0      	bne.n	800a000 <quorem+0xf4>
 800a01e:	3c01      	subs	r4, #1
 800a020:	e7eb      	b.n	8009ffa <quorem+0xee>
 800a022:	2000      	movs	r0, #0
 800a024:	e7ee      	b.n	800a004 <quorem+0xf8>
	...

0800a028 <_dtoa_r>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	4616      	mov	r6, r2
 800a02e:	461f      	mov	r7, r3
 800a030:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a032:	b099      	sub	sp, #100	; 0x64
 800a034:	4605      	mov	r5, r0
 800a036:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a03a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a03e:	b974      	cbnz	r4, 800a05e <_dtoa_r+0x36>
 800a040:	2010      	movs	r0, #16
 800a042:	f000 fedd 	bl	800ae00 <malloc>
 800a046:	4602      	mov	r2, r0
 800a048:	6268      	str	r0, [r5, #36]	; 0x24
 800a04a:	b920      	cbnz	r0, 800a056 <_dtoa_r+0x2e>
 800a04c:	21ea      	movs	r1, #234	; 0xea
 800a04e:	4bae      	ldr	r3, [pc, #696]	; (800a308 <_dtoa_r+0x2e0>)
 800a050:	48ae      	ldr	r0, [pc, #696]	; (800a30c <_dtoa_r+0x2e4>)
 800a052:	f001 fda3 	bl	800bb9c <__assert_func>
 800a056:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a05a:	6004      	str	r4, [r0, #0]
 800a05c:	60c4      	str	r4, [r0, #12]
 800a05e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a060:	6819      	ldr	r1, [r3, #0]
 800a062:	b151      	cbz	r1, 800a07a <_dtoa_r+0x52>
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	2301      	movs	r3, #1
 800a068:	4093      	lsls	r3, r2
 800a06a:	604a      	str	r2, [r1, #4]
 800a06c:	608b      	str	r3, [r1, #8]
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 ff1c 	bl	800aeac <_Bfree>
 800a074:	2200      	movs	r2, #0
 800a076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	1e3b      	subs	r3, r7, #0
 800a07c:	bfaf      	iteee	ge
 800a07e:	2300      	movge	r3, #0
 800a080:	2201      	movlt	r2, #1
 800a082:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a086:	9305      	strlt	r3, [sp, #20]
 800a088:	bfa8      	it	ge
 800a08a:	f8c8 3000 	strge.w	r3, [r8]
 800a08e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a092:	4b9f      	ldr	r3, [pc, #636]	; (800a310 <_dtoa_r+0x2e8>)
 800a094:	bfb8      	it	lt
 800a096:	f8c8 2000 	strlt.w	r2, [r8]
 800a09a:	ea33 0309 	bics.w	r3, r3, r9
 800a09e:	d119      	bne.n	800a0d4 <_dtoa_r+0xac>
 800a0a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0ac:	4333      	orrs	r3, r6
 800a0ae:	f000 8580 	beq.w	800abb2 <_dtoa_r+0xb8a>
 800a0b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0b4:	b953      	cbnz	r3, 800a0cc <_dtoa_r+0xa4>
 800a0b6:	4b97      	ldr	r3, [pc, #604]	; (800a314 <_dtoa_r+0x2ec>)
 800a0b8:	e022      	b.n	800a100 <_dtoa_r+0xd8>
 800a0ba:	4b97      	ldr	r3, [pc, #604]	; (800a318 <_dtoa_r+0x2f0>)
 800a0bc:	9308      	str	r3, [sp, #32]
 800a0be:	3308      	adds	r3, #8
 800a0c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	9808      	ldr	r0, [sp, #32]
 800a0c6:	b019      	add	sp, #100	; 0x64
 800a0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0cc:	4b91      	ldr	r3, [pc, #580]	; (800a314 <_dtoa_r+0x2ec>)
 800a0ce:	9308      	str	r3, [sp, #32]
 800a0d0:	3303      	adds	r3, #3
 800a0d2:	e7f5      	b.n	800a0c0 <_dtoa_r+0x98>
 800a0d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a0d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f7f6 fc60 	bl	80009a8 <__aeabi_dcmpeq>
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	b158      	cbz	r0, 800a104 <_dtoa_r+0xdc>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8559 	beq.w	800abac <_dtoa_r+0xb84>
 800a0fa:	4888      	ldr	r0, [pc, #544]	; (800a31c <_dtoa_r+0x2f4>)
 800a0fc:	6018      	str	r0, [r3, #0]
 800a0fe:	1e43      	subs	r3, r0, #1
 800a100:	9308      	str	r3, [sp, #32]
 800a102:	e7df      	b.n	800a0c4 <_dtoa_r+0x9c>
 800a104:	ab16      	add	r3, sp, #88	; 0x58
 800a106:	9301      	str	r3, [sp, #4]
 800a108:	ab17      	add	r3, sp, #92	; 0x5c
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	4628      	mov	r0, r5
 800a10e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a112:	f001 f9b1 	bl	800b478 <__d2b>
 800a116:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a11a:	4682      	mov	sl, r0
 800a11c:	2c00      	cmp	r4, #0
 800a11e:	d07e      	beq.n	800a21e <_dtoa_r+0x1f6>
 800a120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a126:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a12a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a12e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a132:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a136:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a13a:	2200      	movs	r2, #0
 800a13c:	4b78      	ldr	r3, [pc, #480]	; (800a320 <_dtoa_r+0x2f8>)
 800a13e:	f7f6 f813 	bl	8000168 <__aeabi_dsub>
 800a142:	a36b      	add	r3, pc, #428	; (adr r3, 800a2f0 <_dtoa_r+0x2c8>)
 800a144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a148:	f7f6 f9c6 	bl	80004d8 <__aeabi_dmul>
 800a14c:	a36a      	add	r3, pc, #424	; (adr r3, 800a2f8 <_dtoa_r+0x2d0>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 f80b 	bl	800016c <__adddf3>
 800a156:	4606      	mov	r6, r0
 800a158:	4620      	mov	r0, r4
 800a15a:	460f      	mov	r7, r1
 800a15c:	f7f6 f952 	bl	8000404 <__aeabi_i2d>
 800a160:	a367      	add	r3, pc, #412	; (adr r3, 800a300 <_dtoa_r+0x2d8>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f9b7 	bl	80004d8 <__aeabi_dmul>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	f7f5 fffb 	bl	800016c <__adddf3>
 800a176:	4606      	mov	r6, r0
 800a178:	460f      	mov	r7, r1
 800a17a:	f7f6 fc5d 	bl	8000a38 <__aeabi_d2iz>
 800a17e:	2200      	movs	r2, #0
 800a180:	4681      	mov	r9, r0
 800a182:	2300      	movs	r3, #0
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	f7f6 fc18 	bl	80009bc <__aeabi_dcmplt>
 800a18c:	b148      	cbz	r0, 800a1a2 <_dtoa_r+0x17a>
 800a18e:	4648      	mov	r0, r9
 800a190:	f7f6 f938 	bl	8000404 <__aeabi_i2d>
 800a194:	4632      	mov	r2, r6
 800a196:	463b      	mov	r3, r7
 800a198:	f7f6 fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800a19c:	b908      	cbnz	r0, 800a1a2 <_dtoa_r+0x17a>
 800a19e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1a2:	f1b9 0f16 	cmp.w	r9, #22
 800a1a6:	d857      	bhi.n	800a258 <_dtoa_r+0x230>
 800a1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1ac:	4b5d      	ldr	r3, [pc, #372]	; (800a324 <_dtoa_r+0x2fc>)
 800a1ae:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	f7f6 fc01 	bl	80009bc <__aeabi_dcmplt>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d04e      	beq.n	800a25c <_dtoa_r+0x234>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a1c8:	1b1c      	subs	r4, r3, r4
 800a1ca:	1e63      	subs	r3, r4, #1
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	bf49      	itett	mi
 800a1d0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a1d4:	2300      	movpl	r3, #0
 800a1d6:	9306      	strmi	r3, [sp, #24]
 800a1d8:	2300      	movmi	r3, #0
 800a1da:	bf54      	ite	pl
 800a1dc:	9306      	strpl	r3, [sp, #24]
 800a1de:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a1e0:	f1b9 0f00 	cmp.w	r9, #0
 800a1e4:	db3c      	blt.n	800a260 <_dtoa_r+0x238>
 800a1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1e8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a1ec:	444b      	add	r3, r9
 800a1ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d86c      	bhi.n	800a2d4 <_dtoa_r+0x2ac>
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	bfc4      	itt	gt
 800a1fe:	3b04      	subgt	r3, #4
 800a200:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a202:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a204:	bfc8      	it	gt
 800a206:	2400      	movgt	r4, #0
 800a208:	f1a3 0302 	sub.w	r3, r3, #2
 800a20c:	bfd8      	it	le
 800a20e:	2401      	movle	r4, #1
 800a210:	2b03      	cmp	r3, #3
 800a212:	f200 808b 	bhi.w	800a32c <_dtoa_r+0x304>
 800a216:	e8df f003 	tbb	[pc, r3]
 800a21a:	4f2d      	.short	0x4f2d
 800a21c:	5b4d      	.short	0x5b4d
 800a21e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a222:	441c      	add	r4, r3
 800a224:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a228:	2b20      	cmp	r3, #32
 800a22a:	bfc3      	ittte	gt
 800a22c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a230:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a234:	fa09 f303 	lslgt.w	r3, r9, r3
 800a238:	f1c3 0320 	rsble	r3, r3, #32
 800a23c:	bfc6      	itte	gt
 800a23e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a242:	4318      	orrgt	r0, r3
 800a244:	fa06 f003 	lslle.w	r0, r6, r3
 800a248:	f7f6 f8cc 	bl	80003e4 <__aeabi_ui2d>
 800a24c:	2301      	movs	r3, #1
 800a24e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a252:	3c01      	subs	r4, #1
 800a254:	9313      	str	r3, [sp, #76]	; 0x4c
 800a256:	e770      	b.n	800a13a <_dtoa_r+0x112>
 800a258:	2301      	movs	r3, #1
 800a25a:	e7b3      	b.n	800a1c4 <_dtoa_r+0x19c>
 800a25c:	900f      	str	r0, [sp, #60]	; 0x3c
 800a25e:	e7b2      	b.n	800a1c6 <_dtoa_r+0x19e>
 800a260:	9b06      	ldr	r3, [sp, #24]
 800a262:	eba3 0309 	sub.w	r3, r3, r9
 800a266:	9306      	str	r3, [sp, #24]
 800a268:	f1c9 0300 	rsb	r3, r9, #0
 800a26c:	930a      	str	r3, [sp, #40]	; 0x28
 800a26e:	2300      	movs	r3, #0
 800a270:	930e      	str	r3, [sp, #56]	; 0x38
 800a272:	e7bf      	b.n	800a1f4 <_dtoa_r+0x1cc>
 800a274:	2300      	movs	r3, #0
 800a276:	930b      	str	r3, [sp, #44]	; 0x2c
 800a278:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dc59      	bgt.n	800a332 <_dtoa_r+0x30a>
 800a27e:	f04f 0b01 	mov.w	fp, #1
 800a282:	465b      	mov	r3, fp
 800a284:	f8cd b008 	str.w	fp, [sp, #8]
 800a288:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a28c:	2200      	movs	r2, #0
 800a28e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a290:	6042      	str	r2, [r0, #4]
 800a292:	2204      	movs	r2, #4
 800a294:	f102 0614 	add.w	r6, r2, #20
 800a298:	429e      	cmp	r6, r3
 800a29a:	6841      	ldr	r1, [r0, #4]
 800a29c:	d94f      	bls.n	800a33e <_dtoa_r+0x316>
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 fdc4 	bl	800ae2c <_Balloc>
 800a2a4:	9008      	str	r0, [sp, #32]
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d14d      	bne.n	800a346 <_dtoa_r+0x31e>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a2b0:	4b1d      	ldr	r3, [pc, #116]	; (800a328 <_dtoa_r+0x300>)
 800a2b2:	e6cd      	b.n	800a050 <_dtoa_r+0x28>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e7de      	b.n	800a276 <_dtoa_r+0x24e>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2be:	eb09 0b03 	add.w	fp, r9, r3
 800a2c2:	f10b 0301 	add.w	r3, fp, #1
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	9302      	str	r3, [sp, #8]
 800a2ca:	bfb8      	it	lt
 800a2cc:	2301      	movlt	r3, #1
 800a2ce:	e7dd      	b.n	800a28c <_dtoa_r+0x264>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e7f2      	b.n	800a2ba <_dtoa_r+0x292>
 800a2d4:	2401      	movs	r4, #1
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a2da:	9322      	str	r3, [sp, #136]	; 0x88
 800a2dc:	f04f 3bff 	mov.w	fp, #4294967295
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2312      	movs	r3, #18
 800a2e4:	f8cd b008 	str.w	fp, [sp, #8]
 800a2e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a2ea:	e7cf      	b.n	800a28c <_dtoa_r+0x264>
 800a2ec:	f3af 8000 	nop.w
 800a2f0:	636f4361 	.word	0x636f4361
 800a2f4:	3fd287a7 	.word	0x3fd287a7
 800a2f8:	8b60c8b3 	.word	0x8b60c8b3
 800a2fc:	3fc68a28 	.word	0x3fc68a28
 800a300:	509f79fb 	.word	0x509f79fb
 800a304:	3fd34413 	.word	0x3fd34413
 800a308:	0800cc81 	.word	0x0800cc81
 800a30c:	0800cc98 	.word	0x0800cc98
 800a310:	7ff00000 	.word	0x7ff00000
 800a314:	0800cc7d 	.word	0x0800cc7d
 800a318:	0800cc74 	.word	0x0800cc74
 800a31c:	0800cc51 	.word	0x0800cc51
 800a320:	3ff80000 	.word	0x3ff80000
 800a324:	0800cdf0 	.word	0x0800cdf0
 800a328:	0800ccf7 	.word	0x0800ccf7
 800a32c:	2301      	movs	r3, #1
 800a32e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a330:	e7d4      	b.n	800a2dc <_dtoa_r+0x2b4>
 800a332:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a336:	465b      	mov	r3, fp
 800a338:	f8cd b008 	str.w	fp, [sp, #8]
 800a33c:	e7a6      	b.n	800a28c <_dtoa_r+0x264>
 800a33e:	3101      	adds	r1, #1
 800a340:	6041      	str	r1, [r0, #4]
 800a342:	0052      	lsls	r2, r2, #1
 800a344:	e7a6      	b.n	800a294 <_dtoa_r+0x26c>
 800a346:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a348:	9a08      	ldr	r2, [sp, #32]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	9b02      	ldr	r3, [sp, #8]
 800a34e:	2b0e      	cmp	r3, #14
 800a350:	f200 80a8 	bhi.w	800a4a4 <_dtoa_r+0x47c>
 800a354:	2c00      	cmp	r4, #0
 800a356:	f000 80a5 	beq.w	800a4a4 <_dtoa_r+0x47c>
 800a35a:	f1b9 0f00 	cmp.w	r9, #0
 800a35e:	dd34      	ble.n	800a3ca <_dtoa_r+0x3a2>
 800a360:	4a9a      	ldr	r2, [pc, #616]	; (800a5cc <_dtoa_r+0x5a4>)
 800a362:	f009 030f 	and.w	r3, r9, #15
 800a366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a36a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a36e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a372:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a376:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a37a:	d016      	beq.n	800a3aa <_dtoa_r+0x382>
 800a37c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a380:	4b93      	ldr	r3, [pc, #588]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a382:	2703      	movs	r7, #3
 800a384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a388:	f7f6 f9d0 	bl	800072c <__aeabi_ddiv>
 800a38c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a390:	f004 040f 	and.w	r4, r4, #15
 800a394:	4e8e      	ldr	r6, [pc, #568]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a396:	b954      	cbnz	r4, 800a3ae <_dtoa_r+0x386>
 800a398:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3a0:	f7f6 f9c4 	bl	800072c <__aeabi_ddiv>
 800a3a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3a8:	e029      	b.n	800a3fe <_dtoa_r+0x3d6>
 800a3aa:	2702      	movs	r7, #2
 800a3ac:	e7f2      	b.n	800a394 <_dtoa_r+0x36c>
 800a3ae:	07e1      	lsls	r1, r4, #31
 800a3b0:	d508      	bpl.n	800a3c4 <_dtoa_r+0x39c>
 800a3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a3ba:	f7f6 f88d 	bl	80004d8 <__aeabi_dmul>
 800a3be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3c2:	3701      	adds	r7, #1
 800a3c4:	1064      	asrs	r4, r4, #1
 800a3c6:	3608      	adds	r6, #8
 800a3c8:	e7e5      	b.n	800a396 <_dtoa_r+0x36e>
 800a3ca:	f000 80a5 	beq.w	800a518 <_dtoa_r+0x4f0>
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a3d2:	f1c9 0400 	rsb	r4, r9, #0
 800a3d6:	4b7d      	ldr	r3, [pc, #500]	; (800a5cc <_dtoa_r+0x5a4>)
 800a3d8:	f004 020f 	and.w	r2, r4, #15
 800a3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f6 f878 	bl	80004d8 <__aeabi_dmul>
 800a3e8:	2702      	movs	r7, #2
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3f0:	4e77      	ldr	r6, [pc, #476]	; (800a5d0 <_dtoa_r+0x5a8>)
 800a3f2:	1124      	asrs	r4, r4, #4
 800a3f4:	2c00      	cmp	r4, #0
 800a3f6:	f040 8084 	bne.w	800a502 <_dtoa_r+0x4da>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1d2      	bne.n	800a3a4 <_dtoa_r+0x37c>
 800a3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 808b 	beq.w	800a51c <_dtoa_r+0x4f4>
 800a406:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a40a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a40e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a412:	2200      	movs	r2, #0
 800a414:	4b6f      	ldr	r3, [pc, #444]	; (800a5d4 <_dtoa_r+0x5ac>)
 800a416:	f7f6 fad1 	bl	80009bc <__aeabi_dcmplt>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d07e      	beq.n	800a51c <_dtoa_r+0x4f4>
 800a41e:	9b02      	ldr	r3, [sp, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d07b      	beq.n	800a51c <_dtoa_r+0x4f4>
 800a424:	f1bb 0f00 	cmp.w	fp, #0
 800a428:	dd38      	ble.n	800a49c <_dtoa_r+0x474>
 800a42a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a42e:	2200      	movs	r2, #0
 800a430:	4b69      	ldr	r3, [pc, #420]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a432:	f7f6 f851 	bl	80004d8 <__aeabi_dmul>
 800a436:	465c      	mov	r4, fp
 800a438:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a43c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a440:	3701      	adds	r7, #1
 800a442:	4638      	mov	r0, r7
 800a444:	f7f5 ffde 	bl	8000404 <__aeabi_i2d>
 800a448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a44c:	f7f6 f844 	bl	80004d8 <__aeabi_dmul>
 800a450:	2200      	movs	r2, #0
 800a452:	4b62      	ldr	r3, [pc, #392]	; (800a5dc <_dtoa_r+0x5b4>)
 800a454:	f7f5 fe8a 	bl	800016c <__adddf3>
 800a458:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a45c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a460:	9611      	str	r6, [sp, #68]	; 0x44
 800a462:	2c00      	cmp	r4, #0
 800a464:	d15d      	bne.n	800a522 <_dtoa_r+0x4fa>
 800a466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a46a:	2200      	movs	r2, #0
 800a46c:	4b5c      	ldr	r3, [pc, #368]	; (800a5e0 <_dtoa_r+0x5b8>)
 800a46e:	f7f5 fe7b 	bl	8000168 <__aeabi_dsub>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a47a:	4633      	mov	r3, r6
 800a47c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a47e:	f7f6 fabb 	bl	80009f8 <__aeabi_dcmpgt>
 800a482:	2800      	cmp	r0, #0
 800a484:	f040 829e 	bne.w	800a9c4 <_dtoa_r+0x99c>
 800a488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a48c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a48e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a492:	f7f6 fa93 	bl	80009bc <__aeabi_dcmplt>
 800a496:	2800      	cmp	r0, #0
 800a498:	f040 8292 	bne.w	800a9c0 <_dtoa_r+0x998>
 800a49c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a4a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a4a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f2c0 8153 	blt.w	800a752 <_dtoa_r+0x72a>
 800a4ac:	f1b9 0f0e 	cmp.w	r9, #14
 800a4b0:	f300 814f 	bgt.w	800a752 <_dtoa_r+0x72a>
 800a4b4:	4b45      	ldr	r3, [pc, #276]	; (800a5cc <_dtoa_r+0x5a4>)
 800a4b6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a4ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4be:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a4c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f280 80db 	bge.w	800a680 <_dtoa_r+0x658>
 800a4ca:	9b02      	ldr	r3, [sp, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f300 80d7 	bgt.w	800a680 <_dtoa_r+0x658>
 800a4d2:	f040 8274 	bne.w	800a9be <_dtoa_r+0x996>
 800a4d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4b40      	ldr	r3, [pc, #256]	; (800a5e0 <_dtoa_r+0x5b8>)
 800a4de:	f7f5 fffb 	bl	80004d8 <__aeabi_dmul>
 800a4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4e6:	f7f6 fa7d 	bl	80009e4 <__aeabi_dcmpge>
 800a4ea:	9c02      	ldr	r4, [sp, #8]
 800a4ec:	4626      	mov	r6, r4
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	f040 824a 	bne.w	800a988 <_dtoa_r+0x960>
 800a4f4:	2331      	movs	r3, #49	; 0x31
 800a4f6:	9f08      	ldr	r7, [sp, #32]
 800a4f8:	f109 0901 	add.w	r9, r9, #1
 800a4fc:	f807 3b01 	strb.w	r3, [r7], #1
 800a500:	e246      	b.n	800a990 <_dtoa_r+0x968>
 800a502:	07e2      	lsls	r2, r4, #31
 800a504:	d505      	bpl.n	800a512 <_dtoa_r+0x4ea>
 800a506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	2301      	movs	r3, #1
 800a510:	3701      	adds	r7, #1
 800a512:	1064      	asrs	r4, r4, #1
 800a514:	3608      	adds	r6, #8
 800a516:	e76d      	b.n	800a3f4 <_dtoa_r+0x3cc>
 800a518:	2702      	movs	r7, #2
 800a51a:	e770      	b.n	800a3fe <_dtoa_r+0x3d6>
 800a51c:	46c8      	mov	r8, r9
 800a51e:	9c02      	ldr	r4, [sp, #8]
 800a520:	e78f      	b.n	800a442 <_dtoa_r+0x41a>
 800a522:	9908      	ldr	r1, [sp, #32]
 800a524:	4b29      	ldr	r3, [pc, #164]	; (800a5cc <_dtoa_r+0x5a4>)
 800a526:	4421      	add	r1, r4
 800a528:	9112      	str	r1, [sp, #72]	; 0x48
 800a52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a52c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a530:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a534:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a538:	2900      	cmp	r1, #0
 800a53a:	d055      	beq.n	800a5e8 <_dtoa_r+0x5c0>
 800a53c:	2000      	movs	r0, #0
 800a53e:	4929      	ldr	r1, [pc, #164]	; (800a5e4 <_dtoa_r+0x5bc>)
 800a540:	f7f6 f8f4 	bl	800072c <__aeabi_ddiv>
 800a544:	463b      	mov	r3, r7
 800a546:	4632      	mov	r2, r6
 800a548:	f7f5 fe0e 	bl	8000168 <__aeabi_dsub>
 800a54c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a550:	9f08      	ldr	r7, [sp, #32]
 800a552:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a556:	f7f6 fa6f 	bl	8000a38 <__aeabi_d2iz>
 800a55a:	4604      	mov	r4, r0
 800a55c:	f7f5 ff52 	bl	8000404 <__aeabi_i2d>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a568:	f7f5 fdfe 	bl	8000168 <__aeabi_dsub>
 800a56c:	4602      	mov	r2, r0
 800a56e:	460b      	mov	r3, r1
 800a570:	3430      	adds	r4, #48	; 0x30
 800a572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a576:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a57a:	f807 4b01 	strb.w	r4, [r7], #1
 800a57e:	f7f6 fa1d 	bl	80009bc <__aeabi_dcmplt>
 800a582:	2800      	cmp	r0, #0
 800a584:	d174      	bne.n	800a670 <_dtoa_r+0x648>
 800a586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58a:	2000      	movs	r0, #0
 800a58c:	4911      	ldr	r1, [pc, #68]	; (800a5d4 <_dtoa_r+0x5ac>)
 800a58e:	f7f5 fdeb 	bl	8000168 <__aeabi_dsub>
 800a592:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a596:	f7f6 fa11 	bl	80009bc <__aeabi_dcmplt>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f040 80b6 	bne.w	800a70c <_dtoa_r+0x6e4>
 800a5a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5a2:	429f      	cmp	r7, r3
 800a5a4:	f43f af7a 	beq.w	800a49c <_dtoa_r+0x474>
 800a5a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4b0a      	ldr	r3, [pc, #40]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a5b0:	f7f5 ff92 	bl	80004d8 <__aeabi_dmul>
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <_dtoa_r+0x5b0>)
 800a5c0:	f7f5 ff8a 	bl	80004d8 <__aeabi_dmul>
 800a5c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5c8:	e7c3      	b.n	800a552 <_dtoa_r+0x52a>
 800a5ca:	bf00      	nop
 800a5cc:	0800cdf0 	.word	0x0800cdf0
 800a5d0:	0800cdc8 	.word	0x0800cdc8
 800a5d4:	3ff00000 	.word	0x3ff00000
 800a5d8:	40240000 	.word	0x40240000
 800a5dc:	401c0000 	.word	0x401c0000
 800a5e0:	40140000 	.word	0x40140000
 800a5e4:	3fe00000 	.word	0x3fe00000
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4639      	mov	r1, r7
 800a5ec:	f7f5 ff74 	bl	80004d8 <__aeabi_dmul>
 800a5f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5f6:	9c08      	ldr	r4, [sp, #32]
 800a5f8:	9314      	str	r3, [sp, #80]	; 0x50
 800a5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5fe:	f7f6 fa1b 	bl	8000a38 <__aeabi_d2iz>
 800a602:	9015      	str	r0, [sp, #84]	; 0x54
 800a604:	f7f5 fefe 	bl	8000404 <__aeabi_i2d>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a610:	f7f5 fdaa 	bl	8000168 <__aeabi_dsub>
 800a614:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a616:	4606      	mov	r6, r0
 800a618:	3330      	adds	r3, #48	; 0x30
 800a61a:	f804 3b01 	strb.w	r3, [r4], #1
 800a61e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a620:	460f      	mov	r7, r1
 800a622:	429c      	cmp	r4, r3
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	d124      	bne.n	800a674 <_dtoa_r+0x64c>
 800a62a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a62e:	4bb3      	ldr	r3, [pc, #716]	; (800a8fc <_dtoa_r+0x8d4>)
 800a630:	f7f5 fd9c 	bl	800016c <__adddf3>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4630      	mov	r0, r6
 800a63a:	4639      	mov	r1, r7
 800a63c:	f7f6 f9dc 	bl	80009f8 <__aeabi_dcmpgt>
 800a640:	2800      	cmp	r0, #0
 800a642:	d162      	bne.n	800a70a <_dtoa_r+0x6e2>
 800a644:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a648:	2000      	movs	r0, #0
 800a64a:	49ac      	ldr	r1, [pc, #688]	; (800a8fc <_dtoa_r+0x8d4>)
 800a64c:	f7f5 fd8c 	bl	8000168 <__aeabi_dsub>
 800a650:	4602      	mov	r2, r0
 800a652:	460b      	mov	r3, r1
 800a654:	4630      	mov	r0, r6
 800a656:	4639      	mov	r1, r7
 800a658:	f7f6 f9b0 	bl	80009bc <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f43f af1d 	beq.w	800a49c <_dtoa_r+0x474>
 800a662:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a664:	1e7b      	subs	r3, r7, #1
 800a666:	9314      	str	r3, [sp, #80]	; 0x50
 800a668:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a66c:	2b30      	cmp	r3, #48	; 0x30
 800a66e:	d0f8      	beq.n	800a662 <_dtoa_r+0x63a>
 800a670:	46c1      	mov	r9, r8
 800a672:	e03a      	b.n	800a6ea <_dtoa_r+0x6c2>
 800a674:	4ba2      	ldr	r3, [pc, #648]	; (800a900 <_dtoa_r+0x8d8>)
 800a676:	f7f5 ff2f 	bl	80004d8 <__aeabi_dmul>
 800a67a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a67e:	e7bc      	b.n	800a5fa <_dtoa_r+0x5d2>
 800a680:	9f08      	ldr	r7, [sp, #32]
 800a682:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a68a:	f7f6 f84f 	bl	800072c <__aeabi_ddiv>
 800a68e:	f7f6 f9d3 	bl	8000a38 <__aeabi_d2iz>
 800a692:	4604      	mov	r4, r0
 800a694:	f7f5 feb6 	bl	8000404 <__aeabi_i2d>
 800a698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a69c:	f7f5 ff1c 	bl	80004d8 <__aeabi_dmul>
 800a6a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6ac:	f7f5 fd5c 	bl	8000168 <__aeabi_dsub>
 800a6b0:	f807 6b01 	strb.w	r6, [r7], #1
 800a6b4:	9e08      	ldr	r6, [sp, #32]
 800a6b6:	9b02      	ldr	r3, [sp, #8]
 800a6b8:	1bbe      	subs	r6, r7, r6
 800a6ba:	42b3      	cmp	r3, r6
 800a6bc:	d13a      	bne.n	800a734 <_dtoa_r+0x70c>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
 800a6c2:	f7f5 fd53 	bl	800016c <__adddf3>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6d2:	f7f6 f991 	bl	80009f8 <__aeabi_dcmpgt>
 800a6d6:	bb58      	cbnz	r0, 800a730 <_dtoa_r+0x708>
 800a6d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a6dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6e0:	f7f6 f962 	bl	80009a8 <__aeabi_dcmpeq>
 800a6e4:	b108      	cbz	r0, 800a6ea <_dtoa_r+0x6c2>
 800a6e6:	07e1      	lsls	r1, r4, #31
 800a6e8:	d422      	bmi.n	800a730 <_dtoa_r+0x708>
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	4651      	mov	r1, sl
 800a6ee:	f000 fbdd 	bl	800aeac <_Bfree>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	703b      	strb	r3, [r7, #0]
 800a6f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a6f8:	f109 0001 	add.w	r0, r9, #1
 800a6fc:	6018      	str	r0, [r3, #0]
 800a6fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a700:	2b00      	cmp	r3, #0
 800a702:	f43f acdf 	beq.w	800a0c4 <_dtoa_r+0x9c>
 800a706:	601f      	str	r7, [r3, #0]
 800a708:	e4dc      	b.n	800a0c4 <_dtoa_r+0x9c>
 800a70a:	4627      	mov	r7, r4
 800a70c:	463b      	mov	r3, r7
 800a70e:	461f      	mov	r7, r3
 800a710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a714:	2a39      	cmp	r2, #57	; 0x39
 800a716:	d107      	bne.n	800a728 <_dtoa_r+0x700>
 800a718:	9a08      	ldr	r2, [sp, #32]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d1f7      	bne.n	800a70e <_dtoa_r+0x6e6>
 800a71e:	2230      	movs	r2, #48	; 0x30
 800a720:	9908      	ldr	r1, [sp, #32]
 800a722:	f108 0801 	add.w	r8, r8, #1
 800a726:	700a      	strb	r2, [r1, #0]
 800a728:	781a      	ldrb	r2, [r3, #0]
 800a72a:	3201      	adds	r2, #1
 800a72c:	701a      	strb	r2, [r3, #0]
 800a72e:	e79f      	b.n	800a670 <_dtoa_r+0x648>
 800a730:	46c8      	mov	r8, r9
 800a732:	e7eb      	b.n	800a70c <_dtoa_r+0x6e4>
 800a734:	2200      	movs	r2, #0
 800a736:	4b72      	ldr	r3, [pc, #456]	; (800a900 <_dtoa_r+0x8d8>)
 800a738:	f7f5 fece 	bl	80004d8 <__aeabi_dmul>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a744:	2200      	movs	r2, #0
 800a746:	2300      	movs	r3, #0
 800a748:	f7f6 f92e 	bl	80009a8 <__aeabi_dcmpeq>
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d098      	beq.n	800a682 <_dtoa_r+0x65a>
 800a750:	e7cb      	b.n	800a6ea <_dtoa_r+0x6c2>
 800a752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a754:	2a00      	cmp	r2, #0
 800a756:	f000 80cd 	beq.w	800a8f4 <_dtoa_r+0x8cc>
 800a75a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a75c:	2a01      	cmp	r2, #1
 800a75e:	f300 80af 	bgt.w	800a8c0 <_dtoa_r+0x898>
 800a762:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a764:	2a00      	cmp	r2, #0
 800a766:	f000 80a7 	beq.w	800a8b8 <_dtoa_r+0x890>
 800a76a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a76e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a770:	9f06      	ldr	r7, [sp, #24]
 800a772:	9a06      	ldr	r2, [sp, #24]
 800a774:	2101      	movs	r1, #1
 800a776:	441a      	add	r2, r3
 800a778:	9206      	str	r2, [sp, #24]
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	4628      	mov	r0, r5
 800a77e:	441a      	add	r2, r3
 800a780:	9209      	str	r2, [sp, #36]	; 0x24
 800a782:	f000 fc4d 	bl	800b020 <__i2b>
 800a786:	4606      	mov	r6, r0
 800a788:	2f00      	cmp	r7, #0
 800a78a:	dd0c      	ble.n	800a7a6 <_dtoa_r+0x77e>
 800a78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	dd09      	ble.n	800a7a6 <_dtoa_r+0x77e>
 800a792:	42bb      	cmp	r3, r7
 800a794:	bfa8      	it	ge
 800a796:	463b      	movge	r3, r7
 800a798:	9a06      	ldr	r2, [sp, #24]
 800a79a:	1aff      	subs	r7, r7, r3
 800a79c:	1ad2      	subs	r2, r2, r3
 800a79e:	9206      	str	r2, [sp, #24]
 800a7a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a8:	b1f3      	cbz	r3, 800a7e8 <_dtoa_r+0x7c0>
 800a7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f000 80a9 	beq.w	800a904 <_dtoa_r+0x8dc>
 800a7b2:	2c00      	cmp	r4, #0
 800a7b4:	dd10      	ble.n	800a7d8 <_dtoa_r+0x7b0>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	f000 fcea 	bl	800b194 <__pow5mult>
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	4606      	mov	r6, r0
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	f000 fc40 	bl	800b04c <__multiply>
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4651      	mov	r1, sl
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	f000 fb6b 	bl	800aeac <_Bfree>
 800a7d6:	46c2      	mov	sl, r8
 800a7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7da:	1b1a      	subs	r2, r3, r4
 800a7dc:	d004      	beq.n	800a7e8 <_dtoa_r+0x7c0>
 800a7de:	4651      	mov	r1, sl
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f000 fcd7 	bl	800b194 <__pow5mult>
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f000 fc18 	bl	800b020 <__i2b>
 800a7f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f340 8087 	ble.w	800a908 <_dtoa_r+0x8e0>
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	4601      	mov	r1, r0
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 fcc8 	bl	800b194 <__pow5mult>
 800a804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a806:	4604      	mov	r4, r0
 800a808:	2b01      	cmp	r3, #1
 800a80a:	f340 8080 	ble.w	800a90e <_dtoa_r+0x8e6>
 800a80e:	f04f 0800 	mov.w	r8, #0
 800a812:	6923      	ldr	r3, [r4, #16]
 800a814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a818:	6918      	ldr	r0, [r3, #16]
 800a81a:	f000 fbb3 	bl	800af84 <__hi0bits>
 800a81e:	f1c0 0020 	rsb	r0, r0, #32
 800a822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a824:	4418      	add	r0, r3
 800a826:	f010 001f 	ands.w	r0, r0, #31
 800a82a:	f000 8092 	beq.w	800a952 <_dtoa_r+0x92a>
 800a82e:	f1c0 0320 	rsb	r3, r0, #32
 800a832:	2b04      	cmp	r3, #4
 800a834:	f340 808a 	ble.w	800a94c <_dtoa_r+0x924>
 800a838:	f1c0 001c 	rsb	r0, r0, #28
 800a83c:	9b06      	ldr	r3, [sp, #24]
 800a83e:	4407      	add	r7, r0
 800a840:	4403      	add	r3, r0
 800a842:	9306      	str	r3, [sp, #24]
 800a844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a846:	4403      	add	r3, r0
 800a848:	9309      	str	r3, [sp, #36]	; 0x24
 800a84a:	9b06      	ldr	r3, [sp, #24]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dd05      	ble.n	800a85c <_dtoa_r+0x834>
 800a850:	4651      	mov	r1, sl
 800a852:	461a      	mov	r2, r3
 800a854:	4628      	mov	r0, r5
 800a856:	f000 fcf7 	bl	800b248 <__lshift>
 800a85a:	4682      	mov	sl, r0
 800a85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd05      	ble.n	800a86e <_dtoa_r+0x846>
 800a862:	4621      	mov	r1, r4
 800a864:	461a      	mov	r2, r3
 800a866:	4628      	mov	r0, r5
 800a868:	f000 fcee 	bl	800b248 <__lshift>
 800a86c:	4604      	mov	r4, r0
 800a86e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d070      	beq.n	800a956 <_dtoa_r+0x92e>
 800a874:	4621      	mov	r1, r4
 800a876:	4650      	mov	r0, sl
 800a878:	f000 fd52 	bl	800b320 <__mcmp>
 800a87c:	2800      	cmp	r0, #0
 800a87e:	da6a      	bge.n	800a956 <_dtoa_r+0x92e>
 800a880:	2300      	movs	r3, #0
 800a882:	4651      	mov	r1, sl
 800a884:	220a      	movs	r2, #10
 800a886:	4628      	mov	r0, r5
 800a888:	f000 fb32 	bl	800aef0 <__multadd>
 800a88c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88e:	4682      	mov	sl, r0
 800a890:	f109 39ff 	add.w	r9, r9, #4294967295
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 8193 	beq.w	800abc0 <_dtoa_r+0xb98>
 800a89a:	4631      	mov	r1, r6
 800a89c:	2300      	movs	r3, #0
 800a89e:	220a      	movs	r2, #10
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	f000 fb25 	bl	800aef0 <__multadd>
 800a8a6:	f1bb 0f00 	cmp.w	fp, #0
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	f300 8093 	bgt.w	800a9d6 <_dtoa_r+0x9ae>
 800a8b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	dc57      	bgt.n	800a966 <_dtoa_r+0x93e>
 800a8b6:	e08e      	b.n	800a9d6 <_dtoa_r+0x9ae>
 800a8b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8be:	e756      	b.n	800a76e <_dtoa_r+0x746>
 800a8c0:	9b02      	ldr	r3, [sp, #8]
 800a8c2:	1e5c      	subs	r4, r3, #1
 800a8c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c6:	42a3      	cmp	r3, r4
 800a8c8:	bfb7      	itett	lt
 800a8ca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a8cc:	1b1c      	subge	r4, r3, r4
 800a8ce:	1ae2      	sublt	r2, r4, r3
 800a8d0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a8d2:	bfbe      	ittt	lt
 800a8d4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a8d6:	189b      	addlt	r3, r3, r2
 800a8d8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a8da:	9b02      	ldr	r3, [sp, #8]
 800a8dc:	bfb8      	it	lt
 800a8de:	2400      	movlt	r4, #0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	bfbb      	ittet	lt
 800a8e4:	9b06      	ldrlt	r3, [sp, #24]
 800a8e6:	9a02      	ldrlt	r2, [sp, #8]
 800a8e8:	9f06      	ldrge	r7, [sp, #24]
 800a8ea:	1a9f      	sublt	r7, r3, r2
 800a8ec:	bfac      	ite	ge
 800a8ee:	9b02      	ldrge	r3, [sp, #8]
 800a8f0:	2300      	movlt	r3, #0
 800a8f2:	e73e      	b.n	800a772 <_dtoa_r+0x74a>
 800a8f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8f6:	9f06      	ldr	r7, [sp, #24]
 800a8f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a8fa:	e745      	b.n	800a788 <_dtoa_r+0x760>
 800a8fc:	3fe00000 	.word	0x3fe00000
 800a900:	40240000 	.word	0x40240000
 800a904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a906:	e76a      	b.n	800a7de <_dtoa_r+0x7b6>
 800a908:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	dc19      	bgt.n	800a942 <_dtoa_r+0x91a>
 800a90e:	9b04      	ldr	r3, [sp, #16]
 800a910:	b9bb      	cbnz	r3, 800a942 <_dtoa_r+0x91a>
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a918:	b99b      	cbnz	r3, 800a942 <_dtoa_r+0x91a>
 800a91a:	9b05      	ldr	r3, [sp, #20]
 800a91c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a920:	0d1b      	lsrs	r3, r3, #20
 800a922:	051b      	lsls	r3, r3, #20
 800a924:	b183      	cbz	r3, 800a948 <_dtoa_r+0x920>
 800a926:	f04f 0801 	mov.w	r8, #1
 800a92a:	9b06      	ldr	r3, [sp, #24]
 800a92c:	3301      	adds	r3, #1
 800a92e:	9306      	str	r3, [sp, #24]
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	3301      	adds	r3, #1
 800a934:	9309      	str	r3, [sp, #36]	; 0x24
 800a936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f47f af6a 	bne.w	800a812 <_dtoa_r+0x7ea>
 800a93e:	2001      	movs	r0, #1
 800a940:	e76f      	b.n	800a822 <_dtoa_r+0x7fa>
 800a942:	f04f 0800 	mov.w	r8, #0
 800a946:	e7f6      	b.n	800a936 <_dtoa_r+0x90e>
 800a948:	4698      	mov	r8, r3
 800a94a:	e7f4      	b.n	800a936 <_dtoa_r+0x90e>
 800a94c:	f43f af7d 	beq.w	800a84a <_dtoa_r+0x822>
 800a950:	4618      	mov	r0, r3
 800a952:	301c      	adds	r0, #28
 800a954:	e772      	b.n	800a83c <_dtoa_r+0x814>
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dc36      	bgt.n	800a9ca <_dtoa_r+0x9a2>
 800a95c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a95e:	2b02      	cmp	r3, #2
 800a960:	dd33      	ble.n	800a9ca <_dtoa_r+0x9a2>
 800a962:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a966:	f1bb 0f00 	cmp.w	fp, #0
 800a96a:	d10d      	bne.n	800a988 <_dtoa_r+0x960>
 800a96c:	4621      	mov	r1, r4
 800a96e:	465b      	mov	r3, fp
 800a970:	2205      	movs	r2, #5
 800a972:	4628      	mov	r0, r5
 800a974:	f000 fabc 	bl	800aef0 <__multadd>
 800a978:	4601      	mov	r1, r0
 800a97a:	4604      	mov	r4, r0
 800a97c:	4650      	mov	r0, sl
 800a97e:	f000 fccf 	bl	800b320 <__mcmp>
 800a982:	2800      	cmp	r0, #0
 800a984:	f73f adb6 	bgt.w	800a4f4 <_dtoa_r+0x4cc>
 800a988:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a98a:	9f08      	ldr	r7, [sp, #32]
 800a98c:	ea6f 0903 	mvn.w	r9, r3
 800a990:	f04f 0800 	mov.w	r8, #0
 800a994:	4621      	mov	r1, r4
 800a996:	4628      	mov	r0, r5
 800a998:	f000 fa88 	bl	800aeac <_Bfree>
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	f43f aea4 	beq.w	800a6ea <_dtoa_r+0x6c2>
 800a9a2:	f1b8 0f00 	cmp.w	r8, #0
 800a9a6:	d005      	beq.n	800a9b4 <_dtoa_r+0x98c>
 800a9a8:	45b0      	cmp	r8, r6
 800a9aa:	d003      	beq.n	800a9b4 <_dtoa_r+0x98c>
 800a9ac:	4641      	mov	r1, r8
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	f000 fa7c 	bl	800aeac <_Bfree>
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	f000 fa78 	bl	800aeac <_Bfree>
 800a9bc:	e695      	b.n	800a6ea <_dtoa_r+0x6c2>
 800a9be:	2400      	movs	r4, #0
 800a9c0:	4626      	mov	r6, r4
 800a9c2:	e7e1      	b.n	800a988 <_dtoa_r+0x960>
 800a9c4:	46c1      	mov	r9, r8
 800a9c6:	4626      	mov	r6, r4
 800a9c8:	e594      	b.n	800a4f4 <_dtoa_r+0x4cc>
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	f8dd b008 	ldr.w	fp, [sp, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80fc 	beq.w	800abce <_dtoa_r+0xba6>
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	dd05      	ble.n	800a9e6 <_dtoa_r+0x9be>
 800a9da:	4631      	mov	r1, r6
 800a9dc:	463a      	mov	r2, r7
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f000 fc32 	bl	800b248 <__lshift>
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ea:	d05c      	beq.n	800aaa6 <_dtoa_r+0xa7e>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	6871      	ldr	r1, [r6, #4]
 800a9f0:	f000 fa1c 	bl	800ae2c <_Balloc>
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	b928      	cbnz	r0, 800aa04 <_dtoa_r+0x9dc>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9fe:	4b7e      	ldr	r3, [pc, #504]	; (800abf8 <_dtoa_r+0xbd0>)
 800aa00:	f7ff bb26 	b.w	800a050 <_dtoa_r+0x28>
 800aa04:	6932      	ldr	r2, [r6, #16]
 800aa06:	f106 010c 	add.w	r1, r6, #12
 800aa0a:	3202      	adds	r2, #2
 800aa0c:	0092      	lsls	r2, r2, #2
 800aa0e:	300c      	adds	r0, #12
 800aa10:	f7fe fde6 	bl	80095e0 <memcpy>
 800aa14:	2201      	movs	r2, #1
 800aa16:	4639      	mov	r1, r7
 800aa18:	4628      	mov	r0, r5
 800aa1a:	f000 fc15 	bl	800b248 <__lshift>
 800aa1e:	46b0      	mov	r8, r6
 800aa20:	4606      	mov	r6, r0
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3301      	adds	r3, #1
 800aa26:	9302      	str	r3, [sp, #8]
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	445b      	add	r3, fp
 800aa2c:	930a      	str	r3, [sp, #40]	; 0x28
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	9309      	str	r3, [sp, #36]	; 0x24
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f103 3bff 	add.w	fp, r3, #4294967295
 800aa40:	f7ff fa64 	bl	8009f0c <quorem>
 800aa44:	4603      	mov	r3, r0
 800aa46:	4641      	mov	r1, r8
 800aa48:	3330      	adds	r3, #48	; 0x30
 800aa4a:	9004      	str	r0, [sp, #16]
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa50:	f000 fc66 	bl	800b320 <__mcmp>
 800aa54:	4632      	mov	r2, r6
 800aa56:	9006      	str	r0, [sp, #24]
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 fc7c 	bl	800b358 <__mdiff>
 800aa60:	68c2      	ldr	r2, [r0, #12]
 800aa62:	4607      	mov	r7, r0
 800aa64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa66:	bb02      	cbnz	r2, 800aaaa <_dtoa_r+0xa82>
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4650      	mov	r0, sl
 800aa6c:	f000 fc58 	bl	800b320 <__mcmp>
 800aa70:	4602      	mov	r2, r0
 800aa72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa74:	4639      	mov	r1, r7
 800aa76:	4628      	mov	r0, r5
 800aa78:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aa7c:	f000 fa16 	bl	800aeac <_Bfree>
 800aa80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa84:	9f02      	ldr	r7, [sp, #8]
 800aa86:	ea43 0102 	orr.w	r1, r3, r2
 800aa8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8c:	430b      	orrs	r3, r1
 800aa8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa90:	d10d      	bne.n	800aaae <_dtoa_r+0xa86>
 800aa92:	2b39      	cmp	r3, #57	; 0x39
 800aa94:	d027      	beq.n	800aae6 <_dtoa_r+0xabe>
 800aa96:	9a06      	ldr	r2, [sp, #24]
 800aa98:	2a00      	cmp	r2, #0
 800aa9a:	dd01      	ble.n	800aaa0 <_dtoa_r+0xa78>
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	3331      	adds	r3, #49	; 0x31
 800aaa0:	f88b 3000 	strb.w	r3, [fp]
 800aaa4:	e776      	b.n	800a994 <_dtoa_r+0x96c>
 800aaa6:	4630      	mov	r0, r6
 800aaa8:	e7b9      	b.n	800aa1e <_dtoa_r+0x9f6>
 800aaaa:	2201      	movs	r2, #1
 800aaac:	e7e2      	b.n	800aa74 <_dtoa_r+0xa4c>
 800aaae:	9906      	ldr	r1, [sp, #24]
 800aab0:	2900      	cmp	r1, #0
 800aab2:	db04      	blt.n	800aabe <_dtoa_r+0xa96>
 800aab4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800aab6:	4301      	orrs	r1, r0
 800aab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaba:	4301      	orrs	r1, r0
 800aabc:	d120      	bne.n	800ab00 <_dtoa_r+0xad8>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	ddee      	ble.n	800aaa0 <_dtoa_r+0xa78>
 800aac2:	4651      	mov	r1, sl
 800aac4:	2201      	movs	r2, #1
 800aac6:	4628      	mov	r0, r5
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	f000 fbbd 	bl	800b248 <__lshift>
 800aace:	4621      	mov	r1, r4
 800aad0:	4682      	mov	sl, r0
 800aad2:	f000 fc25 	bl	800b320 <__mcmp>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	9b02      	ldr	r3, [sp, #8]
 800aada:	dc02      	bgt.n	800aae2 <_dtoa_r+0xaba>
 800aadc:	d1e0      	bne.n	800aaa0 <_dtoa_r+0xa78>
 800aade:	07da      	lsls	r2, r3, #31
 800aae0:	d5de      	bpl.n	800aaa0 <_dtoa_r+0xa78>
 800aae2:	2b39      	cmp	r3, #57	; 0x39
 800aae4:	d1da      	bne.n	800aa9c <_dtoa_r+0xa74>
 800aae6:	2339      	movs	r3, #57	; 0x39
 800aae8:	f88b 3000 	strb.w	r3, [fp]
 800aaec:	463b      	mov	r3, r7
 800aaee:	461f      	mov	r7, r3
 800aaf0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	2a39      	cmp	r2, #57	; 0x39
 800aaf8:	d050      	beq.n	800ab9c <_dtoa_r+0xb74>
 800aafa:	3201      	adds	r2, #1
 800aafc:	701a      	strb	r2, [r3, #0]
 800aafe:	e749      	b.n	800a994 <_dtoa_r+0x96c>
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	dd03      	ble.n	800ab0c <_dtoa_r+0xae4>
 800ab04:	2b39      	cmp	r3, #57	; 0x39
 800ab06:	d0ee      	beq.n	800aae6 <_dtoa_r+0xabe>
 800ab08:	3301      	adds	r3, #1
 800ab0a:	e7c9      	b.n	800aaa0 <_dtoa_r+0xa78>
 800ab0c:	9a02      	ldr	r2, [sp, #8]
 800ab0e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ab10:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ab14:	428a      	cmp	r2, r1
 800ab16:	d02a      	beq.n	800ab6e <_dtoa_r+0xb46>
 800ab18:	4651      	mov	r1, sl
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	220a      	movs	r2, #10
 800ab1e:	4628      	mov	r0, r5
 800ab20:	f000 f9e6 	bl	800aef0 <__multadd>
 800ab24:	45b0      	cmp	r8, r6
 800ab26:	4682      	mov	sl, r0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	f04f 020a 	mov.w	r2, #10
 800ab30:	4641      	mov	r1, r8
 800ab32:	4628      	mov	r0, r5
 800ab34:	d107      	bne.n	800ab46 <_dtoa_r+0xb1e>
 800ab36:	f000 f9db 	bl	800aef0 <__multadd>
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	9b02      	ldr	r3, [sp, #8]
 800ab40:	3301      	adds	r3, #1
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	e777      	b.n	800aa36 <_dtoa_r+0xa0e>
 800ab46:	f000 f9d3 	bl	800aef0 <__multadd>
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	220a      	movs	r2, #10
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 f9cc 	bl	800aef0 <__multadd>
 800ab58:	4606      	mov	r6, r0
 800ab5a:	e7f0      	b.n	800ab3e <_dtoa_r+0xb16>
 800ab5c:	f1bb 0f00 	cmp.w	fp, #0
 800ab60:	bfcc      	ite	gt
 800ab62:	465f      	movgt	r7, fp
 800ab64:	2701      	movle	r7, #1
 800ab66:	f04f 0800 	mov.w	r8, #0
 800ab6a:	9a08      	ldr	r2, [sp, #32]
 800ab6c:	4417      	add	r7, r2
 800ab6e:	4651      	mov	r1, sl
 800ab70:	2201      	movs	r2, #1
 800ab72:	4628      	mov	r0, r5
 800ab74:	9302      	str	r3, [sp, #8]
 800ab76:	f000 fb67 	bl	800b248 <__lshift>
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4682      	mov	sl, r0
 800ab7e:	f000 fbcf 	bl	800b320 <__mcmp>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	dcb2      	bgt.n	800aaec <_dtoa_r+0xac4>
 800ab86:	d102      	bne.n	800ab8e <_dtoa_r+0xb66>
 800ab88:	9b02      	ldr	r3, [sp, #8]
 800ab8a:	07db      	lsls	r3, r3, #31
 800ab8c:	d4ae      	bmi.n	800aaec <_dtoa_r+0xac4>
 800ab8e:	463b      	mov	r3, r7
 800ab90:	461f      	mov	r7, r3
 800ab92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab96:	2a30      	cmp	r2, #48	; 0x30
 800ab98:	d0fa      	beq.n	800ab90 <_dtoa_r+0xb68>
 800ab9a:	e6fb      	b.n	800a994 <_dtoa_r+0x96c>
 800ab9c:	9a08      	ldr	r2, [sp, #32]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d1a5      	bne.n	800aaee <_dtoa_r+0xac6>
 800aba2:	2331      	movs	r3, #49	; 0x31
 800aba4:	f109 0901 	add.w	r9, r9, #1
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	e6f3      	b.n	800a994 <_dtoa_r+0x96c>
 800abac:	4b13      	ldr	r3, [pc, #76]	; (800abfc <_dtoa_r+0xbd4>)
 800abae:	f7ff baa7 	b.w	800a100 <_dtoa_r+0xd8>
 800abb2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f47f aa80 	bne.w	800a0ba <_dtoa_r+0x92>
 800abba:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <_dtoa_r+0xbd8>)
 800abbc:	f7ff baa0 	b.w	800a100 <_dtoa_r+0xd8>
 800abc0:	f1bb 0f00 	cmp.w	fp, #0
 800abc4:	dc03      	bgt.n	800abce <_dtoa_r+0xba6>
 800abc6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abc8:	2b02      	cmp	r3, #2
 800abca:	f73f aecc 	bgt.w	800a966 <_dtoa_r+0x93e>
 800abce:	9f08      	ldr	r7, [sp, #32]
 800abd0:	4621      	mov	r1, r4
 800abd2:	4650      	mov	r0, sl
 800abd4:	f7ff f99a 	bl	8009f0c <quorem>
 800abd8:	9a08      	ldr	r2, [sp, #32]
 800abda:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abde:	f807 3b01 	strb.w	r3, [r7], #1
 800abe2:	1aba      	subs	r2, r7, r2
 800abe4:	4593      	cmp	fp, r2
 800abe6:	ddb9      	ble.n	800ab5c <_dtoa_r+0xb34>
 800abe8:	4651      	mov	r1, sl
 800abea:	2300      	movs	r3, #0
 800abec:	220a      	movs	r2, #10
 800abee:	4628      	mov	r0, r5
 800abf0:	f000 f97e 	bl	800aef0 <__multadd>
 800abf4:	4682      	mov	sl, r0
 800abf6:	e7eb      	b.n	800abd0 <_dtoa_r+0xba8>
 800abf8:	0800ccf7 	.word	0x0800ccf7
 800abfc:	0800cc50 	.word	0x0800cc50
 800ac00:	0800cc74 	.word	0x0800cc74

0800ac04 <std>:
 800ac04:	2300      	movs	r3, #0
 800ac06:	b510      	push	{r4, lr}
 800ac08:	4604      	mov	r4, r0
 800ac0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ac0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac12:	6083      	str	r3, [r0, #8]
 800ac14:	8181      	strh	r1, [r0, #12]
 800ac16:	6643      	str	r3, [r0, #100]	; 0x64
 800ac18:	81c2      	strh	r2, [r0, #14]
 800ac1a:	6183      	str	r3, [r0, #24]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	2208      	movs	r2, #8
 800ac20:	305c      	adds	r0, #92	; 0x5c
 800ac22:	f7fe fceb 	bl	80095fc <memset>
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <std+0x38>)
 800ac28:	6224      	str	r4, [r4, #32]
 800ac2a:	6263      	str	r3, [r4, #36]	; 0x24
 800ac2c:	4b04      	ldr	r3, [pc, #16]	; (800ac40 <std+0x3c>)
 800ac2e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac30:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <std+0x40>)
 800ac32:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <std+0x44>)
 800ac36:	6323      	str	r3, [r4, #48]	; 0x30
 800ac38:	bd10      	pop	{r4, pc}
 800ac3a:	bf00      	nop
 800ac3c:	0800b971 	.word	0x0800b971
 800ac40:	0800b993 	.word	0x0800b993
 800ac44:	0800b9cb 	.word	0x0800b9cb
 800ac48:	0800b9ef 	.word	0x0800b9ef

0800ac4c <_cleanup_r>:
 800ac4c:	4901      	ldr	r1, [pc, #4]	; (800ac54 <_cleanup_r+0x8>)
 800ac4e:	f000 b8af 	b.w	800adb0 <_fwalk_reent>
 800ac52:	bf00      	nop
 800ac54:	0800bd05 	.word	0x0800bd05

0800ac58 <__sfmoreglue>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	2568      	movs	r5, #104	; 0x68
 800ac5c:	1e4a      	subs	r2, r1, #1
 800ac5e:	4355      	muls	r5, r2
 800ac60:	460e      	mov	r6, r1
 800ac62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac66:	f000 fcbd 	bl	800b5e4 <_malloc_r>
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	b140      	cbz	r0, 800ac80 <__sfmoreglue+0x28>
 800ac6e:	2100      	movs	r1, #0
 800ac70:	e9c0 1600 	strd	r1, r6, [r0]
 800ac74:	300c      	adds	r0, #12
 800ac76:	60a0      	str	r0, [r4, #8]
 800ac78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac7c:	f7fe fcbe 	bl	80095fc <memset>
 800ac80:	4620      	mov	r0, r4
 800ac82:	bd70      	pop	{r4, r5, r6, pc}

0800ac84 <__sfp_lock_acquire>:
 800ac84:	4801      	ldr	r0, [pc, #4]	; (800ac8c <__sfp_lock_acquire+0x8>)
 800ac86:	f000 b8b8 	b.w	800adfa <__retarget_lock_acquire_recursive>
 800ac8a:	bf00      	nop
 800ac8c:	200033f4 	.word	0x200033f4

0800ac90 <__sfp_lock_release>:
 800ac90:	4801      	ldr	r0, [pc, #4]	; (800ac98 <__sfp_lock_release+0x8>)
 800ac92:	f000 b8b3 	b.w	800adfc <__retarget_lock_release_recursive>
 800ac96:	bf00      	nop
 800ac98:	200033f4 	.word	0x200033f4

0800ac9c <__sinit_lock_acquire>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__sinit_lock_acquire+0x8>)
 800ac9e:	f000 b8ac 	b.w	800adfa <__retarget_lock_acquire_recursive>
 800aca2:	bf00      	nop
 800aca4:	200033f3 	.word	0x200033f3

0800aca8 <__sinit_lock_release>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__sinit_lock_release+0x8>)
 800acaa:	f000 b8a7 	b.w	800adfc <__retarget_lock_release_recursive>
 800acae:	bf00      	nop
 800acb0:	200033f3 	.word	0x200033f3

0800acb4 <__sinit>:
 800acb4:	b510      	push	{r4, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	f7ff fff0 	bl	800ac9c <__sinit_lock_acquire>
 800acbc:	69a3      	ldr	r3, [r4, #24]
 800acbe:	b11b      	cbz	r3, 800acc8 <__sinit+0x14>
 800acc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acc4:	f7ff bff0 	b.w	800aca8 <__sinit_lock_release>
 800acc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800accc:	6523      	str	r3, [r4, #80]	; 0x50
 800acce:	4b13      	ldr	r3, [pc, #76]	; (800ad1c <__sinit+0x68>)
 800acd0:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <__sinit+0x6c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	bf08      	it	eq
 800acda:	2301      	moveq	r3, #1
 800acdc:	4620      	mov	r0, r4
 800acde:	bf08      	it	eq
 800ace0:	61a3      	streq	r3, [r4, #24]
 800ace2:	f000 f81f 	bl	800ad24 <__sfp>
 800ace6:	6060      	str	r0, [r4, #4]
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 f81b 	bl	800ad24 <__sfp>
 800acee:	60a0      	str	r0, [r4, #8]
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 f817 	bl	800ad24 <__sfp>
 800acf6:	2200      	movs	r2, #0
 800acf8:	2104      	movs	r1, #4
 800acfa:	60e0      	str	r0, [r4, #12]
 800acfc:	6860      	ldr	r0, [r4, #4]
 800acfe:	f7ff ff81 	bl	800ac04 <std>
 800ad02:	2201      	movs	r2, #1
 800ad04:	2109      	movs	r1, #9
 800ad06:	68a0      	ldr	r0, [r4, #8]
 800ad08:	f7ff ff7c 	bl	800ac04 <std>
 800ad0c:	2202      	movs	r2, #2
 800ad0e:	2112      	movs	r1, #18
 800ad10:	68e0      	ldr	r0, [r4, #12]
 800ad12:	f7ff ff77 	bl	800ac04 <std>
 800ad16:	2301      	movs	r3, #1
 800ad18:	61a3      	str	r3, [r4, #24]
 800ad1a:	e7d1      	b.n	800acc0 <__sinit+0xc>
 800ad1c:	0800cc3c 	.word	0x0800cc3c
 800ad20:	0800ac4d 	.word	0x0800ac4d

0800ad24 <__sfp>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	4607      	mov	r7, r0
 800ad28:	f7ff ffac 	bl	800ac84 <__sfp_lock_acquire>
 800ad2c:	4b1e      	ldr	r3, [pc, #120]	; (800ada8 <__sfp+0x84>)
 800ad2e:	681e      	ldr	r6, [r3, #0]
 800ad30:	69b3      	ldr	r3, [r6, #24]
 800ad32:	b913      	cbnz	r3, 800ad3a <__sfp+0x16>
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff ffbd 	bl	800acb4 <__sinit>
 800ad3a:	3648      	adds	r6, #72	; 0x48
 800ad3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad40:	3b01      	subs	r3, #1
 800ad42:	d503      	bpl.n	800ad4c <__sfp+0x28>
 800ad44:	6833      	ldr	r3, [r6, #0]
 800ad46:	b30b      	cbz	r3, 800ad8c <__sfp+0x68>
 800ad48:	6836      	ldr	r6, [r6, #0]
 800ad4a:	e7f7      	b.n	800ad3c <__sfp+0x18>
 800ad4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad50:	b9d5      	cbnz	r5, 800ad88 <__sfp+0x64>
 800ad52:	4b16      	ldr	r3, [pc, #88]	; (800adac <__sfp+0x88>)
 800ad54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad58:	60e3      	str	r3, [r4, #12]
 800ad5a:	6665      	str	r5, [r4, #100]	; 0x64
 800ad5c:	f000 f84c 	bl	800adf8 <__retarget_lock_init_recursive>
 800ad60:	f7ff ff96 	bl	800ac90 <__sfp_lock_release>
 800ad64:	2208      	movs	r2, #8
 800ad66:	4629      	mov	r1, r5
 800ad68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad70:	6025      	str	r5, [r4, #0]
 800ad72:	61a5      	str	r5, [r4, #24]
 800ad74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad78:	f7fe fc40 	bl	80095fc <memset>
 800ad7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad84:	4620      	mov	r0, r4
 800ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad88:	3468      	adds	r4, #104	; 0x68
 800ad8a:	e7d9      	b.n	800ad40 <__sfp+0x1c>
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7ff ff62 	bl	800ac58 <__sfmoreglue>
 800ad94:	4604      	mov	r4, r0
 800ad96:	6030      	str	r0, [r6, #0]
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d1d5      	bne.n	800ad48 <__sfp+0x24>
 800ad9c:	f7ff ff78 	bl	800ac90 <__sfp_lock_release>
 800ada0:	230c      	movs	r3, #12
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	e7ee      	b.n	800ad84 <__sfp+0x60>
 800ada6:	bf00      	nop
 800ada8:	0800cc3c 	.word	0x0800cc3c
 800adac:	ffff0001 	.word	0xffff0001

0800adb0 <_fwalk_reent>:
 800adb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb4:	4606      	mov	r6, r0
 800adb6:	4688      	mov	r8, r1
 800adb8:	2700      	movs	r7, #0
 800adba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800adbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adc2:	f1b9 0901 	subs.w	r9, r9, #1
 800adc6:	d505      	bpl.n	800add4 <_fwalk_reent+0x24>
 800adc8:	6824      	ldr	r4, [r4, #0]
 800adca:	2c00      	cmp	r4, #0
 800adcc:	d1f7      	bne.n	800adbe <_fwalk_reent+0xe>
 800adce:	4638      	mov	r0, r7
 800add0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800add4:	89ab      	ldrh	r3, [r5, #12]
 800add6:	2b01      	cmp	r3, #1
 800add8:	d907      	bls.n	800adea <_fwalk_reent+0x3a>
 800adda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adde:	3301      	adds	r3, #1
 800ade0:	d003      	beq.n	800adea <_fwalk_reent+0x3a>
 800ade2:	4629      	mov	r1, r5
 800ade4:	4630      	mov	r0, r6
 800ade6:	47c0      	blx	r8
 800ade8:	4307      	orrs	r7, r0
 800adea:	3568      	adds	r5, #104	; 0x68
 800adec:	e7e9      	b.n	800adc2 <_fwalk_reent+0x12>
	...

0800adf0 <_localeconv_r>:
 800adf0:	4800      	ldr	r0, [pc, #0]	; (800adf4 <_localeconv_r+0x4>)
 800adf2:	4770      	bx	lr
 800adf4:	200002d4 	.word	0x200002d4

0800adf8 <__retarget_lock_init_recursive>:
 800adf8:	4770      	bx	lr

0800adfa <__retarget_lock_acquire_recursive>:
 800adfa:	4770      	bx	lr

0800adfc <__retarget_lock_release_recursive>:
 800adfc:	4770      	bx	lr
	...

0800ae00 <malloc>:
 800ae00:	4b02      	ldr	r3, [pc, #8]	; (800ae0c <malloc+0xc>)
 800ae02:	4601      	mov	r1, r0
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f000 bbed 	b.w	800b5e4 <_malloc_r>
 800ae0a:	bf00      	nop
 800ae0c:	20000180 	.word	0x20000180

0800ae10 <memchr>:
 800ae10:	4603      	mov	r3, r0
 800ae12:	b510      	push	{r4, lr}
 800ae14:	b2c9      	uxtb	r1, r1
 800ae16:	4402      	add	r2, r0
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	d101      	bne.n	800ae22 <memchr+0x12>
 800ae1e:	2000      	movs	r0, #0
 800ae20:	e003      	b.n	800ae2a <memchr+0x1a>
 800ae22:	7804      	ldrb	r4, [r0, #0]
 800ae24:	3301      	adds	r3, #1
 800ae26:	428c      	cmp	r4, r1
 800ae28:	d1f6      	bne.n	800ae18 <memchr+0x8>
 800ae2a:	bd10      	pop	{r4, pc}

0800ae2c <_Balloc>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae30:	4604      	mov	r4, r0
 800ae32:	460d      	mov	r5, r1
 800ae34:	b976      	cbnz	r6, 800ae54 <_Balloc+0x28>
 800ae36:	2010      	movs	r0, #16
 800ae38:	f7ff ffe2 	bl	800ae00 <malloc>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ae40:	b920      	cbnz	r0, 800ae4c <_Balloc+0x20>
 800ae42:	2166      	movs	r1, #102	; 0x66
 800ae44:	4b17      	ldr	r3, [pc, #92]	; (800aea4 <_Balloc+0x78>)
 800ae46:	4818      	ldr	r0, [pc, #96]	; (800aea8 <_Balloc+0x7c>)
 800ae48:	f000 fea8 	bl	800bb9c <__assert_func>
 800ae4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae50:	6006      	str	r6, [r0, #0]
 800ae52:	60c6      	str	r6, [r0, #12]
 800ae54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae56:	68f3      	ldr	r3, [r6, #12]
 800ae58:	b183      	cbz	r3, 800ae7c <_Balloc+0x50>
 800ae5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae5c:	68db      	ldr	r3, [r3, #12]
 800ae5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae62:	b9b8      	cbnz	r0, 800ae94 <_Balloc+0x68>
 800ae64:	2101      	movs	r1, #1
 800ae66:	fa01 f605 	lsl.w	r6, r1, r5
 800ae6a:	1d72      	adds	r2, r6, #5
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	0092      	lsls	r2, r2, #2
 800ae70:	f000 fb5e 	bl	800b530 <_calloc_r>
 800ae74:	b160      	cbz	r0, 800ae90 <_Balloc+0x64>
 800ae76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae7a:	e00e      	b.n	800ae9a <_Balloc+0x6e>
 800ae7c:	2221      	movs	r2, #33	; 0x21
 800ae7e:	2104      	movs	r1, #4
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fb55 	bl	800b530 <_calloc_r>
 800ae86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae88:	60f0      	str	r0, [r6, #12]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e4      	bne.n	800ae5a <_Balloc+0x2e>
 800ae90:	2000      	movs	r0, #0
 800ae92:	bd70      	pop	{r4, r5, r6, pc}
 800ae94:	6802      	ldr	r2, [r0, #0]
 800ae96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aea0:	e7f7      	b.n	800ae92 <_Balloc+0x66>
 800aea2:	bf00      	nop
 800aea4:	0800cc81 	.word	0x0800cc81
 800aea8:	0800cd68 	.word	0x0800cd68

0800aeac <_Bfree>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	b976      	cbnz	r6, 800aed4 <_Bfree+0x28>
 800aeb6:	2010      	movs	r0, #16
 800aeb8:	f7ff ffa2 	bl	800ae00 <malloc>
 800aebc:	4602      	mov	r2, r0
 800aebe:	6268      	str	r0, [r5, #36]	; 0x24
 800aec0:	b920      	cbnz	r0, 800aecc <_Bfree+0x20>
 800aec2:	218a      	movs	r1, #138	; 0x8a
 800aec4:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <_Bfree+0x3c>)
 800aec6:	4809      	ldr	r0, [pc, #36]	; (800aeec <_Bfree+0x40>)
 800aec8:	f000 fe68 	bl	800bb9c <__assert_func>
 800aecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aed0:	6006      	str	r6, [r0, #0]
 800aed2:	60c6      	str	r6, [r0, #12]
 800aed4:	b13c      	cbz	r4, 800aee6 <_Bfree+0x3a>
 800aed6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aed8:	6862      	ldr	r2, [r4, #4]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aee0:	6021      	str	r1, [r4, #0]
 800aee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aee6:	bd70      	pop	{r4, r5, r6, pc}
 800aee8:	0800cc81 	.word	0x0800cc81
 800aeec:	0800cd68 	.word	0x0800cd68

0800aef0 <__multadd>:
 800aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef4:	4698      	mov	r8, r3
 800aef6:	460c      	mov	r4, r1
 800aef8:	2300      	movs	r3, #0
 800aefa:	690e      	ldr	r6, [r1, #16]
 800aefc:	4607      	mov	r7, r0
 800aefe:	f101 0014 	add.w	r0, r1, #20
 800af02:	6805      	ldr	r5, [r0, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	b2a9      	uxth	r1, r5
 800af08:	fb02 8101 	mla	r1, r2, r1, r8
 800af0c:	0c2d      	lsrs	r5, r5, #16
 800af0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af12:	fb02 c505 	mla	r5, r2, r5, ip
 800af16:	b289      	uxth	r1, r1
 800af18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af1c:	429e      	cmp	r6, r3
 800af1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af22:	f840 1b04 	str.w	r1, [r0], #4
 800af26:	dcec      	bgt.n	800af02 <__multadd+0x12>
 800af28:	f1b8 0f00 	cmp.w	r8, #0
 800af2c:	d022      	beq.n	800af74 <__multadd+0x84>
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	42b3      	cmp	r3, r6
 800af32:	dc19      	bgt.n	800af68 <__multadd+0x78>
 800af34:	6861      	ldr	r1, [r4, #4]
 800af36:	4638      	mov	r0, r7
 800af38:	3101      	adds	r1, #1
 800af3a:	f7ff ff77 	bl	800ae2c <_Balloc>
 800af3e:	4605      	mov	r5, r0
 800af40:	b928      	cbnz	r0, 800af4e <__multadd+0x5e>
 800af42:	4602      	mov	r2, r0
 800af44:	21b5      	movs	r1, #181	; 0xb5
 800af46:	4b0d      	ldr	r3, [pc, #52]	; (800af7c <__multadd+0x8c>)
 800af48:	480d      	ldr	r0, [pc, #52]	; (800af80 <__multadd+0x90>)
 800af4a:	f000 fe27 	bl	800bb9c <__assert_func>
 800af4e:	6922      	ldr	r2, [r4, #16]
 800af50:	f104 010c 	add.w	r1, r4, #12
 800af54:	3202      	adds	r2, #2
 800af56:	0092      	lsls	r2, r2, #2
 800af58:	300c      	adds	r0, #12
 800af5a:	f7fe fb41 	bl	80095e0 <memcpy>
 800af5e:	4621      	mov	r1, r4
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff ffa3 	bl	800aeac <_Bfree>
 800af66:	462c      	mov	r4, r5
 800af68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800af6c:	3601      	adds	r6, #1
 800af6e:	f8c3 8014 	str.w	r8, [r3, #20]
 800af72:	6126      	str	r6, [r4, #16]
 800af74:	4620      	mov	r0, r4
 800af76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af7a:	bf00      	nop
 800af7c:	0800ccf7 	.word	0x0800ccf7
 800af80:	0800cd68 	.word	0x0800cd68

0800af84 <__hi0bits>:
 800af84:	0c02      	lsrs	r2, r0, #16
 800af86:	0412      	lsls	r2, r2, #16
 800af88:	4603      	mov	r3, r0
 800af8a:	b9ca      	cbnz	r2, 800afc0 <__hi0bits+0x3c>
 800af8c:	0403      	lsls	r3, r0, #16
 800af8e:	2010      	movs	r0, #16
 800af90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af94:	bf04      	itt	eq
 800af96:	021b      	lsleq	r3, r3, #8
 800af98:	3008      	addeq	r0, #8
 800af9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af9e:	bf04      	itt	eq
 800afa0:	011b      	lsleq	r3, r3, #4
 800afa2:	3004      	addeq	r0, #4
 800afa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800afa8:	bf04      	itt	eq
 800afaa:	009b      	lsleq	r3, r3, #2
 800afac:	3002      	addeq	r0, #2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	db05      	blt.n	800afbe <__hi0bits+0x3a>
 800afb2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800afb6:	f100 0001 	add.w	r0, r0, #1
 800afba:	bf08      	it	eq
 800afbc:	2020      	moveq	r0, #32
 800afbe:	4770      	bx	lr
 800afc0:	2000      	movs	r0, #0
 800afc2:	e7e5      	b.n	800af90 <__hi0bits+0xc>

0800afc4 <__lo0bits>:
 800afc4:	6803      	ldr	r3, [r0, #0]
 800afc6:	4602      	mov	r2, r0
 800afc8:	f013 0007 	ands.w	r0, r3, #7
 800afcc:	d00b      	beq.n	800afe6 <__lo0bits+0x22>
 800afce:	07d9      	lsls	r1, r3, #31
 800afd0:	d422      	bmi.n	800b018 <__lo0bits+0x54>
 800afd2:	0798      	lsls	r0, r3, #30
 800afd4:	bf49      	itett	mi
 800afd6:	085b      	lsrmi	r3, r3, #1
 800afd8:	089b      	lsrpl	r3, r3, #2
 800afda:	2001      	movmi	r0, #1
 800afdc:	6013      	strmi	r3, [r2, #0]
 800afde:	bf5c      	itt	pl
 800afe0:	2002      	movpl	r0, #2
 800afe2:	6013      	strpl	r3, [r2, #0]
 800afe4:	4770      	bx	lr
 800afe6:	b299      	uxth	r1, r3
 800afe8:	b909      	cbnz	r1, 800afee <__lo0bits+0x2a>
 800afea:	2010      	movs	r0, #16
 800afec:	0c1b      	lsrs	r3, r3, #16
 800afee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aff2:	bf04      	itt	eq
 800aff4:	0a1b      	lsreq	r3, r3, #8
 800aff6:	3008      	addeq	r0, #8
 800aff8:	0719      	lsls	r1, r3, #28
 800affa:	bf04      	itt	eq
 800affc:	091b      	lsreq	r3, r3, #4
 800affe:	3004      	addeq	r0, #4
 800b000:	0799      	lsls	r1, r3, #30
 800b002:	bf04      	itt	eq
 800b004:	089b      	lsreq	r3, r3, #2
 800b006:	3002      	addeq	r0, #2
 800b008:	07d9      	lsls	r1, r3, #31
 800b00a:	d403      	bmi.n	800b014 <__lo0bits+0x50>
 800b00c:	085b      	lsrs	r3, r3, #1
 800b00e:	f100 0001 	add.w	r0, r0, #1
 800b012:	d003      	beq.n	800b01c <__lo0bits+0x58>
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	4770      	bx	lr
 800b018:	2000      	movs	r0, #0
 800b01a:	4770      	bx	lr
 800b01c:	2020      	movs	r0, #32
 800b01e:	4770      	bx	lr

0800b020 <__i2b>:
 800b020:	b510      	push	{r4, lr}
 800b022:	460c      	mov	r4, r1
 800b024:	2101      	movs	r1, #1
 800b026:	f7ff ff01 	bl	800ae2c <_Balloc>
 800b02a:	4602      	mov	r2, r0
 800b02c:	b928      	cbnz	r0, 800b03a <__i2b+0x1a>
 800b02e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b032:	4b04      	ldr	r3, [pc, #16]	; (800b044 <__i2b+0x24>)
 800b034:	4804      	ldr	r0, [pc, #16]	; (800b048 <__i2b+0x28>)
 800b036:	f000 fdb1 	bl	800bb9c <__assert_func>
 800b03a:	2301      	movs	r3, #1
 800b03c:	6144      	str	r4, [r0, #20]
 800b03e:	6103      	str	r3, [r0, #16]
 800b040:	bd10      	pop	{r4, pc}
 800b042:	bf00      	nop
 800b044:	0800ccf7 	.word	0x0800ccf7
 800b048:	0800cd68 	.word	0x0800cd68

0800b04c <__multiply>:
 800b04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b050:	4614      	mov	r4, r2
 800b052:	690a      	ldr	r2, [r1, #16]
 800b054:	6923      	ldr	r3, [r4, #16]
 800b056:	460d      	mov	r5, r1
 800b058:	429a      	cmp	r2, r3
 800b05a:	bfbe      	ittt	lt
 800b05c:	460b      	movlt	r3, r1
 800b05e:	4625      	movlt	r5, r4
 800b060:	461c      	movlt	r4, r3
 800b062:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b066:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b06a:	68ab      	ldr	r3, [r5, #8]
 800b06c:	6869      	ldr	r1, [r5, #4]
 800b06e:	eb0a 0709 	add.w	r7, sl, r9
 800b072:	42bb      	cmp	r3, r7
 800b074:	b085      	sub	sp, #20
 800b076:	bfb8      	it	lt
 800b078:	3101      	addlt	r1, #1
 800b07a:	f7ff fed7 	bl	800ae2c <_Balloc>
 800b07e:	b930      	cbnz	r0, 800b08e <__multiply+0x42>
 800b080:	4602      	mov	r2, r0
 800b082:	f240 115d 	movw	r1, #349	; 0x15d
 800b086:	4b41      	ldr	r3, [pc, #260]	; (800b18c <__multiply+0x140>)
 800b088:	4841      	ldr	r0, [pc, #260]	; (800b190 <__multiply+0x144>)
 800b08a:	f000 fd87 	bl	800bb9c <__assert_func>
 800b08e:	f100 0614 	add.w	r6, r0, #20
 800b092:	4633      	mov	r3, r6
 800b094:	2200      	movs	r2, #0
 800b096:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b09a:	4543      	cmp	r3, r8
 800b09c:	d31e      	bcc.n	800b0dc <__multiply+0x90>
 800b09e:	f105 0c14 	add.w	ip, r5, #20
 800b0a2:	f104 0314 	add.w	r3, r4, #20
 800b0a6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b0aa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b0ae:	9202      	str	r2, [sp, #8]
 800b0b0:	ebac 0205 	sub.w	r2, ip, r5
 800b0b4:	3a15      	subs	r2, #21
 800b0b6:	f022 0203 	bic.w	r2, r2, #3
 800b0ba:	3204      	adds	r2, #4
 800b0bc:	f105 0115 	add.w	r1, r5, #21
 800b0c0:	458c      	cmp	ip, r1
 800b0c2:	bf38      	it	cc
 800b0c4:	2204      	movcc	r2, #4
 800b0c6:	9201      	str	r2, [sp, #4]
 800b0c8:	9a02      	ldr	r2, [sp, #8]
 800b0ca:	9303      	str	r3, [sp, #12]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d808      	bhi.n	800b0e2 <__multiply+0x96>
 800b0d0:	2f00      	cmp	r7, #0
 800b0d2:	dc55      	bgt.n	800b180 <__multiply+0x134>
 800b0d4:	6107      	str	r7, [r0, #16]
 800b0d6:	b005      	add	sp, #20
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	f843 2b04 	str.w	r2, [r3], #4
 800b0e0:	e7db      	b.n	800b09a <__multiply+0x4e>
 800b0e2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0e6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ea:	d020      	beq.n	800b12e <__multiply+0xe2>
 800b0ec:	46b1      	mov	r9, r6
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f105 0e14 	add.w	lr, r5, #20
 800b0f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b0f8:	f8d9 b000 	ldr.w	fp, [r9]
 800b0fc:	b2a1      	uxth	r1, r4
 800b0fe:	fa1f fb8b 	uxth.w	fp, fp
 800b102:	fb0a b101 	mla	r1, sl, r1, fp
 800b106:	4411      	add	r1, r2
 800b108:	f8d9 2000 	ldr.w	r2, [r9]
 800b10c:	0c24      	lsrs	r4, r4, #16
 800b10e:	0c12      	lsrs	r2, r2, #16
 800b110:	fb0a 2404 	mla	r4, sl, r4, r2
 800b114:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b118:	b289      	uxth	r1, r1
 800b11a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b11e:	45f4      	cmp	ip, lr
 800b120:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b124:	f849 1b04 	str.w	r1, [r9], #4
 800b128:	d8e4      	bhi.n	800b0f4 <__multiply+0xa8>
 800b12a:	9901      	ldr	r1, [sp, #4]
 800b12c:	5072      	str	r2, [r6, r1]
 800b12e:	9a03      	ldr	r2, [sp, #12]
 800b130:	3304      	adds	r3, #4
 800b132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b136:	f1b9 0f00 	cmp.w	r9, #0
 800b13a:	d01f      	beq.n	800b17c <__multiply+0x130>
 800b13c:	46b6      	mov	lr, r6
 800b13e:	f04f 0a00 	mov.w	sl, #0
 800b142:	6834      	ldr	r4, [r6, #0]
 800b144:	f105 0114 	add.w	r1, r5, #20
 800b148:	880a      	ldrh	r2, [r1, #0]
 800b14a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b14e:	b2a4      	uxth	r4, r4
 800b150:	fb09 b202 	mla	r2, r9, r2, fp
 800b154:	4492      	add	sl, r2
 800b156:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b15a:	f84e 4b04 	str.w	r4, [lr], #4
 800b15e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b162:	f8be 2000 	ldrh.w	r2, [lr]
 800b166:	0c24      	lsrs	r4, r4, #16
 800b168:	fb09 2404 	mla	r4, r9, r4, r2
 800b16c:	458c      	cmp	ip, r1
 800b16e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b172:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b176:	d8e7      	bhi.n	800b148 <__multiply+0xfc>
 800b178:	9a01      	ldr	r2, [sp, #4]
 800b17a:	50b4      	str	r4, [r6, r2]
 800b17c:	3604      	adds	r6, #4
 800b17e:	e7a3      	b.n	800b0c8 <__multiply+0x7c>
 800b180:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1a5      	bne.n	800b0d4 <__multiply+0x88>
 800b188:	3f01      	subs	r7, #1
 800b18a:	e7a1      	b.n	800b0d0 <__multiply+0x84>
 800b18c:	0800ccf7 	.word	0x0800ccf7
 800b190:	0800cd68 	.word	0x0800cd68

0800b194 <__pow5mult>:
 800b194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b198:	4615      	mov	r5, r2
 800b19a:	f012 0203 	ands.w	r2, r2, #3
 800b19e:	4606      	mov	r6, r0
 800b1a0:	460f      	mov	r7, r1
 800b1a2:	d007      	beq.n	800b1b4 <__pow5mult+0x20>
 800b1a4:	4c25      	ldr	r4, [pc, #148]	; (800b23c <__pow5mult+0xa8>)
 800b1a6:	3a01      	subs	r2, #1
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1ae:	f7ff fe9f 	bl	800aef0 <__multadd>
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	10ad      	asrs	r5, r5, #2
 800b1b6:	d03d      	beq.n	800b234 <__pow5mult+0xa0>
 800b1b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ba:	b97c      	cbnz	r4, 800b1dc <__pow5mult+0x48>
 800b1bc:	2010      	movs	r0, #16
 800b1be:	f7ff fe1f 	bl	800ae00 <malloc>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b1c6:	b928      	cbnz	r0, 800b1d4 <__pow5mult+0x40>
 800b1c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1cc:	4b1c      	ldr	r3, [pc, #112]	; (800b240 <__pow5mult+0xac>)
 800b1ce:	481d      	ldr	r0, [pc, #116]	; (800b244 <__pow5mult+0xb0>)
 800b1d0:	f000 fce4 	bl	800bb9c <__assert_func>
 800b1d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1d8:	6004      	str	r4, [r0, #0]
 800b1da:	60c4      	str	r4, [r0, #12]
 800b1dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1e4:	b94c      	cbnz	r4, 800b1fa <__pow5mult+0x66>
 800b1e6:	f240 2171 	movw	r1, #625	; 0x271
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ff18 	bl	800b020 <__i2b>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1f8:	6003      	str	r3, [r0, #0]
 800b1fa:	f04f 0900 	mov.w	r9, #0
 800b1fe:	07eb      	lsls	r3, r5, #31
 800b200:	d50a      	bpl.n	800b218 <__pow5mult+0x84>
 800b202:	4639      	mov	r1, r7
 800b204:	4622      	mov	r2, r4
 800b206:	4630      	mov	r0, r6
 800b208:	f7ff ff20 	bl	800b04c <__multiply>
 800b20c:	4680      	mov	r8, r0
 800b20e:	4639      	mov	r1, r7
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fe4b 	bl	800aeac <_Bfree>
 800b216:	4647      	mov	r7, r8
 800b218:	106d      	asrs	r5, r5, #1
 800b21a:	d00b      	beq.n	800b234 <__pow5mult+0xa0>
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	b938      	cbnz	r0, 800b230 <__pow5mult+0x9c>
 800b220:	4622      	mov	r2, r4
 800b222:	4621      	mov	r1, r4
 800b224:	4630      	mov	r0, r6
 800b226:	f7ff ff11 	bl	800b04c <__multiply>
 800b22a:	6020      	str	r0, [r4, #0]
 800b22c:	f8c0 9000 	str.w	r9, [r0]
 800b230:	4604      	mov	r4, r0
 800b232:	e7e4      	b.n	800b1fe <__pow5mult+0x6a>
 800b234:	4638      	mov	r0, r7
 800b236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23a:	bf00      	nop
 800b23c:	0800ceb8 	.word	0x0800ceb8
 800b240:	0800cc81 	.word	0x0800cc81
 800b244:	0800cd68 	.word	0x0800cd68

0800b248 <__lshift>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	460c      	mov	r4, r1
 800b24e:	4607      	mov	r7, r0
 800b250:	4691      	mov	r9, r2
 800b252:	6923      	ldr	r3, [r4, #16]
 800b254:	6849      	ldr	r1, [r1, #4]
 800b256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b25a:	68a3      	ldr	r3, [r4, #8]
 800b25c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b260:	f108 0601 	add.w	r6, r8, #1
 800b264:	42b3      	cmp	r3, r6
 800b266:	db0b      	blt.n	800b280 <__lshift+0x38>
 800b268:	4638      	mov	r0, r7
 800b26a:	f7ff fddf 	bl	800ae2c <_Balloc>
 800b26e:	4605      	mov	r5, r0
 800b270:	b948      	cbnz	r0, 800b286 <__lshift+0x3e>
 800b272:	4602      	mov	r2, r0
 800b274:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b278:	4b27      	ldr	r3, [pc, #156]	; (800b318 <__lshift+0xd0>)
 800b27a:	4828      	ldr	r0, [pc, #160]	; (800b31c <__lshift+0xd4>)
 800b27c:	f000 fc8e 	bl	800bb9c <__assert_func>
 800b280:	3101      	adds	r1, #1
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	e7ee      	b.n	800b264 <__lshift+0x1c>
 800b286:	2300      	movs	r3, #0
 800b288:	f100 0114 	add.w	r1, r0, #20
 800b28c:	f100 0210 	add.w	r2, r0, #16
 800b290:	4618      	mov	r0, r3
 800b292:	4553      	cmp	r3, sl
 800b294:	db33      	blt.n	800b2fe <__lshift+0xb6>
 800b296:	6920      	ldr	r0, [r4, #16]
 800b298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b29c:	f104 0314 	add.w	r3, r4, #20
 800b2a0:	f019 091f 	ands.w	r9, r9, #31
 800b2a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b2ac:	d02b      	beq.n	800b306 <__lshift+0xbe>
 800b2ae:	468a      	mov	sl, r1
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b2bc:	4302      	orrs	r2, r0
 800b2be:	f84a 2b04 	str.w	r2, [sl], #4
 800b2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2c6:	459c      	cmp	ip, r3
 800b2c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2cc:	d8f3      	bhi.n	800b2b6 <__lshift+0x6e>
 800b2ce:	ebac 0304 	sub.w	r3, ip, r4
 800b2d2:	3b15      	subs	r3, #21
 800b2d4:	f023 0303 	bic.w	r3, r3, #3
 800b2d8:	3304      	adds	r3, #4
 800b2da:	f104 0015 	add.w	r0, r4, #21
 800b2de:	4584      	cmp	ip, r0
 800b2e0:	bf38      	it	cc
 800b2e2:	2304      	movcc	r3, #4
 800b2e4:	50ca      	str	r2, [r1, r3]
 800b2e6:	b10a      	cbz	r2, 800b2ec <__lshift+0xa4>
 800b2e8:	f108 0602 	add.w	r6, r8, #2
 800b2ec:	3e01      	subs	r6, #1
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	612e      	str	r6, [r5, #16]
 800b2f4:	f7ff fdda 	bl	800aeac <_Bfree>
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b302:	3301      	adds	r3, #1
 800b304:	e7c5      	b.n	800b292 <__lshift+0x4a>
 800b306:	3904      	subs	r1, #4
 800b308:	f853 2b04 	ldr.w	r2, [r3], #4
 800b30c:	459c      	cmp	ip, r3
 800b30e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b312:	d8f9      	bhi.n	800b308 <__lshift+0xc0>
 800b314:	e7ea      	b.n	800b2ec <__lshift+0xa4>
 800b316:	bf00      	nop
 800b318:	0800ccf7 	.word	0x0800ccf7
 800b31c:	0800cd68 	.word	0x0800cd68

0800b320 <__mcmp>:
 800b320:	4603      	mov	r3, r0
 800b322:	690a      	ldr	r2, [r1, #16]
 800b324:	6900      	ldr	r0, [r0, #16]
 800b326:	b530      	push	{r4, r5, lr}
 800b328:	1a80      	subs	r0, r0, r2
 800b32a:	d10d      	bne.n	800b348 <__mcmp+0x28>
 800b32c:	3314      	adds	r3, #20
 800b32e:	3114      	adds	r1, #20
 800b330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b33c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b340:	4295      	cmp	r5, r2
 800b342:	d002      	beq.n	800b34a <__mcmp+0x2a>
 800b344:	d304      	bcc.n	800b350 <__mcmp+0x30>
 800b346:	2001      	movs	r0, #1
 800b348:	bd30      	pop	{r4, r5, pc}
 800b34a:	42a3      	cmp	r3, r4
 800b34c:	d3f4      	bcc.n	800b338 <__mcmp+0x18>
 800b34e:	e7fb      	b.n	800b348 <__mcmp+0x28>
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e7f8      	b.n	800b348 <__mcmp+0x28>
	...

0800b358 <__mdiff>:
 800b358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b35c:	460c      	mov	r4, r1
 800b35e:	4606      	mov	r6, r0
 800b360:	4611      	mov	r1, r2
 800b362:	4620      	mov	r0, r4
 800b364:	4692      	mov	sl, r2
 800b366:	f7ff ffdb 	bl	800b320 <__mcmp>
 800b36a:	1e05      	subs	r5, r0, #0
 800b36c:	d111      	bne.n	800b392 <__mdiff+0x3a>
 800b36e:	4629      	mov	r1, r5
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fd5b 	bl	800ae2c <_Balloc>
 800b376:	4602      	mov	r2, r0
 800b378:	b928      	cbnz	r0, 800b386 <__mdiff+0x2e>
 800b37a:	f240 2132 	movw	r1, #562	; 0x232
 800b37e:	4b3c      	ldr	r3, [pc, #240]	; (800b470 <__mdiff+0x118>)
 800b380:	483c      	ldr	r0, [pc, #240]	; (800b474 <__mdiff+0x11c>)
 800b382:	f000 fc0b 	bl	800bb9c <__assert_func>
 800b386:	2301      	movs	r3, #1
 800b388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b38c:	4610      	mov	r0, r2
 800b38e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b392:	bfa4      	itt	ge
 800b394:	4653      	movge	r3, sl
 800b396:	46a2      	movge	sl, r4
 800b398:	4630      	mov	r0, r6
 800b39a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b39e:	bfa6      	itte	ge
 800b3a0:	461c      	movge	r4, r3
 800b3a2:	2500      	movge	r5, #0
 800b3a4:	2501      	movlt	r5, #1
 800b3a6:	f7ff fd41 	bl	800ae2c <_Balloc>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	b918      	cbnz	r0, 800b3b6 <__mdiff+0x5e>
 800b3ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3b2:	4b2f      	ldr	r3, [pc, #188]	; (800b470 <__mdiff+0x118>)
 800b3b4:	e7e4      	b.n	800b380 <__mdiff+0x28>
 800b3b6:	f100 0814 	add.w	r8, r0, #20
 800b3ba:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b3be:	60c5      	str	r5, [r0, #12]
 800b3c0:	f04f 0c00 	mov.w	ip, #0
 800b3c4:	f10a 0514 	add.w	r5, sl, #20
 800b3c8:	f10a 0010 	add.w	r0, sl, #16
 800b3cc:	46c2      	mov	sl, r8
 800b3ce:	6926      	ldr	r6, [r4, #16]
 800b3d0:	f104 0914 	add.w	r9, r4, #20
 800b3d4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b3d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3dc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b3e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3e4:	fa1f f18b 	uxth.w	r1, fp
 800b3e8:	4461      	add	r1, ip
 800b3ea:	fa1f fc83 	uxth.w	ip, r3
 800b3ee:	0c1b      	lsrs	r3, r3, #16
 800b3f0:	eba1 010c 	sub.w	r1, r1, ip
 800b3f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b3fc:	b289      	uxth	r1, r1
 800b3fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b402:	454e      	cmp	r6, r9
 800b404:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b408:	f84a 3b04 	str.w	r3, [sl], #4
 800b40c:	d8e6      	bhi.n	800b3dc <__mdiff+0x84>
 800b40e:	1b33      	subs	r3, r6, r4
 800b410:	3b15      	subs	r3, #21
 800b412:	f023 0303 	bic.w	r3, r3, #3
 800b416:	3415      	adds	r4, #21
 800b418:	3304      	adds	r3, #4
 800b41a:	42a6      	cmp	r6, r4
 800b41c:	bf38      	it	cc
 800b41e:	2304      	movcc	r3, #4
 800b420:	441d      	add	r5, r3
 800b422:	4443      	add	r3, r8
 800b424:	461e      	mov	r6, r3
 800b426:	462c      	mov	r4, r5
 800b428:	4574      	cmp	r4, lr
 800b42a:	d30e      	bcc.n	800b44a <__mdiff+0xf2>
 800b42c:	f10e 0103 	add.w	r1, lr, #3
 800b430:	1b49      	subs	r1, r1, r5
 800b432:	f021 0103 	bic.w	r1, r1, #3
 800b436:	3d03      	subs	r5, #3
 800b438:	45ae      	cmp	lr, r5
 800b43a:	bf38      	it	cc
 800b43c:	2100      	movcc	r1, #0
 800b43e:	4419      	add	r1, r3
 800b440:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b444:	b18b      	cbz	r3, 800b46a <__mdiff+0x112>
 800b446:	6117      	str	r7, [r2, #16]
 800b448:	e7a0      	b.n	800b38c <__mdiff+0x34>
 800b44a:	f854 8b04 	ldr.w	r8, [r4], #4
 800b44e:	fa1f f188 	uxth.w	r1, r8
 800b452:	4461      	add	r1, ip
 800b454:	1408      	asrs	r0, r1, #16
 800b456:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b45a:	b289      	uxth	r1, r1
 800b45c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b460:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b464:	f846 1b04 	str.w	r1, [r6], #4
 800b468:	e7de      	b.n	800b428 <__mdiff+0xd0>
 800b46a:	3f01      	subs	r7, #1
 800b46c:	e7e8      	b.n	800b440 <__mdiff+0xe8>
 800b46e:	bf00      	nop
 800b470:	0800ccf7 	.word	0x0800ccf7
 800b474:	0800cd68 	.word	0x0800cd68

0800b478 <__d2b>:
 800b478:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b47c:	2101      	movs	r1, #1
 800b47e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b482:	4690      	mov	r8, r2
 800b484:	461d      	mov	r5, r3
 800b486:	f7ff fcd1 	bl	800ae2c <_Balloc>
 800b48a:	4604      	mov	r4, r0
 800b48c:	b930      	cbnz	r0, 800b49c <__d2b+0x24>
 800b48e:	4602      	mov	r2, r0
 800b490:	f240 310a 	movw	r1, #778	; 0x30a
 800b494:	4b24      	ldr	r3, [pc, #144]	; (800b528 <__d2b+0xb0>)
 800b496:	4825      	ldr	r0, [pc, #148]	; (800b52c <__d2b+0xb4>)
 800b498:	f000 fb80 	bl	800bb9c <__assert_func>
 800b49c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b4a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b4a4:	bb2d      	cbnz	r5, 800b4f2 <__d2b+0x7a>
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	f1b8 0300 	subs.w	r3, r8, #0
 800b4ac:	d026      	beq.n	800b4fc <__d2b+0x84>
 800b4ae:	4668      	mov	r0, sp
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	f7ff fd87 	bl	800afc4 <__lo0bits>
 800b4b6:	9900      	ldr	r1, [sp, #0]
 800b4b8:	b1f0      	cbz	r0, 800b4f8 <__d2b+0x80>
 800b4ba:	9a01      	ldr	r2, [sp, #4]
 800b4bc:	f1c0 0320 	rsb	r3, r0, #32
 800b4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	40c2      	lsrs	r2, r0
 800b4c8:	6163      	str	r3, [r4, #20]
 800b4ca:	9201      	str	r2, [sp, #4]
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bf14      	ite	ne
 800b4d2:	2102      	movne	r1, #2
 800b4d4:	2101      	moveq	r1, #1
 800b4d6:	61a3      	str	r3, [r4, #24]
 800b4d8:	6121      	str	r1, [r4, #16]
 800b4da:	b1c5      	cbz	r5, 800b50e <__d2b+0x96>
 800b4dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b4e0:	4405      	add	r5, r0
 800b4e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b4e6:	603d      	str	r5, [r7, #0]
 800b4e8:	6030      	str	r0, [r6, #0]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	b002      	add	sp, #8
 800b4ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b4f6:	e7d6      	b.n	800b4a6 <__d2b+0x2e>
 800b4f8:	6161      	str	r1, [r4, #20]
 800b4fa:	e7e7      	b.n	800b4cc <__d2b+0x54>
 800b4fc:	a801      	add	r0, sp, #4
 800b4fe:	f7ff fd61 	bl	800afc4 <__lo0bits>
 800b502:	2101      	movs	r1, #1
 800b504:	9b01      	ldr	r3, [sp, #4]
 800b506:	6121      	str	r1, [r4, #16]
 800b508:	6163      	str	r3, [r4, #20]
 800b50a:	3020      	adds	r0, #32
 800b50c:	e7e5      	b.n	800b4da <__d2b+0x62>
 800b50e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b512:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b516:	6038      	str	r0, [r7, #0]
 800b518:	6918      	ldr	r0, [r3, #16]
 800b51a:	f7ff fd33 	bl	800af84 <__hi0bits>
 800b51e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b522:	6031      	str	r1, [r6, #0]
 800b524:	e7e1      	b.n	800b4ea <__d2b+0x72>
 800b526:	bf00      	nop
 800b528:	0800ccf7 	.word	0x0800ccf7
 800b52c:	0800cd68 	.word	0x0800cd68

0800b530 <_calloc_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	fb02 f501 	mul.w	r5, r2, r1
 800b536:	4629      	mov	r1, r5
 800b538:	f000 f854 	bl	800b5e4 <_malloc_r>
 800b53c:	4604      	mov	r4, r0
 800b53e:	b118      	cbz	r0, 800b548 <_calloc_r+0x18>
 800b540:	462a      	mov	r2, r5
 800b542:	2100      	movs	r1, #0
 800b544:	f7fe f85a 	bl	80095fc <memset>
 800b548:	4620      	mov	r0, r4
 800b54a:	bd38      	pop	{r3, r4, r5, pc}

0800b54c <_free_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4605      	mov	r5, r0
 800b550:	2900      	cmp	r1, #0
 800b552:	d043      	beq.n	800b5dc <_free_r+0x90>
 800b554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b558:	1f0c      	subs	r4, r1, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	bfb8      	it	lt
 800b55e:	18e4      	addlt	r4, r4, r3
 800b560:	f000 fcc0 	bl	800bee4 <__malloc_lock>
 800b564:	4a1e      	ldr	r2, [pc, #120]	; (800b5e0 <_free_r+0x94>)
 800b566:	6813      	ldr	r3, [r2, #0]
 800b568:	4610      	mov	r0, r2
 800b56a:	b933      	cbnz	r3, 800b57a <_free_r+0x2e>
 800b56c:	6063      	str	r3, [r4, #4]
 800b56e:	6014      	str	r4, [r2, #0]
 800b570:	4628      	mov	r0, r5
 800b572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b576:	f000 bcbb 	b.w	800bef0 <__malloc_unlock>
 800b57a:	42a3      	cmp	r3, r4
 800b57c:	d90a      	bls.n	800b594 <_free_r+0x48>
 800b57e:	6821      	ldr	r1, [r4, #0]
 800b580:	1862      	adds	r2, r4, r1
 800b582:	4293      	cmp	r3, r2
 800b584:	bf01      	itttt	eq
 800b586:	681a      	ldreq	r2, [r3, #0]
 800b588:	685b      	ldreq	r3, [r3, #4]
 800b58a:	1852      	addeq	r2, r2, r1
 800b58c:	6022      	streq	r2, [r4, #0]
 800b58e:	6063      	str	r3, [r4, #4]
 800b590:	6004      	str	r4, [r0, #0]
 800b592:	e7ed      	b.n	800b570 <_free_r+0x24>
 800b594:	461a      	mov	r2, r3
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	b10b      	cbz	r3, 800b59e <_free_r+0x52>
 800b59a:	42a3      	cmp	r3, r4
 800b59c:	d9fa      	bls.n	800b594 <_free_r+0x48>
 800b59e:	6811      	ldr	r1, [r2, #0]
 800b5a0:	1850      	adds	r0, r2, r1
 800b5a2:	42a0      	cmp	r0, r4
 800b5a4:	d10b      	bne.n	800b5be <_free_r+0x72>
 800b5a6:	6820      	ldr	r0, [r4, #0]
 800b5a8:	4401      	add	r1, r0
 800b5aa:	1850      	adds	r0, r2, r1
 800b5ac:	4283      	cmp	r3, r0
 800b5ae:	6011      	str	r1, [r2, #0]
 800b5b0:	d1de      	bne.n	800b570 <_free_r+0x24>
 800b5b2:	6818      	ldr	r0, [r3, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	4401      	add	r1, r0
 800b5b8:	6011      	str	r1, [r2, #0]
 800b5ba:	6053      	str	r3, [r2, #4]
 800b5bc:	e7d8      	b.n	800b570 <_free_r+0x24>
 800b5be:	d902      	bls.n	800b5c6 <_free_r+0x7a>
 800b5c0:	230c      	movs	r3, #12
 800b5c2:	602b      	str	r3, [r5, #0]
 800b5c4:	e7d4      	b.n	800b570 <_free_r+0x24>
 800b5c6:	6820      	ldr	r0, [r4, #0]
 800b5c8:	1821      	adds	r1, r4, r0
 800b5ca:	428b      	cmp	r3, r1
 800b5cc:	bf01      	itttt	eq
 800b5ce:	6819      	ldreq	r1, [r3, #0]
 800b5d0:	685b      	ldreq	r3, [r3, #4]
 800b5d2:	1809      	addeq	r1, r1, r0
 800b5d4:	6021      	streq	r1, [r4, #0]
 800b5d6:	6063      	str	r3, [r4, #4]
 800b5d8:	6054      	str	r4, [r2, #4]
 800b5da:	e7c9      	b.n	800b570 <_free_r+0x24>
 800b5dc:	bd38      	pop	{r3, r4, r5, pc}
 800b5de:	bf00      	nop
 800b5e0:	20001e98 	.word	0x20001e98

0800b5e4 <_malloc_r>:
 800b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e6:	1ccd      	adds	r5, r1, #3
 800b5e8:	f025 0503 	bic.w	r5, r5, #3
 800b5ec:	3508      	adds	r5, #8
 800b5ee:	2d0c      	cmp	r5, #12
 800b5f0:	bf38      	it	cc
 800b5f2:	250c      	movcc	r5, #12
 800b5f4:	2d00      	cmp	r5, #0
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	db01      	blt.n	800b5fe <_malloc_r+0x1a>
 800b5fa:	42a9      	cmp	r1, r5
 800b5fc:	d903      	bls.n	800b606 <_malloc_r+0x22>
 800b5fe:	230c      	movs	r3, #12
 800b600:	6033      	str	r3, [r6, #0]
 800b602:	2000      	movs	r0, #0
 800b604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b606:	f000 fc6d 	bl	800bee4 <__malloc_lock>
 800b60a:	4921      	ldr	r1, [pc, #132]	; (800b690 <_malloc_r+0xac>)
 800b60c:	680a      	ldr	r2, [r1, #0]
 800b60e:	4614      	mov	r4, r2
 800b610:	b99c      	cbnz	r4, 800b63a <_malloc_r+0x56>
 800b612:	4f20      	ldr	r7, [pc, #128]	; (800b694 <_malloc_r+0xb0>)
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	b923      	cbnz	r3, 800b622 <_malloc_r+0x3e>
 800b618:	4621      	mov	r1, r4
 800b61a:	4630      	mov	r0, r6
 800b61c:	f000 f998 	bl	800b950 <_sbrk_r>
 800b620:	6038      	str	r0, [r7, #0]
 800b622:	4629      	mov	r1, r5
 800b624:	4630      	mov	r0, r6
 800b626:	f000 f993 	bl	800b950 <_sbrk_r>
 800b62a:	1c43      	adds	r3, r0, #1
 800b62c:	d123      	bne.n	800b676 <_malloc_r+0x92>
 800b62e:	230c      	movs	r3, #12
 800b630:	4630      	mov	r0, r6
 800b632:	6033      	str	r3, [r6, #0]
 800b634:	f000 fc5c 	bl	800bef0 <__malloc_unlock>
 800b638:	e7e3      	b.n	800b602 <_malloc_r+0x1e>
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	1b5b      	subs	r3, r3, r5
 800b63e:	d417      	bmi.n	800b670 <_malloc_r+0x8c>
 800b640:	2b0b      	cmp	r3, #11
 800b642:	d903      	bls.n	800b64c <_malloc_r+0x68>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	441c      	add	r4, r3
 800b648:	6025      	str	r5, [r4, #0]
 800b64a:	e004      	b.n	800b656 <_malloc_r+0x72>
 800b64c:	6863      	ldr	r3, [r4, #4]
 800b64e:	42a2      	cmp	r2, r4
 800b650:	bf0c      	ite	eq
 800b652:	600b      	streq	r3, [r1, #0]
 800b654:	6053      	strne	r3, [r2, #4]
 800b656:	4630      	mov	r0, r6
 800b658:	f000 fc4a 	bl	800bef0 <__malloc_unlock>
 800b65c:	f104 000b 	add.w	r0, r4, #11
 800b660:	1d23      	adds	r3, r4, #4
 800b662:	f020 0007 	bic.w	r0, r0, #7
 800b666:	1ac2      	subs	r2, r0, r3
 800b668:	d0cc      	beq.n	800b604 <_malloc_r+0x20>
 800b66a:	1a1b      	subs	r3, r3, r0
 800b66c:	50a3      	str	r3, [r4, r2]
 800b66e:	e7c9      	b.n	800b604 <_malloc_r+0x20>
 800b670:	4622      	mov	r2, r4
 800b672:	6864      	ldr	r4, [r4, #4]
 800b674:	e7cc      	b.n	800b610 <_malloc_r+0x2c>
 800b676:	1cc4      	adds	r4, r0, #3
 800b678:	f024 0403 	bic.w	r4, r4, #3
 800b67c:	42a0      	cmp	r0, r4
 800b67e:	d0e3      	beq.n	800b648 <_malloc_r+0x64>
 800b680:	1a21      	subs	r1, r4, r0
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f964 	bl	800b950 <_sbrk_r>
 800b688:	3001      	adds	r0, #1
 800b68a:	d1dd      	bne.n	800b648 <_malloc_r+0x64>
 800b68c:	e7cf      	b.n	800b62e <_malloc_r+0x4a>
 800b68e:	bf00      	nop
 800b690:	20001e98 	.word	0x20001e98
 800b694:	20001e9c 	.word	0x20001e9c

0800b698 <__ssputs_r>:
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	688e      	ldr	r6, [r1, #8]
 800b69e:	4682      	mov	sl, r0
 800b6a0:	429e      	cmp	r6, r3
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	4690      	mov	r8, r2
 800b6a6:	461f      	mov	r7, r3
 800b6a8:	d838      	bhi.n	800b71c <__ssputs_r+0x84>
 800b6aa:	898a      	ldrh	r2, [r1, #12]
 800b6ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6b0:	d032      	beq.n	800b718 <__ssputs_r+0x80>
 800b6b2:	6825      	ldr	r5, [r4, #0]
 800b6b4:	6909      	ldr	r1, [r1, #16]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	eba5 0901 	sub.w	r9, r5, r1
 800b6bc:	6965      	ldr	r5, [r4, #20]
 800b6be:	444b      	add	r3, r9
 800b6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6c8:	106d      	asrs	r5, r5, #1
 800b6ca:	429d      	cmp	r5, r3
 800b6cc:	bf38      	it	cc
 800b6ce:	461d      	movcc	r5, r3
 800b6d0:	0553      	lsls	r3, r2, #21
 800b6d2:	d531      	bpl.n	800b738 <__ssputs_r+0xa0>
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f7ff ff85 	bl	800b5e4 <_malloc_r>
 800b6da:	4606      	mov	r6, r0
 800b6dc:	b950      	cbnz	r0, 800b6f4 <__ssputs_r+0x5c>
 800b6de:	230c      	movs	r3, #12
 800b6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e4:	f8ca 3000 	str.w	r3, [sl]
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ee:	81a3      	strh	r3, [r4, #12]
 800b6f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f4:	464a      	mov	r2, r9
 800b6f6:	6921      	ldr	r1, [r4, #16]
 800b6f8:	f7fd ff72 	bl	80095e0 <memcpy>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b706:	81a3      	strh	r3, [r4, #12]
 800b708:	6126      	str	r6, [r4, #16]
 800b70a:	444e      	add	r6, r9
 800b70c:	6026      	str	r6, [r4, #0]
 800b70e:	463e      	mov	r6, r7
 800b710:	6165      	str	r5, [r4, #20]
 800b712:	eba5 0509 	sub.w	r5, r5, r9
 800b716:	60a5      	str	r5, [r4, #8]
 800b718:	42be      	cmp	r6, r7
 800b71a:	d900      	bls.n	800b71e <__ssputs_r+0x86>
 800b71c:	463e      	mov	r6, r7
 800b71e:	4632      	mov	r2, r6
 800b720:	4641      	mov	r1, r8
 800b722:	6820      	ldr	r0, [r4, #0]
 800b724:	f000 fbc4 	bl	800beb0 <memmove>
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	6822      	ldr	r2, [r4, #0]
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	4432      	add	r2, r6
 800b730:	2000      	movs	r0, #0
 800b732:	60a3      	str	r3, [r4, #8]
 800b734:	6022      	str	r2, [r4, #0]
 800b736:	e7db      	b.n	800b6f0 <__ssputs_r+0x58>
 800b738:	462a      	mov	r2, r5
 800b73a:	f000 fbdf 	bl	800befc <_realloc_r>
 800b73e:	4606      	mov	r6, r0
 800b740:	2800      	cmp	r0, #0
 800b742:	d1e1      	bne.n	800b708 <__ssputs_r+0x70>
 800b744:	4650      	mov	r0, sl
 800b746:	6921      	ldr	r1, [r4, #16]
 800b748:	f7ff ff00 	bl	800b54c <_free_r>
 800b74c:	e7c7      	b.n	800b6de <__ssputs_r+0x46>
	...

0800b750 <_svfiprintf_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	4698      	mov	r8, r3
 800b756:	898b      	ldrh	r3, [r1, #12]
 800b758:	4607      	mov	r7, r0
 800b75a:	061b      	lsls	r3, r3, #24
 800b75c:	460d      	mov	r5, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	b09d      	sub	sp, #116	; 0x74
 800b762:	d50e      	bpl.n	800b782 <_svfiprintf_r+0x32>
 800b764:	690b      	ldr	r3, [r1, #16]
 800b766:	b963      	cbnz	r3, 800b782 <_svfiprintf_r+0x32>
 800b768:	2140      	movs	r1, #64	; 0x40
 800b76a:	f7ff ff3b 	bl	800b5e4 <_malloc_r>
 800b76e:	6028      	str	r0, [r5, #0]
 800b770:	6128      	str	r0, [r5, #16]
 800b772:	b920      	cbnz	r0, 800b77e <_svfiprintf_r+0x2e>
 800b774:	230c      	movs	r3, #12
 800b776:	603b      	str	r3, [r7, #0]
 800b778:	f04f 30ff 	mov.w	r0, #4294967295
 800b77c:	e0d1      	b.n	800b922 <_svfiprintf_r+0x1d2>
 800b77e:	2340      	movs	r3, #64	; 0x40
 800b780:	616b      	str	r3, [r5, #20]
 800b782:	2300      	movs	r3, #0
 800b784:	9309      	str	r3, [sp, #36]	; 0x24
 800b786:	2320      	movs	r3, #32
 800b788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b78c:	2330      	movs	r3, #48	; 0x30
 800b78e:	f04f 0901 	mov.w	r9, #1
 800b792:	f8cd 800c 	str.w	r8, [sp, #12]
 800b796:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b93c <_svfiprintf_r+0x1ec>
 800b79a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b79e:	4623      	mov	r3, r4
 800b7a0:	469a      	mov	sl, r3
 800b7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7a6:	b10a      	cbz	r2, 800b7ac <_svfiprintf_r+0x5c>
 800b7a8:	2a25      	cmp	r2, #37	; 0x25
 800b7aa:	d1f9      	bne.n	800b7a0 <_svfiprintf_r+0x50>
 800b7ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b7b0:	d00b      	beq.n	800b7ca <_svfiprintf_r+0x7a>
 800b7b2:	465b      	mov	r3, fp
 800b7b4:	4622      	mov	r2, r4
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	f7ff ff6d 	bl	800b698 <__ssputs_r>
 800b7be:	3001      	adds	r0, #1
 800b7c0:	f000 80aa 	beq.w	800b918 <_svfiprintf_r+0x1c8>
 800b7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7c6:	445a      	add	r2, fp
 800b7c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 80a2 	beq.w	800b918 <_svfiprintf_r+0x1c8>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7de:	f10a 0a01 	add.w	sl, sl, #1
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	9307      	str	r3, [sp, #28]
 800b7e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b7ec:	4654      	mov	r4, sl
 800b7ee:	2205      	movs	r2, #5
 800b7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7f4:	4851      	ldr	r0, [pc, #324]	; (800b93c <_svfiprintf_r+0x1ec>)
 800b7f6:	f7ff fb0b 	bl	800ae10 <memchr>
 800b7fa:	9a04      	ldr	r2, [sp, #16]
 800b7fc:	b9d8      	cbnz	r0, 800b836 <_svfiprintf_r+0xe6>
 800b7fe:	06d0      	lsls	r0, r2, #27
 800b800:	bf44      	itt	mi
 800b802:	2320      	movmi	r3, #32
 800b804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b808:	0711      	lsls	r1, r2, #28
 800b80a:	bf44      	itt	mi
 800b80c:	232b      	movmi	r3, #43	; 0x2b
 800b80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b812:	f89a 3000 	ldrb.w	r3, [sl]
 800b816:	2b2a      	cmp	r3, #42	; 0x2a
 800b818:	d015      	beq.n	800b846 <_svfiprintf_r+0xf6>
 800b81a:	4654      	mov	r4, sl
 800b81c:	2000      	movs	r0, #0
 800b81e:	f04f 0c0a 	mov.w	ip, #10
 800b822:	9a07      	ldr	r2, [sp, #28]
 800b824:	4621      	mov	r1, r4
 800b826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b82a:	3b30      	subs	r3, #48	; 0x30
 800b82c:	2b09      	cmp	r3, #9
 800b82e:	d94e      	bls.n	800b8ce <_svfiprintf_r+0x17e>
 800b830:	b1b0      	cbz	r0, 800b860 <_svfiprintf_r+0x110>
 800b832:	9207      	str	r2, [sp, #28]
 800b834:	e014      	b.n	800b860 <_svfiprintf_r+0x110>
 800b836:	eba0 0308 	sub.w	r3, r0, r8
 800b83a:	fa09 f303 	lsl.w	r3, r9, r3
 800b83e:	4313      	orrs	r3, r2
 800b840:	46a2      	mov	sl, r4
 800b842:	9304      	str	r3, [sp, #16]
 800b844:	e7d2      	b.n	800b7ec <_svfiprintf_r+0x9c>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	1d19      	adds	r1, r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	bfbb      	ittet	lt
 800b852:	425b      	neglt	r3, r3
 800b854:	f042 0202 	orrlt.w	r2, r2, #2
 800b858:	9307      	strge	r3, [sp, #28]
 800b85a:	9307      	strlt	r3, [sp, #28]
 800b85c:	bfb8      	it	lt
 800b85e:	9204      	strlt	r2, [sp, #16]
 800b860:	7823      	ldrb	r3, [r4, #0]
 800b862:	2b2e      	cmp	r3, #46	; 0x2e
 800b864:	d10c      	bne.n	800b880 <_svfiprintf_r+0x130>
 800b866:	7863      	ldrb	r3, [r4, #1]
 800b868:	2b2a      	cmp	r3, #42	; 0x2a
 800b86a:	d135      	bne.n	800b8d8 <_svfiprintf_r+0x188>
 800b86c:	9b03      	ldr	r3, [sp, #12]
 800b86e:	3402      	adds	r4, #2
 800b870:	1d1a      	adds	r2, r3, #4
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	9203      	str	r2, [sp, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	bfb8      	it	lt
 800b87a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b87e:	9305      	str	r3, [sp, #20]
 800b880:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b94c <_svfiprintf_r+0x1fc>
 800b884:	2203      	movs	r2, #3
 800b886:	4650      	mov	r0, sl
 800b888:	7821      	ldrb	r1, [r4, #0]
 800b88a:	f7ff fac1 	bl	800ae10 <memchr>
 800b88e:	b140      	cbz	r0, 800b8a2 <_svfiprintf_r+0x152>
 800b890:	2340      	movs	r3, #64	; 0x40
 800b892:	eba0 000a 	sub.w	r0, r0, sl
 800b896:	fa03 f000 	lsl.w	r0, r3, r0
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	3401      	adds	r4, #1
 800b89e:	4303      	orrs	r3, r0
 800b8a0:	9304      	str	r3, [sp, #16]
 800b8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a6:	2206      	movs	r2, #6
 800b8a8:	4825      	ldr	r0, [pc, #148]	; (800b940 <_svfiprintf_r+0x1f0>)
 800b8aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8ae:	f7ff faaf 	bl	800ae10 <memchr>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	d038      	beq.n	800b928 <_svfiprintf_r+0x1d8>
 800b8b6:	4b23      	ldr	r3, [pc, #140]	; (800b944 <_svfiprintf_r+0x1f4>)
 800b8b8:	bb1b      	cbnz	r3, 800b902 <_svfiprintf_r+0x1b2>
 800b8ba:	9b03      	ldr	r3, [sp, #12]
 800b8bc:	3307      	adds	r3, #7
 800b8be:	f023 0307 	bic.w	r3, r3, #7
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	9303      	str	r3, [sp, #12]
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	4433      	add	r3, r6
 800b8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b8cc:	e767      	b.n	800b79e <_svfiprintf_r+0x4e>
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	2001      	movs	r0, #1
 800b8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8d6:	e7a5      	b.n	800b824 <_svfiprintf_r+0xd4>
 800b8d8:	2300      	movs	r3, #0
 800b8da:	f04f 0c0a 	mov.w	ip, #10
 800b8de:	4619      	mov	r1, r3
 800b8e0:	3401      	adds	r4, #1
 800b8e2:	9305      	str	r3, [sp, #20]
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ea:	3a30      	subs	r2, #48	; 0x30
 800b8ec:	2a09      	cmp	r2, #9
 800b8ee:	d903      	bls.n	800b8f8 <_svfiprintf_r+0x1a8>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0c5      	beq.n	800b880 <_svfiprintf_r+0x130>
 800b8f4:	9105      	str	r1, [sp, #20]
 800b8f6:	e7c3      	b.n	800b880 <_svfiprintf_r+0x130>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b900:	e7f0      	b.n	800b8e4 <_svfiprintf_r+0x194>
 800b902:	ab03      	add	r3, sp, #12
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	462a      	mov	r2, r5
 800b908:	4638      	mov	r0, r7
 800b90a:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <_svfiprintf_r+0x1f8>)
 800b90c:	a904      	add	r1, sp, #16
 800b90e:	f7fd ff1b 	bl	8009748 <_printf_float>
 800b912:	1c42      	adds	r2, r0, #1
 800b914:	4606      	mov	r6, r0
 800b916:	d1d6      	bne.n	800b8c6 <_svfiprintf_r+0x176>
 800b918:	89ab      	ldrh	r3, [r5, #12]
 800b91a:	065b      	lsls	r3, r3, #25
 800b91c:	f53f af2c 	bmi.w	800b778 <_svfiprintf_r+0x28>
 800b920:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b922:	b01d      	add	sp, #116	; 0x74
 800b924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b928:	ab03      	add	r3, sp, #12
 800b92a:	9300      	str	r3, [sp, #0]
 800b92c:	462a      	mov	r2, r5
 800b92e:	4638      	mov	r0, r7
 800b930:	4b05      	ldr	r3, [pc, #20]	; (800b948 <_svfiprintf_r+0x1f8>)
 800b932:	a904      	add	r1, sp, #16
 800b934:	f7fe f9a4 	bl	8009c80 <_printf_i>
 800b938:	e7eb      	b.n	800b912 <_svfiprintf_r+0x1c2>
 800b93a:	bf00      	nop
 800b93c:	0800cec4 	.word	0x0800cec4
 800b940:	0800cece 	.word	0x0800cece
 800b944:	08009749 	.word	0x08009749
 800b948:	0800b699 	.word	0x0800b699
 800b94c:	0800ceca 	.word	0x0800ceca

0800b950 <_sbrk_r>:
 800b950:	b538      	push	{r3, r4, r5, lr}
 800b952:	2300      	movs	r3, #0
 800b954:	4d05      	ldr	r5, [pc, #20]	; (800b96c <_sbrk_r+0x1c>)
 800b956:	4604      	mov	r4, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	602b      	str	r3, [r5, #0]
 800b95c:	f7f6 fa78 	bl	8001e50 <_sbrk>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	d102      	bne.n	800b96a <_sbrk_r+0x1a>
 800b964:	682b      	ldr	r3, [r5, #0]
 800b966:	b103      	cbz	r3, 800b96a <_sbrk_r+0x1a>
 800b968:	6023      	str	r3, [r4, #0]
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	200033fc 	.word	0x200033fc

0800b970 <__sread>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b978:	f000 fc3e 	bl	800c1f8 <_read_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	bfab      	itete	ge
 800b980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b982:	89a3      	ldrhlt	r3, [r4, #12]
 800b984:	181b      	addge	r3, r3, r0
 800b986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98a:	bfac      	ite	ge
 800b98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98e:	81a3      	strhlt	r3, [r4, #12]
 800b990:	bd10      	pop	{r4, pc}

0800b992 <__swrite>:
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	461f      	mov	r7, r3
 800b998:	898b      	ldrh	r3, [r1, #12]
 800b99a:	4605      	mov	r5, r0
 800b99c:	05db      	lsls	r3, r3, #23
 800b99e:	460c      	mov	r4, r1
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	d505      	bpl.n	800b9b0 <__swrite+0x1e>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	f000 f9f8 	bl	800bda0 <_lseek_r>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	4628      	mov	r0, r5
 800b9bc:	463b      	mov	r3, r7
 800b9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	f000 b869 	b.w	800ba9c <_write_r>

0800b9ca <__sseek>:
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f000 f9e5 	bl	800bda0 <_lseek_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	bf15      	itete	ne
 800b9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e6:	81a3      	strheq	r3, [r4, #12]
 800b9e8:	bf18      	it	ne
 800b9ea:	81a3      	strhne	r3, [r4, #12]
 800b9ec:	bd10      	pop	{r4, pc}

0800b9ee <__sclose>:
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 b8f1 	b.w	800bbd8 <_close_r>
	...

0800b9f8 <__swbuf_r>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	460e      	mov	r6, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	4605      	mov	r5, r0
 800ba00:	b118      	cbz	r0, 800ba0a <__swbuf_r+0x12>
 800ba02:	6983      	ldr	r3, [r0, #24]
 800ba04:	b90b      	cbnz	r3, 800ba0a <__swbuf_r+0x12>
 800ba06:	f7ff f955 	bl	800acb4 <__sinit>
 800ba0a:	4b21      	ldr	r3, [pc, #132]	; (800ba90 <__swbuf_r+0x98>)
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d12b      	bne.n	800ba68 <__swbuf_r+0x70>
 800ba10:	686c      	ldr	r4, [r5, #4]
 800ba12:	69a3      	ldr	r3, [r4, #24]
 800ba14:	60a3      	str	r3, [r4, #8]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	071a      	lsls	r2, r3, #28
 800ba1a:	d52f      	bpl.n	800ba7c <__swbuf_r+0x84>
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	b36b      	cbz	r3, 800ba7c <__swbuf_r+0x84>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	6820      	ldr	r0, [r4, #0]
 800ba24:	b2f6      	uxtb	r6, r6
 800ba26:	1ac0      	subs	r0, r0, r3
 800ba28:	6963      	ldr	r3, [r4, #20]
 800ba2a:	4637      	mov	r7, r6
 800ba2c:	4283      	cmp	r3, r0
 800ba2e:	dc04      	bgt.n	800ba3a <__swbuf_r+0x42>
 800ba30:	4621      	mov	r1, r4
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 f966 	bl	800bd04 <_fflush_r>
 800ba38:	bb30      	cbnz	r0, 800ba88 <__swbuf_r+0x90>
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	60a3      	str	r3, [r4, #8]
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	6022      	str	r2, [r4, #0]
 800ba48:	701e      	strb	r6, [r3, #0]
 800ba4a:	6963      	ldr	r3, [r4, #20]
 800ba4c:	4283      	cmp	r3, r0
 800ba4e:	d004      	beq.n	800ba5a <__swbuf_r+0x62>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	07db      	lsls	r3, r3, #31
 800ba54:	d506      	bpl.n	800ba64 <__swbuf_r+0x6c>
 800ba56:	2e0a      	cmp	r6, #10
 800ba58:	d104      	bne.n	800ba64 <__swbuf_r+0x6c>
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f951 	bl	800bd04 <_fflush_r>
 800ba62:	b988      	cbnz	r0, 800ba88 <__swbuf_r+0x90>
 800ba64:	4638      	mov	r0, r7
 800ba66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <__swbuf_r+0x9c>)
 800ba6a:	429c      	cmp	r4, r3
 800ba6c:	d101      	bne.n	800ba72 <__swbuf_r+0x7a>
 800ba6e:	68ac      	ldr	r4, [r5, #8]
 800ba70:	e7cf      	b.n	800ba12 <__swbuf_r+0x1a>
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <__swbuf_r+0xa0>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	bf08      	it	eq
 800ba78:	68ec      	ldreq	r4, [r5, #12]
 800ba7a:	e7ca      	b.n	800ba12 <__swbuf_r+0x1a>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f81e 	bl	800bac0 <__swsetup_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d0cb      	beq.n	800ba20 <__swbuf_r+0x28>
 800ba88:	f04f 37ff 	mov.w	r7, #4294967295
 800ba8c:	e7ea      	b.n	800ba64 <__swbuf_r+0x6c>
 800ba8e:	bf00      	nop
 800ba90:	0800cd28 	.word	0x0800cd28
 800ba94:	0800cd48 	.word	0x0800cd48
 800ba98:	0800cd08 	.word	0x0800cd08

0800ba9c <_write_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	2200      	movs	r2, #0
 800baa6:	4d05      	ldr	r5, [pc, #20]	; (800babc <_write_r+0x20>)
 800baa8:	602a      	str	r2, [r5, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	f7f6 f9b7 	bl	8001e1e <_write>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_write_r+0x1e>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_write_r+0x1e>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	200033fc 	.word	0x200033fc

0800bac0 <__swsetup_r>:
 800bac0:	4b32      	ldr	r3, [pc, #200]	; (800bb8c <__swsetup_r+0xcc>)
 800bac2:	b570      	push	{r4, r5, r6, lr}
 800bac4:	681d      	ldr	r5, [r3, #0]
 800bac6:	4606      	mov	r6, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	b125      	cbz	r5, 800bad6 <__swsetup_r+0x16>
 800bacc:	69ab      	ldr	r3, [r5, #24]
 800bace:	b913      	cbnz	r3, 800bad6 <__swsetup_r+0x16>
 800bad0:	4628      	mov	r0, r5
 800bad2:	f7ff f8ef 	bl	800acb4 <__sinit>
 800bad6:	4b2e      	ldr	r3, [pc, #184]	; (800bb90 <__swsetup_r+0xd0>)
 800bad8:	429c      	cmp	r4, r3
 800bada:	d10f      	bne.n	800bafc <__swsetup_r+0x3c>
 800badc:	686c      	ldr	r4, [r5, #4]
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bae4:	0719      	lsls	r1, r3, #28
 800bae6:	d42c      	bmi.n	800bb42 <__swsetup_r+0x82>
 800bae8:	06dd      	lsls	r5, r3, #27
 800baea:	d411      	bmi.n	800bb10 <__swsetup_r+0x50>
 800baec:	2309      	movs	r3, #9
 800baee:	6033      	str	r3, [r6, #0]
 800baf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	81a3      	strh	r3, [r4, #12]
 800bafa:	e03e      	b.n	800bb7a <__swsetup_r+0xba>
 800bafc:	4b25      	ldr	r3, [pc, #148]	; (800bb94 <__swsetup_r+0xd4>)
 800bafe:	429c      	cmp	r4, r3
 800bb00:	d101      	bne.n	800bb06 <__swsetup_r+0x46>
 800bb02:	68ac      	ldr	r4, [r5, #8]
 800bb04:	e7eb      	b.n	800bade <__swsetup_r+0x1e>
 800bb06:	4b24      	ldr	r3, [pc, #144]	; (800bb98 <__swsetup_r+0xd8>)
 800bb08:	429c      	cmp	r4, r3
 800bb0a:	bf08      	it	eq
 800bb0c:	68ec      	ldreq	r4, [r5, #12]
 800bb0e:	e7e6      	b.n	800bade <__swsetup_r+0x1e>
 800bb10:	0758      	lsls	r0, r3, #29
 800bb12:	d512      	bpl.n	800bb3a <__swsetup_r+0x7a>
 800bb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb16:	b141      	cbz	r1, 800bb2a <__swsetup_r+0x6a>
 800bb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <__swsetup_r+0x66>
 800bb20:	4630      	mov	r0, r6
 800bb22:	f7ff fd13 	bl	800b54c <_free_r>
 800bb26:	2300      	movs	r3, #0
 800bb28:	6363      	str	r3, [r4, #52]	; 0x34
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	2300      	movs	r3, #0
 800bb34:	6063      	str	r3, [r4, #4]
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	f043 0308 	orr.w	r3, r3, #8
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	b94b      	cbnz	r3, 800bb5a <__swsetup_r+0x9a>
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb50:	d003      	beq.n	800bb5a <__swsetup_r+0x9a>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4630      	mov	r0, r6
 800bb56:	f000 f959 	bl	800be0c <__smakebuf_r>
 800bb5a:	89a0      	ldrh	r0, [r4, #12]
 800bb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb60:	f010 0301 	ands.w	r3, r0, #1
 800bb64:	d00a      	beq.n	800bb7c <__swsetup_r+0xbc>
 800bb66:	2300      	movs	r3, #0
 800bb68:	60a3      	str	r3, [r4, #8]
 800bb6a:	6963      	ldr	r3, [r4, #20]
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	61a3      	str	r3, [r4, #24]
 800bb70:	6923      	ldr	r3, [r4, #16]
 800bb72:	b943      	cbnz	r3, 800bb86 <__swsetup_r+0xc6>
 800bb74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb78:	d1ba      	bne.n	800baf0 <__swsetup_r+0x30>
 800bb7a:	bd70      	pop	{r4, r5, r6, pc}
 800bb7c:	0781      	lsls	r1, r0, #30
 800bb7e:	bf58      	it	pl
 800bb80:	6963      	ldrpl	r3, [r4, #20]
 800bb82:	60a3      	str	r3, [r4, #8]
 800bb84:	e7f4      	b.n	800bb70 <__swsetup_r+0xb0>
 800bb86:	2000      	movs	r0, #0
 800bb88:	e7f7      	b.n	800bb7a <__swsetup_r+0xba>
 800bb8a:	bf00      	nop
 800bb8c:	20000180 	.word	0x20000180
 800bb90:	0800cd28 	.word	0x0800cd28
 800bb94:	0800cd48 	.word	0x0800cd48
 800bb98:	0800cd08 	.word	0x0800cd08

0800bb9c <__assert_func>:
 800bb9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb9e:	4614      	mov	r4, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <__assert_func+0x2c>)
 800bba4:	4605      	mov	r5, r0
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68d8      	ldr	r0, [r3, #12]
 800bbaa:	b14c      	cbz	r4, 800bbc0 <__assert_func+0x24>
 800bbac:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <__assert_func+0x30>)
 800bbae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbb2:	9100      	str	r1, [sp, #0]
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	4906      	ldr	r1, [pc, #24]	; (800bbd0 <__assert_func+0x34>)
 800bbb8:	f000 f8e0 	bl	800bd7c <fiprintf>
 800bbbc:	f000 fb3b 	bl	800c236 <abort>
 800bbc0:	4b04      	ldr	r3, [pc, #16]	; (800bbd4 <__assert_func+0x38>)
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	e7f3      	b.n	800bbae <__assert_func+0x12>
 800bbc6:	bf00      	nop
 800bbc8:	20000180 	.word	0x20000180
 800bbcc:	0800ced5 	.word	0x0800ced5
 800bbd0:	0800cee2 	.word	0x0800cee2
 800bbd4:	0800c4df 	.word	0x0800c4df

0800bbd8 <_close_r>:
 800bbd8:	b538      	push	{r3, r4, r5, lr}
 800bbda:	2300      	movs	r3, #0
 800bbdc:	4d05      	ldr	r5, [pc, #20]	; (800bbf4 <_close_r+0x1c>)
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	602b      	str	r3, [r5, #0]
 800bbe4:	f7f6 f928 	bl	8001e38 <_close>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d102      	bne.n	800bbf2 <_close_r+0x1a>
 800bbec:	682b      	ldr	r3, [r5, #0]
 800bbee:	b103      	cbz	r3, 800bbf2 <_close_r+0x1a>
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	200033fc 	.word	0x200033fc

0800bbf8 <__sflush_r>:
 800bbf8:	898a      	ldrh	r2, [r1, #12]
 800bbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbfe:	4605      	mov	r5, r0
 800bc00:	0710      	lsls	r0, r2, #28
 800bc02:	460c      	mov	r4, r1
 800bc04:	d458      	bmi.n	800bcb8 <__sflush_r+0xc0>
 800bc06:	684b      	ldr	r3, [r1, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dc05      	bgt.n	800bc18 <__sflush_r+0x20>
 800bc0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	dc02      	bgt.n	800bc18 <__sflush_r+0x20>
 800bc12:	2000      	movs	r0, #0
 800bc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc1a:	2e00      	cmp	r6, #0
 800bc1c:	d0f9      	beq.n	800bc12 <__sflush_r+0x1a>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc24:	682f      	ldr	r7, [r5, #0]
 800bc26:	602b      	str	r3, [r5, #0]
 800bc28:	d032      	beq.n	800bc90 <__sflush_r+0x98>
 800bc2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc2c:	89a3      	ldrh	r3, [r4, #12]
 800bc2e:	075a      	lsls	r2, r3, #29
 800bc30:	d505      	bpl.n	800bc3e <__sflush_r+0x46>
 800bc32:	6863      	ldr	r3, [r4, #4]
 800bc34:	1ac0      	subs	r0, r0, r3
 800bc36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc38:	b10b      	cbz	r3, 800bc3e <__sflush_r+0x46>
 800bc3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc3c:	1ac0      	subs	r0, r0, r3
 800bc3e:	2300      	movs	r3, #0
 800bc40:	4602      	mov	r2, r0
 800bc42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc44:	4628      	mov	r0, r5
 800bc46:	6a21      	ldr	r1, [r4, #32]
 800bc48:	47b0      	blx	r6
 800bc4a:	1c43      	adds	r3, r0, #1
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	d106      	bne.n	800bc5e <__sflush_r+0x66>
 800bc50:	6829      	ldr	r1, [r5, #0]
 800bc52:	291d      	cmp	r1, #29
 800bc54:	d82c      	bhi.n	800bcb0 <__sflush_r+0xb8>
 800bc56:	4a2a      	ldr	r2, [pc, #168]	; (800bd00 <__sflush_r+0x108>)
 800bc58:	40ca      	lsrs	r2, r1
 800bc5a:	07d6      	lsls	r6, r2, #31
 800bc5c:	d528      	bpl.n	800bcb0 <__sflush_r+0xb8>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	6062      	str	r2, [r4, #4]
 800bc62:	6922      	ldr	r2, [r4, #16]
 800bc64:	04d9      	lsls	r1, r3, #19
 800bc66:	6022      	str	r2, [r4, #0]
 800bc68:	d504      	bpl.n	800bc74 <__sflush_r+0x7c>
 800bc6a:	1c42      	adds	r2, r0, #1
 800bc6c:	d101      	bne.n	800bc72 <__sflush_r+0x7a>
 800bc6e:	682b      	ldr	r3, [r5, #0]
 800bc70:	b903      	cbnz	r3, 800bc74 <__sflush_r+0x7c>
 800bc72:	6560      	str	r0, [r4, #84]	; 0x54
 800bc74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc76:	602f      	str	r7, [r5, #0]
 800bc78:	2900      	cmp	r1, #0
 800bc7a:	d0ca      	beq.n	800bc12 <__sflush_r+0x1a>
 800bc7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc80:	4299      	cmp	r1, r3
 800bc82:	d002      	beq.n	800bc8a <__sflush_r+0x92>
 800bc84:	4628      	mov	r0, r5
 800bc86:	f7ff fc61 	bl	800b54c <_free_r>
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bc8e:	e7c1      	b.n	800bc14 <__sflush_r+0x1c>
 800bc90:	6a21      	ldr	r1, [r4, #32]
 800bc92:	2301      	movs	r3, #1
 800bc94:	4628      	mov	r0, r5
 800bc96:	47b0      	blx	r6
 800bc98:	1c41      	adds	r1, r0, #1
 800bc9a:	d1c7      	bne.n	800bc2c <__sflush_r+0x34>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0c4      	beq.n	800bc2c <__sflush_r+0x34>
 800bca2:	2b1d      	cmp	r3, #29
 800bca4:	d001      	beq.n	800bcaa <__sflush_r+0xb2>
 800bca6:	2b16      	cmp	r3, #22
 800bca8:	d101      	bne.n	800bcae <__sflush_r+0xb6>
 800bcaa:	602f      	str	r7, [r5, #0]
 800bcac:	e7b1      	b.n	800bc12 <__sflush_r+0x1a>
 800bcae:	89a3      	ldrh	r3, [r4, #12]
 800bcb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcb4:	81a3      	strh	r3, [r4, #12]
 800bcb6:	e7ad      	b.n	800bc14 <__sflush_r+0x1c>
 800bcb8:	690f      	ldr	r7, [r1, #16]
 800bcba:	2f00      	cmp	r7, #0
 800bcbc:	d0a9      	beq.n	800bc12 <__sflush_r+0x1a>
 800bcbe:	0793      	lsls	r3, r2, #30
 800bcc0:	bf18      	it	ne
 800bcc2:	2300      	movne	r3, #0
 800bcc4:	680e      	ldr	r6, [r1, #0]
 800bcc6:	bf08      	it	eq
 800bcc8:	694b      	ldreq	r3, [r1, #20]
 800bcca:	eba6 0807 	sub.w	r8, r6, r7
 800bcce:	600f      	str	r7, [r1, #0]
 800bcd0:	608b      	str	r3, [r1, #8]
 800bcd2:	f1b8 0f00 	cmp.w	r8, #0
 800bcd6:	dd9c      	ble.n	800bc12 <__sflush_r+0x1a>
 800bcd8:	4643      	mov	r3, r8
 800bcda:	463a      	mov	r2, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	6a21      	ldr	r1, [r4, #32]
 800bce0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bce2:	47b0      	blx	r6
 800bce4:	2800      	cmp	r0, #0
 800bce6:	dc06      	bgt.n	800bcf6 <__sflush_r+0xfe>
 800bce8:	89a3      	ldrh	r3, [r4, #12]
 800bcea:	f04f 30ff 	mov.w	r0, #4294967295
 800bcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf2:	81a3      	strh	r3, [r4, #12]
 800bcf4:	e78e      	b.n	800bc14 <__sflush_r+0x1c>
 800bcf6:	4407      	add	r7, r0
 800bcf8:	eba8 0800 	sub.w	r8, r8, r0
 800bcfc:	e7e9      	b.n	800bcd2 <__sflush_r+0xda>
 800bcfe:	bf00      	nop
 800bd00:	20400001 	.word	0x20400001

0800bd04 <_fflush_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	690b      	ldr	r3, [r1, #16]
 800bd08:	4605      	mov	r5, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	b913      	cbnz	r3, 800bd14 <_fflush_r+0x10>
 800bd0e:	2500      	movs	r5, #0
 800bd10:	4628      	mov	r0, r5
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	b118      	cbz	r0, 800bd1e <_fflush_r+0x1a>
 800bd16:	6983      	ldr	r3, [r0, #24]
 800bd18:	b90b      	cbnz	r3, 800bd1e <_fflush_r+0x1a>
 800bd1a:	f7fe ffcb 	bl	800acb4 <__sinit>
 800bd1e:	4b14      	ldr	r3, [pc, #80]	; (800bd70 <_fflush_r+0x6c>)
 800bd20:	429c      	cmp	r4, r3
 800bd22:	d11b      	bne.n	800bd5c <_fflush_r+0x58>
 800bd24:	686c      	ldr	r4, [r5, #4]
 800bd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d0ef      	beq.n	800bd0e <_fflush_r+0xa>
 800bd2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd30:	07d0      	lsls	r0, r2, #31
 800bd32:	d404      	bmi.n	800bd3e <_fflush_r+0x3a>
 800bd34:	0599      	lsls	r1, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_fflush_r+0x3a>
 800bd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd3a:	f7ff f85e 	bl	800adfa <__retarget_lock_acquire_recursive>
 800bd3e:	4628      	mov	r0, r5
 800bd40:	4621      	mov	r1, r4
 800bd42:	f7ff ff59 	bl	800bbf8 <__sflush_r>
 800bd46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd48:	4605      	mov	r5, r0
 800bd4a:	07da      	lsls	r2, r3, #31
 800bd4c:	d4e0      	bmi.n	800bd10 <_fflush_r+0xc>
 800bd4e:	89a3      	ldrh	r3, [r4, #12]
 800bd50:	059b      	lsls	r3, r3, #22
 800bd52:	d4dd      	bmi.n	800bd10 <_fflush_r+0xc>
 800bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd56:	f7ff f851 	bl	800adfc <__retarget_lock_release_recursive>
 800bd5a:	e7d9      	b.n	800bd10 <_fflush_r+0xc>
 800bd5c:	4b05      	ldr	r3, [pc, #20]	; (800bd74 <_fflush_r+0x70>)
 800bd5e:	429c      	cmp	r4, r3
 800bd60:	d101      	bne.n	800bd66 <_fflush_r+0x62>
 800bd62:	68ac      	ldr	r4, [r5, #8]
 800bd64:	e7df      	b.n	800bd26 <_fflush_r+0x22>
 800bd66:	4b04      	ldr	r3, [pc, #16]	; (800bd78 <_fflush_r+0x74>)
 800bd68:	429c      	cmp	r4, r3
 800bd6a:	bf08      	it	eq
 800bd6c:	68ec      	ldreq	r4, [r5, #12]
 800bd6e:	e7da      	b.n	800bd26 <_fflush_r+0x22>
 800bd70:	0800cd28 	.word	0x0800cd28
 800bd74:	0800cd48 	.word	0x0800cd48
 800bd78:	0800cd08 	.word	0x0800cd08

0800bd7c <fiprintf>:
 800bd7c:	b40e      	push	{r1, r2, r3}
 800bd7e:	b503      	push	{r0, r1, lr}
 800bd80:	4601      	mov	r1, r0
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	4805      	ldr	r0, [pc, #20]	; (800bd9c <fiprintf+0x20>)
 800bd86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	f000 f903 	bl	800bf98 <_vfiprintf_r>
 800bd92:	b002      	add	sp, #8
 800bd94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd98:	b003      	add	sp, #12
 800bd9a:	4770      	bx	lr
 800bd9c:	20000180 	.word	0x20000180

0800bda0 <_lseek_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4604      	mov	r4, r0
 800bda4:	4608      	mov	r0, r1
 800bda6:	4611      	mov	r1, r2
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4d05      	ldr	r5, [pc, #20]	; (800bdc0 <_lseek_r+0x20>)
 800bdac:	602a      	str	r2, [r5, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	f7f6 f84c 	bl	8001e4c <_lseek>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d102      	bne.n	800bdbe <_lseek_r+0x1e>
 800bdb8:	682b      	ldr	r3, [r5, #0]
 800bdba:	b103      	cbz	r3, 800bdbe <_lseek_r+0x1e>
 800bdbc:	6023      	str	r3, [r4, #0]
 800bdbe:	bd38      	pop	{r3, r4, r5, pc}
 800bdc0:	200033fc 	.word	0x200033fc

0800bdc4 <__swhatbuf_r>:
 800bdc4:	b570      	push	{r4, r5, r6, lr}
 800bdc6:	460e      	mov	r6, r1
 800bdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdcc:	4614      	mov	r4, r2
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	461d      	mov	r5, r3
 800bdd2:	b096      	sub	sp, #88	; 0x58
 800bdd4:	da07      	bge.n	800bde6 <__swhatbuf_r+0x22>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	89b3      	ldrh	r3, [r6, #12]
 800bddc:	061a      	lsls	r2, r3, #24
 800bdde:	d410      	bmi.n	800be02 <__swhatbuf_r+0x3e>
 800bde0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bde4:	e00e      	b.n	800be04 <__swhatbuf_r+0x40>
 800bde6:	466a      	mov	r2, sp
 800bde8:	f000 fa2c 	bl	800c244 <_fstat_r>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	dbf2      	blt.n	800bdd6 <__swhatbuf_r+0x12>
 800bdf0:	9a01      	ldr	r2, [sp, #4]
 800bdf2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bdf6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bdfa:	425a      	negs	r2, r3
 800bdfc:	415a      	adcs	r2, r3
 800bdfe:	602a      	str	r2, [r5, #0]
 800be00:	e7ee      	b.n	800bde0 <__swhatbuf_r+0x1c>
 800be02:	2340      	movs	r3, #64	; 0x40
 800be04:	2000      	movs	r0, #0
 800be06:	6023      	str	r3, [r4, #0]
 800be08:	b016      	add	sp, #88	; 0x58
 800be0a:	bd70      	pop	{r4, r5, r6, pc}

0800be0c <__smakebuf_r>:
 800be0c:	898b      	ldrh	r3, [r1, #12]
 800be0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800be10:	079d      	lsls	r5, r3, #30
 800be12:	4606      	mov	r6, r0
 800be14:	460c      	mov	r4, r1
 800be16:	d507      	bpl.n	800be28 <__smakebuf_r+0x1c>
 800be18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800be1c:	6023      	str	r3, [r4, #0]
 800be1e:	6123      	str	r3, [r4, #16]
 800be20:	2301      	movs	r3, #1
 800be22:	6163      	str	r3, [r4, #20]
 800be24:	b002      	add	sp, #8
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	466a      	mov	r2, sp
 800be2a:	ab01      	add	r3, sp, #4
 800be2c:	f7ff ffca 	bl	800bdc4 <__swhatbuf_r>
 800be30:	9900      	ldr	r1, [sp, #0]
 800be32:	4605      	mov	r5, r0
 800be34:	4630      	mov	r0, r6
 800be36:	f7ff fbd5 	bl	800b5e4 <_malloc_r>
 800be3a:	b948      	cbnz	r0, 800be50 <__smakebuf_r+0x44>
 800be3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be40:	059a      	lsls	r2, r3, #22
 800be42:	d4ef      	bmi.n	800be24 <__smakebuf_r+0x18>
 800be44:	f023 0303 	bic.w	r3, r3, #3
 800be48:	f043 0302 	orr.w	r3, r3, #2
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	e7e3      	b.n	800be18 <__smakebuf_r+0xc>
 800be50:	4b0d      	ldr	r3, [pc, #52]	; (800be88 <__smakebuf_r+0x7c>)
 800be52:	62b3      	str	r3, [r6, #40]	; 0x28
 800be54:	89a3      	ldrh	r3, [r4, #12]
 800be56:	6020      	str	r0, [r4, #0]
 800be58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	9b00      	ldr	r3, [sp, #0]
 800be60:	6120      	str	r0, [r4, #16]
 800be62:	6163      	str	r3, [r4, #20]
 800be64:	9b01      	ldr	r3, [sp, #4]
 800be66:	b15b      	cbz	r3, 800be80 <__smakebuf_r+0x74>
 800be68:	4630      	mov	r0, r6
 800be6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be6e:	f000 f9fb 	bl	800c268 <_isatty_r>
 800be72:	b128      	cbz	r0, 800be80 <__smakebuf_r+0x74>
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	f023 0303 	bic.w	r3, r3, #3
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	89a0      	ldrh	r0, [r4, #12]
 800be82:	4305      	orrs	r5, r0
 800be84:	81a5      	strh	r5, [r4, #12]
 800be86:	e7cd      	b.n	800be24 <__smakebuf_r+0x18>
 800be88:	0800ac4d 	.word	0x0800ac4d

0800be8c <__ascii_mbtowc>:
 800be8c:	b082      	sub	sp, #8
 800be8e:	b901      	cbnz	r1, 800be92 <__ascii_mbtowc+0x6>
 800be90:	a901      	add	r1, sp, #4
 800be92:	b142      	cbz	r2, 800bea6 <__ascii_mbtowc+0x1a>
 800be94:	b14b      	cbz	r3, 800beaa <__ascii_mbtowc+0x1e>
 800be96:	7813      	ldrb	r3, [r2, #0]
 800be98:	600b      	str	r3, [r1, #0]
 800be9a:	7812      	ldrb	r2, [r2, #0]
 800be9c:	1e10      	subs	r0, r2, #0
 800be9e:	bf18      	it	ne
 800bea0:	2001      	movne	r0, #1
 800bea2:	b002      	add	sp, #8
 800bea4:	4770      	bx	lr
 800bea6:	4610      	mov	r0, r2
 800bea8:	e7fb      	b.n	800bea2 <__ascii_mbtowc+0x16>
 800beaa:	f06f 0001 	mvn.w	r0, #1
 800beae:	e7f8      	b.n	800bea2 <__ascii_mbtowc+0x16>

0800beb0 <memmove>:
 800beb0:	4288      	cmp	r0, r1
 800beb2:	b510      	push	{r4, lr}
 800beb4:	eb01 0402 	add.w	r4, r1, r2
 800beb8:	d902      	bls.n	800bec0 <memmove+0x10>
 800beba:	4284      	cmp	r4, r0
 800bebc:	4623      	mov	r3, r4
 800bebe:	d807      	bhi.n	800bed0 <memmove+0x20>
 800bec0:	1e43      	subs	r3, r0, #1
 800bec2:	42a1      	cmp	r1, r4
 800bec4:	d008      	beq.n	800bed8 <memmove+0x28>
 800bec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bece:	e7f8      	b.n	800bec2 <memmove+0x12>
 800bed0:	4601      	mov	r1, r0
 800bed2:	4402      	add	r2, r0
 800bed4:	428a      	cmp	r2, r1
 800bed6:	d100      	bne.n	800beda <memmove+0x2a>
 800bed8:	bd10      	pop	{r4, pc}
 800beda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bee2:	e7f7      	b.n	800bed4 <memmove+0x24>

0800bee4 <__malloc_lock>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__malloc_lock+0x8>)
 800bee6:	f7fe bf88 	b.w	800adfa <__retarget_lock_acquire_recursive>
 800beea:	bf00      	nop
 800beec:	200033f0 	.word	0x200033f0

0800bef0 <__malloc_unlock>:
 800bef0:	4801      	ldr	r0, [pc, #4]	; (800bef8 <__malloc_unlock+0x8>)
 800bef2:	f7fe bf83 	b.w	800adfc <__retarget_lock_release_recursive>
 800bef6:	bf00      	nop
 800bef8:	200033f0 	.word	0x200033f0

0800befc <_realloc_r>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	4607      	mov	r7, r0
 800bf00:	4614      	mov	r4, r2
 800bf02:	460e      	mov	r6, r1
 800bf04:	b921      	cbnz	r1, 800bf10 <_realloc_r+0x14>
 800bf06:	4611      	mov	r1, r2
 800bf08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf0c:	f7ff bb6a 	b.w	800b5e4 <_malloc_r>
 800bf10:	b922      	cbnz	r2, 800bf1c <_realloc_r+0x20>
 800bf12:	f7ff fb1b 	bl	800b54c <_free_r>
 800bf16:	4625      	mov	r5, r4
 800bf18:	4628      	mov	r0, r5
 800bf1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf1c:	f000 f9b4 	bl	800c288 <_malloc_usable_size_r>
 800bf20:	42a0      	cmp	r0, r4
 800bf22:	d20f      	bcs.n	800bf44 <_realloc_r+0x48>
 800bf24:	4621      	mov	r1, r4
 800bf26:	4638      	mov	r0, r7
 800bf28:	f7ff fb5c 	bl	800b5e4 <_malloc_r>
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d0f2      	beq.n	800bf18 <_realloc_r+0x1c>
 800bf32:	4631      	mov	r1, r6
 800bf34:	4622      	mov	r2, r4
 800bf36:	f7fd fb53 	bl	80095e0 <memcpy>
 800bf3a:	4631      	mov	r1, r6
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff fb05 	bl	800b54c <_free_r>
 800bf42:	e7e9      	b.n	800bf18 <_realloc_r+0x1c>
 800bf44:	4635      	mov	r5, r6
 800bf46:	e7e7      	b.n	800bf18 <_realloc_r+0x1c>

0800bf48 <__sfputc_r>:
 800bf48:	6893      	ldr	r3, [r2, #8]
 800bf4a:	b410      	push	{r4}
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	6093      	str	r3, [r2, #8]
 800bf52:	da07      	bge.n	800bf64 <__sfputc_r+0x1c>
 800bf54:	6994      	ldr	r4, [r2, #24]
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	db01      	blt.n	800bf5e <__sfputc_r+0x16>
 800bf5a:	290a      	cmp	r1, #10
 800bf5c:	d102      	bne.n	800bf64 <__sfputc_r+0x1c>
 800bf5e:	bc10      	pop	{r4}
 800bf60:	f7ff bd4a 	b.w	800b9f8 <__swbuf_r>
 800bf64:	6813      	ldr	r3, [r2, #0]
 800bf66:	1c58      	adds	r0, r3, #1
 800bf68:	6010      	str	r0, [r2, #0]
 800bf6a:	7019      	strb	r1, [r3, #0]
 800bf6c:	4608      	mov	r0, r1
 800bf6e:	bc10      	pop	{r4}
 800bf70:	4770      	bx	lr

0800bf72 <__sfputs_r>:
 800bf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	18d5      	adds	r5, r2, r3
 800bf7c:	42ac      	cmp	r4, r5
 800bf7e:	d101      	bne.n	800bf84 <__sfputs_r+0x12>
 800bf80:	2000      	movs	r0, #0
 800bf82:	e007      	b.n	800bf94 <__sfputs_r+0x22>
 800bf84:	463a      	mov	r2, r7
 800bf86:	4630      	mov	r0, r6
 800bf88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf8c:	f7ff ffdc 	bl	800bf48 <__sfputc_r>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	d1f3      	bne.n	800bf7c <__sfputs_r+0xa>
 800bf94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf98 <_vfiprintf_r>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	4614      	mov	r4, r2
 800bfa0:	4698      	mov	r8, r3
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	b09d      	sub	sp, #116	; 0x74
 800bfa6:	b118      	cbz	r0, 800bfb0 <_vfiprintf_r+0x18>
 800bfa8:	6983      	ldr	r3, [r0, #24]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <_vfiprintf_r+0x18>
 800bfac:	f7fe fe82 	bl	800acb4 <__sinit>
 800bfb0:	4b89      	ldr	r3, [pc, #548]	; (800c1d8 <_vfiprintf_r+0x240>)
 800bfb2:	429d      	cmp	r5, r3
 800bfb4:	d11b      	bne.n	800bfee <_vfiprintf_r+0x56>
 800bfb6:	6875      	ldr	r5, [r6, #4]
 800bfb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfba:	07d9      	lsls	r1, r3, #31
 800bfbc:	d405      	bmi.n	800bfca <_vfiprintf_r+0x32>
 800bfbe:	89ab      	ldrh	r3, [r5, #12]
 800bfc0:	059a      	lsls	r2, r3, #22
 800bfc2:	d402      	bmi.n	800bfca <_vfiprintf_r+0x32>
 800bfc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfc6:	f7fe ff18 	bl	800adfa <__retarget_lock_acquire_recursive>
 800bfca:	89ab      	ldrh	r3, [r5, #12]
 800bfcc:	071b      	lsls	r3, r3, #28
 800bfce:	d501      	bpl.n	800bfd4 <_vfiprintf_r+0x3c>
 800bfd0:	692b      	ldr	r3, [r5, #16]
 800bfd2:	b9eb      	cbnz	r3, 800c010 <_vfiprintf_r+0x78>
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff fd72 	bl	800bac0 <__swsetup_r>
 800bfdc:	b1c0      	cbz	r0, 800c010 <_vfiprintf_r+0x78>
 800bfde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfe0:	07dc      	lsls	r4, r3, #31
 800bfe2:	d50e      	bpl.n	800c002 <_vfiprintf_r+0x6a>
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	b01d      	add	sp, #116	; 0x74
 800bfea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfee:	4b7b      	ldr	r3, [pc, #492]	; (800c1dc <_vfiprintf_r+0x244>)
 800bff0:	429d      	cmp	r5, r3
 800bff2:	d101      	bne.n	800bff8 <_vfiprintf_r+0x60>
 800bff4:	68b5      	ldr	r5, [r6, #8]
 800bff6:	e7df      	b.n	800bfb8 <_vfiprintf_r+0x20>
 800bff8:	4b79      	ldr	r3, [pc, #484]	; (800c1e0 <_vfiprintf_r+0x248>)
 800bffa:	429d      	cmp	r5, r3
 800bffc:	bf08      	it	eq
 800bffe:	68f5      	ldreq	r5, [r6, #12]
 800c000:	e7da      	b.n	800bfb8 <_vfiprintf_r+0x20>
 800c002:	89ab      	ldrh	r3, [r5, #12]
 800c004:	0598      	lsls	r0, r3, #22
 800c006:	d4ed      	bmi.n	800bfe4 <_vfiprintf_r+0x4c>
 800c008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00a:	f7fe fef7 	bl	800adfc <__retarget_lock_release_recursive>
 800c00e:	e7e9      	b.n	800bfe4 <_vfiprintf_r+0x4c>
 800c010:	2300      	movs	r3, #0
 800c012:	9309      	str	r3, [sp, #36]	; 0x24
 800c014:	2320      	movs	r3, #32
 800c016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c01a:	2330      	movs	r3, #48	; 0x30
 800c01c:	f04f 0901 	mov.w	r9, #1
 800c020:	f8cd 800c 	str.w	r8, [sp, #12]
 800c024:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c1e4 <_vfiprintf_r+0x24c>
 800c028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c02c:	4623      	mov	r3, r4
 800c02e:	469a      	mov	sl, r3
 800c030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c034:	b10a      	cbz	r2, 800c03a <_vfiprintf_r+0xa2>
 800c036:	2a25      	cmp	r2, #37	; 0x25
 800c038:	d1f9      	bne.n	800c02e <_vfiprintf_r+0x96>
 800c03a:	ebba 0b04 	subs.w	fp, sl, r4
 800c03e:	d00b      	beq.n	800c058 <_vfiprintf_r+0xc0>
 800c040:	465b      	mov	r3, fp
 800c042:	4622      	mov	r2, r4
 800c044:	4629      	mov	r1, r5
 800c046:	4630      	mov	r0, r6
 800c048:	f7ff ff93 	bl	800bf72 <__sfputs_r>
 800c04c:	3001      	adds	r0, #1
 800c04e:	f000 80aa 	beq.w	800c1a6 <_vfiprintf_r+0x20e>
 800c052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c054:	445a      	add	r2, fp
 800c056:	9209      	str	r2, [sp, #36]	; 0x24
 800c058:	f89a 3000 	ldrb.w	r3, [sl]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80a2 	beq.w	800c1a6 <_vfiprintf_r+0x20e>
 800c062:	2300      	movs	r3, #0
 800c064:	f04f 32ff 	mov.w	r2, #4294967295
 800c068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c06c:	f10a 0a01 	add.w	sl, sl, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	9307      	str	r3, [sp, #28]
 800c074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c078:	931a      	str	r3, [sp, #104]	; 0x68
 800c07a:	4654      	mov	r4, sl
 800c07c:	2205      	movs	r2, #5
 800c07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c082:	4858      	ldr	r0, [pc, #352]	; (800c1e4 <_vfiprintf_r+0x24c>)
 800c084:	f7fe fec4 	bl	800ae10 <memchr>
 800c088:	9a04      	ldr	r2, [sp, #16]
 800c08a:	b9d8      	cbnz	r0, 800c0c4 <_vfiprintf_r+0x12c>
 800c08c:	06d1      	lsls	r1, r2, #27
 800c08e:	bf44      	itt	mi
 800c090:	2320      	movmi	r3, #32
 800c092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c096:	0713      	lsls	r3, r2, #28
 800c098:	bf44      	itt	mi
 800c09a:	232b      	movmi	r3, #43	; 0x2b
 800c09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c0a6:	d015      	beq.n	800c0d4 <_vfiprintf_r+0x13c>
 800c0a8:	4654      	mov	r4, sl
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	f04f 0c0a 	mov.w	ip, #10
 800c0b0:	9a07      	ldr	r2, [sp, #28]
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0b8:	3b30      	subs	r3, #48	; 0x30
 800c0ba:	2b09      	cmp	r3, #9
 800c0bc:	d94e      	bls.n	800c15c <_vfiprintf_r+0x1c4>
 800c0be:	b1b0      	cbz	r0, 800c0ee <_vfiprintf_r+0x156>
 800c0c0:	9207      	str	r2, [sp, #28]
 800c0c2:	e014      	b.n	800c0ee <_vfiprintf_r+0x156>
 800c0c4:	eba0 0308 	sub.w	r3, r0, r8
 800c0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	46a2      	mov	sl, r4
 800c0d0:	9304      	str	r3, [sp, #16]
 800c0d2:	e7d2      	b.n	800c07a <_vfiprintf_r+0xe2>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	1d19      	adds	r1, r3, #4
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	9103      	str	r1, [sp, #12]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	bfbb      	ittet	lt
 800c0e0:	425b      	neglt	r3, r3
 800c0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c0e6:	9307      	strge	r3, [sp, #28]
 800c0e8:	9307      	strlt	r3, [sp, #28]
 800c0ea:	bfb8      	it	lt
 800c0ec:	9204      	strlt	r2, [sp, #16]
 800c0ee:	7823      	ldrb	r3, [r4, #0]
 800c0f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f2:	d10c      	bne.n	800c10e <_vfiprintf_r+0x176>
 800c0f4:	7863      	ldrb	r3, [r4, #1]
 800c0f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c0f8:	d135      	bne.n	800c166 <_vfiprintf_r+0x1ce>
 800c0fa:	9b03      	ldr	r3, [sp, #12]
 800c0fc:	3402      	adds	r4, #2
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	9203      	str	r2, [sp, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	bfb8      	it	lt
 800c108:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1f4 <_vfiprintf_r+0x25c>
 800c112:	2203      	movs	r2, #3
 800c114:	4650      	mov	r0, sl
 800c116:	7821      	ldrb	r1, [r4, #0]
 800c118:	f7fe fe7a 	bl	800ae10 <memchr>
 800c11c:	b140      	cbz	r0, 800c130 <_vfiprintf_r+0x198>
 800c11e:	2340      	movs	r3, #64	; 0x40
 800c120:	eba0 000a 	sub.w	r0, r0, sl
 800c124:	fa03 f000 	lsl.w	r0, r3, r0
 800c128:	9b04      	ldr	r3, [sp, #16]
 800c12a:	3401      	adds	r4, #1
 800c12c:	4303      	orrs	r3, r0
 800c12e:	9304      	str	r3, [sp, #16]
 800c130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c134:	2206      	movs	r2, #6
 800c136:	482c      	ldr	r0, [pc, #176]	; (800c1e8 <_vfiprintf_r+0x250>)
 800c138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13c:	f7fe fe68 	bl	800ae10 <memchr>
 800c140:	2800      	cmp	r0, #0
 800c142:	d03f      	beq.n	800c1c4 <_vfiprintf_r+0x22c>
 800c144:	4b29      	ldr	r3, [pc, #164]	; (800c1ec <_vfiprintf_r+0x254>)
 800c146:	bb1b      	cbnz	r3, 800c190 <_vfiprintf_r+0x1f8>
 800c148:	9b03      	ldr	r3, [sp, #12]
 800c14a:	3307      	adds	r3, #7
 800c14c:	f023 0307 	bic.w	r3, r3, #7
 800c150:	3308      	adds	r3, #8
 800c152:	9303      	str	r3, [sp, #12]
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	443b      	add	r3, r7
 800c158:	9309      	str	r3, [sp, #36]	; 0x24
 800c15a:	e767      	b.n	800c02c <_vfiprintf_r+0x94>
 800c15c:	460c      	mov	r4, r1
 800c15e:	2001      	movs	r0, #1
 800c160:	fb0c 3202 	mla	r2, ip, r2, r3
 800c164:	e7a5      	b.n	800c0b2 <_vfiprintf_r+0x11a>
 800c166:	2300      	movs	r3, #0
 800c168:	f04f 0c0a 	mov.w	ip, #10
 800c16c:	4619      	mov	r1, r3
 800c16e:	3401      	adds	r4, #1
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	4620      	mov	r0, r4
 800c174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c178:	3a30      	subs	r2, #48	; 0x30
 800c17a:	2a09      	cmp	r2, #9
 800c17c:	d903      	bls.n	800c186 <_vfiprintf_r+0x1ee>
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d0c5      	beq.n	800c10e <_vfiprintf_r+0x176>
 800c182:	9105      	str	r1, [sp, #20]
 800c184:	e7c3      	b.n	800c10e <_vfiprintf_r+0x176>
 800c186:	4604      	mov	r4, r0
 800c188:	2301      	movs	r3, #1
 800c18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c18e:	e7f0      	b.n	800c172 <_vfiprintf_r+0x1da>
 800c190:	ab03      	add	r3, sp, #12
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	462a      	mov	r2, r5
 800c196:	4630      	mov	r0, r6
 800c198:	4b15      	ldr	r3, [pc, #84]	; (800c1f0 <_vfiprintf_r+0x258>)
 800c19a:	a904      	add	r1, sp, #16
 800c19c:	f7fd fad4 	bl	8009748 <_printf_float>
 800c1a0:	4607      	mov	r7, r0
 800c1a2:	1c78      	adds	r0, r7, #1
 800c1a4:	d1d6      	bne.n	800c154 <_vfiprintf_r+0x1bc>
 800c1a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1a8:	07d9      	lsls	r1, r3, #31
 800c1aa:	d405      	bmi.n	800c1b8 <_vfiprintf_r+0x220>
 800c1ac:	89ab      	ldrh	r3, [r5, #12]
 800c1ae:	059a      	lsls	r2, r3, #22
 800c1b0:	d402      	bmi.n	800c1b8 <_vfiprintf_r+0x220>
 800c1b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b4:	f7fe fe22 	bl	800adfc <__retarget_lock_release_recursive>
 800c1b8:	89ab      	ldrh	r3, [r5, #12]
 800c1ba:	065b      	lsls	r3, r3, #25
 800c1bc:	f53f af12 	bmi.w	800bfe4 <_vfiprintf_r+0x4c>
 800c1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1c2:	e711      	b.n	800bfe8 <_vfiprintf_r+0x50>
 800c1c4:	ab03      	add	r3, sp, #12
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	462a      	mov	r2, r5
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4b08      	ldr	r3, [pc, #32]	; (800c1f0 <_vfiprintf_r+0x258>)
 800c1ce:	a904      	add	r1, sp, #16
 800c1d0:	f7fd fd56 	bl	8009c80 <_printf_i>
 800c1d4:	e7e4      	b.n	800c1a0 <_vfiprintf_r+0x208>
 800c1d6:	bf00      	nop
 800c1d8:	0800cd28 	.word	0x0800cd28
 800c1dc:	0800cd48 	.word	0x0800cd48
 800c1e0:	0800cd08 	.word	0x0800cd08
 800c1e4:	0800cec4 	.word	0x0800cec4
 800c1e8:	0800cece 	.word	0x0800cece
 800c1ec:	08009749 	.word	0x08009749
 800c1f0:	0800bf73 	.word	0x0800bf73
 800c1f4:	0800ceca 	.word	0x0800ceca

0800c1f8 <_read_r>:
 800c1f8:	b538      	push	{r3, r4, r5, lr}
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	4608      	mov	r0, r1
 800c1fe:	4611      	mov	r1, r2
 800c200:	2200      	movs	r2, #0
 800c202:	4d05      	ldr	r5, [pc, #20]	; (800c218 <_read_r+0x20>)
 800c204:	602a      	str	r2, [r5, #0]
 800c206:	461a      	mov	r2, r3
 800c208:	f7f5 fdfc 	bl	8001e04 <_read>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_read_r+0x1e>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_read_r+0x1e>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	200033fc 	.word	0x200033fc

0800c21c <__ascii_wctomb>:
 800c21c:	4603      	mov	r3, r0
 800c21e:	4608      	mov	r0, r1
 800c220:	b141      	cbz	r1, 800c234 <__ascii_wctomb+0x18>
 800c222:	2aff      	cmp	r2, #255	; 0xff
 800c224:	d904      	bls.n	800c230 <__ascii_wctomb+0x14>
 800c226:	228a      	movs	r2, #138	; 0x8a
 800c228:	f04f 30ff 	mov.w	r0, #4294967295
 800c22c:	601a      	str	r2, [r3, #0]
 800c22e:	4770      	bx	lr
 800c230:	2001      	movs	r0, #1
 800c232:	700a      	strb	r2, [r1, #0]
 800c234:	4770      	bx	lr

0800c236 <abort>:
 800c236:	2006      	movs	r0, #6
 800c238:	b508      	push	{r3, lr}
 800c23a:	f000 f855 	bl	800c2e8 <raise>
 800c23e:	2001      	movs	r0, #1
 800c240:	f7f5 fdda 	bl	8001df8 <_exit>

0800c244 <_fstat_r>:
 800c244:	b538      	push	{r3, r4, r5, lr}
 800c246:	2300      	movs	r3, #0
 800c248:	4d06      	ldr	r5, [pc, #24]	; (800c264 <_fstat_r+0x20>)
 800c24a:	4604      	mov	r4, r0
 800c24c:	4608      	mov	r0, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	602b      	str	r3, [r5, #0]
 800c252:	f7f5 fdf4 	bl	8001e3e <_fstat>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	d102      	bne.n	800c260 <_fstat_r+0x1c>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	b103      	cbz	r3, 800c260 <_fstat_r+0x1c>
 800c25e:	6023      	str	r3, [r4, #0]
 800c260:	bd38      	pop	{r3, r4, r5, pc}
 800c262:	bf00      	nop
 800c264:	200033fc 	.word	0x200033fc

0800c268 <_isatty_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	2300      	movs	r3, #0
 800c26c:	4d05      	ldr	r5, [pc, #20]	; (800c284 <_isatty_r+0x1c>)
 800c26e:	4604      	mov	r4, r0
 800c270:	4608      	mov	r0, r1
 800c272:	602b      	str	r3, [r5, #0]
 800c274:	f7f5 fde8 	bl	8001e48 <_isatty>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_isatty_r+0x1a>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_isatty_r+0x1a>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	200033fc 	.word	0x200033fc

0800c288 <_malloc_usable_size_r>:
 800c288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c28c:	1f18      	subs	r0, r3, #4
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfbc      	itt	lt
 800c292:	580b      	ldrlt	r3, [r1, r0]
 800c294:	18c0      	addlt	r0, r0, r3
 800c296:	4770      	bx	lr

0800c298 <_raise_r>:
 800c298:	291f      	cmp	r1, #31
 800c29a:	b538      	push	{r3, r4, r5, lr}
 800c29c:	4604      	mov	r4, r0
 800c29e:	460d      	mov	r5, r1
 800c2a0:	d904      	bls.n	800c2ac <_raise_r+0x14>
 800c2a2:	2316      	movs	r3, #22
 800c2a4:	6003      	str	r3, [r0, #0]
 800c2a6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2ae:	b112      	cbz	r2, 800c2b6 <_raise_r+0x1e>
 800c2b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2b4:	b94b      	cbnz	r3, 800c2ca <_raise_r+0x32>
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 f830 	bl	800c31c <_getpid_r>
 800c2bc:	462a      	mov	r2, r5
 800c2be:	4601      	mov	r1, r0
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c6:	f000 b817 	b.w	800c2f8 <_kill_r>
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d00a      	beq.n	800c2e4 <_raise_r+0x4c>
 800c2ce:	1c59      	adds	r1, r3, #1
 800c2d0:	d103      	bne.n	800c2da <_raise_r+0x42>
 800c2d2:	2316      	movs	r3, #22
 800c2d4:	6003      	str	r3, [r0, #0]
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	e7e7      	b.n	800c2aa <_raise_r+0x12>
 800c2da:	2400      	movs	r4, #0
 800c2dc:	4628      	mov	r0, r5
 800c2de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2e2:	4798      	blx	r3
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e7e0      	b.n	800c2aa <_raise_r+0x12>

0800c2e8 <raise>:
 800c2e8:	4b02      	ldr	r3, [pc, #8]	; (800c2f4 <raise+0xc>)
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	f7ff bfd3 	b.w	800c298 <_raise_r>
 800c2f2:	bf00      	nop
 800c2f4:	20000180 	.word	0x20000180

0800c2f8 <_kill_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4d06      	ldr	r5, [pc, #24]	; (800c318 <_kill_r+0x20>)
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	4611      	mov	r1, r2
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	f7f5 fd6f 	bl	8001de8 <_kill>
 800c30a:	1c43      	adds	r3, r0, #1
 800c30c:	d102      	bne.n	800c314 <_kill_r+0x1c>
 800c30e:	682b      	ldr	r3, [r5, #0]
 800c310:	b103      	cbz	r3, 800c314 <_kill_r+0x1c>
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	bd38      	pop	{r3, r4, r5, pc}
 800c316:	bf00      	nop
 800c318:	200033fc 	.word	0x200033fc

0800c31c <_getpid_r>:
 800c31c:	f7f5 bd62 	b.w	8001de4 <_getpid>

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr
