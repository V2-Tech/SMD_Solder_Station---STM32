
SMDSolderStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da7c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  0800db90  0800db90  0001db90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7a4  0800e7a4  00020358  2**0
                  CONTENTS
  4 .ARM          00000000  0800e7a4  0800e7a4  00020358  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e7a4  0800e7a4  00020358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7a4  0800e7a4  0001e7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7a8  0800e7a8  0001e7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0800e7ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003448  20000358  0800eb04  00020358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200037a0  0800eb04  000237a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b354d  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008c39  00000000  00000000  000d38ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00047a0b  00000000  00000000  000dc507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003b68  00000000  00000000  00123f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003da0  00000000  00000000  00127a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a458  00000000  00000000  0012b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00042e3c  00000000  00000000  00135c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b082a  00000000  00000000  00178ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002292de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c98c  00000000  00000000  00229334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800db74 	.word	0x0800db74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800db74 	.word	0x0800db74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <EncoderRead>:
    osDelay(2000);
}

void EncoderRead(VisualInterface* Interface, TIM_HandleTypeDef* EncoderTimerHandler)
{
	uint32_t EncActValue = EncoderTimerHandler->Instance->CNT;
 8001070:	680b      	ldr	r3, [r1, #0]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	Interface->SignedEncActValue = (int16_t) EncActValue;
 8001074:	8043      	strh	r3, [r0, #2]
}
 8001076:	4770      	bx	lr

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800107c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	2400      	movs	r4, #0
 8001080:	9404      	str	r4, [sp, #16]
 8001082:	9405      	str	r4, [sp, #20]
 8001084:	9406      	str	r4, [sp, #24]
 8001086:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001088:	4b23      	ldr	r3, [pc, #140]	; (8001118 <MX_GPIO_Init+0xa0>)
 800108a:	699a      	ldr	r2, [r3, #24]
 800108c:	f042 0220 	orr.w	r2, r2, #32
 8001090:	619a      	str	r2, [r3, #24]
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	f002 0220 	and.w	r2, r2, #32
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	f042 0204 	orr.w	r2, r2, #4
 80010a2:	619a      	str	r2, [r3, #24]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	f002 0204 	and.w	r2, r2, #4
 80010aa:	9202      	str	r2, [sp, #8]
 80010ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	699a      	ldr	r2, [r3, #24]
 80010b0:	f042 0208 	orr.w	r2, r2, #8
 80010b4:	619a      	str	r2, [r3, #24]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	9303      	str	r3, [sp, #12]
 80010be:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80010c0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001120 <MX_GPIO_Init+0xa8>
 80010c4:	4622      	mov	r2, r4
 80010c6:	2110      	movs	r1, #16
 80010c8:	4640      	mov	r0, r8
 80010ca:	f002 fa6e 	bl	80035aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010ce:	4d13      	ldr	r5, [pc, #76]	; (800111c <MX_GPIO_Init+0xa4>)
 80010d0:	4622      	mov	r2, r4
 80010d2:	2102      	movs	r1, #2
 80010d4:	4628      	mov	r0, r5
 80010d6:	f002 fa68 	bl	80035aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MAX6675_NSS_Pin */
  GPIO_InitStruct.Pin = MAX6675_NSS_Pin;
 80010da:	2310      	movs	r3, #16
 80010dc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2601      	movs	r6, #1
 80010e0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2702      	movs	r7, #2
 80010e6:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 80010e8:	eb0d 0103 	add.w	r1, sp, r3
 80010ec:	4640      	mov	r0, r8
 80010ee:	f002 f945 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80010f2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80010fa:	a904      	add	r1, sp, #16
 80010fc:	4628      	mov	r0, r5
 80010fe:	f002 f93d 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_PULS_Pin */
  GPIO_InitStruct.Pin = ENC_PULS_Pin;
 8001102:	2380      	movs	r3, #128	; 0x80
 8001104:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001108:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(ENC_PULS_GPIO_Port, &GPIO_InitStruct);
 800110a:	a904      	add	r1, sp, #16
 800110c:	4628      	mov	r0, r5
 800110e:	f002 f935 	bl	800337c <HAL_GPIO_Init>

}
 8001112:	b008      	add	sp, #32
 8001114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40010800 	.word	0x40010800

08001124 <MX_DMA_Init>:
{
 8001124:	b500      	push	{lr}
 8001126:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_DMA_Init+0x30>)
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	f042 0201 	orr.w	r2, r2, #1
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2105      	movs	r1, #5
 8001140:	200e      	movs	r0, #14
 8001142:	f001 ffb1 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001146:	200e      	movs	r0, #14
 8001148:	f001 ffe2 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 800114c:	b003      	add	sp, #12
 800114e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8001158:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800115a:	f009 fc2b 	bl	800a9b4 <MX_USB_DEVICE_Init>
	  if (CH1_DC<=0 && PWMRamp==1)
	  {
		  PWMRamp = 0;
	  }
	  */
	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <StartMainTask+0x20>)
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <StartMainTask+0x24>)
 8001164:	f000 fb94 	bl	8001890 <PIDUpdate>
 8001168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800116c:	6398      	str	r0, [r3, #56]	; 0x38
	  osDelay(500);
 800116e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001172:	f007 fedb 	bl	8008f2c <osDelay>
  for(;;)
 8001176:	e7f2      	b.n	800115e <StartMainTask+0x6>
 8001178:	20002358 	.word	0x20002358
 800117c:	20002428 	.word	0x20002428

08001180 <StartGraphicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGraphicTask */
void StartGraphicTask(void *argument)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b0a5      	sub	sp, #148	; 0x94
 8001184:	e076      	b.n	8001274 <StartGraphicTask+0xf4>

	  /* Lettura ingresso pulsante encoder rotativo */
	  GPIO_PinState EncPulsStatus = HAL_GPIO_ReadPin(ENC_PULS_GPIO_Port, ENC_PULS_Pin);
	  if (EncPulsStatus==GPIO_PIN_SET)
	  {
		  sprintf(ScreenString[1], "Enc.Sw. Rel.");
 8001186:	4d5b      	ldr	r5, [pc, #364]	; (80012f4 <StartGraphicTask+0x174>)
 8001188:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <StartGraphicTask+0x178>)
 800118a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800118c:	6028      	str	r0, [r5, #0]
 800118e:	6069      	str	r1, [r5, #4]
 8001190:	60aa      	str	r2, [r5, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	732b      	strb	r3, [r5, #12]
 8001196:	e081      	b.n	800129c <StartGraphicTask+0x11c>
	  }

	  /* Finecorsa encoder rotativo */
	  if (GraphicVar.SignedEncActValue<0)
	  {
		  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001198:	4b58      	ldr	r3, [pc, #352]	; (80012fc <StartGraphicTask+0x17c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2100      	movs	r1, #0
 800119e:	6259      	str	r1, [r3, #36]	; 0x24
 80011a0:	e082      	b.n	80012a8 <StartGraphicTask+0x128>
		  tempEncCount = EncActValue;
		  if (GraphicVar.SignedEncActValue>=0 && GraphicVar.SignedEncActValue<=MAXTEMPERATURE)
		  {
			  updateVisu = 1;
		  }
		  sprintf(ScreenString[0], "Enc.Ticks= %d", GraphicVar.SignedEncActValue);
 80011a2:	4957      	ldr	r1, [pc, #348]	; (8001300 <StartGraphicTask+0x180>)
 80011a4:	4857      	ldr	r0, [pc, #348]	; (8001304 <StartGraphicTask+0x184>)
 80011a6:	f00a fad5 	bl	800b754 <siprintf>
	  }

	  /* Aggiornamento stringa pulsante encoder */
	  if (tempEncPuls != EncPulsStatus)
 80011aa:	4b57      	ldr	r3, [pc, #348]	; (8001308 <StartGraphicTask+0x188>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	42a3      	cmp	r3, r4
 80011b0:	d004      	beq.n	80011bc <StartGraphicTask+0x3c>
	  {
		  tempEncPuls = EncPulsStatus;
 80011b2:	4b55      	ldr	r3, [pc, #340]	; (8001308 <StartGraphicTask+0x188>)
 80011b4:	701c      	strb	r4, [r3, #0]
		  updateVisu = 1;
 80011b6:	4b55      	ldr	r3, [pc, #340]	; (800130c <StartGraphicTask+0x18c>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
	  }

	  /* Aggiornamento stringa temperatura */
	  	  if (tempActTemperature != FilteredTemperature)
 80011bc:	4b54      	ldr	r3, [pc, #336]	; (8001310 <StartGraphicTask+0x190>)
 80011be:	681c      	ldr	r4, [r3, #0]
 80011c0:	4621      	mov	r1, r4
 80011c2:	4b54      	ldr	r3, [pc, #336]	; (8001314 <StartGraphicTask+0x194>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f7ff ff01 	bl	8000fcc <__aeabi_fcmpeq>
 80011ca:	2800      	cmp	r0, #0
 80011cc:	f000 8083 	beq.w	80012d6 <StartGraphicTask+0x156>
	  		  tempActTemperature = FilteredTemperature;
	  		  sprintf(ScreenString[2], "Temp.= %3.1f", FilteredTemperature);
	  		  updateVisu = 1;
	  	  }

	  if (updateVisu==1)
 80011d0:	4b4e      	ldr	r3, [pc, #312]	; (800130c <StartGraphicTask+0x18c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d128      	bne.n	800122a <StartGraphicTask+0xaa>
	  {
		  updateVisu = 0;
 80011d8:	4b4c      	ldr	r3, [pc, #304]	; (800130c <StartGraphicTask+0x18c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	701a      	strb	r2, [r3, #0]
		  u8g2_ClearBuffer(&u8g2);
 80011de:	4c4e      	ldr	r4, [pc, #312]	; (8001318 <StartGraphicTask+0x198>)
 80011e0:	4620      	mov	r0, r4
 80011e2:	f000 ff70 	bl	80020c6 <u8g2_ClearBuffer>
		  tempHeigth = u8g2_GetFontBBXHeight(&u8g2);
 80011e6:	4620      	mov	r0, r4
 80011e8:	f001 f883 	bl	80022f2 <u8g2_GetFontBBXHeight>
 80011ec:	b2c2      	uxtb	r2, r0
 80011ee:	4e4b      	ldr	r6, [pc, #300]	; (800131c <StartGraphicTask+0x19c>)
 80011f0:	7032      	strb	r2, [r6, #0]
		  u8g2_DrawStr(&u8g2, 1, tempHeigth, ScreenString[0]);
 80011f2:	4d44      	ldr	r5, [pc, #272]	; (8001304 <StartGraphicTask+0x184>)
 80011f4:	462b      	mov	r3, r5
 80011f6:	2101      	movs	r1, #1
 80011f8:	4620      	mov	r0, r4
 80011fa:	f001 fa8b 	bl	8002714 <u8g2_DrawStr>
		  u8g2_DrawStr(&u8g2, 1, tempHeigth*2 + LINESPACE, ScreenString[1]);
 80011fe:	7832      	ldrb	r2, [r6, #0]
 8001200:	3201      	adds	r2, #1
 8001202:	0052      	lsls	r2, r2, #1
 8001204:	f105 0332 	add.w	r3, r5, #50	; 0x32
 8001208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800120c:	2101      	movs	r1, #1
 800120e:	4620      	mov	r0, r4
 8001210:	f001 fa80 	bl	8002714 <u8g2_DrawStr>
		  u8g2_DrawStr(&u8g2, 1, tempHeigth*3 + LINESPACE, ScreenString[2]);
 8001214:	7832      	ldrb	r2, [r6, #0]
 8001216:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800121a:	3202      	adds	r2, #2
 800121c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	2101      	movs	r1, #1
 8001224:	4620      	mov	r0, r4
 8001226:	f001 fa75 	bl	8002714 <u8g2_DrawStr>
	  }

	  u8g2_SendBuffer(&u8g2);
 800122a:	483b      	ldr	r0, [pc, #236]	; (8001318 <StartGraphicTask+0x198>)
 800122c:	f000 ff58 	bl	80020e0 <u8g2_SendBuffer>
			  TempPID.Setpoint, FilteredTemperature, TIM2->CCR2);
	  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	   */

		sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
				  TempPID.PID_P, TempPID.PID_I, TempPID.PID_D);
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <StartGraphicTask+0x1a0>)
 8001232:	68de      	ldr	r6, [r3, #12]
 8001234:	691f      	ldr	r7, [r3, #16]
		sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 8001236:	6898      	ldr	r0, [r3, #8]
 8001238:	f7ff f8f6 	bl	8000428 <__aeabi_f2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	4638      	mov	r0, r7
 8001242:	f7ff f8f1 	bl	8000428 <__aeabi_f2d>
 8001246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff f8ec 	bl	8000428 <__aeabi_f2d>
 8001250:	e9cd 0100 	strd	r0, r1, [sp]
 8001254:	4622      	mov	r2, r4
 8001256:	462b      	mov	r3, r5
 8001258:	4932      	ldr	r1, [pc, #200]	; (8001324 <StartGraphicTask+0x1a4>)
 800125a:	a804      	add	r0, sp, #16
 800125c:	f00a fa7a 	bl	800b754 <siprintf>
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001260:	a804      	add	r0, sp, #16
 8001262:	f7fe ff75 	bl	8000150 <strlen>
 8001266:	b281      	uxth	r1, r0
 8001268:	a804      	add	r0, sp, #16
 800126a:	f009 fbf3 	bl	800aa54 <CDC_Transmit_FS>
		/*
		sprintf((uint8_t *) logBuf, "Actual Temp: %.1f, Actual PWM: %d, PID_D: %.1f\r\n",
				  FilteredTemperature, TIM2->CCR2, TempPID.PID_D);
		CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	  */
	  osDelay(25);
 800126e:	2019      	movs	r0, #25
 8001270:	f007 fe5c 	bl	8008f2c <osDelay>
	  EncoderRead(&GraphicVar, &htim3);
 8001274:	4921      	ldr	r1, [pc, #132]	; (80012fc <StartGraphicTask+0x17c>)
 8001276:	482c      	ldr	r0, [pc, #176]	; (8001328 <StartGraphicTask+0x1a8>)
 8001278:	f7ff fefa 	bl	8001070 <EncoderRead>
	  GPIO_PinState EncPulsStatus = HAL_GPIO_ReadPin(ENC_PULS_GPIO_Port, ENC_PULS_Pin);
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	482b      	ldr	r0, [pc, #172]	; (800132c <StartGraphicTask+0x1ac>)
 8001280:	f002 f98c 	bl	800359c <HAL_GPIO_ReadPin>
 8001284:	4604      	mov	r4, r0
	  if (EncPulsStatus==GPIO_PIN_SET)
 8001286:	2801      	cmp	r0, #1
 8001288:	f43f af7d 	beq.w	8001186 <StartGraphicTask+0x6>
		  sprintf(ScreenString[1], "Enc.Sw. Push.");
 800128c:	4d19      	ldr	r5, [pc, #100]	; (80012f4 <StartGraphicTask+0x174>)
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <StartGraphicTask+0x1b0>)
 8001290:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001292:	6028      	str	r0, [r5, #0]
 8001294:	6069      	str	r1, [r5, #4]
 8001296:	60aa      	str	r2, [r5, #8]
 8001298:	881b      	ldrh	r3, [r3, #0]
 800129a:	81ab      	strh	r3, [r5, #12]
	  if (GraphicVar.SignedEncActValue<0)
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <StartGraphicTask+0x1a8>)
 800129e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	f6ff af78 	blt.w	8001198 <StartGraphicTask+0x18>
	  if (GraphicVar.SignedEncActValue>MAXTEMPERATURE)
 80012a8:	2af0      	cmp	r2, #240	; 0xf0
 80012aa:	dd03      	ble.n	80012b4 <StartGraphicTask+0x134>
		  __HAL_TIM_SET_COUNTER(&htim3, MAXTEMPERATURE);
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <StartGraphicTask+0x17c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	21f0      	movs	r1, #240	; 0xf0
 80012b2:	6259      	str	r1, [r3, #36]	; 0x24
	  if (tempEncCount != EncActValue)
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <StartGraphicTask+0x1b4>)
 80012b6:	8819      	ldrh	r1, [r3, #0]
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <StartGraphicTask+0x1b8>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4299      	cmp	r1, r3
 80012be:	f43f af74 	beq.w	80011aa <StartGraphicTask+0x2a>
		  tempEncCount = EncActValue;
 80012c2:	491c      	ldr	r1, [pc, #112]	; (8001334 <StartGraphicTask+0x1b4>)
 80012c4:	800b      	strh	r3, [r1, #0]
		  if (GraphicVar.SignedEncActValue>=0 && GraphicVar.SignedEncActValue<=MAXTEMPERATURE)
 80012c6:	b293      	uxth	r3, r2
 80012c8:	2bf0      	cmp	r3, #240	; 0xf0
 80012ca:	f63f af6a 	bhi.w	80011a2 <StartGraphicTask+0x22>
			  updateVisu = 1;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <StartGraphicTask+0x18c>)
 80012d0:	2101      	movs	r1, #1
 80012d2:	7019      	strb	r1, [r3, #0]
 80012d4:	e765      	b.n	80011a2 <StartGraphicTask+0x22>
	  		  tempActTemperature = FilteredTemperature;
 80012d6:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <StartGraphicTask+0x194>)
 80012d8:	601c      	str	r4, [r3, #0]
	  		  sprintf(ScreenString[2], "Temp.= %3.1f", FilteredTemperature);
 80012da:	4620      	mov	r0, r4
 80012dc:	f7ff f8a4 	bl	8000428 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4915      	ldr	r1, [pc, #84]	; (800133c <StartGraphicTask+0x1bc>)
 80012e6:	4816      	ldr	r0, [pc, #88]	; (8001340 <StartGraphicTask+0x1c0>)
 80012e8:	f00a fa34 	bl	800b754 <siprintf>
	  		  updateVisu = 1;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <StartGraphicTask+0x18c>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e76d      	b.n	80011d0 <StartGraphicTask+0x50>
 80012f4:	2000258e 	.word	0x2000258e
 80012f8:	0800db90 	.word	0x0800db90
 80012fc:	20002734 	.word	0x20002734
 8001300:	0800dbb0 	.word	0x0800dbb0
 8001304:	2000255c 	.word	0x2000255c
 8001308:	20000006 	.word	0x20000006
 800130c:	20002514 	.word	0x20002514
 8001310:	20002358 	.word	0x20002358
 8001314:	20000000 	.word	0x20000000
 8001318:	200022d0 	.word	0x200022d0
 800131c:	20000376 	.word	0x20000376
 8001320:	20002428 	.word	0x20002428
 8001324:	0800dbd0 	.word	0x0800dbd0
 8001328:	20002558 	.word	0x20002558
 800132c:	40010c00 	.word	0x40010c00
 8001330:	0800dba0 	.word	0x0800dba0
 8001334:	20000004 	.word	0x20000004
 8001338:	20000374 	.word	0x20000374
 800133c:	0800dbc0 	.word	0x0800dbc0
 8001340:	200025c0 	.word	0x200025c0

08001344 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4604      	mov	r4, r0
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM4) {
 8001348:	6802      	ldr	r2, [r0, #0]
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800134c:	429a      	cmp	r2, r3
 800134e:	d004      	beq.n	800135a <HAL_TIM_PeriodElapsedCallback+0x16>
		//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		Max6675_Read_TempValue(&ActTemperature);
		FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001354:	429a      	cmp	r2, r3
 8001356:	d00b      	beq.n	8001370 <HAL_TIM_PeriodElapsedCallback+0x2c>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001358:	bd38      	pop	{r3, r4, r5, pc}
		Max6675_Read_TempValue(&ActTemperature);
 800135a:	4d09      	ldr	r5, [pc, #36]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800135c:	4628      	mov	r0, r5
 800135e:	f001 fe2b 	bl	8002fb8 <Max6675_Read_TempValue>
		FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 8001362:	6829      	ldr	r1, [r5, #0]
 8001364:	4807      	ldr	r0, [pc, #28]	; (8001384 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001366:	f000 fa4f 	bl	8001808 <LPFilterUpdate>
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800136c:	6018      	str	r0, [r3, #0]
 800136e:	e7ef      	b.n	8001350 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001370:	f001 fe62 	bl	8003038 <HAL_IncTick>
}
 8001374:	e7f0      	b.n	8001358 <HAL_TIM_PeriodElapsedCallback+0x14>
 8001376:	bf00      	nop
 8001378:	40000800 	.word	0x40000800
 800137c:	40012c00 	.word	0x40012c00
 8001380:	200027c8 	.word	0x200027c8
 8001384:	200023b4 	.word	0x200023b4
 8001388:	20002358 	.word	0x20002358

0800138c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138e:	e7fe      	b.n	800138e <Error_Handler+0x2>

08001390 <MX_SPI1_Init>:
{
 8001390:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8001392:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_SPI1_Init+0x40>)
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SPI1_Init+0x44>)
 8001396:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001398:	f44f 7382 	mov.w	r3, #260	; 0x104
 800139c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800139e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a2:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80013a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013a8:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ae:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b4:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013b6:	2210      	movs	r2, #16
 80013b8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ba:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013be:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c0:	230a      	movs	r3, #10
 80013c2:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013c4:	f004 ff36 	bl	8006234 <HAL_SPI_Init>
 80013c8:	b900      	cbnz	r0, 80013cc <MX_SPI1_Init+0x3c>
}
 80013ca:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013cc:	f7ff ffde 	bl	800138c <Error_Handler>
 80013d0:	200023cc 	.word	0x200023cc
 80013d4:	40013000 	.word	0x40013000

080013d8 <MX_I2C1_Init>:
{
 80013d8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80013da:	480a      	ldr	r0, [pc, #40]	; (8001404 <MX_I2C1_Init+0x2c>)
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <MX_I2C1_Init+0x30>)
 80013de:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_I2C1_Init+0x34>)
 80013e2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	2300      	movs	r3, #0
 80013e6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f2:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f4:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f8:	f002 fbfe 	bl	8003bf8 <HAL_I2C_Init>
 80013fc:	b900      	cbnz	r0, 8001400 <MX_I2C1_Init+0x28>
}
 80013fe:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001400:	f7ff ffc4 	bl	800138c <Error_Handler>
 8001404:	200024c0 	.word	0x200024c0
 8001408:	40005400 	.word	0x40005400
 800140c:	00061a80 	.word	0x00061a80

08001410 <MX_USART2_UART_Init>:
{
 8001410:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 8001412:	480a      	ldr	r0, [pc, #40]	; (800143c <MX_USART2_UART_Init+0x2c>)
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_USART2_UART_Init+0x30>)
 8001416:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001418:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800141c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	2300      	movs	r3, #0
 8001420:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001422:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001424:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001426:	220c      	movs	r2, #12
 8001428:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800142c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800142e:	f005 fef3 	bl	8007218 <HAL_UART_Init>
 8001432:	b900      	cbnz	r0, 8001436 <MX_USART2_UART_Init+0x26>
}
 8001434:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001436:	f7ff ffa9 	bl	800138c <Error_Handler>
 800143a:	bf00      	nop
 800143c:	20002518 	.word	0x20002518
 8001440:	40004400 	.word	0x40004400

08001444 <MX_TIM2_Init>:
{
 8001444:	b500      	push	{lr}
 8001446:	b08f      	sub	sp, #60	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001448:	2300      	movs	r3, #0
 800144a:	930a      	str	r3, [sp, #40]	; 0x28
 800144c:	930b      	str	r3, [sp, #44]	; 0x2c
 800144e:	930c      	str	r3, [sp, #48]	; 0x30
 8001450:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001452:	9308      	str	r3, [sp, #32]
 8001454:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	9303      	str	r3, [sp, #12]
 800145c:	9304      	str	r3, [sp, #16]
 800145e:	9305      	str	r3, [sp, #20]
 8001460:	9306      	str	r3, [sp, #24]
 8001462:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <MX_TIM2_Init+0xa0>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146a:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 0;
 800146c:	6043      	str	r3, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 1024-1;
 8001470:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001474:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	f005 fba8 	bl	8006bd0 <HAL_TIM_Base_Init>
 8001480:	bb30      	cbnz	r0, 80014d0 <MX_TIM2_Init+0x8c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001486:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001488:	a90a      	add	r1, sp, #40	; 0x28
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_TIM2_Init+0xa0>)
 800148c:	f005 fcf5 	bl	8006e7a <HAL_TIM_ConfigClockSource>
 8001490:	bb00      	cbnz	r0, 80014d4 <MX_TIM2_Init+0x90>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <MX_TIM2_Init+0xa0>)
 8001494:	f005 fbc8 	bl	8006c28 <HAL_TIM_PWM_Init>
 8001498:	b9f0      	cbnz	r0, 80014d8 <MX_TIM2_Init+0x94>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a0:	a908      	add	r1, sp, #32
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <MX_TIM2_Init+0xa0>)
 80014a4:	f005 fe3a 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	b9c0      	cbnz	r0, 80014dc <MX_TIM2_Init+0x98>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014aa:	2360      	movs	r3, #96	; 0x60
 80014ac:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b2:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b4:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b6:	2204      	movs	r2, #4
 80014b8:	eb0d 0102 	add.w	r1, sp, r2
 80014bc:	4809      	ldr	r0, [pc, #36]	; (80014e4 <MX_TIM2_Init+0xa0>)
 80014be:	f005 fc69 	bl	8006d94 <HAL_TIM_PWM_ConfigChannel>
 80014c2:	b968      	cbnz	r0, 80014e0 <MX_TIM2_Init+0x9c>
  HAL_TIM_MspPostInit(&htim2);
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM2_Init+0xa0>)
 80014c6:	f000 fc19 	bl	8001cfc <HAL_TIM_MspPostInit>
}
 80014ca:	b00f      	add	sp, #60	; 0x3c
 80014cc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014d0:	f7ff ff5c 	bl	800138c <Error_Handler>
    Error_Handler();
 80014d4:	f7ff ff5a 	bl	800138c <Error_Handler>
    Error_Handler();
 80014d8:	f7ff ff58 	bl	800138c <Error_Handler>
    Error_Handler();
 80014dc:	f7ff ff56 	bl	800138c <Error_Handler>
    Error_Handler();
 80014e0:	f7ff ff54 	bl	800138c <Error_Handler>
 80014e4:	200026ec 	.word	0x200026ec

080014e8 <MX_I2C2_Init>:
{
 80014e8:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 80014ea:	480a      	ldr	r0, [pc, #40]	; (8001514 <MX_I2C2_Init+0x2c>)
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C2_Init+0x30>)
 80014ee:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <MX_I2C2_Init+0x34>)
 80014f2:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	2300      	movs	r3, #0
 80014f6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014f8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001502:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001504:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001506:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001508:	f002 fb76 	bl	8003bf8 <HAL_I2C_Init>
 800150c:	b900      	cbnz	r0, 8001510 <MX_I2C2_Init+0x28>
}
 800150e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001510:	f7ff ff3c 	bl	800138c <Error_Handler>
 8001514:	2000246c 	.word	0x2000246c
 8001518:	40005800 	.word	0x40005800
 800151c:	00061a80 	.word	0x00061a80

08001520 <MX_TIM3_Init>:
{
 8001520:	b500      	push	{lr}
 8001522:	b08d      	sub	sp, #52	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	2300      	movs	r3, #0
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	9302      	str	r3, [sp, #8]
  htim3.Instance = TIM3;
 800152a:	4815      	ldr	r0, [pc, #84]	; (8001580 <MX_TIM3_Init+0x60>)
 800152c:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MX_TIM3_Init+0x64>)
 800152e:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 8001530:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001532:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8001534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001538:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800153c:	2280      	movs	r2, #128	; 0x80
 800153e:	6182      	str	r2, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001540:	2203      	movs	r2, #3
 8001542:	9203      	str	r2, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001544:	9304      	str	r3, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001546:	2101      	movs	r1, #1
 8001548:	9105      	str	r1, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800154a:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 10;
 800154c:	220a      	movs	r2, #10
 800154e:	9207      	str	r2, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001550:	9308      	str	r3, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001552:	9109      	str	r1, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001554:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001556:	920b      	str	r2, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001558:	a903      	add	r1, sp, #12
 800155a:	f005 fb91 	bl	8006c80 <HAL_TIM_Encoder_Init>
 800155e:	b950      	cbnz	r0, 8001576 <MX_TIM3_Init+0x56>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001566:	a901      	add	r1, sp, #4
 8001568:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_TIM3_Init+0x60>)
 800156a:	f005 fdd7 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 800156e:	b920      	cbnz	r0, 800157a <MX_TIM3_Init+0x5a>
}
 8001570:	b00d      	add	sp, #52	; 0x34
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001576:	f7ff ff09 	bl	800138c <Error_Handler>
    Error_Handler();
 800157a:	f7ff ff07 	bl	800138c <Error_Handler>
 800157e:	bf00      	nop
 8001580:	20002734 	.word	0x20002734
 8001584:	40000400 	.word	0x40000400

08001588 <MX_SPI2_Init>:
{
 8001588:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <MX_SPI2_Init+0x3c>)
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI2_Init+0x40>)
 800158e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001590:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001594:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	2300      	movs	r3, #0
 8001598:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800159a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800159e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a0:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a2:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015aa:	2210      	movs	r2, #16
 80015ac:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ae:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015b0:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015b4:	230a      	movs	r3, #10
 80015b6:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015b8:	f004 fe3c 	bl	8006234 <HAL_SPI_Init>
 80015bc:	b900      	cbnz	r0, 80015c0 <MX_SPI2_Init+0x38>
}
 80015be:	bd08      	pop	{r3, pc}
    Error_Handler();
 80015c0:	f7ff fee4 	bl	800138c <Error_Handler>
 80015c4:	2000235c 	.word	0x2000235c
 80015c8:	40003800 	.word	0x40003800

080015cc <MX_TIM4_Init>:
{
 80015cc:	b500      	push	{lr}
 80015ce:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d0:	2300      	movs	r3, #0
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	9303      	str	r3, [sp, #12]
 80015d6:	9304      	str	r3, [sp, #16]
 80015d8:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	9301      	str	r3, [sp, #4]
  htim4.Instance = TIM4;
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <MX_TIM4_Init+0x64>)
 80015e0:	4a14      	ldr	r2, [pc, #80]	; (8001634 <MX_TIM4_Init+0x68>)
 80015e2:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 1000-1;
 80015e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015e8:	6042      	str	r2, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 18000-1;
 80015ec:	f244 624f 	movw	r2, #17999	; 0x464f
 80015f0:	60c2      	str	r2, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f2:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015f8:	f005 faea 	bl	8006bd0 <HAL_TIM_Base_Init>
 80015fc:	b990      	cbnz	r0, 8001624 <MX_TIM4_Init+0x58>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001604:	a902      	add	r1, sp, #8
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <MX_TIM4_Init+0x64>)
 8001608:	f005 fc37 	bl	8006e7a <HAL_TIM_ConfigClockSource>
 800160c:	b960      	cbnz	r0, 8001628 <MX_TIM4_Init+0x5c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001612:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001614:	4669      	mov	r1, sp
 8001616:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM4_Init+0x64>)
 8001618:	f005 fd80 	bl	800711c <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	b930      	cbnz	r0, 800162c <MX_TIM4_Init+0x60>
}
 800161e:	b007      	add	sp, #28
 8001620:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001624:	f7ff feb2 	bl	800138c <Error_Handler>
    Error_Handler();
 8001628:	f7ff feb0 	bl	800138c <Error_Handler>
    Error_Handler();
 800162c:	f7ff feae 	bl	800138c <Error_Handler>
 8001630:	200026a4 	.word	0x200026a4
 8001634:	40000800 	.word	0x40000800

08001638 <SystemClock_Config>:
{
 8001638:	b500      	push	{lr}
 800163a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163c:	2300      	movs	r3, #0
 800163e:	930d      	str	r3, [sp, #52]	; 0x34
 8001640:	930f      	str	r3, [sp, #60]	; 0x3c
 8001642:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	9305      	str	r3, [sp, #20]
 8001646:	9306      	str	r3, [sp, #24]
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	9308      	str	r3, [sp, #32]
 800164c:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	9302      	str	r3, [sp, #8]
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001656:	2101      	movs	r1, #1
 8001658:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800165a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800165e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001660:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001662:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001664:	2302      	movs	r3, #2
 8001666:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001668:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800166a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800166e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	a80a      	add	r0, sp, #40	; 0x28
 8001672:	f004 f969 	bl	8005948 <HAL_RCC_OscConfig>
 8001676:	b9c0      	cbnz	r0, 80016aa <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001678:	230f      	movs	r3, #15
 800167a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167c:	2102      	movs	r1, #2
 800167e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001680:	2300      	movs	r3, #0
 8001682:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001684:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001688:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800168c:	a805      	add	r0, sp, #20
 800168e:	f004 fb99 	bl	8005dc4 <HAL_RCC_ClockConfig>
 8001692:	b960      	cbnz	r0, 80016ae <SystemClock_Config+0x76>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001694:	2310      	movs	r3, #16
 8001696:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001698:	2300      	movs	r3, #0
 800169a:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800169c:	a801      	add	r0, sp, #4
 800169e:	f004 fc8b 	bl	8005fb8 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	b930      	cbnz	r0, 80016b2 <SystemClock_Config+0x7a>
}
 80016a4:	b015      	add	sp, #84	; 0x54
 80016a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80016aa:	f7ff fe6f 	bl	800138c <Error_Handler>
    Error_Handler();
 80016ae:	f7ff fe6d 	bl	800138c <Error_Handler>
    Error_Handler();
 80016b2:	f7ff fe6b 	bl	800138c <Error_Handler>
	...

080016b8 <main>:
{
 80016b8:	b500      	push	{lr}
 80016ba:	b087      	sub	sp, #28
  HAL_Init();
 80016bc:	f001 fcaa 	bl	8003014 <HAL_Init>
  SystemClock_Config();
 80016c0:	f7ff ffba 	bl	8001638 <SystemClock_Config>
  MX_GPIO_Init();
 80016c4:	f7ff fcd8 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 80016c8:	f7ff fd2c 	bl	8001124 <MX_DMA_Init>
  MX_SPI1_Init();
 80016cc:	f7ff fe60 	bl	8001390 <MX_SPI1_Init>
  MX_I2C1_Init();
 80016d0:	f7ff fe82 	bl	80013d8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016d4:	f7ff fe9c 	bl	8001410 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80016d8:	f7ff feb4 	bl	8001444 <MX_TIM2_Init>
  MX_I2C2_Init();
 80016dc:	f7ff ff04 	bl	80014e8 <MX_I2C2_Init>
  MX_TIM3_Init();
 80016e0:	f7ff ff1e 	bl	8001520 <MX_TIM3_Init>
  MX_SPI2_Init();
 80016e4:	f7ff ff50 	bl	8001588 <MX_SPI2_Init>
  MX_TIM4_Init();
 80016e8:	f7ff ff70 	bl	80015cc <MX_TIM4_Init>
  HAL_TIM_Base_Start(&htim2);
 80016ec:	4c2a      	ldr	r4, [pc, #168]	; (8001798 <main+0xe0>)
 80016ee:	4620      	mov	r0, r4
 80016f0:	f005 f910 	bl	8006914 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80016f4:	2104      	movs	r1, #4
 80016f6:	4620      	mov	r0, r4
 80016f8:	f005 fc3e 	bl	8006f78 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80016fc:	213c      	movs	r1, #60	; 0x3c
 80016fe:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0xe4>)
 8001700:	f005 fca8 	bl	8007054 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001704:	4826      	ldr	r0, [pc, #152]	; (80017a0 <main+0xe8>)
 8001706:	f005 f933 	bl	8006970 <HAL_TIM_Base_Start_IT>
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 800170a:	4c26      	ldr	r4, [pc, #152]	; (80017a4 <main+0xec>)
 800170c:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <main+0xf0>)
 800170e:	4a27      	ldr	r2, [pc, #156]	; (80017ac <main+0xf4>)
 8001710:	4927      	ldr	r1, [pc, #156]	; (80017b0 <main+0xf8>)
 8001712:	4620      	mov	r0, r4
 8001714:	f000 fd3a 	bl	800218c <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 8001718:	4620      	mov	r0, r4
 800171a:	f001 fbe5 	bl	8002ee8 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 800171e:	2100      	movs	r1, #0
 8001720:	4620      	mov	r0, r4
 8001722:	f001 fbe8 	bl	8002ef6 <u8x8_SetPowerSave>
  u8g2_ClearDisplay(&u8g2);
 8001726:	4620      	mov	r0, r4
 8001728:	f000 fd1b 	bl	8002162 <u8g2_ClearDisplay>
  u8g2_SetFont(&u8g2, u8g2_font_ncenB10_tr);
 800172c:	4921      	ldr	r1, [pc, #132]	; (80017b4 <main+0xfc>)
 800172e:	4620      	mov	r0, r4
 8001730:	f001 f82e 	bl	8002790 <u8g2_SetFont>
  LPFilterInit(&TempFilter);
 8001734:	4820      	ldr	r0, [pc, #128]	; (80017b8 <main+0x100>)
 8001736:	f000 f859 	bl	80017ec <LPFilterInit>
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 200, 60, 100, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 800173a:	4c20      	ldr	r4, [pc, #128]	; (80017bc <main+0x104>)
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <main+0x108>)
 800173e:	9305      	str	r3, [sp, #20]
 8001740:	f04f 4344 	mov.w	r3, #3288334336	; 0xc4000000
 8001744:	9304      	str	r3, [sp, #16]
 8001746:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800174a:	9303      	str	r3, [sp, #12]
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <main+0x10c>)
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <main+0x110>)
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <main+0x114>)
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2300      	movs	r3, #0
 800175a:	f04f 4289 	mov.w	r2, #1149239296	; 0x44800000
 800175e:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001762:	4620      	mov	r0, r4
 8001764:	f000 f87c 	bl	8001860 <PIDInit>
  PIDNewSetpoint(&TempPID, 120);
 8001768:	4919      	ldr	r1, [pc, #100]	; (80017d0 <main+0x118>)
 800176a:	4620      	mov	r0, r4
 800176c:	f000 f88e 	bl	800188c <PIDNewSetpoint>
  osKernelInitialize();
 8001770:	f007 fb1e 	bl	8008db0 <osKernelInitialize>
  MainTaskHandle = osThreadNew(StartMainTask, NULL, &MainTask_attributes);
 8001774:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <main+0x11c>)
 8001776:	2100      	movs	r1, #0
 8001778:	4817      	ldr	r0, [pc, #92]	; (80017d8 <main+0x120>)
 800177a:	f007 fb61 	bl	8008e40 <osThreadNew>
 800177e:	4b17      	ldr	r3, [pc, #92]	; (80017dc <main+0x124>)
 8001780:	6018      	str	r0, [r3, #0]
  GraphicTaskHandle = osThreadNew(StartGraphicTask, NULL, &GraphicTask_attributes);
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <main+0x128>)
 8001784:	2100      	movs	r1, #0
 8001786:	4817      	ldr	r0, [pc, #92]	; (80017e4 <main+0x12c>)
 8001788:	f007 fb5a 	bl	8008e40 <osThreadNew>
 800178c:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <main+0x130>)
 800178e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001790:	f007 fb30 	bl	8008df4 <osKernelStart>
  while (1)
 8001794:	e7fe      	b.n	8001794 <main+0xdc>
 8001796:	bf00      	nop
 8001798:	200026ec 	.word	0x200026ec
 800179c:	20002734 	.word	0x20002734
 80017a0:	200026a4 	.word	0x200026a4
 80017a4:	200022d0 	.word	0x200022d0
 80017a8:	08002011 	.word	0x08002011
 80017ac:	08001f9d 	.word	0x08001f9d
 80017b0:	0800e2d4 	.word	0x0800e2d4
 80017b4:	0800dc80 	.word	0x0800dc80
 80017b8:	200023b4 	.word	0x200023b4
 80017bc:	20002428 	.word	0x20002428
 80017c0:	3ca3d70a 	.word	0x3ca3d70a
 80017c4:	42c80000 	.word	0x42c80000
 80017c8:	42700000 	.word	0x42700000
 80017cc:	43480000 	.word	0x43480000
 80017d0:	42f00000 	.word	0x42f00000
 80017d4:	0800dc34 	.word	0x0800dc34
 80017d8:	08001159 	.word	0x08001159
 80017dc:	20002658 	.word	0x20002658
 80017e0:	0800dc10 	.word	0x0800dc10
 80017e4:	08001181 	.word	0x08001181
 80017e8:	20002424 	.word	0x20002424

080017ec <LPFilterInit>:

// ------------------------- Functions  ----------------------
void LPFilterInit(LPFilter *filter)
{
	/* Clear buffer */
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	e004      	b.n	80017fa <LPFilterInit+0xe>
	{
		filter->buffer[n] = 0;
 80017f0:	2200      	movs	r2, #0
 80017f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 80017f6:	3301      	adds	r3, #1
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	ddf8      	ble.n	80017f0 <LPFilterInit+0x4>
	}

	/* Reset index */
	filter->bufferIndex = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	7403      	strb	r3, [r0, #16]

	/* Reset Output value */
	filter->FilteredValue = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	6143      	str	r3, [r0, #20]
}
 8001806:	4770      	bx	lr

08001808 <LPFilterUpdate>:

float LPFilterUpdate(LPFilter *filter, float InValue)
{
 8001808:	b570      	push	{r4, r5, r6, lr}
 800180a:	4605      	mov	r5, r0
	/* Store last input value into the buffer */
	filter->buffer[filter->bufferIndex] = InValue;
 800180c:	7c03      	ldrb	r3, [r0, #16]
 800180e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]

	/* Update buffer index */
	filter->bufferIndex++;
 8001812:	3301      	adds	r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	7403      	strb	r3, [r0, #16]

	if (filter->bufferIndex>=FILTER_LENGTH)
 8001818:	2b03      	cmp	r3, #3
 800181a:	d901      	bls.n	8001820 <LPFilterUpdate+0x18>
	{
		filter->bufferIndex = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	7403      	strb	r3, [r0, #16]
	}

	/* Compute output */
	filter->FilteredValue = 0;
 8001820:	2300      	movs	r3, #0
 8001822:	616b      	str	r3, [r5, #20]

	uint8_t ConvolvIndex = filter->bufferIndex;
 8001824:	7c2e      	ldrb	r6, [r5, #16]

	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 8001826:	2400      	movs	r4, #0
 8001828:	e00e      	b.n	8001848 <LPFilterUpdate+0x40>
		{
			ConvolvIndex--;
		}
		else
		{
			ConvolvIndex = FILTER_LENGTH - 1;
 800182a:	2603      	movs	r6, #3
		}
		/* Do the Convolution */
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 800182c:	f855 1026 	ldr.w	r1, [r5, r6, lsl #2]
 8001830:	4b0a      	ldr	r3, [pc, #40]	; (800185c <LPFilterUpdate+0x54>)
 8001832:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001836:	f7ff fa35 	bl	8000ca4 <__aeabi_fmul>
 800183a:	4601      	mov	r1, r0
 800183c:	6968      	ldr	r0, [r5, #20]
 800183e:	f7ff f929 	bl	8000a94 <__addsf3>
 8001842:	6168      	str	r0, [r5, #20]
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 8001844:	3401      	adds	r4, #1
 8001846:	b264      	sxtb	r4, r4
 8001848:	2c03      	cmp	r4, #3
 800184a:	dc04      	bgt.n	8001856 <LPFilterUpdate+0x4e>
		if (ConvolvIndex>0)
 800184c:	2e00      	cmp	r6, #0
 800184e:	d0ec      	beq.n	800182a <LPFilterUpdate+0x22>
			ConvolvIndex--;
 8001850:	3e01      	subs	r6, #1
 8001852:	b2f6      	uxtb	r6, r6
 8001854:	e7ea      	b.n	800182c <LPFilterUpdate+0x24>
	}

	/* Return the actual filtered value output */

	return filter->FilteredValue;
}
 8001856:	6968      	ldr	r0, [r5, #20]
 8001858:	bd70      	pop	{r4, r5, r6, pc}
 800185a:	bf00      	nop
 800185c:	0800dc58 	.word	0x0800dc58

08001860 <PIDInit>:

void PIDInit(PID *PID, float SampleTime, float MaxOuputValue, float MinOutputVal, float Kp, float Ki, float Kd, float PID_I_Max, float PID_I_Min, float PID_D_Tau)
{
	/* Assign the value to the struct variable */
	PID->SampleTime = SampleTime;
 8001860:	6341      	str	r1, [r0, #52]	; 0x34

	PID->MaxOutputVal = MaxOuputValue;
 8001862:	6242      	str	r2, [r0, #36]	; 0x24
	PID->MinOutputVal = MinOutputVal;
 8001864:	6283      	str	r3, [r0, #40]	; 0x28

	PID->Kp = Kp;
 8001866:	9b00      	ldr	r3, [sp, #0]
 8001868:	6143      	str	r3, [r0, #20]
	PID->Ki = Ki;
 800186a:	9b01      	ldr	r3, [sp, #4]
 800186c:	6183      	str	r3, [r0, #24]
	PID->Kd = Kd;
 800186e:	9b02      	ldr	r3, [sp, #8]
 8001870:	61c3      	str	r3, [r0, #28]

	PID->PID_I_Max = PID_I_Max;
 8001872:	9b03      	ldr	r3, [sp, #12]
 8001874:	62c3      	str	r3, [r0, #44]	; 0x2c
	PID->PID_I_Min = PID_I_Min;
 8001876:	9b04      	ldr	r3, [sp, #16]
 8001878:	6303      	str	r3, [r0, #48]	; 0x30

	PID->PID_D_Tau = PID_D_Tau;
 800187a:	9b05      	ldr	r3, [sp, #20]
 800187c:	6203      	str	r3, [r0, #32]

	/* Reset the memory */
	PID->Setpoint = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	6003      	str	r3, [r0, #0]
	PID->OutputVal = 0;
 8001882:	6043      	str	r3, [r0, #4]
	PID->lastError = 0;
 8001884:	6383      	str	r3, [r0, #56]	; 0x38
	PID->lastInValue = 0;
 8001886:	63c3      	str	r3, [r0, #60]	; 0x3c
	PID->PID_Error = 0;
 8001888:	6403      	str	r3, [r0, #64]	; 0x40
}
 800188a:	4770      	bx	lr

0800188c <PIDNewSetpoint>:

void PIDNewSetpoint(PID *PID, float Setpoint)
{
	PID->Setpoint = Setpoint;
 800188c:	6001      	str	r1, [r0, #0]
}
 800188e:	4770      	bx	lr

08001890 <PIDUpdate>:
	PID->lastError = 0;
	PID->lastInValue = 0;
}

uint32_t PIDUpdate(PID *PID, float ActValue)
{
 8001890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001894:	4604      	mov	r4, r0
 8001896:	460e      	mov	r6, r1
	/* Calculation of the actual error */
	PID->PID_Error = PID->Setpoint - ActValue;
 8001898:	6800      	ldr	r0, [r0, #0]
 800189a:	f7ff f8f9 	bl	8000a90 <__aeabi_fsub>
 800189e:	4605      	mov	r5, r0
 80018a0:	6420      	str	r0, [r4, #64]	; 0x40

	/* Calculate the PROPORTIONAL part */
	PID->PID_P = PID->Kp * PID->PID_Error;
 80018a2:	6961      	ldr	r1, [r4, #20]
 80018a4:	f7ff f9fe 	bl	8000ca4 <__aeabi_fmul>
 80018a8:	4680      	mov	r8, r0
 80018aa:	60a0      	str	r0, [r4, #8]

	/* Calculate the INTEGRATIVE part */
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 80018ac:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80018b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80018b4:	69a0      	ldr	r0, [r4, #24]
 80018b6:	f7ff f9f5 	bl	8000ca4 <__aeabi_fmul>
 80018ba:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 80018be:	4649      	mov	r1, r9
 80018c0:	f7ff f9f0 	bl	8000ca4 <__aeabi_fmul>
 80018c4:	4607      	mov	r7, r0
 80018c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80018c8:	4628      	mov	r0, r5
 80018ca:	f7ff f8e1 	bl	8000a90 <__aeabi_fsub>
 80018ce:	4601      	mov	r1, r0
 80018d0:	4638      	mov	r0, r7
 80018d2:	f7ff f9e7 	bl	8000ca4 <__aeabi_fmul>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4650      	mov	r0, sl
 80018da:	f7ff f8db 	bl	8000a94 <__addsf3>
 80018de:	4607      	mov	r7, r0
 80018e0:	60e0      	str	r0, [r4, #12]

	//Anti-wind-up via integrator clamping
	if (PID->PID_I>PID->PID_I_Max)
 80018e2:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80018e6:	4651      	mov	r1, sl
 80018e8:	f7ff fb98 	bl	800101c <__aeabi_fcmpgt>
 80018ec:	2800      	cmp	r0, #0
 80018ee:	d043      	beq.n	8001978 <PIDUpdate+0xe8>
	{
		PID->PID_I = PID->PID_I_Max;
 80018f0:	f8c4 a00c 	str.w	sl, [r4, #12]
	{
		PID->PID_I = PID->PID_I_Min;
	}

	/* Calculate the DERIVATIVE part (band limited and measurement dependent) */
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018f4:	69e0      	ldr	r0, [r4, #28]
 80018f6:	4601      	mov	r1, r0
 80018f8:	f7ff f8cc 	bl	8000a94 <__addsf3>
 80018fc:	4607      	mov	r7, r0
 80018fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001900:	4630      	mov	r0, r6
 8001902:	f7ff f8c5 	bl	8000a90 <__aeabi_fsub>
 8001906:	4601      	mov	r1, r0
 8001908:	4638      	mov	r0, r7
 800190a:	f7ff f9cb 	bl	8000ca4 <__aeabi_fmul>
 800190e:	4607      	mov	r7, r0
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001910:	6a20      	ldr	r0, [r4, #32]
 8001912:	4601      	mov	r1, r0
 8001914:	f7ff f8be 	bl	8000a94 <__addsf3>
 8001918:	4682      	mov	sl, r0
 800191a:	4649      	mov	r1, r9
 800191c:	f7ff f8b8 	bl	8000a90 <__aeabi_fsub>
 8001920:	6921      	ldr	r1, [r4, #16]
 8001922:	f7ff f9bf 	bl	8000ca4 <__aeabi_fmul>
 8001926:	4601      	mov	r1, r0
 8001928:	4638      	mov	r0, r7
 800192a:	f7ff f8b3 	bl	8000a94 <__addsf3>
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 800192e:	f100 4700 	add.w	r7, r0, #2147483648	; 0x80000000
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 8001932:	4651      	mov	r1, sl
 8001934:	4648      	mov	r0, r9
 8001936:	f7ff f8ad 	bl	8000a94 <__addsf3>
 800193a:	4601      	mov	r1, r0
 800193c:	4638      	mov	r0, r7
 800193e:	f7ff fa65 	bl	8000e0c <__aeabi_fdiv>
 8001942:	4607      	mov	r7, r0
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001944:	6120      	str	r0, [r4, #16]

	/* Calculate the total PID value and check the upper/lower output limits*/
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001946:	68e1      	ldr	r1, [r4, #12]
 8001948:	4640      	mov	r0, r8
 800194a:	f7ff f8a3 	bl	8000a94 <__addsf3>
 800194e:	4601      	mov	r1, r0
 8001950:	4638      	mov	r0, r7
 8001952:	f7ff f89f 	bl	8000a94 <__addsf3>
 8001956:	4607      	mov	r7, r0
 8001958:	6060      	str	r0, [r4, #4]

	if (PID->OutputVal>PID->MaxOutputVal)
 800195a:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
 800195e:	4641      	mov	r1, r8
 8001960:	f7ff fb5c 	bl	800101c <__aeabi_fcmpgt>
 8001964:	b198      	cbz	r0, 800198e <PIDUpdate+0xfe>
	{
		PID->OutputVal = PID->MaxOutputVal;
 8001966:	f8c4 8004 	str.w	r8, [r4, #4]
	{
		PID->OutputVal = PID->MinOutputVal;
	}

	/* Update the last values*/
	PID->lastError = PID->PID_Error;
 800196a:	63a5      	str	r5, [r4, #56]	; 0x38
	PID->lastInValue = ActValue;
 800196c:	63e6      	str	r6, [r4, #60]	; 0x3c

	/* Return the actual PID output value */
	return (uint32_t)PID->OutputVal;
 800196e:	6860      	ldr	r0, [r4, #4]
 8001970:	f7ff fb5e 	bl	8001030 <__aeabi_f2uiz>
}
 8001974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	else if (PID->PID_I<PID->PID_I_Min)
 8001978:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800197c:	4651      	mov	r1, sl
 800197e:	4638      	mov	r0, r7
 8001980:	f7ff fb2e 	bl	8000fe0 <__aeabi_fcmplt>
 8001984:	2800      	cmp	r0, #0
 8001986:	d0b5      	beq.n	80018f4 <PIDUpdate+0x64>
		PID->PID_I = PID->PID_I_Min;
 8001988:	f8c4 a00c 	str.w	sl, [r4, #12]
 800198c:	e7b2      	b.n	80018f4 <PIDUpdate+0x64>
	else if (PID->OutputVal<PID->MinOutputVal)
 800198e:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8001992:	4641      	mov	r1, r8
 8001994:	4638      	mov	r0, r7
 8001996:	f7ff fb23 	bl	8000fe0 <__aeabi_fcmplt>
 800199a:	2800      	cmp	r0, #0
 800199c:	d0e5      	beq.n	800196a <PIDUpdate+0xda>
		PID->OutputVal = PID->MinOutputVal;
 800199e:	f8c4 8004 	str.w	r8, [r4, #4]
 80019a2:	e7e2      	b.n	800196a <PIDUpdate+0xda>

080019a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a4:	b500      	push	{lr}
 80019a6:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_MspInit+0x4c>)
 80019aa:	699a      	ldr	r2, [r3, #24]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	619a      	str	r2, [r3, #24]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	f002 0201 	and.w	r2, r2, #1
 80019b8:	9200      	str	r2, [sp, #0]
 80019ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c2:	61da      	str	r2, [r3, #28]
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	210f      	movs	r1, #15
 80019d2:	f06f 0001 	mvn.w	r0, #1
 80019d6:	f001 fb67 	bl	80030a8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019da:	4a06      	ldr	r2, [pc, #24]	; (80019f4 <HAL_MspInit+0x50>)
 80019dc:	6853      	ldr	r3, [r2, #4]
 80019de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80019e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e8:	b003      	add	sp, #12
 80019ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40010000 	.word	0x40010000

080019f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f8:	b530      	push	{r4, r5, lr}
 80019fa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	2300      	movs	r3, #0
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	9305      	str	r3, [sp, #20]
 8001a02:	9306      	str	r3, [sp, #24]
 8001a04:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001a06:	6803      	ldr	r3, [r0, #0]
 8001a08:	4a3d      	ldr	r2, [pc, #244]	; (8001b00 <HAL_I2C_MspInit+0x108>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d005      	beq.n	8001a1a <HAL_I2C_MspInit+0x22>
 8001a0e:	4604      	mov	r4, r0
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8001a10:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_I2C_MspInit+0x10c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d037      	beq.n	8001a86 <HAL_I2C_MspInit+0x8e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a16:	b009      	add	sp, #36	; 0x24
 8001a18:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4c3b      	ldr	r4, [pc, #236]	; (8001b08 <HAL_I2C_MspInit+0x110>)
 8001a1c:	69a3      	ldr	r3, [r4, #24]
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	61a3      	str	r3, [r4, #24]
 8001a24:	69a3      	ldr	r3, [r4, #24]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a32:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a34:	2312      	movs	r3, #18
 8001a36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	4833      	ldr	r0, [pc, #204]	; (8001b0c <HAL_I2C_MspInit+0x114>)
 8001a40:	f001 fc9c 	bl	800337c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001a44:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_I2C_MspInit+0x118>)
 8001a46:	6853      	ldr	r3, [r2, #4]
 8001a48:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a52:	69e3      	ldr	r3, [r4, #28]
 8001a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a58:	61e3      	str	r3, [r4, #28]
 8001a5a:	69e3      	ldr	r3, [r4, #28]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	201f      	movs	r0, #31
 8001a6a:	f001 fb1d 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a6e:	201f      	movs	r0, #31
 8001a70:	f001 fb4e 	bl	8003110 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2105      	movs	r1, #5
 8001a78:	2020      	movs	r0, #32
 8001a7a:	f001 fb15 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a7e:	2020      	movs	r0, #32
 8001a80:	f001 fb46 	bl	8003110 <HAL_NVIC_EnableIRQ>
 8001a84:	e7c7      	b.n	8001a16 <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4d20      	ldr	r5, [pc, #128]	; (8001b08 <HAL_I2C_MspInit+0x110>)
 8001a88:	69ab      	ldr	r3, [r5, #24]
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	61ab      	str	r3, [r5, #24]
 8001a90:	69ab      	ldr	r3, [r5, #24]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a9e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa0:	2312      	movs	r3, #18
 8001aa2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	a904      	add	r1, sp, #16
 8001aaa:	4818      	ldr	r0, [pc, #96]	; (8001b0c <HAL_I2C_MspInit+0x114>)
 8001aac:	f001 fc66 	bl	800337c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ab0:	69eb      	ldr	r3, [r5, #28]
 8001ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ab6:	61eb      	str	r3, [r5, #28]
 8001ab8:	69eb      	ldr	r3, [r5, #28]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	9303      	str	r3, [sp, #12]
 8001ac0:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001ac2:	4814      	ldr	r0, [pc, #80]	; (8001b14 <HAL_I2C_MspInit+0x11c>)
 8001ac4:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <HAL_I2C_MspInit+0x120>)
 8001ac6:	6003      	str	r3, [r0, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac8:	2310      	movs	r3, #16
 8001aca:	6043      	str	r3, [r0, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	6083      	str	r3, [r0, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	60c2      	str	r2, [r0, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad4:	6103      	str	r3, [r0, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad6:	6143      	str	r3, [r0, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001ad8:	6183      	str	r3, [r0, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ada:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001adc:	f001 fb26 	bl	800312c <HAL_DMA_Init>
 8001ae0:	b958      	cbnz	r0, 8001afa <HAL_I2C_MspInit+0x102>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_I2C_MspInit+0x11c>)
 8001ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8001ae6:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2105      	movs	r1, #5
 8001aec:	2021      	movs	r0, #33	; 0x21
 8001aee:	f001 fadb 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001af2:	2021      	movs	r0, #33	; 0x21
 8001af4:	f001 fb0c 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 8001af8:	e78d      	b.n	8001a16 <HAL_I2C_MspInit+0x1e>
      Error_Handler();
 8001afa:	f7ff fc47 	bl	800138c <Error_Handler>
 8001afe:	e7f0      	b.n	8001ae2 <HAL_I2C_MspInit+0xea>
 8001b00:	40005400 	.word	0x40005400
 8001b04:	40005800 	.word	0x40005800
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010c00 	.word	0x40010c00
 8001b10:	40010000 	.word	0x40010000
 8001b14:	20002660 	.word	0x20002660
 8001b18:	40020044 	.word	0x40020044

08001b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b530      	push	{r4, r5, lr}
 8001b1e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	2300      	movs	r3, #0
 8001b22:	9304      	str	r3, [sp, #16]
 8001b24:	9305      	str	r3, [sp, #20]
 8001b26:	9306      	str	r3, [sp, #24]
 8001b28:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001b2a:	6803      	ldr	r3, [r0, #0]
 8001b2c:	4a34      	ldr	r2, [pc, #208]	; (8001c00 <HAL_SPI_MspInit+0xe4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_SPI_MspInit+0x20>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8001b32:	4a34      	ldr	r2, [pc, #208]	; (8001c04 <HAL_SPI_MspInit+0xe8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d031      	beq.n	8001b9c <HAL_SPI_MspInit+0x80>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b38:	b009      	add	sp, #36	; 0x24
 8001b3a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b3c:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <HAL_SPI_MspInit+0xec>)
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	699a      	ldr	r2, [r3, #24]
 8001b48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	f042 0204 	orr.w	r2, r2, #4
 8001b56:	619a      	str	r2, [r3, #24]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b62:	2320      	movs	r3, #32
 8001b64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	4d27      	ldr	r5, [pc, #156]	; (8001c0c <HAL_SPI_MspInit+0xf0>)
 8001b70:	a904      	add	r1, sp, #16
 8001b72:	4628      	mov	r0, r5
 8001b74:	f001 fc02 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2400      	movs	r4, #0
 8001b7e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	a904      	add	r1, sp, #16
 8001b84:	4628      	mov	r0, r5
 8001b86:	f001 fbf9 	bl	800337c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001b8a:	4622      	mov	r2, r4
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	2023      	movs	r0, #35	; 0x23
 8001b90:	f001 fa8a 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b94:	2023      	movs	r0, #35	; 0x23
 8001b96:	f001 fabb 	bl	8003110 <HAL_NVIC_EnableIRQ>
 8001b9a:	e7cd      	b.n	8001b38 <HAL_SPI_MspInit+0x1c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <HAL_SPI_MspInit+0xec>)
 8001b9e:	69da      	ldr	r2, [r3, #28]
 8001ba0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba4:	61da      	str	r2, [r3, #28]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001bac:	9202      	str	r2, [sp, #8]
 8001bae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	f042 0208 	orr.w	r2, r2, #8
 8001bb6:	619a      	str	r2, [r3, #24]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	9303      	str	r3, [sp, #12]
 8001bc0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001bc2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001bc6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	4d0f      	ldr	r5, [pc, #60]	; (8001c10 <HAL_SPI_MspInit+0xf4>)
 8001bd2:	a904      	add	r1, sp, #16
 8001bd4:	4628      	mov	r0, r5
 8001bd6:	f001 fbd1 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001bda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2400      	movs	r4, #0
 8001be2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	a904      	add	r1, sp, #16
 8001be8:	4628      	mov	r0, r5
 8001bea:	f001 fbc7 	bl	800337c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001bee:	4622      	mov	r2, r4
 8001bf0:	2105      	movs	r1, #5
 8001bf2:	2024      	movs	r0, #36	; 0x24
 8001bf4:	f001 fa58 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bf8:	2024      	movs	r0, #36	; 0x24
 8001bfa:	f001 fa89 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 8001bfe:	e79b      	b.n	8001b38 <HAL_SPI_MspInit+0x1c>
 8001c00:	40013000 	.word	0x40013000
 8001c04:	40003800 	.word	0x40003800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b500      	push	{lr}
 8001c16:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8001c18:	6803      	ldr	r3, [r0, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d005      	beq.n	8001c2c <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_TIM_Base_MspInit+0x68>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d016      	beq.n	8001c54 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c26:	b003      	add	sp, #12
 8001c28:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c30:	69da      	ldr	r2, [r3, #28]
 8001c32:	f042 0201 	orr.w	r2, r2, #1
 8001c36:	61da      	str	r2, [r3, #28]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	201c      	movs	r0, #28
 8001c48:	f001 fa2e 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f001 fa5f 	bl	8003110 <HAL_NVIC_EnableIRQ>
 8001c52:	e7e8      	b.n	8001c26 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c54:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_TIM_Base_MspInit+0x6c>)
 8001c56:	69da      	ldr	r2, [r3, #28]
 8001c58:	f042 0204 	orr.w	r2, r2, #4
 8001c5c:	61da      	str	r2, [r3, #28]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	201e      	movs	r0, #30
 8001c6e:	f001 fa1b 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c72:	201e      	movs	r0, #30
 8001c74:	f001 fa4c 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 8001c78:	e7d5      	b.n	8001c26 <HAL_TIM_Base_MspInit+0x12>
 8001c7a:	bf00      	nop
 8001c7c:	40000800 	.word	0x40000800
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c84:	b500      	push	{lr}
 8001c86:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9302      	str	r3, [sp, #8]
 8001c8c:	9303      	str	r3, [sp, #12]
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	9305      	str	r3, [sp, #20]
  if(htim_encoder->Instance==TIM3)
 8001c92:	6802      	ldr	r2, [r0, #0]
 8001c94:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <HAL_TIM_Encoder_MspInit+0x6c>)
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d002      	beq.n	8001ca0 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c9a:	b007      	add	sp, #28
 8001c9c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca0:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	f042 0202 	orr.w	r2, r2, #2
 8001caa:	61da      	str	r2, [r3, #28]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	f002 0202 	and.w	r2, r2, #2
 8001cb2:	9200      	str	r2, [sp, #0]
 8001cb4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	f042 0208 	orr.w	r2, r2, #8
 8001cbc:	619a      	str	r2, [r3, #24]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8001cc8:	2330      	movs	r3, #48	; 0x30
 8001cca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	a902      	add	r1, sp, #8
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <HAL_TIM_Encoder_MspInit+0x70>)
 8001cd6:	f001 fb51 	bl	800337c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001cda:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001cdc:	6853      	ldr	r3, [r2, #4]
 8001cde:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001ce2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cea:	6053      	str	r3, [r2, #4]
}
 8001cec:	e7d5      	b.n	8001c9a <HAL_TIM_Encoder_MspInit+0x16>
 8001cee:	bf00      	nop
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40010c00 	.word	0x40010c00
 8001cf8:	40010000 	.word	0x40010000

08001cfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cfc:	b500      	push	{lr}
 8001cfe:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	2300      	movs	r3, #0
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	9303      	str	r3, [sp, #12]
 8001d06:	9304      	str	r3, [sp, #16]
 8001d08:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 8001d0a:	6803      	ldr	r3, [r0, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d10:	d002      	beq.n	8001d18 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d12:	b007      	add	sp, #28
 8001d14:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	f042 0204 	orr.w	r2, r2, #4
 8001d22:	619a      	str	r2, [r3, #24]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d36:	a902      	add	r1, sp, #8
 8001d38:	4801      	ldr	r0, [pc, #4]	; (8001d40 <HAL_TIM_MspPostInit+0x44>)
 8001d3a:	f001 fb1f 	bl	800337c <HAL_GPIO_Init>
}
 8001d3e:	e7e8      	b.n	8001d12 <HAL_TIM_MspPostInit+0x16>
 8001d40:	40010800 	.word	0x40010800

08001d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d44:	b510      	push	{r4, lr}
 8001d46:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	9303      	str	r3, [sp, #12]
 8001d4e:	9304      	str	r3, [sp, #16]
 8001d50:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART2)
 8001d52:	6802      	ldr	r2, [r0, #0]
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_UART_MspInit+0x6c>)
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d5a:	b006      	add	sp, #24
 8001d5c:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d5e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d68:	61da      	str	r2, [r3, #28]
 8001d6a:	69da      	ldr	r2, [r3, #28]
 8001d6c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d70:	9200      	str	r2, [sp, #0]
 8001d72:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d74:	699a      	ldr	r2, [r3, #24]
 8001d76:	f042 0204 	orr.w	r2, r2, #4
 8001d7a:	619a      	str	r2, [r3, #24]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	4c08      	ldr	r4, [pc, #32]	; (8001db4 <HAL_UART_MspInit+0x70>)
 8001d94:	a902      	add	r1, sp, #8
 8001d96:	4620      	mov	r0, r4
 8001d98:	f001 faf0 	bl	800337c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	a902      	add	r1, sp, #8
 8001da8:	4620      	mov	r0, r4
 8001daa:	f001 fae7 	bl	800337c <HAL_GPIO_Init>
}
 8001dae:	e7d4      	b.n	8001d5a <HAL_UART_MspInit+0x16>
 8001db0:	40004400 	.word	0x40004400
 8001db4:	40010800 	.word	0x40010800

08001db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b500      	push	{lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	f001 f971 	bl	80030a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001dc6:	2019      	movs	r0, #25
 8001dc8:	f001 f9a2 	bl	8003110 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <HAL_InitTick+0x68>)
 8001dce:	699a      	ldr	r2, [r3, #24]
 8001dd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dd4:	619a      	str	r2, [r3, #24]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ddc:	9301      	str	r3, [sp, #4]
 8001dde:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001de0:	a902      	add	r1, sp, #8
 8001de2:	a803      	add	r0, sp, #12
 8001de4:	f004 f8ca 	bl	8005f7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001de8:	f004 f8b8 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_InitTick+0x6c>)
 8001dee:	fba3 2300 	umull	r2, r3, r3, r0
 8001df2:	0c9b      	lsrs	r3, r3, #18
 8001df4:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001df6:	480c      	ldr	r0, [pc, #48]	; (8001e28 <HAL_InitTick+0x70>)
 8001df8:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_InitTick+0x74>)
 8001dfa:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001dfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e00:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e02:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e0a:	f004 fee1 	bl	8006bd0 <HAL_TIM_Base_Init>
 8001e0e:	b118      	cbz	r0, 8001e18 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
}
 8001e12:	b009      	add	sp, #36	; 0x24
 8001e14:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <HAL_InitTick+0x70>)
 8001e1a:	f004 fda9 	bl	8006970 <HAL_TIM_Base_Start_IT>
 8001e1e:	e7f8      	b.n	8001e12 <HAL_InitTick+0x5a>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	431bde83 	.word	0x431bde83
 8001e28:	2000277c 	.word	0x2000277c
 8001e2c:	40012c00 	.word	0x40012c00

08001e30 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <NMI_Handler>

08001e32 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler>

08001e34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler>

08001e36 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler>

08001e38 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <UsageFault_Handler>

08001e3a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3a:	4770      	bx	lr

08001e3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <DMA1_Channel4_IRQHandler+0xc>)
 8001e40:	f001 f9f6 	bl	8003230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e44:	bd08      	pop	{r3, pc}
 8001e46:	bf00      	nop
 8001e48:	20002660 	.word	0x20002660

08001e4c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e4e:	4802      	ldr	r0, [pc, #8]	; (8001e58 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8001e50:	f003 fb2c 	bl	80054ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e54:	bd08      	pop	{r3, pc}
 8001e56:	bf00      	nop
 8001e58:	200034a4 	.word	0x200034a4

08001e5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e5e:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM1_UP_IRQHandler+0xc>)
 8001e60:	f004 fdbf 	bl	80069e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	2000277c 	.word	0x2000277c

08001e6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM2_IRQHandler+0xc>)
 8001e70:	f004 fdb7 	bl	80069e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	200026ec 	.word	0x200026ec

08001e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e7e:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM4_IRQHandler+0xc>)
 8001e80:	f004 fdaf 	bl	80069e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e84:	bd08      	pop	{r3, pc}
 8001e86:	bf00      	nop
 8001e88:	200026a4 	.word	0x200026a4

08001e8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e8e:	4802      	ldr	r0, [pc, #8]	; (8001e98 <I2C1_EV_IRQHandler+0xc>)
 8001e90:	f002 fd16 	bl	80048c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e94:	bd08      	pop	{r3, pc}
 8001e96:	bf00      	nop
 8001e98:	200024c0 	.word	0x200024c0

08001e9c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e9e:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <I2C1_ER_IRQHandler+0xc>)
 8001ea0:	f002 fddb 	bl	8004a5a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ea4:	bd08      	pop	{r3, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200024c0 	.word	0x200024c0

08001eac <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001eac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001eae:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <I2C2_EV_IRQHandler+0xc>)
 8001eb0:	f002 fd06 	bl	80048c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001eb4:	bd08      	pop	{r3, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000246c 	.word	0x2000246c

08001ebc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ebc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <SPI1_IRQHandler+0xc>)
 8001ec0:	f004 fbea 	bl	8006698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ec4:	bd08      	pop	{r3, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200023cc 	.word	0x200023cc

08001ecc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001ecc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ece:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <SPI2_IRQHandler+0xc>)
 8001ed0:	f004 fbe2 	bl	8006698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ed4:	bd08      	pop	{r3, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000235c 	.word	0x2000235c

08001edc <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001edc:	2001      	movs	r0, #1
 8001ede:	4770      	bx	lr

08001ee0 <_kill>:

int _kill(int pid, int sig)
{
 8001ee0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ee2:	f008 ff7d 	bl	800ade0 <__errno>
 8001ee6:	2316      	movs	r3, #22
 8001ee8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295
 8001eee:	bd08      	pop	{r3, pc}

08001ef0 <_exit>:

void _exit (int status)
{
 8001ef0:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef6:	f7ff fff3 	bl	8001ee0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0xa>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	460c      	mov	r4, r1
 8001f00:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2500      	movs	r5, #0
 8001f04:	42b5      	cmp	r5, r6
 8001f06:	da07      	bge.n	8001f18 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001f08:	f3af 8000 	nop.w
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f12:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001f14:	460c      	mov	r4, r1
 8001f16:	e7f5      	b.n	8001f04 <_read+0x8>
	}

return len;
}
 8001f18:	4630      	mov	r0, r6
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}

08001f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	2500      	movs	r5, #0
 8001f24:	42b5      	cmp	r5, r6
 8001f26:	da05      	bge.n	8001f34 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001f28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001f2c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	3501      	adds	r5, #1
 8001f32:	e7f7      	b.n	8001f24 <_write+0x8>
	}
	return len;
}
 8001f34:	4630      	mov	r0, r6
 8001f36:	bd70      	pop	{r4, r5, r6, pc}

08001f38 <_close>:

int _close(int file)
{
	return -1;
}
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	4770      	bx	lr

08001f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f42:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f44:	2000      	movs	r0, #0
 8001f46:	4770      	bx	lr

08001f48 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f48:	2001      	movs	r0, #1
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	4770      	bx	lr

08001f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f54:	4a0c      	ldr	r2, [pc, #48]	; (8001f88 <_sbrk+0x38>)
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f58:	480d      	ldr	r0, [pc, #52]	; (8001f90 <_sbrk+0x40>)
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	b140      	cbz	r0, 8001f70 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5e:	480c      	ldr	r0, [pc, #48]	; (8001f90 <_sbrk+0x40>)
 8001f60:	6800      	ldr	r0, [r0, #0]
 8001f62:	4403      	add	r3, r0
 8001f64:	1a52      	subs	r2, r2, r1
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d806      	bhi.n	8001f78 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <_sbrk+0x40>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f6e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <_sbrk+0x40>)
 8001f72:	4c08      	ldr	r4, [pc, #32]	; (8001f94 <_sbrk+0x44>)
 8001f74:	6004      	str	r4, [r0, #0]
 8001f76:	e7f2      	b.n	8001f5e <_sbrk+0xe>
    errno = ENOMEM;
 8001f78:	f008 ff32 	bl	800ade0 <__errno>
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	e7f3      	b.n	8001f6e <_sbrk+0x1e>
 8001f86:	bf00      	nop
 8001f88:	20005000 	.word	0x20005000
 8001f8c:	00000400 	.word	0x00000400
 8001f90:	20000378 	.word	0x20000378
 8001f94:	200037a0 	.word	0x200037a0

08001f98 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f98:	4770      	bx	lr
	...

08001f9c <u8x8_byte_stm32_hw_i2c>:

extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001f9c:	b510      	push	{r4, lr}
 8001f9e:	b082      	sub	sp, #8
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch(msg)
 8001fa0:	3914      	subs	r1, #20
 8001fa2:	290c      	cmp	r1, #12
 8001fa4:	d808      	bhi.n	8001fb8 <u8x8_byte_stm32_hw_i2c+0x1c>
 8001fa6:	e8df f001 	tbb	[pc, r1]
 8001faa:	0729      	.short	0x0729
 8001fac:	1d181407 	.word	0x1d181407
 8001fb0:	07070707 	.word	0x07070707
 8001fb4:	0707      	.short	0x0707
 8001fb6:	29          	.byte	0x29
 8001fb7:	00          	.byte	0x00
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
		break;
	default:
		return 0;
	}
	return 1;
 8001fb8:	2000      	movs	r0, #0
}
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd10      	pop	{r4, pc}
			buffer[buf_idx++] = *data;
 8001fbe:	4811      	ldr	r0, [pc, #68]	; (8002004 <u8x8_byte_stm32_hw_i2c+0x68>)
 8001fc0:	7801      	ldrb	r1, [r0, #0]
 8001fc2:	1c4c      	adds	r4, r1, #1
 8001fc4:	7004      	strb	r4, [r0, #0]
 8001fc6:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001fca:	480f      	ldr	r0, [pc, #60]	; (8002008 <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001fcc:	5444      	strb	r4, [r0, r1]
			arg_int--;
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	b2d2      	uxtb	r2, r2
		while( arg_int > 0 )
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d1f3      	bne.n	8001fbe <u8x8_byte_stm32_hw_i2c+0x22>
	return 1;
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	e7ef      	b.n	8001fba <u8x8_byte_stm32_hw_i2c+0x1e>
		buf_idx = 0;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <u8x8_byte_stm32_hw_i2c+0x68>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
	return 1;
 8001fe0:	2001      	movs	r0, #1
		break;
 8001fe2:	e7ea      	b.n	8001fba <u8x8_byte_stm32_hw_i2c+0x1e>
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8001fe4:	2364      	movs	r3, #100	; 0x64
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <u8x8_byte_stm32_hw_i2c+0x68>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001fee:	2178      	movs	r1, #120	; 0x78
 8001ff0:	4806      	ldr	r0, [pc, #24]	; (800200c <u8x8_byte_stm32_hw_i2c+0x70>)
 8001ff2:	f001 fedf 	bl	8003db4 <HAL_I2C_Master_Transmit>
 8001ff6:	b918      	cbnz	r0, 8002000 <u8x8_byte_stm32_hw_i2c+0x64>
	return 1;
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	e7de      	b.n	8001fba <u8x8_byte_stm32_hw_i2c+0x1e>
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	e7dc      	b.n	8001fba <u8x8_byte_stm32_hw_i2c+0x1e>
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8002000:	2000      	movs	r0, #0
 8002002:	e7da      	b.n	8001fba <u8x8_byte_stm32_hw_i2c+0x1e>
 8002004:	2000037c 	.word	0x2000037c
 8002008:	20000380 	.word	0x20000380
 800200c:	2000246c 	.word	0x2000246c

08002010 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002010:	b500      	push	{lr}
 8002012:	b083      	sub	sp, #12
  switch(msg)
 8002014:	3928      	subs	r1, #40	; 0x28
 8002016:	2924      	cmp	r1, #36	; 0x24
 8002018:	d827      	bhi.n	800206a <psoc_gpio_and_delay_cb+0x5a>
 800201a:	e8df f001 	tbb	[pc, r1]
 800201e:	1f22      	.short	0x1f22
 8002020:	22132222 	.word	0x22132222
 8002024:	26262626 	.word	0x26262626
 8002028:	26262626 	.word	0x26262626
 800202c:	26262626 	.word	0x26262626
 8002030:	26262626 	.word	0x26262626
 8002034:	26262626 	.word	0x26262626
 8002038:	26262626 	.word	0x26262626
 800203c:	26262626 	.word	0x26262626
 8002040:	2626      	.short	0x2626
 8002042:	22          	.byte	0x22
 8002043:	00          	.byte	0x00
      break;
    case U8X8_MSG_DELAY_NANO:
      /* not required for SW I2C */
    {
		volatile uint32_t i;
		for (i = 1; i <= arg_int*10; i++);
 8002044:	2301      	movs	r3, #1
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800204c:	9901      	ldr	r1, [sp, #4]
 800204e:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8002052:	d806      	bhi.n	8002062 <psoc_gpio_and_delay_cb+0x52>
 8002054:	9b01      	ldr	r3, [sp, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	e7f5      	b.n	8002048 <psoc_gpio_and_delay_cb+0x38>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;

    case U8X8_MSG_DELAY_MILLI:
      HAL_Delay(arg_int);
 800205c:	4610      	mov	r0, r2
 800205e:	f000 fffd 	bl	800305c <HAL_Delay>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8002062:	2001      	movs	r0, #1
 8002064:	b003      	add	sp, #12
 8002066:	f85d fb04 	ldr.w	pc, [sp], #4
      u8x8_SetGPIOResult(u8x8, 1);
 800206a:	2301      	movs	r3, #1
 800206c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
      break;
 8002070:	e7f7      	b.n	8002062 <psoc_gpio_and_delay_cb+0x52>

08002072 <u8g2_send_tile_row>:
}

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8002072:	b510      	push	{r4, lr}
 8002074:	b082      	sub	sp, #8
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002076:	6803      	ldr	r3, [r0, #0]
 8002078:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
 800207a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  offset *= w;
 800207c:	fb03 f101 	mul.w	r1, r3, r1
  offset *= 8;
 8002080:	00c9      	lsls	r1, r1, #3
 8002082:	b289      	uxth	r1, r1
  ptr += offset;
 8002084:	4421      	add	r1, r4
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8002086:	9100      	str	r1, [sp, #0]
 8002088:	2100      	movs	r1, #0
 800208a:	f000 ff15 	bl	8002eb8 <u8x8_DrawTile>
}
 800208e:	b002      	add	sp, #8
 8002090:	bd10      	pop	{r4, pc}

08002092 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002096:	4606      	mov	r6, r0
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
 8002098:	f890 703c 	ldrb.w	r7, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 800209c:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80020a0:	6803      	ldr	r3, [r0, #0]
 80020a2:	f893 8011 	ldrb.w	r8, [r3, #17]
  src_row = 0;
 80020a6:	2400      	movs	r4, #0
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80020a8:	462a      	mov	r2, r5
 80020aa:	4621      	mov	r1, r4
 80020ac:	4630      	mov	r0, r6
 80020ae:	f7ff ffe0 	bl	8002072 <u8g2_send_tile_row>
    src_row++;
 80020b2:	3401      	adds	r4, #1
 80020b4:	b2e4      	uxtb	r4, r4
    dest_row++;
 80020b6:	3501      	adds	r5, #1
 80020b8:	b2ed      	uxtb	r5, r5
  } while( src_row < src_max && dest_row < dest_max );
 80020ba:	42a7      	cmp	r7, r4
 80020bc:	d901      	bls.n	80020c2 <u8g2_send_buffer+0x30>
 80020be:	45a8      	cmp	r8, r5
 80020c0:	d8f2      	bhi.n	80020a8 <u8g2_send_buffer+0x16>
}
 80020c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080020c6 <u8g2_ClearBuffer>:
{
 80020c6:	b508      	push	{r3, lr}
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80020c8:	6803      	ldr	r3, [r0, #0]
 80020ca:	7c1a      	ldrb	r2, [r3, #16]
  cnt *= u8g2->tile_buf_height;
 80020cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020d0:	fb02 f203 	mul.w	r2, r2, r3
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	2100      	movs	r1, #0
 80020d8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80020da:	f008 fed3 	bl	800ae84 <memset>
}
 80020de:	bd08      	pop	{r3, pc}

080020e0 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80020e0:	b510      	push	{r4, lr}
 80020e2:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 80020e4:	f7ff ffd5 	bl	8002092 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 ff0b 	bl	8002f04 <u8x8_RefreshDisplay>
}
 80020ee:	bd10      	pop	{r4, pc}

080020f0 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80020f0:	b510      	push	{r4, lr}
 80020f2:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
 80020f4:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 80020f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80020fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4620      	mov	r0, r4
 8002104:	4798      	blx	r3
}
 8002106:	bd10      	pop	{r4, pc}

08002108 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002108:	b510      	push	{r4, lr}
 800210a:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 800210c:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 8002110:	b923      	cbnz	r3, 800211c <u8g2_FirstPage+0x14>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002112:	2100      	movs	r1, #0
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ffeb 	bl	80020f0 <u8g2_SetBufferCurrTileRow>
}
 800211a:	bd10      	pop	{r4, pc}
    u8g2_ClearBuffer(u8g2);
 800211c:	f7ff ffd3 	bl	80020c6 <u8g2_ClearBuffer>
 8002120:	e7f7      	b.n	8002112 <u8g2_FirstPage+0xa>

08002122 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8002122:	b538      	push	{r3, r4, r5, lr}
 8002124:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8002126:	f7ff ffb4 	bl	8002092 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800212a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 800212e:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 8002132:	441d      	add	r5, r3
 8002134:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	7c5b      	ldrb	r3, [r3, #17]
 800213a:	42ab      	cmp	r3, r5
 800213c:	d908      	bls.n	8002150 <u8g2_NextPage+0x2e>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
 800213e:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8002142:	b953      	cbnz	r3, 800215a <u8g2_NextPage+0x38>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8002144:	4629      	mov	r1, r5
 8002146:	4620      	mov	r0, r4
 8002148:	f7ff ffd2 	bl	80020f0 <u8g2_SetBufferCurrTileRow>
  return 1;
 800214c:	2001      	movs	r0, #1
}
 800214e:	bd38      	pop	{r3, r4, r5, pc}
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002150:	4620      	mov	r0, r4
 8002152:	f000 fed7 	bl	8002f04 <u8x8_RefreshDisplay>
    return 0;
 8002156:	2000      	movs	r0, #0
 8002158:	e7f9      	b.n	800214e <u8g2_NextPage+0x2c>
    u8g2_ClearBuffer(u8g2);
 800215a:	4620      	mov	r0, r4
 800215c:	f7ff ffb3 	bl	80020c6 <u8g2_ClearBuffer>
 8002160:	e7f0      	b.n	8002144 <u8g2_NextPage+0x22>

08002162 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002162:	b510      	push	{r4, lr}
 8002164:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 8002166:	f7ff ffcf 	bl	8002108 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 800216a:	4620      	mov	r0, r4
 800216c:	f7ff ffd9 	bl	8002122 <u8g2_NextPage>
 8002170:	2800      	cmp	r0, #0
 8002172:	d1fa      	bne.n	800216a <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002174:	2100      	movs	r1, #0
 8002176:	4620      	mov	r0, r4
 8002178:	f7ff ffba 	bl	80020f0 <u8g2_SetBufferCurrTileRow>
}
 800217c:	bd10      	pop	{r4, pc}
	...

08002180 <u8g2_m_16_8_f>:
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002180:	2308      	movs	r3, #8
 8002182:	7003      	strb	r3, [r0, #0]
  return buf;
}
 8002184:	4800      	ldr	r0, [pc, #0]	; (8002188 <u8g2_m_16_8_f+0x8>)
 8002186:	4770      	bx	lr
 8002188:	200003a0 	.word	0x200003a0

0800218c <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800218c:	b530      	push	{r4, r5, lr}
 800218e:	b085      	sub	sp, #20
 8002190:	4604      	mov	r4, r0
 8002192:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	4a08      	ldr	r2, [pc, #32]	; (80021bc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 800219a:	4909      	ldr	r1, [pc, #36]	; (80021c0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
 800219c:	f000 fed6 	bl	8002f4c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80021a0:	f10d 000f 	add.w	r0, sp, #15
 80021a4:	f7ff ffec 	bl	8002180 <u8g2_m_16_8_f>
 80021a8:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80021aa:	9500      	str	r5, [sp, #0]
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
 80021ae:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80021b2:	4620      	mov	r0, r4
 80021b4:	f000 fc93 	bl	8002ade <u8g2_SetupBuffer>
}
 80021b8:	b005      	add	sp, #20
 80021ba:	bd30      	pop	{r4, r5, pc}
 80021bc:	08002c61 	.word	0x08002c61
 80021c0:	08002e0d 	.word	0x08002e0d
 80021c4:	08002925 	.word	0x08002925

080021c8 <u8g2_font_get_byte>:
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
}
 80021c8:	5c40      	ldrb	r0, [r0, r1]
 80021ca:	4770      	bx	lr

080021cc <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 80021cc:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 80021ce:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 80021d0:	7850      	ldrb	r0, [r2, #1]
 80021d2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 80021d6:	b280      	uxth	r0, r0
 80021d8:	4770      	bx	lr

080021da <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d008      	beq.n	80021f0 <u8g2_add_vector_y+0x16>
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d009      	beq.n	80021f6 <u8g2_add_vector_y+0x1c>
 80021e2:	b113      	cbz	r3, 80021ea <u8g2_add_vector_y+0x10>
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 80021e4:	1a40      	subs	r0, r0, r1
 80021e6:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dy;
}
 80021e8:	4770      	bx	lr
      dy += y;
 80021ea:	4410      	add	r0, r2
 80021ec:	b2c0      	uxtb	r0, r0
      break;
 80021ee:	4770      	bx	lr
      dy += x;
 80021f0:	4408      	add	r0, r1
 80021f2:	b2c0      	uxtb	r0, r0
      break;
 80021f4:	4770      	bx	lr
      dy -= y;
 80021f6:	1a80      	subs	r0, r0, r2
 80021f8:	b2c0      	uxtb	r0, r0
      break;
 80021fa:	4770      	bx	lr

080021fc <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d008      	beq.n	8002212 <u8g2_add_vector_x+0x16>
 8002200:	2b02      	cmp	r3, #2
 8002202:	d009      	beq.n	8002218 <u8g2_add_vector_x+0x1c>
 8002204:	b113      	cbz	r3, 800220c <u8g2_add_vector_x+0x10>
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 8002206:	4410      	add	r0, r2
 8002208:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dx;
}
 800220a:	4770      	bx	lr
      dx += x;
 800220c:	4408      	add	r0, r1
 800220e:	b2c0      	uxtb	r0, r0
      break;
 8002210:	4770      	bx	lr
      dx -= y;
 8002212:	1a80      	subs	r0, r0, r2
 8002214:	b2c0      	uxtb	r0, r0
      break;
 8002216:	4770      	bx	lr
      dx -= x;
 8002218:	1a40      	subs	r0, r0, r1
 800221a:	b2c0      	uxtb	r0, r0
      break;
 800221c:	4770      	bx	lr

0800221e <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 800221e:	2000      	movs	r0, #0
 8002220:	4770      	bx	lr

08002222 <u8g2_read_font_info>:
{
 8002222:	b538      	push	{r3, r4, r5, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	460d      	mov	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8002228:	2100      	movs	r1, #0
 800222a:	4628      	mov	r0, r5
 800222c:	f7ff ffcc 	bl	80021c8 <u8g2_font_get_byte>
 8002230:	7020      	strb	r0, [r4, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002232:	2101      	movs	r1, #1
 8002234:	4628      	mov	r0, r5
 8002236:	f7ff ffc7 	bl	80021c8 <u8g2_font_get_byte>
 800223a:	7060      	strb	r0, [r4, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800223c:	2102      	movs	r1, #2
 800223e:	4628      	mov	r0, r5
 8002240:	f7ff ffc2 	bl	80021c8 <u8g2_font_get_byte>
 8002244:	70a0      	strb	r0, [r4, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002246:	2103      	movs	r1, #3
 8002248:	4628      	mov	r0, r5
 800224a:	f7ff ffbd 	bl	80021c8 <u8g2_font_get_byte>
 800224e:	70e0      	strb	r0, [r4, #3]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8002250:	2104      	movs	r1, #4
 8002252:	4628      	mov	r0, r5
 8002254:	f7ff ffb8 	bl	80021c8 <u8g2_font_get_byte>
 8002258:	7120      	strb	r0, [r4, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800225a:	2105      	movs	r1, #5
 800225c:	4628      	mov	r0, r5
 800225e:	f7ff ffb3 	bl	80021c8 <u8g2_font_get_byte>
 8002262:	7160      	strb	r0, [r4, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002264:	2106      	movs	r1, #6
 8002266:	4628      	mov	r0, r5
 8002268:	f7ff ffae 	bl	80021c8 <u8g2_font_get_byte>
 800226c:	71a0      	strb	r0, [r4, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800226e:	2107      	movs	r1, #7
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff ffa9 	bl	80021c8 <u8g2_font_get_byte>
 8002276:	71e0      	strb	r0, [r4, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8002278:	2108      	movs	r1, #8
 800227a:	4628      	mov	r0, r5
 800227c:	f7ff ffa4 	bl	80021c8 <u8g2_font_get_byte>
 8002280:	7220      	strb	r0, [r4, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8002282:	2109      	movs	r1, #9
 8002284:	4628      	mov	r0, r5
 8002286:	f7ff ff9f 	bl	80021c8 <u8g2_font_get_byte>
 800228a:	7260      	strb	r0, [r4, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800228c:	210a      	movs	r1, #10
 800228e:	4628      	mov	r0, r5
 8002290:	f7ff ff9a 	bl	80021c8 <u8g2_font_get_byte>
 8002294:	72a0      	strb	r0, [r4, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002296:	210b      	movs	r1, #11
 8002298:	4628      	mov	r0, r5
 800229a:	f7ff ff95 	bl	80021c8 <u8g2_font_get_byte>
 800229e:	72e0      	strb	r0, [r4, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80022a0:	210c      	movs	r1, #12
 80022a2:	4628      	mov	r0, r5
 80022a4:	f7ff ff90 	bl	80021c8 <u8g2_font_get_byte>
 80022a8:	7320      	strb	r0, [r4, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80022aa:	210d      	movs	r1, #13
 80022ac:	4628      	mov	r0, r5
 80022ae:	f7ff ff8b 	bl	80021c8 <u8g2_font_get_byte>
 80022b2:	7360      	strb	r0, [r4, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80022b4:	210e      	movs	r1, #14
 80022b6:	4628      	mov	r0, r5
 80022b8:	f7ff ff86 	bl	80021c8 <u8g2_font_get_byte>
 80022bc:	73a0      	strb	r0, [r4, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80022be:	210f      	movs	r1, #15
 80022c0:	4628      	mov	r0, r5
 80022c2:	f7ff ff81 	bl	80021c8 <u8g2_font_get_byte>
 80022c6:	73e0      	strb	r0, [r4, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80022c8:	2110      	movs	r1, #16
 80022ca:	4628      	mov	r0, r5
 80022cc:	f7ff ff7c 	bl	80021c8 <u8g2_font_get_byte>
 80022d0:	7420      	strb	r0, [r4, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80022d2:	2111      	movs	r1, #17
 80022d4:	4628      	mov	r0, r5
 80022d6:	f7ff ff79 	bl	80021cc <u8g2_font_get_word>
 80022da:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80022dc:	2113      	movs	r1, #19
 80022de:	4628      	mov	r0, r5
 80022e0:	f7ff ff74 	bl	80021cc <u8g2_font_get_word>
 80022e4:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80022e6:	2115      	movs	r1, #21
 80022e8:	4628      	mov	r0, r5
 80022ea:	f7ff ff6f 	bl	80021cc <u8g2_font_get_word>
 80022ee:	82e0      	strh	r0, [r4, #22]
}
 80022f0:	bd38      	pop	{r3, r4, r5, pc}

080022f2 <u8g2_GetFontBBXHeight>:
}
 80022f2:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
 80022f6:	4770      	bx	lr

080022f8 <u8g2_font_decode_get_unsigned_bits>:
{
 80022f8:	b470      	push	{r4, r5, r6}
  uint8_t bit_pos = f->decode_bit_pos;
 80022fa:	7a84      	ldrb	r4, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 80022fc:	6806      	ldr	r6, [r0, #0]
 80022fe:	7832      	ldrb	r2, [r6, #0]
  val >>= bit_pos;
 8002300:	fa42 f504 	asr.w	r5, r2, r4
 8002304:	b2ea      	uxtb	r2, r5
  bit_pos_plus_cnt += cnt;
 8002306:	1863      	adds	r3, r4, r1
 8002308:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
 800230a:	2b07      	cmp	r3, #7
 800230c:	d90a      	bls.n	8002324 <u8g2_font_decode_get_unsigned_bits+0x2c>
    s -= bit_pos;
 800230e:	f1c4 0408 	rsb	r4, r4, #8
 8002312:	b2e4      	uxtb	r4, r4
    f->decode_ptr++;
 8002314:	1c72      	adds	r2, r6, #1
 8002316:	6002      	str	r2, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8002318:	7872      	ldrb	r2, [r6, #1]
 800231a:	40a2      	lsls	r2, r4
 800231c:	432a      	orrs	r2, r5
 800231e:	b2d2      	uxtb	r2, r2
    bit_pos_plus_cnt -= 8;
 8002320:	3b08      	subs	r3, #8
 8002322:	b2db      	uxtb	r3, r3
  val &= (1U<<cnt)-1;
 8002324:	f04f 34ff 	mov.w	r4, #4294967295
 8002328:	fa04 f101 	lsl.w	r1, r4, r1
  f->decode_bit_pos = bit_pos_plus_cnt;
 800232c:	7283      	strb	r3, [r0, #10]
}
 800232e:	ea22 0001 	bic.w	r0, r2, r1
 8002332:	bc70      	pop	{r4, r5, r6}
 8002334:	4770      	bx	lr

08002336 <u8g2_font_setup_decode>:
{
 8002336:	b538      	push	{r3, r4, r5, lr}
 8002338:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800233a:	f100 0558 	add.w	r5, r0, #88	; 0x58
  decode->decode_ptr = glyph_data;
 800233e:	6581      	str	r1, [r0, #88]	; 0x58
  decode->decode_bit_pos = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8002346:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
 800234a:	4628      	mov	r0, r5
 800234c:	f7ff ffd4 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
 8002350:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8002354:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 8002358:	4628      	mov	r0, r5
 800235a:	f7ff ffcd 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
 800235e:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  decode->fg_color = u8g2->draw_color;
 8002362:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 8002366:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8002374:	bd38      	pop	{r3, r4, r5, pc}

08002376 <u8g2_font_decode_get_signed_bits>:
{
 8002376:	b510      	push	{r4, lr}
 8002378:	460c      	mov	r4, r1
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800237a:	f7ff ffbd 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
  cnt--;
 800237e:	3c01      	subs	r4, #1
 8002380:	b2e4      	uxtb	r4, r4
  d <<= cnt;
 8002382:	2301      	movs	r3, #1
 8002384:	fa03 f404 	lsl.w	r4, r3, r4
  v -= d;
 8002388:	1b00      	subs	r0, r0, r4
}
 800238a:	b240      	sxtb	r0, r0
 800238c:	bd10      	pop	{r4, pc}

0800238e <u8g2_font_decode_len>:
{
 800238e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	4605      	mov	r5, r0
 8002396:	468a      	mov	sl, r1
 8002398:	9207      	str	r2, [sp, #28]
  lx = decode->x;
 800239a:	f990 405e 	ldrsb.w	r4, [r0, #94]	; 0x5e
 800239e:	fa5f fb84 	uxtb.w	fp, r4
  ly = decode->y;
 80023a2:	f990 305f 	ldrsb.w	r3, [r0, #95]	; 0x5f
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	9303      	str	r3, [sp, #12]
 80023aa:	e019      	b.n	80023e0 <u8g2_font_decode_len+0x52>
      current = cnt;
 80023ac:	f8cd a014 	str.w	sl, [sp, #20]
 80023b0:	e01f      	b.n	80023f2 <u8g2_font_decode_len+0x64>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80023b2:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
 80023b6:	f885 3086 	strb.w	r3, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80023ba:	9700      	str	r7, [sp, #0]
 80023bc:	9b05      	ldr	r3, [sp, #20]
 80023be:	9906      	ldr	r1, [sp, #24]
 80023c0:	4628      	mov	r0, r5
 80023c2:	f000 fa21 	bl	8002808 <u8g2_DrawHVLine>
    if ( cnt < rem )
 80023c6:	45b2      	cmp	sl, r6
 80023c8:	d33c      	bcc.n	8002444 <u8g2_font_decode_len+0xb6>
    cnt -= rem;
 80023ca:	ebab 0404 	sub.w	r4, fp, r4
 80023ce:	44a2      	add	sl, r4
 80023d0:	fa5f fa8a 	uxtb.w	sl, sl
    ly++;
 80023d4:	9b03      	ldr	r3, [sp, #12]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	9303      	str	r3, [sp, #12]
    lx = 0;
 80023dc:	f04f 0b00 	mov.w	fp, #0
    rem = decode->glyph_width;
 80023e0:	f995 4060 	ldrsb.w	r4, [r5, #96]	; 0x60
 80023e4:	b2e4      	uxtb	r4, r4
    rem -= lx;
 80023e6:	eba4 060b 	sub.w	r6, r4, fp
 80023ea:	b2f6      	uxtb	r6, r6
    if ( cnt < rem )
 80023ec:	45b2      	cmp	sl, r6
 80023ee:	d3dd      	bcc.n	80023ac <u8g2_font_decode_len+0x1e>
    current = rem;
 80023f0:	9605      	str	r6, [sp, #20]
    y = decode->target_y;
 80023f2:	f895 905d 	ldrb.w	r9, [r5, #93]	; 0x5d
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80023f6:	fa4f f18b 	sxtb.w	r1, fp
 80023fa:	f99d 800c 	ldrsb.w	r8, [sp, #12]
 80023fe:	f895 7066 	ldrb.w	r7, [r5, #102]	; 0x66
 8002402:	463b      	mov	r3, r7
 8002404:	4642      	mov	r2, r8
 8002406:	9104      	str	r1, [sp, #16]
 8002408:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
 800240c:	f7ff fef6 	bl	80021fc <u8g2_add_vector_x>
 8002410:	9006      	str	r0, [sp, #24]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002412:	463b      	mov	r3, r7
 8002414:	4642      	mov	r2, r8
 8002416:	9904      	ldr	r1, [sp, #16]
 8002418:	4648      	mov	r0, r9
 800241a:	f7ff fede 	bl	80021da <u8g2_add_vector_y>
 800241e:	4602      	mov	r2, r0
    if ( is_foreground )
 8002420:	9b07      	ldr	r3, [sp, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1c5      	bne.n	80023b2 <u8g2_font_decode_len+0x24>
    else if ( decode->is_transparent == 0 )    
 8002426:	f895 3063 	ldrb.w	r3, [r5, #99]	; 0x63
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1cb      	bne.n	80023c6 <u8g2_font_decode_len+0x38>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800242e:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 8002432:	f885 3086 	strb.w	r3, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8002436:	9700      	str	r7, [sp, #0]
 8002438:	9b05      	ldr	r3, [sp, #20]
 800243a:	9906      	ldr	r1, [sp, #24]
 800243c:	4628      	mov	r0, r5
 800243e:	f000 f9e3 	bl	8002808 <u8g2_DrawHVLine>
 8002442:	e7c0      	b.n	80023c6 <u8g2_font_decode_len+0x38>
  lx += cnt;
 8002444:	eb0a 040b 	add.w	r4, sl, fp
  decode->x = lx;
 8002448:	f885 405e 	strb.w	r4, [r5, #94]	; 0x5e
  decode->y = ly;
 800244c:	f885 805f 	strb.w	r8, [r5, #95]	; 0x5f
}
 8002450:	b009      	add	sp, #36	; 0x24
 8002452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002456 <u8g2_font_decode_glyph>:
{
 8002456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800245a:	b085      	sub	sp, #20
 800245c:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800245e:	f100 0558 	add.w	r5, r0, #88	; 0x58
  u8g2_font_setup_decode(u8g2, glyph_data);
 8002462:	f7ff ff68 	bl	8002336 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8002466:	f994 7061 	ldrsb.w	r7, [r4, #97]	; 0x61
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 800246a:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
 800246e:	4628      	mov	r0, r5
 8002470:	f7ff ff81 	bl	8002376 <u8g2_font_decode_get_signed_bits>
 8002474:	4681      	mov	r9, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8002476:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800247a:	4628      	mov	r0, r5
 800247c:	f7ff ff7b 	bl	8002376 <u8g2_font_decode_get_signed_bits>
 8002480:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8002482:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 8002486:	4628      	mov	r0, r5
 8002488:	f7ff ff75 	bl	8002376 <u8g2_font_decode_get_signed_bits>
 800248c:	9002      	str	r0, [sp, #8]
  if ( decode->glyph_width > 0 )
 800248e:	f994 8060 	ldrsb.w	r8, [r4, #96]	; 0x60
 8002492:	f1b8 0f00 	cmp.w	r8, #0
 8002496:	dd59      	ble.n	800254c <u8g2_font_decode_glyph+0xf6>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8002498:	fa5f fa87 	uxtb.w	sl, r7
 800249c:	4456      	add	r6, sl
 800249e:	b2f6      	uxtb	r6, r6
 80024a0:	4276      	negs	r6, r6
 80024a2:	b276      	sxtb	r6, r6
 80024a4:	f894 b066 	ldrb.w	fp, [r4, #102]	; 0x66
 80024a8:	465b      	mov	r3, fp
 80024aa:	4632      	mov	r2, r6
 80024ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80024b0:	4649      	mov	r1, r9
 80024b2:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 80024b6:	f7ff fea1 	bl	80021fc <u8g2_add_vector_x>
 80024ba:	4681      	mov	r9, r0
 80024bc:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80024c0:	465b      	mov	r3, fp
 80024c2:	4632      	mov	r2, r6
 80024c4:	9903      	ldr	r1, [sp, #12]
 80024c6:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80024ca:	f7ff fe86 	bl	80021da <u8g2_add_vector_y>
 80024ce:	4602      	mov	r2, r0
 80024d0:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      switch(decode->dir)
 80024d4:	f1bb 0f03 	cmp.w	fp, #3
 80024d8:	d869      	bhi.n	80025ae <u8g2_font_decode_glyph+0x158>
 80024da:	e8df f00b 	tbb	[pc, fp]
 80024de:	3b02      	.short	0x3b02
 80024e0:	5c49      	.short	0x5c49
	    x1 += decode->glyph_width;
 80024e2:	fa5f f388 	uxtb.w	r3, r8
 80024e6:	444b      	add	r3, r9
 80024e8:	b2db      	uxtb	r3, r3
	    y1 += h;
 80024ea:	4450      	add	r0, sl
 80024ec:	b2c0      	uxtb	r0, r0
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80024ee:	9000      	str	r0, [sp, #0]
 80024f0:	4649      	mov	r1, r9
 80024f2:	4620      	mov	r0, r4
 80024f4:	f000 fa00 	bl	80028f8 <u8g2_IsIntersection>
 80024f8:	b340      	cbz	r0, 800254c <u8g2_font_decode_glyph+0xf6>
    decode->x = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    decode->y = 0;
 8002500:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8002504:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002508:	4628      	mov	r0, r5
 800250a:	f7ff fef5 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
 800250e:	4680      	mov	r8, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002510:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8002514:	4628      	mov	r0, r5
 8002516:	f7ff feef 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
 800251a:	4606      	mov	r6, r0
	u8g2_font_decode_len(u8g2, a, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	4641      	mov	r1, r8
 8002520:	4620      	mov	r0, r4
 8002522:	f7ff ff34 	bl	800238e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8002526:	2201      	movs	r2, #1
 8002528:	4631      	mov	r1, r6
 800252a:	4620      	mov	r0, r4
 800252c:	f7ff ff2f 	bl	800238e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002530:	2101      	movs	r1, #1
 8002532:	4628      	mov	r0, r5
 8002534:	f7ff fee0 	bl	80022f8 <u8g2_font_decode_get_unsigned_bits>
 8002538:	2800      	cmp	r0, #0
 800253a:	d1ef      	bne.n	800251c <u8g2_font_decode_glyph+0xc6>
      if ( decode->y >= h )
 800253c:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
 8002540:	42bb      	cmp	r3, r7
 8002542:	dbdf      	blt.n	8002504 <u8g2_font_decode_glyph+0xae>
    u8g2->draw_color = decode->fg_color;
 8002544:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8002548:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
}
 800254c:	9802      	ldr	r0, [sp, #8]
 800254e:	b005      	add	sp, #20
 8002550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    x0 -= h;
 8002554:	eba9 010a 	sub.w	r1, r9, sl
 8002558:	b2c9      	uxtb	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800255a:	3101      	adds	r1, #1
	    x1++;
 800255c:	f109 0301 	add.w	r3, r9, #1
 8002560:	b2db      	uxtb	r3, r3
	    y1 += decode->glyph_width;
 8002562:	fa5f f088 	uxtb.w	r0, r8
 8002566:	4410      	add	r0, r2
 8002568:	b2c0      	uxtb	r0, r0
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800256a:	fa5f f981 	uxtb.w	r9, r1
	    break;
 800256e:	e7be      	b.n	80024ee <u8g2_font_decode_glyph+0x98>
	    x0 -= decode->glyph_width;
 8002570:	fa5f f188 	uxtb.w	r1, r8
 8002574:	eba9 0101 	sub.w	r1, r9, r1
 8002578:	b2c9      	uxtb	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800257a:	3101      	adds	r1, #1
	    x1++;
 800257c:	f109 0301 	add.w	r3, r9, #1
 8002580:	b2db      	uxtb	r3, r3
	    y0 -= h;
 8002582:	eba0 060a 	sub.w	r6, r0, sl
 8002586:	b2f6      	uxtb	r6, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002588:	3601      	adds	r6, #1
	    y1++;
 800258a:	3201      	adds	r2, #1
 800258c:	b2d0      	uxtb	r0, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800258e:	b2f2      	uxtb	r2, r6
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8002590:	fa5f f981 	uxtb.w	r9, r1
	    break;	  
 8002594:	e7ab      	b.n	80024ee <u8g2_font_decode_glyph+0x98>
	    x1 += h;
 8002596:	eb0a 0309 	add.w	r3, sl, r9
 800259a:	b2db      	uxtb	r3, r3
	    y0 -= decode->glyph_width;
 800259c:	fa5f f188 	uxtb.w	r1, r8
 80025a0:	1a41      	subs	r1, r0, r1
 80025a2:	b2c9      	uxtb	r1, r1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80025a4:	3101      	adds	r1, #1
	    y1++;
 80025a6:	3201      	adds	r2, #1
 80025a8:	b2d0      	uxtb	r0, r2
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80025aa:	b2ca      	uxtb	r2, r1
	    break;	  
 80025ac:	e79f      	b.n	80024ee <u8g2_font_decode_glyph+0x98>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80025ae:	464b      	mov	r3, r9
 80025b0:	e79d      	b.n	80024ee <u8g2_font_decode_glyph+0x98>

080025b2 <u8g2_font_get_glyph_data>:
{
 80025b2:	b570      	push	{r4, r5, r6, lr}
 80025b4:	460e      	mov	r6, r1
  const uint8_t *font = u8g2->font;
 80025b6:	6d04      	ldr	r4, [r0, #80]	; 0x50
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80025b8:	3417      	adds	r4, #23
  if ( encoding <= 255 )
 80025ba:	29ff      	cmp	r1, #255	; 0xff
 80025bc:	d813      	bhi.n	80025e6 <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 80025be:	2960      	cmp	r1, #96	; 0x60
 80025c0:	d909      	bls.n	80025d6 <u8g2_font_get_glyph_data+0x24>
      font += u8g2->font_info.start_pos_lower_a;
 80025c2:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 80025c6:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80025c8:	7863      	ldrb	r3, [r4, #1]
 80025ca:	b343      	cbz	r3, 800261e <u8g2_font_get_glyph_data+0x6c>
      if ( u8x8_pgm_read( font ) == encoding )
 80025cc:	7822      	ldrb	r2, [r4, #0]
 80025ce:	42b2      	cmp	r2, r6
 80025d0:	d007      	beq.n	80025e2 <u8g2_font_get_glyph_data+0x30>
      font += u8x8_pgm_read( font + 1 );
 80025d2:	441c      	add	r4, r3
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80025d4:	e7f8      	b.n	80025c8 <u8g2_font_get_glyph_data+0x16>
    else if ( encoding >= 'A' )
 80025d6:	2940      	cmp	r1, #64	; 0x40
 80025d8:	d9f6      	bls.n	80025c8 <u8g2_font_get_glyph_data+0x16>
      font += u8g2->font_info.start_pos_upper_A;
 80025da:	f8b0 307a 	ldrh.w	r3, [r0, #122]	; 0x7a
 80025de:	441c      	add	r4, r3
 80025e0:	e7f2      	b.n	80025c8 <u8g2_font_get_glyph_data+0x16>
	return font+2;	/* skip encoding and glyph size */
 80025e2:	1ca0      	adds	r0, r4, #2
 80025e4:	e01c      	b.n	8002620 <u8g2_font_get_glyph_data+0x6e>
    font += u8g2->font_info.start_pos_unicode;
 80025e6:	f8b0 007e 	ldrh.w	r0, [r0, #126]	; 0x7e
 80025ea:	4404      	add	r4, r0
    unicode_lookup_table = font; 
 80025ec:	4625      	mov	r5, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80025ee:	2100      	movs	r1, #0
 80025f0:	4628      	mov	r0, r5
 80025f2:	f7ff fdeb 	bl	80021cc <u8g2_font_get_word>
 80025f6:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80025f8:	2102      	movs	r1, #2
 80025fa:	4628      	mov	r0, r5
 80025fc:	f7ff fde6 	bl	80021cc <u8g2_font_get_word>
      unicode_lookup_table+=4;
 8002600:	3504      	adds	r5, #4
    } while( e < encoding );
 8002602:	4286      	cmp	r6, r0
 8002604:	d8f3      	bhi.n	80025ee <u8g2_font_get_glyph_data+0x3c>
      e = u8x8_pgm_read( font );
 8002606:	7822      	ldrb	r2, [r4, #0]
      e |= u8x8_pgm_read( font + 1 );
 8002608:	7863      	ldrb	r3, [r4, #1]
      if ( e == 0 )
 800260a:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 800260e:	d008      	beq.n	8002622 <u8g2_font_get_glyph_data+0x70>
      if ( e == encoding )
 8002610:	429e      	cmp	r6, r3
 8002612:	d002      	beq.n	800261a <u8g2_font_get_glyph_data+0x68>
      font += u8x8_pgm_read( font + 2 );
 8002614:	78a3      	ldrb	r3, [r4, #2]
 8002616:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
 8002618:	e7f5      	b.n	8002606 <u8g2_font_get_glyph_data+0x54>
	return font+3;	/* skip encoding and glyph size */
 800261a:	1ce0      	adds	r0, r4, #3
 800261c:	e000      	b.n	8002620 <u8g2_font_get_glyph_data+0x6e>
  return NULL;
 800261e:	2000      	movs	r0, #0
}
 8002620:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 8002622:	2000      	movs	r0, #0
 8002624:	e7fc      	b.n	8002620 <u8g2_font_get_glyph_data+0x6e>

08002626 <u8g2_font_draw_glyph>:
{
 8002626:	b510      	push	{r4, lr}
 8002628:	4604      	mov	r4, r0
  u8g2->font_decode.target_x = x;
 800262a:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 800262e:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002632:	4619      	mov	r1, r3
 8002634:	f7ff ffbd 	bl	80025b2 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8002638:	b128      	cbz	r0, 8002646 <u8g2_font_draw_glyph+0x20>
 800263a:	4601      	mov	r1, r0
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800263c:	4620      	mov	r0, r4
 800263e:	f7ff ff0a 	bl	8002456 <u8g2_font_decode_glyph>
 8002642:	b2c0      	uxtb	r0, r0
}
 8002644:	bd10      	pop	{r4, pc}
  u8g2_uint_t dx = 0;
 8002646:	2000      	movs	r0, #0
 8002648:	e7fc      	b.n	8002644 <u8g2_font_draw_glyph+0x1e>

0800264a <u8g2_DrawGlyph>:
{
 800264a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800264c:	4604      	mov	r4, r0
 800264e:	460d      	mov	r5, r1
 8002650:	4616      	mov	r6, r2
 8002652:	461f      	mov	r7, r3
  switch(u8g2->font_decode.dir)
 8002654:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8002658:	2b03      	cmp	r3, #3
 800265a:	d807      	bhi.n	800266c <u8g2_DrawGlyph+0x22>
 800265c:	e8df f003 	tbb	[pc, r3]
 8002660:	17120d02 	.word	0x17120d02
      y += u8g2->font_calc_vref(u8g2);
 8002664:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002666:	4798      	blx	r3
 8002668:	4406      	add	r6, r0
 800266a:	b2f6      	uxtb	r6, r6
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 800266c:	463b      	mov	r3, r7
 800266e:	4632      	mov	r2, r6
 8002670:	4629      	mov	r1, r5
 8002672:	4620      	mov	r0, r4
 8002674:	f7ff ffd7 	bl	8002626 <u8g2_font_draw_glyph>
}
 8002678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 800267a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800267c:	4798      	blx	r3
 800267e:	1a2d      	subs	r5, r5, r0
 8002680:	b2ed      	uxtb	r5, r5
      break;
 8002682:	e7f3      	b.n	800266c <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 8002684:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002686:	4798      	blx	r3
 8002688:	1a36      	subs	r6, r6, r0
 800268a:	b2f6      	uxtb	r6, r6
      break;
 800268c:	e7ee      	b.n	800266c <u8g2_DrawGlyph+0x22>
      x += u8g2->font_calc_vref(u8g2);
 800268e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002690:	4798      	blx	r3
 8002692:	4405      	add	r5, r0
 8002694:	b2ed      	uxtb	r5, r5
      break;
 8002696:	e7e9      	b.n	800266c <u8g2_DrawGlyph+0x22>

08002698 <u8g2_draw_string>:
{
 8002698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800269c:	4604      	mov	r4, r0
 800269e:	460f      	mov	r7, r1
 80026a0:	4616      	mov	r6, r2
 80026a2:	461d      	mov	r5, r3
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80026a4:	f000 fa46 	bl	8002b34 <u8x8_utf8_init>
  sum = 0;
 80026a8:	f04f 0800 	mov.w	r8, #0
 80026ac:	e004      	b.n	80026b8 <u8g2_draw_string+0x20>
	  x += delta;
 80026ae:	4407      	add	r7, r0
 80026b0:	b2ff      	uxtb	r7, r7
      sum += delta;    
 80026b2:	4440      	add	r0, r8
 80026b4:	fa5f f880 	uxtb.w	r8, r0
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	7829      	ldrb	r1, [r5, #0]
 80026bc:	4620      	mov	r0, r4
 80026be:	4798      	blx	r3
    if ( e == 0x0ffff )
 80026c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c4:	4290      	cmp	r0, r2
 80026c6:	d022      	beq.n	800270e <u8g2_draw_string+0x76>
    str++;
 80026c8:	3501      	adds	r5, #1
    if ( e != 0x0fffe )
 80026ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80026ce:	4290      	cmp	r0, r2
 80026d0:	d0f2      	beq.n	80026b8 <u8g2_draw_string+0x20>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80026d2:	4603      	mov	r3, r0
 80026d4:	4632      	mov	r2, r6
 80026d6:	4639      	mov	r1, r7
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ffb6 	bl	800264a <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 80026de:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d8e5      	bhi.n	80026b2 <u8g2_draw_string+0x1a>
 80026e6:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <u8g2_draw_string+0x54>)
 80026e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ec:	080026af 	.word	0x080026af
 80026f0:	080026fd 	.word	0x080026fd
 80026f4:	08002703 	.word	0x08002703
 80026f8:	08002709 	.word	0x08002709
	  y += delta;
 80026fc:	4406      	add	r6, r0
 80026fe:	b2f6      	uxtb	r6, r6
	  break;
 8002700:	e7d7      	b.n	80026b2 <u8g2_draw_string+0x1a>
	  x -= delta;
 8002702:	1a3f      	subs	r7, r7, r0
 8002704:	b2ff      	uxtb	r7, r7
	  break;
 8002706:	e7d4      	b.n	80026b2 <u8g2_draw_string+0x1a>
	  y -= delta;
 8002708:	1a36      	subs	r6, r6, r0
 800270a:	b2f6      	uxtb	r6, r6
	  break;
 800270c:	e7d1      	b.n	80026b2 <u8g2_draw_string+0x1a>
}
 800270e:	4640      	mov	r0, r8
 8002710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002714 <u8g2_DrawStr>:
{
 8002714:	b510      	push	{r4, lr}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002716:	4c02      	ldr	r4, [pc, #8]	; (8002720 <u8g2_DrawStr+0xc>)
 8002718:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800271a:	f7ff ffbd 	bl	8002698 <u8g2_draw_string>
}
 800271e:	bd10      	pop	{r4, pc}
 8002720:	08002b1f 	.word	0x08002b1f

08002724 <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 8002724:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002726:	b363      	cbz	r3, 8002782 <u8g2_UpdateRefHeight+0x5e>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002728:	f990 2075 	ldrsb.w	r2, [r0, #117]	; 0x75
 800272c:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002730:	f990 3076 	ldrsb.w	r3, [r0, #118]	; 0x76
 8002734:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002738:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
 800273c:	b309      	cbz	r1, 8002782 <u8g2_UpdateRefHeight+0x5e>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 800273e:	2901      	cmp	r1, #1
 8002740:	d012      	beq.n	8002768 <u8g2_UpdateRefHeight+0x44>
{
 8002742:	b430      	push	{r4, r5}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002744:	f990 1072 	ldrsb.w	r1, [r0, #114]	; 0x72
 8002748:	f990 4074 	ldrsb.w	r4, [r0, #116]	; 0x74
 800274c:	190d      	adds	r5, r1, r4
 800274e:	42aa      	cmp	r2, r5
 8002750:	da04      	bge.n	800275c <u8g2_UpdateRefHeight+0x38>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002752:	b2c9      	uxtb	r1, r1
 8002754:	b2e2      	uxtb	r2, r4
 8002756:	4411      	add	r1, r2
 8002758:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800275c:	42a3      	cmp	r3, r4
 800275e:	dd01      	ble.n	8002764 <u8g2_UpdateRefHeight+0x40>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002760:	f880 4083 	strb.w	r4, [r0, #131]	; 0x83
}
 8002764:	bc30      	pop	{r4, r5}
 8002766:	4770      	bx	lr
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8002768:	f990 1077 	ldrsb.w	r1, [r0, #119]	; 0x77
 800276c:	428a      	cmp	r2, r1
 800276e:	da01      	bge.n	8002774 <u8g2_UpdateRefHeight+0x50>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002770:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002774:	f990 2078 	ldrsb.w	r2, [r0, #120]	; 0x78
 8002778:	4293      	cmp	r3, r2
 800277a:	dd02      	ble.n	8002782 <u8g2_UpdateRefHeight+0x5e>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 800277c:	f880 2083 	strb.w	r2, [r0, #131]	; 0x83
 8002780:	4770      	bx	lr
 8002782:	4770      	bx	lr

08002784 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002784:	4b01      	ldr	r3, [pc, #4]	; (800278c <u8g2_SetFontPosBaseline+0x8>)
 8002786:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	0800221f 	.word	0x0800221f

08002790 <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 8002790:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002792:	428b      	cmp	r3, r1
 8002794:	d009      	beq.n	80027aa <u8g2_SetFont+0x1a>
{
 8002796:	b510      	push	{r4, lr}
 8002798:	4604      	mov	r4, r0
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800279a:	6501      	str	r1, [r0, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 800279c:	3068      	adds	r0, #104	; 0x68
 800279e:	f7ff fd40 	bl	8002222 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7ff ffbe 	bl	8002724 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	4770      	bx	lr

080027ac <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80027ac:	b430      	push	{r4, r5}
  u8g2_uint_t a = *ap;
 80027ae:	7805      	ldrb	r5, [r0, #0]
  u8g2_uint_t b;
  b  = a;
  b += *len;
 80027b0:	780c      	ldrb	r4, [r1, #0]
 80027b2:	442c      	add	r4, r5
 80027b4:	b2e4      	uxtb	r4, r4
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80027b6:	42a5      	cmp	r5, r4
 80027b8:	d903      	bls.n	80027c2 <u8g2_clip_intersection2+0x16>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80027ba:	429d      	cmp	r5, r3
 80027bc:	d211      	bcs.n	80027e2 <u8g2_clip_intersection2+0x36>
    {
      b = d;
      b--;
 80027be:	1e5c      	subs	r4, r3, #1
 80027c0:	b2e4      	uxtb	r4, r4
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80027c2:	429d      	cmp	r5, r3
 80027c4:	d20f      	bcs.n	80027e6 <u8g2_clip_intersection2+0x3a>
    return 0;
  if ( b <= c )
 80027c6:	4294      	cmp	r4, r2
 80027c8:	d90f      	bls.n	80027ea <u8g2_clip_intersection2+0x3e>
    return 0;
  if ( a < c )		
 80027ca:	4295      	cmp	r5, r2
 80027cc:	d300      	bcc.n	80027d0 <u8g2_clip_intersection2+0x24>
 80027ce:	462a      	mov	r2, r5
    a = c;
  if ( b > d )
 80027d0:	429c      	cmp	r4, r3
 80027d2:	d800      	bhi.n	80027d6 <u8g2_clip_intersection2+0x2a>
 80027d4:	4623      	mov	r3, r4
    b = d;
  
  *ap = a;
 80027d6:	7002      	strb	r2, [r0, #0]
  b -= a;
 80027d8:	1a9b      	subs	r3, r3, r2
  *len = b;
 80027da:	700b      	strb	r3, [r1, #0]
  return 1;
 80027dc:	2001      	movs	r0, #1
}
 80027de:	bc30      	pop	{r4, r5}
 80027e0:	4770      	bx	lr
      a = c;
 80027e2:	4615      	mov	r5, r2
 80027e4:	e7ed      	b.n	80027c2 <u8g2_clip_intersection2+0x16>
    return 0;
 80027e6:	2000      	movs	r0, #0
 80027e8:	e7f9      	b.n	80027de <u8g2_clip_intersection2+0x32>
    return 0;
 80027ea:	2000      	movs	r0, #0
 80027ec:	e7f7      	b.n	80027de <u8g2_clip_intersection2+0x32>

080027ee <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80027ee:	b530      	push	{r4, r5, lr}
 80027f0:	b083      	sub	sp, #12

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80027f2:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
 80027f6:	1b52      	subs	r2, r2, r5
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80027f8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80027fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80027fe:	9500      	str	r5, [sp, #0]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	47a0      	blx	r4
}
 8002804:	b003      	add	sp, #12
 8002806:	bd30      	pop	{r4, r5, pc}

08002808 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002808:	b570      	push	{r4, r5, r6, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	4604      	mov	r4, r0
 800280e:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8002812:	f88d 100f 	strb.w	r1, [sp, #15]
 8002816:	f88d 200e 	strb.w	r2, [sp, #14]
 800281a:	f88d 300d 	strb.w	r3, [sp, #13]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 800281e:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8002822:	b35b      	cbz	r3, 800287c <u8g2_DrawHVLine+0x74>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002824:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002828:	b343      	cbz	r3, 800287c <u8g2_DrawHVLine+0x74>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 800282a:	2b01      	cmp	r3, #1
 800282c:	d903      	bls.n	8002836 <u8g2_DrawHVLine+0x2e>
      {
	if ( dir == 2 )
 800282e:	2802      	cmp	r0, #2
 8002830:	d026      	beq.n	8002880 <u8g2_DrawHVLine+0x78>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
 8002832:	2803      	cmp	r0, #3
 8002834:	d02b      	beq.n	800288e <u8g2_DrawHVLine+0x86>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 8002836:	f010 0501 	ands.w	r5, r0, #1
 800283a:	d130      	bne.n	800289e <u8g2_DrawHVLine+0x96>
      {
	if ( y < u8g2->user_y0 )
 800283c:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8002840:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8002844:	429a      	cmp	r2, r3
 8002846:	d819      	bhi.n	800287c <u8g2_DrawHVLine+0x74>
	  return;
	if ( y >= u8g2->user_y1 )
 8002848:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800284c:	4293      	cmp	r3, r2
 800284e:	d215      	bcs.n	800287c <u8g2_DrawHVLine+0x74>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002850:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002854:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002858:	f10d 010d 	add.w	r1, sp, #13
 800285c:	f10d 000f 	add.w	r0, sp, #15
 8002860:	f7ff ffa4 	bl	80027ac <u8g2_clip_intersection2>
 8002864:	b150      	cbz	r0, 800287c <u8g2_DrawHVLine+0x74>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002866:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002868:	689e      	ldr	r6, [r3, #8]
 800286a:	9500      	str	r5, [sp, #0]
 800286c:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002870:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002874:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8002878:	4620      	mov	r0, r4
 800287a:	47b0      	blx	r6
    }
}
 800287c:	b004      	add	sp, #16
 800287e:	bd70      	pop	{r4, r5, r6, pc}
	  x -= len;
 8002880:	b2ca      	uxtb	r2, r1
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	b2db      	uxtb	r3, r3
	  x++;
 8002886:	3301      	adds	r3, #1
 8002888:	f88d 300f 	strb.w	r3, [sp, #15]
 800288c:	e7d3      	b.n	8002836 <u8g2_DrawHVLine+0x2e>
	  y -= len;
 800288e:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	b2db      	uxtb	r3, r3
	  y++;
 8002896:	3301      	adds	r3, #1
 8002898:	f88d 300e 	strb.w	r3, [sp, #14]
 800289c:	e7cb      	b.n	8002836 <u8g2_DrawHVLine+0x2e>
	if ( x < u8g2->user_x0 )
 800289e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80028a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d8e8      	bhi.n	800287c <u8g2_DrawHVLine+0x74>
	if ( x >= u8g2->user_x1 )
 80028aa:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d2e4      	bcs.n	800287c <u8g2_DrawHVLine+0x74>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80028b2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80028b6:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80028ba:	f10d 010d 	add.w	r1, sp, #13
 80028be:	f10d 000e 	add.w	r0, sp, #14
 80028c2:	f7ff ff73 	bl	80027ac <u8g2_clip_intersection2>
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d1cd      	bne.n	8002866 <u8g2_DrawHVLine+0x5e>
 80028ca:	e7d7      	b.n	800287c <u8g2_DrawHVLine+0x74>

080028cc <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 80028cc:	428a      	cmp	r2, r1
 80028ce:	d205      	bcs.n	80028dc <u8g2_is_intersection_decision_tree+0x10>
  {
    if ( v1 > a0 )	// v1 >= a0
 80028d0:	4283      	cmp	r3, r0
 80028d2:	d809      	bhi.n	80028e8 <u8g2_is_intersection_decision_tree+0x1c>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d909      	bls.n	80028ec <u8g2_is_intersection_decision_tree+0x20>
      {
	return 1;
 80028d8:	2001      	movs	r0, #1
 80028da:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80028dc:	4283      	cmp	r3, r0
 80028de:	d907      	bls.n	80028f0 <u8g2_is_intersection_decision_tree+0x24>
    {
      if ( v0 > v1 )	// v0 > v1
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d907      	bls.n	80028f4 <u8g2_is_intersection_decision_tree+0x28>
      {
	return 1;
 80028e4:	2001      	movs	r0, #1
 80028e6:	4770      	bx	lr
      return 1;
 80028e8:	2001      	movs	r0, #1
 80028ea:	4770      	bx	lr
	return 0;
 80028ec:	2000      	movs	r0, #0
 80028ee:	4770      	bx	lr
	return 0;
      }
    }
    else
    {
      return 0;
 80028f0:	2000      	movs	r0, #0
 80028f2:	4770      	bx	lr
	return 0;
 80028f4:	2000      	movs	r0, #0
    }
  }
}
 80028f6:	4770      	bx	lr

080028f8 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	460d      	mov	r5, r1
 80028fe:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002900:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002904:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8002908:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 800290c:	f7ff ffde 	bl	80028cc <u8g2_is_intersection_decision_tree>
 8002910:	b138      	cbz	r0, 8002922 <u8g2_IsIntersection+0x2a>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002912:	4633      	mov	r3, r6
 8002914:	462a      	mov	r2, r5
 8002916:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 800291a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 800291e:	f7ff ffd5 	bl	80028cc <u8g2_is_intersection_decision_tree>
}
 8002922:	bd70      	pop	{r4, r5, r6, pc}

08002924 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002926:	f89d e014 	ldrb.w	lr, [sp, #20]
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800292a:	f002 0507 	and.w	r5, r2, #7
  mask = 1;
  mask <<= bit_pos;
 800292e:	2401      	movs	r4, #1
 8002930:	40ac      	lsls	r4, r5
 8002932:	b2e4      	uxtb	r4, r4

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 8002934:	f890 7086 	ldrb.w	r7, [r0, #134]	; 0x86
 8002938:	2f01      	cmp	r7, #1
 800293a:	d919      	bls.n	8002970 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
  or_mask = 0;
 800293c:	2600      	movs	r6, #0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
 800293e:	2f01      	cmp	r7, #1
 8002940:	d018      	beq.n	8002974 <u8g2_ll_hvline_vertical_top_lsb+0x50>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 8002942:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002946:	6807      	ldr	r7, [r0, #0]
 8002948:	f897 c010 	ldrb.w	ip, [r7, #16]
  ptr = u8g2->tile_buf_ptr;
 800294c:	6b87      	ldr	r7, [r0, #56]	; 0x38
  ptr += offset;
  ptr += x;
 800294e:	fb02 120c 	mla	r2, r2, ip, r1
 8002952:	18b9      	adds	r1, r7, r2
  
  if ( dir == 0 )
 8002954:	f1be 0f00 	cmp.w	lr, #0
 8002958:	d116      	bne.n	8002988 <u8g2_ll_hvline_vertical_top_lsb+0x64>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 800295a:	780a      	ldrb	r2, [r1, #0]
 800295c:	4332      	orrs	r2, r6
 800295e:	b2d2      	uxtb	r2, r2
	*ptr ^= xor_mask;
 8002960:	4062      	eors	r2, r4
 8002962:	f801 2b01 	strb.w	r2, [r1], #1
	ptr++;
	len--;
 8002966:	3b01      	subs	r3, #1
      } while( len != 0 );
 8002968:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 800296c:	d1f5      	bne.n	800295a <u8g2_ll_hvline_vertical_top_lsb+0x36>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800296e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    or_mask  = mask;
 8002970:	4626      	mov	r6, r4
 8002972:	e7e4      	b.n	800293e <u8g2_ll_hvline_vertical_top_lsb+0x1a>
  xor_mask = 0;
 8002974:	2400      	movs	r4, #0
 8002976:	e7e4      	b.n	8002942 <u8g2_ll_hvline_vertical_top_lsb+0x1e>
	  or_mask  = 1;
 8002978:	2601      	movs	r6, #1
 800297a:	e017      	b.n	80029ac <u8g2_ll_hvline_vertical_top_lsb+0x88>
	or_mask <<= 1;
 800297c:	0076      	lsls	r6, r6, #1
 800297e:	b2f6      	uxtb	r6, r6
	xor_mask <<= 1;
 8002980:	0064      	lsls	r4, r4, #1
 8002982:	b2e4      	uxtb	r4, r4
    } while( len != 0 );
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f2      	beq.n	800296e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
      *ptr |= or_mask;
 8002988:	780a      	ldrb	r2, [r1, #0]
 800298a:	4332      	orrs	r2, r6
 800298c:	b2d2      	uxtb	r2, r2
      *ptr ^= xor_mask;
 800298e:	4062      	eors	r2, r4
 8002990:	700a      	strb	r2, [r1, #0]
      bit_pos++;
 8002992:	1c6a      	adds	r2, r5, #1
      len--;
 8002994:	3b01      	subs	r3, #1
 8002996:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 8002998:	f012 0507 	ands.w	r5, r2, #7
 800299c:	d1ee      	bne.n	800297c <u8g2_ll_hvline_vertical_top_lsb+0x58>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 800299e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80029a2:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 80029a4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 80029a8:	2a01      	cmp	r2, #1
 80029aa:	d9e5      	bls.n	8002978 <u8g2_ll_hvline_vertical_top_lsb+0x54>
	if ( u8g2->draw_color != 1 )
 80029ac:	2a01      	cmp	r2, #1
 80029ae:	d0e9      	beq.n	8002984 <u8g2_ll_hvline_vertical_top_lsb+0x60>
	  xor_mask = 1;
 80029b0:	2401      	movs	r4, #1
 80029b2:	e7e7      	b.n	8002984 <u8g2_ll_hvline_vertical_top_lsb+0x60>

080029b4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80029b4:	b470      	push	{r4, r5, r6}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80029b6:	6801      	ldr	r1, [r0, #0]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80029b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  t *= 8;
 80029bc:	00da      	lsls	r2, r3, #3
  u8g2->pixel_buf_height = t;
 80029be:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
  
  t = display_info->tile_width;
 80029c2:	7c0a      	ldrb	r2, [r1, #16]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 80029c4:	2a1f      	cmp	r2, #31
 80029c6:	d900      	bls.n	80029ca <u8g2_update_dimension_common+0x16>
    t = 31;
 80029c8:	221f      	movs	r2, #31
#endif
  t *= 8;
 80029ca:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_buf_width = t;
 80029cc:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 80029d0:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
  t *= 8;
 80029d4:	00ea      	lsls	r2, r5, #3
 80029d6:	b2d2      	uxtb	r2, r2
  u8g2->pixel_curr_row = t;
 80029d8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80029dc:	195e      	adds	r6, r3, r5
 80029de:	7c4c      	ldrb	r4, [r1, #17]
 80029e0:	42a6      	cmp	r6, r4
 80029e2:	dd01      	ble.n	80029e8 <u8g2_update_dimension_common+0x34>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80029e4:	1b63      	subs	r3, r4, r5
 80029e6:	b2db      	uxtb	r3, r3
  t *= 8;
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	b2db      	uxtb	r3, r3
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80029ec:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
 80029f0:	4413      	add	r3, r2
 80029f2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80029f6:	23f0      	movs	r3, #240	; 0xf0
 80029f8:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 80029fc:	8a8b      	ldrh	r3, [r1, #20]
 80029fe:	2bf0      	cmp	r3, #240	; 0xf0
 8002a00:	d801      	bhi.n	8002a06 <u8g2_update_dimension_common+0x52>
    u8g2->width = display_info->pixel_width;
 8002a02:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8002a06:	8acb      	ldrh	r3, [r1, #22]
 8002a08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
#endif

}
 8002a0c:	bc70      	pop	{r4, r5, r6}
 8002a0e:	4770      	bx	lr

08002a10 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002a10:	b508      	push	{r3, lr}
  u8g2_update_dimension_common(u8g2);  
 8002a12:	f7ff ffcf 	bl	80029b4 <u8g2_update_dimension_common>
}
 8002a16:	bd08      	pop	{r3, pc}

08002a18 <u8g2_apply_clip_window>:
{
 8002a18:	b510      	push	{r4, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002a1e:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8002a28:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8002a2c:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8002a30:	f7ff ff62 	bl	80028f8 <u8g2_IsIntersection>
 8002a34:	b920      	cbnz	r0, 8002a40 <u8g2_apply_clip_window+0x28>
    u8g2->is_page_clip_window_intersection = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8002a3c:	b002      	add	sp, #8
 8002a3e:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002a46:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002a4a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d201      	bcs.n	8002a56 <u8g2_apply_clip_window+0x3e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002a52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002a56:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002a5a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d901      	bls.n	8002a66 <u8g2_apply_clip_window+0x4e>
      u8g2->user_x1 = u8g2->clip_x1;
 8002a62:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002a66:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8002a6a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d201      	bcs.n	8002a76 <u8g2_apply_clip_window+0x5e>
      u8g2->user_y0 = u8g2->clip_y0;
 8002a72:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002a76:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002a7a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d9dc      	bls.n	8002a3c <u8g2_apply_clip_window+0x24>
      u8g2->user_y1 = u8g2->clip_y1;
 8002a82:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
}
 8002a86:	e7d9      	b.n	8002a3c <u8g2_apply_clip_window+0x24>

08002a88 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002a88:	b508      	push	{r3, lr}
  u8g2->user_x0 = 0;
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002a90:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8002a94:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002a98:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002a9c:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8002aa0:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8002aa4:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002aa8:	f7ff ffb6 	bl	8002a18 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002aac:	bd08      	pop	{r3, pc}

08002aae <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002aae:	b510      	push	{r4, lr}
 8002ab0:	b082      	sub	sp, #8
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002ab2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8002ab6:	9400      	str	r4, [sp, #0]
 8002ab8:	f7ff fe99 	bl	80027ee <u8g2_draw_hv_line_2dir>
}
 8002abc:	b002      	add	sp, #8
 8002abe:	bd10      	pop	{r4, pc}

08002ac0 <u8g2_SetMaxClipWindow>:
{
 8002ac0:	b508      	push	{r3, lr}
  u8g2->clip_x0 = 0;
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8002ac8:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ad2:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  u8g2->cb->update_page_win(u8g2);
 8002ad6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4798      	blx	r3
}
 8002adc:	bd08      	pop	{r3, pc}

08002ade <u8g2_SetupBuffer>:
{
 8002ade:	b570      	push	{r4, r5, r6, lr}
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	9e04      	ldr	r6, [sp, #16]
  u8g2->font = NULL;
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	6505      	str	r5, [r0, #80]	; 0x50
  u8g2->ll_hvline = ll_hvline_cb;
 8002ae8:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->tile_buf_ptr = buf;
 8002aea:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8002aec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 8002af0:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002af4:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8002af8:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
  u8g2->draw_color = 1;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8002b02:	f880 3087 	strb.w	r3, [r0, #135]	; 0x87
  u8g2->cb = u8g2_cb;
 8002b06:	6346      	str	r6, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8002b08:	6833      	ldr	r3, [r6, #0]
 8002b0a:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ffd7 	bl	8002ac0 <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7ff fe36 	bl	8002784 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 8002b18:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
}
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}

08002b1e <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002b1e:	b119      	cbz	r1, 8002b28 <u8x8_ascii_next+0xa>
 8002b20:	290a      	cmp	r1, #10
 8002b22:	d004      	beq.n	8002b2e <u8x8_ascii_next+0x10>
    return 0x0ffff;	/* end of string detected*/
  return b;
 8002b24:	b288      	uxth	r0, r1
 8002b26:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 8002b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002b2c:	4770      	bx	lr
 8002b2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8002b32:	4770      	bx	lr

08002b34 <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002b34:	2300      	movs	r3, #0
 8002b36:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 8002b3a:	4770      	bx	lr

08002b3c <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002b40:	6904      	ldr	r4, [r0, #16]
 8002b42:	460a      	mov	r2, r1
 8002b44:	2117      	movs	r1, #23
 8002b46:	47a0      	blx	r4
}
 8002b48:	bd10      	pop	{r4, pc}

08002b4a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b4a:	b500      	push	{lr}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002b52:	f10d 0207 	add.w	r2, sp, #7
 8002b56:	2101      	movs	r1, #1
 8002b58:	f7ff fff0 	bl	8002b3c <u8x8_byte_SendBytes>
}
 8002b5c:	b003      	add	sp, #12
 8002b5e:	f85d fb04 	ldr.w	pc, [sp], #4

08002b62 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002b62:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002b64:	6904      	ldr	r4, [r0, #16]
 8002b66:	2300      	movs	r3, #0
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2118      	movs	r1, #24
 8002b6c:	47a0      	blx	r4
}
 8002b6e:	bd10      	pop	{r4, pc}

08002b70 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002b70:	b510      	push	{r4, lr}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002b72:	6904      	ldr	r4, [r0, #16]
 8002b74:	2300      	movs	r3, #0
 8002b76:	461a      	mov	r2, r3
 8002b78:	2119      	movs	r1, #25
 8002b7a:	47a0      	blx	r4
}
 8002b7c:	bd10      	pop	{r4, pc}

08002b7e <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002b7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b80:	4604      	mov	r4, r0
 8002b82:	460d      	mov	r5, r1
 8002b84:	4616      	mov	r6, r2
    u8x8_byte_StartTransfer(u8x8);    
 8002b86:	f7ff ffec 	bl	8002b62 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002b8a:	2140      	movs	r1, #64	; 0x40
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ffdc 	bl	8002b4a <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002b92:	6927      	ldr	r7, [r4, #16]
 8002b94:	4633      	mov	r3, r6
 8002b96:	462a      	mov	r2, r5
 8002b98:	2117      	movs	r1, #23
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	47b8      	blx	r7
    u8x8_byte_EndTransfer(u8x8);
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff ffe6 	bl	8002b70 <u8x8_byte_EndTransfer>
}
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ba6 <u8x8_cad_SendCmd>:
{
 8002ba6:	b510      	push	{r4, lr}
 8002ba8:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002baa:	68c4      	ldr	r4, [r0, #12]
 8002bac:	2300      	movs	r3, #0
 8002bae:	2115      	movs	r1, #21
 8002bb0:	47a0      	blx	r4
}
 8002bb2:	bd10      	pop	{r4, pc}

08002bb4 <u8x8_cad_SendArg>:
{
 8002bb4:	b510      	push	{r4, lr}
 8002bb6:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002bb8:	68c4      	ldr	r4, [r0, #12]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2116      	movs	r1, #22
 8002bbe:	47a0      	blx	r4
}
 8002bc0:	bd10      	pop	{r4, pc}

08002bc2 <u8x8_cad_SendData>:
{
 8002bc2:	b510      	push	{r4, lr}
 8002bc4:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002bc6:	68c4      	ldr	r4, [r0, #12]
 8002bc8:	460a      	mov	r2, r1
 8002bca:	2117      	movs	r1, #23
 8002bcc:	47a0      	blx	r4
}
 8002bce:	bd10      	pop	{r4, pc}

08002bd0 <u8x8_cad_StartTransfer>:
{
 8002bd0:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002bd2:	68c4      	ldr	r4, [r0, #12]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2118      	movs	r1, #24
 8002bda:	47a0      	blx	r4
}
 8002bdc:	bd10      	pop	{r4, pc}

08002bde <u8x8_cad_EndTransfer>:
{
 8002bde:	b510      	push	{r4, lr}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002be0:	68c4      	ldr	r4, [r0, #12]
 8002be2:	2300      	movs	r3, #0
 8002be4:	461a      	mov	r2, r3
 8002be6:	2119      	movs	r1, #25
 8002be8:	47a0      	blx	r4
}
 8002bea:	bd10      	pop	{r4, pc}

08002bec <u8x8_cad_SendSequence>:
{
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	4606      	mov	r6, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	e016      	b.n	8002c24 <u8x8_cad_SendSequence+0x38>
    switch( cmd )
 8002bf6:	2915      	cmp	r1, #21
 8002bf8:	d20c      	bcs.n	8002c14 <u8x8_cad_SendSequence+0x28>
}
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
    switch( cmd )
 8002bfe:	29fe      	cmp	r1, #254	; 0xfe
 8002c00:	d1fb      	bne.n	8002bfa <u8x8_cad_SendSequence+0xe>
	  v = *data;
 8002c02:	7822      	ldrb	r2, [r4, #0]
 8002c04:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002c08:	2129      	movs	r1, #41	; 0x29
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f000 f981 	bl	8002f12 <u8x8_gpio_call>
	  data++;
 8002c10:	3502      	adds	r5, #2
	  break;
 8002c12:	e007      	b.n	8002c24 <u8x8_cad_SendSequence+0x38>
	  v = *data;
 8002c14:	7822      	ldrb	r2, [r4, #0]
 8002c16:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c1a:	68f4      	ldr	r4, [r6, #12]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	4630      	mov	r0, r6
 8002c20:	47a0      	blx	r4
	  data++;
 8002c22:	3502      	adds	r5, #2
    cmd = *data;
 8002c24:	462c      	mov	r4, r5
 8002c26:	f814 1b01 	ldrb.w	r1, [r4], #1
    switch( cmd )
 8002c2a:	2919      	cmp	r1, #25
 8002c2c:	d8e7      	bhi.n	8002bfe <u8x8_cad_SendSequence+0x12>
 8002c2e:	2918      	cmp	r1, #24
 8002c30:	d20e      	bcs.n	8002c50 <u8x8_cad_SendSequence+0x64>
 8002c32:	2916      	cmp	r1, #22
 8002c34:	d9df      	bls.n	8002bf6 <u8x8_cad_SendSequence+0xa>
 8002c36:	2917      	cmp	r1, #23
 8002c38:	d1df      	bne.n	8002bfa <u8x8_cad_SendSequence+0xe>
	  v = *data;
 8002c3a:	7823      	ldrb	r3, [r4, #0]
 8002c3c:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c40:	f10d 0207 	add.w	r2, sp, #7
 8002c44:	2101      	movs	r1, #1
 8002c46:	4630      	mov	r0, r6
 8002c48:	f7ff ffbb 	bl	8002bc2 <u8x8_cad_SendData>
	  data++;
 8002c4c:	3502      	adds	r5, #2
	  break;
 8002c4e:	e7e9      	b.n	8002c24 <u8x8_cad_SendSequence+0x38>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c50:	68f5      	ldr	r5, [r6, #12]
 8002c52:	2300      	movs	r3, #0
 8002c54:	461a      	mov	r2, r3
 8002c56:	4630      	mov	r0, r6
 8002c58:	47a8      	blx	r5
    data++;
 8002c5a:	4625      	mov	r5, r4
	  break;
 8002c5c:	e7e2      	b.n	8002c24 <u8x8_cad_SendSequence+0x38>
	...

08002c60 <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	4605      	mov	r5, r0
 8002c64:	4614      	mov	r4, r2
 8002c66:	461e      	mov	r6, r3
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002c68:	f1a1 0214 	sub.w	r2, r1, #20
 8002c6c:	2a05      	cmp	r2, #5
 8002c6e:	d856      	bhi.n	8002d1e <u8x8_cad_ssd13xx_fast_i2c+0xbe>
 8002c70:	e8df f002 	tbb	[pc, r2]
 8002c74:	1d180337 	.word	0x1d180337
 8002c78:	4a45      	.short	0x4a45
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b973      	cbnz	r3, 8002c9e <u8x8_cad_ssd13xx_fast_i2c+0x3e>
	 u8x8_byte_EndTransfer(u8x8); 
      
      u8x8_byte_StartTransfer(u8x8);
 8002c80:	4628      	mov	r0, r5
 8002c82:	f7ff ff6e 	bl	8002b62 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002c86:	2100      	movs	r1, #0
 8002c88:	4628      	mov	r0, r5
 8002c8a:	f7ff ff5e 	bl	8002b4a <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002c8e:	4621      	mov	r1, r4
 8002c90:	4628      	mov	r0, r5
 8002c92:	f7ff ff5a 	bl	8002b4a <u8x8_byte_SendByte>
      in_transfer = 1;
 8002c96:	2001      	movs	r0, #1
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002c9a:	7018      	strb	r0, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8002c9c:	e020      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	 u8x8_byte_EndTransfer(u8x8); 
 8002c9e:	f7ff ff67 	bl	8002b70 <u8x8_byte_EndTransfer>
 8002ca2:	e7ed      	b.n	8002c80 <u8x8_cad_ssd13xx_fast_i2c+0x20>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	f7ff ff50 	bl	8002b4a <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
 8002caa:	2001      	movs	r0, #1
      break;      
 8002cac:	e018      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
      if ( in_transfer != 0 )
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b153      	cbz	r3, 8002cca <u8x8_cad_ssd13xx_fast_i2c+0x6a>
	u8x8_byte_EndTransfer(u8x8); 
 8002cb4:	f7ff ff5c 	bl	8002b70 <u8x8_byte_EndTransfer>
 8002cb8:	e007      	b.n	8002cca <u8x8_cad_ssd13xx_fast_i2c+0x6a>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002cba:	4632      	mov	r2, r6
 8002cbc:	2118      	movs	r1, #24
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f7ff ff5d 	bl	8002b7e <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002cc4:	3c18      	subs	r4, #24
 8002cc6:	b2e4      	uxtb	r4, r4
	p+=24;
 8002cc8:	3618      	adds	r6, #24
       while( arg_int > 24 )
 8002cca:	2c18      	cmp	r4, #24
 8002ccc:	d8f5      	bhi.n	8002cba <u8x8_cad_ssd13xx_fast_i2c+0x5a>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002cce:	4632      	mov	r2, r6
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f7ff ff53 	bl	8002b7e <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002cd8:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
  return 1;
 8002cde:	2001      	movs	r0, #1
}
 8002ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( u8x8->i2c_address == 255 )
 8002ce2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d005      	beq.n	8002cf6 <u8x8_cad_ssd13xx_fast_i2c+0x96>
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002cea:	692f      	ldr	r7, [r5, #16]
 8002cec:	4633      	mov	r3, r6
 8002cee:	4622      	mov	r2, r4
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	47b8      	blx	r7
 8002cf4:	e7f4      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8->i2c_address = 0x078;
 8002cf6:	2378      	movs	r3, #120	; 0x78
 8002cf8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8002cfc:	e7f5      	b.n	8002cea <u8x8_cad_ssd13xx_fast_i2c+0x8a>
      in_transfer = 0;
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
  return 1;
 8002d04:	2001      	movs	r0, #1
      break;
 8002d06:	e7eb      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
      if ( in_transfer != 0 )
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b923      	cbnz	r3, 8002d18 <u8x8_cad_ssd13xx_fast_i2c+0xb8>
      in_transfer = 0;
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <u8x8_cad_ssd13xx_fast_i2c+0xc4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  return 1;
 8002d14:	2001      	movs	r0, #1
      break;
 8002d16:	e7e3      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8002d18:	f7ff ff2a 	bl	8002b70 <u8x8_byte_EndTransfer>
 8002d1c:	e7f7      	b.n	8002d0e <u8x8_cad_ssd13xx_fast_i2c+0xae>
  return 1;
 8002d1e:	2000      	movs	r0, #0
 8002d20:	e7de      	b.n	8002ce0 <u8x8_cad_ssd13xx_fast_i2c+0x80>
 8002d22:	bf00      	nop
 8002d24:	200007a0 	.word	0x200007a0

08002d28 <u8x8_d_ssd1306_sh1106_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	4615      	mov	r5, r2
 8002d2e:	461c      	mov	r4, r3
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002d30:	390b      	subs	r1, #11
 8002d32:	2904      	cmp	r1, #4
 8002d34:	d860      	bhi.n	8002df8 <u8x8_d_ssd1306_sh1106_generic+0xd0>
 8002d36:	e8df f001 	tbb	[pc, r1]
 8002d3a:	5f03      	.short	0x5f03
 8002d3c:	210e      	.short	0x210e
 8002d3e:	30          	.byte	0x30
 8002d3f:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002d40:	b922      	cbnz	r2, 8002d4c <u8x8_d_ssd1306_sh1106_generic+0x24>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002d42:	492e      	ldr	r1, [pc, #184]	; (8002dfc <u8x8_d_ssd1306_sh1106_generic+0xd4>)
 8002d44:	f7ff ff52 	bl	8002bec <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e054      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002d4c:	492c      	ldr	r1, [pc, #176]	; (8002e00 <u8x8_d_ssd1306_sh1106_generic+0xd8>)
 8002d4e:	f7ff ff4d 	bl	8002bec <u8x8_cad_SendSequence>
  return 1;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e04f      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
      if ( arg_int == 0 )
 8002d56:	b942      	cbnz	r2, 8002d6a <u8x8_d_ssd1306_sh1106_generic+0x42>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002d58:	492a      	ldr	r1, [pc, #168]	; (8002e04 <u8x8_d_ssd1306_sh1106_generic+0xdc>)
 8002d5a:	f7ff ff47 	bl	8002bec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002d5e:	6833      	ldr	r3, [r6, #0]
 8002d60:	7c9b      	ldrb	r3, [r3, #18]
 8002d62:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  return 1;
 8002d66:	2001      	movs	r0, #1
 8002d68:	e045      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002d6a:	4927      	ldr	r1, [pc, #156]	; (8002e08 <u8x8_d_ssd1306_sh1106_generic+0xe0>)
 8002d6c:	f7ff ff3e 	bl	8002bec <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002d70:	6833      	ldr	r3, [r6, #0]
 8002d72:	7cdb      	ldrb	r3, [r3, #19]
 8002d74:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
  return 1;
 8002d78:	2001      	movs	r0, #1
 8002d7a:	e03c      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
      u8x8_cad_StartTransfer(u8x8);
 8002d7c:	f7ff ff28 	bl	8002bd0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002d80:	2181      	movs	r1, #129	; 0x81
 8002d82:	4630      	mov	r0, r6
 8002d84:	f7ff ff0f 	bl	8002ba6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002d88:	4629      	mov	r1, r5
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	f7ff ff12 	bl	8002bb4 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002d90:	4630      	mov	r0, r6
 8002d92:	f7ff ff24 	bl	8002bde <u8x8_cad_EndTransfer>
  return 1;
 8002d96:	2001      	movs	r0, #1
      break;
 8002d98:	e02d      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
      u8x8_cad_StartTransfer(u8x8);
 8002d9a:	f7ff ff19 	bl	8002bd0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002d9e:	7967      	ldrb	r7, [r4, #5]
      x *= 8;
 8002da0:	00ff      	lsls	r7, r7, #3
 8002da2:	b2fb      	uxtb	r3, r7
      x += u8x8->x_offset;
 8002da4:	f896 7022 	ldrb.w	r7, [r6, #34]	; 0x22
 8002da8:	441f      	add	r7, r3
 8002daa:	b2ff      	uxtb	r7, r7
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	4630      	mov	r0, r6
 8002db0:	f7ff fef9 	bl	8002ba6 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002db4:	0939      	lsrs	r1, r7, #4
 8002db6:	f041 0110 	orr.w	r1, r1, #16
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f7ff fef3 	bl	8002ba6 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002dc0:	f007 010f 	and.w	r1, r7, #15
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f7ff fef5 	bl	8002bb4 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002dca:	79a1      	ldrb	r1, [r4, #6]
 8002dcc:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f7ff feef 	bl	8002bb4 <u8x8_cad_SendArg>
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002dd6:	7921      	ldrb	r1, [r4, #4]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002dd8:	00c9      	lsls	r1, r1, #3
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8002de0:	4630      	mov	r0, r6
 8002de2:	f7ff feee 	bl	8002bc2 <u8x8_cad_SendData>
	arg_int--;
 8002de6:	1e6a      	subs	r2, r5, #1
      } while( arg_int > 0 );
 8002de8:	f012 05ff 	ands.w	r5, r2, #255	; 0xff
 8002dec:	d1f3      	bne.n	8002dd6 <u8x8_d_ssd1306_sh1106_generic+0xae>
      u8x8_cad_EndTransfer(u8x8);
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7ff fef5 	bl	8002bde <u8x8_cad_EndTransfer>
  return 1;
 8002df4:	2001      	movs	r0, #1
}
 8002df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 1;
 8002df8:	2000      	movs	r0, #0
 8002dfa:	e7fc      	b.n	8002df6 <u8x8_d_ssd1306_sh1106_generic+0xce>
 8002dfc:	0800e328 	.word	0x0800e328
 8002e00:	0800e330 	.word	0x0800e330
 8002e04:	0800e2e0 	.word	0x0800e2e0
 8002e08:	0800e2e8 	.word	0x0800e2e8

08002e0c <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e0c:	b538      	push	{r3, r4, r5, lr}
 8002e0e:	4605      	mov	r5, r0
 8002e10:	460c      	mov	r4, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002e12:	f7ff ff89 	bl	8002d28 <u8x8_d_ssd1306_sh1106_generic>
 8002e16:	b998      	cbnz	r0, 8002e40 <u8x8_d_ssd1306_128x64_noname+0x34>
 8002e18:	4603      	mov	r3, r0
    return 1;
  
  switch(msg)
 8002e1a:	2c09      	cmp	r4, #9
 8002e1c:	d00a      	beq.n	8002e34 <u8x8_d_ssd1306_128x64_noname+0x28>
 8002e1e:	2c0a      	cmp	r4, #10
 8002e20:	d10f      	bne.n	8002e42 <u8x8_d_ssd1306_128x64_noname+0x36>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002e22:	4628      	mov	r0, r5
 8002e24:	f000 f819 	bl	8002e5a <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002e28:	4907      	ldr	r1, [pc, #28]	; (8002e48 <u8x8_d_ssd1306_128x64_noname+0x3c>)
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f7ff fede 	bl	8002bec <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
 8002e30:	2301      	movs	r3, #1
      break;
 8002e32:	e006      	b.n	8002e42 <u8x8_d_ssd1306_128x64_noname+0x36>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002e34:	4905      	ldr	r1, [pc, #20]	; (8002e4c <u8x8_d_ssd1306_128x64_noname+0x40>)
 8002e36:	4628      	mov	r0, r5
 8002e38:	f000 f80a 	bl	8002e50 <u8x8_d_helper_display_setup_memory>
  return 1;
 8002e3c:	2301      	movs	r3, #1
      break;
 8002e3e:	e000      	b.n	8002e42 <u8x8_d_ssd1306_128x64_noname+0x36>
    return 1;
 8002e40:	2301      	movs	r3, #1
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	bd38      	pop	{r3, r4, r5, pc}
 8002e46:	bf00      	nop
 8002e48:	0800e2f0 	.word	0x0800e2f0
 8002e4c:	0800e338 	.word	0x0800e338

08002e50 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002e50:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002e52:	7c8b      	ldrb	r3, [r1, #18]
 8002e54:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8002e58:	4770      	bx	lr

08002e5a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002e5a:	b538      	push	{r3, r4, r5, lr}
 8002e5c:	4604      	mov	r4, r0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002e5e:	6945      	ldr	r5, [r0, #20]
 8002e60:	2300      	movs	r3, #0
 8002e62:	461a      	mov	r2, r3
 8002e64:	2128      	movs	r1, #40	; 0x28
 8002e66:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002e68:	68e5      	ldr	r5, [r4, #12]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2114      	movs	r1, #20
 8002e70:	4620      	mov	r0, r4
 8002e72:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002e74:	2201      	movs	r2, #1
 8002e76:	214b      	movs	r1, #75	; 0x4b
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f84a 	bl	8002f12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	791a      	ldrb	r2, [r3, #4]
 8002e82:	2129      	movs	r1, #41	; 0x29
 8002e84:	4620      	mov	r0, r4
 8002e86:	f000 f844 	bl	8002f12 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	214b      	movs	r1, #75	; 0x4b
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f000 f83f 	bl	8002f12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	791a      	ldrb	r2, [r3, #4]
 8002e98:	2129      	movs	r1, #41	; 0x29
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f000 f839 	bl	8002f12 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	214b      	movs	r1, #75	; 0x4b
 8002ea4:	4620      	mov	r0, r4
 8002ea6:	f000 f834 	bl	8002f12 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	795a      	ldrb	r2, [r3, #5]
 8002eae:	2129      	movs	r1, #41	; 0x29
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f000 f82e 	bl	8002f12 <u8x8_gpio_call>
}    
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}

08002eb8 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	b082      	sub	sp, #8
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002ebc:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8002ec0:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
 8002ec4:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8002ec8:	9b04      	ldr	r3, [sp, #16]
 8002eca:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002ecc:	6884      	ldr	r4, [r0, #8]
 8002ece:	466b      	mov	r3, sp
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	210f      	movs	r1, #15
 8002ed4:	47a0      	blx	r4
}
 8002ed6:	b002      	add	sp, #8
 8002ed8:	bd10      	pop	{r4, pc}

08002eda <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002eda:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002edc:	6884      	ldr	r4, [r0, #8]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2109      	movs	r1, #9
 8002ee4:	47a0      	blx	r4
}
 8002ee6:	bd10      	pop	{r4, pc}

08002ee8 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002ee8:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002eea:	6884      	ldr	r4, [r0, #8]
 8002eec:	2300      	movs	r3, #0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	210a      	movs	r1, #10
 8002ef2:	47a0      	blx	r4
}
 8002ef4:	bd10      	pop	{r4, pc}

08002ef6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002ef6:	b510      	push	{r4, lr}
 8002ef8:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002efa:	6884      	ldr	r4, [r0, #8]
 8002efc:	2300      	movs	r3, #0
 8002efe:	210b      	movs	r1, #11
 8002f00:	47a0      	blx	r4
}
 8002f02:	bd10      	pop	{r4, pc}

08002f04 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002f04:	b510      	push	{r4, lr}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002f06:	6884      	ldr	r4, [r0, #8]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	47a0      	blx	r4
}
 8002f10:	bd10      	pop	{r4, pc}

08002f12 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002f12:	b510      	push	{r4, lr}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002f14:	6944      	ldr	r4, [r0, #20]
 8002f16:	2300      	movs	r3, #0
 8002f18:	47a0      	blx	r4
}
 8002f1a:	bd10      	pop	{r4, pc}

08002f1c <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	4770      	bx	lr

08002f20 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002f24:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <u8x8_SetupDefaults+0x28>)
 8002f26:	6082      	str	r2, [r0, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002f28:	60c2      	str	r2, [r0, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002f2a:	6102      	str	r2, [r0, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002f2c:	6142      	str	r2, [r0, #20]
    u8x8->is_font_inverse_mode = 0;
 8002f2e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 8002f32:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002f36:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8002f3a:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8002f3c:	23ff      	movs	r3, #255	; 0xff
 8002f3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002f42:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002f46:	4770      	bx	lr
 8002f48:	08002f1d 	.word	0x08002f1d

08002f4c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	4604      	mov	r4, r0
 8002f50:	460f      	mov	r7, r1
 8002f52:	4616      	mov	r6, r2
 8002f54:	461d      	mov	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002f56:	f7ff ffe3 	bl	8002f20 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002f5a:	60a7      	str	r7, [r4, #8]
  u8x8->cad_cb = cad_cb;
 8002f5c:	60e6      	str	r6, [r4, #12]
  u8x8->byte_cb = byte_cb;
 8002f5e:	6125      	str	r5, [r4, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002f60:	9b06      	ldr	r3, [sp, #24]
 8002f62:	6163      	str	r3, [r4, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7ff ffb8 	bl	8002eda <u8x8_SetupMemory>
}
 8002f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002f6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f6e:	e003      	b.n	8002f78 <LoopCopyDataInit>

08002f70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f76:	3104      	adds	r1, #4

08002f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f78:	480a      	ldr	r0, [pc, #40]	; (8002fa4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	; (8002fa8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f80:	d3f6      	bcc.n	8002f70 <CopyDataInit>
  ldr r2, =_sbss
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f84:	e002      	b.n	8002f8c <LoopFillZerobss>

08002f86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f86:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f88:	f842 3b04 	str.w	r3, [r2], #4

08002f8c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f90:	d3f9      	bcc.n	8002f86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f92:	f7ff f801 	bl	8001f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f96:	f007 ff29 	bl	800adec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f9a:	f7fe fb8d 	bl	80016b8 <main>
  bx lr
 8002f9e:	4770      	bx	lr
  ldr r3, =_sidata
 8002fa0:	0800e7ac 	.word	0x0800e7ac
  ldr r0, =_sdata
 8002fa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fa8:	20000358 	.word	0x20000358
  ldr r2, =_sbss
 8002fac:	20000358 	.word	0x20000358
  ldr r3, = _ebss
 8002fb0:	200037a0 	.word	0x200037a0

08002fb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fb4:	e7fe      	b.n	8002fb4 <ADC1_2_IRQHandler>
	...

08002fb8 <Max6675_Read_TempValue>:
	Temp*=0.25;                                           // Data to Centigrade Conversation
	*tempartureVariable = Temp;
}

void Max6675_Read_TempValue(float* tempartureVariable)
{
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	4604      	mov	r4, r0
	float Temp=0;                                  // Temperature Variable
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 8002fbc:	4e11      	ldr	r6, [pc, #68]	; (8003004 <Max6675_Read_TempValue+0x4c>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2110      	movs	r1, #16
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	f000 faf1 	bl	80035aa <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 8002fc8:	4d0f      	ldr	r5, [pc, #60]	; (8003008 <Max6675_Read_TempValue+0x50>)
 8002fca:	2332      	movs	r3, #50	; 0x32
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4629      	mov	r1, r5
 8002fd0:	480e      	ldr	r0, [pc, #56]	; (800300c <Max6675_Read_TempValue+0x54>)
 8002fd2:	f003 faa6 	bl	8006522 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_SET);         // High State for SPI Communication
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	2110      	movs	r1, #16
 8002fda:	4630      	mov	r0, r6
 8002fdc:	f000 fae5 	bl	80035aa <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8002fe0:	782b      	ldrb	r3, [r5, #0]
 8002fe2:	7868      	ldrb	r0, [r5, #1]
 8002fe4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002fe8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002fec:	4a08      	ldr	r2, [pc, #32]	; (8003010 <Max6675_Read_TempValue+0x58>)
 8002fee:	7013      	strb	r3, [r2, #0]
	Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8002ff0:	10c0      	asrs	r0, r0, #3
 8002ff2:	f7fd fe03 	bl	8000bfc <__aeabi_i2f>
	Temp*=0.25;                                           // Data to Centigrade Conversation
 8002ff6:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002ffa:	f7fd fe53 	bl	8000ca4 <__aeabi_fmul>
	*tempartureVariable = Temp;
 8002ffe:	6020      	str	r0, [r4, #0]
}
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	bf00      	nop
 8003004:	40010800 	.word	0x40010800
 8003008:	200027c4 	.word	0x200027c4
 800300c:	200023cc 	.word	0x200023cc
 8003010:	200007a1 	.word	0x200007a1

08003014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003014:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003016:	4a07      	ldr	r2, [pc, #28]	; (8003034 <HAL_Init+0x20>)
 8003018:	6813      	ldr	r3, [r2, #0]
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003020:	2003      	movs	r0, #3
 8003022:	f000 f82f 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003026:	2000      	movs	r0, #0
 8003028:	f7fe fec6 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800302c:	f7fe fcba 	bl	80019a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003030:	2000      	movs	r0, #0
 8003032:	bd08      	pop	{r3, pc}
 8003034:	40022000 	.word	0x40022000

08003038 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_IncTick+0x10>)
 800303a:	6811      	ldr	r1, [r2, #0]
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_IncTick+0x14>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	440b      	add	r3, r1
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	200027cc 	.word	0x200027cc
 800304c:	2000000c 	.word	0x2000000c

08003050 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003050:	4b01      	ldr	r3, [pc, #4]	; (8003058 <HAL_GetTick+0x8>)
 8003052:	6818      	ldr	r0, [r3, #0]
}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	200027cc 	.word	0x200027cc

0800305c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003060:	f7ff fff6 	bl	8003050 <HAL_GetTick>
 8003064:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003066:	f1b4 3fff 	cmp.w	r4, #4294967295
 800306a:	d002      	beq.n	8003072 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_Delay+0x24>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003072:	f7ff ffed 	bl	8003050 <HAL_GetTick>
 8003076:	1b40      	subs	r0, r0, r5
 8003078:	42a0      	cmp	r0, r4
 800307a:	d3fa      	bcc.n	8003072 <HAL_Delay+0x16>
  {
  }
}
 800307c:	bd38      	pop	{r3, r4, r5, pc}
 800307e:	bf00      	nop
 8003080:	2000000c 	.word	0x2000000c

08003084 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003084:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003086:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003088:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003090:	0200      	lsls	r0, r0, #8
 8003092:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003096:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80030a0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030aa:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_NVIC_SetPriority+0x60>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b2:	f1c3 0407 	rsb	r4, r3, #7
 80030b6:	2c04      	cmp	r4, #4
 80030b8:	bf28      	it	cs
 80030ba:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030bc:	1d1d      	adds	r5, r3, #4
 80030be:	2d06      	cmp	r5, #6
 80030c0:	d918      	bls.n	80030f4 <HAL_NVIC_SetPriority+0x4c>
 80030c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 35ff 	mov.w	r5, #4294967295
 80030c8:	fa05 f404 	lsl.w	r4, r5, r4
 80030cc:	ea21 0104 	bic.w	r1, r1, r4
 80030d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d2:	fa05 f303 	lsl.w	r3, r5, r3
 80030d6:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030da:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80030dc:	2800      	cmp	r0, #0
 80030de:	db0b      	blt.n	80030f8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	0109      	lsls	r1, r1, #4
 80030e2:	b2c9      	uxtb	r1, r1
 80030e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80030e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80030ec:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80030f0:	bc30      	pop	{r4, r5}
 80030f2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f4:	2300      	movs	r3, #0
 80030f6:	e7e5      	b.n	80030c4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	f000 000f 	and.w	r0, r0, #15
 80030fc:	0109      	lsls	r1, r1, #4
 80030fe:	b2c9      	uxtb	r1, r1
 8003100:	4b02      	ldr	r3, [pc, #8]	; (800310c <HAL_NVIC_SetPriority+0x64>)
 8003102:	5419      	strb	r1, [r3, r0]
 8003104:	e7f4      	b.n	80030f0 <HAL_NVIC_SetPriority+0x48>
 8003106:	bf00      	nop
 8003108:	e000ed00 	.word	0xe000ed00
 800310c:	e000ed14 	.word	0xe000ed14

08003110 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003110:	2800      	cmp	r0, #0
 8003112:	db07      	blt.n	8003124 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003114:	f000 021f 	and.w	r2, r0, #31
 8003118:	0940      	lsrs	r0, r0, #5
 800311a:	2301      	movs	r3, #1
 800311c:	4093      	lsls	r3, r2
 800311e:	4a02      	ldr	r2, [pc, #8]	; (8003128 <HAL_NVIC_EnableIRQ+0x18>)
 8003120:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	e000e100 	.word	0xe000e100

0800312c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800312c:	b360      	cbz	r0, 8003188 <HAL_DMA_Init+0x5c>
{
 800312e:	b410      	push	{r4}
 8003130:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003132:	6801      	ldr	r1, [r0, #0]
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_DMA_Init+0x60>)
 8003136:	440b      	add	r3, r1
 8003138:	4815      	ldr	r0, [pc, #84]	; (8003190 <HAL_DMA_Init+0x64>)
 800313a:	fba0 0303 	umull	r0, r3, r0, r3
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_DMA_Init+0x68>)
 8003146:	63d3      	str	r3, [r2, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	2302      	movs	r3, #2
 800314a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800314e:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003150:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8003154:	f020 0030 	bic.w	r0, r0, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003158:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315a:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 800315c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315e:	68d4      	ldr	r4, [r2, #12]
 8003160:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003164:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003166:	6954      	ldr	r4, [r2, #20]
 8003168:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800316a:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800316c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	69d4      	ldr	r4, [r2, #28]
 8003170:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8003172:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003174:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003176:	2000      	movs	r0, #0
 8003178:	6390      	str	r0, [r2, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800317a:	2301      	movs	r3, #1
 800317c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003180:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8003184:	bc10      	pop	{r4}
 8003186:	4770      	bx	lr
    return HAL_ERROR;
 8003188:	2001      	movs	r0, #1
}
 800318a:	4770      	bx	lr
 800318c:	bffdfff8 	.word	0xbffdfff8
 8003190:	cccccccd 	.word	0xcccccccd
 8003194:	40020000 	.word	0x40020000

08003198 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003198:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800319a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a2:	2304      	movs	r3, #4
 80031a4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80031a6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80031a8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031aa:	6802      	ldr	r2, [r0, #0]
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	f023 030e 	bic.w	r3, r3, #14
 80031b2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80031b4:	6802      	ldr	r2, [r0, #0]
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031be:	6803      	ldr	r3, [r0, #0]
 80031c0:	4a19      	ldr	r2, [pc, #100]	; (8003228 <HAL_DMA_Abort_IT+0x90>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d014      	beq.n	80031f0 <HAL_DMA_Abort_IT+0x58>
 80031c6:	3214      	adds	r2, #20
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d01f      	beq.n	800320c <HAL_DMA_Abort_IT+0x74>
 80031cc:	3214      	adds	r2, #20
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01e      	beq.n	8003210 <HAL_DMA_Abort_IT+0x78>
 80031d2:	3214      	adds	r2, #20
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d01e      	beq.n	8003216 <HAL_DMA_Abort_IT+0x7e>
 80031d8:	3214      	adds	r2, #20
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01e      	beq.n	800321c <HAL_DMA_Abort_IT+0x84>
 80031de:	3214      	adds	r2, #20
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d002      	beq.n	80031ea <HAL_DMA_Abort_IT+0x52>
 80031e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80031e8:	e003      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
 80031ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80031ee:	e000      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
 80031f0:	2201      	movs	r2, #1
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <HAL_DMA_Abort_IT+0x94>)
 80031f4:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80031fc:	2300      	movs	r3, #0
 80031fe:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003202:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003204:	b16b      	cbz	r3, 8003222 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8003206:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2000      	movs	r0, #0
 800320a:	e7cd      	b.n	80031a8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800320c:	2210      	movs	r2, #16
 800320e:	e7f0      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
 8003210:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003214:	e7ed      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
 8003216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800321a:	e7ea      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
 800321c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003220:	e7e7      	b.n	80031f2 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2000      	movs	r0, #0
 8003224:	e7c0      	b.n	80031a8 <HAL_DMA_Abort_IT+0x10>
 8003226:	bf00      	nop
 8003228:	40020008 	.word	0x40020008
 800322c:	40020000 	.word	0x40020000

08003230 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003230:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003232:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003234:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003236:	6804      	ldr	r4, [r0, #0]
 8003238:	6825      	ldr	r5, [r4, #0]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800323a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800323c:	2304      	movs	r3, #4
 800323e:	408b      	lsls	r3, r1
 8003240:	4213      	tst	r3, r2
 8003242:	d035      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x80>
 8003244:	f015 0f04 	tst.w	r5, #4
 8003248:	d032      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x80>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	f013 0f20 	tst.w	r3, #32
 8003250:	d103      	bne.n	800325a <HAL_DMA_IRQHandler+0x2a>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6023      	str	r3, [r4, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800325a:	6803      	ldr	r3, [r0, #0]
 800325c:	4a43      	ldr	r2, [pc, #268]	; (800336c <HAL_DMA_IRQHandler+0x13c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d014      	beq.n	800328c <HAL_DMA_IRQHandler+0x5c>
 8003262:	3214      	adds	r2, #20
 8003264:	4293      	cmp	r3, r2
 8003266:	d018      	beq.n	800329a <HAL_DMA_IRQHandler+0x6a>
 8003268:	3214      	adds	r2, #20
 800326a:	4293      	cmp	r3, r2
 800326c:	d017      	beq.n	800329e <HAL_DMA_IRQHandler+0x6e>
 800326e:	3214      	adds	r2, #20
 8003270:	4293      	cmp	r3, r2
 8003272:	d017      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x74>
 8003274:	3214      	adds	r2, #20
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <HAL_DMA_IRQHandler+0x7a>
 800327a:	3214      	adds	r2, #20
 800327c:	4293      	cmp	r3, r2
 800327e:	d002      	beq.n	8003286 <HAL_DMA_IRQHandler+0x56>
 8003280:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003284:	e003      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
 8003286:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800328a:	e000      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
 800328c:	2204      	movs	r2, #4
 800328e:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_DMA_IRQHandler+0x140>)
 8003290:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003292:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003294:	b103      	cbz	r3, 8003298 <HAL_DMA_IRQHandler+0x68>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003296:	4798      	blx	r3
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8003298:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800329a:	2240      	movs	r2, #64	; 0x40
 800329c:	e7f7      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
 800329e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032a2:	e7f4      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
 80032a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a8:	e7f1      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
 80032aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80032ae:	e7ee      	b.n	800328e <HAL_DMA_IRQHandler+0x5e>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80032b0:	2302      	movs	r3, #2
 80032b2:	408b      	lsls	r3, r1
 80032b4:	4213      	tst	r3, r2
 80032b6:	d03c      	beq.n	8003332 <HAL_DMA_IRQHandler+0x102>
 80032b8:	f015 0f02 	tst.w	r5, #2
 80032bc:	d039      	beq.n	8003332 <HAL_DMA_IRQHandler+0x102>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	f013 0f20 	tst.w	r3, #32
 80032c4:	d106      	bne.n	80032d4 <HAL_DMA_IRQHandler+0xa4>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	f023 030a 	bic.w	r3, r3, #10
 80032cc:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80032d4:	6803      	ldr	r3, [r0, #0]
 80032d6:	4a25      	ldr	r2, [pc, #148]	; (800336c <HAL_DMA_IRQHandler+0x13c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d014      	beq.n	8003306 <HAL_DMA_IRQHandler+0xd6>
 80032dc:	3214      	adds	r2, #20
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01c      	beq.n	800331c <HAL_DMA_IRQHandler+0xec>
 80032e2:	3214      	adds	r2, #20
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01b      	beq.n	8003320 <HAL_DMA_IRQHandler+0xf0>
 80032e8:	3214      	adds	r2, #20
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d01b      	beq.n	8003326 <HAL_DMA_IRQHandler+0xf6>
 80032ee:	3214      	adds	r2, #20
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d01b      	beq.n	800332c <HAL_DMA_IRQHandler+0xfc>
 80032f4:	3214      	adds	r2, #20
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d002      	beq.n	8003300 <HAL_DMA_IRQHandler+0xd0>
 80032fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032fe:	e003      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
 8003300:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003304:	e000      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
 8003306:	2202      	movs	r2, #2
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_DMA_IRQHandler+0x140>)
 800330a:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800330c:	2300      	movs	r3, #0
 800330e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003312:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0bf      	beq.n	8003298 <HAL_DMA_IRQHandler+0x68>
      hdma->XferCpltCallback(hdma);
 8003318:	4798      	blx	r3
 800331a:	e7bd      	b.n	8003298 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800331c:	2220      	movs	r2, #32
 800331e:	e7f3      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
 8003320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003324:	e7f0      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
 8003326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800332a:	e7ed      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
 800332c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003330:	e7ea      	b.n	8003308 <HAL_DMA_IRQHandler+0xd8>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003332:	2308      	movs	r3, #8
 8003334:	fa03 f101 	lsl.w	r1, r3, r1
 8003338:	4211      	tst	r1, r2
 800333a:	d0ad      	beq.n	8003298 <HAL_DMA_IRQHandler+0x68>
 800333c:	f015 0f08 	tst.w	r5, #8
 8003340:	d0aa      	beq.n	8003298 <HAL_DMA_IRQHandler+0x68>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	f023 030e 	bic.w	r3, r3, #14
 8003348:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800334a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800334c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800334e:	2301      	movs	r3, #1
 8003350:	fa03 f202 	lsl.w	r2, r3, r2
 8003354:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003356:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8003358:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800335c:	2300      	movs	r3, #0
 800335e:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8003362:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003364:	2b00      	cmp	r3, #0
 8003366:	d097      	beq.n	8003298 <HAL_DMA_IRQHandler+0x68>
      hdma->XferErrorCallback(hdma);
 8003368:	4798      	blx	r3
  return;
 800336a:	e795      	b.n	8003298 <HAL_DMA_IRQHandler+0x68>
 800336c:	40020008 	.word	0x40020008
 8003370:	40020000 	.word	0x40020000

08003374 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 8003374:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b4f0      	push	{r4, r5, r6, r7}
 800337e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003380:	2500      	movs	r5, #0
  uint32_t position = 0x00u;
 8003382:	462c      	mov	r4, r5
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	e0a3      	b.n	80034ce <HAL_GPIO_Init+0x152>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003386:	4f7f      	ldr	r7, [pc, #508]	; (8003584 <HAL_GPIO_Init+0x208>)
 8003388:	42bb      	cmp	r3, r7
 800338a:	d010      	beq.n	80033ae <HAL_GPIO_Init+0x32>
 800338c:	d907      	bls.n	800339e <HAL_GPIO_Init+0x22>
 800338e:	4f7e      	ldr	r7, [pc, #504]	; (8003588 <HAL_GPIO_Init+0x20c>)
 8003390:	42bb      	cmp	r3, r7
 8003392:	d00c      	beq.n	80033ae <HAL_GPIO_Init+0x32>
 8003394:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8003398:	42bb      	cmp	r3, r7
 800339a:	d008      	beq.n	80033ae <HAL_GPIO_Init+0x32>
 800339c:	e013      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
 800339e:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80033a2:	42bb      	cmp	r3, r7
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x32>
 80033a6:	f507 2770 	add.w	r7, r7, #983040	; 0xf0000
 80033aa:	42bb      	cmp	r3, r7
 80033ac:	d107      	bne.n	80033be <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033ae:	688b      	ldr	r3, [r1, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d058      	beq.n	8003466 <HAL_GPIO_Init+0xea>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d051      	beq.n	800345c <HAL_GPIO_Init+0xe0>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80033b8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033ba:	2508      	movs	r5, #8
 80033bc:	e003      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 80033be:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80033c2:	42bb      	cmp	r3, r7
 80033c4:	d0f3      	beq.n	80033ae <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033c6:	2eff      	cmp	r6, #255	; 0xff
 80033c8:	d84f      	bhi.n	800346a <HAL_GPIO_Init+0xee>
 80033ca:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033cc:	2eff      	cmp	r6, #255	; 0xff
 80033ce:	d84f      	bhi.n	8003470 <HAL_GPIO_Init+0xf4>
 80033d0:	00a2      	lsls	r2, r4, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033d2:	f8dc 3000 	ldr.w	r3, [ip]
 80033d6:	270f      	movs	r7, #15
 80033d8:	4097      	lsls	r7, r2
 80033da:	ea23 0307 	bic.w	r3, r3, r7
 80033de:	fa05 f202 	lsl.w	r2, r5, r2
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8cc 3000 	str.w	r3, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e8:	684b      	ldr	r3, [r1, #4]
 80033ea:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80033ee:	d06d      	beq.n	80034cc <HAL_GPIO_Init+0x150>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033f0:	4b66      	ldr	r3, [pc, #408]	; (800358c <HAL_GPIO_Init+0x210>)
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	619a      	str	r2, [r3, #24]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8003404:	08a2      	lsrs	r2, r4, #2
 8003406:	1c97      	adds	r7, r2, #2
 8003408:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_GPIO_Init+0x214>)
 800340a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800340e:	f004 0703 	and.w	r7, r4, #3
 8003412:	00bf      	lsls	r7, r7, #2
 8003414:	f04f 0c0f 	mov.w	ip, #15
 8003418:	fa0c fc07 	lsl.w	ip, ip, r7
 800341c:	ea23 0c0c 	bic.w	ip, r3, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003420:	4b5c      	ldr	r3, [pc, #368]	; (8003594 <HAL_GPIO_Init+0x218>)
 8003422:	4298      	cmp	r0, r3
 8003424:	d02a      	beq.n	800347c <HAL_GPIO_Init+0x100>
 8003426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800342a:	4298      	cmp	r0, r3
 800342c:	f000 808a 	beq.w	8003544 <HAL_GPIO_Init+0x1c8>
 8003430:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003434:	4298      	cmp	r0, r3
 8003436:	f000 8087 	beq.w	8003548 <HAL_GPIO_Init+0x1cc>
 800343a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800343e:	4298      	cmp	r0, r3
 8003440:	d01a      	beq.n	8003478 <HAL_GPIO_Init+0xfc>
 8003442:	2304      	movs	r3, #4
 8003444:	e01b      	b.n	800347e <HAL_GPIO_Init+0x102>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003446:	68cd      	ldr	r5, [r1, #12]
          break;
 8003448:	e7bd      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800344a:	68cd      	ldr	r5, [r1, #12]
 800344c:	3504      	adds	r5, #4
          break;
 800344e:	e7ba      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003450:	68cd      	ldr	r5, [r1, #12]
 8003452:	3508      	adds	r5, #8
          break;
 8003454:	e7b7      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003456:	68cd      	ldr	r5, [r1, #12]
 8003458:	350c      	adds	r5, #12
          break;
 800345a:	e7b4      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 800345c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800345e:	2508      	movs	r5, #8
 8003460:	e7b1      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003462:	2500      	movs	r5, #0
 8003464:	e7af      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003466:	2504      	movs	r5, #4
 8003468:	e7ad      	b.n	80033c6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800346a:	f100 0c04 	add.w	ip, r0, #4
 800346e:	e7ad      	b.n	80033cc <HAL_GPIO_Init+0x50>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003470:	f1a4 0208 	sub.w	r2, r4, #8
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	e7ac      	b.n	80033d2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003478:	2303      	movs	r3, #3
 800347a:	e000      	b.n	800347e <HAL_GPIO_Init+0x102>
 800347c:	2300      	movs	r3, #0
 800347e:	40bb      	lsls	r3, r7
 8003480:	ea43 030c 	orr.w	r3, r3, ip
        AFIO->EXTICR[position >> 2u] = temp;
 8003484:	3202      	adds	r2, #2
 8003486:	4f42      	ldr	r7, [pc, #264]	; (8003590 <HAL_GPIO_Init+0x214>)
 8003488:	f847 3022 	str.w	r3, [r7, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	684b      	ldr	r3, [r1, #4]
 800348e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003492:	d05b      	beq.n	800354c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003494:	4a40      	ldr	r2, [pc, #256]	; (8003598 <HAL_GPIO_Init+0x21c>)
 8003496:	6813      	ldr	r3, [r2, #0]
 8003498:	4333      	orrs	r3, r6
 800349a:	6013      	str	r3, [r2, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800349c:	684b      	ldr	r3, [r1, #4]
 800349e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034a2:	d059      	beq.n	8003558 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034a4:	4a3c      	ldr	r2, [pc, #240]	; (8003598 <HAL_GPIO_Init+0x21c>)
 80034a6:	6853      	ldr	r3, [r2, #4]
 80034a8:	4333      	orrs	r3, r6
 80034aa:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ac:	684b      	ldr	r3, [r1, #4]
 80034ae:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80034b2:	d057      	beq.n	8003564 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034b4:	4a38      	ldr	r2, [pc, #224]	; (8003598 <HAL_GPIO_Init+0x21c>)
 80034b6:	6893      	ldr	r3, [r2, #8]
 80034b8:	4333      	orrs	r3, r6
 80034ba:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034bc:	684b      	ldr	r3, [r1, #4]
 80034be:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80034c2:	d055      	beq.n	8003570 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034c4:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_GPIO_Init+0x21c>)
 80034c6:	68d3      	ldr	r3, [r2, #12]
 80034c8:	431e      	orrs	r6, r3
 80034ca:	60d6      	str	r6, [r2, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80034cc:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	680b      	ldr	r3, [r1, #0]
 80034d0:	fa33 f204 	lsrs.w	r2, r3, r4
 80034d4:	d052      	beq.n	800357c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 80034d6:	2201      	movs	r2, #1
 80034d8:	40a2      	lsls	r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034da:	ea03 0602 	and.w	r6, r3, r2
    if (iocurrent == ioposition)
 80034de:	ea32 0303 	bics.w	r3, r2, r3
 80034e2:	d1f3      	bne.n	80034cc <HAL_GPIO_Init+0x150>
      switch (GPIO_Init->Mode)
 80034e4:	684b      	ldr	r3, [r1, #4]
 80034e6:	2b12      	cmp	r3, #18
 80034e8:	f63f af4d 	bhi.w	8003386 <HAL_GPIO_Init+0xa>
 80034ec:	2b12      	cmp	r3, #18
 80034ee:	f63f af6a 	bhi.w	80033c6 <HAL_GPIO_Init+0x4a>
 80034f2:	a701      	add	r7, pc, #4	; (adr r7, 80034f8 <HAL_GPIO_Init+0x17c>)
 80034f4:	f857 f023 	ldr.w	pc, [r7, r3, lsl #2]
 80034f8:	080033af 	.word	0x080033af
 80034fc:	08003447 	.word	0x08003447
 8003500:	08003451 	.word	0x08003451
 8003504:	08003463 	.word	0x08003463
 8003508:	080033c7 	.word	0x080033c7
 800350c:	080033c7 	.word	0x080033c7
 8003510:	080033c7 	.word	0x080033c7
 8003514:	080033c7 	.word	0x080033c7
 8003518:	080033c7 	.word	0x080033c7
 800351c:	080033c7 	.word	0x080033c7
 8003520:	080033c7 	.word	0x080033c7
 8003524:	080033c7 	.word	0x080033c7
 8003528:	080033c7 	.word	0x080033c7
 800352c:	080033c7 	.word	0x080033c7
 8003530:	080033c7 	.word	0x080033c7
 8003534:	080033c7 	.word	0x080033c7
 8003538:	080033c7 	.word	0x080033c7
 800353c:	0800344b 	.word	0x0800344b
 8003540:	08003457 	.word	0x08003457
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003544:	2301      	movs	r3, #1
 8003546:	e79a      	b.n	800347e <HAL_GPIO_Init+0x102>
 8003548:	2302      	movs	r3, #2
 800354a:	e798      	b.n	800347e <HAL_GPIO_Init+0x102>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800354c:	4a12      	ldr	r2, [pc, #72]	; (8003598 <HAL_GPIO_Init+0x21c>)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	ea23 0306 	bic.w	r3, r3, r6
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e7a1      	b.n	800349c <HAL_GPIO_Init+0x120>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <HAL_GPIO_Init+0x21c>)
 800355a:	6853      	ldr	r3, [r2, #4]
 800355c:	ea23 0306 	bic.w	r3, r3, r6
 8003560:	6053      	str	r3, [r2, #4]
 8003562:	e7a3      	b.n	80034ac <HAL_GPIO_Init+0x130>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003564:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <HAL_GPIO_Init+0x21c>)
 8003566:	6893      	ldr	r3, [r2, #8]
 8003568:	ea23 0306 	bic.w	r3, r3, r6
 800356c:	6093      	str	r3, [r2, #8]
 800356e:	e7a5      	b.n	80034bc <HAL_GPIO_Init+0x140>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003570:	4a09      	ldr	r2, [pc, #36]	; (8003598 <HAL_GPIO_Init+0x21c>)
 8003572:	68d3      	ldr	r3, [r2, #12]
 8003574:	ea23 0606 	bic.w	r6, r3, r6
 8003578:	60d6      	str	r6, [r2, #12]
 800357a:	e7a7      	b.n	80034cc <HAL_GPIO_Init+0x150>
  }
}
 800357c:	b002      	add	sp, #8
 800357e:	bcf0      	pop	{r4, r5, r6, r7}
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	10220000 	.word	0x10220000
 8003588:	10310000 	.word	0x10310000
 800358c:	40021000 	.word	0x40021000
 8003590:	40010000 	.word	0x40010000
 8003594:	40010800 	.word	0x40010800
 8003598:	40010400 	.word	0x40010400

0800359c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800359c:	6883      	ldr	r3, [r0, #8]
 800359e:	4219      	tst	r1, r3
 80035a0:	d001      	beq.n	80035a6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80035a2:	2001      	movs	r0, #1
 80035a4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80035a8:	4770      	bx	lr

080035aa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035aa:	b10a      	cbz	r2, 80035b0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ac:	6101      	str	r1, [r0, #16]
 80035ae:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035b0:	0409      	lsls	r1, r1, #16
 80035b2:	6101      	str	r1, [r0, #16]
  }
}
 80035b4:	4770      	bx	lr

080035b6 <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035b6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b40      	cmp	r3, #64	; 0x40
 80035be:	d010      	beq.n	80035e2 <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035c0:	6903      	ldr	r3, [r0, #16]
 80035c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c6:	d01b      	beq.n	8003600 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 80035c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d139      	bne.n	8003642 <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80035ce:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035d0:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80035d4:	6802      	ldr	r2, [r0, #0]
 80035d6:	f003 0306 	and.w	r3, r3, #6
 80035da:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80035de:	6113      	str	r3, [r2, #16]
 80035e0:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 80035e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80035e4:	b92b      	cbnz	r3, 80035f2 <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80035e6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035e8:	6802      	ldr	r2, [r0, #0]
 80035ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035ee:	6113      	str	r3, [r2, #16]
 80035f0:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80035f2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80035f4:	6802      	ldr	r2, [r0, #0]
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	6113      	str	r3, [r2, #16]
 80035fe:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003600:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b21      	cmp	r3, #33	; 0x21
 8003608:	d00f      	beq.n	800362a <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800360a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800360c:	6802      	ldr	r2, [r0, #0]
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	b2db      	uxtb	r3, r3
 8003614:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003616:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003618:	b16b      	cbz	r3, 8003636 <I2C_Master_SB+0x80>
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	b15b      	cbz	r3, 8003636 <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800361e:	6802      	ldr	r2, [r0, #0]
 8003620:	6853      	ldr	r3, [r2, #4]
 8003622:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003626:	6053      	str	r3, [r2, #4]
 8003628:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800362a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003632:	6113      	str	r3, [r2, #16]
 8003634:	e7ef      	b.n	8003616 <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003636:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003638:	b133      	cbz	r3, 8003648 <I2C_Master_SB+0x92>
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ee      	bne.n	800361e <I2C_Master_SB+0x68>
 8003640:	e002      	b.n	8003648 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 8003642:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003644:	2b01      	cmp	r3, #1
 8003646:	d000      	beq.n	800364a <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8003648:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800364a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800364c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	f003 0306 	and.w	r3, r3, #6
 8003656:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800365a:	6113      	str	r3, [r2, #16]
}
 800365c:	e7f4      	b.n	8003648 <I2C_Master_SB+0x92>

0800365e <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800365e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003660:	6802      	ldr	r2, [r0, #0]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	6113      	str	r3, [r2, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003666:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003668:	b13b      	cbz	r3, 800367a <I2C_Master_ADD10+0x1c>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	b14b      	cbz	r3, 8003682 <I2C_Master_ADD10+0x24>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800366e:	6802      	ldr	r2, [r0, #0]
 8003670:	6853      	ldr	r3, [r2, #4]
 8003672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003676:	6053      	str	r3, [r2, #4]
    }
  }
}
 8003678:	4770      	bx	lr
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800367a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800367c:	2a00      	cmp	r2, #0
 800367e:	d1f4      	bne.n	800366a <I2C_Master_ADD10+0xc>
 8003680:	e7fa      	b.n	8003678 <I2C_Master_ADD10+0x1a>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003682:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f1      	bne.n	800366e <I2C_Master_ADD10+0x10>
 800368a:	e7f5      	b.n	8003678 <I2C_Master_ADD10+0x1a>

0800368c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800368c:	b410      	push	{r4}
 800368e:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003690:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003694:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003696:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003698:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800369a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b22      	cmp	r3, #34	; 0x22
 80036a2:	d00a      	beq.n	80036ba <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036a4:	2300      	movs	r3, #0
 80036a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80036a8:	6803      	ldr	r3, [r0, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }
}
 80036b4:	b00d      	add	sp, #52	; 0x34
 80036b6:	bc10      	pop	{r4}
 80036b8:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80036ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036bc:	b90b      	cbnz	r3, 80036c2 <I2C_Master_ADDR+0x36>
 80036be:	2a40      	cmp	r2, #64	; 0x40
 80036c0:	d017      	beq.n	80036f2 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80036c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80036c4:	b91b      	cbnz	r3, 80036ce <I2C_Master_ADDR+0x42>
 80036c6:	6903      	ldr	r3, [r0, #16]
 80036c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80036cc:	d019      	beq.n	8003702 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 80036ce:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d125      	bne.n	8003722 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d6:	9303      	str	r3, [sp, #12]
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	9203      	str	r2, [sp, #12]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	9203      	str	r2, [sp, #12]
 80036e2:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ea:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	6503      	str	r3, [r0, #80]	; 0x50
 80036f0:	e7e0      	b.n	80036b4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	6803      	ldr	r3, [r0, #0]
 80036f6:	695a      	ldr	r2, [r3, #20]
 80036f8:	9201      	str	r2, [sp, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	9b01      	ldr	r3, [sp, #4]
 8003700:	e7d8      	b.n	80036b4 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003702:	2300      	movs	r3, #0
 8003704:	9302      	str	r3, [sp, #8]
 8003706:	6803      	ldr	r3, [r0, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	9202      	str	r2, [sp, #8]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	9202      	str	r2, [sp, #8]
 8003710:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003718:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800371a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800371c:	3301      	adds	r3, #1
 800371e:	6503      	str	r3, [r0, #80]	; 0x50
 8003720:	e7c8      	b.n	80036b4 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8003722:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d025      	beq.n	8003776 <I2C_Master_ADDR+0xea>
      else if (hi2c->XferCount == 2U)
 800372a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d07b      	beq.n	800382a <I2C_Master_ADDR+0x19e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003732:	6802      	ldr	r2, [r0, #0]
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373a:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800373c:	6803      	ldr	r3, [r0, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8003744:	d00e      	beq.n	8003764 <I2C_Master_ADDR+0xd8>
 8003746:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800374a:	d007      	beq.n	800375c <I2C_Master_ADDR+0xd0>
 800374c:	2901      	cmp	r1, #1
 800374e:	d005      	beq.n	800375c <I2C_Master_ADDR+0xd0>
 8003750:	2908      	cmp	r1, #8
 8003752:	d003      	beq.n	800375c <I2C_Master_ADDR+0xd0>
 8003754:	2910      	cmp	r1, #16
 8003756:	d001      	beq.n	800375c <I2C_Master_ADDR+0xd0>
 8003758:	2920      	cmp	r1, #32
 800375a:	d103      	bne.n	8003764 <I2C_Master_ADDR+0xd8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003762:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003764:	2300      	movs	r3, #0
 8003766:	930a      	str	r3, [sp, #40]	; 0x28
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	920a      	str	r2, [sp, #40]	; 0x28
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	930a      	str	r3, [sp, #40]	; 0x28
 8003772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003774:	e7ba      	b.n	80036ec <I2C_Master_ADDR+0x60>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003776:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800377a:	d011      	beq.n	80037a0 <I2C_Master_ADDR+0x114>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800377c:	2908      	cmp	r1, #8
 800377e:	d034      	beq.n	80037ea <I2C_Master_ADDR+0x15e>
 8003780:	2920      	cmp	r1, #32
 8003782:	d032      	beq.n	80037ea <I2C_Master_ADDR+0x15e>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003784:	2c12      	cmp	r4, #18
 8003786:	d02e      	beq.n	80037e6 <I2C_Master_ADDR+0x15a>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003788:	2904      	cmp	r1, #4
 800378a:	d040      	beq.n	800380e <I2C_Master_ADDR+0x182>
 800378c:	2902      	cmp	r1, #2
 800378e:	d03e      	beq.n	800380e <I2C_Master_ADDR+0x182>
 8003790:	2910      	cmp	r1, #16
 8003792:	d03c      	beq.n	800380e <I2C_Master_ADDR+0x182>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003794:	6802      	ldr	r2, [r0, #0]
 8003796:	6813      	ldr	r3, [r2, #0]
 8003798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e03b      	b.n	8003818 <I2C_Master_ADDR+0x18c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a0:	6802      	ldr	r2, [r0, #0]
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037a8:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80037aa:	6803      	ldr	r3, [r0, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80037b2:	d00c      	beq.n	80037ce <I2C_Master_ADDR+0x142>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ba:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037bc:	2300      	movs	r3, #0
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	6803      	ldr	r3, [r0, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	9204      	str	r2, [sp, #16]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	9304      	str	r3, [sp, #16]
 80037ca:	9b04      	ldr	r3, [sp, #16]
 80037cc:	e78e      	b.n	80036ec <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2200      	movs	r2, #0
 80037d0:	9205      	str	r2, [sp, #20]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	9205      	str	r2, [sp, #20]
 80037d6:	699a      	ldr	r2, [r3, #24]
 80037d8:	9205      	str	r2, [sp, #20]
 80037da:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e782      	b.n	80036ec <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80037e6:	2901      	cmp	r1, #1
 80037e8:	d0ce      	beq.n	8003788 <I2C_Master_ADDR+0xfc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	6802      	ldr	r2, [r0, #0]
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f2:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f4:	2300      	movs	r3, #0
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	6803      	ldr	r3, [r0, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	9207      	str	r2, [sp, #28]
 80037fe:	699a      	ldr	r2, [r3, #24]
 8003800:	9207      	str	r2, [sp, #28]
 8003802:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	e76e      	b.n	80036ec <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800380e:	6802      	ldr	r2, [r0, #0]
 8003810:	6813      	ldr	r3, [r2, #0]
 8003812:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003816:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003818:	2300      	movs	r3, #0
 800381a:	9306      	str	r3, [sp, #24]
 800381c:	6803      	ldr	r3, [r0, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	9206      	str	r2, [sp, #24]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	9306      	str	r3, [sp, #24]
 8003826:	9b06      	ldr	r3, [sp, #24]
 8003828:	e760      	b.n	80036ec <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800382a:	2904      	cmp	r1, #4
 800382c:	d015      	beq.n	800385a <I2C_Master_ADDR+0x1ce>
 800382e:	2902      	cmp	r1, #2
 8003830:	d013      	beq.n	800385a <I2C_Master_ADDR+0x1ce>
 8003832:	2910      	cmp	r1, #16
 8003834:	d011      	beq.n	800385a <I2C_Master_ADDR+0x1ce>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003836:	6802      	ldr	r2, [r0, #0]
 8003838:	6813      	ldr	r3, [r2, #0]
 800383a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800383e:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003840:	2300      	movs	r3, #0
 8003842:	9308      	str	r3, [sp, #32]
 8003844:	6803      	ldr	r3, [r0, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	9208      	str	r2, [sp, #32]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	9208      	str	r2, [sp, #32]
 800384e:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e00c      	b.n	8003874 <I2C_Master_ADDR+0x1e8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	6802      	ldr	r2, [r0, #0]
 800385c:	6813      	ldr	r3, [r2, #0]
 800385e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003862:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003864:	2300      	movs	r3, #0
 8003866:	9309      	str	r3, [sp, #36]	; 0x24
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	9209      	str	r2, [sp, #36]	; 0x24
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	9309      	str	r3, [sp, #36]	; 0x24
 8003872:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003874:	6803      	ldr	r3, [r0, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800387c:	f43f af36 	beq.w	80036ec <I2C_Master_ADDR+0x60>
 8003880:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003884:	d008      	beq.n	8003898 <I2C_Master_ADDR+0x20c>
 8003886:	2901      	cmp	r1, #1
 8003888:	d006      	beq.n	8003898 <I2C_Master_ADDR+0x20c>
 800388a:	2908      	cmp	r1, #8
 800388c:	d004      	beq.n	8003898 <I2C_Master_ADDR+0x20c>
 800388e:	2910      	cmp	r1, #16
 8003890:	d002      	beq.n	8003898 <I2C_Master_ADDR+0x20c>
 8003892:	2920      	cmp	r1, #32
 8003894:	f47f af2a 	bne.w	80036ec <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e724      	b.n	80036ec <I2C_Master_ADDR+0x60>

080038a2 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80038a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b15b      	cbz	r3, 80038c0 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038a8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80038aa:	6803      	ldr	r3, [r0, #0]
 80038ac:	7812      	ldrb	r2, [r2, #0]
 80038ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038b2:	3301      	adds	r3, #1
 80038b4:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29b      	uxth	r3, r3
 80038be:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 80038c0:	4770      	bx	lr

080038c2 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80038c2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b15b      	cbz	r3, 80038e0 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	6803      	ldr	r3, [r0, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038d2:	3301      	adds	r3, #1
 80038d4:	6243      	str	r3, [r0, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80038d6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
}
 80038e0:	4770      	bx	lr
	...

080038e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	08db      	lsrs	r3, r3, #3
 80038f0:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0a1b      	lsrs	r3, r3, #8
 80038f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80038fc:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 80038fe:	9b01      	ldr	r3, [sp, #4]
 8003900:	3b01      	subs	r3, #1
 8003902:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003904:	9b01      	ldr	r3, [sp, #4]
 8003906:	b133      	cbz	r3, 8003916 <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003908:	6803      	ldr	r3, [r0, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003910:	d1f5      	bne.n	80038fe <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8003912:	2000      	movs	r0, #0
 8003914:	e004      	b.n	8003920 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6403      	str	r3, [r0, #64]	; 0x40
      return HAL_ERROR;
 800391e:	2001      	movs	r0, #1
}
 8003920:	b002      	add	sp, #8
 8003922:	4770      	bx	lr
 8003924:	20000008 	.word	0x20000008
 8003928:	14f8b589 	.word	0x14f8b589

0800392c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800392c:	6803      	ldr	r3, [r0, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003934:	d101      	bne.n	800393a <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 8003936:	2000      	movs	r0, #0
}
 8003938:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800393e:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003940:	2300      	movs	r3, #0
 8003942:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003944:	2220      	movs	r2, #32
 8003946:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800394e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003950:	f042 0204 	orr.w	r2, r2, #4
 8003954:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003956:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800395a:	2001      	movs	r0, #1
 800395c:	4770      	bx	lr

0800395e <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800395e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003960:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003964:	d004      	beq.n	8003970 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003966:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003968:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800396c:	d003      	beq.n	8003976 <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 800396e:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003970:	2301      	movs	r3, #1
 8003972:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003974:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003976:	2308      	movs	r3, #8
 8003978:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800397a:	e7f8      	b.n	800396e <I2C_ConvertOtherXferOptions+0x10>

0800397c <I2C_WaitOnFlagUntilTimeout>:
{
 800397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003980:	4607      	mov	r7, r0
 8003982:	460d      	mov	r5, r1
 8003984:	4690      	mov	r8, r2
 8003986:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003988:	e022      	b.n	80039d0 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800398a:	f7ff fb61 	bl	8003050 <HAL_GetTick>
 800398e:	9b06      	ldr	r3, [sp, #24]
 8003990:	1ac0      	subs	r0, r0, r3
 8003992:	42b0      	cmp	r0, r6
 8003994:	d800      	bhi.n	8003998 <I2C_WaitOnFlagUntilTimeout+0x1c>
 8003996:	b9de      	cbnz	r6, 80039d0 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003998:	2300      	movs	r3, #0
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800399c:	2220      	movs	r2, #32
 800399e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a8:	f042 0220 	orr.w	r2, r2, #32
 80039ac:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80039ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 80039b2:	2001      	movs	r0, #1
 80039b4:	e01a      	b.n	80039ec <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699c      	ldr	r4, [r3, #24]
 80039ba:	ea25 0404 	bic.w	r4, r5, r4
 80039be:	b2a4      	uxth	r4, r4
 80039c0:	fab4 f484 	clz	r4, r4
 80039c4:	0964      	lsrs	r4, r4, #5
 80039c6:	45a0      	cmp	r8, r4
 80039c8:	d10f      	bne.n	80039ea <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 80039ca:	f1b6 3fff 	cmp.w	r6, #4294967295
 80039ce:	d1dc      	bne.n	800398a <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039d0:	f3c5 4307 	ubfx	r3, r5, #16, #8
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d1ee      	bne.n	80039b6 <I2C_WaitOnFlagUntilTimeout+0x3a>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695c      	ldr	r4, [r3, #20]
 80039dc:	ea25 0404 	bic.w	r4, r5, r4
 80039e0:	b2a4      	uxth	r4, r4
 80039e2:	fab4 f484 	clz	r4, r4
 80039e6:	0964      	lsrs	r4, r4, #5
 80039e8:	e7ed      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 80039ea:	2000      	movs	r0, #0
}
 80039ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80039f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f4:	4605      	mov	r5, r0
 80039f6:	460e      	mov	r6, r1
 80039f8:	4617      	mov	r7, r2
 80039fa:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039fc:	e03d      	b.n	8003a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a04:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a0c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a12:	2220      	movs	r2, #32
 8003a14:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a18:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003a1e:	f042 0204 	orr.w	r2, r2, #4
 8003a22:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003a24:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8003a28:	2001      	movs	r0, #1
 8003a2a:	e034      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2c:	f7ff fb10 	bl	8003050 <HAL_GetTick>
 8003a30:	eba0 0008 	sub.w	r0, r0, r8
 8003a34:	42b8      	cmp	r0, r7
 8003a36:	d800      	bhi.n	8003a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 8003a38:	b9ff      	cbnz	r7, 8003a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a48:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003a4a:	f042 0220 	orr.w	r2, r2, #32
 8003a4e:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003a50:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 8003a54:	2001      	movs	r0, #1
 8003a56:	e01e      	b.n	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	699c      	ldr	r4, [r3, #24]
 8003a5c:	ea26 0404 	bic.w	r4, r6, r4
 8003a60:	b2a4      	uxth	r4, r4
 8003a62:	3c00      	subs	r4, #0
 8003a64:	bf18      	it	ne
 8003a66:	2401      	movne	r4, #1
 8003a68:	b1a4      	cbz	r4, 8003a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a72:	d1c4      	bne.n	80039fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	f1b7 3fff 	cmp.w	r7, #4294967295
 8003a78:	d1d8      	bne.n	8003a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7a:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d1ea      	bne.n	8003a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	695c      	ldr	r4, [r3, #20]
 8003a86:	ea26 0404 	bic.w	r4, r6, r4
 8003a8a:	b2a4      	uxth	r4, r4
 8003a8c:	3c00      	subs	r4, #0
 8003a8e:	bf18      	it	ne
 8003a90:	2401      	movne	r4, #1
 8003a92:	e7e9      	b.n	8003a68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 8003a94:	2000      	movs	r0, #0
}
 8003a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a9c <I2C_MasterRequestWrite>:
{
 8003a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	460d      	mov	r5, r1
 8003aa4:	4616      	mov	r6, r2
 8003aa6:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003aa8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d00d      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d00b      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
 8003ab2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ab6:	d008      	beq.n	8003aca <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ab8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003aba:	2b12      	cmp	r3, #18
 8003abc:	d10a      	bne.n	8003ad4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003abe:	6802      	ldr	r2, [r0, #0]
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e004      	b.n	8003ad4 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aca:	6822      	ldr	r2, [r4, #0]
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad4:	9700      	str	r7, [sp, #0]
 8003ad6:	4633      	mov	r3, r6
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff ff4c 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	b980      	cbnz	r0, 8003b08 <I2C_MasterRequestWrite+0x6c>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aec:	d116      	bne.n	8003b1c <I2C_MasterRequestWrite+0x80>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003af4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003af6:	463b      	mov	r3, r7
 8003af8:	4632      	mov	r2, r6
 8003afa:	4913      	ldr	r1, [pc, #76]	; (8003b48 <I2C_MasterRequestWrite+0xac>)
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ff77 	bl	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b02:	b9f8      	cbnz	r0, 8003b44 <I2C_MasterRequestWrite+0xa8>
}
 8003b04:	b003      	add	sp, #12
 8003b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003b10:	d002      	beq.n	8003b18 <I2C_MasterRequestWrite+0x7c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b16:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003b18:	2003      	movs	r0, #3
 8003b1a:	e7f3      	b.n	8003b04 <I2C_MasterRequestWrite+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b1c:	11eb      	asrs	r3, r5, #7
 8003b1e:	6822      	ldr	r2, [r4, #0]
 8003b20:	f003 0306 	and.w	r3, r3, #6
 8003b24:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003b28:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	4632      	mov	r2, r6
 8003b2e:	4907      	ldr	r1, [pc, #28]	; (8003b4c <I2C_MasterRequestWrite+0xb0>)
 8003b30:	4620      	mov	r0, r4
 8003b32:	f7ff ff5d 	bl	80039f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b36:	b918      	cbnz	r0, 8003b40 <I2C_MasterRequestWrite+0xa4>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	b2ed      	uxtb	r5, r5
 8003b3c:	611d      	str	r5, [r3, #16]
 8003b3e:	e7da      	b.n	8003af6 <I2C_MasterRequestWrite+0x5a>
      return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
 8003b42:	e7df      	b.n	8003b04 <I2C_MasterRequestWrite+0x68>
    return HAL_ERROR;
 8003b44:	2001      	movs	r0, #1
 8003b46:	e7dd      	b.n	8003b04 <I2C_MasterRequestWrite+0x68>
 8003b48:	00010002 	.word	0x00010002
 8003b4c:	00010008 	.word	0x00010008

08003b50 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003b50:	b570      	push	{r4, r5, r6, lr}
 8003b52:	4604      	mov	r4, r0
 8003b54:	460d      	mov	r5, r1
 8003b56:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b60:	d11c      	bne.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b62:	4620      	mov	r0, r4
 8003b64:	f7ff fee2 	bl	800392c <I2C_IsAcknowledgeFailed>
 8003b68:	b9d0      	cbnz	r0, 8003ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b6e:	d0f3      	beq.n	8003b58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7ff fa6e 	bl	8003050 <HAL_GetTick>
 8003b74:	1b80      	subs	r0, r0, r6
 8003b76:	42a8      	cmp	r0, r5
 8003b78:	d801      	bhi.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003b7a:	2d00      	cmp	r5, #0
 8003b7c:	d1ec      	bne.n	8003b58 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b82:	2220      	movs	r2, #32
 8003b84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003b8e:	f042 0220 	orr.w	r2, r2, #32
 8003b92:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003b94:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003b98:	2001      	movs	r0, #1
 8003b9a:	e000      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003b9c:	2000      	movs	r0, #0
}
 8003b9e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003ba0:	2001      	movs	r0, #1
 8003ba2:	e7fc      	b.n	8003b9e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08003ba4 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	460d      	mov	r5, r1
 8003baa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f013 0f04 	tst.w	r3, #4
 8003bb4:	d11c      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff feb8 	bl	800392c <I2C_IsAcknowledgeFailed>
 8003bbc:	b9d0      	cbnz	r0, 8003bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003bc2:	d0f3      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc4:	f7ff fa44 	bl	8003050 <HAL_GetTick>
 8003bc8:	1b80      	subs	r0, r0, r6
 8003bca:	42a8      	cmp	r0, r5
 8003bcc:	d801      	bhi.n	8003bd2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d1ec      	bne.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bdc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003be8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003bec:	2001      	movs	r0, #1
 8003bee:	e000      	b.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8003bf0:	2000      	movs	r0, #0
}
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	e7fc      	b.n	8003bf2 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08003bf8 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	f000 80cc 	beq.w	8003d96 <HAL_I2C_Init+0x19e>
{
 8003bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c00:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d077      	beq.n	8003cfa <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0a:	2324      	movs	r3, #36	; 0x24
 8003c0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003c10:	6822      	ldr	r2, [r4, #0]
 8003c12:	6813      	ldr	r3, [r2, #0]
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c22:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c2c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c2e:	f002 f985 	bl	8005f3c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c32:	6862      	ldr	r2, [r4, #4]
 8003c34:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_I2C_Init+0x1a8>)
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d864      	bhi.n	8003d04 <HAL_I2C_Init+0x10c>
 8003c3a:	4b5a      	ldr	r3, [pc, #360]	; (8003da4 <HAL_I2C_Init+0x1ac>)
 8003c3c:	4298      	cmp	r0, r3
 8003c3e:	bf8c      	ite	hi
 8003c40:	2300      	movhi	r3, #0
 8003c42:	2301      	movls	r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f040 80a8 	bne.w	8003d9a <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8003c4a:	4d57      	ldr	r5, [pc, #348]	; (8003da8 <HAL_I2C_Init+0x1b0>)
 8003c4c:	fba5 3500 	umull	r3, r5, r5, r0
 8003c50:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c52:	6826      	ldr	r6, [r4, #0]
 8003c54:	6871      	ldr	r1, [r6, #4]
 8003c56:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003c5a:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8003c5e:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c60:	6821      	ldr	r1, [r4, #0]
 8003c62:	6a0b      	ldr	r3, [r1, #32]
 8003c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c68:	6865      	ldr	r5, [r4, #4]
 8003c6a:	4a4d      	ldr	r2, [pc, #308]	; (8003da0 <HAL_I2C_Init+0x1a8>)
 8003c6c:	4295      	cmp	r5, r2
 8003c6e:	d84f      	bhi.n	8003d10 <HAL_I2C_Init+0x118>
 8003c70:	1c7a      	adds	r2, r7, #1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c76:	6825      	ldr	r5, [r4, #0]
 8003c78:	69e9      	ldr	r1, [r5, #28]
 8003c7a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003c7e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003c82:	6863      	ldr	r3, [r4, #4]
 8003c84:	4a46      	ldr	r2, [pc, #280]	; (8003da0 <HAL_I2C_Init+0x1a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d84c      	bhi.n	8003d24 <HAL_I2C_Init+0x12c>
 8003c8a:	3801      	subs	r0, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003c92:	3001      	adds	r0, #1
 8003c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c98:	4218      	tst	r0, r3
 8003c9a:	d078      	beq.n	8003d8e <HAL_I2C_Init+0x196>
 8003c9c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ca4:	6821      	ldr	r1, [r4, #0]
 8003ca6:	680b      	ldr	r3, [r1, #0]
 8003ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003cac:	69e2      	ldr	r2, [r4, #28]
 8003cae:	6a20      	ldr	r0, [r4, #32]
 8003cb0:	4302      	orrs	r2, r0
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cb6:	6821      	ldr	r1, [r4, #0]
 8003cb8:	688b      	ldr	r3, [r1, #8]
 8003cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cc2:	6922      	ldr	r2, [r4, #16]
 8003cc4:	68e0      	ldr	r0, [r4, #12]
 8003cc6:	4302      	orrs	r2, r0
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	68cb      	ldr	r3, [r1, #12]
 8003cd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cd4:	6962      	ldr	r2, [r4, #20]
 8003cd6:	69a0      	ldr	r0, [r4, #24]
 8003cd8:	4302      	orrs	r2, r0
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	6813      	ldr	r3, [r2, #0]
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce8:	2000      	movs	r0, #0
 8003cea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	2320      	movs	r3, #32
 8003cee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8003cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003cfa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003cfe:	f7fd fe7b 	bl	80019f8 <HAL_I2C_MspInit>
 8003d02:	e782      	b.n	8003c0a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d04:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_I2C_Init+0x1b4>)
 8003d06:	4298      	cmp	r0, r3
 8003d08:	bf8c      	ite	hi
 8003d0a:	2300      	movhi	r3, #0
 8003d0c:	2301      	movls	r3, #1
 8003d0e:	e799      	b.n	8003c44 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d10:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d14:	fb02 f207 	mul.w	r2, r2, r7
 8003d18:	4d25      	ldr	r5, [pc, #148]	; (8003db0 <HAL_I2C_Init+0x1b8>)
 8003d1a:	fba5 5202 	umull	r5, r2, r5, r2
 8003d1e:	0992      	lsrs	r2, r2, #6
 8003d20:	3201      	adds	r2, #1
 8003d22:	e7a6      	b.n	8003c72 <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d24:	68a2      	ldr	r2, [r4, #8]
 8003d26:	b9ba      	cbnz	r2, 8003d58 <HAL_I2C_Init+0x160>
 8003d28:	1e46      	subs	r6, r0, #1
 8003d2a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 8003d2e:	fbb6 f6f7 	udiv	r6, r6, r7
 8003d32:	3601      	adds	r6, #1
 8003d34:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003d38:	fab6 f686 	clz	r6, r6
 8003d3c:	0976      	lsrs	r6, r6, #5
 8003d3e:	bb46      	cbnz	r6, 8003d92 <HAL_I2C_Init+0x19a>
 8003d40:	b9c2      	cbnz	r2, 8003d74 <HAL_I2C_Init+0x17c>
 8003d42:	1e42      	subs	r2, r0, #1
 8003d44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d4c:	3201      	adds	r2, #1
 8003d4e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003d52:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8003d56:	e7a3      	b.n	8003ca0 <HAL_I2C_Init+0xa8>
 8003d58:	1e46      	subs	r6, r0, #1
 8003d5a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003d5e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003d62:	fbb6 f6f7 	udiv	r6, r6, r7
 8003d66:	3601      	adds	r6, #1
 8003d68:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8003d6c:	fab6 f686 	clz	r6, r6
 8003d70:	0976      	lsrs	r6, r6, #5
 8003d72:	e7e4      	b.n	8003d3e <HAL_I2C_Init+0x146>
 8003d74:	1e42      	subs	r2, r0, #1
 8003d76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003d7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d82:	3201      	adds	r2, #1
 8003d84:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003d88:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8003d8c:	e788      	b.n	8003ca0 <HAL_I2C_Init+0xa8>
 8003d8e:	2304      	movs	r3, #4
 8003d90:	e786      	b.n	8003ca0 <HAL_I2C_Init+0xa8>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e784      	b.n	8003ca0 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8003d96:	2001      	movs	r0, #1
}
 8003d98:	4770      	bx	lr
    return HAL_ERROR;
 8003d9a:	2001      	movs	r0, #1
 8003d9c:	e7ac      	b.n	8003cf8 <HAL_I2C_Init+0x100>
 8003d9e:	bf00      	nop
 8003da0:	000186a0 	.word	0x000186a0
 8003da4:	001e847f 	.word	0x001e847f
 8003da8:	431bde83 	.word	0x431bde83
 8003dac:	003d08ff 	.word	0x003d08ff
 8003db0:	10624dd3 	.word	0x10624dd3

08003db4 <HAL_I2C_Master_Transmit>:
{
 8003db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003db8:	b085      	sub	sp, #20
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	4691      	mov	r9, r2
 8003dc0:	4698      	mov	r8, r3
 8003dc2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff f944 	bl	8003050 <HAL_GetTick>
 8003dc8:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dca:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8003dce:	b2c0      	uxtb	r0, r0
 8003dd0:	2820      	cmp	r0, #32
 8003dd2:	d004      	beq.n	8003dde <HAL_I2C_Master_Transmit+0x2a>
    return HAL_BUSY;
 8003dd4:	2702      	movs	r7, #2
}
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	b005      	add	sp, #20
 8003dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dde:	9500      	str	r5, [sp, #0]
 8003de0:	2319      	movs	r3, #25
 8003de2:	2201      	movs	r2, #1
 8003de4:	494f      	ldr	r1, [pc, #316]	; (8003f24 <HAL_I2C_Master_Transmit+0x170>)
 8003de6:	4620      	mov	r0, r4
 8003de8:	f7ff fdc8 	bl	800397c <I2C_WaitOnFlagUntilTimeout>
 8003dec:	2800      	cmp	r0, #0
 8003dee:	f040 8092 	bne.w	8003f16 <HAL_I2C_Master_Transmit+0x162>
    __HAL_LOCK(hi2c);
 8003df2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	f000 808f 	beq.w	8003f1a <HAL_I2C_Master_Transmit+0x166>
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	f012 0f01 	tst.w	r2, #1
 8003e0a:	d103      	bne.n	8003e14 <HAL_I2C_Master_Transmit+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e14:	6822      	ldr	r2, [r4, #0]
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e1c:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e1e:	2321      	movs	r3, #33	; 0x21
 8003e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e24:	2310      	movs	r3, #16
 8003e26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003e2e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e32:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e38:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e3a:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <HAL_I2C_Master_Transmit+0x174>)
 8003e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e3e:	462b      	mov	r3, r5
 8003e40:	4632      	mov	r2, r6
 8003e42:	4639      	mov	r1, r7
 8003e44:	4620      	mov	r0, r4
 8003e46:	f7ff fe29 	bl	8003a9c <I2C_MasterRequestWrite>
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d166      	bne.n	8003f1e <HAL_I2C_Master_Transmit+0x16a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e50:	2300      	movs	r3, #0
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	9203      	str	r2, [sp, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	9303      	str	r3, [sp, #12]
 8003e5e:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003e60:	e011      	b.n	8003e86 <HAL_I2C_Master_Transmit+0xd2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8003e68:	2701      	movs	r7, #1
 8003e6a:	e7b4      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e7f7      	b.n	8003e68 <HAL_I2C_Master_Transmit+0xb4>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e78:	462a      	mov	r2, r5
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f7ff fe91 	bl	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d12e      	bne.n	8003ee4 <HAL_I2C_Master_Transmit+0x130>
    while (hi2c->XferSize > 0U)
 8003e86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d036      	beq.n	8003efa <HAL_I2C_Master_Transmit+0x146>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e8c:	462a      	mov	r2, r5
 8003e8e:	4631      	mov	r1, r6
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fe5d 	bl	8003b50 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e96:	2800      	cmp	r0, #0
 8003e98:	d1e3      	bne.n	8003e62 <HAL_I2C_Master_Transmit+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ea4:	1c4b      	adds	r3, r1, #1
 8003ea6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003ea8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003eb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	6950      	ldr	r0, [r2, #20]
 8003ebe:	f010 0f04 	tst.w	r0, #4
 8003ec2:	d0d9      	beq.n	8003e78 <HAL_I2C_Master_Transmit+0xc4>
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0d7      	beq.n	8003e78 <HAL_I2C_Master_Transmit+0xc4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ec8:	784b      	ldrb	r3, [r1, #1]
 8003eca:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8003ecc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ece:	3301      	adds	r3, #1
 8003ed0:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003ed2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003edc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	8523      	strh	r3, [r4, #40]	; 0x28
 8003ee2:	e7c9      	b.n	8003e78 <HAL_I2C_Master_Transmit+0xc4>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x13a>
        return HAL_ERROR;
 8003eea:	2701      	movs	r7, #1
 8003eec:	e773      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eee:	6822      	ldr	r2, [r4, #0]
 8003ef0:	6813      	ldr	r3, [r2, #0]
 8003ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	e7f7      	b.n	8003eea <HAL_I2C_Master_Transmit+0x136>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	6822      	ldr	r2, [r4, #0]
 8003efc:	6813      	ldr	r3, [r2, #0]
 8003efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f02:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	2320      	movs	r3, #32
 8003f06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8003f10:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8003f14:	e75f      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_BUSY;
 8003f16:	2702      	movs	r7, #2
 8003f18:	e75d      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
    __HAL_LOCK(hi2c);
 8003f1a:	2702      	movs	r7, #2
 8003f1c:	e75b      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
      return HAL_ERROR;
 8003f1e:	2701      	movs	r7, #1
 8003f20:	e759      	b.n	8003dd6 <HAL_I2C_Master_Transmit+0x22>
 8003f22:	bf00      	nop
 8003f24:	00100002 	.word	0x00100002
 8003f28:	ffff0000 	.word	0xffff0000

08003f2c <HAL_I2C_MasterTxCpltCallback>:
}
 8003f2c:	4770      	bx	lr

08003f2e <I2C_MasterTransmit_BTF>:
{
 8003f2e:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b21      	cmp	r3, #33	; 0x21
 8003f3a:	d000      	beq.n	8003f3e <I2C_MasterTransmit_BTF+0x10>
}
 8003f3c:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 8003f3e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b163      	cbz	r3, 8003f5e <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f44:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f4e:	3301      	adds	r3, #1
 8003f50:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003f52:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003f5c:	e7ee      	b.n	8003f3c <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f5e:	2a08      	cmp	r2, #8
 8003f60:	d004      	beq.n	8003f6c <I2C_MasterTransmit_BTF+0x3e>
 8003f62:	2a20      	cmp	r2, #32
 8003f64:	d002      	beq.n	8003f6c <I2C_MasterTransmit_BTF+0x3e>
 8003f66:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003f6a:	d113      	bne.n	8003f94 <I2C_MasterTransmit_BTF+0x66>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f6c:	6802      	ldr	r2, [r0, #0]
 8003f6e:	6853      	ldr	r3, [r2, #4]
 8003f70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f74:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f76:	6802      	ldr	r2, [r0, #0]
 8003f78:	6813      	ldr	r3, [r2, #0]
 8003f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7e:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	2220      	movs	r2, #32
 8003f86:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f8e:	f7ff ffcd 	bl	8003f2c <HAL_I2C_MasterTxCpltCallback>
}
 8003f92:	e7d3      	b.n	8003f3c <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f94:	6802      	ldr	r2, [r0, #0]
 8003f96:	6853      	ldr	r3, [r2, #4]
 8003f98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f9c:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f9e:	2311      	movs	r3, #17
 8003fa0:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fae:	f7ff ffbd 	bl	8003f2c <HAL_I2C_MasterTxCpltCallback>
 8003fb2:	e7c3      	b.n	8003f3c <I2C_MasterTransmit_BTF+0xe>

08003fb4 <HAL_I2C_MasterRxCpltCallback>:
}
 8003fb4:	4770      	bx	lr

08003fb6 <HAL_I2C_SlaveTxCpltCallback>:
}
 8003fb6:	4770      	bx	lr

08003fb8 <I2C_SlaveTransmit_TXE>:
{
 8003fb8:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fbe:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003fc0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	b183      	cbz	r3, 8003fe8 <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fc6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8003fc8:	6803      	ldr	r3, [r0, #0]
 8003fca:	7809      	ldrb	r1, [r1, #0]
 8003fcc:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003fce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8003fd4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fde:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	b90b      	cbnz	r3, 8003fe8 <I2C_SlaveTransmit_TXE+0x30>
 8003fe4:	2a29      	cmp	r2, #41	; 0x29
 8003fe6:	d000      	beq.n	8003fea <I2C_SlaveTransmit_TXE+0x32>
}
 8003fe8:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fea:	6802      	ldr	r2, [r0, #0]
 8003fec:	6853      	ldr	r3, [r2, #4]
 8003fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ff4:	2321      	movs	r3, #33	; 0x21
 8003ff6:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff8:	2328      	movs	r3, #40	; 0x28
 8003ffa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ffe:	f7ff ffda 	bl	8003fb6 <HAL_I2C_SlaveTxCpltCallback>
}
 8004002:	e7f1      	b.n	8003fe8 <I2C_SlaveTransmit_TXE+0x30>

08004004 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004004:	4770      	bx	lr

08004006 <I2C_SlaveReceive_RXNE>:
{
 8004006:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004008:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800400c:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 800400e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004010:	b29b      	uxth	r3, r3
 8004012:	b183      	cbz	r3, 8004036 <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	6803      	ldr	r3, [r0, #0]
 8004016:	6919      	ldr	r1, [r3, #16]
 8004018:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800401a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800401c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004022:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29b      	uxth	r3, r3
 800402a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800402c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	b90b      	cbnz	r3, 8004036 <I2C_SlaveReceive_RXNE+0x30>
 8004032:	2a2a      	cmp	r2, #42	; 0x2a
 8004034:	d000      	beq.n	8004038 <I2C_SlaveReceive_RXNE+0x32>
}
 8004036:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004038:	6802      	ldr	r2, [r0, #0]
 800403a:	6853      	ldr	r3, [r2, #4]
 800403c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004040:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004042:	2322      	movs	r3, #34	; 0x22
 8004044:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004046:	2328      	movs	r3, #40	; 0x28
 8004048:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800404c:	f7ff ffda 	bl	8004004 <HAL_I2C_SlaveRxCpltCallback>
}
 8004050:	e7f1      	b.n	8004036 <I2C_SlaveReceive_RXNE+0x30>

08004052 <HAL_I2C_AddrCallback>:
}
 8004052:	4770      	bx	lr

08004054 <I2C_Slave_ADDR>:
{
 8004054:	b508      	push	{r3, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004056:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800405a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800405e:	2b28      	cmp	r3, #40	; 0x28
 8004060:	d007      	beq.n	8004072 <I2C_Slave_ADDR+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004062:	6803      	ldr	r3, [r0, #0]
 8004064:	f06f 0202 	mvn.w	r2, #2
 8004068:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800406a:	2300      	movs	r3, #0
 800406c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004070:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004072:	6802      	ldr	r2, [r0, #0]
 8004074:	6853      	ldr	r3, [r2, #4]
 8004076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800407a:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800407c:	f011 0f04 	tst.w	r1, #4
 8004080:	d00b      	beq.n	800409a <I2C_Slave_ADDR+0x46>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004082:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004084:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004088:	d109      	bne.n	800409e <I2C_Slave_ADDR+0x4a>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800408a:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 800408c:	2100      	movs	r1, #0
 800408e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004092:	4619      	mov	r1, r3
 8004094:	f7ff ffdd 	bl	8004052 <HAL_I2C_AddrCallback>
 8004098:	e7ea      	b.n	8004070 <I2C_Slave_ADDR+0x1c>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800409a:	2301      	movs	r3, #1
 800409c:	e7f2      	b.n	8004084 <I2C_Slave_ADDR+0x30>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800409e:	8b02      	ldrh	r2, [r0, #24]
 80040a0:	e7f4      	b.n	800408c <I2C_Slave_ADDR+0x38>

080040a2 <HAL_I2C_ListenCpltCallback>:
}
 80040a2:	4770      	bx	lr

080040a4 <I2C_Slave_AF>:
{
 80040a4:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040ac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80040ae:	2a08      	cmp	r2, #8
 80040b0:	d001      	beq.n	80040b6 <I2C_Slave_AF+0x12>
 80040b2:	2a20      	cmp	r2, #32
 80040b4:	d101      	bne.n	80040ba <I2C_Slave_AF+0x16>
 80040b6:	2b28      	cmp	r3, #40	; 0x28
 80040b8:	d006      	beq.n	80040c8 <I2C_Slave_AF+0x24>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80040ba:	2b21      	cmp	r3, #33	; 0x21
 80040bc:	d01e      	beq.n	80040fc <I2C_Slave_AF+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040be:	6803      	ldr	r3, [r0, #0]
 80040c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c4:	615a      	str	r2, [r3, #20]
}
 80040c6:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <I2C_Slave_AF+0x90>)
 80040ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040cc:	6802      	ldr	r2, [r0, #0]
 80040ce:	6853      	ldr	r3, [r2, #4]
 80040d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80040d4:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d6:	6803      	ldr	r3, [r0, #0]
 80040d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040dc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040de:	6802      	ldr	r2, [r0, #0]
 80040e0:	6813      	ldr	r3, [r2, #0]
 80040e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e6:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80040ec:	2220      	movs	r2, #32
 80040ee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040f2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80040f6:	f7ff ffd4 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
 80040fa:	e7e4      	b.n	80040c6 <I2C_Slave_AF+0x22>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040fc:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <I2C_Slave_AF+0x90>)
 80040fe:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004100:	2321      	movs	r3, #33	; 0x21
 8004102:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004104:	2320      	movs	r3, #32
 8004106:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800410a:	2300      	movs	r3, #0
 800410c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004110:	6802      	ldr	r2, [r0, #0]
 8004112:	6853      	ldr	r3, [r2, #4]
 8004114:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004118:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800411a:	6803      	ldr	r3, [r0, #0]
 800411c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004120:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	6802      	ldr	r2, [r0, #0]
 8004124:	6813      	ldr	r3, [r2, #0]
 8004126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800412a:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800412c:	f7ff ff43 	bl	8003fb6 <HAL_I2C_SlaveTxCpltCallback>
 8004130:	e7c9      	b.n	80040c6 <I2C_Slave_AF+0x22>
 8004132:	bf00      	nop
 8004134:	ffff0000 	.word	0xffff0000

08004138 <HAL_I2C_MemTxCpltCallback>:
}
 8004138:	4770      	bx	lr

0800413a <I2C_MemoryTransmit_TXE_BTF>:
{
 800413a:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if (hi2c->EventCount == 0U)
 8004140:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004142:	b99a      	cbnz	r2, 800416c <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004144:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d008      	beq.n	800415c <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800414a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800414c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004150:	6802      	ldr	r2, [r0, #0]
 8004152:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8004154:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004156:	3301      	adds	r3, #1
 8004158:	6503      	str	r3, [r0, #80]	; 0x50
}
 800415a:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800415c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800415e:	6802      	ldr	r2, [r0, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8004164:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004166:	3302      	adds	r3, #2
 8004168:	6503      	str	r3, [r0, #80]	; 0x50
 800416a:	e7f6      	b.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
 800416c:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 800416e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004170:	2a01      	cmp	r2, #1
 8004172:	d023      	beq.n	80041bc <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8004174:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004176:	2a02      	cmp	r2, #2
 8004178:	d1ef      	bne.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800417a:	2b22      	cmp	r3, #34	; 0x22
 800417c:	d026      	beq.n	80041cc <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800417e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004180:	b292      	uxth	r2, r2
 8004182:	b10a      	cbz	r2, 8004188 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8004184:	2b21      	cmp	r3, #33	; 0x21
 8004186:	d027      	beq.n	80041d8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004188:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800418a:	b292      	uxth	r2, r2
 800418c:	2a00      	cmp	r2, #0
 800418e:	d1e4      	bne.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
 8004190:	2b21      	cmp	r3, #33	; 0x21
 8004192:	d1e2      	bne.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004194:	6802      	ldr	r2, [r0, #0]
 8004196:	6853      	ldr	r3, [r2, #4]
 8004198:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800419c:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	6802      	ldr	r2, [r0, #0]
 80041a0:	6813      	ldr	r3, [r2, #0]
 80041a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041ac:	2220      	movs	r2, #32
 80041ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041b6:	f7ff ffbf 	bl	8004138 <HAL_I2C_MemTxCpltCallback>
}
 80041ba:	e7ce      	b.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80041be:	6802      	ldr	r2, [r0, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80041c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80041c6:	3301      	adds	r3, #1
 80041c8:	6503      	str	r3, [r0, #80]	; 0x50
 80041ca:	e7c6      	b.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80041cc:	6802      	ldr	r2, [r0, #0]
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e7c0      	b.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80041da:	6803      	ldr	r3, [r0, #0]
 80041dc:	7812      	ldrb	r2, [r2, #0]
 80041de:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80041e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80041e2:	3301      	adds	r3, #1
 80041e4:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 80041e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	8543      	strh	r3, [r0, #42]	; 0x2a
 80041f0:	e7b3      	b.n	800415a <I2C_MemoryTransmit_TXE_BTF+0x20>

080041f2 <I2C_MasterTransmit_TXE>:
{
 80041f2:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041fa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80041fe:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004200:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004202:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8004204:	b909      	cbnz	r1, 800420a <I2C_MasterTransmit_TXE+0x18>
 8004206:	2b21      	cmp	r3, #33	; 0x21
 8004208:	d004      	beq.n	8004214 <I2C_MasterTransmit_TXE+0x22>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800420a:	2b21      	cmp	r3, #33	; 0x21
 800420c:	d03b      	beq.n	8004286 <I2C_MasterTransmit_TXE+0x94>
 800420e:	2a40      	cmp	r2, #64	; 0x40
 8004210:	d037      	beq.n	8004282 <I2C_MasterTransmit_TXE+0x90>
}
 8004212:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004214:	2c08      	cmp	r4, #8
 8004216:	d004      	beq.n	8004222 <I2C_MasterTransmit_TXE+0x30>
 8004218:	2c20      	cmp	r4, #32
 800421a:	d002      	beq.n	8004222 <I2C_MasterTransmit_TXE+0x30>
 800421c:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8004220:	d119      	bne.n	8004256 <I2C_MasterTransmit_TXE+0x64>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004222:	6802      	ldr	r2, [r0, #0]
 8004224:	6853      	ldr	r3, [r2, #4]
 8004226:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800422a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	6802      	ldr	r2, [r0, #0]
 800422e:	6813      	ldr	r3, [r2, #0]
 8004230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004234:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004236:	2300      	movs	r3, #0
 8004238:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800423a:	2320      	movs	r3, #32
 800423c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004240:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b40      	cmp	r3, #64	; 0x40
 8004248:	d015      	beq.n	8004276 <I2C_MasterTransmit_TXE+0x84>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800424a:	2300      	movs	r3, #0
 800424c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004250:	f7ff fe6c 	bl	8003f2c <HAL_I2C_MasterTxCpltCallback>
 8004254:	e7dd      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	6853      	ldr	r3, [r2, #4]
 800425a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800425e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004260:	2311      	movs	r3, #17
 8004262:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	2300      	movs	r3, #0
 8004266:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800426a:	2320      	movs	r3, #32
 800426c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004270:	f7ff fe5c 	bl	8003f2c <HAL_I2C_MasterTxCpltCallback>
 8004274:	e7cd      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004276:	2300      	movs	r3, #0
 8004278:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 800427c:	f7ff ff5c 	bl	8004138 <HAL_I2C_MemTxCpltCallback>
 8004280:	e7c7      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004282:	2b22      	cmp	r3, #34	; 0x22
 8004284:	d1c5      	bne.n	8004212 <I2C_MasterTransmit_TXE+0x20>
    if (hi2c->XferCount == 0U)
 8004286:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004288:	b29b      	uxth	r3, r3
 800428a:	b92b      	cbnz	r3, 8004298 <I2C_MasterTransmit_TXE+0xa6>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800428c:	6802      	ldr	r2, [r0, #0]
 800428e:	6853      	ldr	r3, [r2, #4]
 8004290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004294:	6053      	str	r3, [r2, #4]
 8004296:	e7bc      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004298:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b40      	cmp	r3, #64	; 0x40
 80042a0:	d00c      	beq.n	80042bc <I2C_MasterTransmit_TXE+0xca>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80042a4:	6803      	ldr	r3, [r0, #0]
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042aa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042ac:	3301      	adds	r3, #1
 80042ae:	6243      	str	r3, [r0, #36]	; 0x24
        hi2c->XferCount--;
 80042b0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80042ba:	e7aa      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042bc:	f7ff ff3d 	bl	800413a <I2C_MemoryTransmit_TXE_BTF>
 80042c0:	e7a7      	b.n	8004212 <I2C_MasterTransmit_TXE+0x20>

080042c2 <HAL_I2C_MemRxCpltCallback>:
}
 80042c2:	4770      	bx	lr

080042c4 <I2C_MasterReceive_BTF>:
{
 80042c4:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 80042c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d014      	beq.n	80042fa <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 80042d0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b03      	cmp	r3, #3
 80042d6:	d022      	beq.n	800431e <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80042d8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d039      	beq.n	8004354 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e0:	6803      	ldr	r3, [r0, #0]
 80042e2:	691a      	ldr	r2, [r3, #16]
 80042e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80042ea:	3301      	adds	r3, #1
 80042ec:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 80042ee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 80042f8:	e010      	b.n	800431c <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042fa:	6802      	ldr	r2, [r0, #0]
 80042fc:	6853      	ldr	r3, [r2, #4]
 80042fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004302:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004304:	6803      	ldr	r3, [r0, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800430a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800430c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800430e:	3301      	adds	r3, #1
 8004310:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004312:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29b      	uxth	r3, r3
 800431a:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800431c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800431e:	6801      	ldr	r1, [r0, #0]
 8004320:	684b      	ldr	r3, [r1, #4]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004326:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004328:	2a04      	cmp	r2, #4
 800432a:	d006      	beq.n	800433a <I2C_MasterReceive_BTF+0x76>
 800432c:	2a02      	cmp	r2, #2
 800432e:	d004      	beq.n	800433a <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004330:	6802      	ldr	r2, [r0, #0]
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004338:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800433a:	6803      	ldr	r3, [r0, #0]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004340:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004342:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004344:	3301      	adds	r3, #1
 8004346:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004348:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	8543      	strh	r3, [r0, #42]	; 0x2a
 8004352:	e7e3      	b.n	800431c <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004354:	2a01      	cmp	r2, #1
 8004356:	d00b      	beq.n	8004370 <I2C_MasterReceive_BTF+0xac>
 8004358:	2a10      	cmp	r2, #16
 800435a:	d009      	beq.n	8004370 <I2C_MasterReceive_BTF+0xac>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800435c:	2a04      	cmp	r2, #4
 800435e:	d038      	beq.n	80043d2 <I2C_MasterReceive_BTF+0x10e>
 8004360:	2a02      	cmp	r2, #2
 8004362:	d036      	beq.n	80043d2 <I2C_MasterReceive_BTF+0x10e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004364:	6802      	ldr	r2, [r0, #0]
 8004366:	6813      	ldr	r3, [r2, #0]
 8004368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e004      	b.n	800437a <I2C_MasterReceive_BTF+0xb6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004370:	6802      	ldr	r2, [r0, #0]
 8004372:	6813      	ldr	r3, [r2, #0]
 8004374:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004378:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	6803      	ldr	r3, [r0, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004380:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004382:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004384:	1c53      	adds	r3, r2, #1
 8004386:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 8004388:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29b      	uxth	r3, r3
 8004390:	8543      	strh	r3, [r0, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	6803      	ldr	r3, [r0, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8004398:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800439a:	3301      	adds	r3, #1
 800439c:	6243      	str	r3, [r0, #36]	; 0x24
    hi2c->XferCount--;
 800439e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043a8:	6802      	ldr	r2, [r0, #0]
 80043aa:	6853      	ldr	r3, [r2, #4]
 80043ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043b2:	2320      	movs	r3, #32
 80043b4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043b8:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d00d      	beq.n	80043de <I2C_MasterReceive_BTF+0x11a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043c8:	2312      	movs	r3, #18
 80043ca:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043cc:	f7ff fdf2 	bl	8003fb4 <HAL_I2C_MasterRxCpltCallback>
 80043d0:	e7a4      	b.n	800431c <I2C_MasterReceive_BTF+0x58>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	6802      	ldr	r2, [r0, #0]
 80043d4:	6813      	ldr	r3, [r2, #0]
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e7cd      	b.n	800437a <I2C_MasterReceive_BTF+0xb6>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	2300      	movs	r3, #0
 80043e0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	6303      	str	r3, [r0, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043e6:	f7ff ff6c 	bl	80042c2 <HAL_I2C_MemRxCpltCallback>
 80043ea:	e797      	b.n	800431c <I2C_MasterReceive_BTF+0x58>

080043ec <HAL_I2C_ErrorCallback>:
}
 80043ec:	4770      	bx	lr

080043ee <I2C_MasterReceive_RXNE>:
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b22      	cmp	r3, #34	; 0x22
 80043f6:	d000      	beq.n	80043fa <I2C_MasterReceive_RXNE+0xc>
 80043f8:	4770      	bx	lr
{
 80043fa:	b510      	push	{r4, lr}
 80043fc:	4604      	mov	r4, r0
    tmp = hi2c->XferCount;
 80043fe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 8004402:	2b03      	cmp	r3, #3
 8004404:	d916      	bls.n	8004434 <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	6803      	ldr	r3, [r0, #0]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800440c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800440e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004410:	3301      	adds	r3, #1
 8004412:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8004414:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29b      	uxth	r3, r3
 800441c:	8543      	strh	r3, [r0, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800441e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004420:	b29b      	uxth	r3, r3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d000      	beq.n	8004428 <I2C_MasterReceive_RXNE+0x3a>
}
 8004426:	bd10      	pop	{r4, pc}
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004428:	6802      	ldr	r2, [r0, #0]
 800442a:	6853      	ldr	r3, [r2, #4]
 800442c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004430:	6053      	str	r3, [r2, #4]
 8004432:	e7f8      	b.n	8004426 <I2C_MasterReceive_RXNE+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004434:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004436:	2a02      	cmp	r2, #2
 8004438:	d0f5      	beq.n	8004426 <I2C_MasterReceive_RXNE+0x38>
 800443a:	2b01      	cmp	r3, #1
 800443c:	d8f3      	bhi.n	8004426 <I2C_MasterReceive_RXNE+0x38>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800443e:	f7ff fa51 	bl	80038e4 <I2C_WaitOnSTOPRequestThroughIT>
 8004442:	2800      	cmp	r0, #0
 8004444:	d12e      	bne.n	80044a4 <I2C_MasterReceive_RXNE+0xb6>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	6813      	ldr	r3, [r2, #0]
 800444a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800444e:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	6853      	ldr	r3, [r2, #4]
 8004454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004458:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	691a      	ldr	r2, [r3, #16]
 800445e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004460:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004464:	3301      	adds	r3, #1
 8004466:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29b      	uxth	r3, r3
 8004470:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004472:	2320      	movs	r3, #32
 8004474:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004478:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d008      	beq.n	8004494 <I2C_MasterReceive_RXNE+0xa6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004482:	2300      	movs	r3, #0
 8004484:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004488:	2312      	movs	r3, #18
 800448a:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff fd91 	bl	8003fb4 <HAL_I2C_MasterRxCpltCallback>
 8004492:	e7c8      	b.n	8004426 <I2C_MasterReceive_RXNE+0x38>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	6323      	str	r3, [r4, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800449c:	4620      	mov	r0, r4
 800449e:	f7ff ff10 	bl	80042c2 <HAL_I2C_MemRxCpltCallback>
 80044a2:	e7c0      	b.n	8004426 <I2C_MasterReceive_RXNE+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	6853      	ldr	r3, [r2, #4]
 80044a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80044ac:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044b4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80044b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044b8:	3301      	adds	r3, #1
 80044ba:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80044bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	2320      	movs	r3, #32
 80044c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff ff8a 	bl	80043ec <HAL_I2C_ErrorCallback>
}
 80044d8:	e7a5      	b.n	8004426 <I2C_MasterReceive_RXNE+0x38>

080044da <HAL_I2C_AbortCpltCallback>:
}
 80044da:	4770      	bx	lr

080044dc <I2C_DMAAbort>:
{
 80044dc:	b500      	push	{lr}
 80044de:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80044e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80044ea:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80044ec:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <I2C_DMAAbort+0xdc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	08db      	lsrs	r3, r3, #3
 80044f2:	4932      	ldr	r1, [pc, #200]	; (80045bc <I2C_DMAAbort+0xe0>)
 80044f4:	fba1 1303 	umull	r1, r3, r1, r3
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80044fe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004502:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8004504:	9b01      	ldr	r3, [sp, #4]
 8004506:	b143      	cbz	r3, 800451a <I2C_DMAAbort+0x3e>
    count--;
 8004508:	9b01      	ldr	r3, [sp, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800450e:	6803      	ldr	r3, [r0, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004516:	d1f5      	bne.n	8004504 <I2C_DMAAbort+0x28>
 8004518:	e003      	b.n	8004522 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800451c:	f043 0320 	orr.w	r3, r3, #32
 8004520:	6403      	str	r3, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8004522:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004524:	b10b      	cbz	r3, 800452a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004526:	2100      	movs	r1, #0
 8004528:	6299      	str	r1, [r3, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800452a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800452c:	b10b      	cbz	r3, 8004532 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800452e:	2100      	movs	r1, #0
 8004530:	6299      	str	r1, [r3, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	6801      	ldr	r1, [r0, #0]
 8004534:	680b      	ldr	r3, [r1, #0]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800453a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8004540:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004542:	b10b      	cbz	r3, 8004548 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004544:	2100      	movs	r1, #0
 8004546:	6359      	str	r1, [r3, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8004548:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800454a:	b10b      	cbz	r3, 8004550 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800454c:	2100      	movs	r1, #0
 800454e:	6359      	str	r1, [r3, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8004550:	6801      	ldr	r1, [r0, #0]
 8004552:	680b      	ldr	r3, [r1, #0]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800455a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b60      	cmp	r3, #96	; 0x60
 8004562:	d00e      	beq.n	8004582 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004564:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004568:	2a28      	cmp	r2, #40	; 0x28
 800456a:	d014      	beq.n	8004596 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 800456c:	2320      	movs	r3, #32
 800456e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	2300      	movs	r3, #0
 8004574:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004578:	f7ff ff38 	bl	80043ec <HAL_I2C_ErrorCallback>
}
 800457c:	b003      	add	sp, #12
 800457e:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 8004582:	2320      	movs	r3, #32
 8004584:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004588:	2300      	movs	r3, #0
 800458a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800458e:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004590:	f7ff ffa3 	bl	80044da <HAL_I2C_AbortCpltCallback>
 8004594:	e7f2      	b.n	800457c <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 8004596:	6802      	ldr	r2, [r0, #0]
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a0:	6802      	ldr	r2, [r0, #0]
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80045ae:	2328      	movs	r3, #40	; 0x28
 80045b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80045b4:	e7e0      	b.n	8004578 <I2C_DMAAbort+0x9c>
 80045b6:	bf00      	nop
 80045b8:	20000008 	.word	0x20000008
 80045bc:	14f8b589 	.word	0x14f8b589

080045c0 <I2C_ITError>:
{
 80045c0:	b510      	push	{r4, lr}
 80045c2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80045ca:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80045ce:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045d0:	2a10      	cmp	r2, #16
 80045d2:	d035      	beq.n	8004640 <I2C_ITError+0x80>
 80045d4:	2a40      	cmp	r2, #64	; 0x40
 80045d6:	d033      	beq.n	8004640 <I2C_ITError+0x80>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d8:	f003 0228 	and.w	r2, r3, #40	; 0x28
 80045dc:	2a28      	cmp	r2, #40	; 0x28
 80045de:	d037      	beq.n	8004650 <I2C_ITError+0x90>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	6852      	ldr	r2, [r2, #4]
 80045e4:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80045e8:	d107      	bne.n	80045fa <I2C_ITError+0x3a>
 80045ea:	2b60      	cmp	r3, #96	; 0x60
 80045ec:	d005      	beq.n	80045fa <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 80045ee:	2320      	movs	r3, #32
 80045f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	6323      	str	r3, [r4, #48]	; 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004606:	d047      	beq.n	8004698 <I2C_ITError+0xd8>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800460e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004610:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004612:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004616:	2a01      	cmp	r2, #1
 8004618:	d020      	beq.n	800465c <I2C_ITError+0x9c>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800461a:	4a44      	ldr	r2, [pc, #272]	; (800472c <I2C_ITError+0x16c>)
 800461c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800461e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004620:	f7fe fdba 	bl	8003198 <HAL_DMA_Abort_IT>
 8004624:	2800      	cmp	r0, #0
 8004626:	d049      	beq.n	80046bc <I2C_ITError+0xfc>
        __HAL_I2C_DISABLE(hi2c);
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8004632:	2320      	movs	r3, #32
 8004634:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004638:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800463a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800463c:	4798      	blx	r3
 800463e:	e03d      	b.n	80046bc <I2C_ITError+0xfc>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004640:	2b22      	cmp	r3, #34	; 0x22
 8004642:	d1c9      	bne.n	80045d8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	680a      	ldr	r2, [r1, #0]
 8004648:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800464c:	600a      	str	r2, [r1, #0]
 800464e:	e7c3      	b.n	80045d8 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004650:	2300      	movs	r3, #0
 8004652:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004654:	2328      	movs	r3, #40	; 0x28
 8004656:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800465a:	e7d0      	b.n	80045fe <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800465c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800465e:	4a33      	ldr	r2, [pc, #204]	; (800472c <I2C_ITError+0x16c>)
 8004660:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004662:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004664:	f7fe fd98 	bl	8003198 <HAL_DMA_Abort_IT>
 8004668:	b340      	cbz	r0, 80046bc <I2C_ITError+0xfc>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004672:	d005      	beq.n	8004680 <I2C_ITError+0xc0>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004678:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800467a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800467c:	3301      	adds	r3, #1
 800467e:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	6813      	ldr	r3, [r2, #0]
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800468a:	2320      	movs	r3, #32
 800468c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004690:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004692:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004694:	4798      	blx	r3
 8004696:	e011      	b.n	80046bc <I2C_ITError+0xfc>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004698:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	2a60      	cmp	r2, #96	; 0x60
 80046a0:	d01f      	beq.n	80046e2 <I2C_ITError+0x122>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046a8:	d005      	beq.n	80046b6 <I2C_ITError+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ae:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046b2:	3301      	adds	r3, #1
 80046b4:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fe98 	bl	80043ec <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80046bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046be:	f013 0f0f 	tst.w	r3, #15
 80046c2:	d004      	beq.n	80046ce <I2C_ITError+0x10e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	6853      	ldr	r3, [r2, #4]
 80046c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046cc:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80046ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80046d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80046d6:	f012 0f04 	tst.w	r2, #4
 80046da:	d001      	beq.n	80046e0 <I2C_ITError+0x120>
 80046dc:	2b28      	cmp	r3, #40	; 0x28
 80046de:	d018      	beq.n	8004712 <I2C_ITError+0x152>
}
 80046e0:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80046e2:	2220      	movs	r2, #32
 80046e4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e8:	2200      	movs	r2, #0
 80046ea:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046f2:	d005      	beq.n	8004700 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80046fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046fc:	3301      	adds	r3, #1
 80046fe:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8004700:	6822      	ldr	r2, [r4, #0]
 8004702:	6813      	ldr	r3, [r2, #0]
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff fee5 	bl	80044da <HAL_I2C_AbortCpltCallback>
 8004710:	e7d4      	b.n	80046bc <I2C_ITError+0xfc>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <I2C_ITError+0x170>)
 8004714:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004716:	2300      	movs	r3, #0
 8004718:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800471a:	2220      	movs	r2, #32
 800471c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004720:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff fcbc 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
}
 800472a:	e7d9      	b.n	80046e0 <I2C_ITError+0x120>
 800472c:	080044dd 	.word	0x080044dd
 8004730:	ffff0000 	.word	0xffff0000

08004734 <I2C_Slave_STOPF>:
{
 8004734:	b530      	push	{r4, r5, lr}
 8004736:	b083      	sub	sp, #12
 8004738:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800473a:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 800473e:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004740:	6802      	ldr	r2, [r0, #0]
 8004742:	6853      	ldr	r3, [r2, #4]
 8004744:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004748:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800474a:	2300      	movs	r3, #0
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	6803      	ldr	r3, [r0, #0]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	9201      	str	r2, [sp, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	6802      	ldr	r2, [r0, #0]
 8004760:	6813      	ldr	r3, [r2, #0]
 8004762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004766:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004768:	6803      	ldr	r3, [r0, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004770:	d038      	beq.n	80047e4 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004772:	2d22      	cmp	r5, #34	; 0x22
 8004774:	d021      	beq.n	80047ba <I2C_Slave_STOPF+0x86>
 8004776:	2d2a      	cmp	r5, #42	; 0x2a
 8004778:	d01f      	beq.n	80047ba <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800477a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800477c:	6812      	ldr	r2, [r2, #0]
 800477e:	6852      	ldr	r2, [r2, #4]
 8004780:	b292      	uxth	r2, r2
 8004782:	8542      	strh	r2, [r0, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004784:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8004786:	b292      	uxth	r2, r2
 8004788:	b11a      	cbz	r2, 8004792 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800478a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800478c:	f042 0204 	orr.w	r2, r2, #4
 8004790:	6402      	str	r2, [r0, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004798:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800479a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800479c:	f7fe fdea 	bl	8003374 <HAL_DMA_GetState>
 80047a0:	2801      	cmp	r0, #1
 80047a2:	d01f      	beq.n	80047e4 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80047a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047a6:	4a44      	ldr	r2, [pc, #272]	; (80048b8 <I2C_Slave_STOPF+0x184>)
 80047a8:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80047aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80047ac:	f7fe fcf4 	bl	8003198 <HAL_DMA_Abort_IT>
 80047b0:	b1c0      	cbz	r0, 80047e4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80047b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80047b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80047b6:	4798      	blx	r3
 80047b8:	e014      	b.n	80047e4 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80047ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6852      	ldr	r2, [r2, #4]
 80047c0:	b292      	uxth	r2, r2
 80047c2:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80047c4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80047c6:	b292      	uxth	r2, r2
 80047c8:	b11a      	cbz	r2, 80047d2 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80047cc:	f042 0204 	orr.w	r2, r2, #4
 80047d0:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047d8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047dc:	f7fe fdca 	bl	8003374 <HAL_DMA_GetState>
 80047e0:	2801      	cmp	r0, #1
 80047e2:	d142      	bne.n	800486a <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 80047e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	b333      	cbz	r3, 8004838 <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	f012 0f04 	tst.w	r2, #4
 80047f2:	d00a      	beq.n	800480a <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f4:	691a      	ldr	r2, [r3, #16]
 80047f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80047fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047fc:	3301      	adds	r3, #1
 80047fe:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004800:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29b      	uxth	r3, r3
 8004808:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004812:	d00a      	beq.n	800482a <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004818:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800481a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481c:	3301      	adds	r3, #1
 800481e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004820:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29b      	uxth	r3, r3
 8004828:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800482a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800482c:	b29b      	uxth	r3, r3
 800482e:	b11b      	cbz	r3, 8004838 <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004832:	f043 0304 	orr.w	r3, r3, #4
 8004836:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483a:	bb13      	cbnz	r3, 8004882 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800483c:	2d2a      	cmp	r5, #42	; 0x2a
 800483e:	d025      	beq.n	800488c <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004840:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b28      	cmp	r3, #40	; 0x28
 8004848:	d029      	beq.n	800489e <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800484a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800484c:	2b22      	cmp	r3, #34	; 0x22
 800484e:	d001      	beq.n	8004854 <I2C_Slave_STOPF+0x120>
 8004850:	2d22      	cmp	r5, #34	; 0x22
 8004852:	d119      	bne.n	8004888 <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004854:	2300      	movs	r3, #0
 8004856:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004858:	2220      	movs	r2, #32
 800485a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004862:	4620      	mov	r0, r4
 8004864:	f7ff fbce 	bl	8004004 <HAL_I2C_SlaveRxCpltCallback>
}
 8004868:	e00e      	b.n	8004888 <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800486a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800486c:	4a12      	ldr	r2, [pc, #72]	; (80048b8 <I2C_Slave_STOPF+0x184>)
 800486e:	635a      	str	r2, [r3, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004870:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004872:	f7fe fc91 	bl	8003198 <HAL_DMA_Abort_IT>
 8004876:	2800      	cmp	r0, #0
 8004878:	d0b4      	beq.n	80047e4 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800487a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800487c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800487e:	4798      	blx	r3
 8004880:	e7b0      	b.n	80047e4 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8004882:	4620      	mov	r0, r4
 8004884:	f7ff fe9c 	bl	80045c0 <I2C_ITError>
}
 8004888:	b003      	add	sp, #12
 800488a:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 800488c:	2300      	movs	r3, #0
 800488e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004890:	2328      	movs	r3, #40	; 0x28
 8004892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004896:	4620      	mov	r0, r4
 8004898:	f7ff fbb4 	bl	8004004 <HAL_I2C_SlaveRxCpltCallback>
 800489c:	e7d0      	b.n	8004840 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <I2C_Slave_STOPF+0x188>)
 80048a0:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048a6:	2220      	movs	r2, #32
 80048a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fbf6 	bl	80040a2 <HAL_I2C_ListenCpltCallback>
 80048b6:	e7e7      	b.n	8004888 <I2C_Slave_STOPF+0x154>
 80048b8:	080044dd 	.word	0x080044dd
 80048bc:	ffff0000 	.word	0xffff0000

080048c0 <HAL_I2C_EV_IRQHandler>:
{
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048c4:	6802      	ldr	r2, [r0, #0]
 80048c6:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ca:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80048ce:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d0:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048d4:	2b10      	cmp	r3, #16
 80048d6:	d014      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x42>
 80048d8:	b2c8      	uxtb	r0, r1
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d011      	beq.n	8004902 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d077      	beq.n	80049d4 <HAL_I2C_EV_IRQHandler+0x114>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048e4:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 80048e6:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048e8:	f013 0f02 	tst.w	r3, #2
 80048ec:	d075      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x11a>
 80048ee:	f415 7f00 	tst.w	r5, #512	; 0x200
 80048f2:	d072      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x11a>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f6:	b103      	cbz	r3, 80048fa <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048f8:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048fa:	4620      	mov	r0, r4
 80048fc:	f7ff fbaa 	bl	8004054 <I2C_Slave_ADDR>
}
 8004900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004902:	6997      	ldr	r7, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004904:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004906:	f011 0001 	ands.w	r0, r1, #1
 800490a:	d105      	bne.n	8004918 <HAL_I2C_EV_IRQHandler+0x58>
 800490c:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8004910:	d0f6      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
 8004912:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8004916:	d0f3      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004918:	b110      	cbz	r0, 8004920 <HAL_I2C_EV_IRQHandler+0x60>
 800491a:	f415 7f00 	tst.w	r5, #512	; 0x200
 800491e:	d127      	bne.n	8004970 <HAL_I2C_EV_IRQHandler+0xb0>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004920:	f011 0f08 	tst.w	r1, #8
 8004924:	d002      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x6c>
 8004926:	f415 7f00 	tst.w	r5, #512	; 0x200
 800492a:	d128      	bne.n	800497e <HAL_I2C_EV_IRQHandler+0xbe>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800492c:	f011 0f02 	tst.w	r1, #2
 8004930:	d002      	beq.n	8004938 <HAL_I2C_EV_IRQHandler+0x78>
 8004932:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004936:	d126      	bne.n	8004986 <HAL_I2C_EV_IRQHandler+0xc6>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004938:	f017 0f04 	tst.w	r7, #4
 800493c:	d02f      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0xde>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800493e:	6852      	ldr	r2, [r2, #4]
 8004940:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004944:	d1dc      	bne.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004946:	f011 0f80 	tst.w	r1, #128	; 0x80
 800494a:	d005      	beq.n	8004958 <HAL_I2C_EV_IRQHandler+0x98>
 800494c:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004950:	d002      	beq.n	8004958 <HAL_I2C_EV_IRQHandler+0x98>
 8004952:	f011 0f04 	tst.w	r1, #4
 8004956:	d01a      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0xce>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004958:	f011 0f04 	tst.w	r1, #4
 800495c:	d0d0      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
 800495e:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004962:	d0cd      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004964:	2b10      	cmp	r3, #16
 8004966:	d016      	beq.n	8004996 <HAL_I2C_EV_IRQHandler+0xd6>
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004968:	4620      	mov	r0, r4
 800496a:	f7ff fbe6 	bl	800413a <I2C_MemoryTransmit_TXE_BTF>
 800496e:	e7c7      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8004970:	4620      	mov	r0, r4
 8004972:	f7fe fff4 	bl	800395e <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8004976:	4620      	mov	r0, r4
 8004978:	f7fe fe1d 	bl	80035b6 <I2C_Master_SB>
 800497c:	e7c0      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 800497e:	4620      	mov	r0, r4
 8004980:	f7fe fe6d 	bl	800365e <I2C_Master_ADD10>
 8004984:	e7bc      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8004986:	4620      	mov	r0, r4
 8004988:	f7fe fe80 	bl	800368c <I2C_Master_ADDR>
 800498c:	e7b8      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff fc2f 	bl	80041f2 <I2C_MasterTransmit_TXE>
 8004994:	e7b4      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8004996:	4620      	mov	r0, r4
 8004998:	f7ff fac9 	bl	8003f2e <I2C_MasterTransmit_BTF>
 800499c:	e7b0      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800499e:	6853      	ldr	r3, [r2, #4]
 80049a0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80049a4:	d1ac      	bne.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a6:	f011 0f40 	tst.w	r1, #64	; 0x40
 80049aa:	d005      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xf8>
 80049ac:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80049b0:	d002      	beq.n	80049b8 <HAL_I2C_EV_IRQHandler+0xf8>
 80049b2:	f011 0f04 	tst.w	r1, #4
 80049b6:	d009      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x10c>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049b8:	f011 0f04 	tst.w	r1, #4
 80049bc:	d0a0      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
 80049be:	f415 7f00 	tst.w	r5, #512	; 0x200
 80049c2:	d09d      	beq.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 80049c4:	4620      	mov	r0, r4
 80049c6:	f7ff fc7d 	bl	80042c4 <I2C_MasterReceive_BTF>
 80049ca:	e799      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7ff fd0e 	bl	80043ee <I2C_MasterReceive_RXNE>
 80049d2:	e795      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80049d4:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80049d6:	6953      	ldr	r3, [r2, #20]
 80049d8:	e786      	b.n	80048e8 <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049da:	f013 0f10 	tst.w	r3, #16
 80049de:	d002      	beq.n	80049e6 <HAL_I2C_EV_IRQHandler+0x126>
 80049e0:	f415 7f00 	tst.w	r5, #512	; 0x200
 80049e4:	d118      	bne.n	8004a18 <HAL_I2C_EV_IRQHandler+0x158>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049e6:	2821      	cmp	r0, #33	; 0x21
 80049e8:	d01a      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x160>
 80049ea:	2829      	cmp	r0, #41	; 0x29
 80049ec:	d018      	beq.n	8004a20 <HAL_I2C_EV_IRQHandler+0x160>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80049f2:	d005      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x140>
 80049f4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 80049f8:	d002      	beq.n	8004a00 <HAL_I2C_EV_IRQHandler+0x140>
 80049fa:	f013 0f04 	tst.w	r3, #4
 80049fe:	d028      	beq.n	8004a52 <HAL_I2C_EV_IRQHandler+0x192>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a00:	f013 0f04 	tst.w	r3, #4
 8004a04:	f43f af7c 	beq.w	8004900 <HAL_I2C_EV_IRQHandler+0x40>
 8004a08:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004a0c:	f43f af78 	beq.w	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fe ff56 	bl	80038c2 <I2C_SlaveReceive_BTF>
      }
 8004a16:	e773      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7ff fe8b 	bl	8004734 <I2C_Slave_STOPF>
 8004a1e:	e76f      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a20:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a24:	d005      	beq.n	8004a32 <HAL_I2C_EV_IRQHandler+0x172>
 8004a26:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004a2a:	d002      	beq.n	8004a32 <HAL_I2C_EV_IRQHandler+0x172>
 8004a2c:	f013 0f04 	tst.w	r3, #4
 8004a30:	d00b      	beq.n	8004a4a <HAL_I2C_EV_IRQHandler+0x18a>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a32:	f013 0f04 	tst.w	r3, #4
 8004a36:	f43f af63 	beq.w	8004900 <HAL_I2C_EV_IRQHandler+0x40>
 8004a3a:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004a3e:	f43f af5f 	beq.w	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7fe ff2d 	bl	80038a2 <I2C_SlaveTransmit_BTF>
 8004a48:	e75a      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f7ff fab4 	bl	8003fb8 <I2C_SlaveTransmit_TXE>
 8004a50:	e756      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8004a52:	4620      	mov	r0, r4
 8004a54:	f7ff fad7 	bl	8004006 <I2C_SlaveReceive_RXNE>
 8004a58:	e752      	b.n	8004900 <HAL_I2C_EV_IRQHandler+0x40>

08004a5a <HAL_I2C_ER_IRQHandler>:
{
 8004a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5c:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a5e:	6803      	ldr	r3, [r0, #0]
 8004a60:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a62:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a64:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004a68:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8004a6e:	d00c      	beq.n	8004a8a <HAL_I2C_ER_IRQHandler+0x30>
 8004a70:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004a74:	d041      	beq.n	8004afa <HAL_I2C_ER_IRQHandler+0xa0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a76:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8004a7a:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004a7c:	6801      	ldr	r1, [r0, #0]
 8004a7e:	680b      	ldr	r3, [r1, #0]
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	600b      	str	r3, [r1, #0]
    error |= HAL_I2C_ERROR_BERR;
 8004a86:	2601      	movs	r6, #1
 8004a88:	e000      	b.n	8004a8c <HAL_I2C_ER_IRQHandler+0x32>
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a8a:	2600      	movs	r6, #0
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a8c:	f415 7f00 	tst.w	r5, #512	; 0x200
 8004a90:	d008      	beq.n	8004aa4 <HAL_I2C_ER_IRQHandler+0x4a>
 8004a92:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004a96:	d005      	beq.n	8004aa4 <HAL_I2C_ER_IRQHandler+0x4a>
    error |= HAL_I2C_ERROR_ARLO;
 8004a98:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8004aa2:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aa4:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8004aa8:	d019      	beq.n	8004ade <HAL_I2C_ER_IRQHandler+0x84>
 8004aaa:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004aae:	d016      	beq.n	8004ade <HAL_I2C_ER_IRQHandler+0x84>
    tmp2 = hi2c->XferCount;
 8004ab0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ab2:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8004ab4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8004aba:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004abc:	2a20      	cmp	r2, #32
 8004abe:	d01e      	beq.n	8004afe <HAL_I2C_ER_IRQHandler+0xa4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8004ac6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004ac8:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004acc:	2a10      	cmp	r2, #16
 8004ace:	d001      	beq.n	8004ad4 <HAL_I2C_ER_IRQHandler+0x7a>
 8004ad0:	2a40      	cmp	r2, #64	; 0x40
 8004ad2:	d104      	bne.n	8004ade <HAL_I2C_ER_IRQHandler+0x84>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	6813      	ldr	r3, [r2, #0]
 8004ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004adc:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004ade:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8004ae2:	d008      	beq.n	8004af6 <HAL_I2C_ER_IRQHandler+0x9c>
 8004ae4:	f417 7f80 	tst.w	r7, #256	; 0x100
 8004ae8:	d005      	beq.n	8004af6 <HAL_I2C_ER_IRQHandler+0x9c>
    error |= HAL_I2C_ERROR_OVR;
 8004aea:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004af4:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8004af6:	b986      	cbnz	r6, 8004b1a <HAL_I2C_ER_IRQHandler+0xc0>
}
 8004af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004afa:	2600      	movs	r6, #0
 8004afc:	e7c6      	b.n	8004a8c <HAL_I2C_ER_IRQHandler+0x32>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004afe:	2900      	cmp	r1, #0
 8004b00:	d1de      	bne.n	8004ac0 <HAL_I2C_ER_IRQHandler+0x66>
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d005      	beq.n	8004b12 <HAL_I2C_ER_IRQHandler+0xb8>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b06:	2b29      	cmp	r3, #41	; 0x29
 8004b08:	d003      	beq.n	8004b12 <HAL_I2C_ER_IRQHandler+0xb8>
 8004b0a:	2b28      	cmp	r3, #40	; 0x28
 8004b0c:	d1d8      	bne.n	8004ac0 <HAL_I2C_ER_IRQHandler+0x66>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b0e:	2821      	cmp	r0, #33	; 0x21
 8004b10:	d1d6      	bne.n	8004ac0 <HAL_I2C_ER_IRQHandler+0x66>
      I2C_Slave_AF(hi2c);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff fac6 	bl	80040a4 <I2C_Slave_AF>
 8004b18:	e7e1      	b.n	8004ade <HAL_I2C_ER_IRQHandler+0x84>
    hi2c->ErrorCode |= error;
 8004b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b1c:	431e      	orrs	r6, r3
 8004b1e:	6426      	str	r6, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8004b20:	4620      	mov	r0, r4
 8004b22:	f7ff fd4d 	bl	80045c0 <I2C_ITError>
}
 8004b26:	e7e7      	b.n	8004af8 <HAL_I2C_ER_IRQHandler+0x9e>

08004b28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b28:	b570      	push	{r4, r5, r6, lr}
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b2a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004b2e:	d043      	beq.n	8004bb8 <HAL_PCD_EP_DB_Receive+0x90>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b30:	6804      	ldr	r4, [r0, #0]
 8004b32:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	780d      	ldrb	r5, [r1, #0]
 8004b3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004b3e:	3302      	adds	r3, #2
 8004b40:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004b44:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8004b48:	f3c4 0409 	ubfx	r4, r4, #0, #10

    if (ep->xfer_len >= count)
 8004b4c:	698b      	ldr	r3, [r1, #24]
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	d328      	bcc.n	8004ba4 <HAL_PCD_EP_DB_Receive+0x7c>
    {
      ep->xfer_len -= count;
 8004b52:	1b1b      	subs	r3, r3, r4
 8004b54:	618b      	str	r3, [r1, #24]
    else
    {
      ep->xfer_len = 0U;
    }

    if (ep->xfer_len == 0U)
 8004b56:	698b      	ldr	r3, [r1, #24]
 8004b58:	b97b      	cbnz	r3, 8004b7a <HAL_PCD_EP_DB_Receive+0x52>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b5a:	6806      	ldr	r6, [r0, #0]
 8004b5c:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b76:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b7a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004b7e:	d00e      	beq.n	8004b9e <HAL_PCD_EP_DB_Receive+0x76>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004b80:	6802      	ldr	r2, [r0, #0]
 8004b82:	780d      	ldrb	r5, [r1, #0]
 8004b84:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b9a:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    }

    if (count != 0U)
 8004b9e:	b924      	cbnz	r4, 8004baa <HAL_PCD_EP_DB_Receive+0x82>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
    }
  }

  return count;
}
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	618b      	str	r3, [r1, #24]
 8004ba8:	e7d5      	b.n	8004b56 <HAL_PCD_EP_DB_Receive+0x2e>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004baa:	4623      	mov	r3, r4
 8004bac:	890a      	ldrh	r2, [r1, #8]
 8004bae:	6949      	ldr	r1, [r1, #20]
 8004bb0:	6800      	ldr	r0, [r0, #0]
 8004bb2:	f003 fa80 	bl	80080b6 <USB_ReadPMA>
 8004bb6:	e7f3      	b.n	8004ba0 <HAL_PCD_EP_DB_Receive+0x78>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bb8:	6804      	ldr	r4, [r0, #0]
 8004bba:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	780d      	ldrb	r5, [r1, #0]
 8004bc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004bc6:	3306      	adds	r3, #6
 8004bc8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004bcc:	f8b3 4400 	ldrh.w	r4, [r3, #1024]	; 0x400
 8004bd0:	f3c4 0409 	ubfx	r4, r4, #0, #10
    if (ep->xfer_len >= count)
 8004bd4:	698b      	ldr	r3, [r1, #24]
 8004bd6:	42a3      	cmp	r3, r4
 8004bd8:	d32e      	bcc.n	8004c38 <HAL_PCD_EP_DB_Receive+0x110>
      ep->xfer_len -= count;
 8004bda:	1b1b      	subs	r3, r3, r4
 8004bdc:	618b      	str	r3, [r1, #24]
    if (ep->xfer_len == 0U)
 8004bde:	698b      	ldr	r3, [r1, #24]
 8004be0:	b97b      	cbnz	r3, 8004c02 <HAL_PCD_EP_DB_Receive+0xda>
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004be2:	6806      	ldr	r6, [r0, #0]
 8004be4:	f836 3025 	ldrh.w	r3, [r6, r5, lsl #2]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004bf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfe:	f826 3025 	strh.w	r3, [r6, r5, lsl #2]
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c02:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004c06:	d10e      	bne.n	8004c26 <HAL_PCD_EP_DB_Receive+0xfe>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004c08:	6802      	ldr	r2, [r0, #0]
 8004c0a:	780d      	ldrb	r5, [r1, #0]
 8004c0c:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c22:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
    if (count != 0U)
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	d0ba      	beq.n	8004ba0 <HAL_PCD_EP_DB_Receive+0x78>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c2a:	4623      	mov	r3, r4
 8004c2c:	894a      	ldrh	r2, [r1, #10]
 8004c2e:	6949      	ldr	r1, [r1, #20]
 8004c30:	6800      	ldr	r0, [r0, #0]
 8004c32:	f003 fa40 	bl	80080b6 <USB_ReadPMA>
 8004c36:	e7b3      	b.n	8004ba0 <HAL_PCD_EP_DB_Receive+0x78>
      ep->xfer_len = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	618b      	str	r3, [r1, #24]
 8004c3c:	e7cf      	b.n	8004bde <HAL_PCD_EP_DB_Receive+0xb6>

08004c3e <HAL_PCD_Init>:
{
 8004c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c40:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d07f      	beq.n	8004d46 <HAL_PCD_Init+0x108>
 8004c46:	4604      	mov	r4, r0
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c48:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8004c4c:	b1db      	cbz	r3, 8004c86 <HAL_PCD_Init+0x48>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 8004c54:	6820      	ldr	r0, [r4, #0]
 8004c56:	f002 fb1e 	bl	8007296 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c5a:	4625      	mov	r5, r4
 8004c5c:	f855 7b10 	ldr.w	r7, [r5], #16
 8004c60:	466e      	mov	r6, sp
 8004c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	6033      	str	r3, [r6, #0]
 8004c6a:	1d23      	adds	r3, r4, #4
 8004c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f002 fb01 	bl	8007276 <USB_CoreInit>
 8004c74:	4605      	mov	r5, r0
 8004c76:	b158      	cbz	r0, 8004c90 <HAL_PCD_Init+0x52>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004c7e:	2501      	movs	r5, #1
}
 8004c80:	4628      	mov	r0, r5
 8004c82:	b007      	add	sp, #28
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8004c86:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8004c8a:	f005 ff93 	bl	800abb4 <HAL_PCD_MspInit>
 8004c8e:	e7de      	b.n	8004c4e <HAL_PCD_Init+0x10>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c90:	2100      	movs	r1, #0
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	f002 fb09 	bl	80072aa <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c98:	462b      	mov	r3, r5
 8004c9a:	e019      	b.n	8004cd0 <HAL_PCD_Init+0x92>
    hpcd->IN_ep[i].is_in = 1U;
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004ca2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	7048      	strb	r0, [r1, #1]
    hpcd->IN_ep[i].num = i;
 8004caa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8004cae:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cb2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004cb6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8004cba:	86cb      	strh	r3, [r1, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cbc:	eb02 0682 	add.w	r6, r2, r2, lsl #2
 8004cc0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	70f0      	strb	r0, [r6, #3]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cc8:	6388      	str	r0, [r1, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cca:	63c8      	str	r0, [r1, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ccc:	6408      	str	r0, [r1, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cce:	b2d3      	uxtb	r3, r2
 8004cd0:	6861      	ldr	r1, [r4, #4]
 8004cd2:	428b      	cmp	r3, r1
 8004cd4:	d3e2      	bcc.n	8004c9c <HAL_PCD_Init+0x5e>
 8004cd6:	e016      	b.n	8004d06 <HAL_PCD_Init+0xc8>
    hpcd->OUT_ep[i].is_in = 0U;
 8004cd8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8004cdc:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8004ce6:	f883 5168 	strb.w	r5, [r3, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cea:	f883 216b 	strb.w	r2, [r3, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cee:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cf2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cf6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8004cfa:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8004cfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d02:	3501      	adds	r5, #1
 8004d04:	b2ed      	uxtb	r5, r5
 8004d06:	42a9      	cmp	r1, r5
 8004d08:	d8e6      	bhi.n	8004cd8 <HAL_PCD_Init+0x9a>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d0a:	4625      	mov	r5, r4
 8004d0c:	f855 7b10 	ldr.w	r7, [r5], #16
 8004d10:	466e      	mov	r6, sp
 8004d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d14:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	6033      	str	r3, [r6, #0]
 8004d1a:	1d23      	adds	r3, r4, #4
 8004d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d1e:	4638      	mov	r0, r7
 8004d20:	f002 fac5 	bl	80072ae <USB_DevInit>
 8004d24:	4605      	mov	r5, r0
 8004d26:	b120      	cbz	r0, 8004d32 <HAL_PCD_Init+0xf4>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004d2e:	2501      	movs	r5, #1
 8004d30:	e7a6      	b.n	8004c80 <HAL_PCD_Init+0x42>
  hpcd->USB_Address = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d3e:	6820      	ldr	r0, [r4, #0]
 8004d40:	f002 fdcf 	bl	80078e2 <USB_DevDisconnect>
  return HAL_OK;
 8004d44:	e79c      	b.n	8004c80 <HAL_PCD_Init+0x42>
    return HAL_ERROR;
 8004d46:	2501      	movs	r5, #1
 8004d48:	e79a      	b.n	8004c80 <HAL_PCD_Init+0x42>

08004d4a <HAL_PCD_Start>:
{
 8004d4a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8004d4c:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d011      	beq.n	8004d78 <HAL_PCD_Start+0x2e>
 8004d54:	4604      	mov	r4, r0
 8004d56:	2501      	movs	r5, #1
 8004d58:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004d5c:	6800      	ldr	r0, [r0, #0]
 8004d5e:	f002 fa91 	bl	8007284 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004d62:	4629      	mov	r1, r5
 8004d64:	4620      	mov	r0, r4
 8004d66:	f006 f83a 	bl	800adde <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8004d6a:	6820      	ldr	r0, [r4, #0]
 8004d6c:	f002 fdb7 	bl	80078de <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d70:	2000      	movs	r0, #0
 8004d72:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004d78:	2002      	movs	r0, #2
 8004d7a:	e7fc      	b.n	8004d76 <HAL_PCD_Start+0x2c>

08004d7c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4605      	mov	r5, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	4616      	mov	r6, r2
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d84:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004d88:	f000 80ba 	beq.w	8004f00 <HAL_PCD_EP_DB_Transmit+0x184>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d8c:	6802      	ldr	r2, [r0, #0]
 8004d8e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	7809      	ldrb	r1, [r1, #0]
 8004d96:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004d9a:	3302      	adds	r3, #2
 8004d9c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004da0:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8004da4:	f3c2 0209 	ubfx	r2, r2, #0, #10

    if (ep->xfer_len > TxByteNbre)
 8004da8:	69a3      	ldr	r3, [r4, #24]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d92b      	bls.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x8a>
    {
      ep->xfer_len -= TxByteNbre;
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	61a3      	str	r3, [r4, #24]
    else
    {
      ep->xfer_len = 0U;
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004db2:	69a3      	ldr	r3, [r4, #24]
 8004db4:	b353      	cbz	r3, 8004e0c <HAL_PCD_EP_DB_Transmit+0x90>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004db6:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004dba:	d00d      	beq.n	8004dd8 <HAL_PCD_EP_DB_Transmit+0x5c>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004dbc:	6828      	ldr	r0, [r5, #0]
 8004dbe:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dd8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d02b      	beq.n	8004e38 <HAL_PCD_EP_DB_Transmit+0xbc>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004de0:	682a      	ldr	r2, [r5, #0]
 8004de2:	7821      	ldrb	r1, [r4, #0]
 8004de4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
}
 8004e02:	2000      	movs	r0, #0
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
      ep->xfer_len = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	61a3      	str	r3, [r4, #24]
 8004e0a:	e7d2      	b.n	8004db2 <HAL_PCD_EP_DB_Transmit+0x36>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f005 ff05 	bl	800ac1c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e12:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004e16:	d0e3      	beq.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004e18:	682a      	ldr	r2, [r5, #0]
 8004e1a:	7821      	ldrb	r1, [r4, #0]
 8004e1c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e32:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004e36:	e7d3      	b.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxByteNbre;
 8004e38:	6963      	ldr	r3, [r4, #20]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8004e3e:	69e3      	ldr	r3, [r4, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e44:	6a21      	ldr	r1, [r4, #32]
 8004e46:	6923      	ldr	r3, [r4, #16]
 8004e48:	4299      	cmp	r1, r3
 8004e4a:	d31f      	bcc.n	8004e8c <HAL_PCD_EP_DB_Transmit+0x110>
          ep->xfer_len_db -= len;
 8004e4c:	1ac9      	subs	r1, r1, r3
 8004e4e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e50:	7862      	ldrb	r2, [r4, #1]
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	d13f      	bne.n	8004ed6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004e56:	682a      	ldr	r2, [r5, #0]
 8004e58:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8004e5c:	b289      	uxth	r1, r1
 8004e5e:	440a      	add	r2, r1
 8004e60:	7821      	ldrb	r1, [r4, #0]
 8004e62:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004e66:	b9eb      	cbnz	r3, 8004ea4 <HAL_PCD_EP_DB_Transmit+0x128>
 8004e68:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004e6c:	b289      	uxth	r1, r1
 8004e6e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004e72:	b289      	uxth	r1, r1
 8004e74:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004e78:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8004e7c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004e80:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004e84:	b289      	uxth	r1, r1
 8004e86:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004e8a:	e026      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x15e>
        else if (ep->xfer_len_db == 0U)
 8004e8c:	b921      	cbnz	r1, 8004e98 <HAL_PCD_EP_DB_Transmit+0x11c>
          ep->xfer_fill_db = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8004e94:	4613      	mov	r3, r2
 8004e96:	e7db      	b.n	8004e50 <HAL_PCD_EP_DB_Transmit+0xd4>
          ep->xfer_fill_db = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          ep->xfer_len_db = 0U;
 8004e9e:	6223      	str	r3, [r4, #32]
          len = ep->xfer_len_db;
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	e7d5      	b.n	8004e50 <HAL_PCD_EP_DB_Transmit+0xd4>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ea4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ea6:	d809      	bhi.n	8004ebc <HAL_PCD_EP_DB_Transmit+0x140>
 8004ea8:	0859      	lsrs	r1, r3, #1
 8004eaa:	f013 0f01 	tst.w	r3, #1
 8004eae:	d000      	beq.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x136>
 8004eb0:	3101      	adds	r1, #1
 8004eb2:	0289      	lsls	r1, r1, #10
 8004eb4:	b289      	uxth	r1, r1
 8004eb6:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004eba:	e00e      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x15e>
 8004ebc:	0959      	lsrs	r1, r3, #5
 8004ebe:	f013 0f1f 	tst.w	r3, #31
 8004ec2:	d100      	bne.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x14a>
 8004ec4:	3901      	subs	r1, #1
 8004ec6:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8004eca:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004ece:	b289      	uxth	r1, r1
 8004ed0:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004ed4:	e001      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x15e>
 8004ed6:	2a01      	cmp	r2, #1
 8004ed8:	d006      	beq.n	8004ee8 <HAL_PCD_EP_DB_Transmit+0x16c>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8922      	ldrh	r2, [r4, #8]
 8004ede:	6961      	ldr	r1, [r4, #20]
 8004ee0:	6828      	ldr	r0, [r5, #0]
 8004ee2:	f002 fd06 	bl	80078f2 <USB_WritePMA>
 8004ee6:	e77b      	b.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ee8:	682a      	ldr	r2, [r5, #0]
 8004eea:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8004eee:	b289      	uxth	r1, r1
 8004ef0:	440a      	add	r2, r1
 8004ef2:	7821      	ldrb	r1, [r4, #0]
 8004ef4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004ef8:	b299      	uxth	r1, r3
 8004efa:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8004efe:	e7ec      	b.n	8004eda <HAL_PCD_EP_DB_Transmit+0x15e>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f00:	6802      	ldr	r2, [r0, #0]
 8004f02:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	7809      	ldrb	r1, [r1, #0]
 8004f0a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004f0e:	3306      	adds	r3, #6
 8004f10:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8004f14:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
 8004f18:	f3c2 0209 	ubfx	r2, r2, #0, #10
    if (ep->xfer_len >= TxByteNbre)
 8004f1c:	69a3      	ldr	r3, [r4, #24]
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d344      	bcc.n	8004fac <HAL_PCD_EP_DB_Transmit+0x230>
      ep->xfer_len -= TxByteNbre;
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	61a3      	str	r3, [r4, #24]
    if (ep->xfer_len == 0U)
 8004f26:	69a3      	ldr	r3, [r4, #24]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d042      	beq.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x236>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004f2c:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004f30:	d10d      	bne.n	8004f4e <HAL_PCD_EP_DB_Transmit+0x1d2>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f32:	6828      	ldr	r0, [r5, #0]
 8004f34:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f4a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004f4e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	f47f af44 	bne.w	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        ep->xfer_buff += TxByteNbre;
 8004f58:	6963      	ldr	r3, [r4, #20]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	6163      	str	r3, [r4, #20]
        ep->xfer_count += TxByteNbre;
 8004f5e:	69e3      	ldr	r3, [r4, #28]
 8004f60:	4413      	add	r3, r2
 8004f62:	61e3      	str	r3, [r4, #28]
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f64:	6a21      	ldr	r1, [r4, #32]
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	d339      	bcc.n	8004fe0 <HAL_PCD_EP_DB_Transmit+0x264>
          ep->xfer_len_db -= len;
 8004f6c:	1ac9      	subs	r1, r1, r3
 8004f6e:	6221      	str	r1, [r4, #32]
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f70:	682a      	ldr	r2, [r5, #0]
 8004f72:	7861      	ldrb	r1, [r4, #1]
 8004f74:	2900      	cmp	r1, #0
 8004f76:	d158      	bne.n	800502a <HAL_PCD_EP_DB_Transmit+0x2ae>
 8004f78:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8004f7c:	b289      	uxth	r1, r1
 8004f7e:	440a      	add	r2, r1
 8004f80:	7821      	ldrb	r1, [r4, #0]
 8004f82:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004f86:	bbbb      	cbnz	r3, 8004ff8 <HAL_PCD_EP_DB_Transmit+0x27c>
 8004f88:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8004f8c:	b289      	uxth	r1, r1
 8004f8e:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8004f92:	b289      	uxth	r1, r1
 8004f94:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004f98:	f8b2 140c 	ldrh.w	r1, [r2, #1036]	; 0x40c
 8004f9c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004fa0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004fa4:	b289      	uxth	r1, r1
 8004fa6:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8004faa:	e040      	b.n	800502e <HAL_PCD_EP_DB_Transmit+0x2b2>
      ep->xfer_len = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61a3      	str	r3, [r4, #24]
 8004fb0:	e7b9      	b.n	8004f26 <HAL_PCD_EP_DB_Transmit+0x1aa>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f005 fe32 	bl	800ac1c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004fb8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004fbc:	f47f af10 	bne.w	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004fc0:	682a      	ldr	r2, [r5, #0]
 8004fc2:	7821      	ldrb	r1, [r4, #0]
 8004fc4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fda:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004fde:	e6ff      	b.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        else if (ep->xfer_len_db == 0U)
 8004fe0:	b921      	cbnz	r1, 8004fec <HAL_PCD_EP_DB_Transmit+0x270>
          ep->xfer_fill_db = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = TxByteNbre;
 8004fe8:	4613      	mov	r3, r2
 8004fea:	e7c1      	b.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x1f4>
          ep->xfer_len_db = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	6223      	str	r3, [r4, #32]
          ep->xfer_fill_db = 0;
 8004ff0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          len = ep->xfer_len_db;
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	e7bb      	b.n	8004f70 <HAL_PCD_EP_DB_Transmit+0x1f4>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004ff8:	2b3e      	cmp	r3, #62	; 0x3e
 8004ffa:	d809      	bhi.n	8005010 <HAL_PCD_EP_DB_Transmit+0x294>
 8004ffc:	0859      	lsrs	r1, r3, #1
 8004ffe:	f013 0f01 	tst.w	r3, #1
 8005002:	d000      	beq.n	8005006 <HAL_PCD_EP_DB_Transmit+0x28a>
 8005004:	3101      	adds	r1, #1
 8005006:	0289      	lsls	r1, r1, #10
 8005008:	b289      	uxth	r1, r1
 800500a:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 800500e:	e00e      	b.n	800502e <HAL_PCD_EP_DB_Transmit+0x2b2>
 8005010:	0959      	lsrs	r1, r3, #5
 8005012:	f013 0f1f 	tst.w	r3, #31
 8005016:	d100      	bne.n	800501a <HAL_PCD_EP_DB_Transmit+0x29e>
 8005018:	3901      	subs	r1, #1
 800501a:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 800501e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8005022:	b289      	uxth	r1, r1
 8005024:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8005028:	e001      	b.n	800502e <HAL_PCD_EP_DB_Transmit+0x2b2>
 800502a:	2901      	cmp	r1, #1
 800502c:	d006      	beq.n	800503c <HAL_PCD_EP_DB_Transmit+0x2c0>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800502e:	b29b      	uxth	r3, r3
 8005030:	8962      	ldrh	r2, [r4, #10]
 8005032:	6961      	ldr	r1, [r4, #20]
 8005034:	6828      	ldr	r0, [r5, #0]
 8005036:	f002 fc5c 	bl	80078f2 <USB_WritePMA>
 800503a:	e6d1      	b.n	8004de0 <HAL_PCD_EP_DB_Transmit+0x64>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800503c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8005040:	b289      	uxth	r1, r1
 8005042:	440a      	add	r2, r1
 8005044:	7821      	ldrb	r1, [r4, #0]
 8005046:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800504a:	b299      	uxth	r1, r3
 800504c:	f8a2 140c 	strh.w	r1, [r2, #1036]	; 0x40c
 8005050:	e7ed      	b.n	800502e <HAL_PCD_EP_DB_Transmit+0x2b2>

08005052 <PCD_EP_ISR_Handler>:
{
 8005052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005056:	4605      	mov	r5, r0
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005058:	6828      	ldr	r0, [r5, #0]
 800505a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800505e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005062:	f000 820c 	beq.w	800547e <PCD_EP_ISR_Handler+0x42c>
    wIstr = hpcd->Instance->ISTR;
 8005066:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 800506a:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 800506c:	f014 040f 	ands.w	r4, r4, #15
 8005070:	f040 80d4 	bne.w	800521c <PCD_EP_ISR_Handler+0x1ca>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005074:	f013 0f10 	tst.w	r3, #16
 8005078:	d05d      	beq.n	8005136 <PCD_EP_ISR_Handler+0xe4>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800507a:	8803      	ldrh	r3, [r0, #0]
 800507c:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800507e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005082:	f040 808f 	bne.w	80051a4 <PCD_EP_ISR_Handler+0x152>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005086:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800508a:	d0e5      	beq.n	8005058 <PCD_EP_ISR_Handler+0x6>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800508c:	8803      	ldrh	r3, [r0, #0]
 800508e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005092:	051b      	lsls	r3, r3, #20
 8005094:	0d1b      	lsrs	r3, r3, #20
 8005096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509a:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800509c:	6828      	ldr	r0, [r5, #0]
 800509e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80050a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050ac:	3306      	adds	r3, #6
 80050ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80050b2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80050b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ba:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050be:	b18b      	cbz	r3, 80050e4 <PCD_EP_ISR_Handler+0x92>
 80050c0:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 80050c4:	b171      	cbz	r1, 80050e4 <PCD_EP_ISR_Handler+0x92>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050c6:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80050ca:	f002 fff4 	bl	80080b6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80050ce:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 80050d2:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 80050d6:	4413      	add	r3, r2
 80050d8:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050dc:	2100      	movs	r1, #0
 80050de:	4628      	mov	r0, r5
 80050e0:	f005 fd90 	bl	800ac04 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050e4:	682a      	ldr	r2, [r5, #0]
 80050e6:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	f8d5 2178 	ldr.w	r2, [r5, #376]	; 0x178
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	d179      	bne.n	80051ea <PCD_EP_ISR_Handler+0x198>
 80050f6:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80050fa:	b292      	uxth	r2, r2
 80050fc:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8005100:	b292      	uxth	r2, r2
 8005102:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8005106:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 800510a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800510e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005112:	b292      	uxth	r2, r2
 8005114:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005118:	682a      	ldr	r2, [r5, #0]
 800511a:	8813      	ldrh	r3, [r2, #0]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005126:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800512a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	8013      	strh	r3, [r2, #0]
 8005134:	e790      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005136:	8803      	ldrh	r3, [r0, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29b      	uxth	r3, r3
 800514c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800514e:	682a      	ldr	r2, [r5, #0]
 8005150:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8005154:	b29b      	uxth	r3, r3
 8005156:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800515a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800515e:	3302      	adds	r3, #2
 8005160:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005164:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005168:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516c:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800516e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005170:	4413      	add	r3, r2
 8005172:	63eb      	str	r3, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005174:	2100      	movs	r1, #0
 8005176:	4628      	mov	r0, r5
 8005178:	f005 fd50 	bl	800ac1c <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800517c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f af69 	beq.w	8005058 <PCD_EP_ISR_Handler+0x6>
 8005186:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	f47f af65 	bne.w	8005058 <PCD_EP_ISR_Handler+0x6>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800518e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8005192:	682a      	ldr	r2, [r5, #0]
 8005194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005198:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80051a2:	e759      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80051ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051b2:	3306      	adds	r3, #6
 80051b4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80051b8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80051bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c0:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80051c4:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80051c8:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80051cc:	f002 ff73 	bl	80080b6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051d0:	682a      	ldr	r2, [r5, #0]
 80051d2:	8813      	ldrh	r3, [r2, #0]
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	051b      	lsls	r3, r3, #20
 80051da:	0d1b      	lsrs	r3, r3, #20
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80051e2:	4628      	mov	r0, r5
 80051e4:	f005 fd06 	bl	800abf4 <HAL_PCD_SetupStageCallback>
 80051e8:	e736      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80051ea:	2a3e      	cmp	r2, #62	; 0x3e
 80051ec:	d809      	bhi.n	8005202 <PCD_EP_ISR_Handler+0x1b0>
 80051ee:	0851      	lsrs	r1, r2, #1
 80051f0:	f012 0f01 	tst.w	r2, #1
 80051f4:	d000      	beq.n	80051f8 <PCD_EP_ISR_Handler+0x1a6>
 80051f6:	3101      	adds	r1, #1
 80051f8:	0289      	lsls	r1, r1, #10
 80051fa:	b289      	uxth	r1, r1
 80051fc:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8005200:	e78a      	b.n	8005118 <PCD_EP_ISR_Handler+0xc6>
 8005202:	0951      	lsrs	r1, r2, #5
 8005204:	f012 0f1f 	tst.w	r2, #31
 8005208:	d100      	bne.n	800520c <PCD_EP_ISR_Handler+0x1ba>
 800520a:	3901      	subs	r1, #1
 800520c:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8005210:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005214:	b292      	uxth	r2, r2
 8005216:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800521a:	e77d      	b.n	8005118 <PCD_EP_ISR_Handler+0xc6>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800521c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005220:	b29e      	uxth	r6, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005222:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005226:	d14c      	bne.n	80052c2 <PCD_EP_ISR_Handler+0x270>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005228:	f016 0f80 	tst.w	r6, #128	; 0x80
 800522c:	f43f af14 	beq.w	8005058 <PCD_EP_ISR_Handler+0x6>
        ep = &hpcd->IN_ep[epindex];
 8005230:	1c62      	adds	r2, r4, #1
 8005232:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8005236:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800523a:	6828      	ldr	r0, [r5, #0]
 800523c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8005240:	b29b      	uxth	r3, r3
 8005242:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005252:	b29b      	uxth	r3, r3
 8005254:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8005258:	78cb      	ldrb	r3, [r1, #3]
 800525a:	2b02      	cmp	r3, #2
 800525c:	f000 80f2 	beq.w	8005444 <PCD_EP_ISR_Handler+0x3f2>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005260:	6828      	ldr	r0, [r5, #0]
 8005262:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005266:	b29b      	uxth	r3, r3
 8005268:	1c62      	adds	r2, r4, #1
 800526a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800526e:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
 8005272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005276:	3302      	adds	r3, #2
 8005278:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800527c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8005280:	f3c3 0309 	ubfx	r3, r3, #0, #10
          if (ep->xfer_len > TxByteNbre)
 8005284:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005288:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800528c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800528e:	429a      	cmp	r2, r3
 8005290:	f240 80e1 	bls.w	8005456 <PCD_EP_ISR_Handler+0x404>
            ep->xfer_len -= TxByteNbre;
 8005294:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8005298:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	6432      	str	r2, [r6, #64]	; 0x40
          if (ep->xfer_len == 0U)
 80052a0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80052a4:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80052a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	f040 80da 	bne.w	8005464 <PCD_EP_ISR_Handler+0x412>
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052b0:	3401      	adds	r4, #1
 80052b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80052b6:	f815 1034 	ldrb.w	r1, [r5, r4, lsl #3]
 80052ba:	4628      	mov	r0, r5
 80052bc:	f005 fcae 	bl	800ac1c <HAL_PCD_DataInStageCallback>
 80052c0:	e6ca      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80052c2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	051b      	lsls	r3, r3, #20
 80052cc:	0d1b      	lsrs	r3, r3, #20
 80052ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052d2:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        ep = &hpcd->OUT_ep[epindex];
 80052d6:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80052da:	00c9      	lsls	r1, r1, #3
 80052dc:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 80052e0:	eb05 0801 	add.w	r8, r5, r1
        if (ep->doublebuffer == 0U)
 80052e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80052e8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80052ec:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d142      	bne.n	800537a <PCD_EP_ISR_Handler+0x328>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052f4:	6828      	ldr	r0, [r5, #0]
 80052f6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005300:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005304:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8005308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800530c:	3306      	adds	r3, #6
 800530e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005312:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8005316:	f3c7 0709 	ubfx	r7, r7, #0, #10
          if (count != 0U)
 800531a:	bb17      	cbnz	r7, 8005362 <PCD_EP_ISR_Handler+0x310>
        ep->xfer_count += count;
 800531c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005320:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005324:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8005328:	443a      	add	r2, r7
 800532a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 800532e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8005332:	443a      	add	r2, r7
 8005334:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005338:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800533c:	b13b      	cbz	r3, 800534e <PCD_EP_ISR_Handler+0x2fc>
 800533e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005342:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005346:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800534a:	429f      	cmp	r7, r3
 800534c:	d275      	bcs.n	800543a <PCD_EP_ISR_Handler+0x3e8>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800534e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005352:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005356:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 800535a:	4628      	mov	r0, r5
 800535c:	f005 fc52 	bl	800ac04 <HAL_PCD_DataOutStageCallback>
 8005360:	e762      	b.n	8005228 <PCD_EP_ISR_Handler+0x1d6>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005362:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005366:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800536a:	463b      	mov	r3, r7
 800536c:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8005370:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005374:	f002 fe9f 	bl	80080b6 <USB_ReadPMA>
 8005378:	e7d0      	b.n	800531c <PCD_EP_ISR_Handler+0x2ca>
          if (ep->type == EP_TYPE_BULK)
 800537a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800537e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8005382:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8005386:	2b02      	cmp	r3, #2
 8005388:	d035      	beq.n	80053f6 <PCD_EP_ISR_Handler+0x3a4>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800538a:	6829      	ldr	r1, [r5, #0]
 800538c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005390:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005394:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8005398:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ae:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80053b2:	6828      	ldr	r0, [r5, #0]
 80053b4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 80053b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80053bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80053c0:	d020      	beq.n	8005404 <PCD_EP_ISR_Handler+0x3b2>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053cc:	3302      	adds	r3, #2
 80053ce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80053d2:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 80053d6:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 80053da:	2f00      	cmp	r7, #0
 80053dc:	d09e      	beq.n	800531c <PCD_EP_ISR_Handler+0x2ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80053de:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80053e2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 80053e6:	463b      	mov	r3, r7
 80053e8:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 80053ec:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 80053f0:	f002 fe61 	bl	80080b6 <USB_ReadPMA>
 80053f4:	e792      	b.n	800531c <PCD_EP_ISR_Handler+0x2ca>
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80053f6:	4632      	mov	r2, r6
 80053f8:	4641      	mov	r1, r8
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7ff fb94 	bl	8004b28 <HAL_PCD_EP_DB_Receive>
 8005400:	4607      	mov	r7, r0
 8005402:	e78b      	b.n	800531c <PCD_EP_ISR_Handler+0x2ca>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005404:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8005408:	b29b      	uxth	r3, r3
 800540a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800540e:	3306      	adds	r3, #6
 8005410:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8005414:	f8b3 7400 	ldrh.w	r7, [r3, #1024]	; 0x400
 8005418:	f3c7 0709 	ubfx	r7, r7, #0, #10
              if (count != 0U)
 800541c:	2f00      	cmp	r7, #0
 800541e:	f43f af7d 	beq.w	800531c <PCD_EP_ISR_Handler+0x2ca>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005422:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005426:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800542a:	463b      	mov	r3, r7
 800542c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8005430:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8005434:	f002 fe3f 	bl	80080b6 <USB_ReadPMA>
 8005438:	e770      	b.n	800531c <PCD_EP_ISR_Handler+0x2ca>
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800543a:	4641      	mov	r1, r8
 800543c:	6828      	ldr	r0, [r5, #0]
 800543e:	f002 fa6b 	bl	8007918 <USB_EPStartXfer>
 8005442:	e6f1      	b.n	8005228 <PCD_EP_ISR_Handler+0x1d6>
        if ((ep->type != EP_TYPE_BULK) ||
 8005444:	f416 7f80 	tst.w	r6, #256	; 0x100
 8005448:	f43f af0a 	beq.w	8005260 <PCD_EP_ISR_Handler+0x20e>
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800544c:	4632      	mov	r2, r6
 800544e:	4628      	mov	r0, r5
 8005450:	f7ff fc94 	bl	8004d7c <HAL_PCD_EP_DB_Transmit>
 8005454:	e600      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
            ep->xfer_len = 0U;
 8005456:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800545a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800545e:	2600      	movs	r6, #0
 8005460:	6416      	str	r6, [r2, #64]	; 0x40
 8005462:	e71d      	b.n	80052a0 <PCD_EP_ISR_Handler+0x24e>
            ep->xfer_buff += TxByteNbre;
 8005464:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005468:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800546c:	6bd6      	ldr	r6, [r2, #60]	; 0x3c
 800546e:	441e      	add	r6, r3
 8005470:	63d6      	str	r6, [r2, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8005472:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8005474:	4423      	add	r3, r4
 8005476:	6453      	str	r3, [r2, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005478:	f002 fa4e 	bl	8007918 <USB_EPStartXfer>
 800547c:	e5ec      	b.n	8005058 <PCD_EP_ISR_Handler+0x6>
}
 800547e:	2000      	movs	r0, #0
 8005480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005484 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8005484:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8005488:	2b01      	cmp	r3, #1
 800548a:	d00d      	beq.n	80054a8 <HAL_PCD_SetAddress+0x24>
{
 800548c:	b510      	push	{r4, lr}
 800548e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8005490:	2301      	movs	r3, #1
 8005492:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005496:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	f002 fa19 	bl	80078d2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054a0:	2000      	movs	r0, #0
 80054a2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80054a6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80054a8:	2002      	movs	r0, #2
}
 80054aa:	4770      	bx	lr

080054ac <HAL_PCD_IRQHandler>:
{
 80054ac:	b510      	push	{r4, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80054b2:	6800      	ldr	r0, [r0, #0]
 80054b4:	f002 fa17 	bl	80078e6 <USB_ReadInterrupts>
 80054b8:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80054bc:	d132      	bne.n	8005524 <HAL_PCD_IRQHandler+0x78>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	f002 fa11 	bl	80078e6 <USB_ReadInterrupts>
 80054c4:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80054c8:	d130      	bne.n	800552c <HAL_PCD_IRQHandler+0x80>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	f002 fa0b 	bl	80078e6 <USB_ReadInterrupts>
 80054d0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80054d4:	d008      	beq.n	80054e8 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80054dc:	b29b      	uxth	r3, r3
 80054de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80054e8:	6820      	ldr	r0, [r4, #0]
 80054ea:	f002 f9fc 	bl	80078e6 <USB_ReadInterrupts>
 80054ee:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80054f2:	d008      	beq.n	8005506 <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005500:	b29b      	uxth	r3, r3
 8005502:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005506:	6820      	ldr	r0, [r4, #0]
 8005508:	f002 f9ed 	bl	80078e6 <USB_ReadInterrupts>
 800550c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8005510:	d11d      	bne.n	800554e <HAL_PCD_IRQHandler+0xa2>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005512:	6820      	ldr	r0, [r4, #0]
 8005514:	f002 f9e7 	bl	80078e6 <USB_ReadInterrupts>
 8005518:	f410 6f00 	tst.w	r0, #2048	; 0x800
 800551c:	f000 808b 	beq.w	8005636 <HAL_PCD_IRQHandler+0x18a>
    for (i = 0U; i < 8U; i++)
 8005520:	2300      	movs	r3, #0
 8005522:	e03d      	b.n	80055a0 <HAL_PCD_IRQHandler+0xf4>
    (void)PCD_EP_ISR_Handler(hpcd);
 8005524:	4620      	mov	r0, r4
 8005526:	f7ff fd94 	bl	8005052 <PCD_EP_ISR_Handler>
 800552a:	e7c8      	b.n	80054be <HAL_PCD_IRQHandler+0x12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800552c:	6822      	ldr	r2, [r4, #0]
 800552e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005532:	b29b      	uxth	r3, r3
 8005534:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005538:	b29b      	uxth	r3, r3
 800553a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800553e:	4620      	mov	r0, r4
 8005540:	f005 fb7d 	bl	800ac3e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005544:	2100      	movs	r1, #0
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff ff9c 	bl	8005484 <HAL_PCD_SetAddress>
 800554c:	e7bd      	b.n	80054ca <HAL_PCD_IRQHandler+0x1e>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800554e:	6822      	ldr	r2, [r4, #0]
 8005550:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005554:	b29b      	uxth	r3, r3
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	b29b      	uxth	r3, r3
 800555c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005560:	6822      	ldr	r2, [r4, #0]
 8005562:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005566:	b29b      	uxth	r3, r3
 8005568:	f023 0308 	bic.w	r3, r3, #8
 800556c:	b29b      	uxth	r3, r3
 800556e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8005572:	4620      	mov	r0, r4
 8005574:	f005 fb86 	bl	800ac84 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005578:	6822      	ldr	r2, [r4, #0]
 800557a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800557e:	b29b      	uxth	r3, r3
 8005580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005584:	b29b      	uxth	r3, r3
 8005586:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800558a:	e7c2      	b.n	8005512 <HAL_PCD_IRQHandler+0x66>
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8005592:	aa04      	add	r2, sp, #16
 8005594:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005598:	f822 1c10 	strh.w	r1, [r2, #-16]
    for (i = 0U; i < 8U; i++)
 800559c:	3301      	adds	r3, #1
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	d9f3      	bls.n	800558c <HAL_PCD_IRQHandler+0xe0>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80055b4:	6822      	ldr	r2, [r4, #0]
 80055b6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f023 0301 	bic.w	r3, r3, #1
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80055cc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80055d0:	d0f9      	beq.n	80055c6 <HAL_PCD_IRQHandler+0x11a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80055d2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80055d6:	b292      	uxth	r2, r2
 80055d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055dc:	b292      	uxth	r2, r2
 80055de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    for (i = 0U; i < 8U; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	e009      	b.n	80055fa <HAL_PCD_IRQHandler+0x14e>
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80055e6:	6822      	ldr	r2, [r4, #0]
 80055e8:	a904      	add	r1, sp, #16
 80055ea:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80055ee:	f831 1c10 	ldrh.w	r1, [r1, #-16]
 80055f2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
    for (i = 0U; i < 8U; i++)
 80055f6:	3301      	adds	r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b07      	cmp	r3, #7
 80055fc:	d9f3      	bls.n	80055e6 <HAL_PCD_IRQHandler+0x13a>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80055fe:	6822      	ldr	r2, [r4, #0]
 8005600:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005604:	b29b      	uxth	r3, r3
 8005606:	f043 0308 	orr.w	r3, r3, #8
 800560a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800560e:	6822      	ldr	r2, [r4, #0]
 8005610:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800561a:	b29b      	uxth	r3, r3
 800561c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005620:	6822      	ldr	r2, [r4, #0]
 8005622:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8005626:	b29b      	uxth	r3, r3
 8005628:	f043 0304 	orr.w	r3, r3, #4
 800562c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005630:	4620      	mov	r0, r4
 8005632:	f005 fb17 	bl	800ac64 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005636:	6820      	ldr	r0, [r4, #0]
 8005638:	f002 f955 	bl	80078e6 <USB_ReadInterrupts>
 800563c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8005640:	d110      	bne.n	8005664 <HAL_PCD_IRQHandler+0x1b8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	f002 f94f 	bl	80078e6 <USB_ReadInterrupts>
 8005648:	f410 7f80 	tst.w	r0, #256	; 0x100
 800564c:	d008      	beq.n	8005660 <HAL_PCD_IRQHandler+0x1b4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565a:	b29b      	uxth	r3, r3
 800565c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8005660:	b004      	add	sp, #16
 8005662:	bd10      	pop	{r4, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800566a:	b29b      	uxth	r3, r3
 800566c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005670:	b29b      	uxth	r3, r3
 8005672:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005676:	4620      	mov	r0, r4
 8005678:	f005 fadb 	bl	800ac32 <HAL_PCD_SOFCallback>
 800567c:	e7e1      	b.n	8005642 <HAL_PCD_IRQHandler+0x196>

0800567e <HAL_PCD_EP_Open>:
{
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	4605      	mov	r5, r0
 8005682:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8005684:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005688:	d126      	bne.n	80056d8 <HAL_PCD_EP_Open+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568a:	f001 0007 	and.w	r0, r1, #7
 800568e:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005692:	00c9      	lsls	r1, r1, #3
 8005694:	f501 76b4 	add.w	r6, r1, #360	; 0x168
 8005698:	19a9      	adds	r1, r5, r6
    ep->is_in = 0U;
 800569a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800569e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80056a2:	2600      	movs	r6, #0
 80056a4:	f880 6169 	strb.w	r6, [r0, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80056a8:	f004 0407 	and.w	r4, r4, #7
 80056ac:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80056ae:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 80056b0:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80056b2:	784a      	ldrb	r2, [r1, #1]
 80056b4:	b102      	cbz	r2, 80056b8 <HAL_PCD_EP_Open+0x3a>
    ep->tx_fifo_num = ep->num;
 80056b6:	81cc      	strh	r4, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d017      	beq.n	80056ec <HAL_PCD_EP_Open+0x6e>
  __HAL_LOCK(hpcd);
 80056bc:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d016      	beq.n	80056f2 <HAL_PCD_EP_Open+0x74>
 80056c4:	2301      	movs	r3, #1
 80056c6:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056ca:	6828      	ldr	r0, [r5, #0]
 80056cc:	f001 fe02 	bl	80072d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056d0:	2000      	movs	r0, #0
 80056d2:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 80056d6:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d8:	f001 0007 	and.w	r0, r1, #7
 80056dc:	3001      	adds	r0, #1
 80056de:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80056e2:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    ep->is_in = 1U;
 80056e6:	2601      	movs	r6, #1
 80056e8:	704e      	strb	r6, [r1, #1]
 80056ea:	e7dd      	b.n	80056a8 <HAL_PCD_EP_Open+0x2a>
    ep->data_pid_start = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	710b      	strb	r3, [r1, #4]
 80056f0:	e7e4      	b.n	80056bc <HAL_PCD_EP_Open+0x3e>
  __HAL_LOCK(hpcd);
 80056f2:	2002      	movs	r0, #2
 80056f4:	e7ef      	b.n	80056d6 <HAL_PCD_EP_Open+0x58>

080056f6 <HAL_PCD_EP_Close>:
{
 80056f6:	b510      	push	{r4, lr}
 80056f8:	4604      	mov	r4, r0
 80056fa:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80056fc:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005700:	d11f      	bne.n	8005742 <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005702:	f001 0207 	and.w	r2, r1, #7
 8005706:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800570a:	00c9      	lsls	r1, r1, #3
 800570c:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005710:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005712:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005716:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800571a:	2000      	movs	r0, #0
 800571c:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8005726:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 800572a:	2b01      	cmp	r3, #1
 800572c:	d013      	beq.n	8005756 <HAL_PCD_EP_Close+0x60>
 800572e:	2301      	movs	r3, #1
 8005730:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005734:	6820      	ldr	r0, [r4, #0]
 8005736:	f001 ff6c 	bl	8007612 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800573a:	2000      	movs	r0, #0
 800573c:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005740:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005742:	f001 0207 	and.w	r2, r1, #7
 8005746:	3201      	adds	r2, #1
 8005748:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800574c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005750:	2001      	movs	r0, #1
 8005752:	7048      	strb	r0, [r1, #1]
 8005754:	e7e4      	b.n	8005720 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 8005756:	2002      	movs	r0, #2
 8005758:	e7f2      	b.n	8005740 <HAL_PCD_EP_Close+0x4a>

0800575a <HAL_PCD_EP_Receive>:
{
 800575a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800575c:	f001 0407 	and.w	r4, r1, #7
 8005760:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8005764:	00c9      	lsls	r1, r1, #3
 8005766:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800576a:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 800576c:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8005770:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8005774:	f8c5 217c 	str.w	r2, [r5, #380]	; 0x17c
  ep->xfer_len = len;
 8005778:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  ep->xfer_count = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8005782:	f885 3169 	strb.w	r3, [r5, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8005786:	f885 4168 	strb.w	r4, [r5, #360]	; 0x168
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800578a:	b924      	cbnz	r4, 8005796 <HAL_PCD_EP_Receive+0x3c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800578c:	6800      	ldr	r0, [r0, #0]
 800578e:	f002 f8c3 	bl	8007918 <USB_EPStartXfer>
}
 8005792:	2000      	movs	r0, #0
 8005794:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005796:	6800      	ldr	r0, [r0, #0]
 8005798:	f002 f8be 	bl	8007918 <USB_EPStartXfer>
 800579c:	e7f9      	b.n	8005792 <HAL_PCD_EP_Receive+0x38>

0800579e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800579e:	f001 0107 	and.w	r1, r1, #7
 80057a2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80057a6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80057aa:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80057ae:	4770      	bx	lr

080057b0 <HAL_PCD_EP_Transmit>:
{
 80057b0:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057b2:	f001 0507 	and.w	r5, r1, #7
 80057b6:	1c6c      	adds	r4, r5, #1
 80057b8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 80057bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  ep->xfer_buff = pBuf;
 80057c0:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 80057c4:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80057c8:	63f2      	str	r2, [r6, #60]	; 0x3c
  ep->xfer_len = len;
 80057ca:	6433      	str	r3, [r6, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80057cc:	2201      	movs	r2, #1
 80057ce:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
  ep->xfer_len_db = len;
 80057d2:	64b3      	str	r3, [r6, #72]	; 0x48
  ep->xfer_count = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	6473      	str	r3, [r6, #68]	; 0x44
  ep->is_in = 1U;
 80057d8:	704a      	strb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057da:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80057de:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057e2:	b925      	cbnz	r5, 80057ee <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80057e4:	6800      	ldr	r0, [r0, #0]
 80057e6:	f002 f897 	bl	8007918 <USB_EPStartXfer>
}
 80057ea:	2000      	movs	r0, #0
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057ee:	6800      	ldr	r0, [r0, #0]
 80057f0:	f002 f892 	bl	8007918 <USB_EPStartXfer>
 80057f4:	e7f9      	b.n	80057ea <HAL_PCD_EP_Transmit+0x3a>

080057f6 <HAL_PCD_EP_SetStall>:
{
 80057f6:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057f8:	f001 0507 	and.w	r5, r1, #7
 80057fc:	6842      	ldr	r2, [r0, #4]
 80057fe:	4295      	cmp	r5, r2
 8005800:	d831      	bhi.n	8005866 <HAL_PCD_EP_SetStall+0x70>
 8005802:	4604      	mov	r4, r0
 8005804:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8005806:	f011 0f80 	tst.w	r1, #128	; 0x80
 800580a:	d11e      	bne.n	800584a <HAL_PCD_EP_SetStall+0x54>
    ep = &hpcd->OUT_ep[ep_addr];
 800580c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005810:	00c9      	lsls	r1, r1, #3
 8005812:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005816:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005818:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800581c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8005826:	2301      	movs	r3, #1
 8005828:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800582a:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 800582c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005830:	2b01      	cmp	r3, #1
 8005832:	d01a      	beq.n	800586a <HAL_PCD_EP_SetStall+0x74>
 8005834:	2301      	movs	r3, #1
 8005836:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	f001 ffd3 	bl	80077e6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005840:	b15d      	cbz	r5, 800585a <HAL_PCD_EP_SetStall+0x64>
  __HAL_UNLOCK(hpcd);
 8005842:	2000      	movs	r0, #0
 8005844:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005848:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800584a:	1c6b      	adds	r3, r5, #1
 800584c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005850:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 8005854:	2201      	movs	r2, #1
 8005856:	704a      	strb	r2, [r1, #1]
 8005858:	e7e5      	b.n	8005826 <HAL_PCD_EP_SetStall+0x30>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800585a:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	f002 f845 	bl	80078ee <USB_EP0_OutStart>
 8005864:	e7ed      	b.n	8005842 <HAL_PCD_EP_SetStall+0x4c>
    return HAL_ERROR;
 8005866:	2001      	movs	r0, #1
 8005868:	e7ee      	b.n	8005848 <HAL_PCD_EP_SetStall+0x52>
  __HAL_LOCK(hpcd);
 800586a:	2002      	movs	r0, #2
 800586c:	e7ec      	b.n	8005848 <HAL_PCD_EP_SetStall+0x52>

0800586e <HAL_PCD_EP_ClrStall>:
{
 800586e:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005870:	f001 010f 	and.w	r1, r1, #15
 8005874:	6842      	ldr	r2, [r0, #4]
 8005876:	4291      	cmp	r1, r2
 8005878:	d830      	bhi.n	80058dc <HAL_PCD_EP_ClrStall+0x6e>
{
 800587a:	b510      	push	{r4, lr}
 800587c:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 800587e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005882:	d121      	bne.n	80058c8 <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005884:	f003 0207 	and.w	r2, r3, #7
 8005888:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800588c:	00c9      	lsls	r1, r1, #3
 800588e:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8005892:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005898:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800589c:	2000      	movs	r0, #0
 800589e:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80058a2:	2200      	movs	r2, #0
 80058a4:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80058ac:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d015      	beq.n	80058e0 <HAL_PCD_EP_ClrStall+0x72>
 80058b4:	2301      	movs	r3, #1
 80058b6:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058ba:	6820      	ldr	r0, [r4, #0]
 80058bc:	f001 ffb8 	bl	8007830 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058c0:	2000      	movs	r0, #0
 80058c2:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80058c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c8:	f003 0207 	and.w	r2, r3, #7
 80058cc:	3201      	adds	r2, #1
 80058ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80058d2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80058d6:	2001      	movs	r0, #1
 80058d8:	7048      	strb	r0, [r1, #1]
 80058da:	e7e2      	b.n	80058a2 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 80058dc:	2001      	movs	r0, #1
}
 80058de:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80058e0:	2002      	movs	r0, #2
 80058e2:	e7f0      	b.n	80058c6 <HAL_PCD_EP_ClrStall+0x58>

080058e4 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058e4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80058e8:	d00b      	beq.n	8005902 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ea:	f001 0107 	and.w	r1, r1, #7
 80058ee:	3101      	adds	r1, #1
 80058f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80058f4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80058f8:	b952      	cbnz	r2, 8005910 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80058fa:	730a      	strb	r2, [r1, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058fc:	80cb      	strh	r3, [r1, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80058fe:	2000      	movs	r0, #0
 8005900:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8005902:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005906:	00c9      	lsls	r1, r1, #3
 8005908:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 800590c:	4401      	add	r1, r0
 800590e:	e7f3      	b.n	80058f8 <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8005910:	2201      	movs	r2, #1
 8005912:	730a      	strb	r2, [r1, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005914:	810b      	strh	r3, [r1, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	814b      	strh	r3, [r1, #10]
 800591a:	e7f0      	b.n	80058fe <HAL_PCDEx_PMAConfig+0x1a>

0800591c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800591c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <RCC_Delay+0x24>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a08      	ldr	r2, [pc, #32]	; (8005944 <RCC_Delay+0x28>)
 8005924:	fba2 2303 	umull	r2, r3, r2, r3
 8005928:	0a5b      	lsrs	r3, r3, #9
 800592a:	fb00 f303 	mul.w	r3, r0, r3
 800592e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005930:	bf00      	nop
  }
  while (Delay --);
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	1e5a      	subs	r2, r3, #1
 8005936:	9201      	str	r2, [sp, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1f9      	bne.n	8005930 <RCC_Delay+0x14>
}
 800593c:	b002      	add	sp, #8
 800593e:	4770      	bx	lr
 8005940:	20000008 	.word	0x20000008
 8005944:	10624dd3 	.word	0x10624dd3

08005948 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8005948:	2800      	cmp	r0, #0
 800594a:	f000 81f1 	beq.w	8005d30 <HAL_RCC_OscConfig+0x3e8>
{
 800594e:	b570      	push	{r4, r5, r6, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005954:	6803      	ldr	r3, [r0, #0]
 8005956:	f013 0f01 	tst.w	r3, #1
 800595a:	d02c      	beq.n	80059b6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800595c:	4baa      	ldr	r3, [pc, #680]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b04      	cmp	r3, #4
 8005966:	d01d      	beq.n	80059a4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005968:	4ba7      	ldr	r3, [pc, #668]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 030c 	and.w	r3, r3, #12
 8005970:	2b08      	cmp	r3, #8
 8005972:	d012      	beq.n	800599a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d041      	beq.n	8005a00 <HAL_RCC_OscConfig+0xb8>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d155      	bne.n	8005a2c <HAL_RCC_OscConfig+0xe4>
 8005980:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005984:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005996:	601a      	str	r2, [r3, #0]
 8005998:	e037      	b.n	8005a0a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800599a:	4b9b      	ldr	r3, [pc, #620]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80059a2:	d0e7      	beq.n	8005974 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a4:	4b98      	ldr	r3, [pc, #608]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_OscConfig+0x6e>
 80059ae:	6863      	ldr	r3, [r4, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 81bf 	beq.w	8005d34 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f013 0f02 	tst.w	r3, #2
 80059bc:	d075      	beq.n	8005aaa <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059be:	4b92      	ldr	r3, [pc, #584]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f013 0f0c 	tst.w	r3, #12
 80059c6:	d05f      	beq.n	8005a88 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059c8:	4b8f      	ldr	r3, [pc, #572]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d054      	beq.n	8005a7e <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8089 	beq.w	8005aee <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_ENABLE();
 80059dc:	4b8b      	ldr	r3, [pc, #556]	; (8005c0c <HAL_RCC_OscConfig+0x2c4>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80059e2:	f7fd fb35 	bl	8003050 <HAL_GetTick>
 80059e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	4b87      	ldr	r3, [pc, #540]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f013 0f02 	tst.w	r3, #2
 80059f0:	d174      	bne.n	8005adc <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059f2:	f7fd fb2d 	bl	8003050 <HAL_GetTick>
 80059f6:	1b40      	subs	r0, r0, r5
 80059f8:	2802      	cmp	r0, #2
 80059fa:	d9f5      	bls.n	80059e8 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 80059fc:	2003      	movs	r0, #3
 80059fe:	e19e      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a00:	4a81      	ldr	r2, [pc, #516]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a02:	6813      	ldr	r3, [r2, #0]
 8005a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a08:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	b343      	cbz	r3, 8005a60 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8005a0e:	f7fd fb1f 	bl	8003050 <HAL_GetTick>
 8005a12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a14:	4b7c      	ldr	r3, [pc, #496]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a1c:	d1cb      	bne.n	80059b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a1e:	f7fd fb17 	bl	8003050 <HAL_GetTick>
 8005a22:	1b40      	subs	r0, r0, r5
 8005a24:	2864      	cmp	r0, #100	; 0x64
 8005a26:	d9f5      	bls.n	8005a14 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8005a28:	2003      	movs	r0, #3
 8005a2a:	e188      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a30:	d009      	beq.n	8005a46 <HAL_RCC_OscConfig+0xfe>
 8005a32:	4b75      	ldr	r3, [pc, #468]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e7e1      	b.n	8005a0a <HAL_RCC_OscConfig+0xc2>
 8005a46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a4a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005a54:	601a      	str	r2, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	e7d4      	b.n	8005a0a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8005a60:	f7fd faf6 	bl	8003050 <HAL_GetTick>
 8005a64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a66:	4b68      	ldr	r3, [pc, #416]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005a6e:	d0a2      	beq.n	80059b6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a70:	f7fd faee 	bl	8003050 <HAL_GetTick>
 8005a74:	1b40      	subs	r0, r0, r5
 8005a76:	2864      	cmp	r0, #100	; 0x64
 8005a78:	d9f5      	bls.n	8005a66 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8005a7a:	2003      	movs	r0, #3
 8005a7c:	e15f      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005a7e:	4b62      	ldr	r3, [pc, #392]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005a86:	d1a5      	bne.n	80059d4 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a88:	4b5f      	ldr	r3, [pc, #380]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f013 0f02 	tst.w	r3, #2
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_OscConfig+0x152>
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	f040 814f 	bne.w	8005d38 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9a:	4a5b      	ldr	r2, [pc, #364]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005a9c:	6813      	ldr	r3, [r2, #0]
 8005a9e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005aa2:	6961      	ldr	r1, [r4, #20]
 8005aa4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005aa8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	f013 0f08 	tst.w	r3, #8
 8005ab0:	d032      	beq.n	8005b18 <HAL_RCC_OscConfig+0x1d0>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ab2:	69a3      	ldr	r3, [r4, #24]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d045      	beq.n	8005b44 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8005ab8:	4b55      	ldr	r3, [pc, #340]	; (8005c10 <HAL_RCC_OscConfig+0x2c8>)
 8005aba:	2201      	movs	r2, #1
 8005abc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005abe:	f7fd fac7 	bl	8003050 <HAL_GetTick>
 8005ac2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ac4:	4b50      	ldr	r3, [pc, #320]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac8:	f013 0f02 	tst.w	r3, #2
 8005acc:	d121      	bne.n	8005b12 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ace:	f7fd fabf 	bl	8003050 <HAL_GetTick>
 8005ad2:	1b40      	subs	r0, r0, r5
 8005ad4:	2802      	cmp	r0, #2
 8005ad6:	d9f5      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x17c>
          return HAL_TIMEOUT;
 8005ad8:	2003      	movs	r0, #3
 8005ada:	e130      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005adc:	4a4a      	ldr	r2, [pc, #296]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005ae4:	6961      	ldr	r1, [r4, #20]
 8005ae6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e7dd      	b.n	8005aaa <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8005aee:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <HAL_RCC_OscConfig+0x2c4>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005af4:	f7fd faac 	bl	8003050 <HAL_GetTick>
 8005af8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005afa:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f013 0f02 	tst.w	r3, #2
 8005b02:	d0d2      	beq.n	8005aaa <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b04:	f7fd faa4 	bl	8003050 <HAL_GetTick>
 8005b08:	1b40      	subs	r0, r0, r5
 8005b0a:	2802      	cmp	r0, #2
 8005b0c:	d9f5      	bls.n	8005afa <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8005b0e:	2003      	movs	r0, #3
 8005b10:	e115      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7ff ff02 	bl	800591c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b18:	6823      	ldr	r3, [r4, #0]
 8005b1a:	f013 0f04 	tst.w	r3, #4
 8005b1e:	f000 8097 	beq.w	8005c50 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b22:	4b39      	ldr	r3, [pc, #228]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005b2a:	d11d      	bne.n	8005b68 <HAL_RCC_OscConfig+0x220>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005b2e:	69da      	ldr	r2, [r3, #28]
 8005b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b34:	61da      	str	r2, [r3, #28]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	9301      	str	r3, [sp, #4]
 8005b3e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005b40:	2501      	movs	r5, #1
 8005b42:	e012      	b.n	8005b6a <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_LSI_DISABLE();
 8005b44:	4b32      	ldr	r3, [pc, #200]	; (8005c10 <HAL_RCC_OscConfig+0x2c8>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005b4a:	f7fd fa81 	bl	8003050 <HAL_GetTick>
 8005b4e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b50:	4b2d      	ldr	r3, [pc, #180]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	f013 0f02 	tst.w	r3, #2
 8005b58:	d0de      	beq.n	8005b18 <HAL_RCC_OscConfig+0x1d0>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7fd fa79 	bl	8003050 <HAL_GetTick>
 8005b5e:	1b40      	subs	r0, r0, r5
 8005b60:	2802      	cmp	r0, #2
 8005b62:	d9f5      	bls.n	8005b50 <HAL_RCC_OscConfig+0x208>
          return HAL_TIMEOUT;
 8005b64:	2003      	movs	r0, #3
 8005b66:	e0ea      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8005b68:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6a:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <HAL_RCC_OscConfig+0x2cc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b72:	d011      	beq.n	8005b98 <HAL_RCC_OscConfig+0x250>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b74:	68e3      	ldr	r3, [r4, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d022      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x278>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d138      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x2a8>
 8005b7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b82:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005b86:	6a1a      	ldr	r2, [r3, #32]
 8005b88:	f022 0201 	bic.w	r2, r2, #1
 8005b8c:	621a      	str	r2, [r3, #32]
 8005b8e:	6a1a      	ldr	r2, [r3, #32]
 8005b90:	f022 0204 	bic.w	r2, r2, #4
 8005b94:	621a      	str	r2, [r3, #32]
 8005b96:	e018      	b.n	8005bca <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b98:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_RCC_OscConfig+0x2cc>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005ba2:	f7fd fa55 	bl	8003050 <HAL_GetTick>
 8005ba6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCC_OscConfig+0x2cc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005bb0:	d1e0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x22c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb2:	f7fd fa4d 	bl	8003050 <HAL_GetTick>
 8005bb6:	1b80      	subs	r0, r0, r6
 8005bb8:	2864      	cmp	r0, #100	; 0x64
 8005bba:	d9f5      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x260>
          return HAL_TIMEOUT;
 8005bbc:	2003      	movs	r0, #3
 8005bbe:	e0be      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc0:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005bc2:	6a13      	ldr	r3, [r2, #32]
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bca:	68e3      	ldr	r3, [r4, #12]
 8005bcc:	b373      	cbz	r3, 8005c2c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 8005bce:	f7fd fa3f 	bl	8003050 <HAL_GetTick>
 8005bd2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd4:	4b0c      	ldr	r3, [pc, #48]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f013 0f02 	tst.w	r3, #2
 8005bdc:	d137      	bne.n	8005c4e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fd fa37 	bl	8003050 <HAL_GetTick>
 8005be2:	1b80      	subs	r0, r0, r6
 8005be4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005be8:	4298      	cmp	r0, r3
 8005bea:	d9f3      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x28c>
          return HAL_TIMEOUT;
 8005bec:	2003      	movs	r0, #3
 8005bee:	e0a6      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf0:	2b05      	cmp	r3, #5
 8005bf2:	d011      	beq.n	8005c18 <HAL_RCC_OscConfig+0x2d0>
 8005bf4:	4b04      	ldr	r3, [pc, #16]	; (8005c08 <HAL_RCC_OscConfig+0x2c0>)
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	621a      	str	r2, [r3, #32]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	f022 0204 	bic.w	r2, r2, #4
 8005c04:	621a      	str	r2, [r3, #32]
 8005c06:	e7e0      	b.n	8005bca <HAL_RCC_OscConfig+0x282>
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	42420000 	.word	0x42420000
 8005c10:	42420480 	.word	0x42420480
 8005c14:	40007000 	.word	0x40007000
 8005c18:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005c1a:	6a1a      	ldr	r2, [r3, #32]
 8005c1c:	f042 0204 	orr.w	r2, r2, #4
 8005c20:	621a      	str	r2, [r3, #32]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	f042 0201 	orr.w	r2, r2, #1
 8005c28:	621a      	str	r2, [r3, #32]
 8005c2a:	e7ce      	b.n	8005bca <HAL_RCC_OscConfig+0x282>
      tickstart = HAL_GetTick();
 8005c2c:	f7fd fa10 	bl	8003050 <HAL_GetTick>
 8005c30:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c32:	4b47      	ldr	r3, [pc, #284]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f013 0f02 	tst.w	r3, #2
 8005c3a:	d008      	beq.n	8005c4e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fd fa08 	bl	8003050 <HAL_GetTick>
 8005c40:	1b80      	subs	r0, r0, r6
 8005c42:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c46:	4298      	cmp	r0, r3
 8005c48:	d9f3      	bls.n	8005c32 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 8005c4a:	2003      	movs	r0, #3
 8005c4c:	e077      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 8005c4e:	b9e5      	cbnz	r5, 8005c8a <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c50:	69e3      	ldr	r3, [r4, #28]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d072      	beq.n	8005d3c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c56:	4a3e      	ldr	r2, [pc, #248]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005c58:	6852      	ldr	r2, [r2, #4]
 8005c5a:	f002 020c 	and.w	r2, r2, #12
 8005c5e:	2a08      	cmp	r2, #8
 8005c60:	d056      	beq.n	8005d10 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d017      	beq.n	8005c96 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_OscConfig+0x40c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c6c:	f7fd f9f0 	bl	8003050 <HAL_GetTick>
 8005c70:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c72:	4b37      	ldr	r3, [pc, #220]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005c7a:	d047      	beq.n	8005d0c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7c:	f7fd f9e8 	bl	8003050 <HAL_GetTick>
 8005c80:	1b00      	subs	r0, r0, r4
 8005c82:	2802      	cmp	r0, #2
 8005c84:	d9f5      	bls.n	8005c72 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005c86:	2003      	movs	r0, #3
 8005c88:	e059      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c8a:	4a31      	ldr	r2, [pc, #196]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005c8c:	69d3      	ldr	r3, [r2, #28]
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c92:	61d3      	str	r3, [r2, #28]
 8005c94:	e7dc      	b.n	8005c50 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 8005c96:	4b2f      	ldr	r3, [pc, #188]	; (8005d54 <HAL_RCC_OscConfig+0x40c>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f9d8 	bl	8003050 <HAL_GetTick>
 8005ca0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005caa:	d006      	beq.n	8005cba <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cac:	f7fd f9d0 	bl	8003050 <HAL_GetTick>
 8005cb0:	1b40      	subs	r0, r0, r5
 8005cb2:	2802      	cmp	r0, #2
 8005cb4:	d9f5      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8005cb6:	2003      	movs	r0, #3
 8005cb8:	e041      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005cba:	6a23      	ldr	r3, [r4, #32]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc0:	d01a      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc2:	4923      	ldr	r1, [pc, #140]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005cc4:	684b      	ldr	r3, [r1, #4]
 8005cc6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8005cca:	6a22      	ldr	r2, [r4, #32]
 8005ccc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cce:	4302      	orrs	r2, r0
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8005cd4:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <HAL_RCC_OscConfig+0x40c>)
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005cda:	f7fd f9b9 	bl	8003050 <HAL_GetTick>
 8005cde:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ce8:	d10e      	bne.n	8005d08 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cea:	f7fd f9b1 	bl	8003050 <HAL_GetTick>
 8005cee:	1b00      	subs	r0, r0, r4
 8005cf0:	2802      	cmp	r0, #2
 8005cf2:	d9f5      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8005cf4:	2003      	movs	r0, #3
 8005cf6:	e022      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cf8:	4a15      	ldr	r2, [pc, #84]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005cfa:	6853      	ldr	r3, [r2, #4]
 8005cfc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d00:	68a1      	ldr	r1, [r4, #8]
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6053      	str	r3, [r2, #4]
 8005d06:	e7dc      	b.n	8005cc2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8005d08:	2000      	movs	r0, #0
 8005d0a:	e018      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e016      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d016      	beq.n	8005d42 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8005d14:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_RCC_OscConfig+0x408>)
 8005d16:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d18:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005d1c:	6a22      	ldr	r2, [r4, #32]
 8005d1e:	4291      	cmp	r1, r2
 8005d20:	d111      	bne.n	8005d46 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d22:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005d26:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10e      	bne.n	8005d4a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	e006      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8005d30:	2001      	movs	r0, #1
}
 8005d32:	4770      	bx	lr
        return HAL_ERROR;
 8005d34:	2001      	movs	r0, #1
 8005d36:	e002      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8005d38:	2001      	movs	r0, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 8005d3c:	2000      	movs	r0, #0
}
 8005d3e:	b002      	add	sp, #8
 8005d40:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8005d42:	2001      	movs	r0, #1
 8005d44:	e7fb      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8005d46:	2001      	movs	r0, #1
 8005d48:	e7f9      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e7f7      	b.n	8005d3e <HAL_RCC_OscConfig+0x3f6>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
 8005d54:	42420060 	.word	0x42420060

08005d58 <HAL_RCC_GetSysClockFreq>:
{
 8005d58:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005d5a:	4b16      	ldr	r3, [pc, #88]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x5c>)
 8005d5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d5e:	f10d 0c18 	add.w	ip, sp, #24
 8005d62:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005d66:	f240 2301 	movw	r3, #513	; 0x201
 8005d6a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8005d6e:	4b12      	ldr	r3, [pc, #72]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8005d70:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005d72:	f003 020c 	and.w	r2, r3, #12
 8005d76:	2a08      	cmp	r2, #8
 8005d78:	d002      	beq.n	8005d80 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8005d7a:	4810      	ldr	r0, [pc, #64]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005d7c:	b006      	add	sp, #24
 8005d7e:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005d80:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005d84:	4462      	add	r2, ip
 8005d86:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005d8a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005d8e:	d00c      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x52>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x60>)
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8005d98:	4463      	add	r3, ip
 8005d9a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005d9e:	4807      	ldr	r0, [pc, #28]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x64>)
 8005da0:	fb00 f002 	mul.w	r0, r0, r2
 8005da4:	fbb0 f0f3 	udiv	r0, r0, r3
 8005da8:	e7e8      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x24>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005daa:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x68>)
 8005dac:	fb00 f002 	mul.w	r0, r0, r2
 8005db0:	e7e4      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x24>
 8005db2:	bf00      	nop
 8005db4:	0800e350 	.word	0x0800e350
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	007a1200 	.word	0x007a1200
 8005dc0:	003d0900 	.word	0x003d0900

08005dc4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	f000 80a0 	beq.w	8005f0a <HAL_RCC_ClockConfig+0x146>
{
 8005dca:	b570      	push	{r4, r5, r6, lr}
 8005dcc:	460d      	mov	r5, r1
 8005dce:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005dd0:	4b52      	ldr	r3, [pc, #328]	; (8005f1c <HAL_RCC_ClockConfig+0x158>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	428b      	cmp	r3, r1
 8005dda:	d20b      	bcs.n	8005df4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ddc:	4a4f      	ldr	r2, [pc, #316]	; (8005f1c <HAL_RCC_ClockConfig+0x158>)
 8005dde:	6813      	ldr	r3, [r2, #0]
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	428b      	cmp	r3, r1
 8005df0:	f040 808d 	bne.w	8005f0e <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	f013 0f02 	tst.w	r3, #2
 8005dfa:	d017      	beq.n	8005e2c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfc:	f013 0f04 	tst.w	r3, #4
 8005e00:	d004      	beq.n	8005e0c <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e02:	4a47      	ldr	r2, [pc, #284]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e04:	6853      	ldr	r3, [r2, #4]
 8005e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005e0a:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f013 0f08 	tst.w	r3, #8
 8005e12:	d004      	beq.n	8005e1e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e14:	4a42      	ldr	r2, [pc, #264]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e16:	6853      	ldr	r3, [r2, #4]
 8005e18:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005e1c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e1e:	4a40      	ldr	r2, [pc, #256]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e20:	6853      	ldr	r3, [r2, #4]
 8005e22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e26:	68a1      	ldr	r1, [r4, #8]
 8005e28:	430b      	orrs	r3, r1
 8005e2a:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	f013 0f01 	tst.w	r3, #1
 8005e32:	d031      	beq.n	8005e98 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e34:	6863      	ldr	r3, [r4, #4]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d020      	beq.n	8005e7c <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d025      	beq.n	8005e8a <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3e:	4a38      	ldr	r2, [pc, #224]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e40:	6812      	ldr	r2, [r2, #0]
 8005e42:	f012 0f02 	tst.w	r2, #2
 8005e46:	d064      	beq.n	8005f12 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e48:	4935      	ldr	r1, [pc, #212]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e4a:	684a      	ldr	r2, [r1, #4]
 8005e4c:	f022 0203 	bic.w	r2, r2, #3
 8005e50:	4313      	orrs	r3, r2
 8005e52:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8005e54:	f7fd f8fc 	bl	8003050 <HAL_GetTick>
 8005e58:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	6862      	ldr	r2, [r4, #4]
 8005e64:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005e68:	d016      	beq.n	8005e98 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6a:	f7fd f8f1 	bl	8003050 <HAL_GetTick>
 8005e6e:	1b80      	subs	r0, r0, r6
 8005e70:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e74:	4298      	cmp	r0, r3
 8005e76:	d9f0      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8005e78:	2003      	movs	r0, #3
 8005e7a:	e045      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005e84:	d1e0      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8005e86:	2001      	movs	r0, #1
 8005e88:	e03e      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8a:	4a25      	ldr	r2, [pc, #148]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005e92:	d1d9      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8005e94:	2001      	movs	r0, #1
 8005e96:	e037      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e98:	4b20      	ldr	r3, [pc, #128]	; (8005f1c <HAL_RCC_ClockConfig+0x158>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0307 	and.w	r3, r3, #7
 8005ea0:	42ab      	cmp	r3, r5
 8005ea2:	d90a      	bls.n	8005eba <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ea4:	4a1d      	ldr	r2, [pc, #116]	; (8005f1c <HAL_RCC_ClockConfig+0x158>)
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	432b      	orrs	r3, r5
 8005eae:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb0:	6813      	ldr	r3, [r2, #0]
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	42ab      	cmp	r3, r5
 8005eb8:	d12d      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	f013 0f04 	tst.w	r3, #4
 8005ec0:	d006      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005ec4:	6853      	ldr	r3, [r2, #4]
 8005ec6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005eca:	68e1      	ldr	r1, [r4, #12]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed0:	6823      	ldr	r3, [r4, #0]
 8005ed2:	f013 0f08 	tst.w	r3, #8
 8005ed6:	d007      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ed8:	4a11      	ldr	r2, [pc, #68]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005eda:	6853      	ldr	r3, [r2, #4]
 8005edc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005ee0:	6921      	ldr	r1, [r4, #16]
 8005ee2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005ee6:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ee8:	f7ff ff36 	bl	8005d58 <HAL_RCC_GetSysClockFreq>
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <HAL_RCC_ClockConfig+0x15c>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ef4:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <HAL_RCC_ClockConfig+0x160>)
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	40d8      	lsrs	r0, r3
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCC_ClockConfig+0x164>)
 8005efc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <HAL_RCC_ClockConfig+0x168>)
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f7fb ff59 	bl	8001db8 <HAL_InitTick>
  return HAL_OK;
 8005f06:	2000      	movs	r0, #0
}
 8005f08:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f0a:	2001      	movs	r0, #1
}
 8005f0c:	4770      	bx	lr
    return HAL_ERROR;
 8005f0e:	2001      	movs	r0, #1
 8005f10:	e7fa      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8005f12:	2001      	movs	r0, #1
 8005f14:	e7f8      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8005f16:	2001      	movs	r0, #1
 8005f18:	e7f6      	b.n	8005f08 <HAL_RCC_ClockConfig+0x144>
 8005f1a:	bf00      	nop
 8005f1c:	40022000 	.word	0x40022000
 8005f20:	40021000 	.word	0x40021000
 8005f24:	0800dc68 	.word	0x0800dc68
 8005f28:	20000008 	.word	0x20000008
 8005f2c:	20000010 	.word	0x20000010

08005f30 <HAL_RCC_GetHCLKFreq>:
}
 8005f30:	4b01      	ldr	r3, [pc, #4]	; (8005f38 <HAL_RCC_GetHCLKFreq+0x8>)
 8005f32:	6818      	ldr	r0, [r3, #0]
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	20000008 	.word	0x20000008

08005f3c <HAL_RCC_GetPCLK1Freq>:
{
 8005f3c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f3e:	f7ff fff7 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f42:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005f4a:	4a03      	ldr	r2, [pc, #12]	; (8005f58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005f4c:	5cd3      	ldrb	r3, [r2, r3]
}
 8005f4e:	40d8      	lsrs	r0, r3
 8005f50:	bd08      	pop	{r3, pc}
 8005f52:	bf00      	nop
 8005f54:	40021000 	.word	0x40021000
 8005f58:	0800dc78 	.word	0x0800dc78

08005f5c <HAL_RCC_GetPCLK2Freq>:
{
 8005f5c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f5e:	f7ff ffe7 	bl	8005f30 <HAL_RCC_GetHCLKFreq>
 8005f62:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005f6a:	4a03      	ldr	r2, [pc, #12]	; (8005f78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005f6c:	5cd3      	ldrb	r3, [r2, r3]
}
 8005f6e:	40d8      	lsrs	r0, r3
 8005f70:	bd08      	pop	{r3, pc}
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	0800dc78 	.word	0x0800dc78

08005f7c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f7c:	230f      	movs	r3, #15
 8005f7e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCC_GetClockConfig+0x34>)
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	f002 0203 	and.w	r2, r2, #3
 8005f88:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005f90:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005f98:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	08db      	lsrs	r3, r3, #3
 8005f9e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fa2:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <HAL_RCC_GetClockConfig+0x38>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	600b      	str	r3, [r1, #0]
}
 8005fae:	4770      	bx	lr
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40022000 	.word	0x40022000

08005fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fbe:	6803      	ldr	r3, [r0, #0]
 8005fc0:	f013 0f01 	tst.w	r3, #1
 8005fc4:	d034      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc6:	4b3e      	ldr	r3, [pc, #248]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005fce:	d147      	bne.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd0:	4b3b      	ldr	r3, [pc, #236]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005fd2:	69da      	ldr	r2, [r3, #28]
 8005fd4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fd8:	61da      	str	r2, [r3, #28]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005fe4:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe6:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005fee:	d039      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xac>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ff0:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ff4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005ff8:	d011      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8005ffa:	6862      	ldr	r2, [r4, #4]
 8005ffc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006000:	429a      	cmp	r2, r3
 8006002:	d00c      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006004:	4a2e      	ldr	r2, [pc, #184]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006006:	6a13      	ldr	r3, [r2, #32]
 8006008:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800600c:	492e      	ldr	r1, [pc, #184]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800600e:	2601      	movs	r6, #1
 8006010:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006012:	2600      	movs	r6, #0
 8006014:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006016:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006018:	f013 0f01 	tst.w	r3, #1
 800601c:	d136      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800601e:	4a28      	ldr	r2, [pc, #160]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006020:	6a13      	ldr	r3, [r2, #32]
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	6861      	ldr	r1, [r4, #4]
 8006028:	430b      	orrs	r3, r1
 800602a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800602c:	2d00      	cmp	r5, #0
 800602e:	d13e      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	f013 0f02 	tst.w	r3, #2
 8006036:	d006      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006038:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800603a:	6853      	ldr	r3, [r2, #4]
 800603c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006040:	68a1      	ldr	r1, [r4, #8]
 8006042:	430b      	orrs	r3, r1
 8006044:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	f013 0f10 	tst.w	r3, #16
 800604c:	d034      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800604e:	4a1c      	ldr	r2, [pc, #112]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006050:	6853      	ldr	r3, [r2, #4]
 8006052:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006056:	68e1      	ldr	r1, [r4, #12]
 8006058:	430b      	orrs	r3, r1
 800605a:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800605c:	2000      	movs	r0, #0
 800605e:	e02c      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x102>
    FlagStatus       pwrclkchanged = RESET;
 8006060:	2500      	movs	r5, #0
 8006062:	e7c0      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006064:	4a17      	ldr	r2, [pc, #92]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006066:	6813      	ldr	r3, [r2, #0]
 8006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800606c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800606e:	f7fc ffef 	bl	8003050 <HAL_GetTick>
 8006072:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006074:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f413 7f80 	tst.w	r3, #256	; 0x100
 800607c:	d1b8      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800607e:	f7fc ffe7 	bl	8003050 <HAL_GetTick>
 8006082:	1b80      	subs	r0, r0, r6
 8006084:	2864      	cmp	r0, #100	; 0x64
 8006086:	d9f5      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8006088:	2003      	movs	r0, #3
 800608a:	e016      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x102>
        tickstart = HAL_GetTick();
 800608c:	f7fc ffe0 	bl	8003050 <HAL_GetTick>
 8006090:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006092:	4b0b      	ldr	r3, [pc, #44]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f013 0f02 	tst.w	r3, #2
 800609a:	d1c0      	bne.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x66>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609c:	f7fc ffd8 	bl	8003050 <HAL_GetTick>
 80060a0:	1b80      	subs	r0, r0, r6
 80060a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80060a6:	4298      	cmp	r0, r3
 80060a8:	d9f3      	bls.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
 80060aa:	2003      	movs	r0, #3
 80060ac:	e005      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x102>
      __HAL_RCC_PWR_CLK_DISABLE();
 80060ae:	69d3      	ldr	r3, [r2, #28]
 80060b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b4:	61d3      	str	r3, [r2, #28]
 80060b6:	e7bb      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80060b8:	2000      	movs	r0, #0
}
 80060ba:	b002      	add	sp, #8
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	bf00      	nop
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40007000 	.word	0x40007000
 80060c8:	42420440 	.word	0x42420440

080060cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	4605      	mov	r5, r0
 80060d4:	4688      	mov	r8, r1
 80060d6:	4617      	mov	r7, r2
 80060d8:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060da:	f7fc ffb9 	bl	8003050 <HAL_GetTick>
 80060de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e0:	1a1b      	subs	r3, r3, r0
 80060e2:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80060e6:	f7fc ffb3 	bl	8003050 <HAL_GetTick>
 80060ea:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ec:	4b2a      	ldr	r3, [pc, #168]	; (8006198 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80060f4:	fb09 f303 	mul.w	r3, r9, r3
 80060f8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060fa:	682b      	ldr	r3, [r5, #0]
 80060fc:	689c      	ldr	r4, [r3, #8]
 80060fe:	ea38 0304 	bics.w	r3, r8, r4
 8006102:	bf0c      	ite	eq
 8006104:	2401      	moveq	r4, #1
 8006106:	2400      	movne	r4, #0
 8006108:	42bc      	cmp	r4, r7
 800610a:	d040      	beq.n	800618e <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800610c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8006110:	d0f3      	beq.n	80060fa <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006112:	f7fc ff9d 	bl	8003050 <HAL_GetTick>
 8006116:	eba0 000a 	sub.w	r0, r0, sl
 800611a:	4548      	cmp	r0, r9
 800611c:	d20a      	bcs.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x68>
 800611e:	f1b9 0f00 	cmp.w	r9, #0
 8006122:	d007      	beq.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006124:	9a01      	ldr	r2, [sp, #4]
 8006126:	b102      	cbz	r2, 800612a <SPI_WaitFlagStateUntilTimeout+0x5e>
 8006128:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	3b01      	subs	r3, #1
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	4691      	mov	r9, r2
 8006132:	e7e2      	b.n	80060fa <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006134:	682a      	ldr	r2, [r5, #0]
 8006136:	6853      	ldr	r3, [r2, #4]
 8006138:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800613c:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800613e:	686b      	ldr	r3, [r5, #4]
 8006140:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006144:	d00b      	beq.n	800615e <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006146:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d014      	beq.n	8006178 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800614e:	2301      	movs	r3, #1
 8006150:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006154:	2300      	movs	r3, #0
 8006156:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 800615a:	2003      	movs	r0, #3
 800615c:	e018      	b.n	8006190 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800615e:	68ab      	ldr	r3, [r5, #8]
 8006160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006164:	d002      	beq.n	800616c <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616a:	d1ec      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 800616c:	682a      	ldr	r2, [r5, #0]
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	e7e6      	b.n	8006146 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8006178:	682a      	ldr	r2, [r5, #0]
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	682a      	ldr	r2, [r5, #0]
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	e7df      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800618e:	2000      	movs	r0, #0
}
 8006190:	b002      	add	sp, #8
 8006192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006196:	bf00      	nop
 8006198:	20000008 	.word	0x20000008

0800619c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b510      	push	{r4, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	4604      	mov	r4, r0
 80061a2:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a4:	9200      	str	r2, [sp, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	2180      	movs	r1, #128	; 0x80
 80061aa:	f7ff ff8f 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 80061ae:	b908      	cbnz	r0, 80061b4 <SPI_EndRxTxTransaction+0x18>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 80061b0:	b002      	add	sp, #8
 80061b2:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061b6:	f043 0320 	orr.w	r3, r3, #32
 80061ba:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 80061bc:	2003      	movs	r0, #3
 80061be:	e7f7      	b.n	80061b0 <SPI_EndRxTxTransaction+0x14>

080061c0 <SPI_EndRxTransaction>:
{
 80061c0:	b510      	push	{r4, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	4604      	mov	r4, r0
 80061c6:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c8:	6841      	ldr	r1, [r0, #4]
 80061ca:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80061ce:	d010      	beq.n	80061f2 <SPI_EndRxTransaction+0x32>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80061d0:	6861      	ldr	r1, [r4, #4]
 80061d2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80061d6:	d103      	bne.n	80061e0 <SPI_EndRxTransaction+0x20>
 80061d8:	68a1      	ldr	r1, [r4, #8]
 80061da:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061de:	d015      	beq.n	800620c <SPI_EndRxTransaction+0x4c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061e0:	9200      	str	r2, [sp, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	2180      	movs	r1, #128	; 0x80
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7ff ff70 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 80061ec:	b9e0      	cbnz	r0, 8006228 <SPI_EndRxTransaction+0x68>
}
 80061ee:	b002      	add	sp, #8
 80061f0:	bd10      	pop	{r4, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f2:	6881      	ldr	r1, [r0, #8]
 80061f4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80061f8:	d002      	beq.n	8006200 <SPI_EndRxTransaction+0x40>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80061fe:	d1e7      	bne.n	80061d0 <SPI_EndRxTransaction+0x10>
    __HAL_SPI_DISABLE(hspi);
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	6801      	ldr	r1, [r0, #0]
 8006204:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006208:	6001      	str	r1, [r0, #0]
 800620a:	e7e1      	b.n	80061d0 <SPI_EndRxTransaction+0x10>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800620c:	9200      	str	r2, [sp, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	2101      	movs	r1, #1
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff ff5a 	bl	80060cc <SPI_WaitFlagStateUntilTimeout>
 8006218:	2800      	cmp	r0, #0
 800621a:	d0e8      	beq.n	80061ee <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800621c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800621e:	f043 0320 	orr.w	r3, r3, #32
 8006222:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006224:	2003      	movs	r0, #3
 8006226:	e7e2      	b.n	80061ee <SPI_EndRxTransaction+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006228:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800622a:	f043 0320 	orr.w	r3, r3, #32
 800622e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006230:	2003      	movs	r0, #3
 8006232:	e7dc      	b.n	80061ee <SPI_EndRxTransaction+0x2e>

08006234 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006234:	2800      	cmp	r0, #0
 8006236:	d056      	beq.n	80062e6 <HAL_SPI_Init+0xb2>
{
 8006238:	b510      	push	{r4, lr}
 800623a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800623c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800623e:	b933      	cbnz	r3, 800624e <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006240:	6843      	ldr	r3, [r0, #4]
 8006242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006246:	d005      	beq.n	8006254 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006248:	2300      	movs	r3, #0
 800624a:	61c3      	str	r3, [r0, #28]
 800624c:	e002      	b.n	8006254 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800624e:	2300      	movs	r3, #0
 8006250:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006252:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006254:	2300      	movs	r3, #0
 8006256:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006258:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800625c:	2b00      	cmp	r3, #0
 800625e:	d03c      	beq.n	80062da <HAL_SPI_Init+0xa6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006260:	2302      	movs	r3, #2
 8006262:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006266:	6822      	ldr	r2, [r4, #0]
 8006268:	6813      	ldr	r3, [r2, #0]
 800626a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006276:	68a2      	ldr	r2, [r4, #8]
 8006278:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 800627c:	4313      	orrs	r3, r2
 800627e:	68e2      	ldr	r2, [r4, #12]
 8006280:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006284:	4313      	orrs	r3, r2
 8006286:	6922      	ldr	r2, [r4, #16]
 8006288:	f002 0202 	and.w	r2, r2, #2
 800628c:	4313      	orrs	r3, r2
 800628e:	6962      	ldr	r2, [r4, #20]
 8006290:	f002 0201 	and.w	r2, r2, #1
 8006294:	4313      	orrs	r3, r2
 8006296:	69a2      	ldr	r2, [r4, #24]
 8006298:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800629c:	4313      	orrs	r3, r2
 800629e:	69e2      	ldr	r2, [r4, #28]
 80062a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80062a4:	4313      	orrs	r3, r2
 80062a6:	6a22      	ldr	r2, [r4, #32]
 80062a8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80062ac:	4313      	orrs	r3, r2
 80062ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80062b4:	6821      	ldr	r1, [r4, #0]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80062ba:	8b63      	ldrh	r3, [r4, #26]
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	f003 0304 	and.w	r3, r3, #4
 80062c2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062c4:	6822      	ldr	r2, [r4, #0]
 80062c6:	69d3      	ldr	r3, [r2, #28]
 80062c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062cc:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ce:	2000      	movs	r0, #0
 80062d0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80062d2:	2301      	movs	r3, #1
 80062d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80062d8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80062da:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80062de:	4620      	mov	r0, r4
 80062e0:	f7fb fc1c 	bl	8001b1c <HAL_SPI_MspInit>
 80062e4:	e7bc      	b.n	8006260 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80062e6:	2001      	movs	r0, #1
}
 80062e8:	4770      	bx	lr

080062ea <HAL_SPI_TransmitReceive>:
{
 80062ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ee:	b083      	sub	sp, #12
 80062f0:	461f      	mov	r7, r3
 80062f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80062f4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f000 8110 	beq.w	800651e <HAL_SPI_TransmitReceive+0x234>
 80062fe:	4604      	mov	r4, r0
 8006300:	4688      	mov	r8, r1
 8006302:	4691      	mov	r9, r2
 8006304:	2301      	movs	r3, #1
 8006306:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800630a:	f7fc fea1 	bl	8003050 <HAL_GetTick>
 800630e:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8006310:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006314:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8006316:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006318:	2b01      	cmp	r3, #1
 800631a:	d00a      	beq.n	8006332 <HAL_SPI_TransmitReceive+0x48>
 800631c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006320:	f040 80e3 	bne.w	80064ea <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006324:	68a2      	ldr	r2, [r4, #8]
 8006326:	2a00      	cmp	r2, #0
 8006328:	f040 80e9 	bne.w	80064fe <HAL_SPI_TransmitReceive+0x214>
 800632c:	2b04      	cmp	r3, #4
 800632e:	f040 80e8 	bne.w	8006502 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006332:	f1b8 0f00 	cmp.w	r8, #0
 8006336:	f000 80e6 	beq.w	8006506 <HAL_SPI_TransmitReceive+0x21c>
 800633a:	f1b9 0f00 	cmp.w	r9, #0
 800633e:	f000 80e4 	beq.w	800650a <HAL_SPI_TransmitReceive+0x220>
 8006342:	2f00      	cmp	r7, #0
 8006344:	f000 80e3 	beq.w	800650e <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006348:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b04      	cmp	r3, #4
 8006350:	d002      	beq.n	8006358 <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006352:	2305      	movs	r3, #5
 8006354:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006358:	2300      	movs	r3, #0
 800635a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800635c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006360:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006362:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006364:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006368:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800636a:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800636c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800636e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006378:	d103      	bne.n	8006382 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006380:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006388:	d011      	beq.n	80063ae <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800638a:	6863      	ldr	r3, [r4, #4]
 800638c:	b10b      	cbz	r3, 8006392 <HAL_SPI_TransmitReceive+0xa8>
 800638e:	2f01      	cmp	r7, #1
 8006390:	d10b      	bne.n	80063aa <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006392:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800639a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800639c:	3301      	adds	r3, #1
 800639e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80063a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80063aa:	2701      	movs	r7, #1
 80063ac:	e06b      	b.n	8006486 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	b10b      	cbz	r3, 80063b6 <HAL_SPI_TransmitReceive+0xcc>
 80063b2:	2f01      	cmp	r7, #1
 80063b4:	d10b      	bne.n	80063ce <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063b6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80063b8:	6823      	ldr	r3, [r4, #0]
 80063ba:	8812      	ldrh	r2, [r2, #0]
 80063bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063be:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80063c0:	3302      	adds	r3, #2
 80063c2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80063c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	3b01      	subs	r3, #1
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80063ce:	2701      	movs	r7, #1
 80063d0:	e01c      	b.n	800640c <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	f012 0f01 	tst.w	r2, #1
 80063da:	d00e      	beq.n	80063fa <HAL_SPI_TransmitReceive+0x110>
 80063dc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80063de:	b292      	uxth	r2, r2
 80063e0:	b15a      	cbz	r2, 80063fa <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063ea:	3302      	adds	r3, #2
 80063ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80063ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80063f8:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063fa:	f7fc fe29 	bl	8003050 <HAL_GetTick>
 80063fe:	1b80      	subs	r0, r0, r6
 8006400:	42a8      	cmp	r0, r5
 8006402:	d303      	bcc.n	800640c <HAL_SPI_TransmitReceive+0x122>
 8006404:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006408:	f040 8083 	bne.w	8006512 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800640c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800640e:	b29b      	uxth	r3, r3
 8006410:	b91b      	cbnz	r3, 800641a <HAL_SPI_TransmitReceive+0x130>
 8006412:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d053      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	f012 0f02 	tst.w	r2, #2
 8006422:	d0d6      	beq.n	80063d2 <HAL_SPI_TransmitReceive+0xe8>
 8006424:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006426:	b292      	uxth	r2, r2
 8006428:	2a00      	cmp	r2, #0
 800642a:	d0d2      	beq.n	80063d2 <HAL_SPI_TransmitReceive+0xe8>
 800642c:	2f00      	cmp	r7, #0
 800642e:	d0d0      	beq.n	80063d2 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006430:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006432:	8812      	ldrh	r2, [r2, #0]
 8006434:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006436:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006438:	3302      	adds	r3, #2
 800643a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800643c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29b      	uxth	r3, r3
 8006444:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006446:	2700      	movs	r7, #0
 8006448:	e7c3      	b.n	80063d2 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	f012 0f01 	tst.w	r2, #1
 8006452:	d00e      	beq.n	8006472 <HAL_SPI_TransmitReceive+0x188>
 8006454:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8006456:	b292      	uxth	r2, r2
 8006458:	b15a      	cbz	r2, 8006472 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800645a:	68da      	ldr	r2, [r3, #12]
 800645c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800645e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006462:	3301      	adds	r3, #1
 8006464:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006466:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	3b01      	subs	r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006470:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006472:	f7fc fded 	bl	8003050 <HAL_GetTick>
 8006476:	1b83      	subs	r3, r0, r6
 8006478:	42ab      	cmp	r3, r5
 800647a:	d302      	bcc.n	8006482 <HAL_SPI_TransmitReceive+0x198>
 800647c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006480:	d149      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x22c>
 8006482:	2d00      	cmp	r5, #0
 8006484:	d049      	beq.n	800651a <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006486:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006488:	b29b      	uxth	r3, r3
 800648a:	b913      	cbnz	r3, 8006492 <HAL_SPI_TransmitReceive+0x1a8>
 800648c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	b1bb      	cbz	r3, 80064c2 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	689a      	ldr	r2, [r3, #8]
 8006496:	f012 0f02 	tst.w	r2, #2
 800649a:	d0d6      	beq.n	800644a <HAL_SPI_TransmitReceive+0x160>
 800649c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800649e:	b292      	uxth	r2, r2
 80064a0:	2a00      	cmp	r2, #0
 80064a2:	d0d2      	beq.n	800644a <HAL_SPI_TransmitReceive+0x160>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	d0d0      	beq.n	800644a <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80064aa:	7812      	ldrb	r2, [r2, #0]
 80064ac:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80064ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064b0:	3301      	adds	r3, #1
 80064b2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80064b4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80064be:	2700      	movs	r7, #0
 80064c0:	e7c3      	b.n	800644a <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064c2:	4632      	mov	r2, r6
 80064c4:	4629      	mov	r1, r5
 80064c6:	4620      	mov	r0, r4
 80064c8:	f7ff fe68 	bl	800619c <SPI_EndRxTxTransaction>
 80064cc:	b948      	cbnz	r0, 80064e2 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	b963      	cbnz	r3, 80064ec <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	9201      	str	r2, [sp, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	9301      	str	r3, [sp, #4]
 80064de:	9b01      	ldr	r3, [sp, #4]
 80064e0:	e004      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064e2:	2320      	movs	r3, #32
 80064e4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80064e6:	2001      	movs	r0, #1
    goto error;
 80064e8:	e000      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 80064ea:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80064f2:	2300      	movs	r3, #0
 80064f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80064f8:	b003      	add	sp, #12
 80064fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80064fe:	2002      	movs	r0, #2
 8006500:	e7f4      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
 8006502:	2002      	movs	r0, #2
 8006504:	e7f2      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8006506:	2001      	movs	r0, #1
 8006508:	e7f0      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
 800650a:	2001      	movs	r0, #1
 800650c:	e7ee      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
 800650e:	2001      	movs	r0, #1
 8006510:	e7ec      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8006512:	2003      	movs	r0, #3
 8006514:	e7ea      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8006516:	2003      	movs	r0, #3
 8006518:	e7e8      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
 800651a:	2003      	movs	r0, #3
 800651c:	e7e6      	b.n	80064ec <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 800651e:	2002      	movs	r0, #2
 8006520:	e7ea      	b.n	80064f8 <HAL_SPI_TransmitReceive+0x20e>

08006522 <HAL_SPI_Receive>:
{
 8006522:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006526:	b083      	sub	sp, #12
 8006528:	4604      	mov	r4, r0
 800652a:	4688      	mov	r8, r1
 800652c:	4691      	mov	r9, r2
 800652e:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006530:	6843      	ldr	r3, [r0, #4]
 8006532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006536:	d038      	beq.n	80065aa <HAL_SPI_Receive+0x88>
  __HAL_LOCK(hspi);
 8006538:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800653c:	2b01      	cmp	r3, #1
 800653e:	f000 80a8 	beq.w	8006692 <HAL_SPI_Receive+0x170>
 8006542:	2301      	movs	r3, #1
 8006544:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006548:	f7fc fd82 	bl	8003050 <HAL_GetTick>
 800654c:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800654e:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8006552:	b2f6      	uxtb	r6, r6
 8006554:	2e01      	cmp	r6, #1
 8006556:	f040 8089 	bne.w	800666c <HAL_SPI_Receive+0x14a>
  if ((pData == NULL) || (Size == 0U))
 800655a:	f1b8 0f00 	cmp.w	r8, #0
 800655e:	f000 8086 	beq.w	800666e <HAL_SPI_Receive+0x14c>
 8006562:	f1b9 0f00 	cmp.w	r9, #0
 8006566:	f000 8082 	beq.w	800666e <HAL_SPI_Receive+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800656a:	2304      	movs	r3, #4
 800656c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006570:	2300      	movs	r3, #0
 8006572:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006574:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006578:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800657c:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006580:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006582:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006584:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006586:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006588:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800658a:	68a3      	ldr	r3, [r4, #8]
 800658c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006590:	d018      	beq.n	80065c4 <HAL_SPI_Receive+0xa2>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	f012 0f40 	tst.w	r2, #64	; 0x40
 800659a:	d103      	bne.n	80065a4 <HAL_SPI_Receive+0x82>
    __HAL_SPI_ENABLE(hspi);
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065a2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	b313      	cbz	r3, 80065ee <HAL_SPI_Receive+0xcc>
 80065a8:	e040      	b.n	800662c <HAL_SPI_Receive+0x10a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065aa:	6883      	ldr	r3, [r0, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1c3      	bne.n	8006538 <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065b0:	2304      	movs	r3, #4
 80065b2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065b6:	9500      	str	r5, [sp, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	460a      	mov	r2, r1
 80065bc:	f7ff fe95 	bl	80062ea <HAL_SPI_TransmitReceive>
 80065c0:	4606      	mov	r6, r0
 80065c2:	e05a      	b.n	800667a <HAL_SPI_Receive+0x158>
    __HAL_SPI_DISABLE(hspi);
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	6813      	ldr	r3, [r2, #0]
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	e7db      	b.n	8006592 <HAL_SPI_Receive+0x70>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065da:	f7fc fd39 	bl	8003050 <HAL_GetTick>
 80065de:	1bc0      	subs	r0, r0, r7
 80065e0:	42a8      	cmp	r0, r5
 80065e2:	d302      	bcc.n	80065ea <HAL_SPI_Receive+0xc8>
 80065e4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80065e8:	d14b      	bne.n	8006682 <HAL_SPI_Receive+0x160>
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	d04b      	beq.n	8006686 <HAL_SPI_Receive+0x164>
    while (hspi->RxXferCount > 0U)
 80065ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d02e      	beq.n	8006654 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	f012 0f01 	tst.w	r2, #1
 80065fe:	d0ec      	beq.n	80065da <HAL_SPI_Receive+0xb8>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006600:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006602:	7b1b      	ldrb	r3, [r3, #12]
 8006604:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006608:	3301      	adds	r3, #1
 800660a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800660c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29b      	uxth	r3, r3
 8006614:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006616:	e7ea      	b.n	80065ee <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006618:	f7fc fd1a 	bl	8003050 <HAL_GetTick>
 800661c:	1bc0      	subs	r0, r0, r7
 800661e:	42a8      	cmp	r0, r5
 8006620:	d302      	bcc.n	8006628 <HAL_SPI_Receive+0x106>
 8006622:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006626:	d130      	bne.n	800668a <HAL_SPI_Receive+0x168>
 8006628:	2d00      	cmp	r5, #0
 800662a:	d030      	beq.n	800668e <HAL_SPI_Receive+0x16c>
    while (hspi->RxXferCount > 0U)
 800662c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800662e:	b29b      	uxth	r3, r3
 8006630:	b183      	cbz	r3, 8006654 <HAL_SPI_Receive+0x132>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	f012 0f01 	tst.w	r2, #1
 800663a:	d0ed      	beq.n	8006618 <HAL_SPI_Receive+0xf6>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006640:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006644:	3302      	adds	r3, #2
 8006646:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006648:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800664a:	b292      	uxth	r2, r2
 800664c:	3a01      	subs	r2, #1
 800664e:	b292      	uxth	r2, r2
 8006650:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8006652:	e7eb      	b.n	800662c <HAL_SPI_Receive+0x10a>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006654:	463a      	mov	r2, r7
 8006656:	4629      	mov	r1, r5
 8006658:	4620      	mov	r0, r4
 800665a:	f7ff fdb1 	bl	80061c0 <SPI_EndRxTransaction>
 800665e:	b108      	cbz	r0, 8006664 <HAL_SPI_Receive+0x142>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006660:	2320      	movs	r3, #32
 8006662:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006664:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006666:	b913      	cbnz	r3, 800666e <HAL_SPI_Receive+0x14c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006668:	2600      	movs	r6, #0
 800666a:	e000      	b.n	800666e <HAL_SPI_Receive+0x14c>
    errorcode = HAL_BUSY;
 800666c:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800666e:	2301      	movs	r3, #1
 8006670:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006674:	2300      	movs	r3, #0
 8006676:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800667a:	4630      	mov	r0, r6
 800667c:	b003      	add	sp, #12
 800667e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8006682:	2603      	movs	r6, #3
 8006684:	e7f3      	b.n	800666e <HAL_SPI_Receive+0x14c>
 8006686:	2603      	movs	r6, #3
 8006688:	e7f1      	b.n	800666e <HAL_SPI_Receive+0x14c>
          errorcode = HAL_TIMEOUT;
 800668a:	2603      	movs	r6, #3
 800668c:	e7ef      	b.n	800666e <HAL_SPI_Receive+0x14c>
 800668e:	2603      	movs	r6, #3
 8006690:	e7ed      	b.n	800666e <HAL_SPI_Receive+0x14c>
  __HAL_LOCK(hspi);
 8006692:	2602      	movs	r6, #2
 8006694:	e7f1      	b.n	800667a <HAL_SPI_Receive+0x158>

08006696 <HAL_SPI_ErrorCallback>:
}
 8006696:	4770      	bx	lr

08006698 <HAL_SPI_IRQHandler>:
{
 8006698:	b530      	push	{r4, r5, lr}
 800669a:	b085      	sub	sp, #20
 800669c:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800669e:	6802      	ldr	r2, [r0, #0]
 80066a0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80066a2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066a4:	f3c3 1080 	ubfx	r0, r3, #6, #1
 80066a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80066ac:	d105      	bne.n	80066ba <HAL_SPI_IRQHandler+0x22>
 80066ae:	f013 0f01 	tst.w	r3, #1
 80066b2:	d002      	beq.n	80066ba <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066b4:	f011 0f40 	tst.w	r1, #64	; 0x40
 80066b8:	d15a      	bne.n	8006770 <HAL_SPI_IRQHandler+0xd8>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066ba:	f013 0f02 	tst.w	r3, #2
 80066be:	d002      	beq.n	80066c6 <HAL_SPI_IRQHandler+0x2e>
 80066c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80066c4:	d158      	bne.n	8006778 <HAL_SPI_IRQHandler+0xe0>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80066c6:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80066ca:	f013 0f20 	tst.w	r3, #32
 80066ce:	d101      	bne.n	80066d4 <HAL_SPI_IRQHandler+0x3c>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d054      	beq.n	800677e <HAL_SPI_IRQHandler+0xe6>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80066d4:	f011 0f20 	tst.w	r1, #32
 80066d8:	d051      	beq.n	800677e <HAL_SPI_IRQHandler+0xe6>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80066da:	b178      	cbz	r0, 80066fc <HAL_SPI_IRQHandler+0x64>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066dc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b03      	cmp	r3, #3
 80066e4:	d04d      	beq.n	8006782 <HAL_SPI_IRQHandler+0xea>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80066e8:	f043 0304 	orr.w	r3, r3, #4
 80066ec:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ee:	2300      	movs	r3, #0
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	68d3      	ldr	r3, [r2, #12]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	6893      	ldr	r3, [r2, #8]
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	9b01      	ldr	r3, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066fc:	b165      	cbz	r5, 8006718 <HAL_SPI_IRQHandler+0x80>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006706:	2300      	movs	r3, #0
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	6893      	ldr	r3, [r2, #8]
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006714:	6013      	str	r3, [r2, #0]
 8006716:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006718:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	d02f      	beq.n	800677e <HAL_SPI_IRQHandler+0xe6>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800671e:	6822      	ldr	r2, [r4, #0]
 8006720:	6853      	ldr	r3, [r2, #4]
 8006722:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8006726:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8006728:	2301      	movs	r3, #1
 800672a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800672e:	f011 0f03 	tst.w	r1, #3
 8006732:	d02e      	beq.n	8006792 <HAL_SPI_IRQHandler+0xfa>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	6853      	ldr	r3, [r2, #4]
 8006738:	f023 0303 	bic.w	r3, r3, #3
 800673c:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800673e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006740:	b14b      	cbz	r3, 8006756 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <HAL_SPI_IRQHandler+0x104>)
 8006744:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006746:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8006748:	f7fc fd26 	bl	8003198 <HAL_DMA_Abort_IT>
 800674c:	b118      	cbz	r0, 8006756 <HAL_SPI_IRQHandler+0xbe>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800674e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006754:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006756:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006758:	b18b      	cbz	r3, 800677e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800675a:	4a10      	ldr	r2, [pc, #64]	; (800679c <HAL_SPI_IRQHandler+0x104>)
 800675c:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800675e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006760:	f7fc fd1a 	bl	8003198 <HAL_DMA_Abort_IT>
 8006764:	b158      	cbz	r0, 800677e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006766:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800676c:	6563      	str	r3, [r4, #84]	; 0x54
 800676e:	e006      	b.n	800677e <HAL_SPI_IRQHandler+0xe6>
    hspi->RxISR(hspi);
 8006770:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006772:	4620      	mov	r0, r4
 8006774:	4798      	blx	r3
    return;
 8006776:	e002      	b.n	800677e <HAL_SPI_IRQHandler+0xe6>
    hspi->TxISR(hspi);
 8006778:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800677a:	4620      	mov	r0, r4
 800677c:	4798      	blx	r3
}
 800677e:	b005      	add	sp, #20
 8006780:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006782:	2300      	movs	r3, #0
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	68d3      	ldr	r3, [r2, #12]
 8006788:	9302      	str	r3, [sp, #8]
 800678a:	6893      	ldr	r3, [r2, #8]
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	9b02      	ldr	r3, [sp, #8]
        return;
 8006790:	e7f5      	b.n	800677e <HAL_SPI_IRQHandler+0xe6>
        HAL_SPI_ErrorCallback(hspi);
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff ff7f 	bl	8006696 <HAL_SPI_ErrorCallback>
    return;
 8006798:	e7f1      	b.n	800677e <HAL_SPI_IRQHandler+0xe6>
 800679a:	bf00      	nop
 800679c:	080067a1 	.word	0x080067a1

080067a0 <SPI_DMAAbortOnError>:
{
 80067a0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067a8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80067aa:	f7ff ff74 	bl	8006696 <HAL_SPI_ErrorCallback>
}
 80067ae:	bd08      	pop	{r3, pc}

080067b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b2:	6a03      	ldr	r3, [r0, #32]
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067bc:	6846      	ldr	r6, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067c0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067c4:	680c      	ldr	r4, [r1, #0]
 80067c6:	ea44 0502 	orr.w	r5, r4, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ca:	f023 0202 	bic.w	r2, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ce:	688b      	ldr	r3, [r1, #8]
 80067d0:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d2:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <TIM_OC1_SetConfig+0x58>)
 80067d4:	42a0      	cmp	r0, r4
 80067d6:	d009      	beq.n	80067ec <TIM_OC1_SetConfig+0x3c>
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d8:	4c0b      	ldr	r4, [pc, #44]	; (8006808 <TIM_OC1_SetConfig+0x58>)
 80067da:	42a0      	cmp	r0, r4
 80067dc:	d00d      	beq.n	80067fa <TIM_OC1_SetConfig+0x4a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067de:	6046      	str	r6, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e0:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067e2:	684a      	ldr	r2, [r1, #4]
 80067e4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e6:	6203      	str	r3, [r0, #32]
}
 80067e8:	bc70      	pop	{r4, r5, r6}
 80067ea:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80067ec:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80067f0:	68ca      	ldr	r2, [r1, #12]
 80067f2:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	e7ee      	b.n	80067d8 <TIM_OC1_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067fa:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 80067fe:	694a      	ldr	r2, [r1, #20]
 8006800:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8006802:	698e      	ldr	r6, [r1, #24]
 8006804:	4316      	orrs	r6, r2
 8006806:	e7ea      	b.n	80067de <TIM_OC1_SetConfig+0x2e>
 8006808:	40012c00 	.word	0x40012c00

0800680c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800680c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800680e:	6a03      	ldr	r3, [r0, #32]
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006816:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800681c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006820:	680c      	ldr	r4, [r1, #0]
 8006822:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006828:	688c      	ldr	r4, [r1, #8]
 800682a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682e:	4c0f      	ldr	r4, [pc, #60]	; (800686c <TIM_OC3_SetConfig+0x60>)
 8006830:	42a0      	cmp	r0, r4
 8006832:	d009      	beq.n	8006848 <TIM_OC3_SetConfig+0x3c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006834:	4c0d      	ldr	r4, [pc, #52]	; (800686c <TIM_OC3_SetConfig+0x60>)
 8006836:	42a0      	cmp	r0, r4
 8006838:	d00e      	beq.n	8006858 <TIM_OC3_SetConfig+0x4c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683a:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800683e:	684a      	ldr	r2, [r1, #4]
 8006840:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006842:	6203      	str	r3, [r0, #32]
}
 8006844:	bc30      	pop	{r4, r5}
 8006846:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 8006848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684c:	68cc      	ldr	r4, [r1, #12]
 800684e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006852:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006856:	e7ed      	b.n	8006834 <TIM_OC3_SetConfig+0x28>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006858:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800685c:	694c      	ldr	r4, [r1, #20]
 800685e:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006862:	698c      	ldr	r4, [r1, #24]
 8006864:	ea45 1504 	orr.w	r5, r5, r4, lsl #4
 8006868:	e7e7      	b.n	800683a <TIM_OC3_SetConfig+0x2e>
 800686a:	bf00      	nop
 800686c:	40012c00 	.word	0x40012c00

08006870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006872:	6a03      	ldr	r3, [r0, #32]
 8006874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006878:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006880:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	680d      	ldr	r5, [r1, #0]
 8006886:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800688a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800688e:	688d      	ldr	r5, [r1, #8]
 8006890:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006894:	4d07      	ldr	r5, [pc, #28]	; (80068b4 <TIM_OC4_SetConfig+0x44>)
 8006896:	42a8      	cmp	r0, r5
 8006898:	d006      	beq.n	80068a8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689c:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800689e:	684a      	ldr	r2, [r1, #4]
 80068a0:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a2:	6203      	str	r3, [r0, #32]
}
 80068a4:	bc30      	pop	{r4, r5}
 80068a6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	694d      	ldr	r5, [r1, #20]
 80068ae:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80068b2:	e7f2      	b.n	800689a <TIM_OC4_SetConfig+0x2a>
 80068b4:	40012c00 	.word	0x40012c00

080068b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068b8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068bc:	6a05      	ldr	r5, [r0, #32]
 80068be:	f025 0501 	bic.w	r5, r5, #1
 80068c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068c6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068ca:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ce:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80068d2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068d4:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80068d6:	6203      	str	r3, [r0, #32]
}
 80068d8:	bc30      	pop	{r4, r5}
 80068da:	4770      	bx	lr

080068dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068dc:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068de:	6a05      	ldr	r5, [r0, #32]
 80068e0:	f025 0510 	bic.w	r5, r5, #16
 80068e4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80068e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ea:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068ee:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80068f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068fa:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80068fc:	6203      	str	r3, [r0, #32]
}
 80068fe:	bc30      	pop	{r4, r5}
 8006900:	4770      	bx	lr

08006902 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006902:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006908:	430b      	orrs	r3, r1
 800690a:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	6083      	str	r3, [r0, #8]
}
 8006910:	4770      	bx	lr
	...

08006914 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006914:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	d122      	bne.n	8006964 <HAL_TIM_Base_Start+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800691e:	2302      	movs	r3, #2
 8006920:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	6803      	ldr	r3, [r0, #0]
 8006926:	4a11      	ldr	r2, [pc, #68]	; (800696c <HAL_TIM_Base_Start+0x58>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d010      	beq.n	800694e <HAL_TIM_Base_Start+0x3a>
 800692c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006930:	d00d      	beq.n	800694e <HAL_TIM_Base_Start+0x3a>
 8006932:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006936:	4293      	cmp	r3, r2
 8006938:	d009      	beq.n	800694e <HAL_TIM_Base_Start+0x3a>
 800693a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800693e:	4293      	cmp	r3, r2
 8006940:	d005      	beq.n	800694e <HAL_TIM_Base_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	f042 0201 	orr.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800694a:	2000      	movs	r0, #0
 800694c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006954:	2a06      	cmp	r2, #6
 8006956:	d007      	beq.n	8006968 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	f042 0201 	orr.w	r2, r2, #1
 800695e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006960:	2000      	movs	r0, #0
 8006962:	4770      	bx	lr
    return HAL_ERROR;
 8006964:	2001      	movs	r0, #1
 8006966:	4770      	bx	lr
  return HAL_OK;
 8006968:	2000      	movs	r0, #0
}
 800696a:	4770      	bx	lr
 800696c:	40012c00 	.word	0x40012c00

08006970 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006970:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	d127      	bne.n	80069ca <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 800697a:	2302      	movs	r3, #2
 800697c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006980:	6802      	ldr	r2, [r0, #0]
 8006982:	68d3      	ldr	r3, [r2, #12]
 8006984:	f043 0301 	orr.w	r3, r3, #1
 8006988:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800698a:	6803      	ldr	r3, [r0, #0]
 800698c:	4a11      	ldr	r2, [pc, #68]	; (80069d4 <HAL_TIM_Base_Start_IT+0x64>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d010      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x44>
 8006992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006996:	d00d      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x44>
 8006998:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x44>
 80069a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d005      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80069b0:	2000      	movs	r0, #0
 80069b2:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ba:	2a06      	cmp	r2, #6
 80069bc:	d007      	beq.n	80069ce <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80069c6:	2000      	movs	r0, #0
 80069c8:	4770      	bx	lr
    return HAL_ERROR;
 80069ca:	2001      	movs	r0, #1
 80069cc:	4770      	bx	lr
  return HAL_OK;
 80069ce:	2000      	movs	r0, #0
}
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00

080069d8 <HAL_TIM_PWM_MspInit>:
}
 80069d8:	4770      	bx	lr

080069da <HAL_TIM_OC_DelayElapsedCallback>:
}
 80069da:	4770      	bx	lr

080069dc <HAL_TIM_IC_CaptureCallback>:
}
 80069dc:	4770      	bx	lr

080069de <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80069de:	4770      	bx	lr

080069e0 <HAL_TIM_TriggerCallback>:
}
 80069e0:	4770      	bx	lr

080069e2 <HAL_TIM_IRQHandler>:
{
 80069e2:	b510      	push	{r4, lr}
 80069e4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069e6:	6803      	ldr	r3, [r0, #0]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	f012 0f02 	tst.w	r2, #2
 80069ee:	d011      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	f012 0f02 	tst.w	r2, #2
 80069f6:	d00d      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069f8:	f06f 0202 	mvn.w	r2, #2
 80069fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069fe:	2301      	movs	r3, #1
 8006a00:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a02:	6803      	ldr	r3, [r0, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f013 0f03 	tst.w	r3, #3
 8006a0a:	d070      	beq.n	8006aee <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006a0c:	f7ff ffe6 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a10:	2300      	movs	r3, #0
 8006a12:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	f012 0f04 	tst.w	r2, #4
 8006a1c:	d012      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a1e:	68da      	ldr	r2, [r3, #12]
 8006a20:	f012 0f04 	tst.w	r2, #4
 8006a24:	d00e      	beq.n	8006a44 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a26:	f06f 0204 	mvn.w	r2, #4
 8006a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006a38:	d05f      	beq.n	8006afa <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f7ff ffce 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a40:	2300      	movs	r3, #0
 8006a42:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	f012 0f08 	tst.w	r2, #8
 8006a4c:	d012      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	f012 0f08 	tst.w	r2, #8
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a56:	f06f 0208 	mvn.w	r2, #8
 8006a5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	f013 0f03 	tst.w	r3, #3
 8006a68:	d04e      	beq.n	8006b08 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f7ff ffb6 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a70:	2300      	movs	r3, #0
 8006a72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a74:	6823      	ldr	r3, [r4, #0]
 8006a76:	691a      	ldr	r2, [r3, #16]
 8006a78:	f012 0f10 	tst.w	r2, #16
 8006a7c:	d012      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	f012 0f10 	tst.w	r2, #16
 8006a84:	d00e      	beq.n	8006aa4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a86:	f06f 0210 	mvn.w	r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a8c:	2308      	movs	r3, #8
 8006a8e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006a98:	d03d      	beq.n	8006b16 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff ff9e 	bl	80069dc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	691a      	ldr	r2, [r3, #16]
 8006aa8:	f012 0f01 	tst.w	r2, #1
 8006aac:	d003      	beq.n	8006ab6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	f012 0f01 	tst.w	r2, #1
 8006ab4:	d136      	bne.n	8006b24 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006abe:	d003      	beq.n	8006ac8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006ac6:	d134      	bne.n	8006b32 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ad0:	d003      	beq.n	8006ada <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ad8:	d132      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	691a      	ldr	r2, [r3, #16]
 8006ade:	f012 0f20 	tst.w	r2, #32
 8006ae2:	d003      	beq.n	8006aec <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	f012 0f20 	tst.w	r2, #32
 8006aea:	d130      	bne.n	8006b4e <HAL_TIM_IRQHandler+0x16c>
}
 8006aec:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	f7ff ff74 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af2:	4620      	mov	r0, r4
 8006af4:	f7ff ff73 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
 8006af8:	e78a      	b.n	8006a10 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	4620      	mov	r0, r4
 8006afc:	f7ff ff6d 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	4620      	mov	r0, r4
 8006b02:	f7ff ff6c 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
 8006b06:	e79b      	b.n	8006a40 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f7ff ff66 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7ff ff65 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
 8006b14:	e7ac      	b.n	8006a70 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7ff ff5f 	bl	80069da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff ff5e 	bl	80069de <HAL_TIM_PWM_PulseFinishedCallback>
 8006b22:	e7bd      	b.n	8006aa0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b24:	f06f 0201 	mvn.w	r2, #1
 8006b28:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f7fa fc0a 	bl	8001344 <HAL_TIM_PeriodElapsedCallback>
 8006b30:	e7c1      	b.n	8006ab6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f000 fb24 	bl	8007186 <HAL_TIMEx_BreakCallback>
 8006b3e:	e7c3      	b.n	8006ac8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b44:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7ff ff4a 	bl	80069e0 <HAL_TIM_TriggerCallback>
 8006b4c:	e7c5      	b.n	8006ada <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b4e:	f06f 0220 	mvn.w	r2, #32
 8006b52:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fb15 	bl	8007184 <HAL_TIMEx_CommutCallback>
}
 8006b5a:	e7c7      	b.n	8006aec <HAL_TIM_IRQHandler+0x10a>

08006b5c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006b5c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b5e:	4a1b      	ldr	r2, [pc, #108]	; (8006bcc <TIM_Base_SetConfig+0x70>)
 8006b60:	4290      	cmp	r0, r2
 8006b62:	d00a      	beq.n	8006b7a <TIM_Base_SetConfig+0x1e>
 8006b64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006b68:	d007      	beq.n	8006b7a <TIM_Base_SetConfig+0x1e>
 8006b6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006b6e:	4290      	cmp	r0, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_Base_SetConfig+0x1e>
 8006b72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b76:	4290      	cmp	r0, r2
 8006b78:	d103      	bne.n	8006b82 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006b7e:	684a      	ldr	r2, [r1, #4]
 8006b80:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b82:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <TIM_Base_SetConfig+0x70>)
 8006b84:	4290      	cmp	r0, r2
 8006b86:	d00a      	beq.n	8006b9e <TIM_Base_SetConfig+0x42>
 8006b88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006b8c:	d007      	beq.n	8006b9e <TIM_Base_SetConfig+0x42>
 8006b8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006b92:	4290      	cmp	r0, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_Base_SetConfig+0x42>
 8006b96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b9a:	4290      	cmp	r0, r2
 8006b9c:	d103      	bne.n	8006ba6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ba2:	68ca      	ldr	r2, [r1, #12]
 8006ba4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	694a      	ldr	r2, [r1, #20]
 8006bac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006bae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	688b      	ldr	r3, [r1, #8]
 8006bb2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006bb4:	680b      	ldr	r3, [r1, #0]
 8006bb6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb8:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <TIM_Base_SetConfig+0x70>)
 8006bba:	4298      	cmp	r0, r3
 8006bbc:	d002      	beq.n	8006bc4 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6143      	str	r3, [r0, #20]
}
 8006bc2:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8006bc4:	690b      	ldr	r3, [r1, #16]
 8006bc6:	6303      	str	r3, [r0, #48]	; 0x30
 8006bc8:	e7f9      	b.n	8006bbe <TIM_Base_SetConfig+0x62>
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00

08006bd0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006bd0:	b340      	cbz	r0, 8006c24 <HAL_TIM_Base_Init+0x54>
{
 8006bd2:	b510      	push	{r4, lr}
 8006bd4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006bd6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006bda:	b1f3      	cbz	r3, 8006c1a <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be2:	4621      	mov	r1, r4
 8006be4:	f851 0b04 	ldr.w	r0, [r1], #4
 8006be8:	f7ff ffb8 	bl	8006b5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bec:	2301      	movs	r3, #1
 8006bee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bf2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006bf6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006bfa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c0a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006c16:	2000      	movs	r0, #0
}
 8006c18:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006c1a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006c1e:	f7fa fff9 	bl	8001c14 <HAL_TIM_Base_MspInit>
 8006c22:	e7db      	b.n	8006bdc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006c24:	2001      	movs	r0, #1
}
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8006c28:	b340      	cbz	r0, 8006c7c <HAL_TIM_PWM_Init+0x54>
{
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c32:	b1f3      	cbz	r3, 8006c72 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c34:	2302      	movs	r3, #2
 8006c36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8006c40:	f7ff ff8c 	bl	8006b5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c44:	2301      	movs	r3, #1
 8006c46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006c4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006c52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006c56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006c6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006c6e:	2000      	movs	r0, #0
}
 8006c70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006c72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006c76:	f7ff feaf 	bl	80069d8 <HAL_TIM_PWM_MspInit>
 8006c7a:	e7db      	b.n	8006c34 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8006c7c:	2001      	movs	r0, #1
}
 8006c7e:	4770      	bx	lr

08006c80 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d053      	beq.n	8006d2c <HAL_TIM_Encoder_Init+0xac>
{
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	460d      	mov	r5, r1
 8006c88:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006c8a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d047      	beq.n	8006d22 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 8006c92:	2302      	movs	r3, #2
 8006c94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c98:	6822      	ldr	r2, [r4, #0]
 8006c9a:	6893      	ldr	r3, [r2, #8]
 8006c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca0:	f023 0307 	bic.w	r3, r3, #7
 8006ca4:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	f851 0b04 	ldr.w	r0, [r1], #4
 8006cac:	f7ff ff56 	bl	8006b5c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8006cb0:	6821      	ldr	r1, [r4, #0]
 8006cb2:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8006cb4:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 8006cb6:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8006cb8:	6828      	ldr	r0, [r5, #0]
 8006cba:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cbc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 8006cc0:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cc4:	68aa      	ldr	r2, [r5, #8]
 8006cc6:	69ab      	ldr	r3, [r5, #24]
 8006cc8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8006ccc:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006cce:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8006cd2:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cd6:	68ee      	ldr	r6, [r5, #12]
 8006cd8:	69ea      	ldr	r2, [r5, #28]
 8006cda:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 8006cde:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ce0:	6a2a      	ldr	r2, [r5, #32]
 8006ce2:	0313      	lsls	r3, r2, #12
 8006ce4:	692a      	ldr	r2, [r5, #16]
 8006ce6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006cea:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006cec:	f027 0722 	bic.w	r7, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cf0:	686a      	ldr	r2, [r5, #4]
 8006cf2:	696d      	ldr	r5, [r5, #20]
 8006cf4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8006cf8:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 8006cfa:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8006cfc:	6821      	ldr	r1, [r4, #0]
 8006cfe:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8006d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8006d1e:	2000      	movs	r0, #0
}
 8006d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8006d22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8006d26:	f7fa ffad 	bl	8001c84 <HAL_TIM_Encoder_MspInit>
 8006d2a:	e7b2      	b.n	8006c92 <HAL_TIM_Encoder_Init+0x12>
    return HAL_ERROR;
 8006d2c:	2001      	movs	r0, #1
}
 8006d2e:	4770      	bx	lr

08006d30 <TIM_OC2_SetConfig>:
{
 8006d30:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d32:	6a03      	ldr	r3, [r0, #32]
 8006d34:	f023 0310 	bic.w	r3, r3, #16
 8006d38:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006d3a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006d3c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006d3e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d40:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d44:	680d      	ldr	r5, [r1, #0]
 8006d46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4a:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d4e:	688d      	ldr	r5, [r1, #8]
 8006d50:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d54:	4d0e      	ldr	r5, [pc, #56]	; (8006d90 <TIM_OC2_SetConfig+0x60>)
 8006d56:	42a8      	cmp	r0, r5
 8006d58:	d009      	beq.n	8006d6e <TIM_OC2_SetConfig+0x3e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d5a:	4d0d      	ldr	r5, [pc, #52]	; (8006d90 <TIM_OC2_SetConfig+0x60>)
 8006d5c:	42a8      	cmp	r0, r5
 8006d5e:	d00e      	beq.n	8006d7e <TIM_OC2_SetConfig+0x4e>
  TIMx->CR2 = tmpcr2;
 8006d60:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006d62:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8006d64:	684a      	ldr	r2, [r1, #4]
 8006d66:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006d68:	6203      	str	r3, [r0, #32]
}
 8006d6a:	bc30      	pop	{r4, r5}
 8006d6c:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d72:	68cd      	ldr	r5, [r1, #12]
 8006d74:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d7c:	e7ed      	b.n	8006d5a <TIM_OC2_SetConfig+0x2a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d7e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d82:	694d      	ldr	r5, [r1, #20]
 8006d84:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d88:	698d      	ldr	r5, [r1, #24]
 8006d8a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8006d8e:	e7e7      	b.n	8006d60 <TIM_OC2_SetConfig+0x30>
 8006d90:	40012c00 	.word	0x40012c00

08006d94 <HAL_TIM_PWM_ConfigChannel>:
{
 8006d94:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006d96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d060      	beq.n	8006e60 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8006d9e:	4604      	mov	r4, r0
 8006da0:	460d      	mov	r5, r1
 8006da2:	2301      	movs	r3, #1
 8006da4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8006da8:	2a0c      	cmp	r2, #12
 8006daa:	d81a      	bhi.n	8006de2 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006dac:	e8df f002 	tbb	[pc, r2]
 8006db0:	19191907 	.word	0x19191907
 8006db4:	1919191d 	.word	0x1919191d
 8006db8:	19191931 	.word	0x19191931
 8006dbc:	44          	.byte	0x44
 8006dbd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dbe:	6800      	ldr	r0, [r0, #0]
 8006dc0:	f7ff fcf6 	bl	80067b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc4:	6822      	ldr	r2, [r4, #0]
 8006dc6:	6993      	ldr	r3, [r2, #24]
 8006dc8:	f043 0308 	orr.w	r3, r3, #8
 8006dcc:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	6993      	ldr	r3, [r2, #24]
 8006dd2:	f023 0304 	bic.w	r3, r3, #4
 8006dd6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	6993      	ldr	r3, [r2, #24]
 8006ddc:	6929      	ldr	r1, [r5, #16]
 8006dde:	430b      	orrs	r3, r1
 8006de0:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8006de2:	2000      	movs	r0, #0
 8006de4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006de8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	f7ff ffa0 	bl	8006d30 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006df0:	6822      	ldr	r2, [r4, #0]
 8006df2:	6993      	ldr	r3, [r2, #24]
 8006df4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006df8:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dfa:	6822      	ldr	r2, [r4, #0]
 8006dfc:	6993      	ldr	r3, [r2, #24]
 8006dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e02:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e04:	6822      	ldr	r2, [r4, #0]
 8006e06:	6993      	ldr	r3, [r2, #24]
 8006e08:	6929      	ldr	r1, [r5, #16]
 8006e0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e0e:	6193      	str	r3, [r2, #24]
      break;
 8006e10:	e7e7      	b.n	8006de2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	f7ff fcfa 	bl	800680c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e18:	6822      	ldr	r2, [r4, #0]
 8006e1a:	69d3      	ldr	r3, [r2, #28]
 8006e1c:	f043 0308 	orr.w	r3, r3, #8
 8006e20:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e22:	6822      	ldr	r2, [r4, #0]
 8006e24:	69d3      	ldr	r3, [r2, #28]
 8006e26:	f023 0304 	bic.w	r3, r3, #4
 8006e2a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	69d3      	ldr	r3, [r2, #28]
 8006e30:	6929      	ldr	r1, [r5, #16]
 8006e32:	430b      	orrs	r3, r1
 8006e34:	61d3      	str	r3, [r2, #28]
      break;
 8006e36:	e7d4      	b.n	8006de2 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e38:	6800      	ldr	r0, [r0, #0]
 8006e3a:	f7ff fd19 	bl	8006870 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	69d3      	ldr	r3, [r2, #28]
 8006e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e46:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e48:	6822      	ldr	r2, [r4, #0]
 8006e4a:	69d3      	ldr	r3, [r2, #28]
 8006e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e50:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e52:	6822      	ldr	r2, [r4, #0]
 8006e54:	69d3      	ldr	r3, [r2, #28]
 8006e56:	6929      	ldr	r1, [r5, #16]
 8006e58:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006e5c:	61d3      	str	r3, [r2, #28]
      break;
 8006e5e:	e7c0      	b.n	8006de2 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 8006e60:	2002      	movs	r0, #2
 8006e62:	e7c1      	b.n	8006de8 <HAL_TIM_PWM_ConfigChannel+0x54>

08006e64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e64:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e66:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e68:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e6c:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006e70:	430a      	orrs	r2, r1
 8006e72:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e74:	6082      	str	r2, [r0, #8]
}
 8006e76:	bc10      	pop	{r4}
 8006e78:	4770      	bx	lr

08006e7a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006e7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d066      	beq.n	8006f50 <HAL_TIM_ConfigClockSource+0xd6>
{
 8006e82:	b510      	push	{r4, lr}
 8006e84:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006e86:	2301      	movs	r3, #1
 8006e88:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006e92:	6802      	ldr	r2, [r0, #0]
 8006e94:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006e9e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	2b60      	cmp	r3, #96	; 0x60
 8006ea4:	d040      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0xae>
 8006ea6:	d822      	bhi.n	8006eee <HAL_TIM_ConfigClockSource+0x74>
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d047      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0xc2>
 8006eac:	d90b      	bls.n	8006ec6 <HAL_TIM_ConfigClockSource+0x4c>
 8006eae:	2b50      	cmp	r3, #80	; 0x50
 8006eb0:	d10e      	bne.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb2:	68ca      	ldr	r2, [r1, #12]
 8006eb4:	6849      	ldr	r1, [r1, #4]
 8006eb6:	6800      	ldr	r0, [r0, #0]
 8006eb8:	f7ff fcfe 	bl	80068b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ebc:	2150      	movs	r1, #80	; 0x50
 8006ebe:	6820      	ldr	r0, [r4, #0]
 8006ec0:	f7ff fd1f 	bl	8006902 <TIM_ITRx_SetConfig>
      break;
 8006ec4:	e004      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006ec6:	2b20      	cmp	r3, #32
 8006ec8:	d00c      	beq.n	8006ee4 <HAL_TIM_ConfigClockSource+0x6a>
 8006eca:	d908      	bls.n	8006ede <HAL_TIM_ConfigClockSource+0x64>
 8006ecc:	2b30      	cmp	r3, #48	; 0x30
 8006ece:	d009      	beq.n	8006ee4 <HAL_TIM_ConfigClockSource+0x6a>
  htim->State = HAL_TIM_STATE_READY;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006edc:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8006ede:	b10b      	cbz	r3, 8006ee4 <HAL_TIM_ConfigClockSource+0x6a>
 8006ee0:	2b10      	cmp	r3, #16
 8006ee2:	d1f5      	bne.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6820      	ldr	r0, [r4, #0]
 8006ee8:	f7ff fd0b 	bl	8006902 <TIM_ITRx_SetConfig>
        break;
 8006eec:	e7f0      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006eee:	2b70      	cmp	r3, #112	; 0x70
 8006ef0:	d00e      	beq.n	8006f10 <HAL_TIM_ConfigClockSource+0x96>
 8006ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ef6:	d1eb      	bne.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8006ef8:	68cb      	ldr	r3, [r1, #12]
 8006efa:	684a      	ldr	r2, [r1, #4]
 8006efc:	6889      	ldr	r1, [r1, #8]
 8006efe:	6800      	ldr	r0, [r0, #0]
 8006f00:	f7ff ffb0 	bl	8006e64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	6893      	ldr	r3, [r2, #8]
 8006f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f0c:	6093      	str	r3, [r2, #8]
      break;
 8006f0e:	e7df      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_ETR_SetConfig(htim->Instance,
 8006f10:	68cb      	ldr	r3, [r1, #12]
 8006f12:	684a      	ldr	r2, [r1, #4]
 8006f14:	6889      	ldr	r1, [r1, #8]
 8006f16:	6800      	ldr	r0, [r0, #0]
 8006f18:	f7ff ffa4 	bl	8006e64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006f24:	6093      	str	r3, [r2, #8]
      break;
 8006f26:	e7d3      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f28:	68ca      	ldr	r2, [r1, #12]
 8006f2a:	6849      	ldr	r1, [r1, #4]
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f7ff fcd5 	bl	80068dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f32:	2160      	movs	r1, #96	; 0x60
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	f7ff fce4 	bl	8006902 <TIM_ITRx_SetConfig>
      break;
 8006f3a:	e7c9      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3c:	68ca      	ldr	r2, [r1, #12]
 8006f3e:	6849      	ldr	r1, [r1, #4]
 8006f40:	6800      	ldr	r0, [r0, #0]
 8006f42:	f7ff fcb9 	bl	80068b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f46:	2140      	movs	r1, #64	; 0x40
 8006f48:	6820      	ldr	r0, [r4, #0]
 8006f4a:	f7ff fcda 	bl	8006902 <TIM_ITRx_SetConfig>
      break;
 8006f4e:	e7bf      	b.n	8006ed0 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8006f50:	2002      	movs	r0, #2
}
 8006f52:	4770      	bx	lr

08006f54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f54:	b410      	push	{r4}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f56:	f001 011f 	and.w	r1, r1, #31
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	fa03 f401 	lsl.w	r4, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f60:	6a03      	ldr	r3, [r0, #32]
 8006f62:	ea23 0304 	bic.w	r3, r3, r4
 8006f66:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f68:	6a03      	ldr	r3, [r0, #32]
 8006f6a:	fa02 f101 	lsl.w	r1, r2, r1
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	6203      	str	r3, [r0, #32]
}
 8006f72:	bc10      	pop	{r4}
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_TIM_PWM_Start>:
{
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	4608      	mov	r0, r1
 8006f7e:	bb51      	cbnz	r1, 8006fd6 <HAL_TIM_PWM_Start+0x5e>
 8006f80:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	3b01      	subs	r3, #1
 8006f88:	bf18      	it	ne
 8006f8a:	2301      	movne	r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d15b      	bne.n	8007048 <HAL_TIM_PWM_Start+0xd0>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d139      	bne.n	8007008 <HAL_TIM_PWM_Start+0x90>
 8006f94:	2302      	movs	r3, #2
 8006f96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	4601      	mov	r1, r0
 8006f9e:	6820      	ldr	r0, [r4, #0]
 8006fa0:	f7ff ffd8 	bl	8006f54 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <HAL_TIM_PWM_Start+0xd8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d03d      	beq.n	8007028 <HAL_TIM_PWM_Start+0xb0>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	4a28      	ldr	r2, [pc, #160]	; (8007050 <HAL_TIM_PWM_Start+0xd8>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d03e      	beq.n	8007032 <HAL_TIM_PWM_Start+0xba>
 8006fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb8:	d03b      	beq.n	8007032 <HAL_TIM_PWM_Start+0xba>
 8006fba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d037      	beq.n	8007032 <HAL_TIM_PWM_Start+0xba>
 8006fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d033      	beq.n	8007032 <HAL_TIM_PWM_Start+0xba>
    __HAL_TIM_ENABLE(htim);
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	f042 0201 	orr.w	r2, r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e039      	b.n	800704a <HAL_TIM_PWM_Start+0xd2>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fd6:	2904      	cmp	r1, #4
 8006fd8:	d008      	beq.n	8006fec <HAL_TIM_PWM_Start+0x74>
 8006fda:	2908      	cmp	r1, #8
 8006fdc:	d00d      	beq.n	8006ffa <HAL_TIM_PWM_Start+0x82>
 8006fde:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	bf18      	it	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	e7cf      	b.n	8006f8c <HAL_TIM_PWM_Start+0x14>
 8006fec:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	bf18      	it	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	e7c8      	b.n	8006f8c <HAL_TIM_PWM_Start+0x14>
 8006ffa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	bf18      	it	ne
 8007004:	2301      	movne	r3, #1
 8007006:	e7c1      	b.n	8006f8c <HAL_TIM_PWM_Start+0x14>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007008:	2804      	cmp	r0, #4
 800700a:	d005      	beq.n	8007018 <HAL_TIM_PWM_Start+0xa0>
 800700c:	2808      	cmp	r0, #8
 800700e:	d007      	beq.n	8007020 <HAL_TIM_PWM_Start+0xa8>
 8007010:	2302      	movs	r3, #2
 8007012:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007016:	e7c0      	b.n	8006f9a <HAL_TIM_PWM_Start+0x22>
 8007018:	2302      	movs	r3, #2
 800701a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800701e:	e7bc      	b.n	8006f9a <HAL_TIM_PWM_Start+0x22>
 8007020:	2302      	movs	r3, #2
 8007022:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007026:	e7b8      	b.n	8006f9a <HAL_TIM_PWM_Start+0x22>
    __HAL_TIM_MOE_ENABLE(htim);
 8007028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800702a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800702e:	645a      	str	r2, [r3, #68]	; 0x44
 8007030:	e7bc      	b.n	8006fac <HAL_TIM_PWM_Start+0x34>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007032:	689a      	ldr	r2, [r3, #8]
 8007034:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007038:	2a06      	cmp	r2, #6
 800703a:	d007      	beq.n	800704c <HAL_TIM_PWM_Start+0xd4>
      __HAL_TIM_ENABLE(htim);
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007044:	2000      	movs	r0, #0
 8007046:	e000      	b.n	800704a <HAL_TIM_PWM_Start+0xd2>
    return HAL_ERROR;
 8007048:	2001      	movs	r0, #1
}
 800704a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800704c:	2000      	movs	r0, #0
 800704e:	e7fc      	b.n	800704a <HAL_TIM_PWM_Start+0xd2>
 8007050:	40012c00 	.word	0x40012c00

08007054 <HAL_TIM_Encoder_Start>:
{
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007058:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
 800705c:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800705e:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007062:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007066:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007068:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
  if (Channel == TIM_CHANNEL_1)
 800706c:	460e      	mov	r6, r1
 800706e:	b9b1      	cbnz	r1, 800709e <HAL_TIM_Encoder_Start+0x4a>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007070:	2801      	cmp	r0, #1
 8007072:	d146      	bne.n	8007102 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007074:	2a01      	cmp	r2, #1
 8007076:	d145      	bne.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007078:	2302      	movs	r3, #2
 800707a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  switch (Channel)
 8007082:	b366      	cbz	r6, 80070de <HAL_TIM_Encoder_Start+0x8a>
 8007084:	2e04      	cmp	r6, #4
 8007086:	d036      	beq.n	80070f6 <HAL_TIM_Encoder_Start+0xa2>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007088:	2201      	movs	r2, #1
 800708a:	2100      	movs	r1, #0
 800708c:	6820      	ldr	r0, [r4, #0]
 800708e:	f7ff ff61 	bl	8006f54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007092:	2201      	movs	r2, #1
 8007094:	2104      	movs	r1, #4
 8007096:	6820      	ldr	r0, [r4, #0]
 8007098:	f7ff ff5c 	bl	8006f54 <TIM_CCxChannelCmd>
      break;
 800709c:	e024      	b.n	80070e8 <HAL_TIM_Encoder_Start+0x94>
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	b2ed      	uxtb	r5, r5
  else if (Channel == TIM_CHANNEL_2)
 80070a2:	2904      	cmp	r1, #4
 80070a4:	d011      	beq.n	80070ca <HAL_TIM_Encoder_Start+0x76>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070a6:	2801      	cmp	r0, #1
 80070a8:	d131      	bne.n	800710e <HAL_TIM_Encoder_Start+0xba>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d12a      	bne.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80070ae:	2a01      	cmp	r2, #1
 80070b0:	d12f      	bne.n	8007112 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070b2:	2d01      	cmp	r5, #1
 80070b4:	d12f      	bne.n	8007116 <HAL_TIM_Encoder_Start+0xc2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070b6:	2302      	movs	r3, #2
 80070b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070bc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c8:	e7db      	b.n	8007082 <HAL_TIM_Encoder_Start+0x2e>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d11b      	bne.n	8007106 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80070ce:	2d01      	cmp	r5, #1
 80070d0:	d11b      	bne.n	800710a <HAL_TIM_Encoder_Start+0xb6>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d2:	2302      	movs	r3, #2
 80070d4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80070d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070dc:	e7d1      	b.n	8007082 <HAL_TIM_Encoder_Start+0x2e>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80070de:	2201      	movs	r2, #1
 80070e0:	2100      	movs	r1, #0
 80070e2:	6820      	ldr	r0, [r4, #0]
 80070e4:	f7ff ff36 	bl	8006f54 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 80070e8:	6822      	ldr	r2, [r4, #0]
 80070ea:	6813      	ldr	r3, [r2, #0]
 80070ec:	f043 0301 	orr.w	r3, r3, #1
 80070f0:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80070f2:	2000      	movs	r0, #0
 80070f4:	e006      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80070f6:	2201      	movs	r2, #1
 80070f8:	2104      	movs	r1, #4
 80070fa:	6820      	ldr	r0, [r4, #0]
 80070fc:	f7ff ff2a 	bl	8006f54 <TIM_CCxChannelCmd>
      break;
 8007100:	e7f2      	b.n	80070e8 <HAL_TIM_Encoder_Start+0x94>
      return HAL_ERROR;
 8007102:	2001      	movs	r0, #1
}
 8007104:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007106:	2001      	movs	r0, #1
 8007108:	e7fc      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
 800710a:	4618      	mov	r0, r3
 800710c:	e7fa      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
      return HAL_ERROR;
 800710e:	2001      	movs	r0, #1
 8007110:	e7f8      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
 8007112:	4618      	mov	r0, r3
 8007114:	e7f6      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
 8007116:	4610      	mov	r0, r2
 8007118:	e7f4      	b.n	8007104 <HAL_TIM_Encoder_Start+0xb0>
	...

0800711c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800711c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007120:	2b01      	cmp	r3, #1
 8007122:	d02b      	beq.n	800717c <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8007124:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8007126:	2301      	movs	r3, #1
 8007128:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007132:	6803      	ldr	r3, [r0, #0]
 8007134:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007136:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007138:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800713c:	680a      	ldr	r2, [r1, #0]
 800713e:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007142:	6803      	ldr	r3, [r0, #0]
 8007144:	4a0e      	ldr	r2, [pc, #56]	; (8007180 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00a      	beq.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800714e:	d007      	beq.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007150:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800715c:	4293      	cmp	r3, r2
 800715e:	d104      	bne.n	800716a <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007160:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007164:	684a      	ldr	r2, [r1, #4]
 8007166:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007168:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800716a:	2301      	movs	r3, #1
 800716c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007170:	2300      	movs	r3, #0
 8007172:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8007176:	4618      	mov	r0, r3
}
 8007178:	bc30      	pop	{r4, r5}
 800717a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800717c:	2002      	movs	r0, #2
}
 800717e:	4770      	bx	lr
 8007180:	40012c00 	.word	0x40012c00

08007184 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007184:	4770      	bx	lr

08007186 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007186:	4770      	bx	lr

08007188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007188:	b510      	push	{r4, lr}
 800718a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800718c:	6802      	ldr	r2, [r0, #0]
 800718e:	6913      	ldr	r3, [r2, #16]
 8007190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007194:	68c1      	ldr	r1, [r0, #12]
 8007196:	430b      	orrs	r3, r1
 8007198:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800719a:	6883      	ldr	r3, [r0, #8]
 800719c:	6902      	ldr	r2, [r0, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	6942      	ldr	r2, [r0, #20]
 80071a2:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80071a4:	6801      	ldr	r1, [r0, #0]
 80071a6:	68cb      	ldr	r3, [r1, #12]
 80071a8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80071ac:	f023 030c 	bic.w	r3, r3, #12
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071b4:	6802      	ldr	r2, [r0, #0]
 80071b6:	6953      	ldr	r3, [r2, #20]
 80071b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071bc:	6981      	ldr	r1, [r0, #24]
 80071be:	430b      	orrs	r3, r1
 80071c0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 80071c2:	6802      	ldr	r2, [r0, #0]
 80071c4:	4b12      	ldr	r3, [pc, #72]	; (8007210 <UART_SetConfig+0x88>)
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d01f      	beq.n	800720a <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80071ca:	f7fe feb7 	bl	8005f3c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071ce:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80071d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80071d6:	6862      	ldr	r2, [r4, #4]
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	fbb3 f2f2 	udiv	r2, r3, r2
 80071de:	480d      	ldr	r0, [pc, #52]	; (8007214 <UART_SetConfig+0x8c>)
 80071e0:	fba0 3102 	umull	r3, r1, r0, r2
 80071e4:	0949      	lsrs	r1, r1, #5
 80071e6:	2364      	movs	r3, #100	; 0x64
 80071e8:	fb03 2311 	mls	r3, r3, r1, r2
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	3332      	adds	r3, #50	; 0x32
 80071f0:	fba0 2303 	umull	r2, r3, r0, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071fa:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80071fe:	f003 030f 	and.w	r3, r3, #15
 8007202:	6821      	ldr	r1, [r4, #0]
 8007204:	4413      	add	r3, r2
 8007206:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8007208:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 800720a:	f7fe fea7 	bl	8005f5c <HAL_RCC_GetPCLK2Freq>
 800720e:	e7de      	b.n	80071ce <UART_SetConfig+0x46>
 8007210:	40013800 	.word	0x40013800
 8007214:	51eb851f 	.word	0x51eb851f

08007218 <HAL_UART_Init>:
  if (huart == NULL)
 8007218:	b358      	cbz	r0, 8007272 <HAL_UART_Init+0x5a>
{
 800721a:	b510      	push	{r4, lr}
 800721c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800721e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007222:	b30b      	cbz	r3, 8007268 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007224:	2324      	movs	r3, #36	; 0x24
 8007226:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	68d3      	ldr	r3, [r2, #12]
 800722e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007232:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007234:	4620      	mov	r0, r4
 8007236:	f7ff ffa7 	bl	8007188 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800723a:	6822      	ldr	r2, [r4, #0]
 800723c:	6913      	ldr	r3, [r2, #16]
 800723e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007242:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007244:	6822      	ldr	r2, [r4, #0]
 8007246:	6953      	ldr	r3, [r2, #20]
 8007248:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800724c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800724e:	6822      	ldr	r2, [r4, #0]
 8007250:	68d3      	ldr	r3, [r2, #12]
 8007252:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007256:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007258:	2000      	movs	r0, #0
 800725a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800725c:	2320      	movs	r3, #32
 800725e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007262:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007266:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007268:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800726c:	f7fa fd6a 	bl	8001d44 <HAL_UART_MspInit>
 8007270:	e7d8      	b.n	8007224 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8007272:	2001      	movs	r0, #1
}
 8007274:	4770      	bx	lr

08007276 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007276:	b084      	sub	sp, #16
 8007278:	a801      	add	r0, sp, #4
 800727a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800727e:	2000      	movs	r0, #0
 8007280:	b004      	add	sp, #16
 8007282:	4770      	bx	lr

08007284 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007284:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007286:	2000      	movs	r0, #0
 8007288:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800728c:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8007290:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8007294:	4770      	bx	lr

08007296 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007296:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800729a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800729e:	045b      	lsls	r3, r3, #17
 80072a0:	0c5b      	lsrs	r3, r3, #17
 80072a2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80072a6:	2000      	movs	r0, #0
 80072a8:	4770      	bx	lr

080072aa <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80072aa:	2000      	movs	r0, #0
 80072ac:	4770      	bx	lr

080072ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80072ae:	b084      	sub	sp, #16
 80072b0:	b410      	push	{r4}
 80072b2:	4604      	mov	r4, r0
 80072b4:	a802      	add	r0, sp, #8
 80072b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80072ba:	2301      	movs	r3, #1
 80072bc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80072c0:	2000      	movs	r0, #0
 80072c2:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80072c6:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80072ca:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80072ce:	bc10      	pop	{r4}
 80072d0:	b004      	add	sp, #16
 80072d2:	4770      	bx	lr

080072d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80072d4:	b430      	push	{r4, r5}
 80072d6:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80072d8:	780c      	ldrb	r4, [r1, #0]
 80072da:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80072de:	b292      	uxth	r2, r2
 80072e0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80072e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80072e8:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 80072ea:	78c8      	ldrb	r0, [r1, #3]
 80072ec:	2803      	cmp	r0, #3
 80072ee:	d85a      	bhi.n	80073a6 <USB_ActivateEndpoint+0xd2>
 80072f0:	e8df f000 	tbb	[pc, r0]
 80072f4:	5102554e 	.word	0x5102554e
 80072f8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80072fa:	f248 0580 	movw	r5, #32896	; 0x8080
 80072fe:	432a      	orrs	r2, r5
 8007300:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007304:	780c      	ldrb	r4, [r1, #0]
 8007306:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800730a:	b292      	uxth	r2, r2
 800730c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007310:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007314:	4322      	orrs	r2, r4
 8007316:	432a      	orrs	r2, r5
 8007318:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

  if (ep->doublebuffer == 0U)
 800731c:	7b0a      	ldrb	r2, [r1, #12]
 800731e:	2a00      	cmp	r2, #0
 8007320:	f040 80b6 	bne.w	8007490 <USB_ActivateEndpoint+0x1bc>
  {
    if (ep->is_in != 0U)
 8007324:	784a      	ldrb	r2, [r1, #1]
 8007326:	2a00      	cmp	r2, #0
 8007328:	d04e      	beq.n	80073c8 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800732a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800732e:	b292      	uxth	r2, r2
 8007330:	441a      	add	r2, r3
 8007332:	780c      	ldrb	r4, [r1, #0]
 8007334:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 8007338:	88cc      	ldrh	r4, [r1, #6]
 800733a:	0864      	lsrs	r4, r4, #1
 800733c:	0064      	lsls	r4, r4, #1
 800733e:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007342:	780c      	ldrb	r4, [r1, #0]
 8007344:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007348:	f012 0f40 	tst.w	r2, #64	; 0x40
 800734c:	d00c      	beq.n	8007368 <USB_ActivateEndpoint+0x94>
 800734e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007352:	b292      	uxth	r2, r2
 8007354:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007358:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800735c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007360:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8007364:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007368:	78ca      	ldrb	r2, [r1, #3]
 800736a:	2a01      	cmp	r2, #1
 800736c:	d01d      	beq.n	80073aa <USB_ActivateEndpoint+0xd6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800736e:	7809      	ldrb	r1, [r1, #0]
 8007370:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007374:	b292      	uxth	r2, r2
 8007376:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800737a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800737e:	f082 0220 	eor.w	r2, r2, #32
 8007382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007386:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800738a:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 800738e:	e064      	b.n	800745a <USB_ActivateEndpoint+0x186>
      wEpRegVal |= USB_EP_CONTROL;
 8007390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8007394:	e7b1      	b.n	80072fa <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8007396:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800739a:	2000      	movs	r0, #0
      break;
 800739c:	e7ad      	b.n	80072fa <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800739e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 80073a2:	2000      	movs	r0, #0
      break;
 80073a4:	e7a9      	b.n	80072fa <USB_ActivateEndpoint+0x26>
      ret = HAL_ERROR;
 80073a6:	2001      	movs	r0, #1
 80073a8:	e7a7      	b.n	80072fa <USB_ActivateEndpoint+0x26>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073aa:	7809      	ldrb	r1, [r1, #0]
 80073ac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80073b0:	b292      	uxth	r2, r2
 80073b2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80073b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073c2:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80073c6:	e048      	b.n	800745a <USB_ActivateEndpoint+0x186>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80073c8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80073cc:	b292      	uxth	r2, r2
 80073ce:	441a      	add	r2, r3
 80073d0:	780c      	ldrb	r4, [r1, #0]
 80073d2:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80073d6:	88cc      	ldrh	r4, [r1, #6]
 80073d8:	0864      	lsrs	r4, r4, #1
 80073da:	0064      	lsls	r4, r4, #1
 80073dc:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80073e0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80073e4:	b292      	uxth	r2, r2
 80073e6:	441a      	add	r2, r3
 80073e8:	780c      	ldrb	r4, [r1, #0]
 80073ea:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80073ee:	690c      	ldr	r4, [r1, #16]
 80073f0:	bbac      	cbnz	r4, 800745e <USB_ActivateEndpoint+0x18a>
 80073f2:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 80073f6:	b2a4      	uxth	r4, r4
 80073f8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 80073fc:	b2a4      	uxth	r4, r4
 80073fe:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 8007402:	f8b2 440c 	ldrh.w	r4, [r2, #1036]	; 0x40c
 8007406:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 800740a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 800740e:	b2a4      	uxth	r4, r4
 8007410:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007414:	780c      	ldrb	r4, [r1, #0]
 8007416:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800741a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800741e:	d00c      	beq.n	800743a <USB_ActivateEndpoint+0x166>
 8007420:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007424:	b292      	uxth	r2, r2
 8007426:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800742a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800742e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007436:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800743a:	7809      	ldrb	r1, [r1, #0]
 800743c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007440:	b292      	uxth	r2, r2
 8007442:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007446:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800744a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800744e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007452:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007456:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 800745a:	bc30      	pop	{r4, r5}
 800745c:	4770      	bx	lr
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800745e:	2c3e      	cmp	r4, #62	; 0x3e
 8007460:	d809      	bhi.n	8007476 <USB_ActivateEndpoint+0x1a2>
 8007462:	0865      	lsrs	r5, r4, #1
 8007464:	f014 0f01 	tst.w	r4, #1
 8007468:	d000      	beq.n	800746c <USB_ActivateEndpoint+0x198>
 800746a:	3501      	adds	r5, #1
 800746c:	02ad      	lsls	r5, r5, #10
 800746e:	b2ad      	uxth	r5, r5
 8007470:	f8a2 540c 	strh.w	r5, [r2, #1036]	; 0x40c
 8007474:	e7ce      	b.n	8007414 <USB_ActivateEndpoint+0x140>
 8007476:	0965      	lsrs	r5, r4, #5
 8007478:	f014 0f1f 	tst.w	r4, #31
 800747c:	d100      	bne.n	8007480 <USB_ActivateEndpoint+0x1ac>
 800747e:	3d01      	subs	r5, #1
 8007480:	ea6f 64c5 	mvn.w	r4, r5, lsl #27
 8007484:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8007488:	b2a4      	uxth	r4, r4
 800748a:	f8a2 440c 	strh.w	r4, [r2, #1036]	; 0x40c
 800748e:	e7c1      	b.n	8007414 <USB_ActivateEndpoint+0x140>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8007490:	780c      	ldrb	r4, [r1, #0]
 8007492:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007496:	b292      	uxth	r2, r2
 8007498:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800749c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80074a0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80074a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074a8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80074ac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80074b0:	b292      	uxth	r2, r2
 80074b2:	441a      	add	r2, r3
 80074b4:	780c      	ldrb	r4, [r1, #0]
 80074b6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80074ba:	890c      	ldrh	r4, [r1, #8]
 80074bc:	0864      	lsrs	r4, r4, #1
 80074be:	0064      	lsls	r4, r4, #1
 80074c0:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
 80074c4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80074c8:	b292      	uxth	r2, r2
 80074ca:	441a      	add	r2, r3
 80074cc:	780c      	ldrb	r4, [r1, #0]
 80074ce:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80074d2:	894c      	ldrh	r4, [r1, #10]
 80074d4:	0864      	lsrs	r4, r4, #1
 80074d6:	0064      	lsls	r4, r4, #1
 80074d8:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
    if (ep->is_in == 0U)
 80074dc:	784a      	ldrb	r2, [r1, #1]
 80074de:	2a00      	cmp	r2, #0
 80074e0:	d140      	bne.n	8007564 <USB_ActivateEndpoint+0x290>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80074e2:	780c      	ldrb	r4, [r1, #0]
 80074e4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80074e8:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80074ec:	d00c      	beq.n	8007508 <USB_ActivateEndpoint+0x234>
 80074ee:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80074f2:	b292      	uxth	r2, r2
 80074f4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80074f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80074fc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007504:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007508:	780c      	ldrb	r4, [r1, #0]
 800750a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800750e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007512:	d00c      	beq.n	800752e <USB_ActivateEndpoint+0x25a>
 8007514:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007518:	b292      	uxth	r2, r2
 800751a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800751e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007526:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800752a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800752e:	780d      	ldrb	r5, [r1, #0]
 8007530:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8007534:	b292      	uxth	r2, r2
 8007536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800753a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800753e:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8007542:	f248 0480 	movw	r4, #32896	; 0x8080
 8007546:	4322      	orrs	r2, r4
 8007548:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800754c:	7809      	ldrb	r1, [r1, #0]
 800754e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8007552:	b292      	uxth	r2, r2
 8007554:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755c:	4322      	orrs	r2, r4
 800755e:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8007562:	e77a      	b.n	800745a <USB_ActivateEndpoint+0x186>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007564:	780c      	ldrb	r4, [r1, #0]
 8007566:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800756a:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800756e:	d00c      	beq.n	800758a <USB_ActivateEndpoint+0x2b6>
 8007570:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007574:	b292      	uxth	r2, r2
 8007576:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800757a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800757e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007586:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800758a:	780c      	ldrb	r4, [r1, #0]
 800758c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8007590:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007594:	d00c      	beq.n	80075b0 <USB_ActivateEndpoint+0x2dc>
 8007596:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800759a:	b292      	uxth	r2, r2
 800759c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80075a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80075a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075a8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80075ac:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 80075b0:	78ca      	ldrb	r2, [r1, #3]
 80075b2:	2a01      	cmp	r2, #1
 80075b4:	d01e      	beq.n	80075f4 <USB_ActivateEndpoint+0x320>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80075b6:	780c      	ldrb	r4, [r1, #0]
 80075b8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80075bc:	b292      	uxth	r2, r2
 80075be:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80075c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c6:	f082 0220 	eor.w	r2, r2, #32
 80075ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075d2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80075d6:	7809      	ldrb	r1, [r1, #0]
 80075d8:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80075dc:	b292      	uxth	r2, r2
 80075de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80075e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075ee:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80075f2:	e732      	b.n	800745a <USB_ActivateEndpoint+0x186>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075f4:	780c      	ldrb	r4, [r1, #0]
 80075f6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80075fa:	b292      	uxth	r2, r2
 80075fc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007608:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800760c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8007610:	e7e1      	b.n	80075d6 <USB_ActivateEndpoint+0x302>

08007612 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007612:	7b0b      	ldrb	r3, [r1, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d146      	bne.n	80076a6 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8007618:	784b      	ldrb	r3, [r1, #1]
 800761a:	b313      	cbz	r3, 8007662 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800761c:	780a      	ldrb	r2, [r1, #0]
 800761e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007622:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007626:	d00c      	beq.n	8007642 <USB_DeactivateEndpoint+0x30>
 8007628:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800763e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007642:	780a      	ldrb	r2, [r1, #0]
 8007644:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007648:	b29b      	uxth	r3, r3
 800764a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800764e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 800765e:	2000      	movs	r0, #0
 8007660:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007662:	780a      	ldrb	r2, [r1, #0]
 8007664:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007668:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800766c:	d00c      	beq.n	8007688 <USB_DeactivateEndpoint+0x76>
 800766e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007672:	b29b      	uxth	r3, r3
 8007674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007684:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007688:	780a      	ldrb	r2, [r1, #0]
 800768a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800768e:	b29b      	uxth	r3, r3
 8007690:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800769c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80076a4:	e7db      	b.n	800765e <USB_DeactivateEndpoint+0x4c>
{
 80076a6:	b410      	push	{r4}
    if (ep->is_in == 0U)
 80076a8:	784b      	ldrb	r3, [r1, #1]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d14e      	bne.n	800774c <USB_DeactivateEndpoint+0x13a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076ae:	780a      	ldrb	r2, [r1, #0]
 80076b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076b4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80076b8:	d00c      	beq.n	80076d4 <USB_DeactivateEndpoint+0xc2>
 80076ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076be:	b29b      	uxth	r3, r3
 80076c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076d4:	780a      	ldrb	r2, [r1, #0]
 80076d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076da:	f013 0f40 	tst.w	r3, #64	; 0x40
 80076de:	d00c      	beq.n	80076fa <USB_DeactivateEndpoint+0xe8>
 80076e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076f6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80076fa:	780a      	ldrb	r2, [r1, #0]
 80076fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007700:	b29b      	uxth	r3, r3
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800770e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007712:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007716:	780b      	ldrb	r3, [r1, #0]
 8007718:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800771c:	b292      	uxth	r2, r2
 800771e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007722:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007726:	f248 0480 	movw	r4, #32896	; 0x8080
 800772a:	4322      	orrs	r2, r4
 800772c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007730:	780a      	ldrb	r2, [r1, #0]
 8007732:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007736:	b29b      	uxth	r3, r3
 8007738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800773c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007740:	4323      	orrs	r3, r4
 8007742:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8007746:	2000      	movs	r0, #0
 8007748:	bc10      	pop	{r4}
 800774a:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800774c:	780a      	ldrb	r2, [r1, #0]
 800774e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007752:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007756:	d00c      	beq.n	8007772 <USB_DeactivateEndpoint+0x160>
 8007758:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800776a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007772:	780a      	ldrb	r2, [r1, #0]
 8007774:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007778:	f013 0f40 	tst.w	r3, #64	; 0x40
 800777c:	d00c      	beq.n	8007798 <USB_DeactivateEndpoint+0x186>
 800777e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007794:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8007798:	780a      	ldrb	r2, [r1, #0]
 800779a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077b4:	780b      	ldrb	r3, [r1, #0]
 80077b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80077ba:	b292      	uxth	r2, r2
 80077bc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80077c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c4:	f248 0480 	movw	r4, #32896	; 0x8080
 80077c8:	4322      	orrs	r2, r4
 80077ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80077ce:	780a      	ldrb	r2, [r1, #0]
 80077d0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077de:	4323      	orrs	r3, r4
 80077e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80077e4:	e7af      	b.n	8007746 <USB_DeactivateEndpoint+0x134>

080077e6 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 80077e6:	784b      	ldrb	r3, [r1, #1]
 80077e8:	b18b      	cbz	r3, 800780e <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80077ea:	780a      	ldrb	r2, [r1, #0]
 80077ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fa:	f083 0310 	eor.w	r3, r3, #16
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007806:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800780a:	2000      	movs	r0, #0
 800780c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800780e:	780a      	ldrb	r2, [r1, #0]
 8007810:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800781a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800782a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800782e:	e7ec      	b.n	800780a <USB_EPSetStall+0x24>

08007830 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8007830:	7b0b      	ldrb	r3, [r1, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d14b      	bne.n	80078ce <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8007836:	784b      	ldrb	r3, [r1, #1]
 8007838:	b333      	cbz	r3, 8007888 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800783a:	780a      	ldrb	r2, [r1, #0]
 800783c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007840:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007844:	d00c      	beq.n	8007860 <USB_EPClearStall+0x30>
 8007846:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800784a:	b29b      	uxth	r3, r3
 800784c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007858:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800785c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8007860:	78cb      	ldrb	r3, [r1, #3]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d033      	beq.n	80078ce <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007866:	780a      	ldrb	r2, [r1, #0]
 8007868:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800786c:	b29b      	uxth	r3, r3
 800786e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007876:	f083 0320 	eor.w	r3, r3, #32
 800787a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800787e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007882:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8007886:	e022      	b.n	80078ce <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007888:	780a      	ldrb	r2, [r1, #0]
 800788a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800788e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007892:	d00c      	beq.n	80078ae <USB_EPClearStall+0x7e>
 8007894:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078aa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80078ae:	780a      	ldrb	r2, [r1, #0]
 80078b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078be:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80078c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80078ce:	2000      	movs	r0, #0
 80078d0:	4770      	bx	lr

080078d2 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80078d2:	b911      	cbnz	r1, 80078da <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80078d4:	2380      	movs	r3, #128	; 0x80
 80078d6:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80078da:	2000      	movs	r0, #0
 80078dc:	4770      	bx	lr

080078de <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80078de:	2000      	movs	r0, #0
 80078e0:	4770      	bx	lr

080078e2 <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80078e2:	2000      	movs	r0, #0
 80078e4:	4770      	bx	lr

080078e6 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80078e6:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80078ea:	b280      	uxth	r0, r0
 80078ec:	4770      	bx	lr

080078ee <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80078ee:	2000      	movs	r0, #0
 80078f0:	4770      	bx	lr

080078f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80078f2:	b410      	push	{r4}
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80078f4:	1c5c      	adds	r4, r3, #1
 80078f6:	0864      	lsrs	r4, r4, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80078f8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80078fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400

  for (i = n; i != 0U; i--)
 8007900:	b144      	cbz	r4, 8007914 <USB_WritePMA+0x22>
  {
    temp1 = *pBuf;
 8007902:	780b      	ldrb	r3, [r1, #0]
    pBuf++;
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007904:	7848      	ldrb	r0, [r1, #1]
    *pdwVal = (uint16_t)temp2;
 8007906:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800790a:	f822 3b04 	strh.w	r3, [r2], #4

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800790e:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8007910:	3c01      	subs	r4, #1
 8007912:	e7f5      	b.n	8007900 <USB_WritePMA+0xe>
  }
}
 8007914:	bc10      	pop	{r4}
 8007916:	4770      	bx	lr

08007918 <USB_EPStartXfer>:
{
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	4605      	mov	r5, r0
 800791c:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800791e:	784a      	ldrb	r2, [r1, #1]
 8007920:	2a01      	cmp	r2, #1
 8007922:	d037      	beq.n	8007994 <USB_EPStartXfer+0x7c>
    if (ep->doublebuffer == 0U)
 8007924:	7b0b      	ldrb	r3, [r1, #12]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 82a0 	bne.w	8007e6c <USB_EPStartXfer+0x554>
      if (ep->xfer_len > ep->maxpacket)
 800792c:	698b      	ldr	r3, [r1, #24]
 800792e:	690a      	ldr	r2, [r1, #16]
 8007930:	4293      	cmp	r3, r2
 8007932:	f240 827e 	bls.w	8007e32 <USB_EPStartXfer+0x51a>
        ep->xfer_len -= len;
 8007936:	1a9b      	subs	r3, r3, r2
 8007938:	618b      	str	r3, [r1, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800793a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800793e:	b29b      	uxth	r3, r3
 8007940:	442b      	add	r3, r5
 8007942:	7821      	ldrb	r1, [r4, #0]
 8007944:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007948:	2a00      	cmp	r2, #0
 800794a:	f040 8276 	bne.w	8007e3a <USB_EPStartXfer+0x522>
 800794e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007952:	b292      	uxth	r2, r2
 8007954:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007958:	b292      	uxth	r2, r2
 800795a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 800795e:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007962:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007966:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800796a:	b292      	uxth	r2, r2
 800796c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007970:	7822      	ldrb	r2, [r4, #0]
 8007972:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800797c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007980:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8007990:	2000      	movs	r0, #0
}
 8007992:	bd70      	pop	{r4, r5, r6, pc}
    if (ep->xfer_len > ep->maxpacket)
 8007994:	698e      	ldr	r6, [r1, #24]
 8007996:	6909      	ldr	r1, [r1, #16]
 8007998:	428e      	cmp	r6, r1
 800799a:	d900      	bls.n	800799e <USB_EPStartXfer+0x86>
      len = ep->maxpacket;
 800799c:	460e      	mov	r6, r1
    if (ep->doublebuffer == 0U)
 800799e:	7b23      	ldrb	r3, [r4, #12]
 80079a0:	b33b      	cbz	r3, 80079f2 <USB_EPStartXfer+0xda>
      if (ep->type == EP_TYPE_BULK)
 80079a2:	78e3      	ldrb	r3, [r4, #3]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d046      	beq.n	8007a36 <USB_EPStartXfer+0x11e>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079a8:	7821      	ldrb	r1, [r4, #0]
 80079aa:	f835 3021 	ldrh.w	r3, [r5, r1, lsl #2]
 80079ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079b2:	f000 81ee 	beq.w	8007d92 <USB_EPStartXfer+0x47a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	f040 81ca 	bne.w	8007d50 <USB_EPStartXfer+0x438>
 80079bc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	442b      	add	r3, r5
 80079c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80079c8:	2e00      	cmp	r6, #0
 80079ca:	f040 81a8 	bne.w	8007d1e <USB_EPStartXfer+0x406>
 80079ce:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80079d2:	b292      	uxth	r2, r2
 80079d4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80079d8:	b292      	uxth	r2, r2
 80079da:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80079de:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 80079e2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80079e6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80079ea:	b292      	uxth	r2, r2
 80079ec:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 80079f0:	e1b7      	b.n	8007d62 <USB_EPStartXfer+0x44a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80079f2:	b2b6      	uxth	r6, r6
 80079f4:	4633      	mov	r3, r6
 80079f6:	88e2      	ldrh	r2, [r4, #6]
 80079f8:	6961      	ldr	r1, [r4, #20]
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7ff ff79 	bl	80078f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a00:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	442b      	add	r3, r5
 8007a08:	7822      	ldrb	r2, [r4, #0]
 8007a0a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007a0e:	f8a3 6404 	strh.w	r6, [r3, #1028]	; 0x404
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007a12:	7822      	ldrb	r2, [r4, #0]
 8007a14:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a22:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8007a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a2e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 8007a32:	2000      	movs	r0, #0
 8007a34:	e7ad      	b.n	8007992 <USB_EPStartXfer+0x7a>
        if (ep->xfer_len_db > ep->maxpacket)
 8007a36:	6a23      	ldr	r3, [r4, #32]
 8007a38:	4299      	cmp	r1, r3
 8007a3a:	f080 8152 	bcs.w	8007ce2 <USB_EPStartXfer+0x3ca>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007a3e:	7822      	ldrb	r2, [r4, #0]
 8007a40:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a56:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
          ep->xfer_len_db -= len;
 8007a5a:	6a23      	ldr	r3, [r4, #32]
 8007a5c:	1b9b      	subs	r3, r3, r6
 8007a5e:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a60:	7823      	ldrb	r3, [r4, #0]
 8007a62:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
 8007a66:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a6a:	f000 809d 	beq.w	8007ba8 <USB_EPStartXfer+0x290>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a6e:	7862      	ldrb	r2, [r4, #1]
 8007a70:	bb8a      	cbnz	r2, 8007ad6 <USB_EPStartXfer+0x1be>
 8007a72:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007a76:	b292      	uxth	r2, r2
 8007a78:	442a      	add	r2, r5
 8007a7a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007a7e:	b98e      	cbnz	r6, 8007aa4 <USB_EPStartXfer+0x18c>
 8007a80:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007a84:	b292      	uxth	r2, r2
 8007a86:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007a8a:	b292      	uxth	r2, r2
 8007a8c:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007a90:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007a94:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007a98:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007a9c:	b292      	uxth	r2, r2
 8007a9e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007aa2:	e01a      	b.n	8007ada <USB_EPStartXfer+0x1c2>
 8007aa4:	2e3e      	cmp	r6, #62	; 0x3e
 8007aa6:	d809      	bhi.n	8007abc <USB_EPStartXfer+0x1a4>
 8007aa8:	0872      	lsrs	r2, r6, #1
 8007aaa:	f016 0f01 	tst.w	r6, #1
 8007aae:	d000      	beq.n	8007ab2 <USB_EPStartXfer+0x19a>
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	0292      	lsls	r2, r2, #10
 8007ab4:	b292      	uxth	r2, r2
 8007ab6:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007aba:	e00e      	b.n	8007ada <USB_EPStartXfer+0x1c2>
 8007abc:	0972      	lsrs	r2, r6, #5
 8007abe:	f016 0f1f 	tst.w	r6, #31
 8007ac2:	d100      	bne.n	8007ac6 <USB_EPStartXfer+0x1ae>
 8007ac4:	3a01      	subs	r2, #1
 8007ac6:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007aca:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007ad4:	e001      	b.n	8007ada <USB_EPStartXfer+0x1c2>
 8007ad6:	2a01      	cmp	r2, #1
 8007ad8:	d02b      	beq.n	8007b32 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ada:	b2b3      	uxth	r3, r6
 8007adc:	8962      	ldrh	r2, [r4, #10]
 8007ade:	6961      	ldr	r1, [r4, #20]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff ff06 	bl	80078f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007ae6:	6963      	ldr	r3, [r4, #20]
 8007ae8:	4433      	add	r3, r6
 8007aea:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007aec:	6a23      	ldr	r3, [r4, #32]
 8007aee:	6922      	ldr	r2, [r4, #16]
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d928      	bls.n	8007b46 <USB_EPStartXfer+0x22e>
              ep->xfer_len_db -= len;
 8007af4:	1b9b      	subs	r3, r3, r6
 8007af6:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007af8:	7863      	ldrb	r3, [r4, #1]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d140      	bne.n	8007b80 <USB_EPStartXfer+0x268>
 8007afe:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	442b      	add	r3, r5
 8007b06:	7822      	ldrb	r2, [r4, #0]
 8007b08:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007b0c:	b9fe      	cbnz	r6, 8007b4e <USB_EPStartXfer+0x236>
 8007b0e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007b12:	b292      	uxth	r2, r2
 8007b14:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007b18:	b292      	uxth	r2, r2
 8007b1a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007b1e:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007b22:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007b26:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007b2a:	b292      	uxth	r2, r2
 8007b2c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007b30:	e028      	b.n	8007b84 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b32:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007b36:	b292      	uxth	r2, r2
 8007b38:	442a      	add	r2, r5
 8007b3a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007b3e:	b2b2      	uxth	r2, r6
 8007b40:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007b44:	e7c9      	b.n	8007ada <USB_EPStartXfer+0x1c2>
              ep->xfer_len_db = 0U;
 8007b46:	2200      	movs	r2, #0
 8007b48:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007b4a:	461e      	mov	r6, r3
 8007b4c:	e7d4      	b.n	8007af8 <USB_EPStartXfer+0x1e0>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b4e:	2e3e      	cmp	r6, #62	; 0x3e
 8007b50:	d809      	bhi.n	8007b66 <USB_EPStartXfer+0x24e>
 8007b52:	0872      	lsrs	r2, r6, #1
 8007b54:	f016 0f01 	tst.w	r6, #1
 8007b58:	d000      	beq.n	8007b5c <USB_EPStartXfer+0x244>
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	0292      	lsls	r2, r2, #10
 8007b5e:	b292      	uxth	r2, r2
 8007b60:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007b64:	e00e      	b.n	8007b84 <USB_EPStartXfer+0x26c>
 8007b66:	0972      	lsrs	r2, r6, #5
 8007b68:	f016 0f1f 	tst.w	r6, #31
 8007b6c:	d100      	bne.n	8007b70 <USB_EPStartXfer+0x258>
 8007b6e:	3a01      	subs	r2, #1
 8007b70:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007b74:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007b78:	b292      	uxth	r2, r2
 8007b7a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007b7e:	e001      	b.n	8007b84 <USB_EPStartXfer+0x26c>
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d006      	beq.n	8007b92 <USB_EPStartXfer+0x27a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b84:	b2b3      	uxth	r3, r6
 8007b86:	8922      	ldrh	r2, [r4, #8]
 8007b88:	6961      	ldr	r1, [r4, #20]
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	f7ff feb1 	bl	80078f2 <USB_WritePMA>
 8007b90:	e73f      	b.n	8007a12 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b92:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	442b      	add	r3, r5
 8007b9a:	7822      	ldrb	r2, [r4, #0]
 8007b9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007ba0:	b2b2      	uxth	r2, r6
 8007ba2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007ba6:	e7ed      	b.n	8007b84 <USB_EPStartXfer+0x26c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ba8:	7862      	ldrb	r2, [r4, #1]
 8007baa:	bb8a      	cbnz	r2, 8007c10 <USB_EPStartXfer+0x2f8>
 8007bac:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007bb0:	b292      	uxth	r2, r2
 8007bb2:	442a      	add	r2, r5
 8007bb4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007bb8:	b98e      	cbnz	r6, 8007bde <USB_EPStartXfer+0x2c6>
 8007bba:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007bbe:	b292      	uxth	r2, r2
 8007bc0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007bc4:	b292      	uxth	r2, r2
 8007bc6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007bca:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007bce:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007bd2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007bd6:	b292      	uxth	r2, r2
 8007bd8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007bdc:	e01a      	b.n	8007c14 <USB_EPStartXfer+0x2fc>
 8007bde:	2e3e      	cmp	r6, #62	; 0x3e
 8007be0:	d809      	bhi.n	8007bf6 <USB_EPStartXfer+0x2de>
 8007be2:	0872      	lsrs	r2, r6, #1
 8007be4:	f016 0f01 	tst.w	r6, #1
 8007be8:	d000      	beq.n	8007bec <USB_EPStartXfer+0x2d4>
 8007bea:	3201      	adds	r2, #1
 8007bec:	0292      	lsls	r2, r2, #10
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007bf4:	e00e      	b.n	8007c14 <USB_EPStartXfer+0x2fc>
 8007bf6:	0972      	lsrs	r2, r6, #5
 8007bf8:	f016 0f1f 	tst.w	r6, #31
 8007bfc:	d100      	bne.n	8007c00 <USB_EPStartXfer+0x2e8>
 8007bfe:	3a01      	subs	r2, #1
 8007c00:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007c04:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c08:	b292      	uxth	r2, r2
 8007c0a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007c0e:	e001      	b.n	8007c14 <USB_EPStartXfer+0x2fc>
 8007c10:	2a01      	cmp	r2, #1
 8007c12:	d02b      	beq.n	8007c6c <USB_EPStartXfer+0x354>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c14:	b2b3      	uxth	r3, r6
 8007c16:	8922      	ldrh	r2, [r4, #8]
 8007c18:	6961      	ldr	r1, [r4, #20]
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7ff fe69 	bl	80078f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c20:	6963      	ldr	r3, [r4, #20]
 8007c22:	4433      	add	r3, r6
 8007c24:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007c26:	6a23      	ldr	r3, [r4, #32]
 8007c28:	6922      	ldr	r2, [r4, #16]
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d928      	bls.n	8007c80 <USB_EPStartXfer+0x368>
              ep->xfer_len_db -= len;
 8007c2e:	1b9b      	subs	r3, r3, r6
 8007c30:	6223      	str	r3, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c32:	7863      	ldrb	r3, [r4, #1]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d140      	bne.n	8007cba <USB_EPStartXfer+0x3a2>
 8007c38:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	442b      	add	r3, r5
 8007c40:	7822      	ldrb	r2, [r4, #0]
 8007c42:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007c46:	b9fe      	cbnz	r6, 8007c88 <USB_EPStartXfer+0x370>
 8007c48:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007c4c:	b292      	uxth	r2, r2
 8007c4e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007c52:	b292      	uxth	r2, r2
 8007c54:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007c58:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007c5c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007c60:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007c64:	b292      	uxth	r2, r2
 8007c66:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007c6a:	e028      	b.n	8007cbe <USB_EPStartXfer+0x3a6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c6c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007c70:	b292      	uxth	r2, r2
 8007c72:	442a      	add	r2, r5
 8007c74:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007c78:	b2b2      	uxth	r2, r6
 8007c7a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007c7e:	e7c9      	b.n	8007c14 <USB_EPStartXfer+0x2fc>
              ep->xfer_len_db = 0U;
 8007c80:	2200      	movs	r2, #0
 8007c82:	6222      	str	r2, [r4, #32]
              len = ep->xfer_len_db;
 8007c84:	461e      	mov	r6, r3
 8007c86:	e7d4      	b.n	8007c32 <USB_EPStartXfer+0x31a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c88:	2e3e      	cmp	r6, #62	; 0x3e
 8007c8a:	d809      	bhi.n	8007ca0 <USB_EPStartXfer+0x388>
 8007c8c:	0872      	lsrs	r2, r6, #1
 8007c8e:	f016 0f01 	tst.w	r6, #1
 8007c92:	d000      	beq.n	8007c96 <USB_EPStartXfer+0x37e>
 8007c94:	3201      	adds	r2, #1
 8007c96:	0292      	lsls	r2, r2, #10
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007c9e:	e00e      	b.n	8007cbe <USB_EPStartXfer+0x3a6>
 8007ca0:	0972      	lsrs	r2, r6, #5
 8007ca2:	f016 0f1f 	tst.w	r6, #31
 8007ca6:	d100      	bne.n	8007caa <USB_EPStartXfer+0x392>
 8007ca8:	3a01      	subs	r2, #1
 8007caa:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007cae:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007cb8:	e001      	b.n	8007cbe <USB_EPStartXfer+0x3a6>
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d006      	beq.n	8007ccc <USB_EPStartXfer+0x3b4>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cbe:	b2b3      	uxth	r3, r6
 8007cc0:	8962      	ldrh	r2, [r4, #10]
 8007cc2:	6961      	ldr	r1, [r4, #20]
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f7ff fe14 	bl	80078f2 <USB_WritePMA>
 8007cca:	e6a2      	b.n	8007a12 <USB_EPStartXfer+0xfa>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ccc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	442b      	add	r3, r5
 8007cd4:	7822      	ldrb	r2, [r4, #0]
 8007cd6:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007cda:	b2b2      	uxth	r2, r6
 8007cdc:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007ce0:	e7ed      	b.n	8007cbe <USB_EPStartXfer+0x3a6>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007ce2:	7821      	ldrb	r1, [r4, #0]
 8007ce4:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
 8007ce8:	b292      	uxth	r2, r2
 8007cea:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cfa:	f825 2021 	strh.w	r2, [r5, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007cfe:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007d02:	b292      	uxth	r2, r2
 8007d04:	442a      	add	r2, r5
 8007d06:	7821      	ldrb	r1, [r4, #0]
 8007d08:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f8a2 3404 	strh.w	r3, [r2, #1028]	; 0x404
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d12:	8922      	ldrh	r2, [r4, #8]
 8007d14:	6961      	ldr	r1, [r4, #20]
 8007d16:	4628      	mov	r0, r5
 8007d18:	f7ff fdeb 	bl	80078f2 <USB_WritePMA>
 8007d1c:	e679      	b.n	8007a12 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d1e:	2e3e      	cmp	r6, #62	; 0x3e
 8007d20:	d809      	bhi.n	8007d36 <USB_EPStartXfer+0x41e>
 8007d22:	0872      	lsrs	r2, r6, #1
 8007d24:	f016 0f01 	tst.w	r6, #1
 8007d28:	d000      	beq.n	8007d2c <USB_EPStartXfer+0x414>
 8007d2a:	3201      	adds	r2, #1
 8007d2c:	0292      	lsls	r2, r2, #10
 8007d2e:	b292      	uxth	r2, r2
 8007d30:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007d34:	e015      	b.n	8007d62 <USB_EPStartXfer+0x44a>
 8007d36:	0972      	lsrs	r2, r6, #5
 8007d38:	f016 0f1f 	tst.w	r6, #31
 8007d3c:	d100      	bne.n	8007d40 <USB_EPStartXfer+0x428>
 8007d3e:	3a01      	subs	r2, #1
 8007d40:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007d44:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007d48:	b292      	uxth	r2, r2
 8007d4a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007d4e:	e008      	b.n	8007d62 <USB_EPStartXfer+0x44a>
 8007d50:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	442b      	add	r3, r5
 8007d58:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007d5c:	b2b2      	uxth	r2, r6
 8007d5e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
          pmabuffer = ep->pmaaddr1;
 8007d62:	8962      	ldrh	r2, [r4, #10]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d64:	b2b3      	uxth	r3, r6
 8007d66:	6961      	ldr	r1, [r4, #20]
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f7ff fdc2 	bl	80078f2 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007d6e:	7863      	ldrb	r3, [r4, #1]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d14c      	bne.n	8007e0e <USB_EPStartXfer+0x4f6>
 8007d74:	7822      	ldrb	r2, [r4, #0]
 8007d76:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d8c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007d90:	e63f      	b.n	8007a12 <USB_EPStartXfer+0xfa>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d92:	bb8a      	cbnz	r2, 8007df8 <USB_EPStartXfer+0x4e0>
 8007d94:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	442b      	add	r3, r5
 8007d9c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007da0:	b98e      	cbnz	r6, 8007dc6 <USB_EPStartXfer+0x4ae>
 8007da2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007da6:	b292      	uxth	r2, r2
 8007da8:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007dac:	b292      	uxth	r2, r2
 8007dae:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007db2:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007db6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007dba:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007dbe:	b292      	uxth	r2, r2
 8007dc0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007dc4:	e021      	b.n	8007e0a <USB_EPStartXfer+0x4f2>
 8007dc6:	2e3e      	cmp	r6, #62	; 0x3e
 8007dc8:	d809      	bhi.n	8007dde <USB_EPStartXfer+0x4c6>
 8007dca:	0872      	lsrs	r2, r6, #1
 8007dcc:	f016 0f01 	tst.w	r6, #1
 8007dd0:	d000      	beq.n	8007dd4 <USB_EPStartXfer+0x4bc>
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	0292      	lsls	r2, r2, #10
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007ddc:	e015      	b.n	8007e0a <USB_EPStartXfer+0x4f2>
 8007dde:	0972      	lsrs	r2, r6, #5
 8007de0:	f016 0f1f 	tst.w	r6, #31
 8007de4:	d100      	bne.n	8007de8 <USB_EPStartXfer+0x4d0>
 8007de6:	3a01      	subs	r2, #1
 8007de8:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8007dec:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007df0:	b292      	uxth	r2, r2
 8007df2:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007df6:	e008      	b.n	8007e0a <USB_EPStartXfer+0x4f2>
 8007df8:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	442b      	add	r3, r5
 8007e00:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007e04:	b2b2      	uxth	r2, r6
 8007e06:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
          pmabuffer = ep->pmaaddr0;
 8007e0a:	8922      	ldrh	r2, [r4, #8]
 8007e0c:	e7aa      	b.n	8007d64 <USB_EPStartXfer+0x44c>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	f47f adff 	bne.w	8007a12 <USB_EPStartXfer+0xfa>
 8007e14:	7822      	ldrb	r2, [r4, #0]
 8007e16:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e2c:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8007e30:	e5ef      	b.n	8007a12 <USB_EPStartXfer+0xfa>
        ep->xfer_len = 0U;
 8007e32:	2200      	movs	r2, #0
 8007e34:	618a      	str	r2, [r1, #24]
        len = ep->xfer_len;
 8007e36:	461a      	mov	r2, r3
 8007e38:	e57f      	b.n	800793a <USB_EPStartXfer+0x22>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007e3a:	2a3e      	cmp	r2, #62	; 0x3e
 8007e3c:	d809      	bhi.n	8007e52 <USB_EPStartXfer+0x53a>
 8007e3e:	0851      	lsrs	r1, r2, #1
 8007e40:	f012 0f01 	tst.w	r2, #1
 8007e44:	d000      	beq.n	8007e48 <USB_EPStartXfer+0x530>
 8007e46:	3101      	adds	r1, #1
 8007e48:	0289      	lsls	r1, r1, #10
 8007e4a:	b289      	uxth	r1, r1
 8007e4c:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8007e50:	e58e      	b.n	8007970 <USB_EPStartXfer+0x58>
 8007e52:	0951      	lsrs	r1, r2, #5
 8007e54:	f012 0f1f 	tst.w	r2, #31
 8007e58:	d100      	bne.n	8007e5c <USB_EPStartXfer+0x544>
 8007e5a:	3901      	subs	r1, #1
 8007e5c:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8007e60:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007e64:	b289      	uxth	r1, r1
 8007e66:	f8a3 140c 	strh.w	r1, [r3, #1036]	; 0x40c
 8007e6a:	e581      	b.n	8007970 <USB_EPStartXfer+0x58>
      if (ep->type == EP_TYPE_BULK)
 8007e6c:	78cb      	ldrb	r3, [r1, #3]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d045      	beq.n	8007efe <USB_EPStartXfer+0x5e6>
      else if (ep->type == EP_TYPE_ISOC)
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	f040 811d 	bne.w	80080b2 <USB_EPStartXfer+0x79a>
        if (ep->xfer_len > ep->maxpacket)
 8007e78:	6989      	ldr	r1, [r1, #24]
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	4299      	cmp	r1, r3
 8007e7e:	f240 80d4 	bls.w	800802a <USB_EPStartXfer+0x712>
          ep->xfer_len -= len;
 8007e82:	1ac9      	subs	r1, r1, r3
 8007e84:	61a1      	str	r1, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007e86:	b9d2      	cbnz	r2, 8007ebe <USB_EPStartXfer+0x5a6>
 8007e88:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007e8c:	b292      	uxth	r2, r2
 8007e8e:	442a      	add	r2, r5
 8007e90:	7821      	ldrb	r1, [r4, #0]
 8007e92:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 80cb 	bne.w	8008032 <USB_EPStartXfer+0x71a>
 8007e9c:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8007ea0:	b289      	uxth	r1, r1
 8007ea2:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007ea6:	b289      	uxth	r1, r1
 8007ea8:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8007eac:	f8b2 1404 	ldrh.w	r1, [r2, #1028]	; 0x404
 8007eb0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007eb4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007eb8:	b289      	uxth	r1, r1
 8007eba:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8007ebe:	7862      	ldrb	r2, [r4, #1]
 8007ec0:	2a00      	cmp	r2, #0
 8007ec2:	f040 80e8 	bne.w	8008096 <USB_EPStartXfer+0x77e>
 8007ec6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8007eca:	b292      	uxth	r2, r2
 8007ecc:	442a      	add	r2, r5
 8007ece:	7821      	ldrb	r1, [r4, #0]
 8007ed0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f040 80c5 	bne.w	8008064 <USB_EPStartXfer+0x74c>
 8007eda:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8007eea:	f8b2 340c 	ldrh.w	r3, [r2, #1036]	; 0x40c
 8007eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8007efc:	e538      	b.n	8007970 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007efe:	b9ca      	cbnz	r2, 8007f34 <USB_EPStartXfer+0x61c>
 8007f00:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	4403      	add	r3, r0
 8007f08:	780a      	ldrb	r2, [r1, #0]
 8007f0a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007f0e:	690a      	ldr	r2, [r1, #16]
 8007f10:	bb72      	cbnz	r2, 8007f70 <USB_EPStartXfer+0x658>
 8007f12:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007f16:	b292      	uxth	r2, r2
 8007f18:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007f1c:	b292      	uxth	r2, r2
 8007f1e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007f22:	f8b3 2404 	ldrh.w	r2, [r3, #1028]	; 0x404
 8007f26:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007f2a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007f2e:	b292      	uxth	r2, r2
 8007f30:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007f34:	7863      	ldrb	r3, [r4, #1]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d14c      	bne.n	8007fd4 <USB_EPStartXfer+0x6bc>
 8007f3a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	442b      	add	r3, r5
 8007f42:	7822      	ldrb	r2, [r4, #0]
 8007f44:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007f48:	6922      	ldr	r2, [r4, #16]
 8007f4a:	bb52      	cbnz	r2, 8007fa2 <USB_EPStartXfer+0x68a>
 8007f4c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007f50:	b292      	uxth	r2, r2
 8007f52:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007f56:	b292      	uxth	r2, r2
 8007f58:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007f5c:	f8b3 240c 	ldrh.w	r2, [r3, #1036]	; 0x40c
 8007f60:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007f64:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007f68:	b292      	uxth	r2, r2
 8007f6a:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007f6e:	e033      	b.n	8007fd8 <USB_EPStartXfer+0x6c0>
 8007f70:	2a3e      	cmp	r2, #62	; 0x3e
 8007f72:	d809      	bhi.n	8007f88 <USB_EPStartXfer+0x670>
 8007f74:	0851      	lsrs	r1, r2, #1
 8007f76:	f012 0f01 	tst.w	r2, #1
 8007f7a:	d000      	beq.n	8007f7e <USB_EPStartXfer+0x666>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	028a      	lsls	r2, r1, #10
 8007f80:	b292      	uxth	r2, r2
 8007f82:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007f86:	e7d5      	b.n	8007f34 <USB_EPStartXfer+0x61c>
 8007f88:	0951      	lsrs	r1, r2, #5
 8007f8a:	f012 0f1f 	tst.w	r2, #31
 8007f8e:	d100      	bne.n	8007f92 <USB_EPStartXfer+0x67a>
 8007f90:	3901      	subs	r1, #1
 8007f92:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8007f96:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007f9a:	b292      	uxth	r2, r2
 8007f9c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8007fa0:	e7c8      	b.n	8007f34 <USB_EPStartXfer+0x61c>
 8007fa2:	2a3e      	cmp	r2, #62	; 0x3e
 8007fa4:	d809      	bhi.n	8007fba <USB_EPStartXfer+0x6a2>
 8007fa6:	0851      	lsrs	r1, r2, #1
 8007fa8:	f012 0f01 	tst.w	r2, #1
 8007fac:	d000      	beq.n	8007fb0 <USB_EPStartXfer+0x698>
 8007fae:	3101      	adds	r1, #1
 8007fb0:	028a      	lsls	r2, r1, #10
 8007fb2:	b292      	uxth	r2, r2
 8007fb4:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007fb8:	e00e      	b.n	8007fd8 <USB_EPStartXfer+0x6c0>
 8007fba:	0951      	lsrs	r1, r2, #5
 8007fbc:	f012 0f1f 	tst.w	r2, #31
 8007fc0:	d100      	bne.n	8007fc4 <USB_EPStartXfer+0x6ac>
 8007fc2:	3901      	subs	r1, #1
 8007fc4:	ea6f 62c1 	mvn.w	r2, r1, lsl #27
 8007fc8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007fcc:	b292      	uxth	r2, r2
 8007fce:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8007fd2:	e001      	b.n	8007fd8 <USB_EPStartXfer+0x6c0>
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d01d      	beq.n	8008014 <USB_EPStartXfer+0x6fc>
        if (ep->xfer_count != 0U)
 8007fd8:	69e3      	ldr	r3, [r4, #28]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f43f acc8 	beq.w	8007970 <USB_EPStartXfer+0x58>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007fe0:	7822      	ldrb	r2, [r4, #0]
 8007fe2:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007fe6:	f244 0340 	movw	r3, #16448	; 0x4040
 8007fea:	ea03 0001 	and.w	r0, r3, r1
 8007fee:	438b      	bics	r3, r1
 8007ff0:	d002      	beq.n	8007ff8 <USB_EPStartXfer+0x6e0>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	f47f acbc 	bne.w	8007970 <USB_EPStartXfer+0x58>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007ff8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800800a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800800e:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8008012:	e4ad      	b.n	8007970 <USB_EPStartXfer+0x58>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008014:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8008018:	b29b      	uxth	r3, r3
 800801a:	442b      	add	r3, r5
 800801c:	7822      	ldrb	r2, [r4, #0]
 800801e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8008022:	8a22      	ldrh	r2, [r4, #16]
 8008024:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
 8008028:	e7d6      	b.n	8007fd8 <USB_EPStartXfer+0x6c0>
          ep->xfer_len = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61a3      	str	r3, [r4, #24]
          len = ep->xfer_len;
 800802e:	460b      	mov	r3, r1
 8008030:	e729      	b.n	8007e86 <USB_EPStartXfer+0x56e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008032:	2b3e      	cmp	r3, #62	; 0x3e
 8008034:	d809      	bhi.n	800804a <USB_EPStartXfer+0x732>
 8008036:	0859      	lsrs	r1, r3, #1
 8008038:	f013 0f01 	tst.w	r3, #1
 800803c:	d000      	beq.n	8008040 <USB_EPStartXfer+0x728>
 800803e:	3101      	adds	r1, #1
 8008040:	0289      	lsls	r1, r1, #10
 8008042:	b289      	uxth	r1, r1
 8008044:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8008048:	e739      	b.n	8007ebe <USB_EPStartXfer+0x5a6>
 800804a:	0959      	lsrs	r1, r3, #5
 800804c:	f013 0f1f 	tst.w	r3, #31
 8008050:	d100      	bne.n	8008054 <USB_EPStartXfer+0x73c>
 8008052:	3901      	subs	r1, #1
 8008054:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8008058:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800805c:	b289      	uxth	r1, r1
 800805e:	f8a2 1404 	strh.w	r1, [r2, #1028]	; 0x404
 8008062:	e72c      	b.n	8007ebe <USB_EPStartXfer+0x5a6>
 8008064:	2b3e      	cmp	r3, #62	; 0x3e
 8008066:	d809      	bhi.n	800807c <USB_EPStartXfer+0x764>
 8008068:	0859      	lsrs	r1, r3, #1
 800806a:	f013 0f01 	tst.w	r3, #1
 800806e:	d000      	beq.n	8008072 <USB_EPStartXfer+0x75a>
 8008070:	3101      	adds	r1, #1
 8008072:	028b      	lsls	r3, r1, #10
 8008074:	b29b      	uxth	r3, r3
 8008076:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 800807a:	e479      	b.n	8007970 <USB_EPStartXfer+0x58>
 800807c:	0959      	lsrs	r1, r3, #5
 800807e:	f013 0f1f 	tst.w	r3, #31
 8008082:	d100      	bne.n	8008086 <USB_EPStartXfer+0x76e>
 8008084:	3901      	subs	r1, #1
 8008086:	ea6f 63c1 	mvn.w	r3, r1, lsl #27
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29b      	uxth	r3, r3
 8008090:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 8008094:	e46c      	b.n	8007970 <USB_EPStartXfer+0x58>
 8008096:	2a01      	cmp	r2, #1
 8008098:	f47f ac6a 	bne.w	8007970 <USB_EPStartXfer+0x58>
 800809c:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80080a0:	b292      	uxth	r2, r2
 80080a2:	442a      	add	r2, r5
 80080a4:	7821      	ldrb	r1, [r4, #0]
 80080a6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	f8a2 340c 	strh.w	r3, [r2, #1036]	; 0x40c
 80080b0:	e45e      	b.n	8007970 <USB_EPStartXfer+0x58>
        return HAL_ERROR;
 80080b2:	2001      	movs	r0, #1
 80080b4:	e46d      	b.n	8007992 <USB_EPStartXfer+0x7a>

080080b6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080b6:	b410      	push	{r4}
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080b8:	085c      	lsrs	r4, r3, #1
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080ba:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80080be:	f500 6080 	add.w	r0, r0, #1024	; 0x400

  for (i = n; i != 0U; i--)
 80080c2:	b144      	cbz	r4, 80080d6 <USB_ReadPMA+0x20>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80080c4:	f830 2b04 	ldrh.w	r2, [r0], #4
    pdwVal++;
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080c8:	700a      	strb	r2, [r1, #0]
    pBuf++;
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80080ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80080ce:	704a      	strb	r2, [r1, #1]
    pBuf++;
 80080d0:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 80080d2:	3c01      	subs	r4, #1
 80080d4:	e7f5      	b.n	80080c2 <USB_ReadPMA+0xc>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80080d6:	f013 0f01 	tst.w	r3, #1
 80080da:	d001      	beq.n	80080e0 <USB_ReadPMA+0x2a>
  {
    temp = *pdwVal;
 80080dc:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80080de:	700b      	strb	r3, [r1, #0]
  }
}
 80080e0:	bc10      	pop	{r4}
 80080e2:	4770      	bx	lr

080080e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080e4:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080e6:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080ea:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80080ee:	b15b      	cbz	r3, 8008108 <USBD_CDC_EP0_RxReady+0x24>
 80080f0:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80080f4:	28ff      	cmp	r0, #255	; 0xff
 80080f6:	d007      	beq.n	8008108 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80080fe:	4621      	mov	r1, r4
 8008100:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8008102:	23ff      	movs	r3, #255	; 0xff
 8008104:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8008108:	2000      	movs	r0, #0
 800810a:	bd10      	pop	{r4, pc}

0800810c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800810c:	2343      	movs	r3, #67	; 0x43
 800810e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8008110:	4800      	ldr	r0, [pc, #0]	; (8008114 <USBD_CDC_GetFSCfgDesc+0x8>)
 8008112:	4770      	bx	lr
 8008114:	2000004c 	.word	0x2000004c

08008118 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008118:	2343      	movs	r3, #67	; 0x43
 800811a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800811c:	4800      	ldr	r0, [pc, #0]	; (8008120 <USBD_CDC_GetHSCfgDesc+0x8>)
 800811e:	4770      	bx	lr
 8008120:	20000090 	.word	0x20000090

08008124 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008124:	2343      	movs	r3, #67	; 0x43
 8008126:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8008128:	4800      	ldr	r0, [pc, #0]	; (800812c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800812a:	4770      	bx	lr
 800812c:	200000e0 	.word	0x200000e0

08008130 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008130:	230a      	movs	r3, #10
 8008132:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8008134:	4800      	ldr	r0, [pc, #0]	; (8008138 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8008136:	4770      	bx	lr
 8008138:	200000d4 	.word	0x200000d4

0800813c <USBD_CDC_DataOut>:
{
 800813c:	b538      	push	{r3, r4, r5, lr}
 800813e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008140:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008144:	f002 fe40 	bl	800adc8 <USBD_LL_GetRxDataSize>
 8008148:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800814c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008150:	b14b      	cbz	r3, 8008166 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008152:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800815c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 8008160:	4798      	blx	r3
    return USBD_OK;
 8008162:	2000      	movs	r0, #0
}
 8008164:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008166:	2002      	movs	r0, #2
 8008168:	e7fc      	b.n	8008164 <USBD_CDC_DataOut+0x28>

0800816a <USBD_CDC_DataIn>:
{
 800816a:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800816c:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008170:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
  if (pdev->pClassData != NULL)
 8008174:	b1f2      	cbz	r2, 80081b4 <USBD_CDC_DataIn+0x4a>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008176:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800817a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800817e:	69db      	ldr	r3, [r3, #28]
 8008180:	b14b      	cbz	r3, 8008196 <USBD_CDC_DataIn+0x2c>
 8008182:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8008186:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800818a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800818c:	fbb3 f4f5 	udiv	r4, r3, r5
 8008190:	fb05 3314 	mls	r3, r5, r4, r3
 8008194:	b123      	cbz	r3, 80081a0 <USBD_CDC_DataIn+0x36>
      hcdc->TxState = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
    return USBD_OK;
 800819c:	2000      	movs	r0, #0
}
 800819e:	bd38      	pop	{r3, r4, r5, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80081a0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80081a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80081a8:	2200      	movs	r2, #0
 80081aa:	61da      	str	r2, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081ac:	4613      	mov	r3, r2
 80081ae:	f002 fdfb 	bl	800ada8 <USBD_LL_Transmit>
 80081b2:	e7f3      	b.n	800819c <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80081b4:	2002      	movs	r0, #2
 80081b6:	e7f2      	b.n	800819e <USBD_CDC_DataIn+0x34>

080081b8 <USBD_CDC_Setup>:
{
 80081b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ba:	b083      	sub	sp, #12
 80081bc:	4606      	mov	r6, r0
 80081be:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081c0:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 80081c4:	2300      	movs	r3, #0
 80081c6:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 80081ca:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ce:	780b      	ldrb	r3, [r1, #0]
 80081d0:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 80081d4:	d027      	beq.n	8008226 <USBD_CDC_Setup+0x6e>
 80081d6:	2d20      	cmp	r5, #32
 80081d8:	d153      	bne.n	8008282 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 80081da:	88ca      	ldrh	r2, [r1, #6]
 80081dc:	b1da      	cbz	r2, 8008216 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 80081de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80081e2:	d00c      	beq.n	80081fe <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081e4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	4639      	mov	r1, r7
 80081ec:	7860      	ldrb	r0, [r4, #1]
 80081ee:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80081f0:	88e2      	ldrh	r2, [r4, #6]
 80081f2:	4639      	mov	r1, r7
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 fd98 	bl	8008d2a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80081fa:	2500      	movs	r5, #0
 80081fc:	e044      	b.n	8008288 <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 80081fe:	784b      	ldrb	r3, [r1, #1]
 8008200:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008204:	798b      	ldrb	r3, [r1, #6]
 8008206:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800820a:	88ca      	ldrh	r2, [r1, #6]
 800820c:	4639      	mov	r1, r7
 800820e:	f000 fda1 	bl	8008d54 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8008212:	2500      	movs	r5, #0
 8008214:	e038      	b.n	8008288 <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008216:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	7848      	ldrb	r0, [r1, #1]
 8008220:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8008222:	2500      	movs	r5, #0
 8008224:	e030      	b.n	8008288 <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8008226:	784f      	ldrb	r7, [r1, #1]
 8008228:	2f0a      	cmp	r7, #10
 800822a:	d014      	beq.n	8008256 <USBD_CDC_Setup+0x9e>
 800822c:	2f0b      	cmp	r7, #11
 800822e:	d020      	beq.n	8008272 <USBD_CDC_Setup+0xba>
 8008230:	b11f      	cbz	r7, 800823a <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8008232:	f000 fa6e 	bl	8008712 <USBD_CtlError>
          ret = USBD_FAIL;
 8008236:	2502      	movs	r5, #2
          break;
 8008238:	e026      	b.n	8008288 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800823a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800823e:	2b03      	cmp	r3, #3
 8008240:	d003      	beq.n	800824a <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8008242:	f000 fa66 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8008246:	2502      	movs	r5, #2
 8008248:	e01e      	b.n	8008288 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800824a:	2202      	movs	r2, #2
 800824c:	a901      	add	r1, sp, #4
 800824e:	f000 fd6c 	bl	8008d2a <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8008252:	463d      	mov	r5, r7
 8008254:	e018      	b.n	8008288 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008256:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800825a:	2b03      	cmp	r3, #3
 800825c:	d003      	beq.n	8008266 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 800825e:	f000 fa58 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 8008262:	2502      	movs	r5, #2
 8008264:	e010      	b.n	8008288 <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008266:	2201      	movs	r2, #1
 8008268:	f10d 0107 	add.w	r1, sp, #7
 800826c:	f000 fd5d 	bl	8008d2a <USBD_CtlSendData>
 8008270:	e00a      	b.n	8008288 <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008272:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008276:	2b03      	cmp	r3, #3
 8008278:	d006      	beq.n	8008288 <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 800827a:	f000 fa4a 	bl	8008712 <USBD_CtlError>
            ret = USBD_FAIL;
 800827e:	2502      	movs	r5, #2
 8008280:	e002      	b.n	8008288 <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 8008282:	f000 fa46 	bl	8008712 <USBD_CtlError>
      ret = USBD_FAIL;
 8008286:	2502      	movs	r5, #2
}
 8008288:	4628      	mov	r0, r5
 800828a:	b003      	add	sp, #12
 800828c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800828e <USBD_CDC_DeInit>:
{
 800828e:	b538      	push	{r3, r4, r5, lr}
 8008290:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008292:	2181      	movs	r1, #129	; 0x81
 8008294:	f002 fd51 	bl	800ad3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008298:	2500      	movs	r5, #0
 800829a:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800829c:	2101      	movs	r1, #1
 800829e:	4620      	mov	r0, r4
 80082a0:	f002 fd4b 	bl	800ad3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80082a4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082a8:	2182      	movs	r1, #130	; 0x82
 80082aa:	4620      	mov	r0, r4
 80082ac:	f002 fd45 	bl	800ad3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082b0:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80082b2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80082b6:	b14b      	cbz	r3, 80082cc <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082b8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80082c0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80082c4:	f002 fd8a 	bl	800addc <USBD_static_free>
    pdev->pClassData = NULL;
 80082c8:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80082cc:	2000      	movs	r0, #0
 80082ce:	bd38      	pop	{r3, r4, r5, pc}

080082d0 <USBD_CDC_Init>:
{
 80082d0:	b570      	push	{r4, r5, r6, lr}
 80082d2:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082d4:	7c03      	ldrb	r3, [r0, #16]
 80082d6:	bbab      	cbnz	r3, 8008344 <USBD_CDC_Init+0x74>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082dc:	2202      	movs	r2, #2
 80082de:	2181      	movs	r1, #129	; 0x81
 80082e0:	f002 fd20 	bl	800ad24 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082e4:	2501      	movs	r5, #1
 80082e6:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082ec:	2202      	movs	r2, #2
 80082ee:	4629      	mov	r1, r5
 80082f0:	4620      	mov	r0, r4
 80082f2:	f002 fd17 	bl	800ad24 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082f6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082fa:	2308      	movs	r3, #8
 80082fc:	2203      	movs	r2, #3
 80082fe:	2182      	movs	r1, #130	; 0x82
 8008300:	4620      	mov	r0, r4
 8008302:	f002 fd0f 	bl	800ad24 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008306:	2301      	movs	r3, #1
 8008308:	6423      	str	r3, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800830a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800830e:	f002 fd61 	bl	800add4 <USBD_static_malloc>
 8008312:	4605      	mov	r5, r0
 8008314:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8008318:	b368      	cbz	r0, 8008376 <USBD_CDC_Init+0xa6>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800831a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4798      	blx	r3
    hcdc->TxState = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8008328:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800832c:	7c26      	ldrb	r6, [r4, #16]
 800832e:	b9ce      	cbnz	r6, 8008364 <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008330:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008334:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8008338:	2101      	movs	r1, #1
 800833a:	4620      	mov	r0, r4
 800833c:	f002 fd3c 	bl	800adb8 <USBD_LL_PrepareReceive>
}
 8008340:	4630      	mov	r0, r6
 8008342:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	2202      	movs	r2, #2
 8008348:	2181      	movs	r1, #129	; 0x81
 800834a:	f002 fceb 	bl	800ad24 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800834e:	2501      	movs	r5, #1
 8008350:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008352:	2340      	movs	r3, #64	; 0x40
 8008354:	2202      	movs	r2, #2
 8008356:	4629      	mov	r1, r5
 8008358:	4620      	mov	r0, r4
 800835a:	f002 fce3 	bl	800ad24 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800835e:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
 8008362:	e7ca      	b.n	80082fa <USBD_CDC_Init+0x2a>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008364:	2340      	movs	r3, #64	; 0x40
 8008366:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800836a:	2101      	movs	r1, #1
 800836c:	4620      	mov	r0, r4
 800836e:	f002 fd23 	bl	800adb8 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008372:	2600      	movs	r6, #0
 8008374:	e7e4      	b.n	8008340 <USBD_CDC_Init+0x70>
    ret = 1U;
 8008376:	2601      	movs	r6, #1
 8008378:	e7e2      	b.n	8008340 <USBD_CDC_Init+0x70>

0800837a <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 800837a:	b119      	cbz	r1, 8008384 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 800837c:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8008380:	2000      	movs	r0, #0
 8008382:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8008384:	2002      	movs	r0, #2
  }

  return ret;
}
 8008386:	4770      	bx	lr

08008388 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008388:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 800838c:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008390:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8008394:	2000      	movs	r0, #0
 8008396:	4770      	bx	lr

08008398 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008398:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 800839c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 80083a0:	2000      	movs	r0, #0
 80083a2:	4770      	bx	lr

080083a4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083a4:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 80083a8:	b1a2      	cbz	r2, 80083d4 <USBD_CDC_TransmitPacket+0x30>
{
 80083aa:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 80083ac:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80083b0:	b10b      	cbz	r3, 80083b6 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80083b2:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80083b4:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80083bc:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 80083c0:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80083c2:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80083c6:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80083ca:	2181      	movs	r1, #129	; 0x81
 80083cc:	f002 fcec 	bl	800ada8 <USBD_LL_Transmit>
      return USBD_OK;
 80083d0:	2000      	movs	r0, #0
 80083d2:	e7ef      	b.n	80083b4 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80083d4:	2002      	movs	r0, #2
}
 80083d6:	4770      	bx	lr

080083d8 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083d8:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80083dc:	b192      	cbz	r2, 8008404 <USBD_CDC_ReceivePacket+0x2c>
{
 80083de:	b508      	push	{r3, lr}
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083e0:	7c03      	ldrb	r3, [r0, #16]
 80083e2:	b943      	cbnz	r3, 80083f6 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083e8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80083ec:	2101      	movs	r1, #1
 80083ee:	f002 fce3 	bl	800adb8 <USBD_LL_PrepareReceive>
      USBD_LL_PrepareReceive(pdev,
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083f2:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80083f4:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80083f6:	2340      	movs	r3, #64	; 0x40
 80083f8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80083fc:	2101      	movs	r1, #1
 80083fe:	f002 fcdb 	bl	800adb8 <USBD_LL_PrepareReceive>
 8008402:	e7f6      	b.n	80083f2 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8008404:	2002      	movs	r0, #2
}
 8008406:	4770      	bx	lr

08008408 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008408:	b198      	cbz	r0, 8008432 <USBD_Init+0x2a>
{
 800840a:	b508      	push	{r3, lr}
 800840c:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800840e:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8008412:	b110      	cbz	r0, 800841a <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8008414:	2000      	movs	r0, #0
 8008416:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800841a:	b109      	cbz	r1, 8008420 <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800841c:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008420:	2101      	movs	r1, #1
 8008422:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8008426:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008428:	4618      	mov	r0, r3
 800842a:	f002 fc31 	bl	800ac90 <USBD_LL_Init>

  return USBD_OK;
 800842e:	2000      	movs	r0, #0
}
 8008430:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8008432:	2002      	movs	r0, #2
}
 8008434:	4770      	bx	lr

08008436 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8008436:	b119      	cbz	r1, 8008440 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008438:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800843c:	2000      	movs	r0, #0
 800843e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008440:	2002      	movs	r0, #2
  }

  return status;
}
 8008442:	4770      	bx	lr

08008444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008444:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008446:	f002 fc65 	bl	800ad14 <USBD_LL_Start>

  return USBD_OK;
}
 800844a:	2000      	movs	r0, #0
 800844c:	bd08      	pop	{r3, pc}

0800844e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800844e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8008450:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008454:	b12b      	cbz	r3, 8008462 <USBD_SetClassConfig+0x14>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4798      	blx	r3
 800845a:	b900      	cbnz	r0, 800845e <USBD_SetClassConfig+0x10>
      ret = USBD_OK;
    }
  }

  return ret;
}
 800845c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800845e:	2002      	movs	r0, #2
 8008460:	e7fc      	b.n	800845c <USBD_SetClassConfig+0xe>
 8008462:	2002      	movs	r0, #2
 8008464:	e7fa      	b.n	800845c <USBD_SetClassConfig+0xe>

08008466 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008466:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008468:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	4798      	blx	r3

  return USBD_OK;
}
 8008470:	2000      	movs	r0, #0
 8008472:	bd08      	pop	{r3, pc}

08008474 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008478:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f934 	bl	80086ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008482:	2301      	movs	r3, #1
 8008484:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008488:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 800848c:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008490:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8008494:	f001 031f 	and.w	r3, r1, #31
 8008498:	2b01      	cmp	r3, #1
 800849a:	d00e      	beq.n	80084ba <USBD_LL_SetupStage+0x46>
 800849c:	2b02      	cmp	r3, #2
 800849e:	d011      	beq.n	80084c4 <USBD_LL_SetupStage+0x50>
 80084a0:	b12b      	cbz	r3, 80084ae <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80084a6:	4620      	mov	r0, r4
 80084a8:	f002 fc4f 	bl	800ad4a <USBD_LL_StallEP>
      break;
 80084ac:	e003      	b.n	80084b6 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 80084ae:	4629      	mov	r1, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 fac9 	bl	8008a48 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 80084b6:	2000      	movs	r0, #0
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80084ba:	4629      	mov	r1, r5
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 faf7 	bl	8008ab0 <USBD_StdItfReq>
      break;
 80084c2:	e7f8      	b.n	80084b6 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 80084c4:	4629      	mov	r1, r5
 80084c6:	4620      	mov	r0, r4
 80084c8:	f000 fb22 	bl	8008b10 <USBD_StdEPReq>
      break;
 80084cc:	e7f3      	b.n	80084b6 <USBD_LL_SetupStage+0x42>

080084ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084ce:	b538      	push	{r3, r4, r5, lr}
 80084d0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80084d2:	460d      	mov	r5, r1
 80084d4:	bb91      	cbnz	r1, 800853c <USBD_LL_DataOutStage+0x6e>
 80084d6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084d8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80084dc:	2a03      	cmp	r2, #3
 80084de:	d003      	beq.n	80084e8 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80084e0:	2a05      	cmp	r2, #5
 80084e2:	d024      	beq.n	800852e <USBD_LL_DataOutStage+0x60>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80084e4:	4608      	mov	r0, r1
 80084e6:	e033      	b.n	8008550 <USBD_LL_DataOutStage+0x82>
      if (pep->rem_length > pep->maxpacket)
 80084e8:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 80084ec:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 80084f0:	4291      	cmp	r1, r2
 80084f2:	d90d      	bls.n	8008510 <USBD_LL_DataOutStage+0x42>
        pep->rem_length -= pep->maxpacket;
 80084f4:	1a89      	subs	r1, r1, r2
 80084f6:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80084fa:	428a      	cmp	r2, r1
 80084fc:	d906      	bls.n	800850c <USBD_LL_DataOutStage+0x3e>
 80084fe:	b28a      	uxth	r2, r1
 8008500:	4619      	mov	r1, r3
 8008502:	4620      	mov	r0, r4
 8008504:	f000 fc35 	bl	8008d72 <USBD_CtlContinueRx>
  return USBD_OK;
 8008508:	4628      	mov	r0, r5
 800850a:	e021      	b.n	8008550 <USBD_LL_DataOutStage+0x82>
        USBD_CtlContinueRx(pdev, pdata,
 800850c:	b292      	uxth	r2, r2
 800850e:	e7f7      	b.n	8008500 <USBD_LL_DataOutStage+0x32>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008510:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	b11b      	cbz	r3, 8008520 <USBD_LL_DataOutStage+0x52>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008518:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800851c:	2a03      	cmp	r2, #3
 800851e:	d004      	beq.n	800852a <USBD_LL_DataOutStage+0x5c>
        USBD_CtlSendStatus(pdev);
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fc2e 	bl	8008d82 <USBD_CtlSendStatus>
  return USBD_OK;
 8008526:	4628      	mov	r0, r5
 8008528:	e012      	b.n	8008550 <USBD_LL_DataOutStage+0x82>
          pdev->pClass->EP0_RxReady(pdev);
 800852a:	4798      	blx	r3
 800852c:	e7f8      	b.n	8008520 <USBD_LL_DataOutStage+0x52>
        pdev->ep0_state = USBD_EP0_IDLE;
 800852e:	2100      	movs	r1, #0
 8008530:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008534:	f002 fc09 	bl	800ad4a <USBD_LL_StallEP>
  return USBD_OK;
 8008538:	4628      	mov	r0, r5
 800853a:	e009      	b.n	8008550 <USBD_LL_DataOutStage+0x82>
  else if ((pdev->pClass->DataOut != NULL) &&
 800853c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	b133      	cbz	r3, 8008552 <USBD_LL_DataOutStage+0x84>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008544:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008548:	2a03      	cmp	r2, #3
 800854a:	d104      	bne.n	8008556 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 800854c:	4798      	blx	r3
  return USBD_OK;
 800854e:	2000      	movs	r0, #0
}
 8008550:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8008552:	2002      	movs	r0, #2
 8008554:	e7fc      	b.n	8008550 <USBD_LL_DataOutStage+0x82>
 8008556:	2002      	movs	r0, #2
 8008558:	e7fa      	b.n	8008550 <USBD_LL_DataOutStage+0x82>

0800855a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800855a:	b538      	push	{r3, r4, r5, lr}
 800855c:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800855e:	460d      	mov	r5, r1
 8008560:	2900      	cmp	r1, #0
 8008562:	d153      	bne.n	800860c <USBD_LL_DataInStage+0xb2>
 8008564:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008566:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800856a:	2a02      	cmp	r2, #2
 800856c:	d00c      	beq.n	8008588 <USBD_LL_DataInStage+0x2e>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800856e:	2a04      	cmp	r2, #4
 8008570:	d000      	beq.n	8008574 <USBD_LL_DataInStage+0x1a>
 8008572:	b91a      	cbnz	r2, 800857c <USBD_LL_DataInStage+0x22>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008574:	2180      	movs	r1, #128	; 0x80
 8008576:	4620      	mov	r0, r4
 8008578:	f002 fbe7 	bl	800ad4a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800857c:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8008580:	2b01      	cmp	r3, #1
 8008582:	d03e      	beq.n	8008602 <USBD_LL_DataInStage+0xa8>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8008584:	4628      	mov	r0, r5
}
 8008586:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8008588:	6a01      	ldr	r1, [r0, #32]
 800858a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800858c:	4291      	cmp	r1, r2
 800858e:	d81b      	bhi.n	80085c8 <USBD_LL_DataInStage+0x6e>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008590:	69c1      	ldr	r1, [r0, #28]
 8008592:	fbb1 f3f2 	udiv	r3, r1, r2
 8008596:	fb02 1313 	mls	r3, r2, r3, r1
 800859a:	b92b      	cbnz	r3, 80085a8 <USBD_LL_DataInStage+0x4e>
 800859c:	428a      	cmp	r2, r1
 800859e:	d803      	bhi.n	80085a8 <USBD_LL_DataInStage+0x4e>
            (pep->total_length < pdev->ep0_data_len))
 80085a0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085a4:	4299      	cmp	r1, r3
 80085a6:	d31c      	bcc.n	80085e2 <USBD_LL_DataInStage+0x88>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085a8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	b11b      	cbz	r3, 80085b8 <USBD_LL_DataInStage+0x5e>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085b0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80085b4:	2a03      	cmp	r2, #3
 80085b6:	d021      	beq.n	80085fc <USBD_LL_DataInStage+0xa2>
          USBD_LL_StallEP(pdev, 0x80U);
 80085b8:	2180      	movs	r1, #128	; 0x80
 80085ba:	4620      	mov	r0, r4
 80085bc:	f002 fbc5 	bl	800ad4a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 fbe9 	bl	8008d98 <USBD_CtlReceiveStatus>
 80085c6:	e7d9      	b.n	800857c <USBD_LL_DataInStage+0x22>
        pep->rem_length -= pep->maxpacket;
 80085c8:	1a8a      	subs	r2, r1, r2
 80085ca:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80085cc:	b292      	uxth	r2, r2
 80085ce:	4619      	mov	r1, r3
 80085d0:	f000 fbb8 	bl	8008d44 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085d4:	2300      	movs	r3, #0
 80085d6:	461a      	mov	r2, r3
 80085d8:	4619      	mov	r1, r3
 80085da:	4620      	mov	r0, r4
 80085dc:	f002 fbec 	bl	800adb8 <USBD_LL_PrepareReceive>
 80085e0:	e7cc      	b.n	800857c <USBD_LL_DataInStage+0x22>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085e2:	2200      	movs	r2, #0
 80085e4:	4611      	mov	r1, r2
 80085e6:	f000 fbad 	bl	8008d44 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085ea:	2100      	movs	r1, #0
 80085ec:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085f0:	460b      	mov	r3, r1
 80085f2:	460a      	mov	r2, r1
 80085f4:	4620      	mov	r0, r4
 80085f6:	f002 fbdf 	bl	800adb8 <USBD_LL_PrepareReceive>
 80085fa:	e7bf      	b.n	800857c <USBD_LL_DataInStage+0x22>
            pdev->pClass->EP0_TxSent(pdev);
 80085fc:	4620      	mov	r0, r4
 80085fe:	4798      	blx	r3
 8008600:	e7da      	b.n	80085b8 <USBD_LL_DataInStage+0x5e>
      pdev->dev_test_mode = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8008608:	4628      	mov	r0, r5
 800860a:	e7bc      	b.n	8008586 <USBD_LL_DataInStage+0x2c>
  else if ((pdev->pClass->DataIn != NULL) &&
 800860c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	b133      	cbz	r3, 8008622 <USBD_LL_DataInStage+0xc8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008614:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008618:	2a03      	cmp	r2, #3
 800861a:	d104      	bne.n	8008626 <USBD_LL_DataInStage+0xcc>
    pdev->pClass->DataIn(pdev, epnum);
 800861c:	4798      	blx	r3
  return USBD_OK;
 800861e:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8008620:	e7b1      	b.n	8008586 <USBD_LL_DataInStage+0x2c>
    return USBD_FAIL;
 8008622:	2002      	movs	r0, #2
 8008624:	e7af      	b.n	8008586 <USBD_LL_DataInStage+0x2c>
 8008626:	2002      	movs	r0, #2
 8008628:	e7ad      	b.n	8008586 <USBD_LL_DataInStage+0x2c>

0800862a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800862a:	b570      	push	{r4, r5, r6, lr}
 800862c:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800862e:	2340      	movs	r3, #64	; 0x40
 8008630:	2200      	movs	r2, #0
 8008632:	4611      	mov	r1, r2
 8008634:	f002 fb76 	bl	800ad24 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008638:	2501      	movs	r5, #1
 800863a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800863e:	2640      	movs	r6, #64	; 0x40
 8008640:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008644:	4633      	mov	r3, r6
 8008646:	2200      	movs	r2, #0
 8008648:	2180      	movs	r1, #128	; 0x80
 800864a:	4620      	mov	r0, r4
 800864c:	f002 fb6a 	bl	800ad24 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008650:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008652:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008654:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008658:	2300      	movs	r3, #0
 800865a:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800865e:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8008660:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8008664:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8008668:	b12b      	cbz	r3, 8008676 <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800866a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2100      	movs	r1, #0
 8008672:	4620      	mov	r0, r4
 8008674:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008676:	2000      	movs	r0, #0
 8008678:	bd70      	pop	{r4, r5, r6, pc}

0800867a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800867a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800867c:	2000      	movs	r0, #0
 800867e:	4770      	bx	lr

08008680 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8008680:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008684:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008688:	2304      	movs	r3, #4
 800868a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800868e:	2000      	movs	r0, #0
 8008690:	4770      	bx	lr

08008692 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008692:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008696:	2b04      	cmp	r3, #4
 8008698:	d001      	beq.n	800869e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800869a:	2000      	movs	r0, #0
 800869c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800869e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 80086a2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 80086a6:	e7f8      	b.n	800869a <USBD_LL_Resume+0x8>

080086a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086a8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	d001      	beq.n	80086b6 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 80086b2:	2000      	movs	r0, #0
 80086b4:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80086b6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d0f8      	beq.n	80086b2 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80086c0:	4798      	blx	r3
 80086c2:	e7f6      	b.n	80086b2 <USBD_LL_SOF+0xa>

080086c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80086c4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80086c6:	2000      	movs	r0, #0

  while (*buf != '\0')
 80086c8:	781a      	ldrb	r2, [r3, #0]
 80086ca:	b11a      	cbz	r2, 80086d4 <USBD_GetLen+0x10>
  {
    len++;
 80086cc:	3001      	adds	r0, #1
 80086ce:	b2c0      	uxtb	r0, r0
    buf++;
 80086d0:	3301      	adds	r3, #1
 80086d2:	e7f9      	b.n	80086c8 <USBD_GetLen+0x4>
  }

  return len;
}
 80086d4:	4770      	bx	lr

080086d6 <USBD_SetFeature>:
{
 80086d6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d8:	884b      	ldrh	r3, [r1, #2]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d000      	beq.n	80086e0 <USBD_SetFeature+0xa>
}
 80086de:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80086e0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80086e4:	f000 fb4d 	bl	8008d82 <USBD_CtlSendStatus>
}
 80086e8:	e7f9      	b.n	80086de <USBD_SetFeature+0x8>

080086ea <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80086ea:	780b      	ldrb	r3, [r1, #0]
 80086ec:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80086ee:	784b      	ldrb	r3, [r1, #1]
 80086f0:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80086f2:	788b      	ldrb	r3, [r1, #2]
 80086f4:	78ca      	ldrb	r2, [r1, #3]
 80086f6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80086fa:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80086fc:	790b      	ldrb	r3, [r1, #4]
 80086fe:	794a      	ldrb	r2, [r1, #5]
 8008700:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008704:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008706:	798b      	ldrb	r3, [r1, #6]
 8008708:	79ca      	ldrb	r2, [r1, #7]
 800870a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800870e:	80c3      	strh	r3, [r0, #6]
}
 8008710:	4770      	bx	lr

08008712 <USBD_CtlError>:
{
 8008712:	b510      	push	{r4, lr}
 8008714:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8008716:	2180      	movs	r1, #128	; 0x80
 8008718:	f002 fb17 	bl	800ad4a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800871c:	2100      	movs	r1, #0
 800871e:	4620      	mov	r0, r4
 8008720:	f002 fb13 	bl	800ad4a <USBD_LL_StallEP>
}
 8008724:	bd10      	pop	{r4, pc}

08008726 <USBD_GetDescriptor>:
{
 8008726:	b530      	push	{r4, r5, lr}
 8008728:	b083      	sub	sp, #12
 800872a:	4605      	mov	r5, r0
 800872c:	460c      	mov	r4, r1
  uint16_t len = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8008734:	884a      	ldrh	r2, [r1, #2]
 8008736:	0a13      	lsrs	r3, r2, #8
 8008738:	3b01      	subs	r3, #1
 800873a:	2b06      	cmp	r3, #6
 800873c:	f200 80a4 	bhi.w	8008888 <USBD_GetDescriptor+0x162>
 8008740:	e8df f003 	tbb	[pc, r3]
 8008744:	a22c1804 	.word	0xa22c1804
 8008748:	86a2      	.short	0x86a2
 800874a:	93          	.byte	0x93
 800874b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800874c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f10d 0106 	add.w	r1, sp, #6
 8008756:	7c00      	ldrb	r0, [r0, #16]
 8008758:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800875a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800875e:	b11a      	cbz	r2, 8008768 <USBD_GetDescriptor+0x42>
 8008760:	88e3      	ldrh	r3, [r4, #6]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f040 8094 	bne.w	8008890 <USBD_GetDescriptor+0x16a>
    if (req->wLength == 0U)
 8008768:	88e3      	ldrh	r3, [r4, #6]
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 809a 	beq.w	80088a4 <USBD_GetDescriptor+0x17e>
}
 8008770:	b003      	add	sp, #12
 8008772:	bd30      	pop	{r4, r5, pc}
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008774:	7c03      	ldrb	r3, [r0, #16]
 8008776:	b943      	cbnz	r3, 800878a <USBD_GetDescriptor+0x64>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008778:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	f10d 0006 	add.w	r0, sp, #6
 8008782:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008784:	2302      	movs	r3, #2
 8008786:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8008788:	e7e7      	b.n	800875a <USBD_GetDescriptor+0x34>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800878a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	f10d 0006 	add.w	r0, sp, #6
 8008794:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008796:	2302      	movs	r3, #2
 8008798:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800879a:	e7de      	b.n	800875a <USBD_GetDescriptor+0x34>
      switch ((uint8_t)(req->wValue))
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	2a05      	cmp	r2, #5
 80087a0:	d852      	bhi.n	8008848 <USBD_GetDescriptor+0x122>
 80087a2:	e8df f002 	tbb	[pc, r2]
 80087a6:	1003      	.short	0x1003
 80087a8:	44372a1d 	.word	0x44372a1d
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087ac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	b123      	cbz	r3, 80087be <USBD_GetDescriptor+0x98>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087b4:	f10d 0106 	add.w	r1, sp, #6
 80087b8:	7c00      	ldrb	r0, [r0, #16]
 80087ba:	4798      	blx	r3
  if (err != 0U)
 80087bc:	e7cd      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80087be:	4621      	mov	r1, r4
 80087c0:	f7ff ffa7 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 80087c4:	e7d4      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087c6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	b123      	cbz	r3, 80087d8 <USBD_GetDescriptor+0xb2>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087ce:	f10d 0106 	add.w	r1, sp, #6
 80087d2:	7c00      	ldrb	r0, [r0, #16]
 80087d4:	4798      	blx	r3
  if (err != 0U)
 80087d6:	e7c0      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80087d8:	4621      	mov	r1, r4
 80087da:	f7ff ff9a 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 80087de:	e7c7      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	b123      	cbz	r3, 80087f2 <USBD_GetDescriptor+0xcc>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087e8:	f10d 0106 	add.w	r1, sp, #6
 80087ec:	7c00      	ldrb	r0, [r0, #16]
 80087ee:	4798      	blx	r3
  if (err != 0U)
 80087f0:	e7b3      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 80087f2:	4621      	mov	r1, r4
 80087f4:	f7ff ff8d 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 80087f8:	e7ba      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087fa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	b123      	cbz	r3, 800880c <USBD_GetDescriptor+0xe6>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008802:	f10d 0106 	add.w	r1, sp, #6
 8008806:	7c00      	ldrb	r0, [r0, #16]
 8008808:	4798      	blx	r3
  if (err != 0U)
 800880a:	e7a6      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 800880c:	4621      	mov	r1, r4
 800880e:	f7ff ff80 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 8008812:	e7ad      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008814:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	b123      	cbz	r3, 8008826 <USBD_GetDescriptor+0x100>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800881c:	f10d 0106 	add.w	r1, sp, #6
 8008820:	7c00      	ldrb	r0, [r0, #16]
 8008822:	4798      	blx	r3
  if (err != 0U)
 8008824:	e799      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008826:	4621      	mov	r1, r4
 8008828:	f7ff ff73 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 800882c:	e7a0      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800882e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	b123      	cbz	r3, 8008840 <USBD_GetDescriptor+0x11a>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008836:	f10d 0106 	add.w	r1, sp, #6
 800883a:	7c00      	ldrb	r0, [r0, #16]
 800883c:	4798      	blx	r3
  if (err != 0U)
 800883e:	e78c      	b.n	800875a <USBD_GetDescriptor+0x34>
            USBD_CtlError(pdev, req);
 8008840:	4621      	mov	r1, r4
 8008842:	f7ff ff66 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 8008846:	e793      	b.n	8008770 <USBD_GetDescriptor+0x4a>
          USBD_CtlError(pdev, req);
 8008848:	4621      	mov	r1, r4
 800884a:	f7ff ff62 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 800884e:	e78f      	b.n	8008770 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008850:	7c03      	ldrb	r3, [r0, #16]
 8008852:	b933      	cbnz	r3, 8008862 <USBD_GetDescriptor+0x13c>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008854:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885a:	f10d 0006 	add.w	r0, sp, #6
 800885e:	4798      	blx	r3
  if (err != 0U)
 8008860:	e77b      	b.n	800875a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008862:	4621      	mov	r1, r4
 8008864:	f7ff ff55 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 8008868:	e782      	b.n	8008770 <USBD_GetDescriptor+0x4a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800886a:	7c03      	ldrb	r3, [r0, #16]
 800886c:	b943      	cbnz	r3, 8008880 <USBD_GetDescriptor+0x15a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800886e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008874:	f10d 0006 	add.w	r0, sp, #6
 8008878:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800887a:	2307      	movs	r3, #7
 800887c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800887e:	e76c      	b.n	800875a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8008880:	4621      	mov	r1, r4
 8008882:	f7ff ff46 	bl	8008712 <USBD_CtlError>
  if (err != 0U)
 8008886:	e773      	b.n	8008770 <USBD_GetDescriptor+0x4a>
      USBD_CtlError(pdev, req);
 8008888:	4621      	mov	r1, r4
 800888a:	f7ff ff42 	bl	8008712 <USBD_CtlError>
    return;
 800888e:	e76f      	b.n	8008770 <USBD_GetDescriptor+0x4a>
      len = MIN(len, req->wLength);
 8008890:	429a      	cmp	r2, r3
 8008892:	bf28      	it	cs
 8008894:	461a      	movcs	r2, r3
 8008896:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800889a:	4601      	mov	r1, r0
 800889c:	4628      	mov	r0, r5
 800889e:	f000 fa44 	bl	8008d2a <USBD_CtlSendData>
 80088a2:	e761      	b.n	8008768 <USBD_GetDescriptor+0x42>
      (void)USBD_CtlSendStatus(pdev);
 80088a4:	4628      	mov	r0, r5
 80088a6:	f000 fa6c 	bl	8008d82 <USBD_CtlSendStatus>
 80088aa:	e761      	b.n	8008770 <USBD_GetDescriptor+0x4a>

080088ac <USBD_SetAddress>:
{
 80088ac:	b538      	push	{r3, r4, r5, lr}
 80088ae:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088b0:	888b      	ldrh	r3, [r1, #4]
 80088b2:	b9f3      	cbnz	r3, 80088f2 <USBD_SetAddress+0x46>
 80088b4:	88cb      	ldrh	r3, [r1, #6]
 80088b6:	b9e3      	cbnz	r3, 80088f2 <USBD_SetAddress+0x46>
 80088b8:	884b      	ldrh	r3, [r1, #2]
 80088ba:	2b7f      	cmp	r3, #127	; 0x7f
 80088bc:	d819      	bhi.n	80088f2 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80088be:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088c2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d00c      	beq.n	80088e4 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80088ca:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80088ce:	4629      	mov	r1, r5
 80088d0:	f002 fa62 	bl	800ad98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fa54 	bl	8008d82 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80088da:	b135      	cbz	r5, 80088ea <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088dc:	2302      	movs	r3, #2
 80088de:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80088e2:	e009      	b.n	80088f8 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80088e4:	f7ff ff15 	bl	8008712 <USBD_CtlError>
 80088e8:	e006      	b.n	80088f8 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80088f0:	e002      	b.n	80088f8 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80088f2:	4620      	mov	r0, r4
 80088f4:	f7ff ff0d 	bl	8008712 <USBD_CtlError>
}
 80088f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080088fc <USBD_SetConfig>:
{
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4604      	mov	r4, r0
 8008900:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);
 8008902:	7889      	ldrb	r1, [r1, #2]
 8008904:	4b28      	ldr	r3, [pc, #160]	; (80089a8 <USBD_SetConfig+0xac>)
 8008906:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008908:	2901      	cmp	r1, #1
 800890a:	d80e      	bhi.n	800892a <USBD_SetConfig+0x2e>
    switch (pdev->dev_state)
 800890c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008910:	2b02      	cmp	r3, #2
 8008912:	d00e      	beq.n	8008932 <USBD_SetConfig+0x36>
 8008914:	2b03      	cmp	r3, #3
 8008916:	d021      	beq.n	800895c <USBD_SetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008918:	4629      	mov	r1, r5
 800891a:	f7ff fefa 	bl	8008712 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800891e:	4b22      	ldr	r3, [pc, #136]	; (80089a8 <USBD_SetConfig+0xac>)
 8008920:	7819      	ldrb	r1, [r3, #0]
 8008922:	4620      	mov	r0, r4
 8008924:	f7ff fd9f 	bl	8008466 <USBD_ClrClassConfig>
        break;
 8008928:	e002      	b.n	8008930 <USBD_SetConfig+0x34>
    USBD_CtlError(pdev, req);
 800892a:	4629      	mov	r1, r5
 800892c:	f7ff fef1 	bl	8008712 <USBD_CtlError>
}
 8008930:	bd38      	pop	{r3, r4, r5, pc}
        if (cfgidx)
 8008932:	b181      	cbz	r1, 8008956 <USBD_SetConfig+0x5a>
          pdev->dev_config = cfgidx;
 8008934:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008936:	2303      	movs	r3, #3
 8008938:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800893c:	f7ff fd87 	bl	800844e <USBD_SetClassConfig>
 8008940:	2802      	cmp	r0, #2
 8008942:	d003      	beq.n	800894c <USBD_SetConfig+0x50>
          USBD_CtlSendStatus(pdev);
 8008944:	4620      	mov	r0, r4
 8008946:	f000 fa1c 	bl	8008d82 <USBD_CtlSendStatus>
 800894a:	e7f1      	b.n	8008930 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 800894c:	4629      	mov	r1, r5
 800894e:	4620      	mov	r0, r4
 8008950:	f7ff fedf 	bl	8008712 <USBD_CtlError>
            return;
 8008954:	e7ec      	b.n	8008930 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 8008956:	f000 fa14 	bl	8008d82 <USBD_CtlSendStatus>
 800895a:	e7e9      	b.n	8008930 <USBD_SetConfig+0x34>
        if (cfgidx == 0U)
 800895c:	b189      	cbz	r1, 8008982 <USBD_SetConfig+0x86>
        else if (cfgidx != pdev->dev_config)
 800895e:	6843      	ldr	r3, [r0, #4]
 8008960:	4299      	cmp	r1, r3
 8008962:	d01d      	beq.n	80089a0 <USBD_SetConfig+0xa4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008964:	b2d9      	uxtb	r1, r3
 8008966:	f7ff fd7e 	bl	8008466 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800896a:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <USBD_SetConfig+0xac>)
 800896c:	7819      	ldrb	r1, [r3, #0]
 800896e:	6061      	str	r1, [r4, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff fd6c 	bl	800844e <USBD_SetClassConfig>
 8008976:	2802      	cmp	r0, #2
 8008978:	d00d      	beq.n	8008996 <USBD_SetConfig+0x9a>
          USBD_CtlSendStatus(pdev);
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fa01 	bl	8008d82 <USBD_CtlSendStatus>
 8008980:	e7d6      	b.n	8008930 <USBD_SetConfig+0x34>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008982:	2302      	movs	r3, #2
 8008984:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008988:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800898a:	f7ff fd6c 	bl	8008466 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800898e:	4620      	mov	r0, r4
 8008990:	f000 f9f7 	bl	8008d82 <USBD_CtlSendStatus>
 8008994:	e7cc      	b.n	8008930 <USBD_SetConfig+0x34>
            USBD_CtlError(pdev, req);
 8008996:	4629      	mov	r1, r5
 8008998:	4620      	mov	r0, r4
 800899a:	f7ff feba 	bl	8008712 <USBD_CtlError>
            return;
 800899e:	e7c7      	b.n	8008930 <USBD_SetConfig+0x34>
          USBD_CtlSendStatus(pdev);
 80089a0:	f000 f9ef 	bl	8008d82 <USBD_CtlSendStatus>
 80089a4:	e7c4      	b.n	8008930 <USBD_SetConfig+0x34>
 80089a6:	bf00      	nop
 80089a8:	200007a2 	.word	0x200007a2

080089ac <USBD_GetConfig>:
{
 80089ac:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 80089ae:	88cb      	ldrh	r3, [r1, #6]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d10a      	bne.n	80089ca <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 80089b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d909      	bls.n	80089d0 <USBD_GetConfig+0x24>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d109      	bne.n	80089d4 <USBD_GetConfig+0x28>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089c0:	2201      	movs	r2, #1
 80089c2:	1d01      	adds	r1, r0, #4
 80089c4:	f000 f9b1 	bl	8008d2a <USBD_CtlSendData>
        break;
 80089c8:	e001      	b.n	80089ce <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 80089ca:	f7ff fea2 	bl	8008712 <USBD_CtlError>
}
 80089ce:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	b913      	cbnz	r3, 80089da <USBD_GetConfig+0x2e>
        USBD_CtlError(pdev, req);
 80089d4:	f7ff fe9d 	bl	8008712 <USBD_CtlError>
}
 80089d8:	e7f9      	b.n	80089ce <USBD_GetConfig+0x22>
        pdev->dev_default_config = 0U;
 80089da:	4601      	mov	r1, r0
 80089dc:	2300      	movs	r3, #0
 80089de:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089e2:	2201      	movs	r2, #1
 80089e4:	f000 f9a1 	bl	8008d2a <USBD_CtlSendData>
        break;
 80089e8:	e7f1      	b.n	80089ce <USBD_GetConfig+0x22>

080089ea <USBD_GetStatus>:
{
 80089ea:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 80089ec:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80089f0:	3b01      	subs	r3, #1
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d812      	bhi.n	8008a1c <USBD_GetStatus+0x32>
      if (req->wLength != 0x2U)
 80089f6:	88cb      	ldrh	r3, [r1, #6]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d10c      	bne.n	8008a16 <USBD_GetStatus+0x2c>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089fc:	2301      	movs	r3, #1
 80089fe:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8008a00:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8008a04:	b10b      	cbz	r3, 8008a0a <USBD_GetStatus+0x20>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a06:	2303      	movs	r3, #3
 8008a08:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a0a:	2202      	movs	r2, #2
 8008a0c:	f100 010c 	add.w	r1, r0, #12
 8008a10:	f000 f98b 	bl	8008d2a <USBD_CtlSendData>
}
 8008a14:	bd08      	pop	{r3, pc}
        USBD_CtlError(pdev, req);
 8008a16:	f7ff fe7c 	bl	8008712 <USBD_CtlError>
        break;
 8008a1a:	e7fb      	b.n	8008a14 <USBD_GetStatus+0x2a>
      USBD_CtlError(pdev, req);
 8008a1c:	f7ff fe79 	bl	8008712 <USBD_CtlError>
}
 8008a20:	e7f8      	b.n	8008a14 <USBD_GetStatus+0x2a>

08008a22 <USBD_ClrFeature>:
{
 8008a22:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8008a24:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d809      	bhi.n	8008a42 <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a2e:	884b      	ldrh	r3, [r1, #2]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d000      	beq.n	8008a36 <USBD_ClrFeature+0x14>
}
 8008a34:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008a3c:	f000 f9a1 	bl	8008d82 <USBD_CtlSendStatus>
 8008a40:	e7f8      	b.n	8008a34 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8008a42:	f7ff fe66 	bl	8008712 <USBD_CtlError>
}
 8008a46:	e7f5      	b.n	8008a34 <USBD_ClrFeature+0x12>

08008a48 <USBD_StdDevReq>:
{
 8008a48:	b508      	push	{r3, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a4a:	780b      	ldrb	r3, [r1, #0]
 8008a4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d005      	beq.n	8008a60 <USBD_StdDevReq+0x18>
 8008a54:	2b40      	cmp	r3, #64	; 0x40
 8008a56:	d003      	beq.n	8008a60 <USBD_StdDevReq+0x18>
 8008a58:	b143      	cbz	r3, 8008a6c <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8008a5a:	f7ff fe5a 	bl	8008712 <USBD_CtlError>
      break;
 8008a5e:	e003      	b.n	8008a68 <USBD_StdDevReq+0x20>
      pdev->pClass->Setup(pdev, req);
 8008a60:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	4798      	blx	r3
}
 8008a68:	2000      	movs	r0, #0
 8008a6a:	bd08      	pop	{r3, pc}
      switch (req->bRequest)
 8008a6c:	784b      	ldrb	r3, [r1, #1]
 8008a6e:	2b09      	cmp	r3, #9
 8008a70:	d81b      	bhi.n	8008aaa <USBD_StdDevReq+0x62>
 8008a72:	e8df f003 	tbb	[pc, r3]
 8008a76:	1711      	.short	0x1711
 8008a78:	081a141a 	.word	0x081a141a
 8008a7c:	0b0e1a05 	.word	0x0b0e1a05
          USBD_GetDescriptor(pdev, req);
 8008a80:	f7ff fe51 	bl	8008726 <USBD_GetDescriptor>
          break;
 8008a84:	e7f0      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_SetAddress(pdev, req);
 8008a86:	f7ff ff11 	bl	80088ac <USBD_SetAddress>
          break;
 8008a8a:	e7ed      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_SetConfig(pdev, req);
 8008a8c:	f7ff ff36 	bl	80088fc <USBD_SetConfig>
          break;
 8008a90:	e7ea      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_GetConfig(pdev, req);
 8008a92:	f7ff ff8b 	bl	80089ac <USBD_GetConfig>
          break;
 8008a96:	e7e7      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_GetStatus(pdev, req);
 8008a98:	f7ff ffa7 	bl	80089ea <USBD_GetStatus>
          break;
 8008a9c:	e7e4      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_SetFeature(pdev, req);
 8008a9e:	f7ff fe1a 	bl	80086d6 <USBD_SetFeature>
          break;
 8008aa2:	e7e1      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_ClrFeature(pdev, req);
 8008aa4:	f7ff ffbd 	bl	8008a22 <USBD_ClrFeature>
          break;
 8008aa8:	e7de      	b.n	8008a68 <USBD_StdDevReq+0x20>
          USBD_CtlError(pdev, req);
 8008aaa:	f7ff fe32 	bl	8008712 <USBD_CtlError>
          break;
 8008aae:	e7db      	b.n	8008a68 <USBD_StdDevReq+0x20>

08008ab0 <USBD_StdItfReq>:
{
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab6:	780b      	ldrb	r3, [r1, #0]
 8008ab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d006      	beq.n	8008ace <USBD_StdItfReq+0x1e>
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	d004      	beq.n	8008ace <USBD_StdItfReq+0x1e>
 8008ac4:	b11b      	cbz	r3, 8008ace <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 8008ac6:	f7ff fe24 	bl	8008712 <USBD_CtlError>
}
 8008aca:	2000      	movs	r0, #0
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 8008ace:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d816      	bhi.n	8008b06 <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ad8:	7923      	ldrb	r3, [r4, #4]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d80e      	bhi.n	8008afc <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ade:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008aea:	88e3      	ldrh	r3, [r4, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1ec      	bne.n	8008aca <USBD_StdItfReq+0x1a>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	d1ea      	bne.n	8008aca <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 f944 	bl	8008d82 <USBD_CtlSendStatus>
 8008afa:	e7e6      	b.n	8008aca <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 8008afc:	4621      	mov	r1, r4
 8008afe:	4628      	mov	r0, r5
 8008b00:	f7ff fe07 	bl	8008712 <USBD_CtlError>
 8008b04:	e7e1      	b.n	8008aca <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 8008b06:	4621      	mov	r1, r4
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f7ff fe02 	bl	8008712 <USBD_CtlError>
          break;
 8008b0e:	e7dc      	b.n	8008aca <USBD_StdItfReq+0x1a>

08008b10 <USBD_StdEPReq>:
{
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	4605      	mov	r5, r0
  ep_addr  = LOBYTE(req->wIndex);
 8008b14:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b16:	780c      	ldrb	r4, [r1, #0]
 8008b18:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8008b1c:	2c20      	cmp	r4, #32
 8008b1e:	d007      	beq.n	8008b30 <USBD_StdEPReq+0x20>
 8008b20:	b2da      	uxtb	r2, r3
 8008b22:	2c40      	cmp	r4, #64	; 0x40
 8008b24:	d004      	beq.n	8008b30 <USBD_StdEPReq+0x20>
 8008b26:	b15c      	cbz	r4, 8008b40 <USBD_StdEPReq+0x30>
      USBD_CtlError(pdev, req);
 8008b28:	f7ff fdf3 	bl	8008712 <USBD_CtlError>
  return ret;
 8008b2c:	2400      	movs	r4, #0
      break;
 8008b2e:	e005      	b.n	8008b3c <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8008b30:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	4628      	mov	r0, r5
 8008b38:	4798      	blx	r3
  return ret;
 8008b3a:	2400      	movs	r4, #0
}
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b40:	2c20      	cmp	r4, #32
 8008b42:	d009      	beq.n	8008b58 <USBD_StdEPReq+0x48>
      switch (req->bRequest)
 8008b44:	784e      	ldrb	r6, [r1, #1]
 8008b46:	2e01      	cmp	r6, #1
 8008b48:	d033      	beq.n	8008bb2 <USBD_StdEPReq+0xa2>
 8008b4a:	2e03      	cmp	r6, #3
 8008b4c:	d00a      	beq.n	8008b64 <USBD_StdEPReq+0x54>
 8008b4e:	2e00      	cmp	r6, #0
 8008b50:	d055      	beq.n	8008bfe <USBD_StdEPReq+0xee>
          USBD_CtlError(pdev, req);
 8008b52:	f7ff fdde 	bl	8008712 <USBD_CtlError>
          break;
 8008b56:	e7f1      	b.n	8008b3c <USBD_StdEPReq+0x2c>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	4798      	blx	r3
 8008b60:	4604      	mov	r4, r0
        return ret;
 8008b62:	e7eb      	b.n	8008b3c <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8008b64:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d004      	beq.n	8008b76 <USBD_StdEPReq+0x66>
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d011      	beq.n	8008b94 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8008b70:	f7ff fdcf 	bl	8008712 <USBD_CtlError>
              break;
 8008b74:	e7e2      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b76:	b10a      	cbz	r2, 8008b7c <USBD_StdEPReq+0x6c>
 8008b78:	2a80      	cmp	r2, #128	; 0x80
 8008b7a:	d103      	bne.n	8008b84 <USBD_StdEPReq+0x74>
                USBD_CtlError(pdev, req);
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff fdc8 	bl	8008712 <USBD_CtlError>
 8008b82:	e7db      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8008b84:	4611      	mov	r1, r2
 8008b86:	f002 f8e0 	bl	800ad4a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b8a:	2180      	movs	r1, #128	; 0x80
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f002 f8dc 	bl	800ad4a <USBD_LL_StallEP>
 8008b92:	e7d3      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b94:	884b      	ldrh	r3, [r1, #2]
 8008b96:	b923      	cbnz	r3, 8008ba2 <USBD_StdEPReq+0x92>
                if ((ep_addr != 0x00U) &&
 8008b98:	b11a      	cbz	r2, 8008ba2 <USBD_StdEPReq+0x92>
 8008b9a:	2a80      	cmp	r2, #128	; 0x80
 8008b9c:	d001      	beq.n	8008ba2 <USBD_StdEPReq+0x92>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b9e:	88cb      	ldrh	r3, [r1, #6]
 8008ba0:	b11b      	cbz	r3, 8008baa <USBD_StdEPReq+0x9a>
              USBD_CtlSendStatus(pdev);
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 f8ed 	bl	8008d82 <USBD_CtlSendStatus>
              break;
 8008ba8:	e7c8      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8008baa:	4611      	mov	r1, r2
 8008bac:	f002 f8cd 	bl	800ad4a <USBD_LL_StallEP>
 8008bb0:	e7f7      	b.n	8008ba2 <USBD_StdEPReq+0x92>
          switch (pdev->dev_state)
 8008bb2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d004      	beq.n	8008bc4 <USBD_StdEPReq+0xb4>
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d011      	beq.n	8008be2 <USBD_StdEPReq+0xd2>
              USBD_CtlError(pdev, req);
 8008bbe:	f7ff fda8 	bl	8008712 <USBD_CtlError>
              break;
 8008bc2:	e7bb      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bc4:	b10a      	cbz	r2, 8008bca <USBD_StdEPReq+0xba>
 8008bc6:	2a80      	cmp	r2, #128	; 0x80
 8008bc8:	d103      	bne.n	8008bd2 <USBD_StdEPReq+0xc2>
                USBD_CtlError(pdev, req);
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7ff fda1 	bl	8008712 <USBD_CtlError>
 8008bd0:	e7b4      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                USBD_LL_StallEP(pdev, ep_addr);
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	f002 f8b9 	bl	800ad4a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bd8:	2180      	movs	r1, #128	; 0x80
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f002 f8b5 	bl	800ad4a <USBD_LL_StallEP>
 8008be0:	e7ac      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008be2:	884b      	ldrh	r3, [r1, #2]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1a9      	bne.n	8008b3c <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8008be8:	f012 0f7f 	tst.w	r2, #127	; 0x7f
 8008bec:	d103      	bne.n	8008bf6 <USBD_StdEPReq+0xe6>
                USBD_CtlSendStatus(pdev);
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f000 f8c7 	bl	8008d82 <USBD_CtlSendStatus>
 8008bf4:	e7a2      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	f002 f8af 	bl	800ad5a <USBD_LL_ClearStallEP>
 8008bfc:	e7f7      	b.n	8008bee <USBD_StdEPReq+0xde>
          switch (pdev->dev_state)
 8008bfe:	f890 029c 	ldrb.w	r0, [r0, #668]	; 0x29c
 8008c02:	2802      	cmp	r0, #2
 8008c04:	d006      	beq.n	8008c14 <USBD_StdEPReq+0x104>
 8008c06:	2803      	cmp	r0, #3
 8008c08:	d029      	beq.n	8008c5e <USBD_StdEPReq+0x14e>
              USBD_CtlError(pdev, req);
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f7ff fd81 	bl	8008712 <USBD_CtlError>
  return ret;
 8008c10:	4634      	mov	r4, r6
              break;
 8008c12:	e793      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c14:	b10a      	cbz	r2, 8008c1a <USBD_StdEPReq+0x10a>
 8008c16:	2a80      	cmp	r2, #128	; 0x80
 8008c18:	d113      	bne.n	8008c42 <USBD_StdEPReq+0x132>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c1e:	d115      	bne.n	8008c4c <USBD_StdEPReq+0x13c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c24:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c28:	0091      	lsls	r1, r2, #2
 8008c2a:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8008c2e:	4429      	add	r1, r5
 8008c30:	3104      	adds	r1, #4
              pep->status = 0x0000U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c36:	2202      	movs	r2, #2
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f000 f876 	bl	8008d2a <USBD_CtlSendData>
  return ret;
 8008c3e:	4634      	mov	r4, r6
              break;
 8008c40:	e77c      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                USBD_CtlError(pdev, req);
 8008c42:	4628      	mov	r0, r5
 8008c44:	f7ff fd65 	bl	8008712 <USBD_CtlError>
  return ret;
 8008c48:	4634      	mov	r4, r6
                break;
 8008c4a:	e777      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008c54:	0091      	lsls	r1, r2, #2
 8008c56:	3110      	adds	r1, #16
 8008c58:	4429      	add	r1, r5
 8008c5a:	3104      	adds	r1, #4
 8008c5c:	e7e9      	b.n	8008c32 <USBD_StdEPReq+0x122>
              if ((ep_addr & 0x80U) == 0x80U)
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	db1f      	blt.n	8008ca4 <USBD_StdEPReq+0x194>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c64:	f002 000f 	and.w	r0, r2, #15
 8008c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008c6c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8008c70:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8008c74:	b320      	cbz	r0, 8008cc0 <USBD_StdEPReq+0x1b0>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	db27      	blt.n	8008cca <USBD_StdEPReq+0x1ba>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c7a:	f002 037f 	and.w	r3, r2, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008c82:	009c      	lsls	r4, r3, #2
 8008c84:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8008c88:	442c      	add	r4, r5
 8008c8a:	3404      	adds	r4, #4
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c8c:	b10a      	cbz	r2, 8008c92 <USBD_StdEPReq+0x182>
 8008c8e:	2a80      	cmp	r2, #128	; 0x80
 8008c90:	d124      	bne.n	8008cdc <USBD_StdEPReq+0x1cc>
                pep->status = 0x0000U;
 8008c92:	2300      	movs	r3, #0
 8008c94:	6023      	str	r3, [r4, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c96:	2202      	movs	r2, #2
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4628      	mov	r0, r5
 8008c9c:	f000 f845 	bl	8008d2a <USBD_CtlSendData>
  return ret;
 8008ca0:	4634      	mov	r4, r6
              break;
 8008ca2:	e74b      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ca4:	f002 000f 	and.w	r0, r2, #15
 8008ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008cac:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8008cb0:	6980      	ldr	r0, [r0, #24]
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d1df      	bne.n	8008c76 <USBD_StdEPReq+0x166>
                  USBD_CtlError(pdev, req);
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7ff fd2b 	bl	8008712 <USBD_CtlError>
  return ret;
 8008cbc:	4634      	mov	r4, r6
                  break;
 8008cbe:	e73d      	b.n	8008b3c <USBD_StdEPReq+0x2c>
                  USBD_CtlError(pdev, req);
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f7ff fd26 	bl	8008712 <USBD_CtlError>
  return ret;
 8008cc6:	4634      	mov	r4, r6
                  break;
 8008cc8:	e738      	b.n	8008b3c <USBD_StdEPReq+0x2c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cca:	f002 037f 	and.w	r3, r2, #127	; 0x7f
 8008cce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008cd2:	009c      	lsls	r4, r3, #2
 8008cd4:	3410      	adds	r4, #16
 8008cd6:	442c      	add	r4, r5
 8008cd8:	3404      	adds	r4, #4
 8008cda:	e7d7      	b.n	8008c8c <USBD_StdEPReq+0x17c>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cdc:	4611      	mov	r1, r2
 8008cde:	4628      	mov	r0, r5
 8008ce0:	f002 f843 	bl	800ad6a <USBD_LL_IsStallEP>
 8008ce4:	b110      	cbz	r0, 8008cec <USBD_StdEPReq+0x1dc>
                pep->status = 0x0001U;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	e7d4      	b.n	8008c96 <USBD_StdEPReq+0x186>
                pep->status = 0x0000U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	6023      	str	r3, [r4, #0]
 8008cf0:	e7d1      	b.n	8008c96 <USBD_StdEPReq+0x186>

08008cf2 <USBD_GetString>:
  if (desc != NULL)
 8008cf2:	b1c8      	cbz	r0, 8008d28 <USBD_GetString+0x36>
{
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	4616      	mov	r6, r2
 8008cfa:	4604      	mov	r4, r0
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008cfc:	f7ff fce2 	bl	80086c4 <USBD_GetLen>
 8008d00:	3001      	adds	r0, #1
 8008d02:	0040      	lsls	r0, r0, #1
 8008d04:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d06:	7028      	strb	r0, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	706b      	strb	r3, [r5, #1]
 8008d0c:	2302      	movs	r3, #2
    while (*desc != '\0')
 8008d0e:	e007      	b.n	8008d20 <USBD_GetString+0x2e>
      unicode[idx++] = *desc++;
 8008d10:	3401      	adds	r4, #1
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	54e8      	strb	r0, [r5, r3]
      unicode[idx++] =  0U;
 8008d18:	3302      	adds	r3, #2
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0')
 8008d20:	7820      	ldrb	r0, [r4, #0]
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d1f4      	bne.n	8008d10 <USBD_GetString+0x1e>
}
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	4770      	bx	lr

08008d2a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008d2a:	b510      	push	{r4, lr}
 8008d2c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d34:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8008d36:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d38:	460a      	mov	r2, r1
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	f002 f834 	bl	800ada8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008d40:	2000      	movs	r0, #0
 8008d42:	bd10      	pop	{r4, pc}

08008d44 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008d44:	b508      	push	{r3, lr}
 8008d46:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008d48:	460a      	mov	r2, r1
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	f002 f82c 	bl	800ada8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008d50:	2000      	movs	r0, #0
 8008d52:	bd08      	pop	{r3, pc}

08008d54 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008d54:	b510      	push	{r4, lr}
 8008d56:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008d58:	2203      	movs	r2, #3
 8008d5a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008d5e:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008d62:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d66:	460a      	mov	r2, r1
 8008d68:	2100      	movs	r1, #0
 8008d6a:	f002 f825 	bl	800adb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008d6e:	2000      	movs	r0, #0
 8008d70:	bd10      	pop	{r4, pc}

08008d72 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008d72:	b508      	push	{r3, lr}
 8008d74:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d76:	460a      	mov	r2, r1
 8008d78:	2100      	movs	r1, #0
 8008d7a:	f002 f81d 	bl	800adb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008d7e:	2000      	movs	r0, #0
 8008d80:	bd08      	pop	{r3, pc}

08008d82 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d82:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d84:	2304      	movs	r3, #4
 8008d86:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	4619      	mov	r1, r3
 8008d90:	f002 f80a 	bl	800ada8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8008d94:	2000      	movs	r0, #0
 8008d96:	bd08      	pop	{r3, pc}

08008d98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d98:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d9a:	2305      	movs	r3, #5
 8008d9c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008da0:	2300      	movs	r3, #0
 8008da2:	461a      	mov	r2, r3
 8008da4:	4619      	mov	r1, r3
 8008da6:	f002 f807 	bl	800adb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008daa:	2000      	movs	r0, #0
 8008dac:	bd08      	pop	{r3, pc}
	...

08008db0 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008db0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008db4:	b993      	cbnz	r3, 8008ddc <osKernelInitialize+0x2c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db6:	f3ef 8310 	mrs	r3, PRIMASK
 8008dba:	b993      	cbnz	r3, 8008de2 <osKernelInitialize+0x32>
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <osKernelInitialize+0x40>)
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	2802      	cmp	r0, #2
 8008dc2:	d004      	beq.n	8008dce <osKernelInitialize+0x1e>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dc4:	b980      	cbnz	r0, 8008de8 <osKernelInitialize+0x38>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <osKernelInitialize+0x40>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008dcc:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dce:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f6      	beq.n	8008dc4 <osKernelInitialize+0x14>
    stat = osErrorISR;
 8008dd6:	f06f 0005 	mvn.w	r0, #5
 8008dda:	4770      	bx	lr
 8008ddc:	f06f 0005 	mvn.w	r0, #5
 8008de0:	4770      	bx	lr
 8008de2:	f06f 0005 	mvn.w	r0, #5
 8008de6:	4770      	bx	lr
    } else {
      stat = osError;
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000a00 	.word	0x20000a00

08008df4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008df4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008df6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dfa:	b9b3      	cbnz	r3, 8008e2a <osKernelStart+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008e00:	b9b3      	cbnz	r3, 8008e30 <osKernelStart+0x3c>
 8008e02:	4b0e      	ldr	r3, [pc, #56]	; (8008e3c <osKernelStart+0x48>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d008      	beq.n	8008e1c <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d113      	bne.n	8008e36 <osKernelStart+0x42>
      KernelState = osKernelRunning;
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	; (8008e3c <osKernelStart+0x48>)
 8008e10:	2202      	movs	r2, #2
 8008e12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008e14:	f000 fe44 	bl	8009aa0 <vTaskStartScheduler>
      stat = osOK;
 8008e18:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8008e1a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e1c:	f3ef 8211 	mrs	r2, BASEPRI
  if (IS_IRQ()) {
 8008e20:	2a00      	cmp	r2, #0
 8008e22:	d0f2      	beq.n	8008e0a <osKernelStart+0x16>
    stat = osErrorISR;
 8008e24:	f06f 0005 	mvn.w	r0, #5
 8008e28:	e7f7      	b.n	8008e1a <osKernelStart+0x26>
 8008e2a:	f06f 0005 	mvn.w	r0, #5
 8008e2e:	e7f4      	b.n	8008e1a <osKernelStart+0x26>
 8008e30:	f06f 0005 	mvn.w	r0, #5
 8008e34:	e7f1      	b.n	8008e1a <osKernelStart+0x26>
      stat = osError;
 8008e36:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8008e3a:	e7ee      	b.n	8008e1a <osKernelStart+0x26>
 8008e3c:	20000a00 	.word	0x20000a00

08008e40 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e44:	2400      	movs	r4, #0
 8008e46:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e48:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8008e4c:	2c00      	cmp	r4, #0
 8008e4e:	d143      	bne.n	8008ed8 <osThreadNew+0x98>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e50:	f3ef 8310 	mrs	r3, PRIMASK
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d13f      	bne.n	8008ed8 <osThreadNew+0x98>
 8008e58:	4b33      	ldr	r3, [pc, #204]	; (8008f28 <osThreadNew+0xe8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d021      	beq.n	8008ea4 <osThreadNew+0x64>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	d039      	beq.n	8008ed8 <osThreadNew+0x98>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8008e64:	2300      	movs	r3, #0
 8008e66:	f88d 3017 	strb.w	r3, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008e6a:	b362      	cbz	r2, 8008ec6 <osThreadNew+0x86>
      if (attr->name != NULL) {
 8008e6c:	6815      	ldr	r5, [r2, #0]
 8008e6e:	b1ed      	cbz	r5, 8008eac <osThreadNew+0x6c>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8008e70:	6993      	ldr	r3, [r2, #24]
 8008e72:	b903      	cbnz	r3, 8008e76 <osThreadNew+0x36>
    prio  = (UBaseType_t)osPriorityNormal;
 8008e74:	2318      	movs	r3, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e76:	1e5c      	subs	r4, r3, #1
 8008e78:	2c37      	cmp	r4, #55	; 0x37
 8008e7a:	d851      	bhi.n	8008f20 <osThreadNew+0xe0>
 8008e7c:	6854      	ldr	r4, [r2, #4]
 8008e7e:	f014 0f01 	tst.w	r4, #1
 8008e82:	d14f      	bne.n	8008f24 <osThreadNew+0xe4>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008e84:	6956      	ldr	r6, [r2, #20]
 8008e86:	b1a6      	cbz	r6, 8008eb2 <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e88:	ea4f 0c96 	mov.w	ip, r6, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e8c:	6894      	ldr	r4, [r2, #8]
 8008e8e:	b12c      	cbz	r4, 8008e9c <osThreadNew+0x5c>
 8008e90:	68d7      	ldr	r7, [r2, #12]
 8008e92:	2f5b      	cmp	r7, #91	; 0x5b
 8008e94:	d902      	bls.n	8008e9c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e96:	6917      	ldr	r7, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e98:	b107      	cbz	r7, 8008e9c <osThreadNew+0x5c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e9a:	bb06      	cbnz	r6, 8008ede <osThreadNew+0x9e>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e9c:	b164      	cbz	r4, 8008eb8 <osThreadNew+0x78>
    mem   = -1;
 8008e9e:	f04f 34ff 	mov.w	r4, #4294967295
 8008ea2:	e016      	b.n	8008ed2 <osThreadNew+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea4:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8008ea8:	b9b3      	cbnz	r3, 8008ed8 <osThreadNew+0x98>
 8008eaa:	e7d9      	b.n	8008e60 <osThreadNew+0x20>
    name  = &empty;
 8008eac:	f10d 0517 	add.w	r5, sp, #23
 8008eb0:	e7de      	b.n	8008e70 <osThreadNew+0x30>
    stack = configMINIMAL_STACK_SIZE;
 8008eb2:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8008eb6:	e7e9      	b.n	8008e8c <osThreadNew+0x4c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008eb8:	68d4      	ldr	r4, [r2, #12]
 8008eba:	b994      	cbnz	r4, 8008ee2 <osThreadNew+0xa2>
 8008ebc:	6914      	ldr	r4, [r2, #16]
 8008ebe:	b19c      	cbz	r4, 8008ee8 <osThreadNew+0xa8>
    mem   = -1;
 8008ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ec4:	e005      	b.n	8008ed2 <osThreadNew+0x92>
          mem = 0;
        }
      }
    }
    else {
      mem = 0;
 8008ec6:	2400      	movs	r4, #0
    prio  = (UBaseType_t)osPriorityNormal;
 8008ec8:	2318      	movs	r3, #24
    stack = configMINIMAL_STACK_SIZE;
 8008eca:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8008ece:	f10d 0517 	add.w	r5, sp, #23
    }

    if (mem == 1) {
 8008ed2:	2c01      	cmp	r4, #1
 8008ed4:	d00a      	beq.n	8008eec <osThreadNew+0xac>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8008ed6:	b1ac      	cbz	r4, 8008f04 <osThreadNew+0xc4>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008ed8:	9804      	ldr	r0, [sp, #16]
}
 8008eda:	b007      	add	sp, #28
 8008edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mem = 1;
 8008ede:	2401      	movs	r4, #1
 8008ee0:	e7f7      	b.n	8008ed2 <osThreadNew+0x92>
    mem   = -1;
 8008ee2:	f04f 34ff 	mov.w	r4, #4294967295
 8008ee6:	e7f4      	b.n	8008ed2 <osThreadNew+0x92>
          mem = 0;
 8008ee8:	2400      	movs	r4, #0
 8008eea:	e7f2      	b.n	8008ed2 <osThreadNew+0x92>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008eec:	6914      	ldr	r4, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008eee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ef0:	9202      	str	r2, [sp, #8]
 8008ef2:	9401      	str	r4, [sp, #4]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	4662      	mov	r2, ip
 8008efa:	4629      	mov	r1, r5
 8008efc:	f000 fd62 	bl	80099c4 <xTaskCreateStatic>
 8008f00:	9004      	str	r0, [sp, #16]
 8008f02:	e7e9      	b.n	8008ed8 <osThreadNew+0x98>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f04:	aa04      	add	r2, sp, #16
 8008f06:	9201      	str	r2, [sp, #4]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	fa1f f28c 	uxth.w	r2, ip
 8008f10:	4629      	mov	r1, r5
 8008f12:	f000 fd90 	bl	8009a36 <xTaskCreate>
 8008f16:	2801      	cmp	r0, #1
 8008f18:	d0de      	beq.n	8008ed8 <osThreadNew+0x98>
          hTask = NULL;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	e7db      	b.n	8008ed8 <osThreadNew+0x98>
        return (NULL);
 8008f20:	2000      	movs	r0, #0
 8008f22:	e7da      	b.n	8008eda <osThreadNew+0x9a>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7d8      	b.n	8008eda <osThreadNew+0x9a>
 8008f28:	20000a00 	.word	0x20000a00

08008f2c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f2c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f32:	b9a3      	cbnz	r3, 8008f5e <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f34:	f3ef 8310 	mrs	r3, PRIMASK
 8008f38:	b9a3      	cbnz	r3, 8008f64 <osDelay+0x38>
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <osDelay+0x40>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8008f42:	b940      	cbnz	r0, 8008f56 <osDelay+0x2a>
    stat = osOK;
 8008f44:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8008f46:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f48:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0f8      	beq.n	8008f42 <osDelay+0x16>
    stat = osErrorISR;
 8008f50:	f06f 0005 	mvn.w	r0, #5
 8008f54:	e7f7      	b.n	8008f46 <osDelay+0x1a>
      vTaskDelay(ticks);
 8008f56:	f000 ff03 	bl	8009d60 <vTaskDelay>
    stat = osOK;
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	e7f3      	b.n	8008f46 <osDelay+0x1a>
    stat = osErrorISR;
 8008f5e:	f06f 0005 	mvn.w	r0, #5
 8008f62:	e7f0      	b.n	8008f46 <osDelay+0x1a>
 8008f64:	f06f 0005 	mvn.w	r0, #5
 8008f68:	e7ed      	b.n	8008f46 <osDelay+0x1a>
 8008f6a:	bf00      	nop
 8008f6c:	20000a00 	.word	0x20000a00

08008f70 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f70:	4b03      	ldr	r3, [pc, #12]	; (8008f80 <vApplicationGetIdleTaskMemory+0x10>)
 8008f72:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <vApplicationGetIdleTaskMemory+0x14>)
 8008f76:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f78:	2380      	movs	r3, #128	; 0x80
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	200009a4 	.word	0x200009a4
 8008f84:	200007a4 	.word	0x200007a4

08008f88 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f88:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <vApplicationGetTimerTaskMemory+0x10>)
 8008f8a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f8c:	4b03      	ldr	r3, [pc, #12]	; (8008f9c <vApplicationGetTimerTaskMemory+0x14>)
 8008f8e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f94:	6013      	str	r3, [r2, #0]
}
 8008f96:	4770      	bx	lr
 8008f98:	20000e04 	.word	0x20000e04
 8008f9c:	20000a04 	.word	0x20000a04

08008fa0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa0:	f100 0308 	add.w	r3, r0, #8
 8008fa4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fac:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fae:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fb4:	4770      	bx	lr

08008fb6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fba:	4770      	bx	lr

08008fbc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fbc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fbe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fc4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fc6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008fc8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008fca:	6803      	ldr	r3, [r0, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	6003      	str	r3, [r0, #0]
}
 8008fd0:	4770      	bx	lr

08008fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fd2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fd4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fd6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008fda:	d011      	beq.n	8009000 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fdc:	f100 0308 	add.w	r3, r0, #8
 8008fe0:	461c      	mov	r4, r3
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	42aa      	cmp	r2, r5
 8008fe8:	d9fa      	bls.n	8008fe0 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008fea:	6863      	ldr	r3, [r4, #4]
 8008fec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008fee:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008ff0:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008ff2:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008ff4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008ff6:	6803      	ldr	r3, [r0, #0]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	6003      	str	r3, [r0, #0]
}
 8008ffc:	bc30      	pop	{r4, r5}
 8008ffe:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8009000:	6904      	ldr	r4, [r0, #16]
 8009002:	e7f2      	b.n	8008fea <vListInsert+0x18>

08009004 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009004:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009006:	6841      	ldr	r1, [r0, #4]
 8009008:	6882      	ldr	r2, [r0, #8]
 800900a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800900c:	6841      	ldr	r1, [r0, #4]
 800900e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009010:	685a      	ldr	r2, [r3, #4]
 8009012:	4282      	cmp	r2, r0
 8009014:	d006      	beq.n	8009024 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009016:	2200      	movs	r2, #0
 8009018:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	3a01      	subs	r2, #1
 800901e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009020:	6818      	ldr	r0, [r3, #0]
}
 8009022:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009024:	6882      	ldr	r2, [r0, #8]
 8009026:	605a      	str	r2, [r3, #4]
 8009028:	e7f5      	b.n	8009016 <uxListRemove+0x12>

0800902a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800902a:	b510      	push	{r4, lr}
 800902c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800902e:	f001 fa99 	bl	800a564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009032:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009036:	429a      	cmp	r2, r3
 8009038:	d004      	beq.n	8009044 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800903a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800903c:	f001 fab4 	bl	800a5a8 <vPortExitCritical>

	return xReturn;
}
 8009040:	4620      	mov	r0, r4
 8009042:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8009044:	2401      	movs	r4, #1
 8009046:	e7f9      	b.n	800903c <prvIsQueueFull+0x12>

08009048 <prvIsQueueEmpty>:
{
 8009048:	b510      	push	{r4, lr}
 800904a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800904c:	f001 fa8a 	bl	800a564 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009050:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009052:	b923      	cbnz	r3, 800905e <prvIsQueueEmpty+0x16>
			xReturn = pdTRUE;
 8009054:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8009056:	f001 faa7 	bl	800a5a8 <vPortExitCritical>
}
 800905a:	4620      	mov	r0, r4
 800905c:	bd10      	pop	{r4, pc}
			xReturn = pdFALSE;
 800905e:	2400      	movs	r4, #0
 8009060:	e7f9      	b.n	8009056 <prvIsQueueEmpty+0xe>

08009062 <prvCopyDataToQueue>:
{
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009068:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800906a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800906c:	b95a      	cbnz	r2, 8009086 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800906e:	6803      	ldr	r3, [r0, #0]
 8009070:	b11b      	cbz	r3, 800907a <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8009072:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009074:	3601      	adds	r6, #1
 8009076:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8009078:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800907a:	6840      	ldr	r0, [r0, #4]
 800907c:	f000 ffbe 	bl	8009ffc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	6063      	str	r3, [r4, #4]
 8009084:	e7f6      	b.n	8009074 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8009086:	b96d      	cbnz	r5, 80090a4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8009088:	6880      	ldr	r0, [r0, #8]
 800908a:	f001 fed3 	bl	800ae34 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800908e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009090:	68a3      	ldr	r3, [r4, #8]
 8009092:	4413      	add	r3, r2
 8009094:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009096:	6862      	ldr	r2, [r4, #4]
 8009098:	4293      	cmp	r3, r2
 800909a:	d319      	bcc.n	80090d0 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80090a0:	4628      	mov	r0, r5
 80090a2:	e7e7      	b.n	8009074 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a4:	68c0      	ldr	r0, [r0, #12]
 80090a6:	f001 fec5 	bl	800ae34 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80090aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80090ac:	4251      	negs	r1, r2
 80090ae:	68e3      	ldr	r3, [r4, #12]
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80090b4:	6822      	ldr	r2, [r4, #0]
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d202      	bcs.n	80090c0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	440b      	add	r3, r1
 80090be:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80090c0:	2d02      	cmp	r5, #2
 80090c2:	d001      	beq.n	80090c8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80090c4:	2000      	movs	r0, #0
 80090c6:	e7d5      	b.n	8009074 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090c8:	b126      	cbz	r6, 80090d4 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80090ca:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80090cc:	2000      	movs	r0, #0
 80090ce:	e7d1      	b.n	8009074 <prvCopyDataToQueue+0x12>
 80090d0:	4628      	mov	r0, r5
 80090d2:	e7cf      	b.n	8009074 <prvCopyDataToQueue+0x12>
 80090d4:	2000      	movs	r0, #0
 80090d6:	e7cd      	b.n	8009074 <prvCopyDataToQueue+0x12>

080090d8 <prvCopyDataFromQueue>:
{
 80090d8:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80090dc:	b16a      	cbz	r2, 80090fa <prvCopyDataFromQueue+0x22>
{
 80090de:	b510      	push	{r4, lr}
 80090e0:	4608      	mov	r0, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80090e2:	68d9      	ldr	r1, [r3, #12]
 80090e4:	4411      	add	r1, r2
 80090e6:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090e8:	685c      	ldr	r4, [r3, #4]
 80090ea:	42a1      	cmp	r1, r4
 80090ec:	d301      	bcc.n	80090f2 <prvCopyDataFromQueue+0x1a>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	60d9      	str	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80090f2:	68d9      	ldr	r1, [r3, #12]
 80090f4:	f001 fe9e 	bl	800ae34 <memcpy>
}
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	4770      	bx	lr

080090fc <prvUnlockQueue>:
{
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8009100:	f001 fa30 	bl	800a564 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8009104:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8009108:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800910a:	e003      	b.n	8009114 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800910c:	f000 ff60 	bl	8009fd0 <vTaskMissedYield>
			--cTxLock;
 8009110:	3c01      	subs	r4, #1
 8009112:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009114:	2c00      	cmp	r4, #0
 8009116:	dd08      	ble.n	800912a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009118:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800911a:	b133      	cbz	r3, 800912a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800911c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8009120:	f000 fec2 	bl	8009ea8 <xTaskRemoveFromEventList>
 8009124:	2800      	cmp	r0, #0
 8009126:	d0f3      	beq.n	8009110 <prvUnlockQueue+0x14>
 8009128:	e7f0      	b.n	800910c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800912a:	23ff      	movs	r3, #255	; 0xff
 800912c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8009130:	f001 fa3a 	bl	800a5a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8009134:	f001 fa16 	bl	800a564 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8009138:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800913c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800913e:	e003      	b.n	8009148 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8009140:	f000 ff46 	bl	8009fd0 <vTaskMissedYield>
				--cRxLock;
 8009144:	3c01      	subs	r4, #1
 8009146:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009148:	2c00      	cmp	r4, #0
 800914a:	dd08      	ble.n	800915e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914c:	692b      	ldr	r3, [r5, #16]
 800914e:	b133      	cbz	r3, 800915e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009150:	f105 0010 	add.w	r0, r5, #16
 8009154:	f000 fea8 	bl	8009ea8 <xTaskRemoveFromEventList>
 8009158:	2800      	cmp	r0, #0
 800915a:	d0f3      	beq.n	8009144 <prvUnlockQueue+0x48>
 800915c:	e7f0      	b.n	8009140 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800915e:	23ff      	movs	r3, #255	; 0xff
 8009160:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8009164:	f001 fa20 	bl	800a5a8 <vPortExitCritical>
}
 8009168:	bd38      	pop	{r3, r4, r5, pc}
	...

0800916c <xQueueGenericReset>:
{
 800916c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800916e:	b1e0      	cbz	r0, 80091aa <xQueueGenericReset+0x3e>
 8009170:	460d      	mov	r5, r1
 8009172:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8009174:	f001 f9f6 	bl	800a564 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009178:	6821      	ldr	r1, [r4, #0]
 800917a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800917c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800917e:	fb03 1002 	mla	r0, r3, r2, r1
 8009182:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009184:	2000      	movs	r0, #0
 8009186:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009188:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800918a:	3a01      	subs	r2, #1
 800918c:	fb02 1303 	mla	r3, r2, r3, r1
 8009190:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009192:	23ff      	movs	r3, #255	; 0xff
 8009194:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009198:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800919c:	b9ed      	cbnz	r5, 80091da <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800919e:	6923      	ldr	r3, [r4, #16]
 80091a0:	b963      	cbnz	r3, 80091bc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80091a2:	f001 fa01 	bl	800a5a8 <vPortExitCritical>
}
 80091a6:	2001      	movs	r0, #1
 80091a8:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ae:	f383 8811 	msr	BASEPRI, r3
 80091b2:	f3bf 8f6f 	isb	sy
 80091b6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80091ba:	e7fe      	b.n	80091ba <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091bc:	f104 0010 	add.w	r0, r4, #16
 80091c0:	f000 fe72 	bl	8009ea8 <xTaskRemoveFromEventList>
 80091c4:	2800      	cmp	r0, #0
 80091c6:	d0ec      	beq.n	80091a2 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80091c8:	4b08      	ldr	r3, [pc, #32]	; (80091ec <xQueueGenericReset+0x80>)
 80091ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	f3bf 8f4f 	dsb	sy
 80091d4:	f3bf 8f6f 	isb	sy
 80091d8:	e7e3      	b.n	80091a2 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091da:	f104 0010 	add.w	r0, r4, #16
 80091de:	f7ff fedf 	bl	8008fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80091e6:	f7ff fedb 	bl	8008fa0 <vListInitialise>
 80091ea:	e7da      	b.n	80091a2 <xQueueGenericReset+0x36>
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <prvInitialiseNewQueue>:
{
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	461d      	mov	r5, r3
 80091f4:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 80091f6:	460b      	mov	r3, r1
 80091f8:	b949      	cbnz	r1, 800920e <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80091fa:	6024      	str	r4, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80091fc:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80091fe:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009200:	2101      	movs	r1, #1
 8009202:	4620      	mov	r0, r4
 8009204:	f7ff ffb2 	bl	800916c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8009208:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800920c:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800920e:	6022      	str	r2, [r4, #0]
 8009210:	e7f4      	b.n	80091fc <prvInitialiseNewQueue+0xc>

08009212 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009212:	b940      	cbnz	r0, 8009226 <xQueueGenericCreateStatic+0x14>
 8009214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009218:	f383 8811 	msr	BASEPRI, r3
 800921c:	f3bf 8f6f 	isb	sy
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	e7fe      	b.n	8009224 <xQueueGenericCreateStatic+0x12>
	{
 8009226:	b530      	push	{r4, r5, lr}
 8009228:	b085      	sub	sp, #20
 800922a:	461c      	mov	r4, r3
 800922c:	4605      	mov	r5, r0
		configASSERT( pxStaticQueue != NULL );
 800922e:	b153      	cbz	r3, 8009246 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009230:	b192      	cbz	r2, 8009258 <xQueueGenericCreateStatic+0x46>
 8009232:	b989      	cbnz	r1, 8009258 <xQueueGenericCreateStatic+0x46>
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	e7fe      	b.n	8009244 <xQueueGenericCreateStatic+0x32>
 8009246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924a:	f383 8811 	msr	BASEPRI, r3
 800924e:	f3bf 8f6f 	isb	sy
 8009252:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8009256:	e7fe      	b.n	8009256 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009258:	b16a      	cbz	r2, 8009276 <xQueueGenericCreateStatic+0x64>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800925a:	2350      	movs	r3, #80	; 0x50
 800925c:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	2b50      	cmp	r3, #80	; 0x50
 8009262:	d013      	beq.n	800928c <xQueueGenericCreateStatic+0x7a>
 8009264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	e7fe      	b.n	8009274 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009276:	2900      	cmp	r1, #0
 8009278:	d0ef      	beq.n	800925a <xQueueGenericCreateStatic+0x48>
 800927a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	e7fe      	b.n	800928a <xQueueGenericCreateStatic+0x78>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800928c:	2301      	movs	r3, #1
 800928e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009292:	9400      	str	r4, [sp, #0]
 8009294:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8009298:	4628      	mov	r0, r5
 800929a:	f7ff ffa9 	bl	80091f0 <prvInitialiseNewQueue>
	}
 800929e:	4620      	mov	r0, r4
 80092a0:	b005      	add	sp, #20
 80092a2:	bd30      	pop	{r4, r5, pc}

080092a4 <xQueueGenericSend>:
{
 80092a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092a6:	b085      	sub	sp, #20
 80092a8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80092aa:	b188      	cbz	r0, 80092d0 <xQueueGenericSend+0x2c>
 80092ac:	460e      	mov	r6, r1
 80092ae:	461d      	mov	r5, r3
 80092b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092b2:	b1b1      	cbz	r1, 80092e2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80092b4:	2d02      	cmp	r5, #2
 80092b6:	d120      	bne.n	80092fa <xQueueGenericSend+0x56>
 80092b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d01d      	beq.n	80092fa <xQueueGenericSend+0x56>
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	e7fe      	b.n	80092ce <xQueueGenericSend+0x2a>
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	f383 8811 	msr	BASEPRI, r3
 80092d8:	f3bf 8f6f 	isb	sy
 80092dc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80092e0:	e7fe      	b.n	80092e0 <xQueueGenericSend+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0e5      	beq.n	80092b4 <xQueueGenericSend+0x10>
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	e7fe      	b.n	80092f8 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092fa:	f000 fe6f 	bl	8009fdc <xTaskGetSchedulerState>
 80092fe:	4607      	mov	r7, r0
 8009300:	b958      	cbnz	r0, 800931a <xQueueGenericSend+0x76>
 8009302:	9b01      	ldr	r3, [sp, #4]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d044      	beq.n	8009392 <xQueueGenericSend+0xee>
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	e7fe      	b.n	8009318 <xQueueGenericSend+0x74>
 800931a:	2700      	movs	r7, #0
 800931c:	e039      	b.n	8009392 <xQueueGenericSend+0xee>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800931e:	462a      	mov	r2, r5
 8009320:	4631      	mov	r1, r6
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff fe9d 	bl	8009062 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800932a:	b96a      	cbnz	r2, 8009348 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 800932c:	b138      	cbz	r0, 800933e <xQueueGenericSend+0x9a>
						queueYIELD_IF_USING_PREEMPTION();
 800932e:	4b3c      	ldr	r3, [pc, #240]	; (8009420 <xQueueGenericSend+0x17c>)
 8009330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009334:	601a      	str	r2, [r3, #0]
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800933e:	f001 f933 	bl	800a5a8 <vPortExitCritical>
				return pdPASS;
 8009342:	2001      	movs	r0, #1
}
 8009344:	b005      	add	sp, #20
 8009346:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009348:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800934c:	f000 fdac 	bl	8009ea8 <xTaskRemoveFromEventList>
 8009350:	2800      	cmp	r0, #0
 8009352:	d0f4      	beq.n	800933e <xQueueGenericSend+0x9a>
							queueYIELD_IF_USING_PREEMPTION();
 8009354:	4b32      	ldr	r3, [pc, #200]	; (8009420 <xQueueGenericSend+0x17c>)
 8009356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	e7eb      	b.n	800933e <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 8009366:	f001 f91f 	bl	800a5a8 <vPortExitCritical>
					return errQUEUE_FULL;
 800936a:	2000      	movs	r0, #0
 800936c:	e7ea      	b.n	8009344 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800936e:	a802      	add	r0, sp, #8
 8009370:	f000 fde0 	bl	8009f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009374:	2701      	movs	r7, #1
 8009376:	e019      	b.n	80093ac <xQueueGenericSend+0x108>
		prvLockQueue( pxQueue );
 8009378:	2300      	movs	r3, #0
 800937a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800937e:	e021      	b.n	80093c4 <xQueueGenericSend+0x120>
 8009380:	2300      	movs	r3, #0
 8009382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009386:	e023      	b.n	80093d0 <xQueueGenericSend+0x12c>
				prvUnlockQueue( pxQueue );
 8009388:	4620      	mov	r0, r4
 800938a:	f7ff feb7 	bl	80090fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800938e:	f000 fc6b 	bl	8009c68 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8009392:	f001 f8e7 	bl	800a564 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009396:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009398:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800939a:	429a      	cmp	r2, r3
 800939c:	d3bf      	bcc.n	800931e <xQueueGenericSend+0x7a>
 800939e:	2d02      	cmp	r5, #2
 80093a0:	d0bd      	beq.n	800931e <xQueueGenericSend+0x7a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0de      	beq.n	8009366 <xQueueGenericSend+0xc2>
				else if( xEntryTimeSet == pdFALSE )
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	d0e0      	beq.n	800936e <xQueueGenericSend+0xca>
		taskEXIT_CRITICAL();
 80093ac:	f001 f8fc 	bl	800a5a8 <vPortExitCritical>
		vTaskSuspendAll();
 80093b0:	f000 fbc0 	bl	8009b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093b4:	f001 f8d6 	bl	800a564 <vPortEnterCritical>
 80093b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80093bc:	b25b      	sxtb	r3, r3
 80093be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c2:	d0d9      	beq.n	8009378 <xQueueGenericSend+0xd4>
 80093c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ce:	d0d7      	beq.n	8009380 <xQueueGenericSend+0xdc>
 80093d0:	f001 f8ea 	bl	800a5a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093d4:	a901      	add	r1, sp, #4
 80093d6:	a802      	add	r0, sp, #8
 80093d8:	f000 fdb8 	bl	8009f4c <xTaskCheckForTimeOut>
 80093dc:	b9c8      	cbnz	r0, 8009412 <xQueueGenericSend+0x16e>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff fe23 	bl	800902a <prvIsQueueFull>
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0cf      	beq.n	8009388 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093e8:	9901      	ldr	r1, [sp, #4]
 80093ea:	f104 0010 	add.w	r0, r4, #16
 80093ee:	f000 fd27 	bl	8009e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7ff fe82 	bl	80090fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093f8:	f000 fc36 	bl	8009c68 <xTaskResumeAll>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1c8      	bne.n	8009392 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <xQueueGenericSend+0x17c>)
 8009402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009406:	601a      	str	r2, [r3, #0]
 8009408:	f3bf 8f4f 	dsb	sy
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	e7bf      	b.n	8009392 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 8009412:	4620      	mov	r0, r4
 8009414:	f7ff fe72 	bl	80090fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009418:	f000 fc26 	bl	8009c68 <xTaskResumeAll>
			return errQUEUE_FULL;
 800941c:	2000      	movs	r0, #0
 800941e:	e791      	b.n	8009344 <xQueueGenericSend+0xa0>
 8009420:	e000ed04 	.word	0xe000ed04

08009424 <xQueueGenericSendFromISR>:
{
 8009424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8009428:	b190      	cbz	r0, 8009450 <xQueueGenericSendFromISR+0x2c>
 800942a:	4689      	mov	r9, r1
 800942c:	4690      	mov	r8, r2
 800942e:	461f      	mov	r7, r3
 8009430:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009432:	b1b1      	cbz	r1, 8009462 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009434:	2f02      	cmp	r7, #2
 8009436:	d120      	bne.n	800947a <xQueueGenericSendFromISR+0x56>
 8009438:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800943a:	2b01      	cmp	r3, #1
 800943c:	d01d      	beq.n	800947a <xQueueGenericSendFromISR+0x56>
 800943e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	e7fe      	b.n	800944e <xQueueGenericSendFromISR+0x2a>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8009460:	e7fe      	b.n	8009460 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009462:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009464:	2b00      	cmp	r3, #0
 8009466:	d0e5      	beq.n	8009434 <xQueueGenericSendFromISR+0x10>
 8009468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946c:	f383 8811 	msr	BASEPRI, r3
 8009470:	f3bf 8f6f 	isb	sy
 8009474:	f3bf 8f4f 	dsb	sy
 8009478:	e7fe      	b.n	8009478 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800947a:	f001 f961 	bl	800a740 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800947e:	f3ef 8611 	mrs	r6, BASEPRI
 8009482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009492:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009494:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009496:	429a      	cmp	r2, r3
 8009498:	d306      	bcc.n	80094a8 <xQueueGenericSendFromISR+0x84>
 800949a:	2f02      	cmp	r7, #2
 800949c:	d004      	beq.n	80094a8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 800949e:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80094a0:	f386 8811 	msr	BASEPRI, r6
}
 80094a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80094a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80094ac:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ae:	463a      	mov	r2, r7
 80094b0:	4649      	mov	r1, r9
 80094b2:	4620      	mov	r0, r4
 80094b4:	f7ff fdd5 	bl	8009062 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80094b8:	f1b5 3fff 	cmp.w	r5, #4294967295
 80094bc:	d005      	beq.n	80094ca <xQueueGenericSendFromISR+0xa6>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094be:	1c6b      	adds	r3, r5, #1
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7ea      	b.n	80094a0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094cc:	b90b      	cbnz	r3, 80094d2 <xQueueGenericSendFromISR+0xae>
			xReturn = pdPASS;
 80094ce:	2001      	movs	r0, #1
 80094d0:	e7e6      	b.n	80094a0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80094d6:	f000 fce7 	bl	8009ea8 <xTaskRemoveFromEventList>
 80094da:	b130      	cbz	r0, 80094ea <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80094dc:	f1b8 0f00 	cmp.w	r8, #0
 80094e0:	d005      	beq.n	80094ee <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094e2:	2001      	movs	r0, #1
 80094e4:	f8c8 0000 	str.w	r0, [r8]
 80094e8:	e7da      	b.n	80094a0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80094ea:	2001      	movs	r0, #1
 80094ec:	e7d8      	b.n	80094a0 <xQueueGenericSendFromISR+0x7c>
 80094ee:	2001      	movs	r0, #1
 80094f0:	e7d6      	b.n	80094a0 <xQueueGenericSendFromISR+0x7c>
	...

080094f4 <xQueueReceive>:
{
 80094f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094f6:	b085      	sub	sp, #20
 80094f8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80094fa:	b190      	cbz	r0, 8009522 <xQueueReceive+0x2e>
 80094fc:	460e      	mov	r6, r1
 80094fe:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009500:	b1c1      	cbz	r1, 8009534 <xQueueReceive+0x40>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009502:	f000 fd6b 	bl	8009fdc <xTaskGetSchedulerState>
 8009506:	4607      	mov	r7, r0
 8009508:	bb00      	cbnz	r0, 800954c <xQueueReceive+0x58>
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d05c      	beq.n	80095ca <xQueueReceive+0xd6>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	e7fe      	b.n	8009520 <xQueueReceive+0x2c>
 8009522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8009532:	e7fe      	b.n	8009532 <xQueueReceive+0x3e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009534:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0e3      	beq.n	8009502 <xQueueReceive+0xe>
 800953a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	e7fe      	b.n	800954a <xQueueReceive+0x56>
 800954c:	2700      	movs	r7, #0
 800954e:	e03c      	b.n	80095ca <xQueueReceive+0xd6>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009550:	4631      	mov	r1, r6
 8009552:	4620      	mov	r0, r4
 8009554:	f7ff fdc0 	bl	80090d8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009558:	3d01      	subs	r5, #1
 800955a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	b923      	cbnz	r3, 800956a <xQueueReceive+0x76>
				taskEXIT_CRITICAL();
 8009560:	f001 f822 	bl	800a5a8 <vPortExitCritical>
				return pdPASS;
 8009564:	2001      	movs	r0, #1
}
 8009566:	b005      	add	sp, #20
 8009568:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800956a:	f104 0010 	add.w	r0, r4, #16
 800956e:	f000 fc9b 	bl	8009ea8 <xTaskRemoveFromEventList>
 8009572:	2800      	cmp	r0, #0
 8009574:	d0f4      	beq.n	8009560 <xQueueReceive+0x6c>
						queueYIELD_IF_USING_PREEMPTION();
 8009576:	4b35      	ldr	r3, [pc, #212]	; (800964c <xQueueReceive+0x158>)
 8009578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	e7eb      	b.n	8009560 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 8009588:	f001 f80e 	bl	800a5a8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800958c:	2000      	movs	r0, #0
 800958e:	e7ea      	b.n	8009566 <xQueueReceive+0x72>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009590:	a802      	add	r0, sp, #8
 8009592:	f000 fccf 	bl	8009f34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009596:	2701      	movs	r7, #1
 8009598:	e021      	b.n	80095de <xQueueReceive+0xea>
		prvLockQueue( pxQueue );
 800959a:	2300      	movs	r3, #0
 800959c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80095a0:	e029      	b.n	80095f6 <xQueueReceive+0x102>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a8:	e02b      	b.n	8009602 <xQueueReceive+0x10e>
				prvUnlockQueue( pxQueue );
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff fda6 	bl	80090fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095b0:	f000 fb5a 	bl	8009c68 <xTaskResumeAll>
 80095b4:	e009      	b.n	80095ca <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 80095b6:	4620      	mov	r0, r4
 80095b8:	f7ff fda0 	bl	80090fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095bc:	f000 fb54 	bl	8009c68 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80095c0:	4620      	mov	r0, r4
 80095c2:	f7ff fd41 	bl	8009048 <prvIsQueueEmpty>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d13d      	bne.n	8009646 <xQueueReceive+0x152>
		taskENTER_CRITICAL();
 80095ca:	f000 ffcb 	bl	800a564 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d1bd      	bne.n	8009550 <xQueueReceive+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0d6      	beq.n	8009588 <xQueueReceive+0x94>
				else if( xEntryTimeSet == pdFALSE )
 80095da:	2f00      	cmp	r7, #0
 80095dc:	d0d8      	beq.n	8009590 <xQueueReceive+0x9c>
		taskEXIT_CRITICAL();
 80095de:	f000 ffe3 	bl	800a5a8 <vPortExitCritical>
		vTaskSuspendAll();
 80095e2:	f000 faa7 	bl	8009b34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095e6:	f000 ffbd 	bl	800a564 <vPortEnterCritical>
 80095ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80095ee:	b25b      	sxtb	r3, r3
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f4:	d0d1      	beq.n	800959a <xQueueReceive+0xa6>
 80095f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80095fa:	b25b      	sxtb	r3, r3
 80095fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009600:	d0cf      	beq.n	80095a2 <xQueueReceive+0xae>
 8009602:	f000 ffd1 	bl	800a5a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009606:	a901      	add	r1, sp, #4
 8009608:	a802      	add	r0, sp, #8
 800960a:	f000 fc9f 	bl	8009f4c <xTaskCheckForTimeOut>
 800960e:	2800      	cmp	r0, #0
 8009610:	d1d1      	bne.n	80095b6 <xQueueReceive+0xc2>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009612:	4620      	mov	r0, r4
 8009614:	f7ff fd18 	bl	8009048 <prvIsQueueEmpty>
 8009618:	2800      	cmp	r0, #0
 800961a:	d0c6      	beq.n	80095aa <xQueueReceive+0xb6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800961c:	9901      	ldr	r1, [sp, #4]
 800961e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009622:	f000 fc0d 	bl	8009e40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff fd68 	bl	80090fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800962c:	f000 fb1c 	bl	8009c68 <xTaskResumeAll>
 8009630:	2800      	cmp	r0, #0
 8009632:	d1ca      	bne.n	80095ca <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <xQueueReceive+0x158>)
 8009636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	f3bf 8f4f 	dsb	sy
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	e7c1      	b.n	80095ca <xQueueReceive+0xd6>
				return errQUEUE_EMPTY;
 8009646:	2000      	movs	r0, #0
 8009648:	e78d      	b.n	8009566 <xQueueReceive+0x72>
 800964a:	bf00      	nop
 800964c:	e000ed04 	.word	0xe000ed04

08009650 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009650:	2300      	movs	r3, #0
 8009652:	e000      	b.n	8009656 <vQueueAddToRegistry+0x6>
 8009654:	3301      	adds	r3, #1
 8009656:	2b07      	cmp	r3, #7
 8009658:	d80b      	bhi.n	8009672 <vQueueAddToRegistry+0x22>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800965a:	4a06      	ldr	r2, [pc, #24]	; (8009674 <vQueueAddToRegistry+0x24>)
 800965c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009660:	2a00      	cmp	r2, #0
 8009662:	d1f7      	bne.n	8009654 <vQueueAddToRegistry+0x4>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009664:	4a03      	ldr	r2, [pc, #12]	; (8009674 <vQueueAddToRegistry+0x24>)
 8009666:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800966a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800966e:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009670:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009672:	4770      	bx	lr
 8009674:	200027d0 	.word	0x200027d0

08009678 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009678:	b570      	push	{r4, r5, r6, lr}
 800967a:	4604      	mov	r4, r0
 800967c:	460d      	mov	r5, r1
 800967e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009680:	f000 ff70 	bl	800a564 <vPortEnterCritical>
 8009684:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009688:	b25b      	sxtb	r3, r3
 800968a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800968e:	d00d      	beq.n	80096ac <vQueueWaitForMessageRestricted+0x34>
 8009690:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009694:	b25b      	sxtb	r3, r3
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d00b      	beq.n	80096b4 <vQueueWaitForMessageRestricted+0x3c>
 800969c:	f000 ff84 	bl	800a5a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80096a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096a2:	b15b      	cbz	r3, 80096bc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7ff fd29 	bl	80090fc <prvUnlockQueue>
	}
 80096aa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 80096ac:	2300      	movs	r3, #0
 80096ae:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80096b2:	e7ed      	b.n	8009690 <vQueueWaitForMessageRestricted+0x18>
 80096b4:	2300      	movs	r3, #0
 80096b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80096ba:	e7ef      	b.n	800969c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80096bc:	4632      	mov	r2, r6
 80096be:	4629      	mov	r1, r5
 80096c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80096c4:	f000 fbd4 	bl	8009e70 <vTaskPlaceOnEventListRestricted>
 80096c8:	e7ec      	b.n	80096a4 <vQueueWaitForMessageRestricted+0x2c>
	...

080096cc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <prvResetNextTaskUnblockTime+0x24>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	b923      	cbnz	r3, 80096de <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096d4:	4b07      	ldr	r3, [pc, #28]	; (80096f4 <prvResetNextTaskUnblockTime+0x28>)
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <prvResetNextTaskUnblockTime+0x24>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096e6:	685a      	ldr	r2, [r3, #4]
 80096e8:	4b02      	ldr	r3, [pc, #8]	; (80096f4 <prvResetNextTaskUnblockTime+0x28>)
 80096ea:	601a      	str	r2, [r3, #0]
	}
}
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	20000e64 	.word	0x20000e64
 80096f4:	2000130c 	.word	0x2000130c

080096f8 <prvInitialiseNewTask>:
{
 80096f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	4680      	mov	r8, r0
 80096fe:	460d      	mov	r5, r1
 8009700:	4617      	mov	r7, r2
 8009702:	4699      	mov	r9, r3
 8009704:	9e08      	ldr	r6, [sp, #32]
 8009706:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800970a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800970c:	0092      	lsls	r2, r2, #2
 800970e:	21a5      	movs	r1, #165	; 0xa5
 8009710:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009712:	f001 fbb7 	bl	800ae84 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009718:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 800971c:	3a01      	subs	r2, #1
 800971e:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009722:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009726:	2200      	movs	r2, #0
 8009728:	2a0f      	cmp	r2, #15
 800972a:	d807      	bhi.n	800973c <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800972c:	5ca9      	ldrb	r1, [r5, r2]
 800972e:	18a3      	adds	r3, r4, r2
 8009730:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8009734:	5cab      	ldrb	r3, [r5, r2]
 8009736:	b10b      	cbz	r3, 800973c <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009738:	3201      	adds	r2, #1
 800973a:	e7f5      	b.n	8009728 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800973c:	2300      	movs	r3, #0
 800973e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009742:	2e37      	cmp	r6, #55	; 0x37
 8009744:	d900      	bls.n	8009748 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009746:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 8009748:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800974a:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800974c:	2500      	movs	r5, #0
 800974e:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009750:	1d20      	adds	r0, r4, #4
 8009752:	f7ff fc30 	bl	8008fb6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009756:	f104 0018 	add.w	r0, r4, #24
 800975a:	f7ff fc2c 	bl	8008fb6 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800975e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009760:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 8009764:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009766:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8009768:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800976a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800976e:	464a      	mov	r2, r9
 8009770:	4641      	mov	r1, r8
 8009772:	4638      	mov	r0, r7
 8009774:	f000 fed2 	bl	800a51c <pxPortInitialiseStack>
 8009778:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800977a:	f1ba 0f00 	cmp.w	sl, #0
 800977e:	d001      	beq.n	8009784 <prvInitialiseNewTask+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009780:	f8ca 4000 	str.w	r4, [sl]
}
 8009784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009788 <prvInitialiseTaskLists>:
{
 8009788:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800978a:	2400      	movs	r4, #0
 800978c:	2c37      	cmp	r4, #55	; 0x37
 800978e:	d808      	bhi.n	80097a2 <prvInitialiseTaskLists+0x1a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009790:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8009794:	0093      	lsls	r3, r2, #2
 8009796:	480e      	ldr	r0, [pc, #56]	; (80097d0 <prvInitialiseTaskLists+0x48>)
 8009798:	4418      	add	r0, r3
 800979a:	f7ff fc01 	bl	8008fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800979e:	3401      	adds	r4, #1
 80097a0:	e7f4      	b.n	800978c <prvInitialiseTaskLists+0x4>
	vListInitialise( &xDelayedTaskList1 );
 80097a2:	4d0c      	ldr	r5, [pc, #48]	; (80097d4 <prvInitialiseTaskLists+0x4c>)
 80097a4:	4628      	mov	r0, r5
 80097a6:	f7ff fbfb 	bl	8008fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097aa:	4c0b      	ldr	r4, [pc, #44]	; (80097d8 <prvInitialiseTaskLists+0x50>)
 80097ac:	4620      	mov	r0, r4
 80097ae:	f7ff fbf7 	bl	8008fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097b2:	480a      	ldr	r0, [pc, #40]	; (80097dc <prvInitialiseTaskLists+0x54>)
 80097b4:	f7ff fbf4 	bl	8008fa0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80097b8:	4809      	ldr	r0, [pc, #36]	; (80097e0 <prvInitialiseTaskLists+0x58>)
 80097ba:	f7ff fbf1 	bl	8008fa0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80097be:	4809      	ldr	r0, [pc, #36]	; (80097e4 <prvInitialiseTaskLists+0x5c>)
 80097c0:	f7ff fbee 	bl	8008fa0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80097c4:	4b08      	ldr	r3, [pc, #32]	; (80097e8 <prvInitialiseTaskLists+0x60>)
 80097c6:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097c8:	4b08      	ldr	r3, [pc, #32]	; (80097ec <prvInitialiseTaskLists+0x64>)
 80097ca:	601c      	str	r4, [r3, #0]
}
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	bf00      	nop
 80097d0:	20000e6c 	.word	0x20000e6c
 80097d4:	200012e4 	.word	0x200012e4
 80097d8:	200012f8 	.word	0x200012f8
 80097dc:	20001314 	.word	0x20001314
 80097e0:	20001340 	.word	0x20001340
 80097e4:	2000132c 	.word	0x2000132c
 80097e8:	20000e64 	.word	0x20000e64
 80097ec:	20000e68 	.word	0x20000e68

080097f0 <prvAddNewTaskToReadyList>:
{
 80097f0:	b510      	push	{r4, lr}
 80097f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80097f4:	f000 feb6 	bl	800a564 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80097f8:	4a21      	ldr	r2, [pc, #132]	; (8009880 <prvAddNewTaskToReadyList+0x90>)
 80097fa:	6813      	ldr	r3, [r2, #0]
 80097fc:	3301      	adds	r3, #1
 80097fe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009800:	4b20      	ldr	r3, [pc, #128]	; (8009884 <prvAddNewTaskToReadyList+0x94>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	b15b      	cbz	r3, 800981e <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8009806:	4b20      	ldr	r3, [pc, #128]	; (8009888 <prvAddNewTaskToReadyList+0x98>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	b96b      	cbnz	r3, 8009828 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800980c:	4b1d      	ldr	r3, [pc, #116]	; (8009884 <prvAddNewTaskToReadyList+0x94>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009814:	429a      	cmp	r2, r3
 8009816:	d807      	bhi.n	8009828 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8009818:	4b1a      	ldr	r3, [pc, #104]	; (8009884 <prvAddNewTaskToReadyList+0x94>)
 800981a:	601c      	str	r4, [r3, #0]
 800981c:	e004      	b.n	8009828 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800981e:	4b19      	ldr	r3, [pc, #100]	; (8009884 <prvAddNewTaskToReadyList+0x94>)
 8009820:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009822:	6813      	ldr	r3, [r2, #0]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d027      	beq.n	8009878 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 8009828:	4a18      	ldr	r2, [pc, #96]	; (800988c <prvAddNewTaskToReadyList+0x9c>)
 800982a:	6813      	ldr	r3, [r2, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009830:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8009832:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009834:	4b16      	ldr	r3, [pc, #88]	; (8009890 <prvAddNewTaskToReadyList+0xa0>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4298      	cmp	r0, r3
 800983a:	d901      	bls.n	8009840 <prvAddNewTaskToReadyList+0x50>
 800983c:	4b14      	ldr	r3, [pc, #80]	; (8009890 <prvAddNewTaskToReadyList+0xa0>)
 800983e:	6018      	str	r0, [r3, #0]
 8009840:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009844:	1d21      	adds	r1, r4, #4
 8009846:	4b13      	ldr	r3, [pc, #76]	; (8009894 <prvAddNewTaskToReadyList+0xa4>)
 8009848:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800984c:	f7ff fbb6 	bl	8008fbc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8009850:	f000 feaa 	bl	800a5a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009854:	4b0c      	ldr	r3, [pc, #48]	; (8009888 <prvAddNewTaskToReadyList+0x98>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	b16b      	cbz	r3, 8009876 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <prvAddNewTaskToReadyList+0x94>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009862:	429a      	cmp	r2, r3
 8009864:	d207      	bcs.n	8009876 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 8009866:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <prvAddNewTaskToReadyList+0xa8>)
 8009868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986c:	601a      	str	r2, [r3, #0]
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	f3bf 8f6f 	isb	sy
}
 8009876:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8009878:	f7ff ff86 	bl	8009788 <prvInitialiseTaskLists>
 800987c:	e7d4      	b.n	8009828 <prvAddNewTaskToReadyList+0x38>
 800987e:	bf00      	nop
 8009880:	200012cc 	.word	0x200012cc
 8009884:	20000e60 	.word	0x20000e60
 8009888:	20001328 	.word	0x20001328
 800988c:	200012dc 	.word	0x200012dc
 8009890:	200012e0 	.word	0x200012e0
 8009894:	20000e6c 	.word	0x20000e6c
 8009898:	e000ed04 	.word	0xe000ed04

0800989c <prvDeleteTCB>:
	{
 800989c:	b510      	push	{r4, lr}
 800989e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098a0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 80098a4:	b163      	cbz	r3, 80098c0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d011      	beq.n	80098ce <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098aa:	2b02      	cmp	r3, #2
 80098ac:	d00e      	beq.n	80098cc <prvDeleteTCB+0x30>
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	e7fe      	b.n	80098be <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 80098c0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80098c2:	f001 f83f 	bl	800a944 <vPortFree>
				vPortFree( pxTCB );
 80098c6:	4620      	mov	r0, r4
 80098c8:	f001 f83c 	bl	800a944 <vPortFree>
	}
 80098cc:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80098ce:	f001 f839 	bl	800a944 <vPortFree>
 80098d2:	e7fb      	b.n	80098cc <prvDeleteTCB+0x30>

080098d4 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098d4:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <prvCheckTasksWaitingTermination+0x40>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	b1d3      	cbz	r3, 8009910 <prvCheckTasksWaitingTermination+0x3c>
{
 80098da:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 80098dc:	f000 fe42 	bl	800a564 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80098e0:	4b0d      	ldr	r3, [pc, #52]	; (8009918 <prvCheckTasksWaitingTermination+0x44>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098e6:	1d20      	adds	r0, r4, #4
 80098e8:	f7ff fb8c 	bl	8009004 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80098ec:	4a0b      	ldr	r2, [pc, #44]	; (800991c <prvCheckTasksWaitingTermination+0x48>)
 80098ee:	6813      	ldr	r3, [r2, #0]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80098f4:	4a07      	ldr	r2, [pc, #28]	; (8009914 <prvCheckTasksWaitingTermination+0x40>)
 80098f6:	6813      	ldr	r3, [r2, #0]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 80098fc:	f000 fe54 	bl	800a5a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8009900:	4620      	mov	r0, r4
 8009902:	f7ff ffcb 	bl	800989c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <prvCheckTasksWaitingTermination+0x40>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e6      	bne.n	80098dc <prvCheckTasksWaitingTermination+0x8>
}
 800990e:	bd10      	pop	{r4, pc}
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	200012d0 	.word	0x200012d0
 8009918:	20001340 	.word	0x20001340
 800991c:	200012cc 	.word	0x200012cc

08009920 <prvIdleTask>:
{
 8009920:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8009922:	f7ff ffd7 	bl	80098d4 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <prvIdleTask+0x20>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d9f9      	bls.n	8009922 <prvIdleTask+0x2>
				taskYIELD();
 800992e:	4b05      	ldr	r3, [pc, #20]	; (8009944 <prvIdleTask+0x24>)
 8009930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	f3bf 8f4f 	dsb	sy
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	e7f0      	b.n	8009922 <prvIdleTask+0x2>
 8009940:	20000e6c 	.word	0x20000e6c
 8009944:	e000ed04 	.word	0xe000ed04

08009948 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800994e:	4b17      	ldr	r3, [pc, #92]	; (80099ac <prvAddCurrentTaskToDelayedList+0x64>)
 8009950:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009952:	4b17      	ldr	r3, [pc, #92]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x68>)
 8009954:	6818      	ldr	r0, [r3, #0]
 8009956:	3004      	adds	r0, #4
 8009958:	f7ff fb54 	bl	8009004 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800995c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009960:	d00d      	beq.n	800997e <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009962:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009964:	4b12      	ldr	r3, [pc, #72]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x68>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800996a:	42a6      	cmp	r6, r4
 800996c:	d910      	bls.n	8009990 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800996e:	4b11      	ldr	r3, [pc, #68]	; (80099b4 <prvAddCurrentTaskToDelayedList+0x6c>)
 8009970:	6818      	ldr	r0, [r3, #0]
 8009972:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x68>)
 8009974:	6819      	ldr	r1, [r3, #0]
 8009976:	3104      	adds	r1, #4
 8009978:	f7ff fb2b 	bl	8008fd2 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800997c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800997e:	2d00      	cmp	r5, #0
 8009980:	d0ef      	beq.n	8009962 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009982:	4b0b      	ldr	r3, [pc, #44]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x68>)
 8009984:	6819      	ldr	r1, [r3, #0]
 8009986:	3104      	adds	r1, #4
 8009988:	480b      	ldr	r0, [pc, #44]	; (80099b8 <prvAddCurrentTaskToDelayedList+0x70>)
 800998a:	f7ff fb17 	bl	8008fbc <vListInsertEnd>
 800998e:	e7f5      	b.n	800997c <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009990:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <prvAddCurrentTaskToDelayedList+0x74>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <prvAddCurrentTaskToDelayedList+0x68>)
 8009996:	6819      	ldr	r1, [r3, #0]
 8009998:	3104      	adds	r1, #4
 800999a:	f7ff fb1a 	bl	8008fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <prvAddCurrentTaskToDelayedList+0x78>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	d9ea      	bls.n	800997c <prvAddCurrentTaskToDelayedList+0x34>
					xNextTaskUnblockTime = xTimeToWake;
 80099a6:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <prvAddCurrentTaskToDelayedList+0x78>)
 80099a8:	601c      	str	r4, [r3, #0]
}
 80099aa:	e7e7      	b.n	800997c <prvAddCurrentTaskToDelayedList+0x34>
 80099ac:	20001354 	.word	0x20001354
 80099b0:	20000e60 	.word	0x20000e60
 80099b4:	20000e68 	.word	0x20000e68
 80099b8:	2000132c 	.word	0x2000132c
 80099bc:	20000e64 	.word	0x20000e64
 80099c0:	2000130c 	.word	0x2000130c

080099c4 <xTaskCreateStatic>:
	{
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80099ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80099cc:	b175      	cbz	r5, 80099ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80099ce:	b1b4      	cbz	r4, 80099fe <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80099d0:	265c      	movs	r6, #92	; 0x5c
 80099d2:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80099d4:	9e04      	ldr	r6, [sp, #16]
 80099d6:	2e5c      	cmp	r6, #92	; 0x5c
 80099d8:	d01a      	beq.n	8009a10 <xTaskCreateStatic+0x4c>
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	e7fe      	b.n	80099ea <xTaskCreateStatic+0x26>
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80099fc:	e7fe      	b.n	80099fc <xTaskCreateStatic+0x38>
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8009a0e:	e7fe      	b.n	8009a0e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009a10:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009a12:	2502      	movs	r5, #2
 8009a14:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009a18:	2500      	movs	r5, #0
 8009a1a:	9503      	str	r5, [sp, #12]
 8009a1c:	9402      	str	r4, [sp, #8]
 8009a1e:	ad05      	add	r5, sp, #20
 8009a20:	9501      	str	r5, [sp, #4]
 8009a22:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009a24:	9500      	str	r5, [sp, #0]
 8009a26:	f7ff fe67 	bl	80096f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a2a:	4620      	mov	r0, r4
 8009a2c:	f7ff fee0 	bl	80097f0 <prvAddNewTaskToReadyList>
	}
 8009a30:	9805      	ldr	r0, [sp, #20]
 8009a32:	b006      	add	sp, #24
 8009a34:	bd70      	pop	{r4, r5, r6, pc}

08009a36 <xTaskCreate>:
	{
 8009a36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	4607      	mov	r7, r0
 8009a3e:	4688      	mov	r8, r1
 8009a40:	4614      	mov	r4, r2
 8009a42:	461e      	mov	r6, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a44:	0090      	lsls	r0, r2, #2
 8009a46:	f000 ff05 	bl	800a854 <pvPortMalloc>
			if( pxStack != NULL )
 8009a4a:	b300      	cbz	r0, 8009a8e <xTaskCreate+0x58>
 8009a4c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009a4e:	205c      	movs	r0, #92	; 0x5c
 8009a50:	f000 ff00 	bl	800a854 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009a54:	4605      	mov	r5, r0
 8009a56:	b1b0      	cbz	r0, 8009a86 <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 8009a58:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8009a5c:	b1e5      	cbz	r5, 8009a98 <xTaskCreate+0x62>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f885 3059 	strb.w	r3, [r5, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a64:	9303      	str	r3, [sp, #12]
 8009a66:	9502      	str	r5, [sp, #8]
 8009a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	4633      	mov	r3, r6
 8009a72:	4622      	mov	r2, r4
 8009a74:	4641      	mov	r1, r8
 8009a76:	4638      	mov	r0, r7
 8009a78:	f7ff fe3e 	bl	80096f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f7ff feb7 	bl	80097f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a82:	2001      	movs	r0, #1
 8009a84:	e005      	b.n	8009a92 <xTaskCreate+0x5c>
					vPortFree( pxStack );
 8009a86:	4648      	mov	r0, r9
 8009a88:	f000 ff5c 	bl	800a944 <vPortFree>
 8009a8c:	e7e6      	b.n	8009a5c <xTaskCreate+0x26>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8009a92:	b005      	add	sp, #20
 8009a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009a9c:	e7f9      	b.n	8009a92 <xTaskCreate+0x5c>
	...

08009aa0 <vTaskStartScheduler>:
{
 8009aa0:	b510      	push	{r4, lr}
 8009aa2:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009aa8:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009aaa:	aa07      	add	r2, sp, #28
 8009aac:	a906      	add	r1, sp, #24
 8009aae:	a805      	add	r0, sp, #20
 8009ab0:	f7ff fa5e 	bl	8008f70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ab4:	9b05      	ldr	r3, [sp, #20]
 8009ab6:	9302      	str	r3, [sp, #8]
 8009ab8:	9b06      	ldr	r3, [sp, #24]
 8009aba:	9301      	str	r3, [sp, #4]
 8009abc:	9400      	str	r4, [sp, #0]
 8009abe:	4623      	mov	r3, r4
 8009ac0:	9a07      	ldr	r2, [sp, #28]
 8009ac2:	4917      	ldr	r1, [pc, #92]	; (8009b20 <vTaskStartScheduler+0x80>)
 8009ac4:	4817      	ldr	r0, [pc, #92]	; (8009b24 <vTaskStartScheduler+0x84>)
 8009ac6:	f7ff ff7d 	bl	80099c4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8009aca:	b148      	cbz	r0, 8009ae0 <vTaskStartScheduler+0x40>
			xReturn = xTimerCreateTimerTask();
 8009acc:	f000 fb4a 	bl	800a164 <xTimerCreateTimerTask>
 8009ad0:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d006      	beq.n	8009ae4 <vTaskStartScheduler+0x44>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ada:	d018      	beq.n	8009b0e <vTaskStartScheduler+0x6e>
}
 8009adc:	b008      	add	sp, #32
 8009ade:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e7f6      	b.n	8009ad2 <vTaskStartScheduler+0x32>
 8009ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae8:	f383 8811 	msr	BASEPRI, r3
 8009aec:	f3bf 8f6f 	isb	sy
 8009af0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009af4:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <vTaskStartScheduler+0x88>)
 8009af6:	f04f 32ff 	mov.w	r2, #4294967295
 8009afa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009afc:	4b0b      	ldr	r3, [pc, #44]	; (8009b2c <vTaskStartScheduler+0x8c>)
 8009afe:	2201      	movs	r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <vTaskStartScheduler+0x90>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009b08:	f000 fdbe 	bl	800a688 <xPortStartScheduler>
 8009b0c:	e7e6      	b.n	8009adc <vTaskStartScheduler+0x3c>
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b1e:	e7fe      	b.n	8009b1e <vTaskStartScheduler+0x7e>
 8009b20:	0800e364 	.word	0x0800e364
 8009b24:	08009921 	.word	0x08009921
 8009b28:	2000130c 	.word	0x2000130c
 8009b2c:	20001328 	.word	0x20001328
 8009b30:	20001354 	.word	0x20001354

08009b34 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009b34:	4a02      	ldr	r2, [pc, #8]	; (8009b40 <vTaskSuspendAll+0xc>)
 8009b36:	6813      	ldr	r3, [r2, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	6013      	str	r3, [r2, #0]
}
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200012d8 	.word	0x200012d8

08009b44 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <xTaskGetTickCount+0x8>)
 8009b46:	6818      	ldr	r0, [r3, #0]
}
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20001354 	.word	0x20001354

08009b50 <xTaskIncrementTick>:
{
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b52:	4b3a      	ldr	r3, [pc, #232]	; (8009c3c <xTaskIncrementTick+0xec>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d165      	bne.n	8009c26 <xTaskIncrementTick+0xd6>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b5a:	4b39      	ldr	r3, [pc, #228]	; (8009c40 <xTaskIncrementTick+0xf0>)
 8009b5c:	681d      	ldr	r5, [r3, #0]
 8009b5e:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8009b60:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b62:	b9c5      	cbnz	r5, 8009b96 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009b64:	4b37      	ldr	r3, [pc, #220]	; (8009c44 <xTaskIncrementTick+0xf4>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	b143      	cbz	r3, 8009b7e <xTaskIncrementTick+0x2e>
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	e7fe      	b.n	8009b7c <xTaskIncrementTick+0x2c>
 8009b7e:	4a31      	ldr	r2, [pc, #196]	; (8009c44 <xTaskIncrementTick+0xf4>)
 8009b80:	6811      	ldr	r1, [r2, #0]
 8009b82:	4b31      	ldr	r3, [pc, #196]	; (8009c48 <xTaskIncrementTick+0xf8>)
 8009b84:	6818      	ldr	r0, [r3, #0]
 8009b86:	6010      	str	r0, [r2, #0]
 8009b88:	6019      	str	r1, [r3, #0]
 8009b8a:	4a30      	ldr	r2, [pc, #192]	; (8009c4c <xTaskIncrementTick+0xfc>)
 8009b8c:	6813      	ldr	r3, [r2, #0]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	f7ff fd9b 	bl	80096cc <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b96:	4b2e      	ldr	r3, [pc, #184]	; (8009c50 <xTaskIncrementTick+0x100>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	42ab      	cmp	r3, r5
 8009b9c:	d90c      	bls.n	8009bb8 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8009b9e:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ba0:	4b2c      	ldr	r3, [pc, #176]	; (8009c54 <xTaskIncrementTick+0x104>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009baa:	009a      	lsls	r2, r3, #2
 8009bac:	4b2a      	ldr	r3, [pc, #168]	; (8009c58 <xTaskIncrementTick+0x108>)
 8009bae:	589b      	ldr	r3, [r3, r2]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d93d      	bls.n	8009c30 <xTaskIncrementTick+0xe0>
				xSwitchRequired = pdTRUE;
 8009bb4:	2401      	movs	r4, #1
 8009bb6:	e03b      	b.n	8009c30 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8009bb8:	2400      	movs	r4, #0
 8009bba:	e016      	b.n	8009bea <xTaskIncrementTick+0x9a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bbc:	4b24      	ldr	r3, [pc, #144]	; (8009c50 <xTaskIncrementTick+0x100>)
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	601a      	str	r2, [r3, #0]
					break;
 8009bc4:	e7ec      	b.n	8009ba0 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8009bc6:	4a22      	ldr	r2, [pc, #136]	; (8009c50 <xTaskIncrementTick+0x100>)
 8009bc8:	6013      	str	r3, [r2, #0]
						break;
 8009bca:	e7e9      	b.n	8009ba0 <xTaskIncrementTick+0x50>
					prvAddTaskToReadyList( pxTCB );
 8009bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009bd0:	009a      	lsls	r2, r3, #2
 8009bd2:	4639      	mov	r1, r7
 8009bd4:	4820      	ldr	r0, [pc, #128]	; (8009c58 <xTaskIncrementTick+0x108>)
 8009bd6:	4410      	add	r0, r2
 8009bd8:	f7ff f9f0 	bl	8008fbc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bdc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8009bde:	4b1d      	ldr	r3, [pc, #116]	; (8009c54 <xTaskIncrementTick+0x104>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d300      	bcc.n	8009bea <xTaskIncrementTick+0x9a>
							xSwitchRequired = pdTRUE;
 8009be8:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bea:	4b16      	ldr	r3, [pc, #88]	; (8009c44 <xTaskIncrementTick+0xf4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d0e3      	beq.n	8009bbc <xTaskIncrementTick+0x6c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009bf4:	4b13      	ldr	r3, [pc, #76]	; (8009c44 <xTaskIncrementTick+0xf4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bfc:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	d3e1      	bcc.n	8009bc6 <xTaskIncrementTick+0x76>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c02:	1d37      	adds	r7, r6, #4
 8009c04:	4638      	mov	r0, r7
 8009c06:	f7ff f9fd 	bl	8009004 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c0a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009c0c:	b11b      	cbz	r3, 8009c16 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0e:	f106 0018 	add.w	r0, r6, #24
 8009c12:	f7ff f9f7 	bl	8009004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c16:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009c18:	4a10      	ldr	r2, [pc, #64]	; (8009c5c <xTaskIncrementTick+0x10c>)
 8009c1a:	6812      	ldr	r2, [r2, #0]
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d9d5      	bls.n	8009bcc <xTaskIncrementTick+0x7c>
 8009c20:	4a0e      	ldr	r2, [pc, #56]	; (8009c5c <xTaskIncrementTick+0x10c>)
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	e7d2      	b.n	8009bcc <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8009c26:	4a0e      	ldr	r2, [pc, #56]	; (8009c60 <xTaskIncrementTick+0x110>)
 8009c28:	6813      	ldr	r3, [r2, #0]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8009c2e:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 8009c30:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <xTaskIncrementTick+0x114>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	b103      	cbz	r3, 8009c38 <xTaskIncrementTick+0xe8>
			xSwitchRequired = pdTRUE;
 8009c36:	2401      	movs	r4, #1
}
 8009c38:	4620      	mov	r0, r4
 8009c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c3c:	200012d8 	.word	0x200012d8
 8009c40:	20001354 	.word	0x20001354
 8009c44:	20000e64 	.word	0x20000e64
 8009c48:	20000e68 	.word	0x20000e68
 8009c4c:	20001310 	.word	0x20001310
 8009c50:	2000130c 	.word	0x2000130c
 8009c54:	20000e60 	.word	0x20000e60
 8009c58:	20000e6c 	.word	0x20000e6c
 8009c5c:	200012e0 	.word	0x200012e0
 8009c60:	200012d4 	.word	0x200012d4
 8009c64:	20001358 	.word	0x20001358

08009c68 <xTaskResumeAll>:
{
 8009c68:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8009c6a:	4b34      	ldr	r3, [pc, #208]	; (8009d3c <xTaskResumeAll+0xd4>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	b943      	cbnz	r3, 8009c82 <xTaskResumeAll+0x1a>
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	e7fe      	b.n	8009c80 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8009c82:	f000 fc6f 	bl	800a564 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009c86:	4b2d      	ldr	r3, [pc, #180]	; (8009d3c <xTaskResumeAll+0xd4>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	3a01      	subs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d14d      	bne.n	8009d30 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c94:	4b2a      	ldr	r3, [pc, #168]	; (8009d40 <xTaskResumeAll+0xd8>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	b90b      	cbnz	r3, 8009c9e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009c9a:	2400      	movs	r4, #0
 8009c9c:	e049      	b.n	8009d32 <xTaskResumeAll+0xca>
TCB_t *pxTCB = NULL;
 8009c9e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca0:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <xTaskResumeAll+0xdc>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	b31b      	cbz	r3, 8009cee <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009ca6:	4b27      	ldr	r3, [pc, #156]	; (8009d44 <xTaskResumeAll+0xdc>)
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cac:	f104 0018 	add.w	r0, r4, #24
 8009cb0:	f7ff f9a8 	bl	8009004 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cb4:	1d25      	adds	r5, r4, #4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f7ff f9a4 	bl	8009004 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cbc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009cbe:	4b22      	ldr	r3, [pc, #136]	; (8009d48 <xTaskResumeAll+0xe0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4298      	cmp	r0, r3
 8009cc4:	d901      	bls.n	8009cca <xTaskResumeAll+0x62>
 8009cc6:	4b20      	ldr	r3, [pc, #128]	; (8009d48 <xTaskResumeAll+0xe0>)
 8009cc8:	6018      	str	r0, [r3, #0]
 8009cca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009cce:	4629      	mov	r1, r5
 8009cd0:	4b1e      	ldr	r3, [pc, #120]	; (8009d4c <xTaskResumeAll+0xe4>)
 8009cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009cd6:	f7ff f971 	bl	8008fbc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009cdc:	4b1c      	ldr	r3, [pc, #112]	; (8009d50 <xTaskResumeAll+0xe8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d3dc      	bcc.n	8009ca0 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8009ce6:	4b1b      	ldr	r3, [pc, #108]	; (8009d54 <xTaskResumeAll+0xec>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
 8009cec:	e7d8      	b.n	8009ca0 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8009cee:	b10c      	cbz	r4, 8009cf4 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8009cf0:	f7ff fcec 	bl	80096cc <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009cf4:	4b18      	ldr	r3, [pc, #96]	; (8009d58 <xTaskResumeAll+0xf0>)
 8009cf6:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009cf8:	b974      	cbnz	r4, 8009d18 <xTaskResumeAll+0xb0>
				if( xYieldPending != pdFALSE )
 8009cfa:	4b16      	ldr	r3, [pc, #88]	; (8009d54 <xTaskResumeAll+0xec>)
 8009cfc:	681c      	ldr	r4, [r3, #0]
 8009cfe:	b1c4      	cbz	r4, 8009d32 <xTaskResumeAll+0xca>
					taskYIELD_IF_USING_PREEMPTION();
 8009d00:	4b16      	ldr	r3, [pc, #88]	; (8009d5c <xTaskResumeAll+0xf4>)
 8009d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d06:	601a      	str	r2, [r3, #0]
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009d10:	2401      	movs	r4, #1
 8009d12:	e00e      	b.n	8009d32 <xTaskResumeAll+0xca>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009d14:	3c01      	subs	r4, #1
 8009d16:	d007      	beq.n	8009d28 <xTaskResumeAll+0xc0>
							if( xTaskIncrementTick() != pdFALSE )
 8009d18:	f7ff ff1a 	bl	8009b50 <xTaskIncrementTick>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0f9      	beq.n	8009d14 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <xTaskResumeAll+0xec>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	e7f5      	b.n	8009d14 <xTaskResumeAll+0xac>
						uxPendedTicks = 0;
 8009d28:	4b0b      	ldr	r3, [pc, #44]	; (8009d58 <xTaskResumeAll+0xf0>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	601a      	str	r2, [r3, #0]
 8009d2e:	e7e4      	b.n	8009cfa <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8009d30:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009d32:	f000 fc39 	bl	800a5a8 <vPortExitCritical>
}
 8009d36:	4620      	mov	r0, r4
 8009d38:	bd38      	pop	{r3, r4, r5, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200012d8 	.word	0x200012d8
 8009d40:	200012cc 	.word	0x200012cc
 8009d44:	20001314 	.word	0x20001314
 8009d48:	200012e0 	.word	0x200012e0
 8009d4c:	20000e6c 	.word	0x20000e6c
 8009d50:	20000e60 	.word	0x20000e60
 8009d54:	20001358 	.word	0x20001358
 8009d58:	200012d4 	.word	0x200012d4
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <vTaskDelay>:
	{
 8009d60:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009d62:	b1a8      	cbz	r0, 8009d90 <vTaskDelay+0x30>
 8009d64:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <vTaskDelay+0x44>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	b143      	cbz	r3, 8009d7e <vTaskDelay+0x1e>
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	e7fe      	b.n	8009d7c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009d7e:	f7ff fed9 	bl	8009b34 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009d82:	2100      	movs	r1, #0
 8009d84:	4620      	mov	r0, r4
 8009d86:	f7ff fddf 	bl	8009948 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009d8a:	f7ff ff6d 	bl	8009c68 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009d8e:	b938      	cbnz	r0, 8009da0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8009d90:	4b05      	ldr	r3, [pc, #20]	; (8009da8 <vTaskDelay+0x48>)
 8009d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	f3bf 8f6f 	isb	sy
	}
 8009da0:	bd10      	pop	{r4, pc}
 8009da2:	bf00      	nop
 8009da4:	200012d8 	.word	0x200012d8
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009dac:	4b1f      	ldr	r3, [pc, #124]	; (8009e2c <vTaskSwitchContext+0x80>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	b11b      	cbz	r3, 8009dba <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8009db2:	4b1f      	ldr	r3, [pc, #124]	; (8009e30 <vTaskSwitchContext+0x84>)
 8009db4:	2201      	movs	r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <vTaskSwitchContext+0x84>)
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009dc0:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <vTaskSwitchContext+0x88>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8009dc8:	008a      	lsls	r2, r1, #2
 8009dca:	491b      	ldr	r1, [pc, #108]	; (8009e38 <vTaskSwitchContext+0x8c>)
 8009dcc:	588a      	ldr	r2, [r1, r2]
 8009dce:	b95a      	cbnz	r2, 8009de8 <vTaskSwitchContext+0x3c>
 8009dd0:	b10b      	cbz	r3, 8009dd6 <vTaskSwitchContext+0x2a>
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	e7f6      	b.n	8009dc4 <vTaskSwitchContext+0x18>
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	e7fe      	b.n	8009de6 <vTaskSwitchContext+0x3a>
{
 8009de8:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009dea:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009dee:	0082      	lsls	r2, r0, #2
 8009df0:	440a      	add	r2, r1
 8009df2:	6850      	ldr	r0, [r2, #4]
 8009df4:	6840      	ldr	r0, [r0, #4]
 8009df6:	6050      	str	r0, [r2, #4]
 8009df8:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8009dfc:	00a2      	lsls	r2, r4, #2
 8009dfe:	4614      	mov	r4, r2
 8009e00:	3208      	adds	r2, #8
 8009e02:	4411      	add	r1, r2
 8009e04:	4288      	cmp	r0, r1
 8009e06:	d00c      	beq.n	8009e22 <vTaskSwitchContext+0x76>
 8009e08:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009e0c:	0091      	lsls	r1, r2, #2
 8009e0e:	4a0a      	ldr	r2, [pc, #40]	; (8009e38 <vTaskSwitchContext+0x8c>)
 8009e10:	440a      	add	r2, r1
 8009e12:	6852      	ldr	r2, [r2, #4]
 8009e14:	68d1      	ldr	r1, [r2, #12]
 8009e16:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <vTaskSwitchContext+0x90>)
 8009e18:	6011      	str	r1, [r2, #0]
 8009e1a:	4a06      	ldr	r2, [pc, #24]	; (8009e34 <vTaskSwitchContext+0x88>)
 8009e1c:	6013      	str	r3, [r2, #0]
}
 8009e1e:	bc10      	pop	{r4}
 8009e20:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009e22:	6840      	ldr	r0, [r0, #4]
 8009e24:	4a04      	ldr	r2, [pc, #16]	; (8009e38 <vTaskSwitchContext+0x8c>)
 8009e26:	4422      	add	r2, r4
 8009e28:	6050      	str	r0, [r2, #4]
 8009e2a:	e7ed      	b.n	8009e08 <vTaskSwitchContext+0x5c>
 8009e2c:	200012d8 	.word	0x200012d8
 8009e30:	20001358 	.word	0x20001358
 8009e34:	200012e0 	.word	0x200012e0
 8009e38:	20000e6c 	.word	0x20000e6c
 8009e3c:	20000e60 	.word	0x20000e60

08009e40 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8009e40:	b158      	cbz	r0, 8009e5a <vTaskPlaceOnEventList+0x1a>
{
 8009e42:	b510      	push	{r4, lr}
 8009e44:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e46:	4b09      	ldr	r3, [pc, #36]	; (8009e6c <vTaskPlaceOnEventList+0x2c>)
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	3118      	adds	r1, #24
 8009e4c:	f7ff f8c1 	bl	8008fd2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009e50:	2101      	movs	r1, #1
 8009e52:	4620      	mov	r0, r4
 8009e54:	f7ff fd78 	bl	8009948 <prvAddCurrentTaskToDelayedList>
}
 8009e58:	bd10      	pop	{r4, pc}
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8009e6a:	e7fe      	b.n	8009e6a <vTaskPlaceOnEventList+0x2a>
 8009e6c:	20000e60 	.word	0x20000e60

08009e70 <vTaskPlaceOnEventListRestricted>:
	{
 8009e70:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8009e72:	b170      	cbz	r0, 8009e92 <vTaskPlaceOnEventListRestricted+0x22>
 8009e74:	460c      	mov	r4, r1
 8009e76:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <vTaskPlaceOnEventListRestricted+0x34>)
 8009e7a:	6819      	ldr	r1, [r3, #0]
 8009e7c:	3118      	adds	r1, #24
 8009e7e:	f7ff f89d 	bl	8008fbc <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 8009e82:	b10d      	cbz	r5, 8009e88 <vTaskPlaceOnEventListRestricted+0x18>
			xTicksToWait = portMAX_DELAY;
 8009e84:	f04f 34ff 	mov.w	r4, #4294967295
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e88:	4629      	mov	r1, r5
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f7ff fd5c 	bl	8009948 <prvAddCurrentTaskToDelayedList>
	}
 8009e90:	bd38      	pop	{r3, r4, r5, pc}
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskPlaceOnEventListRestricted+0x32>
 8009ea4:	20000e60 	.word	0x20000e60

08009ea8 <xTaskRemoveFromEventList>:
{
 8009ea8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009eaa:	68c3      	ldr	r3, [r0, #12]
 8009eac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009eae:	b324      	cbz	r4, 8009efa <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009eb0:	f104 0518 	add.w	r5, r4, #24
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f7ff f8a5 	bl	8009004 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009eba:	4b18      	ldr	r3, [pc, #96]	; (8009f1c <xTaskRemoveFromEventList+0x74>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	bb2b      	cbnz	r3, 8009f0c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009ec0:	1d25      	adds	r5, r4, #4
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7ff f89e 	bl	8009004 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009ec8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009eca:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <xTaskRemoveFromEventList+0x78>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4298      	cmp	r0, r3
 8009ed0:	d901      	bls.n	8009ed6 <xTaskRemoveFromEventList+0x2e>
 8009ed2:	4b13      	ldr	r3, [pc, #76]	; (8009f20 <xTaskRemoveFromEventList+0x78>)
 8009ed4:	6018      	str	r0, [r3, #0]
 8009ed6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009eda:	4629      	mov	r1, r5
 8009edc:	4b11      	ldr	r3, [pc, #68]	; (8009f24 <xTaskRemoveFromEventList+0x7c>)
 8009ede:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009ee2:	f7ff f86b 	bl	8008fbc <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ee6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009ee8:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <xTaskRemoveFromEventList+0x80>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d911      	bls.n	8009f16 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	4b0d      	ldr	r3, [pc, #52]	; (8009f2c <xTaskRemoveFromEventList+0x84>)
 8009ef6:	6018      	str	r0, [r3, #0]
 8009ef8:	e00e      	b.n	8009f18 <xTaskRemoveFromEventList+0x70>
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8009f0a:	e7fe      	b.n	8009f0a <xTaskRemoveFromEventList+0x62>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4808      	ldr	r0, [pc, #32]	; (8009f30 <xTaskRemoveFromEventList+0x88>)
 8009f10:	f7ff f854 	bl	8008fbc <vListInsertEnd>
 8009f14:	e7e7      	b.n	8009ee6 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
 8009f16:	2000      	movs	r0, #0
}
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200012d8 	.word	0x200012d8
 8009f20:	200012e0 	.word	0x200012e0
 8009f24:	20000e6c 	.word	0x20000e6c
 8009f28:	20000e60 	.word	0x20000e60
 8009f2c:	20001358 	.word	0x20001358
 8009f30:	20001314 	.word	0x20001314

08009f34 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009f34:	4b03      	ldr	r3, [pc, #12]	; (8009f44 <vTaskInternalSetTimeOutState+0x10>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009f3a:	4b03      	ldr	r3, [pc, #12]	; (8009f48 <vTaskInternalSetTimeOutState+0x14>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6043      	str	r3, [r0, #4]
}
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	20001310 	.word	0x20001310
 8009f48:	20001354 	.word	0x20001354

08009f4c <xTaskCheckForTimeOut>:
{
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009f4e:	b1c8      	cbz	r0, 8009f84 <xTaskCheckForTimeOut+0x38>
 8009f50:	460c      	mov	r4, r1
 8009f52:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009f54:	b1f9      	cbz	r1, 8009f96 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8009f56:	f000 fb05 	bl	800a564 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009f5a:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <xTaskCheckForTimeOut+0x7c>)
 8009f5c:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f5e:	686b      	ldr	r3, [r5, #4]
 8009f60:	1ac8      	subs	r0, r1, r3
			if( *pxTicksToWait == portMAX_DELAY )
 8009f62:	6822      	ldr	r2, [r4, #0]
 8009f64:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009f68:	d026      	beq.n	8009fb8 <xTaskCheckForTimeOut+0x6c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f6a:	682f      	ldr	r7, [r5, #0]
 8009f6c:	4e17      	ldr	r6, [pc, #92]	; (8009fcc <xTaskCheckForTimeOut+0x80>)
 8009f6e:	6836      	ldr	r6, [r6, #0]
 8009f70:	42b7      	cmp	r7, r6
 8009f72:	d001      	beq.n	8009f78 <xTaskCheckForTimeOut+0x2c>
 8009f74:	428b      	cmp	r3, r1
 8009f76:	d924      	bls.n	8009fc2 <xTaskCheckForTimeOut+0x76>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f78:	4282      	cmp	r2, r0
 8009f7a:	d815      	bhi.n	8009fa8 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009f80:	2401      	movs	r4, #1
 8009f82:	e01a      	b.n	8009fba <xTaskCheckForTimeOut+0x6e>
 8009f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f88:	f383 8811 	msr	BASEPRI, r3
 8009f8c:	f3bf 8f6f 	isb	sy
 8009f90:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8009f94:	e7fe      	b.n	8009f94 <xTaskCheckForTimeOut+0x48>
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8009fa6:	e7fe      	b.n	8009fa6 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8009fa8:	1a5b      	subs	r3, r3, r1
 8009faa:	4413      	add	r3, r2
 8009fac:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f7ff ffc0 	bl	8009f34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fb4:	2400      	movs	r4, #0
 8009fb6:	e000      	b.n	8009fba <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8009fb8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009fba:	f000 faf5 	bl	800a5a8 <vPortExitCritical>
}
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdTRUE;
 8009fc2:	2401      	movs	r4, #1
 8009fc4:	e7f9      	b.n	8009fba <xTaskCheckForTimeOut+0x6e>
 8009fc6:	bf00      	nop
 8009fc8:	20001354 	.word	0x20001354
 8009fcc:	20001310 	.word	0x20001310

08009fd0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009fd0:	4b01      	ldr	r3, [pc, #4]	; (8009fd8 <vTaskMissedYield+0x8>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]
}
 8009fd6:	4770      	bx	lr
 8009fd8:	20001358 	.word	0x20001358

08009fdc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <xTaskGetSchedulerState+0x18>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	b133      	cbz	r3, 8009ff0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fe2:	4b05      	ldr	r3, [pc, #20]	; (8009ff8 <xTaskGetSchedulerState+0x1c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	b10b      	cbz	r3, 8009fec <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009fe8:	2000      	movs	r0, #0
	}
 8009fea:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009fec:	2002      	movs	r0, #2
 8009fee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ff0:	2001      	movs	r0, #1
 8009ff2:	4770      	bx	lr
 8009ff4:	20001328 	.word	0x20001328
 8009ff8:	200012d8 	.word	0x200012d8

08009ffc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d03b      	beq.n	800a078 <xTaskPriorityDisinherit+0x7c>
	{
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800a004:	4b1e      	ldr	r3, [pc, #120]	; (800a080 <xTaskPriorityDisinherit+0x84>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4283      	cmp	r3, r0
 800a00a:	d008      	beq.n	800a01e <xTaskPriorityDisinherit+0x22>
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	e7fe      	b.n	800a01c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800a01e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a020:	b943      	cbnz	r3, 800a034 <xTaskPriorityDisinherit+0x38>
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	e7fe      	b.n	800a032 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800a034:	3b01      	subs	r3, #1
 800a036:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a038:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800a03a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800a03c:	4291      	cmp	r1, r2
 800a03e:	d01d      	beq.n	800a07c <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a040:	b10b      	cbz	r3, 800a046 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800a042:	2000      	movs	r0, #0
	}
 800a044:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a046:	1d05      	adds	r5, r0, #4
 800a048:	4628      	mov	r0, r5
 800a04a:	f7fe ffdb 	bl	8009004 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a04e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a050:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a052:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800a056:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800a058:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <xTaskPriorityDisinherit+0x88>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4298      	cmp	r0, r3
 800a05e:	d901      	bls.n	800a064 <xTaskPriorityDisinherit+0x68>
 800a060:	4b08      	ldr	r3, [pc, #32]	; (800a084 <xTaskPriorityDisinherit+0x88>)
 800a062:	6018      	str	r0, [r3, #0]
 800a064:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a068:	4629      	mov	r1, r5
 800a06a:	4b07      	ldr	r3, [pc, #28]	; (800a088 <xTaskPriorityDisinherit+0x8c>)
 800a06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a070:	f7fe ffa4 	bl	8008fbc <vListInsertEnd>
					xReturn = pdTRUE;
 800a074:	2001      	movs	r0, #1
 800a076:	e7e5      	b.n	800a044 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800a078:	2000      	movs	r0, #0
	}
 800a07a:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800a07c:	2000      	movs	r0, #0
 800a07e:	e7e1      	b.n	800a044 <xTaskPriorityDisinherit+0x48>
 800a080:	20000e60 	.word	0x20000e60
 800a084:	200012e0 	.word	0x200012e0
 800a088:	20000e6c 	.word	0x20000e6c

0800a08c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a08c:	4b06      	ldr	r3, [pc, #24]	; (800a0a8 <prvGetNextExpireTime+0x1c>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	fab3 f383 	clz	r3, r3
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a09a:	b913      	cbnz	r3, 800a0a2 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a09c:	68d3      	ldr	r3, [r2, #12]
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0a2:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	2000135c 	.word	0x2000135c

0800a0ac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a0ac:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a0ae:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0b0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a0b2:	4291      	cmp	r1, r2
 800a0b4:	d80c      	bhi.n	800a0d0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b6:	1ad2      	subs	r2, r2, r3
 800a0b8:	6983      	ldr	r3, [r0, #24]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d301      	bcc.n	800a0c2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0be:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800a0c0:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0c2:	1d01      	adds	r1, r0, #4
 800a0c4:	4b09      	ldr	r3, [pc, #36]	; (800a0ec <prvInsertTimerInActiveList+0x40>)
 800a0c6:	6818      	ldr	r0, [r3, #0]
 800a0c8:	f7fe ff83 	bl	8008fd2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	e7f7      	b.n	800a0c0 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d201      	bcs.n	800a0d8 <prvInsertTimerInActiveList+0x2c>
 800a0d4:	4299      	cmp	r1, r3
 800a0d6:	d206      	bcs.n	800a0e6 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0d8:	1d01      	adds	r1, r0, #4
 800a0da:	4b05      	ldr	r3, [pc, #20]	; (800a0f0 <prvInsertTimerInActiveList+0x44>)
 800a0dc:	6818      	ldr	r0, [r3, #0]
 800a0de:	f7fe ff78 	bl	8008fd2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e7ec      	b.n	800a0c0 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 800a0e6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800a0e8:	e7ea      	b.n	800a0c0 <prvInsertTimerInActiveList+0x14>
 800a0ea:	bf00      	nop
 800a0ec:	20001360 	.word	0x20001360
 800a0f0:	2000135c 	.word	0x2000135c

0800a0f4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0f4:	b530      	push	{r4, r5, lr}
 800a0f6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0f8:	f000 fa34 	bl	800a564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0fc:	4b11      	ldr	r3, [pc, #68]	; (800a144 <prvCheckForValidListAndQueue+0x50>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	b11b      	cbz	r3, 800a10a <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a102:	f000 fa51 	bl	800a5a8 <vPortExitCritical>
}
 800a106:	b003      	add	sp, #12
 800a108:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800a10a:	4d0f      	ldr	r5, [pc, #60]	; (800a148 <prvCheckForValidListAndQueue+0x54>)
 800a10c:	4628      	mov	r0, r5
 800a10e:	f7fe ff47 	bl	8008fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a112:	4c0e      	ldr	r4, [pc, #56]	; (800a14c <prvCheckForValidListAndQueue+0x58>)
 800a114:	4620      	mov	r0, r4
 800a116:	f7fe ff43 	bl	8008fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a11a:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <prvCheckForValidListAndQueue+0x5c>)
 800a11c:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a11e:	4b0d      	ldr	r3, [pc, #52]	; (800a154 <prvCheckForValidListAndQueue+0x60>)
 800a120:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a122:	2300      	movs	r3, #0
 800a124:	9300      	str	r3, [sp, #0]
 800a126:	4b0c      	ldr	r3, [pc, #48]	; (800a158 <prvCheckForValidListAndQueue+0x64>)
 800a128:	4a0c      	ldr	r2, [pc, #48]	; (800a15c <prvCheckForValidListAndQueue+0x68>)
 800a12a:	2110      	movs	r1, #16
 800a12c:	200a      	movs	r0, #10
 800a12e:	f7ff f870 	bl	8009212 <xQueueGenericCreateStatic>
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <prvCheckForValidListAndQueue+0x50>)
 800a134:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800a136:	2800      	cmp	r0, #0
 800a138:	d0e3      	beq.n	800a102 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a13a:	4909      	ldr	r1, [pc, #36]	; (800a160 <prvCheckForValidListAndQueue+0x6c>)
 800a13c:	f7ff fa88 	bl	8009650 <vQueueAddToRegistry>
 800a140:	e7df      	b.n	800a102 <prvCheckForValidListAndQueue+0xe>
 800a142:	bf00      	nop
 800a144:	20001480 	.word	0x20001480
 800a148:	20001404 	.word	0x20001404
 800a14c:	20001418 	.word	0x20001418
 800a150:	2000135c 	.word	0x2000135c
 800a154:	20001360 	.word	0x20001360
 800a158:	20001430 	.word	0x20001430
 800a15c:	20001364 	.word	0x20001364
 800a160:	0800e36c 	.word	0x0800e36c

0800a164 <xTimerCreateTimerTask>:
{
 800a164:	b510      	push	{r4, lr}
 800a166:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800a168:	f7ff ffc4 	bl	800a0f4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800a16c:	4b12      	ldr	r3, [pc, #72]	; (800a1b8 <xTimerCreateTimerTask+0x54>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	b1cb      	cbz	r3, 800a1a6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a172:	2400      	movs	r4, #0
 800a174:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a176:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a178:	aa07      	add	r2, sp, #28
 800a17a:	a906      	add	r1, sp, #24
 800a17c:	a805      	add	r0, sp, #20
 800a17e:	f7fe ff03 	bl	8008f88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a182:	9b05      	ldr	r3, [sp, #20]
 800a184:	9302      	str	r3, [sp, #8]
 800a186:	9b06      	ldr	r3, [sp, #24]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	2302      	movs	r3, #2
 800a18c:	9300      	str	r3, [sp, #0]
 800a18e:	4623      	mov	r3, r4
 800a190:	9a07      	ldr	r2, [sp, #28]
 800a192:	490a      	ldr	r1, [pc, #40]	; (800a1bc <xTimerCreateTimerTask+0x58>)
 800a194:	480a      	ldr	r0, [pc, #40]	; (800a1c0 <xTimerCreateTimerTask+0x5c>)
 800a196:	f7ff fc15 	bl	80099c4 <xTaskCreateStatic>
 800a19a:	4a0a      	ldr	r2, [pc, #40]	; (800a1c4 <xTimerCreateTimerTask+0x60>)
 800a19c:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 800a19e:	b110      	cbz	r0, 800a1a6 <xTimerCreateTimerTask+0x42>
}
 800a1a0:	2001      	movs	r0, #1
 800a1a2:	b008      	add	sp, #32
 800a1a4:	bd10      	pop	{r4, pc}
 800a1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1aa:	f383 8811 	msr	BASEPRI, r3
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800a1b6:	e7fe      	b.n	800a1b6 <xTimerCreateTimerTask+0x52>
 800a1b8:	20001480 	.word	0x20001480
 800a1bc:	0800e374 	.word	0x0800e374
 800a1c0:	0800a4a5 	.word	0x0800a4a5
 800a1c4:	20001484 	.word	0x20001484

0800a1c8 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800a1c8:	b1c0      	cbz	r0, 800a1fc <xTimerGenericCommand+0x34>
{
 800a1ca:	b510      	push	{r4, lr}
 800a1cc:	b084      	sub	sp, #16
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800a1d4:	4816      	ldr	r0, [pc, #88]	; (800a230 <xTimerGenericCommand+0x68>)
 800a1d6:	6800      	ldr	r0, [r0, #0]
 800a1d8:	b338      	cbz	r0, 800a22a <xTimerGenericCommand+0x62>
		xMessage.xMessageID = xCommandID;
 800a1da:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a1dc:	9401      	str	r4, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a1de:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a1e0:	2905      	cmp	r1, #5
 800a1e2:	dc1c      	bgt.n	800a21e <xTimerGenericCommand+0x56>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a1e4:	f7ff fefa 	bl	8009fdc <xTaskGetSchedulerState>
 800a1e8:	2802      	cmp	r0, #2
 800a1ea:	d010      	beq.n	800a20e <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	4669      	mov	r1, sp
 800a1f2:	480f      	ldr	r0, [pc, #60]	; (800a230 <xTimerGenericCommand+0x68>)
 800a1f4:	6800      	ldr	r0, [r0, #0]
 800a1f6:	f7ff f855 	bl	80092a4 <xQueueGenericSend>
 800a1fa:	e014      	b.n	800a226 <xTimerGenericCommand+0x5e>
 800a1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a200:	f383 8811 	msr	BASEPRI, r3
 800a204:	f3bf 8f6f 	isb	sy
 800a208:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800a20c:	e7fe      	b.n	800a20c <xTimerGenericCommand+0x44>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a20e:	2300      	movs	r3, #0
 800a210:	9a06      	ldr	r2, [sp, #24]
 800a212:	4669      	mov	r1, sp
 800a214:	4806      	ldr	r0, [pc, #24]	; (800a230 <xTimerGenericCommand+0x68>)
 800a216:	6800      	ldr	r0, [r0, #0]
 800a218:	f7ff f844 	bl	80092a4 <xQueueGenericSend>
 800a21c:	e003      	b.n	800a226 <xTimerGenericCommand+0x5e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a21e:	2300      	movs	r3, #0
 800a220:	4669      	mov	r1, sp
 800a222:	f7ff f8ff 	bl	8009424 <xQueueGenericSendFromISR>
}
 800a226:	b004      	add	sp, #16
 800a228:	bd10      	pop	{r4, pc}
BaseType_t xReturn = pdFAIL;
 800a22a:	2000      	movs	r0, #0
	return xReturn;
 800a22c:	e7fb      	b.n	800a226 <xTimerGenericCommand+0x5e>
 800a22e:	bf00      	nop
 800a230:	20001480 	.word	0x20001480

0800a234 <prvSwitchTimerLists>:
{
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a238:	4b1a      	ldr	r3, [pc, #104]	; (800a2a4 <prvSwitchTimerLists+0x70>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	b352      	cbz	r2, 800a296 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a244:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a246:	1d25      	adds	r5, r4, #4
 800a248:	4628      	mov	r0, r5
 800a24a:	f7fe fedb 	bl	8009004 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a250:	4620      	mov	r0, r4
 800a252:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a254:	69e3      	ldr	r3, [r4, #28]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d1ee      	bne.n	800a238 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a25a:	69a3      	ldr	r3, [r4, #24]
 800a25c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800a25e:	429e      	cmp	r6, r3
 800a260:	d207      	bcs.n	800a272 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a262:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a264:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a266:	4629      	mov	r1, r5
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <prvSwitchTimerLists+0x70>)
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	f7fe feb1 	bl	8008fd2 <vListInsert>
 800a270:	e7e2      	b.n	800a238 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a272:	2100      	movs	r1, #0
 800a274:	9100      	str	r1, [sp, #0]
 800a276:	460b      	mov	r3, r1
 800a278:	4632      	mov	r2, r6
 800a27a:	4620      	mov	r0, r4
 800a27c:	f7ff ffa4 	bl	800a1c8 <xTimerGenericCommand>
				configASSERT( xResult );
 800a280:	2800      	cmp	r0, #0
 800a282:	d1d9      	bne.n	800a238 <prvSwitchTimerLists+0x4>
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	e7fe      	b.n	800a294 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
 800a296:	4a04      	ldr	r2, [pc, #16]	; (800a2a8 <prvSwitchTimerLists+0x74>)
 800a298:	6810      	ldr	r0, [r2, #0]
 800a29a:	4902      	ldr	r1, [pc, #8]	; (800a2a4 <prvSwitchTimerLists+0x70>)
 800a29c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800a29e:	6013      	str	r3, [r2, #0]
}
 800a2a0:	b002      	add	sp, #8
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	2000135c 	.word	0x2000135c
 800a2a8:	20001360 	.word	0x20001360

0800a2ac <prvSampleTimeNow>:
{
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800a2b0:	f7ff fc48 	bl	8009b44 <xTaskGetTickCount>
 800a2b4:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800a2b6:	4b07      	ldr	r3, [pc, #28]	; (800a2d4 <prvSampleTimeNow+0x28>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4283      	cmp	r3, r0
 800a2bc:	d805      	bhi.n	800a2ca <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800a2c2:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <prvSampleTimeNow+0x28>)
 800a2c4:	601c      	str	r4, [r3, #0]
}
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800a2ca:	f7ff ffb3 	bl	800a234 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	602b      	str	r3, [r5, #0]
 800a2d2:	e7f6      	b.n	800a2c2 <prvSampleTimeNow+0x16>
 800a2d4:	2000142c 	.word	0x2000142c

0800a2d8 <prvProcessExpiredTimer>:
{
 800a2d8:	b570      	push	{r4, r5, r6, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2e0:	4b14      	ldr	r3, [pc, #80]	; (800a334 <prvProcessExpiredTimer+0x5c>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2e8:	1d20      	adds	r0, r4, #4
 800a2ea:	f7fe fe8b 	bl	8009004 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a2ee:	69e3      	ldr	r3, [r4, #28]
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d004      	beq.n	800a2fe <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4798      	blx	r3
}
 800a2fa:	b002      	add	sp, #8
 800a2fc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a2fe:	69a1      	ldr	r1, [r4, #24]
 800a300:	462b      	mov	r3, r5
 800a302:	4632      	mov	r2, r6
 800a304:	4429      	add	r1, r5
 800a306:	4620      	mov	r0, r4
 800a308:	f7ff fed0 	bl	800a0ac <prvInsertTimerInActiveList>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d0f1      	beq.n	800a2f4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a310:	2100      	movs	r1, #0
 800a312:	9100      	str	r1, [sp, #0]
 800a314:	460b      	mov	r3, r1
 800a316:	462a      	mov	r2, r5
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff ff55 	bl	800a1c8 <xTimerGenericCommand>
			configASSERT( xResult );
 800a31e:	2800      	cmp	r0, #0
 800a320:	d1e8      	bne.n	800a2f4 <prvProcessExpiredTimer+0x1c>
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	e7fe      	b.n	800a332 <prvProcessExpiredTimer+0x5a>
 800a334:	2000135c 	.word	0x2000135c

0800a338 <prvProcessTimerOrBlockTask>:
{
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	4606      	mov	r6, r0
 800a33e:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800a340:	f7ff fbf8 	bl	8009b34 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a344:	a801      	add	r0, sp, #4
 800a346:	f7ff ffb1 	bl	800a2ac <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800a34a:	9b01      	ldr	r3, [sp, #4]
 800a34c:	bb1b      	cbnz	r3, 800a396 <prvProcessTimerOrBlockTask+0x5e>
 800a34e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a350:	b90c      	cbnz	r4, 800a356 <prvProcessTimerOrBlockTask+0x1e>
 800a352:	42b0      	cmp	r0, r6
 800a354:	d218      	bcs.n	800a388 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
 800a356:	b12c      	cbz	r4, 800a364 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a358:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <prvProcessTimerOrBlockTask+0x68>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681c      	ldr	r4, [r3, #0]
 800a35e:	fab4 f484 	clz	r4, r4
 800a362:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a364:	4622      	mov	r2, r4
 800a366:	1b71      	subs	r1, r6, r5
 800a368:	4b0e      	ldr	r3, [pc, #56]	; (800a3a4 <prvProcessTimerOrBlockTask+0x6c>)
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	f7ff f984 	bl	8009678 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a370:	f7ff fc7a 	bl	8009c68 <xTaskResumeAll>
 800a374:	b988      	cbnz	r0, 800a39a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
 800a376:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <prvProcessTimerOrBlockTask+0x70>)
 800a378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	e008      	b.n	800a39a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
 800a388:	f7ff fc6e 	bl	8009c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a38c:	4629      	mov	r1, r5
 800a38e:	4630      	mov	r0, r6
 800a390:	f7ff ffa2 	bl	800a2d8 <prvProcessExpiredTimer>
 800a394:	e001      	b.n	800a39a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
 800a396:	f7ff fc67 	bl	8009c68 <xTaskResumeAll>
}
 800a39a:	b002      	add	sp, #8
 800a39c:	bd70      	pop	{r4, r5, r6, pc}
 800a39e:	bf00      	nop
 800a3a0:	20001360 	.word	0x20001360
 800a3a4:	20001480 	.word	0x20001480
 800a3a8:	e000ed04 	.word	0xe000ed04

0800a3ac <prvProcessReceivedCommands>:
{
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	b088      	sub	sp, #32
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3b0:	e006      	b.n	800a3c0 <prvProcessReceivedCommands+0x14>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3b2:	9907      	ldr	r1, [sp, #28]
 800a3b4:	9806      	ldr	r0, [sp, #24]
 800a3b6:	9b05      	ldr	r3, [sp, #20]
 800a3b8:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3ba:	9b04      	ldr	r3, [sp, #16]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	da0b      	bge.n	800a3d8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	a904      	add	r1, sp, #16
 800a3c4:	4b36      	ldr	r3, [pc, #216]	; (800a4a0 <prvProcessReceivedCommands+0xf4>)
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	f7ff f894 	bl	80094f4 <xQueueReceive>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d065      	beq.n	800a49c <prvProcessReceivedCommands+0xf0>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	daf1      	bge.n	800a3ba <prvProcessReceivedCommands+0xe>
 800a3d6:	e7ec      	b.n	800a3b2 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3da:	6963      	ldr	r3, [r4, #20]
 800a3dc:	b113      	cbz	r3, 800a3e4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3de:	1d20      	adds	r0, r4, #4
 800a3e0:	f7fe fe10 	bl	8009004 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3e4:	a803      	add	r0, sp, #12
 800a3e6:	f7ff ff61 	bl	800a2ac <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800a3ea:	9b04      	ldr	r3, [sp, #16]
 800a3ec:	2b09      	cmp	r3, #9
 800a3ee:	d8e7      	bhi.n	800a3c0 <prvProcessReceivedCommands+0x14>
 800a3f0:	a201      	add	r2, pc, #4	; (adr r2, 800a3f8 <prvProcessReceivedCommands+0x4c>)
 800a3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f6:	bf00      	nop
 800a3f8:	0800a421 	.word	0x0800a421
 800a3fc:	0800a421 	.word	0x0800a421
 800a400:	0800a421 	.word	0x0800a421
 800a404:	0800a3c1 	.word	0x0800a3c1
 800a408:	0800a467 	.word	0x0800a467
 800a40c:	0800a48d 	.word	0x0800a48d
 800a410:	0800a421 	.word	0x0800a421
 800a414:	0800a421 	.word	0x0800a421
 800a418:	0800a3c1 	.word	0x0800a3c1
 800a41c:	0800a467 	.word	0x0800a467
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a420:	9b05      	ldr	r3, [sp, #20]
 800a422:	69a1      	ldr	r1, [r4, #24]
 800a424:	4602      	mov	r2, r0
 800a426:	4419      	add	r1, r3
 800a428:	4620      	mov	r0, r4
 800a42a:	f7ff fe3f 	bl	800a0ac <prvInsertTimerInActiveList>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d0c6      	beq.n	800a3c0 <prvProcessReceivedCommands+0x14>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a434:	4620      	mov	r0, r4
 800a436:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a438:	69e3      	ldr	r3, [r4, #28]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d1c0      	bne.n	800a3c0 <prvProcessReceivedCommands+0x14>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a43e:	69a2      	ldr	r2, [r4, #24]
 800a440:	2100      	movs	r1, #0
 800a442:	9100      	str	r1, [sp, #0]
 800a444:	460b      	mov	r3, r1
 800a446:	9805      	ldr	r0, [sp, #20]
 800a448:	4402      	add	r2, r0
 800a44a:	4620      	mov	r0, r4
 800a44c:	f7ff febc 	bl	800a1c8 <xTimerGenericCommand>
							configASSERT( xResult );
 800a450:	2800      	cmp	r0, #0
 800a452:	d1b5      	bne.n	800a3c0 <prvProcessReceivedCommands+0x14>
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	f383 8811 	msr	BASEPRI, r3
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	f3bf 8f4f 	dsb	sy
 800a464:	e7fe      	b.n	800a464 <prvProcessReceivedCommands+0xb8>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a466:	9905      	ldr	r1, [sp, #20]
 800a468:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a46a:	b131      	cbz	r1, 800a47a <prvProcessReceivedCommands+0xce>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a46c:	4603      	mov	r3, r0
 800a46e:	4602      	mov	r2, r0
 800a470:	4401      	add	r1, r0
 800a472:	4620      	mov	r0, r4
 800a474:	f7ff fe1a 	bl	800a0ac <prvInsertTimerInActiveList>
					break;
 800a478:	e7a2      	b.n	800a3c0 <prvProcessReceivedCommands+0x14>
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a48a:	e7fe      	b.n	800a48a <prvProcessReceivedCommands+0xde>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a48c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a490:	2b00      	cmp	r3, #0
 800a492:	d195      	bne.n	800a3c0 <prvProcessReceivedCommands+0x14>
							vPortFree( pxTimer );
 800a494:	4620      	mov	r0, r4
 800a496:	f000 fa55 	bl	800a944 <vPortFree>
 800a49a:	e791      	b.n	800a3c0 <prvProcessReceivedCommands+0x14>
}
 800a49c:	b008      	add	sp, #32
 800a49e:	bd10      	pop	{r4, pc}
 800a4a0:	20001480 	.word	0x20001480

0800a4a4 <prvTimerTask>:
{
 800a4a4:	b500      	push	{lr}
 800a4a6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a4a8:	a801      	add	r0, sp, #4
 800a4aa:	f7ff fdef 	bl	800a08c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a4ae:	9901      	ldr	r1, [sp, #4]
 800a4b0:	f7ff ff42 	bl	800a338 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800a4b4:	f7ff ff7a 	bl	800a3ac <prvProcessReceivedCommands>
	for( ;; )
 800a4b8:	e7f6      	b.n	800a4a8 <prvTimerTask+0x4>
	...

0800a4bc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a4bc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <prvTaskExitError+0x3c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ca:	d008      	beq.n	800a4de <prvTaskExitError+0x22>
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	e7fe      	b.n	800a4dc <prvTaskExitError+0x20>
 800a4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0fc      	beq.n	800a4ee <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4f4:	b002      	add	sp, #8
 800a4f6:	4770      	bx	lr
 800a4f8:	20000124 	.word	0x20000124

0800a4fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a4fc:	4806      	ldr	r0, [pc, #24]	; (800a518 <prvPortStartFirstTask+0x1c>)
 800a4fe:	6800      	ldr	r0, [r0, #0]
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	f380 8808 	msr	MSP, r0
 800a506:	b662      	cpsie	i
 800a508:	b661      	cpsie	f
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	df00      	svc	0
 800a514:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a516:	0000      	.short	0x0000
 800a518:	e000ed08 	.word	0xe000ed08

0800a51c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a51c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a520:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a524:	f021 0101 	bic.w	r1, r1, #1
 800a528:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a52c:	4b03      	ldr	r3, [pc, #12]	; (800a53c <pxPortInitialiseStack+0x20>)
 800a52e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a532:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800a536:	3840      	subs	r0, #64	; 0x40
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	0800a4bd 	.word	0x0800a4bd

0800a540 <SVC_Handler>:
	__asm volatile (
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <pxCurrentTCBConst2>)
 800a542:	6819      	ldr	r1, [r3, #0]
 800a544:	6808      	ldr	r0, [r1, #0]
 800a546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a54a:	f380 8809 	msr	PSP, r0
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f04f 0000 	mov.w	r0, #0
 800a556:	f380 8811 	msr	BASEPRI, r0
 800a55a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a55e:	4770      	bx	lr

0800a560 <pxCurrentTCBConst2>:
 800a560:	20000e60 	.word	0x20000e60

0800a564 <vPortEnterCritical>:
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a574:	4a0a      	ldr	r2, [pc, #40]	; (800a5a0 <vPortEnterCritical+0x3c>)
 800a576:	6813      	ldr	r3, [r2, #0]
 800a578:	3301      	adds	r3, #1
 800a57a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d000      	beq.n	800a582 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800a580:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a582:	4b08      	ldr	r3, [pc, #32]	; (800a5a4 <vPortEnterCritical+0x40>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a58a:	d0f9      	beq.n	800a580 <vPortEnterCritical+0x1c>
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	e7fe      	b.n	800a59c <vPortEnterCritical+0x38>
 800a59e:	bf00      	nop
 800a5a0:	20000124 	.word	0x20000124
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <vPortExitCritical+0x28>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	b943      	cbnz	r3, 800a5c0 <vPortExitCritical+0x18>
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	e7fe      	b.n	800a5be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	4a03      	ldr	r2, [pc, #12]	; (800a5d0 <vPortExitCritical+0x28>)
 800a5c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5c6:	b90b      	cbnz	r3, 800a5cc <vPortExitCritical+0x24>
	__asm volatile
 800a5c8:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	20000124 	.word	0x20000124
	...

0800a5e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5e0:	f3ef 8009 	mrs	r0, PSP
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	4b0d      	ldr	r3, [pc, #52]	; (800a620 <pxCurrentTCBConst>)
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a5f0:	6010      	str	r0, [r2, #0]
 800a5f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a5f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a5fa:	f380 8811 	msr	BASEPRI, r0
 800a5fe:	f7ff fbd5 	bl	8009dac <vTaskSwitchContext>
 800a602:	f04f 0000 	mov.w	r0, #0
 800a606:	f380 8811 	msr	BASEPRI, r0
 800a60a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a60e:	6819      	ldr	r1, [r3, #0]
 800a610:	6808      	ldr	r0, [r1, #0]
 800a612:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a616:	f380 8809 	msr	PSP, r0
 800a61a:	f3bf 8f6f 	isb	sy
 800a61e:	4770      	bx	lr

0800a620 <pxCurrentTCBConst>:
 800a620:	20000e60 	.word	0x20000e60

0800a624 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a624:	b508      	push	{r3, lr}
	__asm volatile
 800a626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a636:	f7ff fa8b 	bl	8009b50 <xTaskIncrementTick>
 800a63a:	b118      	cbz	r0, 800a644 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a63c:	4b03      	ldr	r3, [pc, #12]	; (800a64c <SysTick_Handler+0x28>)
 800a63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a642:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a644:	2300      	movs	r3, #0
 800a646:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a64a:	bd08      	pop	{r3, pc}
 800a64c:	e000ed04 	.word	0xe000ed04

0800a650 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a650:	4a08      	ldr	r2, [pc, #32]	; (800a674 <vPortSetupTimerInterrupt+0x24>)
 800a652:	2300      	movs	r3, #0
 800a654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a656:	4908      	ldr	r1, [pc, #32]	; (800a678 <vPortSetupTimerInterrupt+0x28>)
 800a658:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a65a:	4b08      	ldr	r3, [pc, #32]	; (800a67c <vPortSetupTimerInterrupt+0x2c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4908      	ldr	r1, [pc, #32]	; (800a680 <vPortSetupTimerInterrupt+0x30>)
 800a660:	fba1 1303 	umull	r1, r3, r1, r3
 800a664:	099b      	lsrs	r3, r3, #6
 800a666:	3b01      	subs	r3, #1
 800a668:	4906      	ldr	r1, [pc, #24]	; (800a684 <vPortSetupTimerInterrupt+0x34>)
 800a66a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a66c:	2307      	movs	r3, #7
 800a66e:	6013      	str	r3, [r2, #0]
}
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	e000e010 	.word	0xe000e010
 800a678:	e000e018 	.word	0xe000e018
 800a67c:	20000008 	.word	0x20000008
 800a680:	10624dd3 	.word	0x10624dd3
 800a684:	e000e014 	.word	0xe000e014

0800a688 <xPortStartScheduler>:
{
 800a688:	b510      	push	{r4, lr}
 800a68a:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a68c:	4b27      	ldr	r3, [pc, #156]	; (800a72c <xPortStartScheduler+0xa4>)
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	b2d2      	uxtb	r2, r2
 800a692:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a694:	22ff      	movs	r2, #255	; 0xff
 800a696:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6a0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6a8:	4a21      	ldr	r2, [pc, #132]	; (800a730 <xPortStartScheduler+0xa8>)
 800a6aa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ac:	4b21      	ldr	r3, [pc, #132]	; (800a734 <xPortStartScheduler+0xac>)
 800a6ae:	2207      	movs	r2, #7
 800a6b0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a6ba:	d00a      	beq.n	800a6d2 <xPortStartScheduler+0x4a>
			ulMaxPRIGROUPValue--;
 800a6bc:	4a1d      	ldr	r2, [pc, #116]	; (800a734 <xPortStartScheduler+0xac>)
 800a6be:	6813      	ldr	r3, [r2, #0]
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	f88d 3003 	strb.w	r3, [sp, #3]
 800a6d0:	e7ef      	b.n	800a6b2 <xPortStartScheduler+0x2a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6d2:	4b18      	ldr	r3, [pc, #96]	; (800a734 <xPortStartScheduler+0xac>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d008      	beq.n	800a6ec <xPortStartScheduler+0x64>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	e7fe      	b.n	800a6ea <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6ec:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6f2:	4a10      	ldr	r2, [pc, #64]	; (800a734 <xPortStartScheduler+0xac>)
 800a6f4:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6f6:	9b01      	ldr	r3, [sp, #4]
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	4a0c      	ldr	r2, [pc, #48]	; (800a72c <xPortStartScheduler+0xa4>)
 800a6fc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6fe:	4b0e      	ldr	r3, [pc, #56]	; (800a738 <xPortStartScheduler+0xb0>)
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a706:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a70e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a710:	f7ff ff9e 	bl	800a650 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a714:	2400      	movs	r4, #0
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <xPortStartScheduler+0xb4>)
 800a718:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800a71a:	f7ff feef 	bl	800a4fc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a71e:	f7ff fb45 	bl	8009dac <vTaskSwitchContext>
	prvTaskExitError();
 800a722:	f7ff fecb 	bl	800a4bc <prvTaskExitError>
}
 800a726:	4620      	mov	r0, r4
 800a728:	b002      	add	sp, #8
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	e000e400 	.word	0xe000e400
 800a730:	20001488 	.word	0x20001488
 800a734:	2000148c 	.word	0x2000148c
 800a738:	e000ed20 	.word	0xe000ed20
 800a73c:	20000124 	.word	0x20000124

0800a740 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a740:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a744:	2b0f      	cmp	r3, #15
 800a746:	d90f      	bls.n	800a768 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a748:	4a10      	ldr	r2, [pc, #64]	; (800a78c <vPortValidateInterruptPriority+0x4c>)
 800a74a:	5c9b      	ldrb	r3, [r3, r2]
 800a74c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a74e:	4a10      	ldr	r2, [pc, #64]	; (800a790 <vPortValidateInterruptPriority+0x50>)
 800a750:	7812      	ldrb	r2, [r2, #0]
 800a752:	429a      	cmp	r2, r3
 800a754:	d908      	bls.n	800a768 <vPortValidateInterruptPriority+0x28>
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	e7fe      	b.n	800a766 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a768:	4b0a      	ldr	r3, [pc, #40]	; (800a794 <vPortValidateInterruptPriority+0x54>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a770:	4a09      	ldr	r2, [pc, #36]	; (800a798 <vPortValidateInterruptPriority+0x58>)
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	4293      	cmp	r3, r2
 800a776:	d908      	bls.n	800a78a <vPortValidateInterruptPriority+0x4a>
 800a778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	e7fe      	b.n	800a788 <vPortValidateInterruptPriority+0x48>
	}
 800a78a:	4770      	bx	lr
 800a78c:	e000e3f0 	.word	0xe000e3f0
 800a790:	20001488 	.word	0x20001488
 800a794:	e000ed0c 	.word	0xe000ed0c
 800a798:	2000148c 	.word	0x2000148c

0800a79c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a79c:	4a12      	ldr	r2, [pc, #72]	; (800a7e8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a79e:	f012 0f07 	tst.w	r2, #7
 800a7a2:	d01e      	beq.n	800a7e2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7a4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7a6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7aa:	f5c1 6340 	rsb	r3, r1, #3072	; 0xc00
 800a7ae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7b0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7b2:	480e      	ldr	r0, [pc, #56]	; (800a7ec <prvHeapInit+0x50>)
 800a7b4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7ba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a7bc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7be:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a7c2:	480b      	ldr	r0, [pc, #44]	; (800a7f0 <prvHeapInit+0x54>)
 800a7c4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 800a7c6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a7c8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a7ca:	1a99      	subs	r1, r3, r2
 800a7cc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a7ce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7d0:	4b08      	ldr	r3, [pc, #32]	; (800a7f4 <prvHeapInit+0x58>)
 800a7d2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a7d4:	4b08      	ldr	r3, [pc, #32]	; (800a7f8 <prvHeapInit+0x5c>)
 800a7d6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a7d8:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <prvHeapInit+0x60>)
 800a7da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a7de:	601a      	str	r2, [r3, #0]
}
 800a7e0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a7e6:	e7e4      	b.n	800a7b2 <prvHeapInit+0x16>
 800a7e8:	20001494 	.word	0x20001494
 800a7ec:	200020a0 	.word	0x200020a0
 800a7f0:	20001490 	.word	0x20001490
 800a7f4:	2000209c 	.word	0x2000209c
 800a7f8:	20002098 	.word	0x20002098
 800a7fc:	20002094 	.word	0x20002094

0800a800 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a800:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a802:	4b12      	ldr	r3, [pc, #72]	; (800a84c <prvInsertBlockIntoFreeList+0x4c>)
 800a804:	461a      	mov	r2, r3
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4283      	cmp	r3, r0
 800a80a:	d3fb      	bcc.n	800a804 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a80c:	6851      	ldr	r1, [r2, #4]
 800a80e:	1854      	adds	r4, r2, r1
 800a810:	4284      	cmp	r4, r0
 800a812:	d009      	beq.n	800a828 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a814:	6841      	ldr	r1, [r0, #4]
 800a816:	1844      	adds	r4, r0, r1
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d00a      	beq.n	800a832 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a81c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a81e:	4290      	cmp	r0, r2
 800a820:	d000      	beq.n	800a824 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a822:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a824:	bc10      	pop	{r4}
 800a826:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a828:	6840      	ldr	r0, [r0, #4]
 800a82a:	4401      	add	r1, r0
 800a82c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800a82e:	4610      	mov	r0, r2
 800a830:	e7f0      	b.n	800a814 <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a832:	4c07      	ldr	r4, [pc, #28]	; (800a850 <prvInsertBlockIntoFreeList+0x50>)
 800a834:	6824      	ldr	r4, [r4, #0]
 800a836:	42a3      	cmp	r3, r4
 800a838:	d006      	beq.n	800a848 <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4419      	add	r1, r3
 800a83e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a840:	6813      	ldr	r3, [r2, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	6003      	str	r3, [r0, #0]
 800a846:	e7ea      	b.n	800a81e <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a848:	6004      	str	r4, [r0, #0]
 800a84a:	e7e8      	b.n	800a81e <prvInsertBlockIntoFreeList+0x1e>
 800a84c:	200020a0 	.word	0x200020a0
 800a850:	20001490 	.word	0x20001490

0800a854 <pvPortMalloc>:
{
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a858:	f7ff f96c 	bl	8009b34 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a85c:	4b34      	ldr	r3, [pc, #208]	; (800a930 <pvPortMalloc+0xdc>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	b1a3      	cbz	r3, 800a88c <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a862:	4b34      	ldr	r3, [pc, #208]	; (800a934 <pvPortMalloc+0xe0>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	421c      	tst	r4, r3
 800a868:	d14a      	bne.n	800a900 <pvPortMalloc+0xac>
			if( xWantedSize > 0 )
 800a86a:	b134      	cbz	r4, 800a87a <pvPortMalloc+0x26>
				xWantedSize += xHeapStructSize;
 800a86c:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a86e:	f014 0f07 	tst.w	r4, #7
 800a872:	d002      	beq.n	800a87a <pvPortMalloc+0x26>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a874:	f024 0407 	bic.w	r4, r4, #7
 800a878:	3408      	adds	r4, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a87a:	2c00      	cmp	r4, #0
 800a87c:	d042      	beq.n	800a904 <pvPortMalloc+0xb0>
 800a87e:	4b2e      	ldr	r3, [pc, #184]	; (800a938 <pvPortMalloc+0xe4>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	42a3      	cmp	r3, r4
 800a884:	d34d      	bcc.n	800a922 <pvPortMalloc+0xce>
				pxBlock = xStart.pxNextFreeBlock;
 800a886:	4b2d      	ldr	r3, [pc, #180]	; (800a93c <pvPortMalloc+0xe8>)
 800a888:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a88a:	e004      	b.n	800a896 <pvPortMalloc+0x42>
			prvHeapInit();
 800a88c:	f7ff ff86 	bl	800a79c <prvHeapInit>
 800a890:	e7e7      	b.n	800a862 <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800a892:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a894:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a896:	686a      	ldr	r2, [r5, #4]
 800a898:	42a2      	cmp	r2, r4
 800a89a:	d202      	bcs.n	800a8a2 <pvPortMalloc+0x4e>
 800a89c:	682a      	ldr	r2, [r5, #0]
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	d1f7      	bne.n	800a892 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 800a8a2:	4a23      	ldr	r2, [pc, #140]	; (800a930 <pvPortMalloc+0xdc>)
 800a8a4:	6812      	ldr	r2, [r2, #0]
 800a8a6:	42aa      	cmp	r2, r5
 800a8a8:	d03d      	beq.n	800a926 <pvPortMalloc+0xd2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8aa:	681e      	ldr	r6, [r3, #0]
 800a8ac:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8ae:	682a      	ldr	r2, [r5, #0]
 800a8b0:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8b2:	686b      	ldr	r3, [r5, #4]
 800a8b4:	1b1b      	subs	r3, r3, r4
 800a8b6:	2b10      	cmp	r3, #16
 800a8b8:	d910      	bls.n	800a8dc <pvPortMalloc+0x88>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8ba:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8bc:	f010 0f07 	tst.w	r0, #7
 800a8c0:	d008      	beq.n	800a8d4 <pvPortMalloc+0x80>
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	e7fe      	b.n	800a8d2 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a8d4:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a8d6:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a8d8:	f7ff ff92 	bl	800a800 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a8dc:	686a      	ldr	r2, [r5, #4]
 800a8de:	4916      	ldr	r1, [pc, #88]	; (800a938 <pvPortMalloc+0xe4>)
 800a8e0:	680b      	ldr	r3, [r1, #0]
 800a8e2:	1a9b      	subs	r3, r3, r2
 800a8e4:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a8e6:	4916      	ldr	r1, [pc, #88]	; (800a940 <pvPortMalloc+0xec>)
 800a8e8:	6809      	ldr	r1, [r1, #0]
 800a8ea:	428b      	cmp	r3, r1
 800a8ec:	d201      	bcs.n	800a8f2 <pvPortMalloc+0x9e>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8ee:	4914      	ldr	r1, [pc, #80]	; (800a940 <pvPortMalloc+0xec>)
 800a8f0:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8f2:	4b10      	ldr	r3, [pc, #64]	; (800a934 <pvPortMalloc+0xe0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	e002      	b.n	800a906 <pvPortMalloc+0xb2>
void *pvReturn = NULL;
 800a900:	2600      	movs	r6, #0
 800a902:	e000      	b.n	800a906 <pvPortMalloc+0xb2>
 800a904:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 800a906:	f7ff f9af 	bl	8009c68 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a90a:	f016 0f07 	tst.w	r6, #7
 800a90e:	d00c      	beq.n	800a92a <pvPortMalloc+0xd6>
 800a910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a914:	f383 8811 	msr	BASEPRI, r3
 800a918:	f3bf 8f6f 	isb	sy
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	e7fe      	b.n	800a920 <pvPortMalloc+0xcc>
void *pvReturn = NULL;
 800a922:	2600      	movs	r6, #0
 800a924:	e7ef      	b.n	800a906 <pvPortMalloc+0xb2>
 800a926:	2600      	movs	r6, #0
 800a928:	e7ed      	b.n	800a906 <pvPortMalloc+0xb2>
}
 800a92a:	4630      	mov	r0, r6
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	bf00      	nop
 800a930:	20001490 	.word	0x20001490
 800a934:	20002094 	.word	0x20002094
 800a938:	20002098 	.word	0x20002098
 800a93c:	200020a0 	.word	0x200020a0
 800a940:	2000209c 	.word	0x2000209c

0800a944 <vPortFree>:
	if( pv != NULL )
 800a944:	b380      	cbz	r0, 800a9a8 <vPortFree+0x64>
{
 800a946:	b538      	push	{r3, r4, r5, lr}
 800a948:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a94a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a94e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a952:	4a16      	ldr	r2, [pc, #88]	; (800a9ac <vPortFree+0x68>)
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	4213      	tst	r3, r2
 800a958:	d108      	bne.n	800a96c <vPortFree+0x28>
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	e7fe      	b.n	800a96a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a96c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a970:	b141      	cbz	r1, 800a984 <vPortFree+0x40>
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	e7fe      	b.n	800a982 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a984:	ea23 0302 	bic.w	r3, r3, r2
 800a988:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a98c:	f7ff f8d2 	bl	8009b34 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a990:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a994:	4a06      	ldr	r2, [pc, #24]	; (800a9b0 <vPortFree+0x6c>)
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	440b      	add	r3, r1
 800a99a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7ff ff2f 	bl	800a800 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a9a2:	f7ff f961 	bl	8009c68 <xTaskResumeAll>
}
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	20002094 	.word	0x20002094
 800a9b0:	20002098 	.word	0x20002098

0800a9b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	490f      	ldr	r1, [pc, #60]	; (800a9f8 <MX_USB_DEVICE_Init+0x44>)
 800a9ba:	4810      	ldr	r0, [pc, #64]	; (800a9fc <MX_USB_DEVICE_Init+0x48>)
 800a9bc:	f7fd fd24 	bl	8008408 <USBD_Init>
 800a9c0:	b970      	cbnz	r0, 800a9e0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9c2:	490f      	ldr	r1, [pc, #60]	; (800aa00 <MX_USB_DEVICE_Init+0x4c>)
 800a9c4:	480d      	ldr	r0, [pc, #52]	; (800a9fc <MX_USB_DEVICE_Init+0x48>)
 800a9c6:	f7fd fd36 	bl	8008436 <USBD_RegisterClass>
 800a9ca:	b960      	cbnz	r0, 800a9e6 <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a9cc:	490d      	ldr	r1, [pc, #52]	; (800aa04 <MX_USB_DEVICE_Init+0x50>)
 800a9ce:	480b      	ldr	r0, [pc, #44]	; (800a9fc <MX_USB_DEVICE_Init+0x48>)
 800a9d0:	f7fd fcd3 	bl	800837a <USBD_CDC_RegisterInterface>
 800a9d4:	b950      	cbnz	r0, 800a9ec <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a9d6:	4809      	ldr	r0, [pc, #36]	; (800a9fc <MX_USB_DEVICE_Init+0x48>)
 800a9d8:	f7fd fd34 	bl	8008444 <USBD_Start>
 800a9dc:	b948      	cbnz	r0, 800a9f2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9de:	bd08      	pop	{r3, pc}
    Error_Handler();
 800a9e0:	f7f6 fcd4 	bl	800138c <Error_Handler>
 800a9e4:	e7ed      	b.n	800a9c2 <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 800a9e6:	f7f6 fcd1 	bl	800138c <Error_Handler>
 800a9ea:	e7ef      	b.n	800a9cc <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 800a9ec:	f7f6 fcce 	bl	800138c <Error_Handler>
 800a9f0:	e7f1      	b.n	800a9d6 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 800a9f2:	f7f6 fccb 	bl	800138c <Error_Handler>
}
 800a9f6:	e7f2      	b.n	800a9de <MX_USB_DEVICE_Init+0x2a>
 800a9f8:	20000138 	.word	0x20000138
 800a9fc:	20002810 	.word	0x20002810
 800aa00:	20000014 	.word	0x20000014
 800aa04:	20000128 	.word	0x20000128

0800aa08 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800aa08:	2000      	movs	r0, #0
 800aa0a:	4770      	bx	lr

0800aa0c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	4770      	bx	lr

0800aa10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aa10:	b510      	push	{r4, lr}
 800aa12:	4601      	mov	r1, r0
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aa14:	4c04      	ldr	r4, [pc, #16]	; (800aa28 <CDC_Receive_FS+0x18>)
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7fd fcbe 	bl	8008398 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f7fd fcdb 	bl	80083d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800aa22:	2000      	movs	r0, #0
 800aa24:	bd10      	pop	{r4, pc}
 800aa26:	bf00      	nop
 800aa28:	20002810 	.word	0x20002810

0800aa2c <CDC_Init_FS>:
{
 800aa2c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa2e:	4c06      	ldr	r4, [pc, #24]	; (800aa48 <CDC_Init_FS+0x1c>)
 800aa30:	2200      	movs	r2, #0
 800aa32:	4906      	ldr	r1, [pc, #24]	; (800aa4c <CDC_Init_FS+0x20>)
 800aa34:	4620      	mov	r0, r4
 800aa36:	f7fd fca7 	bl	8008388 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa3a:	4905      	ldr	r1, [pc, #20]	; (800aa50 <CDC_Init_FS+0x24>)
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f7fd fcab 	bl	8008398 <USBD_CDC_SetRxBuffer>
}
 800aa42:	2000      	movs	r0, #0
 800aa44:	bd10      	pop	{r4, pc}
 800aa46:	bf00      	nop
 800aa48:	20002810 	.word	0x20002810
 800aa4c:	20002ad4 	.word	0x20002ad4
 800aa50:	20002ebc 	.word	0x20002ebc

0800aa54 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa54:	4b09      	ldr	r3, [pc, #36]	; (800aa7c <CDC_Transmit_FS+0x28>)
 800aa56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800aa5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa5e:	b10b      	cbz	r3, 800aa64 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 800aa60:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 800aa62:	4770      	bx	lr
{
 800aa64:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa66:	4c05      	ldr	r4, [pc, #20]	; (800aa7c <CDC_Transmit_FS+0x28>)
 800aa68:	460a      	mov	r2, r1
 800aa6a:	4601      	mov	r1, r0
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f7fd fc8b 	bl	8008388 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa72:	4620      	mov	r0, r4
 800aa74:	f7fd fc96 	bl	80083a4 <USBD_CDC_TransmitPacket>
}
 800aa78:	bd10      	pop	{r4, pc}
 800aa7a:	bf00      	nop
 800aa7c:	20002810 	.word	0x20002810

0800aa80 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa80:	2312      	movs	r3, #18
 800aa82:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 800aa84:	4800      	ldr	r0, [pc, #0]	; (800aa88 <USBD_FS_DeviceDescriptor+0x8>)
 800aa86:	4770      	bx	lr
 800aa88:	20000154 	.word	0x20000154

0800aa8c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800aa90:	4800      	ldr	r0, [pc, #0]	; (800aa94 <USBD_FS_LangIDStrDescriptor+0x8>)
 800aa92:	4770      	bx	lr
 800aa94:	20000168 	.word	0x20000168

0800aa98 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d217      	bcs.n	800aace <IntToUnicode+0x36>
{
 800aa9e:	b430      	push	{r4, r5}
 800aaa0:	e00b      	b.n	800aaba <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aaa2:	3437      	adds	r4, #55	; 0x37
 800aaa4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800aaa8:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800aaaa:	005c      	lsls	r4, r3, #1
 800aaac:	3401      	adds	r4, #1
 800aaae:	2500      	movs	r5, #0
 800aab0:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 800aab2:	3301      	adds	r3, #1
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d207      	bcs.n	800aaca <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 800aaba:	0f04      	lsrs	r4, r0, #28
 800aabc:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 800aac0:	d2ef      	bcs.n	800aaa2 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 800aac2:	3430      	adds	r4, #48	; 0x30
 800aac4:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 800aac8:	e7ee      	b.n	800aaa8 <IntToUnicode+0x10>
  }
}
 800aaca:	bc30      	pop	{r4, r5}
 800aacc:	4770      	bx	lr
 800aace:	4770      	bx	lr

0800aad0 <Get_SerialNum>:
{
 800aad0:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aad2:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <Get_SerialNum+0x2c>)
 800aad4:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aad6:	3304      	adds	r3, #4
 800aad8:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aada:	3304      	adds	r3, #4
 800aadc:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800aade:	18c0      	adds	r0, r0, r3
 800aae0:	d100      	bne.n	800aae4 <Get_SerialNum+0x14>
}
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aae4:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <Get_SerialNum+0x30>)
 800aae6:	2208      	movs	r2, #8
 800aae8:	1ca9      	adds	r1, r5, #2
 800aaea:	f7ff ffd5 	bl	800aa98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aaee:	2204      	movs	r2, #4
 800aaf0:	f105 0112 	add.w	r1, r5, #18
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f7ff ffcf 	bl	800aa98 <IntToUnicode>
}
 800aafa:	e7f2      	b.n	800aae2 <Get_SerialNum+0x12>
 800aafc:	1ffff7e8 	.word	0x1ffff7e8
 800ab00:	2000016c 	.word	0x2000016c

0800ab04 <USBD_FS_SerialStrDescriptor>:
{
 800ab04:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800ab06:	231a      	movs	r3, #26
 800ab08:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800ab0a:	f7ff ffe1 	bl	800aad0 <Get_SerialNum>
}
 800ab0e:	4801      	ldr	r0, [pc, #4]	; (800ab14 <USBD_FS_SerialStrDescriptor+0x10>)
 800ab10:	bd08      	pop	{r3, pc}
 800ab12:	bf00      	nop
 800ab14:	2000016c 	.word	0x2000016c

0800ab18 <USBD_FS_ProductStrDescriptor>:
{
 800ab18:	b508      	push	{r3, lr}
 800ab1a:	460a      	mov	r2, r1
  if(speed == 0)
 800ab1c:	b928      	cbnz	r0, 800ab2a <USBD_FS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab1e:	4905      	ldr	r1, [pc, #20]	; (800ab34 <USBD_FS_ProductStrDescriptor+0x1c>)
 800ab20:	4805      	ldr	r0, [pc, #20]	; (800ab38 <USBD_FS_ProductStrDescriptor+0x20>)
 800ab22:	f7fe f8e6 	bl	8008cf2 <USBD_GetString>
}
 800ab26:	4803      	ldr	r0, [pc, #12]	; (800ab34 <USBD_FS_ProductStrDescriptor+0x1c>)
 800ab28:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab2a:	4902      	ldr	r1, [pc, #8]	; (800ab34 <USBD_FS_ProductStrDescriptor+0x1c>)
 800ab2c:	4802      	ldr	r0, [pc, #8]	; (800ab38 <USBD_FS_ProductStrDescriptor+0x20>)
 800ab2e:	f7fe f8e0 	bl	8008cf2 <USBD_GetString>
 800ab32:	e7f8      	b.n	800ab26 <USBD_FS_ProductStrDescriptor+0xe>
 800ab34:	200032a4 	.word	0x200032a4
 800ab38:	0800e37c 	.word	0x0800e37c

0800ab3c <USBD_FS_ManufacturerStrDescriptor>:
{
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab40:	4c03      	ldr	r4, [pc, #12]	; (800ab50 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 800ab42:	4621      	mov	r1, r4
 800ab44:	4803      	ldr	r0, [pc, #12]	; (800ab54 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 800ab46:	f7fe f8d4 	bl	8008cf2 <USBD_GetString>
}
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	bf00      	nop
 800ab50:	200032a4 	.word	0x200032a4
 800ab54:	0800e394 	.word	0x0800e394

0800ab58 <USBD_FS_ConfigStrDescriptor>:
{
 800ab58:	b508      	push	{r3, lr}
 800ab5a:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 800ab5c:	b928      	cbnz	r0, 800ab6a <USBD_FS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab5e:	4905      	ldr	r1, [pc, #20]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ab60:	4805      	ldr	r0, [pc, #20]	; (800ab78 <USBD_FS_ConfigStrDescriptor+0x20>)
 800ab62:	f7fe f8c6 	bl	8008cf2 <USBD_GetString>
}
 800ab66:	4803      	ldr	r0, [pc, #12]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ab68:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab6a:	4902      	ldr	r1, [pc, #8]	; (800ab74 <USBD_FS_ConfigStrDescriptor+0x1c>)
 800ab6c:	4802      	ldr	r0, [pc, #8]	; (800ab78 <USBD_FS_ConfigStrDescriptor+0x20>)
 800ab6e:	f7fe f8c0 	bl	8008cf2 <USBD_GetString>
 800ab72:	e7f8      	b.n	800ab66 <USBD_FS_ConfigStrDescriptor+0xe>
 800ab74:	200032a4 	.word	0x200032a4
 800ab78:	0800e3a8 	.word	0x0800e3a8

0800ab7c <USBD_FS_InterfaceStrDescriptor>:
{
 800ab7c:	b508      	push	{r3, lr}
 800ab7e:	460a      	mov	r2, r1
  if(speed == 0)
 800ab80:	b928      	cbnz	r0, 800ab8e <USBD_FS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab82:	4905      	ldr	r1, [pc, #20]	; (800ab98 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ab84:	4805      	ldr	r0, [pc, #20]	; (800ab9c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800ab86:	f7fe f8b4 	bl	8008cf2 <USBD_GetString>
}
 800ab8a:	4803      	ldr	r0, [pc, #12]	; (800ab98 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ab8c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab8e:	4902      	ldr	r1, [pc, #8]	; (800ab98 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800ab90:	4802      	ldr	r0, [pc, #8]	; (800ab9c <USBD_FS_InterfaceStrDescriptor+0x20>)
 800ab92:	f7fe f8ae 	bl	8008cf2 <USBD_GetString>
 800ab96:	e7f8      	b.n	800ab8a <USBD_FS_InterfaceStrDescriptor+0xe>
 800ab98:	200032a4 	.word	0x200032a4
 800ab9c:	0800e3b4 	.word	0x0800e3b4

0800aba0 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800aba0:	2802      	cmp	r0, #2
 800aba2:	d805      	bhi.n	800abb0 <USBD_Get_USB_Status+0x10>
 800aba4:	e8df f000 	tbb	[pc, r0]
 800aba8:	0405      	.short	0x0405
 800abaa:	02          	.byte	0x02
 800abab:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abac:	2001      	movs	r0, #1
    break;
 800abae:	4770      	bx	lr
      usb_status = USBD_FAIL;
 800abb0:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800abb2:	4770      	bx	lr

0800abb4 <HAL_PCD_MspInit>:
  if(pcdHandle->Instance==USB)
 800abb4:	6802      	ldr	r2, [r0, #0]
 800abb6:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <HAL_PCD_MspInit+0x3c>)
 800abb8:	429a      	cmp	r2, r3
 800abba:	d000      	beq.n	800abbe <HAL_PCD_MspInit+0xa>
 800abbc:	4770      	bx	lr
{
 800abbe:	b500      	push	{lr}
 800abc0:	b083      	sub	sp, #12
    __HAL_RCC_USB_CLK_ENABLE();
 800abc2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800abc6:	69da      	ldr	r2, [r3, #28]
 800abc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800abcc:	61da      	str	r2, [r3, #28]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abd4:	9301      	str	r3, [sp, #4]
 800abd6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800abd8:	2200      	movs	r2, #0
 800abda:	2105      	movs	r1, #5
 800abdc:	2014      	movs	r0, #20
 800abde:	f7f8 fa63 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800abe2:	2014      	movs	r0, #20
 800abe4:	f7f8 fa94 	bl	8003110 <HAL_NVIC_EnableIRQ>
}
 800abe8:	b003      	add	sp, #12
 800abea:	f85d fb04 	ldr.w	pc, [sp], #4
 800abee:	bf00      	nop
 800abf0:	40005c00 	.word	0x40005c00

0800abf4 <HAL_PCD_SetupStageCallback>:
{
 800abf4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abf6:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 800abfa:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800abfe:	f7fd fc39 	bl	8008474 <USBD_LL_SetupStage>
}
 800ac02:	bd08      	pop	{r3, pc}

0800ac04 <HAL_PCD_DataOutStageCallback>:
{
 800ac04:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac06:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ac0a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac0e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800ac12:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ac16:	f7fd fc5a 	bl	80084ce <USBD_LL_DataOutStage>
}
 800ac1a:	bd08      	pop	{r3, pc}

0800ac1c <HAL_PCD_DataInStageCallback>:
{
 800ac1c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac1e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800ac22:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ac26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac28:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ac2c:	f7fd fc95 	bl	800855a <USBD_LL_DataInStage>
}
 800ac30:	bd08      	pop	{r3, pc}

0800ac32 <HAL_PCD_SOFCallback>:
{
 800ac32:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac34:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ac38:	f7fd fd36 	bl	80086a8 <USBD_LL_SOF>
}
 800ac3c:	bd08      	pop	{r3, pc}

0800ac3e <HAL_PCD_ResetCallback>:
{
 800ac3e:	b510      	push	{r4, lr}
 800ac40:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ac42:	6883      	ldr	r3, [r0, #8]
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d109      	bne.n	800ac5c <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac48:	2101      	movs	r1, #1
 800ac4a:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800ac4e:	f7fd fd14 	bl	800867a <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ac52:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800ac56:	f7fd fce8 	bl	800862a <USBD_LL_Reset>
}
 800ac5a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ac5c:	f7f6 fb96 	bl	800138c <Error_Handler>
 800ac60:	e7f2      	b.n	800ac48 <HAL_PCD_ResetCallback+0xa>
	...

0800ac64 <HAL_PCD_SuspendCallback>:
{
 800ac64:	b510      	push	{r4, lr}
 800ac66:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac68:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ac6c:	f7fd fd08 	bl	8008680 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 800ac70:	69a3      	ldr	r3, [r4, #24]
 800ac72:	b123      	cbz	r3, 800ac7e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac74:	4a02      	ldr	r2, [pc, #8]	; (800ac80 <HAL_PCD_SuspendCallback+0x1c>)
 800ac76:	6913      	ldr	r3, [r2, #16]
 800ac78:	f043 0306 	orr.w	r3, r3, #6
 800ac7c:	6113      	str	r3, [r2, #16]
}
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	e000ed00 	.word	0xe000ed00

0800ac84 <HAL_PCD_ResumeCallback>:
{
 800ac84:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac86:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800ac8a:	f7fd fd02 	bl	8008692 <USBD_LL_Resume>
}
 800ac8e:	bd08      	pop	{r3, pc}

0800ac90 <USBD_LL_Init>:
{
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800ac94:	481d      	ldr	r0, [pc, #116]	; (800ad0c <USBD_LL_Init+0x7c>)
 800ac96:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ac9a:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 800ac9e:	4b1c      	ldr	r3, [pc, #112]	; (800ad10 <USBD_LL_Init+0x80>)
 800aca0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aca2:	2308      	movs	r3, #8
 800aca4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aca6:	2302      	movs	r3, #2
 800aca8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800acaa:	2300      	movs	r3, #0
 800acac:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800acae:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800acb0:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800acb2:	f7f9 ffc4 	bl	8004c3e <HAL_PCD_Init>
 800acb6:	bb30      	cbnz	r0, 800ad06 <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800acb8:	2318      	movs	r3, #24
 800acba:	2200      	movs	r2, #0
 800acbc:	4611      	mov	r1, r2
 800acbe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800acc2:	f7fa fe0f 	bl	80058e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800acc6:	2358      	movs	r3, #88	; 0x58
 800acc8:	2200      	movs	r2, #0
 800acca:	2180      	movs	r1, #128	; 0x80
 800accc:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800acd0:	f7fa fe08 	bl	80058e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800acd4:	23c0      	movs	r3, #192	; 0xc0
 800acd6:	2200      	movs	r2, #0
 800acd8:	2181      	movs	r1, #129	; 0x81
 800acda:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800acde:	f7fa fe01 	bl	80058e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ace2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ace6:	2200      	movs	r2, #0
 800ace8:	2101      	movs	r1, #1
 800acea:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800acee:	f7fa fdf9 	bl	80058e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800acf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf6:	2200      	movs	r2, #0
 800acf8:	2182      	movs	r1, #130	; 0x82
 800acfa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800acfe:	f7fa fdf1 	bl	80058e4 <HAL_PCDEx_PMAConfig>
}
 800ad02:	2000      	movs	r0, #0
 800ad04:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800ad06:	f7f6 fb41 	bl	800138c <Error_Handler>
 800ad0a:	e7d5      	b.n	800acb8 <USBD_LL_Init+0x28>
 800ad0c:	200034a4 	.word	0x200034a4
 800ad10:	40005c00 	.word	0x40005c00

0800ad14 <USBD_LL_Start>:
{
 800ad14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800ad16:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad1a:	f7fa f816 	bl	8004d4a <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1e:	f7ff ff3f 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ad22:	bd08      	pop	{r3, pc}

0800ad24 <USBD_LL_OpenEP>:
{
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4614      	mov	r4, r2
 800ad28:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad2a:	4623      	mov	r3, r4
 800ad2c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad30:	f7fa fca5 	bl	800567e <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad34:	f7ff ff34 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <USBD_LL_CloseEP>:
{
 800ad3a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad3c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad40:	f7fa fcd9 	bl	80056f6 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad44:	f7ff ff2c 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ad48:	bd08      	pop	{r3, pc}

0800ad4a <USBD_LL_StallEP>:
{
 800ad4a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad4c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad50:	f7fa fd51 	bl	80057f6 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad54:	f7ff ff24 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ad58:	bd08      	pop	{r3, pc}

0800ad5a <USBD_LL_ClearStallEP>:
{
 800ad5a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad5c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad60:	f7fa fd85 	bl	800586e <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad64:	f7ff ff1c 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ad68:	bd08      	pop	{r3, pc}

0800ad6a <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad6a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 800ad6e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ad72:	d108      	bne.n	800ad86 <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad74:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad78:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ad7c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad80:	f891 016a 	ldrb.w	r0, [r1, #362]	; 0x16a
}
 800ad84:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad86:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800ad8a:	3101      	adds	r1, #1
 800ad8c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800ad90:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ad94:	7888      	ldrb	r0, [r1, #2]
 800ad96:	4770      	bx	lr

0800ad98 <USBD_LL_SetUSBAddress>:
{
 800ad98:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad9a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800ad9e:	f7fa fb71 	bl	8005484 <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada2:	f7ff fefd 	bl	800aba0 <USBD_Get_USB_Status>
}
 800ada6:	bd08      	pop	{r3, pc}

0800ada8 <USBD_LL_Transmit>:
{
 800ada8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adaa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800adae:	f7fa fcff 	bl	80057b0 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb2:	f7ff fef5 	bl	800aba0 <USBD_Get_USB_Status>
}
 800adb6:	bd08      	pop	{r3, pc}

0800adb8 <USBD_LL_PrepareReceive>:
{
 800adb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800adba:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800adbe:	f7fa fccc 	bl	800575a <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800adc2:	f7ff feed 	bl	800aba0 <USBD_Get_USB_Status>
}
 800adc6:	bd08      	pop	{r3, pc}

0800adc8 <USBD_LL_GetRxDataSize>:
{
 800adc8:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adca:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800adce:	f7fa fce6 	bl	800579e <HAL_PCD_EP_GetRxCount>
}
 800add2:	bd08      	pop	{r3, pc}

0800add4 <USBD_static_malloc>:
}
 800add4:	4800      	ldr	r0, [pc, #0]	; (800add8 <USBD_static_malloc+0x4>)
 800add6:	4770      	bx	lr
 800add8:	200020a8 	.word	0x200020a8

0800addc <USBD_static_free>:
}
 800addc:	4770      	bx	lr

0800adde <HAL_PCDEx_SetConnectionState>:
}
 800adde:	4770      	bx	lr

0800ade0 <__errno>:
 800ade0:	4b01      	ldr	r3, [pc, #4]	; (800ade8 <__errno+0x8>)
 800ade2:	6818      	ldr	r0, [r3, #0]
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	20000188 	.word	0x20000188

0800adec <__libc_init_array>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	2600      	movs	r6, #0
 800adf0:	4d0c      	ldr	r5, [pc, #48]	; (800ae24 <__libc_init_array+0x38>)
 800adf2:	4c0d      	ldr	r4, [pc, #52]	; (800ae28 <__libc_init_array+0x3c>)
 800adf4:	1b64      	subs	r4, r4, r5
 800adf6:	10a4      	asrs	r4, r4, #2
 800adf8:	42a6      	cmp	r6, r4
 800adfa:	d109      	bne.n	800ae10 <__libc_init_array+0x24>
 800adfc:	f002 feba 	bl	800db74 <_init>
 800ae00:	2600      	movs	r6, #0
 800ae02:	4d0a      	ldr	r5, [pc, #40]	; (800ae2c <__libc_init_array+0x40>)
 800ae04:	4c0a      	ldr	r4, [pc, #40]	; (800ae30 <__libc_init_array+0x44>)
 800ae06:	1b64      	subs	r4, r4, r5
 800ae08:	10a4      	asrs	r4, r4, #2
 800ae0a:	42a6      	cmp	r6, r4
 800ae0c:	d105      	bne.n	800ae1a <__libc_init_array+0x2e>
 800ae0e:	bd70      	pop	{r4, r5, r6, pc}
 800ae10:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae14:	4798      	blx	r3
 800ae16:	3601      	adds	r6, #1
 800ae18:	e7ee      	b.n	800adf8 <__libc_init_array+0xc>
 800ae1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae1e:	4798      	blx	r3
 800ae20:	3601      	adds	r6, #1
 800ae22:	e7f2      	b.n	800ae0a <__libc_init_array+0x1e>
 800ae24:	0800e7a4 	.word	0x0800e7a4
 800ae28:	0800e7a4 	.word	0x0800e7a4
 800ae2c:	0800e7a4 	.word	0x0800e7a4
 800ae30:	0800e7a8 	.word	0x0800e7a8

0800ae34 <memcpy>:
 800ae34:	440a      	add	r2, r1
 800ae36:	4291      	cmp	r1, r2
 800ae38:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae3c:	d100      	bne.n	800ae40 <memcpy+0xc>
 800ae3e:	4770      	bx	lr
 800ae40:	b510      	push	{r4, lr}
 800ae42:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae46:	4291      	cmp	r1, r2
 800ae48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae4c:	d1f9      	bne.n	800ae42 <memcpy+0xe>
 800ae4e:	bd10      	pop	{r4, pc}

0800ae50 <memmove>:
 800ae50:	4288      	cmp	r0, r1
 800ae52:	b510      	push	{r4, lr}
 800ae54:	eb01 0402 	add.w	r4, r1, r2
 800ae58:	d902      	bls.n	800ae60 <memmove+0x10>
 800ae5a:	4284      	cmp	r4, r0
 800ae5c:	4623      	mov	r3, r4
 800ae5e:	d807      	bhi.n	800ae70 <memmove+0x20>
 800ae60:	1e43      	subs	r3, r0, #1
 800ae62:	42a1      	cmp	r1, r4
 800ae64:	d008      	beq.n	800ae78 <memmove+0x28>
 800ae66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae6e:	e7f8      	b.n	800ae62 <memmove+0x12>
 800ae70:	4601      	mov	r1, r0
 800ae72:	4402      	add	r2, r0
 800ae74:	428a      	cmp	r2, r1
 800ae76:	d100      	bne.n	800ae7a <memmove+0x2a>
 800ae78:	bd10      	pop	{r4, pc}
 800ae7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae82:	e7f7      	b.n	800ae74 <memmove+0x24>

0800ae84 <memset>:
 800ae84:	4603      	mov	r3, r0
 800ae86:	4402      	add	r2, r0
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d100      	bne.n	800ae8e <memset+0xa>
 800ae8c:	4770      	bx	lr
 800ae8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ae92:	e7f9      	b.n	800ae88 <memset+0x4>

0800ae94 <__cvt>:
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	bfbb      	ittet	lt
 800ae9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800aea2:	461f      	movlt	r7, r3
 800aea4:	2300      	movge	r3, #0
 800aea6:	232d      	movlt	r3, #45	; 0x2d
 800aea8:	b088      	sub	sp, #32
 800aeaa:	4614      	mov	r4, r2
 800aeac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aeae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800aeb0:	7013      	strb	r3, [r2, #0]
 800aeb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aeb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800aeb8:	f023 0820 	bic.w	r8, r3, #32
 800aebc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aec0:	d005      	beq.n	800aece <__cvt+0x3a>
 800aec2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aec6:	d100      	bne.n	800aeca <__cvt+0x36>
 800aec8:	3501      	adds	r5, #1
 800aeca:	2302      	movs	r3, #2
 800aecc:	e000      	b.n	800aed0 <__cvt+0x3c>
 800aece:	2303      	movs	r3, #3
 800aed0:	aa07      	add	r2, sp, #28
 800aed2:	9204      	str	r2, [sp, #16]
 800aed4:	aa06      	add	r2, sp, #24
 800aed6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800aeda:	e9cd 3500 	strd	r3, r5, [sp]
 800aede:	4622      	mov	r2, r4
 800aee0:	463b      	mov	r3, r7
 800aee2:	f000 fce5 	bl	800b8b0 <_dtoa_r>
 800aee6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aeea:	4606      	mov	r6, r0
 800aeec:	d102      	bne.n	800aef4 <__cvt+0x60>
 800aeee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aef0:	07db      	lsls	r3, r3, #31
 800aef2:	d522      	bpl.n	800af3a <__cvt+0xa6>
 800aef4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aef8:	eb06 0905 	add.w	r9, r6, r5
 800aefc:	d110      	bne.n	800af20 <__cvt+0x8c>
 800aefe:	7833      	ldrb	r3, [r6, #0]
 800af00:	2b30      	cmp	r3, #48	; 0x30
 800af02:	d10a      	bne.n	800af1a <__cvt+0x86>
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	4620      	mov	r0, r4
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fd4c 	bl	80009a8 <__aeabi_dcmpeq>
 800af10:	b918      	cbnz	r0, 800af1a <__cvt+0x86>
 800af12:	f1c5 0501 	rsb	r5, r5, #1
 800af16:	f8ca 5000 	str.w	r5, [sl]
 800af1a:	f8da 3000 	ldr.w	r3, [sl]
 800af1e:	4499      	add	r9, r3
 800af20:	2200      	movs	r2, #0
 800af22:	2300      	movs	r3, #0
 800af24:	4620      	mov	r0, r4
 800af26:	4639      	mov	r1, r7
 800af28:	f7f5 fd3e 	bl	80009a8 <__aeabi_dcmpeq>
 800af2c:	b108      	cbz	r0, 800af32 <__cvt+0x9e>
 800af2e:	f8cd 901c 	str.w	r9, [sp, #28]
 800af32:	2230      	movs	r2, #48	; 0x30
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	454b      	cmp	r3, r9
 800af38:	d307      	bcc.n	800af4a <__cvt+0xb6>
 800af3a:	4630      	mov	r0, r6
 800af3c:	9b07      	ldr	r3, [sp, #28]
 800af3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af40:	1b9b      	subs	r3, r3, r6
 800af42:	6013      	str	r3, [r2, #0]
 800af44:	b008      	add	sp, #32
 800af46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af4a:	1c59      	adds	r1, r3, #1
 800af4c:	9107      	str	r1, [sp, #28]
 800af4e:	701a      	strb	r2, [r3, #0]
 800af50:	e7f0      	b.n	800af34 <__cvt+0xa0>

0800af52 <__exponent>:
 800af52:	4603      	mov	r3, r0
 800af54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af56:	2900      	cmp	r1, #0
 800af58:	f803 2b02 	strb.w	r2, [r3], #2
 800af5c:	bfb6      	itet	lt
 800af5e:	222d      	movlt	r2, #45	; 0x2d
 800af60:	222b      	movge	r2, #43	; 0x2b
 800af62:	4249      	neglt	r1, r1
 800af64:	2909      	cmp	r1, #9
 800af66:	7042      	strb	r2, [r0, #1]
 800af68:	dd2b      	ble.n	800afc2 <__exponent+0x70>
 800af6a:	f10d 0407 	add.w	r4, sp, #7
 800af6e:	46a4      	mov	ip, r4
 800af70:	270a      	movs	r7, #10
 800af72:	fb91 f6f7 	sdiv	r6, r1, r7
 800af76:	460a      	mov	r2, r1
 800af78:	46a6      	mov	lr, r4
 800af7a:	fb07 1516 	mls	r5, r7, r6, r1
 800af7e:	2a63      	cmp	r2, #99	; 0x63
 800af80:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800af84:	4631      	mov	r1, r6
 800af86:	f104 34ff 	add.w	r4, r4, #4294967295
 800af8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af8e:	dcf0      	bgt.n	800af72 <__exponent+0x20>
 800af90:	3130      	adds	r1, #48	; 0x30
 800af92:	f1ae 0502 	sub.w	r5, lr, #2
 800af96:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af9a:	4629      	mov	r1, r5
 800af9c:	1c44      	adds	r4, r0, #1
 800af9e:	4561      	cmp	r1, ip
 800afa0:	d30a      	bcc.n	800afb8 <__exponent+0x66>
 800afa2:	f10d 0209 	add.w	r2, sp, #9
 800afa6:	eba2 020e 	sub.w	r2, r2, lr
 800afaa:	4565      	cmp	r5, ip
 800afac:	bf88      	it	hi
 800afae:	2200      	movhi	r2, #0
 800afb0:	4413      	add	r3, r2
 800afb2:	1a18      	subs	r0, r3, r0
 800afb4:	b003      	add	sp, #12
 800afb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800afbc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800afc0:	e7ed      	b.n	800af9e <__exponent+0x4c>
 800afc2:	2330      	movs	r3, #48	; 0x30
 800afc4:	3130      	adds	r1, #48	; 0x30
 800afc6:	7083      	strb	r3, [r0, #2]
 800afc8:	70c1      	strb	r1, [r0, #3]
 800afca:	1d03      	adds	r3, r0, #4
 800afcc:	e7f1      	b.n	800afb2 <__exponent+0x60>
	...

0800afd0 <_printf_float>:
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd4:	b091      	sub	sp, #68	; 0x44
 800afd6:	460c      	mov	r4, r1
 800afd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800afdc:	4616      	mov	r6, r2
 800afde:	461f      	mov	r7, r3
 800afe0:	4605      	mov	r5, r0
 800afe2:	f001 fb49 	bl	800c678 <_localeconv_r>
 800afe6:	6803      	ldr	r3, [r0, #0]
 800afe8:	4618      	mov	r0, r3
 800afea:	9309      	str	r3, [sp, #36]	; 0x24
 800afec:	f7f5 f8b0 	bl	8000150 <strlen>
 800aff0:	2300      	movs	r3, #0
 800aff2:	930e      	str	r3, [sp, #56]	; 0x38
 800aff4:	f8d8 3000 	ldr.w	r3, [r8]
 800aff8:	900a      	str	r0, [sp, #40]	; 0x28
 800affa:	3307      	adds	r3, #7
 800affc:	f023 0307 	bic.w	r3, r3, #7
 800b000:	f103 0208 	add.w	r2, r3, #8
 800b004:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b008:	f8d4 b000 	ldr.w	fp, [r4]
 800b00c:	f8c8 2000 	str.w	r2, [r8]
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b018:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b01c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b020:	930b      	str	r3, [sp, #44]	; 0x2c
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	4640      	mov	r0, r8
 800b028:	4b9c      	ldr	r3, [pc, #624]	; (800b29c <_printf_float+0x2cc>)
 800b02a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b02c:	f7f5 fcee 	bl	8000a0c <__aeabi_dcmpun>
 800b030:	bb70      	cbnz	r0, 800b090 <_printf_float+0xc0>
 800b032:	f04f 32ff 	mov.w	r2, #4294967295
 800b036:	4640      	mov	r0, r8
 800b038:	4b98      	ldr	r3, [pc, #608]	; (800b29c <_printf_float+0x2cc>)
 800b03a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b03c:	f7f5 fcc8 	bl	80009d0 <__aeabi_dcmple>
 800b040:	bb30      	cbnz	r0, 800b090 <_printf_float+0xc0>
 800b042:	2200      	movs	r2, #0
 800b044:	2300      	movs	r3, #0
 800b046:	4640      	mov	r0, r8
 800b048:	4651      	mov	r1, sl
 800b04a:	f7f5 fcb7 	bl	80009bc <__aeabi_dcmplt>
 800b04e:	b110      	cbz	r0, 800b056 <_printf_float+0x86>
 800b050:	232d      	movs	r3, #45	; 0x2d
 800b052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b056:	4b92      	ldr	r3, [pc, #584]	; (800b2a0 <_printf_float+0x2d0>)
 800b058:	4892      	ldr	r0, [pc, #584]	; (800b2a4 <_printf_float+0x2d4>)
 800b05a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b05e:	bf94      	ite	ls
 800b060:	4698      	movls	r8, r3
 800b062:	4680      	movhi	r8, r0
 800b064:	2303      	movs	r3, #3
 800b066:	f04f 0a00 	mov.w	sl, #0
 800b06a:	6123      	str	r3, [r4, #16]
 800b06c:	f02b 0304 	bic.w	r3, fp, #4
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	4633      	mov	r3, r6
 800b074:	4621      	mov	r1, r4
 800b076:	4628      	mov	r0, r5
 800b078:	9700      	str	r7, [sp, #0]
 800b07a:	aa0f      	add	r2, sp, #60	; 0x3c
 800b07c:	f000 f9d4 	bl	800b428 <_printf_common>
 800b080:	3001      	adds	r0, #1
 800b082:	f040 8090 	bne.w	800b1a6 <_printf_float+0x1d6>
 800b086:	f04f 30ff 	mov.w	r0, #4294967295
 800b08a:	b011      	add	sp, #68	; 0x44
 800b08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b090:	4642      	mov	r2, r8
 800b092:	4653      	mov	r3, sl
 800b094:	4640      	mov	r0, r8
 800b096:	4651      	mov	r1, sl
 800b098:	f7f5 fcb8 	bl	8000a0c <__aeabi_dcmpun>
 800b09c:	b148      	cbz	r0, 800b0b2 <_printf_float+0xe2>
 800b09e:	f1ba 0f00 	cmp.w	sl, #0
 800b0a2:	bfb8      	it	lt
 800b0a4:	232d      	movlt	r3, #45	; 0x2d
 800b0a6:	4880      	ldr	r0, [pc, #512]	; (800b2a8 <_printf_float+0x2d8>)
 800b0a8:	bfb8      	it	lt
 800b0aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b0ae:	4b7f      	ldr	r3, [pc, #508]	; (800b2ac <_printf_float+0x2dc>)
 800b0b0:	e7d3      	b.n	800b05a <_printf_float+0x8a>
 800b0b2:	6863      	ldr	r3, [r4, #4]
 800b0b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	d142      	bne.n	800b142 <_printf_float+0x172>
 800b0bc:	2306      	movs	r3, #6
 800b0be:	6063      	str	r3, [r4, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	9206      	str	r2, [sp, #24]
 800b0c4:	aa0e      	add	r2, sp, #56	; 0x38
 800b0c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b0ca:	aa0d      	add	r2, sp, #52	; 0x34
 800b0cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b0d0:	9203      	str	r2, [sp, #12]
 800b0d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b0d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	6863      	ldr	r3, [r4, #4]
 800b0de:	4642      	mov	r2, r8
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	4653      	mov	r3, sl
 800b0e6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0e8:	f7ff fed4 	bl	800ae94 <__cvt>
 800b0ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	2947      	cmp	r1, #71	; 0x47
 800b0f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b0f4:	d108      	bne.n	800b108 <_printf_float+0x138>
 800b0f6:	1cc8      	adds	r0, r1, #3
 800b0f8:	db02      	blt.n	800b100 <_printf_float+0x130>
 800b0fa:	6863      	ldr	r3, [r4, #4]
 800b0fc:	4299      	cmp	r1, r3
 800b0fe:	dd40      	ble.n	800b182 <_printf_float+0x1b2>
 800b100:	f1a9 0902 	sub.w	r9, r9, #2
 800b104:	fa5f f989 	uxtb.w	r9, r9
 800b108:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b10c:	d81f      	bhi.n	800b14e <_printf_float+0x17e>
 800b10e:	464a      	mov	r2, r9
 800b110:	3901      	subs	r1, #1
 800b112:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b116:	910d      	str	r1, [sp, #52]	; 0x34
 800b118:	f7ff ff1b 	bl	800af52 <__exponent>
 800b11c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b11e:	4682      	mov	sl, r0
 800b120:	1813      	adds	r3, r2, r0
 800b122:	2a01      	cmp	r2, #1
 800b124:	6123      	str	r3, [r4, #16]
 800b126:	dc02      	bgt.n	800b12e <_printf_float+0x15e>
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	07d2      	lsls	r2, r2, #31
 800b12c:	d501      	bpl.n	800b132 <_printf_float+0x162>
 800b12e:	3301      	adds	r3, #1
 800b130:	6123      	str	r3, [r4, #16]
 800b132:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b136:	2b00      	cmp	r3, #0
 800b138:	d09b      	beq.n	800b072 <_printf_float+0xa2>
 800b13a:	232d      	movs	r3, #45	; 0x2d
 800b13c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b140:	e797      	b.n	800b072 <_printf_float+0xa2>
 800b142:	2947      	cmp	r1, #71	; 0x47
 800b144:	d1bc      	bne.n	800b0c0 <_printf_float+0xf0>
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1ba      	bne.n	800b0c0 <_printf_float+0xf0>
 800b14a:	2301      	movs	r3, #1
 800b14c:	e7b7      	b.n	800b0be <_printf_float+0xee>
 800b14e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b152:	d118      	bne.n	800b186 <_printf_float+0x1b6>
 800b154:	2900      	cmp	r1, #0
 800b156:	6863      	ldr	r3, [r4, #4]
 800b158:	dd0b      	ble.n	800b172 <_printf_float+0x1a2>
 800b15a:	6121      	str	r1, [r4, #16]
 800b15c:	b913      	cbnz	r3, 800b164 <_printf_float+0x194>
 800b15e:	6822      	ldr	r2, [r4, #0]
 800b160:	07d0      	lsls	r0, r2, #31
 800b162:	d502      	bpl.n	800b16a <_printf_float+0x19a>
 800b164:	3301      	adds	r3, #1
 800b166:	440b      	add	r3, r1
 800b168:	6123      	str	r3, [r4, #16]
 800b16a:	f04f 0a00 	mov.w	sl, #0
 800b16e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b170:	e7df      	b.n	800b132 <_printf_float+0x162>
 800b172:	b913      	cbnz	r3, 800b17a <_printf_float+0x1aa>
 800b174:	6822      	ldr	r2, [r4, #0]
 800b176:	07d2      	lsls	r2, r2, #31
 800b178:	d501      	bpl.n	800b17e <_printf_float+0x1ae>
 800b17a:	3302      	adds	r3, #2
 800b17c:	e7f4      	b.n	800b168 <_printf_float+0x198>
 800b17e:	2301      	movs	r3, #1
 800b180:	e7f2      	b.n	800b168 <_printf_float+0x198>
 800b182:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b188:	4299      	cmp	r1, r3
 800b18a:	db05      	blt.n	800b198 <_printf_float+0x1c8>
 800b18c:	6823      	ldr	r3, [r4, #0]
 800b18e:	6121      	str	r1, [r4, #16]
 800b190:	07d8      	lsls	r0, r3, #31
 800b192:	d5ea      	bpl.n	800b16a <_printf_float+0x19a>
 800b194:	1c4b      	adds	r3, r1, #1
 800b196:	e7e7      	b.n	800b168 <_printf_float+0x198>
 800b198:	2900      	cmp	r1, #0
 800b19a:	bfcc      	ite	gt
 800b19c:	2201      	movgt	r2, #1
 800b19e:	f1c1 0202 	rsble	r2, r1, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	e7e0      	b.n	800b168 <_printf_float+0x198>
 800b1a6:	6823      	ldr	r3, [r4, #0]
 800b1a8:	055a      	lsls	r2, r3, #21
 800b1aa:	d407      	bmi.n	800b1bc <_printf_float+0x1ec>
 800b1ac:	6923      	ldr	r3, [r4, #16]
 800b1ae:	4642      	mov	r2, r8
 800b1b0:	4631      	mov	r1, r6
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	47b8      	blx	r7
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d12b      	bne.n	800b212 <_printf_float+0x242>
 800b1ba:	e764      	b.n	800b086 <_printf_float+0xb6>
 800b1bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b1c0:	f240 80dd 	bls.w	800b37e <_printf_float+0x3ae>
 800b1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f7f5 fbec 	bl	80009a8 <__aeabi_dcmpeq>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d033      	beq.n	800b23c <_printf_float+0x26c>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	4a35      	ldr	r2, [pc, #212]	; (800b2b0 <_printf_float+0x2e0>)
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	f43f af51 	beq.w	800b086 <_printf_float+0xb6>
 800b1e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	db02      	blt.n	800b1f2 <_printf_float+0x222>
 800b1ec:	6823      	ldr	r3, [r4, #0]
 800b1ee:	07d8      	lsls	r0, r3, #31
 800b1f0:	d50f      	bpl.n	800b212 <_printf_float+0x242>
 800b1f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f af42 	beq.w	800b086 <_printf_float+0xb6>
 800b202:	f04f 0800 	mov.w	r8, #0
 800b206:	f104 091a 	add.w	r9, r4, #26
 800b20a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b20c:	3b01      	subs	r3, #1
 800b20e:	4543      	cmp	r3, r8
 800b210:	dc09      	bgt.n	800b226 <_printf_float+0x256>
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	079b      	lsls	r3, r3, #30
 800b216:	f100 8102 	bmi.w	800b41e <_printf_float+0x44e>
 800b21a:	68e0      	ldr	r0, [r4, #12]
 800b21c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b21e:	4298      	cmp	r0, r3
 800b220:	bfb8      	it	lt
 800b222:	4618      	movlt	r0, r3
 800b224:	e731      	b.n	800b08a <_printf_float+0xba>
 800b226:	2301      	movs	r3, #1
 800b228:	464a      	mov	r2, r9
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	f43f af28 	beq.w	800b086 <_printf_float+0xb6>
 800b236:	f108 0801 	add.w	r8, r8, #1
 800b23a:	e7e6      	b.n	800b20a <_printf_float+0x23a>
 800b23c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dc38      	bgt.n	800b2b4 <_printf_float+0x2e4>
 800b242:	2301      	movs	r3, #1
 800b244:	4631      	mov	r1, r6
 800b246:	4628      	mov	r0, r5
 800b248:	4a19      	ldr	r2, [pc, #100]	; (800b2b0 <_printf_float+0x2e0>)
 800b24a:	47b8      	blx	r7
 800b24c:	3001      	adds	r0, #1
 800b24e:	f43f af1a 	beq.w	800b086 <_printf_float+0xb6>
 800b252:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b256:	4313      	orrs	r3, r2
 800b258:	d102      	bne.n	800b260 <_printf_float+0x290>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	07d9      	lsls	r1, r3, #31
 800b25e:	d5d8      	bpl.n	800b212 <_printf_float+0x242>
 800b260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b264:	4631      	mov	r1, r6
 800b266:	4628      	mov	r0, r5
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	f43f af0b 	beq.w	800b086 <_printf_float+0xb6>
 800b270:	f04f 0900 	mov.w	r9, #0
 800b274:	f104 0a1a 	add.w	sl, r4, #26
 800b278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b27a:	425b      	negs	r3, r3
 800b27c:	454b      	cmp	r3, r9
 800b27e:	dc01      	bgt.n	800b284 <_printf_float+0x2b4>
 800b280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b282:	e794      	b.n	800b1ae <_printf_float+0x1de>
 800b284:	2301      	movs	r3, #1
 800b286:	4652      	mov	r2, sl
 800b288:	4631      	mov	r1, r6
 800b28a:	4628      	mov	r0, r5
 800b28c:	47b8      	blx	r7
 800b28e:	3001      	adds	r0, #1
 800b290:	f43f aef9 	beq.w	800b086 <_printf_float+0xb6>
 800b294:	f109 0901 	add.w	r9, r9, #1
 800b298:	e7ee      	b.n	800b278 <_printf_float+0x2a8>
 800b29a:	bf00      	nop
 800b29c:	7fefffff 	.word	0x7fefffff
 800b2a0:	0800e3c8 	.word	0x0800e3c8
 800b2a4:	0800e3cc 	.word	0x0800e3cc
 800b2a8:	0800e3d4 	.word	0x0800e3d4
 800b2ac:	0800e3d0 	.word	0x0800e3d0
 800b2b0:	0800e3d8 	.word	0x0800e3d8
 800b2b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	bfa8      	it	ge
 800b2bc:	461a      	movge	r2, r3
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	4691      	mov	r9, r2
 800b2c2:	dc37      	bgt.n	800b334 <_printf_float+0x364>
 800b2c4:	f04f 0b00 	mov.w	fp, #0
 800b2c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2cc:	f104 021a 	add.w	r2, r4, #26
 800b2d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b2d4:	ebaa 0309 	sub.w	r3, sl, r9
 800b2d8:	455b      	cmp	r3, fp
 800b2da:	dc33      	bgt.n	800b344 <_printf_float+0x374>
 800b2dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	db3b      	blt.n	800b35c <_printf_float+0x38c>
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	07da      	lsls	r2, r3, #31
 800b2e8:	d438      	bmi.n	800b35c <_printf_float+0x38c>
 800b2ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b2ee:	eba2 030a 	sub.w	r3, r2, sl
 800b2f2:	eba2 0901 	sub.w	r9, r2, r1
 800b2f6:	4599      	cmp	r9, r3
 800b2f8:	bfa8      	it	ge
 800b2fa:	4699      	movge	r9, r3
 800b2fc:	f1b9 0f00 	cmp.w	r9, #0
 800b300:	dc34      	bgt.n	800b36c <_printf_float+0x39c>
 800b302:	f04f 0800 	mov.w	r8, #0
 800b306:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b30a:	f104 0a1a 	add.w	sl, r4, #26
 800b30e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	eba3 0309 	sub.w	r3, r3, r9
 800b318:	4543      	cmp	r3, r8
 800b31a:	f77f af7a 	ble.w	800b212 <_printf_float+0x242>
 800b31e:	2301      	movs	r3, #1
 800b320:	4652      	mov	r2, sl
 800b322:	4631      	mov	r1, r6
 800b324:	4628      	mov	r0, r5
 800b326:	47b8      	blx	r7
 800b328:	3001      	adds	r0, #1
 800b32a:	f43f aeac 	beq.w	800b086 <_printf_float+0xb6>
 800b32e:	f108 0801 	add.w	r8, r8, #1
 800b332:	e7ec      	b.n	800b30e <_printf_float+0x33e>
 800b334:	4613      	mov	r3, r2
 800b336:	4631      	mov	r1, r6
 800b338:	4642      	mov	r2, r8
 800b33a:	4628      	mov	r0, r5
 800b33c:	47b8      	blx	r7
 800b33e:	3001      	adds	r0, #1
 800b340:	d1c0      	bne.n	800b2c4 <_printf_float+0x2f4>
 800b342:	e6a0      	b.n	800b086 <_printf_float+0xb6>
 800b344:	2301      	movs	r3, #1
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	920b      	str	r2, [sp, #44]	; 0x2c
 800b34c:	47b8      	blx	r7
 800b34e:	3001      	adds	r0, #1
 800b350:	f43f ae99 	beq.w	800b086 <_printf_float+0xb6>
 800b354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b356:	f10b 0b01 	add.w	fp, fp, #1
 800b35a:	e7b9      	b.n	800b2d0 <_printf_float+0x300>
 800b35c:	4631      	mov	r1, r6
 800b35e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	d1bf      	bne.n	800b2ea <_printf_float+0x31a>
 800b36a:	e68c      	b.n	800b086 <_printf_float+0xb6>
 800b36c:	464b      	mov	r3, r9
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	eb08 020a 	add.w	r2, r8, sl
 800b376:	47b8      	blx	r7
 800b378:	3001      	adds	r0, #1
 800b37a:	d1c2      	bne.n	800b302 <_printf_float+0x332>
 800b37c:	e683      	b.n	800b086 <_printf_float+0xb6>
 800b37e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b380:	2a01      	cmp	r2, #1
 800b382:	dc01      	bgt.n	800b388 <_printf_float+0x3b8>
 800b384:	07db      	lsls	r3, r3, #31
 800b386:	d537      	bpl.n	800b3f8 <_printf_float+0x428>
 800b388:	2301      	movs	r3, #1
 800b38a:	4642      	mov	r2, r8
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f ae77 	beq.w	800b086 <_printf_float+0xb6>
 800b398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b39c:	4631      	mov	r1, r6
 800b39e:	4628      	mov	r0, r5
 800b3a0:	47b8      	blx	r7
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f43f ae6f 	beq.w	800b086 <_printf_float+0xb6>
 800b3a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	f7f5 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 800b3b4:	b9d8      	cbnz	r0, 800b3ee <_printf_float+0x41e>
 800b3b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3b8:	f108 0201 	add.w	r2, r8, #1
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d10e      	bne.n	800b3e6 <_printf_float+0x416>
 800b3c8:	e65d      	b.n	800b086 <_printf_float+0xb6>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	464a      	mov	r2, r9
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f ae56 	beq.w	800b086 <_printf_float+0xb6>
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	4543      	cmp	r3, r8
 800b3e4:	dcf1      	bgt.n	800b3ca <_printf_float+0x3fa>
 800b3e6:	4653      	mov	r3, sl
 800b3e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3ec:	e6e0      	b.n	800b1b0 <_printf_float+0x1e0>
 800b3ee:	f04f 0800 	mov.w	r8, #0
 800b3f2:	f104 091a 	add.w	r9, r4, #26
 800b3f6:	e7f2      	b.n	800b3de <_printf_float+0x40e>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	4642      	mov	r2, r8
 800b3fc:	e7df      	b.n	800b3be <_printf_float+0x3ee>
 800b3fe:	2301      	movs	r3, #1
 800b400:	464a      	mov	r2, r9
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f ae3c 	beq.w	800b086 <_printf_float+0xb6>
 800b40e:	f108 0801 	add.w	r8, r8, #1
 800b412:	68e3      	ldr	r3, [r4, #12]
 800b414:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b416:	1a5b      	subs	r3, r3, r1
 800b418:	4543      	cmp	r3, r8
 800b41a:	dcf0      	bgt.n	800b3fe <_printf_float+0x42e>
 800b41c:	e6fd      	b.n	800b21a <_printf_float+0x24a>
 800b41e:	f04f 0800 	mov.w	r8, #0
 800b422:	f104 0919 	add.w	r9, r4, #25
 800b426:	e7f4      	b.n	800b412 <_printf_float+0x442>

0800b428 <_printf_common>:
 800b428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b42c:	4616      	mov	r6, r2
 800b42e:	4699      	mov	r9, r3
 800b430:	688a      	ldr	r2, [r1, #8]
 800b432:	690b      	ldr	r3, [r1, #16]
 800b434:	4607      	mov	r7, r0
 800b436:	4293      	cmp	r3, r2
 800b438:	bfb8      	it	lt
 800b43a:	4613      	movlt	r3, r2
 800b43c:	6033      	str	r3, [r6, #0]
 800b43e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b442:	460c      	mov	r4, r1
 800b444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b448:	b10a      	cbz	r2, 800b44e <_printf_common+0x26>
 800b44a:	3301      	adds	r3, #1
 800b44c:	6033      	str	r3, [r6, #0]
 800b44e:	6823      	ldr	r3, [r4, #0]
 800b450:	0699      	lsls	r1, r3, #26
 800b452:	bf42      	ittt	mi
 800b454:	6833      	ldrmi	r3, [r6, #0]
 800b456:	3302      	addmi	r3, #2
 800b458:	6033      	strmi	r3, [r6, #0]
 800b45a:	6825      	ldr	r5, [r4, #0]
 800b45c:	f015 0506 	ands.w	r5, r5, #6
 800b460:	d106      	bne.n	800b470 <_printf_common+0x48>
 800b462:	f104 0a19 	add.w	sl, r4, #25
 800b466:	68e3      	ldr	r3, [r4, #12]
 800b468:	6832      	ldr	r2, [r6, #0]
 800b46a:	1a9b      	subs	r3, r3, r2
 800b46c:	42ab      	cmp	r3, r5
 800b46e:	dc28      	bgt.n	800b4c2 <_printf_common+0x9a>
 800b470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b474:	1e13      	subs	r3, r2, #0
 800b476:	6822      	ldr	r2, [r4, #0]
 800b478:	bf18      	it	ne
 800b47a:	2301      	movne	r3, #1
 800b47c:	0692      	lsls	r2, r2, #26
 800b47e:	d42d      	bmi.n	800b4dc <_printf_common+0xb4>
 800b480:	4649      	mov	r1, r9
 800b482:	4638      	mov	r0, r7
 800b484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b488:	47c0      	blx	r8
 800b48a:	3001      	adds	r0, #1
 800b48c:	d020      	beq.n	800b4d0 <_printf_common+0xa8>
 800b48e:	6823      	ldr	r3, [r4, #0]
 800b490:	68e5      	ldr	r5, [r4, #12]
 800b492:	f003 0306 	and.w	r3, r3, #6
 800b496:	2b04      	cmp	r3, #4
 800b498:	bf18      	it	ne
 800b49a:	2500      	movne	r5, #0
 800b49c:	6832      	ldr	r2, [r6, #0]
 800b49e:	f04f 0600 	mov.w	r6, #0
 800b4a2:	68a3      	ldr	r3, [r4, #8]
 800b4a4:	bf08      	it	eq
 800b4a6:	1aad      	subeq	r5, r5, r2
 800b4a8:	6922      	ldr	r2, [r4, #16]
 800b4aa:	bf08      	it	eq
 800b4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	bfc4      	itt	gt
 800b4b4:	1a9b      	subgt	r3, r3, r2
 800b4b6:	18ed      	addgt	r5, r5, r3
 800b4b8:	341a      	adds	r4, #26
 800b4ba:	42b5      	cmp	r5, r6
 800b4bc:	d11a      	bne.n	800b4f4 <_printf_common+0xcc>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e008      	b.n	800b4d4 <_printf_common+0xac>
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	4649      	mov	r1, r9
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	47c0      	blx	r8
 800b4cc:	3001      	adds	r0, #1
 800b4ce:	d103      	bne.n	800b4d8 <_printf_common+0xb0>
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d8:	3501      	adds	r5, #1
 800b4da:	e7c4      	b.n	800b466 <_printf_common+0x3e>
 800b4dc:	2030      	movs	r0, #48	; 0x30
 800b4de:	18e1      	adds	r1, r4, r3
 800b4e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4ea:	4422      	add	r2, r4
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4f2:	e7c5      	b.n	800b480 <_printf_common+0x58>
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	47c0      	blx	r8
 800b4fe:	3001      	adds	r0, #1
 800b500:	d0e6      	beq.n	800b4d0 <_printf_common+0xa8>
 800b502:	3601      	adds	r6, #1
 800b504:	e7d9      	b.n	800b4ba <_printf_common+0x92>
	...

0800b508 <_printf_i>:
 800b508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b50c:	460c      	mov	r4, r1
 800b50e:	7e27      	ldrb	r7, [r4, #24]
 800b510:	4691      	mov	r9, r2
 800b512:	2f78      	cmp	r7, #120	; 0x78
 800b514:	4680      	mov	r8, r0
 800b516:	469a      	mov	sl, r3
 800b518:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b51a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b51e:	d807      	bhi.n	800b530 <_printf_i+0x28>
 800b520:	2f62      	cmp	r7, #98	; 0x62
 800b522:	d80a      	bhi.n	800b53a <_printf_i+0x32>
 800b524:	2f00      	cmp	r7, #0
 800b526:	f000 80d9 	beq.w	800b6dc <_printf_i+0x1d4>
 800b52a:	2f58      	cmp	r7, #88	; 0x58
 800b52c:	f000 80a4 	beq.w	800b678 <_printf_i+0x170>
 800b530:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b538:	e03a      	b.n	800b5b0 <_printf_i+0xa8>
 800b53a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b53e:	2b15      	cmp	r3, #21
 800b540:	d8f6      	bhi.n	800b530 <_printf_i+0x28>
 800b542:	a001      	add	r0, pc, #4	; (adr r0, 800b548 <_printf_i+0x40>)
 800b544:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b548:	0800b5a1 	.word	0x0800b5a1
 800b54c:	0800b5b5 	.word	0x0800b5b5
 800b550:	0800b531 	.word	0x0800b531
 800b554:	0800b531 	.word	0x0800b531
 800b558:	0800b531 	.word	0x0800b531
 800b55c:	0800b531 	.word	0x0800b531
 800b560:	0800b5b5 	.word	0x0800b5b5
 800b564:	0800b531 	.word	0x0800b531
 800b568:	0800b531 	.word	0x0800b531
 800b56c:	0800b531 	.word	0x0800b531
 800b570:	0800b531 	.word	0x0800b531
 800b574:	0800b6c3 	.word	0x0800b6c3
 800b578:	0800b5e5 	.word	0x0800b5e5
 800b57c:	0800b6a5 	.word	0x0800b6a5
 800b580:	0800b531 	.word	0x0800b531
 800b584:	0800b531 	.word	0x0800b531
 800b588:	0800b6e5 	.word	0x0800b6e5
 800b58c:	0800b531 	.word	0x0800b531
 800b590:	0800b5e5 	.word	0x0800b5e5
 800b594:	0800b531 	.word	0x0800b531
 800b598:	0800b531 	.word	0x0800b531
 800b59c:	0800b6ad 	.word	0x0800b6ad
 800b5a0:	680b      	ldr	r3, [r1, #0]
 800b5a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5a6:	1d1a      	adds	r2, r3, #4
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	600a      	str	r2, [r1, #0]
 800b5ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e0a4      	b.n	800b6fe <_printf_i+0x1f6>
 800b5b4:	6825      	ldr	r5, [r4, #0]
 800b5b6:	6808      	ldr	r0, [r1, #0]
 800b5b8:	062e      	lsls	r6, r5, #24
 800b5ba:	f100 0304 	add.w	r3, r0, #4
 800b5be:	d50a      	bpl.n	800b5d6 <_printf_i+0xce>
 800b5c0:	6805      	ldr	r5, [r0, #0]
 800b5c2:	600b      	str	r3, [r1, #0]
 800b5c4:	2d00      	cmp	r5, #0
 800b5c6:	da03      	bge.n	800b5d0 <_printf_i+0xc8>
 800b5c8:	232d      	movs	r3, #45	; 0x2d
 800b5ca:	426d      	negs	r5, r5
 800b5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5d0:	230a      	movs	r3, #10
 800b5d2:	485e      	ldr	r0, [pc, #376]	; (800b74c <_printf_i+0x244>)
 800b5d4:	e019      	b.n	800b60a <_printf_i+0x102>
 800b5d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b5da:	6805      	ldr	r5, [r0, #0]
 800b5dc:	600b      	str	r3, [r1, #0]
 800b5de:	bf18      	it	ne
 800b5e0:	b22d      	sxthne	r5, r5
 800b5e2:	e7ef      	b.n	800b5c4 <_printf_i+0xbc>
 800b5e4:	680b      	ldr	r3, [r1, #0]
 800b5e6:	6825      	ldr	r5, [r4, #0]
 800b5e8:	1d18      	adds	r0, r3, #4
 800b5ea:	6008      	str	r0, [r1, #0]
 800b5ec:	0628      	lsls	r0, r5, #24
 800b5ee:	d501      	bpl.n	800b5f4 <_printf_i+0xec>
 800b5f0:	681d      	ldr	r5, [r3, #0]
 800b5f2:	e002      	b.n	800b5fa <_printf_i+0xf2>
 800b5f4:	0669      	lsls	r1, r5, #25
 800b5f6:	d5fb      	bpl.n	800b5f0 <_printf_i+0xe8>
 800b5f8:	881d      	ldrh	r5, [r3, #0]
 800b5fa:	2f6f      	cmp	r7, #111	; 0x6f
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2308      	moveq	r3, #8
 800b600:	230a      	movne	r3, #10
 800b602:	4852      	ldr	r0, [pc, #328]	; (800b74c <_printf_i+0x244>)
 800b604:	2100      	movs	r1, #0
 800b606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b60a:	6866      	ldr	r6, [r4, #4]
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	bfa8      	it	ge
 800b610:	6821      	ldrge	r1, [r4, #0]
 800b612:	60a6      	str	r6, [r4, #8]
 800b614:	bfa4      	itt	ge
 800b616:	f021 0104 	bicge.w	r1, r1, #4
 800b61a:	6021      	strge	r1, [r4, #0]
 800b61c:	b90d      	cbnz	r5, 800b622 <_printf_i+0x11a>
 800b61e:	2e00      	cmp	r6, #0
 800b620:	d04d      	beq.n	800b6be <_printf_i+0x1b6>
 800b622:	4616      	mov	r6, r2
 800b624:	fbb5 f1f3 	udiv	r1, r5, r3
 800b628:	fb03 5711 	mls	r7, r3, r1, r5
 800b62c:	5dc7      	ldrb	r7, [r0, r7]
 800b62e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b632:	462f      	mov	r7, r5
 800b634:	42bb      	cmp	r3, r7
 800b636:	460d      	mov	r5, r1
 800b638:	d9f4      	bls.n	800b624 <_printf_i+0x11c>
 800b63a:	2b08      	cmp	r3, #8
 800b63c:	d10b      	bne.n	800b656 <_printf_i+0x14e>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	07df      	lsls	r7, r3, #31
 800b642:	d508      	bpl.n	800b656 <_printf_i+0x14e>
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	6861      	ldr	r1, [r4, #4]
 800b648:	4299      	cmp	r1, r3
 800b64a:	bfde      	ittt	le
 800b64c:	2330      	movle	r3, #48	; 0x30
 800b64e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b652:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b656:	1b92      	subs	r2, r2, r6
 800b658:	6122      	str	r2, [r4, #16]
 800b65a:	464b      	mov	r3, r9
 800b65c:	4621      	mov	r1, r4
 800b65e:	4640      	mov	r0, r8
 800b660:	f8cd a000 	str.w	sl, [sp]
 800b664:	aa03      	add	r2, sp, #12
 800b666:	f7ff fedf 	bl	800b428 <_printf_common>
 800b66a:	3001      	adds	r0, #1
 800b66c:	d14c      	bne.n	800b708 <_printf_i+0x200>
 800b66e:	f04f 30ff 	mov.w	r0, #4294967295
 800b672:	b004      	add	sp, #16
 800b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b678:	4834      	ldr	r0, [pc, #208]	; (800b74c <_printf_i+0x244>)
 800b67a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b67e:	680e      	ldr	r6, [r1, #0]
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	f856 5b04 	ldr.w	r5, [r6], #4
 800b686:	061f      	lsls	r7, r3, #24
 800b688:	600e      	str	r6, [r1, #0]
 800b68a:	d514      	bpl.n	800b6b6 <_printf_i+0x1ae>
 800b68c:	07d9      	lsls	r1, r3, #31
 800b68e:	bf44      	itt	mi
 800b690:	f043 0320 	orrmi.w	r3, r3, #32
 800b694:	6023      	strmi	r3, [r4, #0]
 800b696:	b91d      	cbnz	r5, 800b6a0 <_printf_i+0x198>
 800b698:	6823      	ldr	r3, [r4, #0]
 800b69a:	f023 0320 	bic.w	r3, r3, #32
 800b69e:	6023      	str	r3, [r4, #0]
 800b6a0:	2310      	movs	r3, #16
 800b6a2:	e7af      	b.n	800b604 <_printf_i+0xfc>
 800b6a4:	6823      	ldr	r3, [r4, #0]
 800b6a6:	f043 0320 	orr.w	r3, r3, #32
 800b6aa:	6023      	str	r3, [r4, #0]
 800b6ac:	2378      	movs	r3, #120	; 0x78
 800b6ae:	4828      	ldr	r0, [pc, #160]	; (800b750 <_printf_i+0x248>)
 800b6b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6b4:	e7e3      	b.n	800b67e <_printf_i+0x176>
 800b6b6:	065e      	lsls	r6, r3, #25
 800b6b8:	bf48      	it	mi
 800b6ba:	b2ad      	uxthmi	r5, r5
 800b6bc:	e7e6      	b.n	800b68c <_printf_i+0x184>
 800b6be:	4616      	mov	r6, r2
 800b6c0:	e7bb      	b.n	800b63a <_printf_i+0x132>
 800b6c2:	680b      	ldr	r3, [r1, #0]
 800b6c4:	6826      	ldr	r6, [r4, #0]
 800b6c6:	1d1d      	adds	r5, r3, #4
 800b6c8:	6960      	ldr	r0, [r4, #20]
 800b6ca:	600d      	str	r5, [r1, #0]
 800b6cc:	0635      	lsls	r5, r6, #24
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	d501      	bpl.n	800b6d6 <_printf_i+0x1ce>
 800b6d2:	6018      	str	r0, [r3, #0]
 800b6d4:	e002      	b.n	800b6dc <_printf_i+0x1d4>
 800b6d6:	0671      	lsls	r1, r6, #25
 800b6d8:	d5fb      	bpl.n	800b6d2 <_printf_i+0x1ca>
 800b6da:	8018      	strh	r0, [r3, #0]
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4616      	mov	r6, r2
 800b6e0:	6123      	str	r3, [r4, #16]
 800b6e2:	e7ba      	b.n	800b65a <_printf_i+0x152>
 800b6e4:	680b      	ldr	r3, [r1, #0]
 800b6e6:	1d1a      	adds	r2, r3, #4
 800b6e8:	600a      	str	r2, [r1, #0]
 800b6ea:	681e      	ldr	r6, [r3, #0]
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	f000 ffd1 	bl	800c698 <memchr>
 800b6f6:	b108      	cbz	r0, 800b6fc <_printf_i+0x1f4>
 800b6f8:	1b80      	subs	r0, r0, r6
 800b6fa:	6060      	str	r0, [r4, #4]
 800b6fc:	6863      	ldr	r3, [r4, #4]
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	2300      	movs	r3, #0
 800b702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b706:	e7a8      	b.n	800b65a <_printf_i+0x152>
 800b708:	4632      	mov	r2, r6
 800b70a:	4649      	mov	r1, r9
 800b70c:	4640      	mov	r0, r8
 800b70e:	6923      	ldr	r3, [r4, #16]
 800b710:	47d0      	blx	sl
 800b712:	3001      	adds	r0, #1
 800b714:	d0ab      	beq.n	800b66e <_printf_i+0x166>
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	079b      	lsls	r3, r3, #30
 800b71a:	d413      	bmi.n	800b744 <_printf_i+0x23c>
 800b71c:	68e0      	ldr	r0, [r4, #12]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	4298      	cmp	r0, r3
 800b722:	bfb8      	it	lt
 800b724:	4618      	movlt	r0, r3
 800b726:	e7a4      	b.n	800b672 <_printf_i+0x16a>
 800b728:	2301      	movs	r3, #1
 800b72a:	4632      	mov	r2, r6
 800b72c:	4649      	mov	r1, r9
 800b72e:	4640      	mov	r0, r8
 800b730:	47d0      	blx	sl
 800b732:	3001      	adds	r0, #1
 800b734:	d09b      	beq.n	800b66e <_printf_i+0x166>
 800b736:	3501      	adds	r5, #1
 800b738:	68e3      	ldr	r3, [r4, #12]
 800b73a:	9903      	ldr	r1, [sp, #12]
 800b73c:	1a5b      	subs	r3, r3, r1
 800b73e:	42ab      	cmp	r3, r5
 800b740:	dcf2      	bgt.n	800b728 <_printf_i+0x220>
 800b742:	e7eb      	b.n	800b71c <_printf_i+0x214>
 800b744:	2500      	movs	r5, #0
 800b746:	f104 0619 	add.w	r6, r4, #25
 800b74a:	e7f5      	b.n	800b738 <_printf_i+0x230>
 800b74c:	0800e3da 	.word	0x0800e3da
 800b750:	0800e3eb 	.word	0x0800e3eb

0800b754 <siprintf>:
 800b754:	b40e      	push	{r1, r2, r3}
 800b756:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b75a:	b500      	push	{lr}
 800b75c:	b09c      	sub	sp, #112	; 0x70
 800b75e:	ab1d      	add	r3, sp, #116	; 0x74
 800b760:	9002      	str	r0, [sp, #8]
 800b762:	9006      	str	r0, [sp, #24]
 800b764:	9107      	str	r1, [sp, #28]
 800b766:	9104      	str	r1, [sp, #16]
 800b768:	4808      	ldr	r0, [pc, #32]	; (800b78c <siprintf+0x38>)
 800b76a:	4909      	ldr	r1, [pc, #36]	; (800b790 <siprintf+0x3c>)
 800b76c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b770:	9105      	str	r1, [sp, #20]
 800b772:	6800      	ldr	r0, [r0, #0]
 800b774:	a902      	add	r1, sp, #8
 800b776:	9301      	str	r3, [sp, #4]
 800b778:	f001 fc2e 	bl	800cfd8 <_svfiprintf_r>
 800b77c:	2200      	movs	r2, #0
 800b77e:	9b02      	ldr	r3, [sp, #8]
 800b780:	701a      	strb	r2, [r3, #0]
 800b782:	b01c      	add	sp, #112	; 0x70
 800b784:	f85d eb04 	ldr.w	lr, [sp], #4
 800b788:	b003      	add	sp, #12
 800b78a:	4770      	bx	lr
 800b78c:	20000188 	.word	0x20000188
 800b790:	ffff0208 	.word	0xffff0208

0800b794 <quorem>:
 800b794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	6903      	ldr	r3, [r0, #16]
 800b79a:	690c      	ldr	r4, [r1, #16]
 800b79c:	4607      	mov	r7, r0
 800b79e:	42a3      	cmp	r3, r4
 800b7a0:	f2c0 8083 	blt.w	800b8aa <quorem+0x116>
 800b7a4:	3c01      	subs	r4, #1
 800b7a6:	f100 0514 	add.w	r5, r0, #20
 800b7aa:	f101 0814 	add.w	r8, r1, #20
 800b7ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7b2:	9301      	str	r3, [sp, #4]
 800b7b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7c4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7cc:	d332      	bcc.n	800b834 <quorem+0xa0>
 800b7ce:	f04f 0e00 	mov.w	lr, #0
 800b7d2:	4640      	mov	r0, r8
 800b7d4:	46ac      	mov	ip, r5
 800b7d6:	46f2      	mov	sl, lr
 800b7d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b7dc:	b293      	uxth	r3, r2
 800b7de:	fb06 e303 	mla	r3, r6, r3, lr
 800b7e2:	0c12      	lsrs	r2, r2, #16
 800b7e4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b7e8:	fb06 e202 	mla	r2, r6, r2, lr
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	ebaa 0303 	sub.w	r3, sl, r3
 800b7f2:	f8dc a000 	ldr.w	sl, [ip]
 800b7f6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7fa:	fa1f fa8a 	uxth.w	sl, sl
 800b7fe:	4453      	add	r3, sl
 800b800:	fa1f fa82 	uxth.w	sl, r2
 800b804:	f8dc 2000 	ldr.w	r2, [ip]
 800b808:	4581      	cmp	r9, r0
 800b80a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b80e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b812:	b29b      	uxth	r3, r3
 800b814:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b818:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b81c:	f84c 3b04 	str.w	r3, [ip], #4
 800b820:	d2da      	bcs.n	800b7d8 <quorem+0x44>
 800b822:	f855 300b 	ldr.w	r3, [r5, fp]
 800b826:	b92b      	cbnz	r3, 800b834 <quorem+0xa0>
 800b828:	9b01      	ldr	r3, [sp, #4]
 800b82a:	3b04      	subs	r3, #4
 800b82c:	429d      	cmp	r5, r3
 800b82e:	461a      	mov	r2, r3
 800b830:	d32f      	bcc.n	800b892 <quorem+0xfe>
 800b832:	613c      	str	r4, [r7, #16]
 800b834:	4638      	mov	r0, r7
 800b836:	f001 f9b7 	bl	800cba8 <__mcmp>
 800b83a:	2800      	cmp	r0, #0
 800b83c:	db25      	blt.n	800b88a <quorem+0xf6>
 800b83e:	4628      	mov	r0, r5
 800b840:	f04f 0c00 	mov.w	ip, #0
 800b844:	3601      	adds	r6, #1
 800b846:	f858 1b04 	ldr.w	r1, [r8], #4
 800b84a:	f8d0 e000 	ldr.w	lr, [r0]
 800b84e:	b28b      	uxth	r3, r1
 800b850:	ebac 0303 	sub.w	r3, ip, r3
 800b854:	fa1f f28e 	uxth.w	r2, lr
 800b858:	4413      	add	r3, r2
 800b85a:	0c0a      	lsrs	r2, r1, #16
 800b85c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b864:	b29b      	uxth	r3, r3
 800b866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b86a:	45c1      	cmp	r9, r8
 800b86c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b870:	f840 3b04 	str.w	r3, [r0], #4
 800b874:	d2e7      	bcs.n	800b846 <quorem+0xb2>
 800b876:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b87a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b87e:	b922      	cbnz	r2, 800b88a <quorem+0xf6>
 800b880:	3b04      	subs	r3, #4
 800b882:	429d      	cmp	r5, r3
 800b884:	461a      	mov	r2, r3
 800b886:	d30a      	bcc.n	800b89e <quorem+0x10a>
 800b888:	613c      	str	r4, [r7, #16]
 800b88a:	4630      	mov	r0, r6
 800b88c:	b003      	add	sp, #12
 800b88e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b892:	6812      	ldr	r2, [r2, #0]
 800b894:	3b04      	subs	r3, #4
 800b896:	2a00      	cmp	r2, #0
 800b898:	d1cb      	bne.n	800b832 <quorem+0x9e>
 800b89a:	3c01      	subs	r4, #1
 800b89c:	e7c6      	b.n	800b82c <quorem+0x98>
 800b89e:	6812      	ldr	r2, [r2, #0]
 800b8a0:	3b04      	subs	r3, #4
 800b8a2:	2a00      	cmp	r2, #0
 800b8a4:	d1f0      	bne.n	800b888 <quorem+0xf4>
 800b8a6:	3c01      	subs	r4, #1
 800b8a8:	e7eb      	b.n	800b882 <quorem+0xee>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e7ee      	b.n	800b88c <quorem+0xf8>
	...

0800b8b0 <_dtoa_r>:
 800b8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	461f      	mov	r7, r3
 800b8b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8ba:	b099      	sub	sp, #100	; 0x64
 800b8bc:	4605      	mov	r5, r0
 800b8be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b8c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b8c6:	b974      	cbnz	r4, 800b8e6 <_dtoa_r+0x36>
 800b8c8:	2010      	movs	r0, #16
 800b8ca:	f000 fedd 	bl	800c688 <malloc>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	6268      	str	r0, [r5, #36]	; 0x24
 800b8d2:	b920      	cbnz	r0, 800b8de <_dtoa_r+0x2e>
 800b8d4:	21ea      	movs	r1, #234	; 0xea
 800b8d6:	4bae      	ldr	r3, [pc, #696]	; (800bb90 <_dtoa_r+0x2e0>)
 800b8d8:	48ae      	ldr	r0, [pc, #696]	; (800bb94 <_dtoa_r+0x2e4>)
 800b8da:	f001 fda3 	bl	800d424 <__assert_func>
 800b8de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8e2:	6004      	str	r4, [r0, #0]
 800b8e4:	60c4      	str	r4, [r0, #12]
 800b8e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8e8:	6819      	ldr	r1, [r3, #0]
 800b8ea:	b151      	cbz	r1, 800b902 <_dtoa_r+0x52>
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4093      	lsls	r3, r2
 800b8f2:	604a      	str	r2, [r1, #4]
 800b8f4:	608b      	str	r3, [r1, #8]
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f000 ff1c 	bl	800c734 <_Bfree>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	1e3b      	subs	r3, r7, #0
 800b904:	bfaf      	iteee	ge
 800b906:	2300      	movge	r3, #0
 800b908:	2201      	movlt	r2, #1
 800b90a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b90e:	9305      	strlt	r3, [sp, #20]
 800b910:	bfa8      	it	ge
 800b912:	f8c8 3000 	strge.w	r3, [r8]
 800b916:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b91a:	4b9f      	ldr	r3, [pc, #636]	; (800bb98 <_dtoa_r+0x2e8>)
 800b91c:	bfb8      	it	lt
 800b91e:	f8c8 2000 	strlt.w	r2, [r8]
 800b922:	ea33 0309 	bics.w	r3, r3, r9
 800b926:	d119      	bne.n	800b95c <_dtoa_r+0xac>
 800b928:	f242 730f 	movw	r3, #9999	; 0x270f
 800b92c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b934:	4333      	orrs	r3, r6
 800b936:	f000 8580 	beq.w	800c43a <_dtoa_r+0xb8a>
 800b93a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b93c:	b953      	cbnz	r3, 800b954 <_dtoa_r+0xa4>
 800b93e:	4b97      	ldr	r3, [pc, #604]	; (800bb9c <_dtoa_r+0x2ec>)
 800b940:	e022      	b.n	800b988 <_dtoa_r+0xd8>
 800b942:	4b97      	ldr	r3, [pc, #604]	; (800bba0 <_dtoa_r+0x2f0>)
 800b944:	9308      	str	r3, [sp, #32]
 800b946:	3308      	adds	r3, #8
 800b948:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	9808      	ldr	r0, [sp, #32]
 800b94e:	b019      	add	sp, #100	; 0x64
 800b950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b954:	4b91      	ldr	r3, [pc, #580]	; (800bb9c <_dtoa_r+0x2ec>)
 800b956:	9308      	str	r3, [sp, #32]
 800b958:	3303      	adds	r3, #3
 800b95a:	e7f5      	b.n	800b948 <_dtoa_r+0x98>
 800b95c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b960:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b968:	2200      	movs	r2, #0
 800b96a:	2300      	movs	r3, #0
 800b96c:	f7f5 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 800b970:	4680      	mov	r8, r0
 800b972:	b158      	cbz	r0, 800b98c <_dtoa_r+0xdc>
 800b974:	2301      	movs	r3, #1
 800b976:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 8559 	beq.w	800c434 <_dtoa_r+0xb84>
 800b982:	4888      	ldr	r0, [pc, #544]	; (800bba4 <_dtoa_r+0x2f4>)
 800b984:	6018      	str	r0, [r3, #0]
 800b986:	1e43      	subs	r3, r0, #1
 800b988:	9308      	str	r3, [sp, #32]
 800b98a:	e7df      	b.n	800b94c <_dtoa_r+0x9c>
 800b98c:	ab16      	add	r3, sp, #88	; 0x58
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	ab17      	add	r3, sp, #92	; 0x5c
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	4628      	mov	r0, r5
 800b996:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b99a:	f001 f9b1 	bl	800cd00 <__d2b>
 800b99e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b9a2:	4682      	mov	sl, r0
 800b9a4:	2c00      	cmp	r4, #0
 800b9a6:	d07e      	beq.n	800baa6 <_dtoa_r+0x1f6>
 800b9a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b9ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b9be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	4b78      	ldr	r3, [pc, #480]	; (800bba8 <_dtoa_r+0x2f8>)
 800b9c6:	f7f4 fbcf 	bl	8000168 <__aeabi_dsub>
 800b9ca:	a36b      	add	r3, pc, #428	; (adr r3, 800bb78 <_dtoa_r+0x2c8>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	f7f4 fd82 	bl	80004d8 <__aeabi_dmul>
 800b9d4:	a36a      	add	r3, pc, #424	; (adr r3, 800bb80 <_dtoa_r+0x2d0>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fbc7 	bl	800016c <__adddf3>
 800b9de:	4606      	mov	r6, r0
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	460f      	mov	r7, r1
 800b9e4:	f7f4 fd0e 	bl	8000404 <__aeabi_i2d>
 800b9e8:	a367      	add	r3, pc, #412	; (adr r3, 800bb88 <_dtoa_r+0x2d8>)
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	f7f4 fd73 	bl	80004d8 <__aeabi_dmul>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f4 fbb7 	bl	800016c <__adddf3>
 800b9fe:	4606      	mov	r6, r0
 800ba00:	460f      	mov	r7, r1
 800ba02:	f7f5 f819 	bl	8000a38 <__aeabi_d2iz>
 800ba06:	2200      	movs	r2, #0
 800ba08:	4681      	mov	r9, r0
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	4639      	mov	r1, r7
 800ba10:	f7f4 ffd4 	bl	80009bc <__aeabi_dcmplt>
 800ba14:	b148      	cbz	r0, 800ba2a <_dtoa_r+0x17a>
 800ba16:	4648      	mov	r0, r9
 800ba18:	f7f4 fcf4 	bl	8000404 <__aeabi_i2d>
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	463b      	mov	r3, r7
 800ba20:	f7f4 ffc2 	bl	80009a8 <__aeabi_dcmpeq>
 800ba24:	b908      	cbnz	r0, 800ba2a <_dtoa_r+0x17a>
 800ba26:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba2a:	f1b9 0f16 	cmp.w	r9, #22
 800ba2e:	d857      	bhi.n	800bae0 <_dtoa_r+0x230>
 800ba30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba34:	4b5d      	ldr	r3, [pc, #372]	; (800bbac <_dtoa_r+0x2fc>)
 800ba36:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7f4 ffbd 	bl	80009bc <__aeabi_dcmplt>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d04e      	beq.n	800bae4 <_dtoa_r+0x234>
 800ba46:	2300      	movs	r3, #0
 800ba48:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ba50:	1b1c      	subs	r4, r3, r4
 800ba52:	1e63      	subs	r3, r4, #1
 800ba54:	9309      	str	r3, [sp, #36]	; 0x24
 800ba56:	bf49      	itett	mi
 800ba58:	f1c4 0301 	rsbmi	r3, r4, #1
 800ba5c:	2300      	movpl	r3, #0
 800ba5e:	9306      	strmi	r3, [sp, #24]
 800ba60:	2300      	movmi	r3, #0
 800ba62:	bf54      	ite	pl
 800ba64:	9306      	strpl	r3, [sp, #24]
 800ba66:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ba68:	f1b9 0f00 	cmp.w	r9, #0
 800ba6c:	db3c      	blt.n	800bae8 <_dtoa_r+0x238>
 800ba6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba70:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ba74:	444b      	add	r3, r9
 800ba76:	9309      	str	r3, [sp, #36]	; 0x24
 800ba78:	2300      	movs	r3, #0
 800ba7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba7e:	2b09      	cmp	r3, #9
 800ba80:	d86c      	bhi.n	800bb5c <_dtoa_r+0x2ac>
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	bfc4      	itt	gt
 800ba86:	3b04      	subgt	r3, #4
 800ba88:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ba8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba8c:	bfc8      	it	gt
 800ba8e:	2400      	movgt	r4, #0
 800ba90:	f1a3 0302 	sub.w	r3, r3, #2
 800ba94:	bfd8      	it	le
 800ba96:	2401      	movle	r4, #1
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	f200 808b 	bhi.w	800bbb4 <_dtoa_r+0x304>
 800ba9e:	e8df f003 	tbb	[pc, r3]
 800baa2:	4f2d      	.short	0x4f2d
 800baa4:	5b4d      	.short	0x5b4d
 800baa6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800baaa:	441c      	add	r4, r3
 800baac:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	bfc3      	ittte	gt
 800bab4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bab8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800babc:	fa09 f303 	lslgt.w	r3, r9, r3
 800bac0:	f1c3 0320 	rsble	r3, r3, #32
 800bac4:	bfc6      	itte	gt
 800bac6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800baca:	4318      	orrgt	r0, r3
 800bacc:	fa06 f003 	lslle.w	r0, r6, r3
 800bad0:	f7f4 fc88 	bl	80003e4 <__aeabi_ui2d>
 800bad4:	2301      	movs	r3, #1
 800bad6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bada:	3c01      	subs	r4, #1
 800badc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bade:	e770      	b.n	800b9c2 <_dtoa_r+0x112>
 800bae0:	2301      	movs	r3, #1
 800bae2:	e7b3      	b.n	800ba4c <_dtoa_r+0x19c>
 800bae4:	900f      	str	r0, [sp, #60]	; 0x3c
 800bae6:	e7b2      	b.n	800ba4e <_dtoa_r+0x19e>
 800bae8:	9b06      	ldr	r3, [sp, #24]
 800baea:	eba3 0309 	sub.w	r3, r3, r9
 800baee:	9306      	str	r3, [sp, #24]
 800baf0:	f1c9 0300 	rsb	r3, r9, #0
 800baf4:	930a      	str	r3, [sp, #40]	; 0x28
 800baf6:	2300      	movs	r3, #0
 800baf8:	930e      	str	r3, [sp, #56]	; 0x38
 800bafa:	e7bf      	b.n	800ba7c <_dtoa_r+0x1cc>
 800bafc:	2300      	movs	r3, #0
 800bafe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	dc59      	bgt.n	800bbba <_dtoa_r+0x30a>
 800bb06:	f04f 0b01 	mov.w	fp, #1
 800bb0a:	465b      	mov	r3, fp
 800bb0c:	f8cd b008 	str.w	fp, [sp, #8]
 800bb10:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800bb14:	2200      	movs	r2, #0
 800bb16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bb18:	6042      	str	r2, [r0, #4]
 800bb1a:	2204      	movs	r2, #4
 800bb1c:	f102 0614 	add.w	r6, r2, #20
 800bb20:	429e      	cmp	r6, r3
 800bb22:	6841      	ldr	r1, [r0, #4]
 800bb24:	d94f      	bls.n	800bbc6 <_dtoa_r+0x316>
 800bb26:	4628      	mov	r0, r5
 800bb28:	f000 fdc4 	bl	800c6b4 <_Balloc>
 800bb2c:	9008      	str	r0, [sp, #32]
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d14d      	bne.n	800bbce <_dtoa_r+0x31e>
 800bb32:	4602      	mov	r2, r0
 800bb34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb38:	4b1d      	ldr	r3, [pc, #116]	; (800bbb0 <_dtoa_r+0x300>)
 800bb3a:	e6cd      	b.n	800b8d8 <_dtoa_r+0x28>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e7de      	b.n	800bafe <_dtoa_r+0x24e>
 800bb40:	2300      	movs	r3, #0
 800bb42:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb46:	eb09 0b03 	add.w	fp, r9, r3
 800bb4a:	f10b 0301 	add.w	r3, fp, #1
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	9302      	str	r3, [sp, #8]
 800bb52:	bfb8      	it	lt
 800bb54:	2301      	movlt	r3, #1
 800bb56:	e7dd      	b.n	800bb14 <_dtoa_r+0x264>
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e7f2      	b.n	800bb42 <_dtoa_r+0x292>
 800bb5c:	2401      	movs	r4, #1
 800bb5e:	2300      	movs	r3, #0
 800bb60:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb62:	9322      	str	r3, [sp, #136]	; 0x88
 800bb64:	f04f 3bff 	mov.w	fp, #4294967295
 800bb68:	2200      	movs	r2, #0
 800bb6a:	2312      	movs	r3, #18
 800bb6c:	f8cd b008 	str.w	fp, [sp, #8]
 800bb70:	9223      	str	r2, [sp, #140]	; 0x8c
 800bb72:	e7cf      	b.n	800bb14 <_dtoa_r+0x264>
 800bb74:	f3af 8000 	nop.w
 800bb78:	636f4361 	.word	0x636f4361
 800bb7c:	3fd287a7 	.word	0x3fd287a7
 800bb80:	8b60c8b3 	.word	0x8b60c8b3
 800bb84:	3fc68a28 	.word	0x3fc68a28
 800bb88:	509f79fb 	.word	0x509f79fb
 800bb8c:	3fd34413 	.word	0x3fd34413
 800bb90:	0800e409 	.word	0x0800e409
 800bb94:	0800e420 	.word	0x0800e420
 800bb98:	7ff00000 	.word	0x7ff00000
 800bb9c:	0800e405 	.word	0x0800e405
 800bba0:	0800e3fc 	.word	0x0800e3fc
 800bba4:	0800e3d9 	.word	0x0800e3d9
 800bba8:	3ff80000 	.word	0x3ff80000
 800bbac:	0800e578 	.word	0x0800e578
 800bbb0:	0800e47f 	.word	0x0800e47f
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bbb8:	e7d4      	b.n	800bb64 <_dtoa_r+0x2b4>
 800bbba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	f8cd b008 	str.w	fp, [sp, #8]
 800bbc4:	e7a6      	b.n	800bb14 <_dtoa_r+0x264>
 800bbc6:	3101      	adds	r1, #1
 800bbc8:	6041      	str	r1, [r0, #4]
 800bbca:	0052      	lsls	r2, r2, #1
 800bbcc:	e7a6      	b.n	800bb1c <_dtoa_r+0x26c>
 800bbce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbd0:	9a08      	ldr	r2, [sp, #32]
 800bbd2:	601a      	str	r2, [r3, #0]
 800bbd4:	9b02      	ldr	r3, [sp, #8]
 800bbd6:	2b0e      	cmp	r3, #14
 800bbd8:	f200 80a8 	bhi.w	800bd2c <_dtoa_r+0x47c>
 800bbdc:	2c00      	cmp	r4, #0
 800bbde:	f000 80a5 	beq.w	800bd2c <_dtoa_r+0x47c>
 800bbe2:	f1b9 0f00 	cmp.w	r9, #0
 800bbe6:	dd34      	ble.n	800bc52 <_dtoa_r+0x3a2>
 800bbe8:	4a9a      	ldr	r2, [pc, #616]	; (800be54 <_dtoa_r+0x5a4>)
 800bbea:	f009 030f 	and.w	r3, r9, #15
 800bbee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbf2:	f419 7f80 	tst.w	r9, #256	; 0x100
 800bbf6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bbfa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bbfe:	ea4f 1429 	mov.w	r4, r9, asr #4
 800bc02:	d016      	beq.n	800bc32 <_dtoa_r+0x382>
 800bc04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc08:	4b93      	ldr	r3, [pc, #588]	; (800be58 <_dtoa_r+0x5a8>)
 800bc0a:	2703      	movs	r7, #3
 800bc0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc10:	f7f4 fd8c 	bl	800072c <__aeabi_ddiv>
 800bc14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc18:	f004 040f 	and.w	r4, r4, #15
 800bc1c:	4e8e      	ldr	r6, [pc, #568]	; (800be58 <_dtoa_r+0x5a8>)
 800bc1e:	b954      	cbnz	r4, 800bc36 <_dtoa_r+0x386>
 800bc20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bc24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc28:	f7f4 fd80 	bl	800072c <__aeabi_ddiv>
 800bc2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc30:	e029      	b.n	800bc86 <_dtoa_r+0x3d6>
 800bc32:	2702      	movs	r7, #2
 800bc34:	e7f2      	b.n	800bc1c <_dtoa_r+0x36c>
 800bc36:	07e1      	lsls	r1, r4, #31
 800bc38:	d508      	bpl.n	800bc4c <_dtoa_r+0x39c>
 800bc3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc3e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc42:	f7f4 fc49 	bl	80004d8 <__aeabi_dmul>
 800bc46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bc4a:	3701      	adds	r7, #1
 800bc4c:	1064      	asrs	r4, r4, #1
 800bc4e:	3608      	adds	r6, #8
 800bc50:	e7e5      	b.n	800bc1e <_dtoa_r+0x36e>
 800bc52:	f000 80a5 	beq.w	800bda0 <_dtoa_r+0x4f0>
 800bc56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc5a:	f1c9 0400 	rsb	r4, r9, #0
 800bc5e:	4b7d      	ldr	r3, [pc, #500]	; (800be54 <_dtoa_r+0x5a4>)
 800bc60:	f004 020f 	and.w	r2, r4, #15
 800bc64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	f7f4 fc34 	bl	80004d8 <__aeabi_dmul>
 800bc70:	2702      	movs	r7, #2
 800bc72:	2300      	movs	r3, #0
 800bc74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc78:	4e77      	ldr	r6, [pc, #476]	; (800be58 <_dtoa_r+0x5a8>)
 800bc7a:	1124      	asrs	r4, r4, #4
 800bc7c:	2c00      	cmp	r4, #0
 800bc7e:	f040 8084 	bne.w	800bd8a <_dtoa_r+0x4da>
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1d2      	bne.n	800bc2c <_dtoa_r+0x37c>
 800bc86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 808b 	beq.w	800bda4 <_dtoa_r+0x4f4>
 800bc8e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bc96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4b6f      	ldr	r3, [pc, #444]	; (800be5c <_dtoa_r+0x5ac>)
 800bc9e:	f7f4 fe8d 	bl	80009bc <__aeabi_dcmplt>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d07e      	beq.n	800bda4 <_dtoa_r+0x4f4>
 800bca6:	9b02      	ldr	r3, [sp, #8]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d07b      	beq.n	800bda4 <_dtoa_r+0x4f4>
 800bcac:	f1bb 0f00 	cmp.w	fp, #0
 800bcb0:	dd38      	ble.n	800bd24 <_dtoa_r+0x474>
 800bcb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	4b69      	ldr	r3, [pc, #420]	; (800be60 <_dtoa_r+0x5b0>)
 800bcba:	f7f4 fc0d 	bl	80004d8 <__aeabi_dmul>
 800bcbe:	465c      	mov	r4, fp
 800bcc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bcc4:	f109 38ff 	add.w	r8, r9, #4294967295
 800bcc8:	3701      	adds	r7, #1
 800bcca:	4638      	mov	r0, r7
 800bccc:	f7f4 fb9a 	bl	8000404 <__aeabi_i2d>
 800bcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcd4:	f7f4 fc00 	bl	80004d8 <__aeabi_dmul>
 800bcd8:	2200      	movs	r2, #0
 800bcda:	4b62      	ldr	r3, [pc, #392]	; (800be64 <_dtoa_r+0x5b4>)
 800bcdc:	f7f4 fa46 	bl	800016c <__adddf3>
 800bce0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bce4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bce8:	9611      	str	r6, [sp, #68]	; 0x44
 800bcea:	2c00      	cmp	r4, #0
 800bcec:	d15d      	bne.n	800bdaa <_dtoa_r+0x4fa>
 800bcee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4b5c      	ldr	r3, [pc, #368]	; (800be68 <_dtoa_r+0x5b8>)
 800bcf6:	f7f4 fa37 	bl	8000168 <__aeabi_dsub>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd02:	4633      	mov	r3, r6
 800bd04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd06:	f7f4 fe77 	bl	80009f8 <__aeabi_dcmpgt>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	f040 829e 	bne.w	800c24c <_dtoa_r+0x99c>
 800bd10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bd16:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bd1a:	f7f4 fe4f 	bl	80009bc <__aeabi_dcmplt>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f040 8292 	bne.w	800c248 <_dtoa_r+0x998>
 800bd24:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bd28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bd2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f2c0 8153 	blt.w	800bfda <_dtoa_r+0x72a>
 800bd34:	f1b9 0f0e 	cmp.w	r9, #14
 800bd38:	f300 814f 	bgt.w	800bfda <_dtoa_r+0x72a>
 800bd3c:	4b45      	ldr	r3, [pc, #276]	; (800be54 <_dtoa_r+0x5a4>)
 800bd3e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bd42:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd46:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bd4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f280 80db 	bge.w	800bf08 <_dtoa_r+0x658>
 800bd52:	9b02      	ldr	r3, [sp, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f300 80d7 	bgt.w	800bf08 <_dtoa_r+0x658>
 800bd5a:	f040 8274 	bne.w	800c246 <_dtoa_r+0x996>
 800bd5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd62:	2200      	movs	r2, #0
 800bd64:	4b40      	ldr	r3, [pc, #256]	; (800be68 <_dtoa_r+0x5b8>)
 800bd66:	f7f4 fbb7 	bl	80004d8 <__aeabi_dmul>
 800bd6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd6e:	f7f4 fe39 	bl	80009e4 <__aeabi_dcmpge>
 800bd72:	9c02      	ldr	r4, [sp, #8]
 800bd74:	4626      	mov	r6, r4
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f040 824a 	bne.w	800c210 <_dtoa_r+0x960>
 800bd7c:	2331      	movs	r3, #49	; 0x31
 800bd7e:	9f08      	ldr	r7, [sp, #32]
 800bd80:	f109 0901 	add.w	r9, r9, #1
 800bd84:	f807 3b01 	strb.w	r3, [r7], #1
 800bd88:	e246      	b.n	800c218 <_dtoa_r+0x968>
 800bd8a:	07e2      	lsls	r2, r4, #31
 800bd8c:	d505      	bpl.n	800bd9a <_dtoa_r+0x4ea>
 800bd8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd92:	f7f4 fba1 	bl	80004d8 <__aeabi_dmul>
 800bd96:	2301      	movs	r3, #1
 800bd98:	3701      	adds	r7, #1
 800bd9a:	1064      	asrs	r4, r4, #1
 800bd9c:	3608      	adds	r6, #8
 800bd9e:	e76d      	b.n	800bc7c <_dtoa_r+0x3cc>
 800bda0:	2702      	movs	r7, #2
 800bda2:	e770      	b.n	800bc86 <_dtoa_r+0x3d6>
 800bda4:	46c8      	mov	r8, r9
 800bda6:	9c02      	ldr	r4, [sp, #8]
 800bda8:	e78f      	b.n	800bcca <_dtoa_r+0x41a>
 800bdaa:	9908      	ldr	r1, [sp, #32]
 800bdac:	4b29      	ldr	r3, [pc, #164]	; (800be54 <_dtoa_r+0x5a4>)
 800bdae:	4421      	add	r1, r4
 800bdb0:	9112      	str	r1, [sp, #72]	; 0x48
 800bdb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdb8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bdbc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdc0:	2900      	cmp	r1, #0
 800bdc2:	d055      	beq.n	800be70 <_dtoa_r+0x5c0>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	4929      	ldr	r1, [pc, #164]	; (800be6c <_dtoa_r+0x5bc>)
 800bdc8:	f7f4 fcb0 	bl	800072c <__aeabi_ddiv>
 800bdcc:	463b      	mov	r3, r7
 800bdce:	4632      	mov	r2, r6
 800bdd0:	f7f4 f9ca 	bl	8000168 <__aeabi_dsub>
 800bdd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdd8:	9f08      	ldr	r7, [sp, #32]
 800bdda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdde:	f7f4 fe2b 	bl	8000a38 <__aeabi_d2iz>
 800bde2:	4604      	mov	r4, r0
 800bde4:	f7f4 fb0e 	bl	8000404 <__aeabi_i2d>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdf0:	f7f4 f9ba 	bl	8000168 <__aeabi_dsub>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	3430      	adds	r4, #48	; 0x30
 800bdfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be02:	f807 4b01 	strb.w	r4, [r7], #1
 800be06:	f7f4 fdd9 	bl	80009bc <__aeabi_dcmplt>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	d174      	bne.n	800bef8 <_dtoa_r+0x648>
 800be0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be12:	2000      	movs	r0, #0
 800be14:	4911      	ldr	r1, [pc, #68]	; (800be5c <_dtoa_r+0x5ac>)
 800be16:	f7f4 f9a7 	bl	8000168 <__aeabi_dsub>
 800be1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be1e:	f7f4 fdcd 	bl	80009bc <__aeabi_dcmplt>
 800be22:	2800      	cmp	r0, #0
 800be24:	f040 80b6 	bne.w	800bf94 <_dtoa_r+0x6e4>
 800be28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be2a:	429f      	cmp	r7, r3
 800be2c:	f43f af7a 	beq.w	800bd24 <_dtoa_r+0x474>
 800be30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800be34:	2200      	movs	r2, #0
 800be36:	4b0a      	ldr	r3, [pc, #40]	; (800be60 <_dtoa_r+0x5b0>)
 800be38:	f7f4 fb4e 	bl	80004d8 <__aeabi_dmul>
 800be3c:	2200      	movs	r2, #0
 800be3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be46:	4b06      	ldr	r3, [pc, #24]	; (800be60 <_dtoa_r+0x5b0>)
 800be48:	f7f4 fb46 	bl	80004d8 <__aeabi_dmul>
 800be4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be50:	e7c3      	b.n	800bdda <_dtoa_r+0x52a>
 800be52:	bf00      	nop
 800be54:	0800e578 	.word	0x0800e578
 800be58:	0800e550 	.word	0x0800e550
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	40240000 	.word	0x40240000
 800be64:	401c0000 	.word	0x401c0000
 800be68:	40140000 	.word	0x40140000
 800be6c:	3fe00000 	.word	0x3fe00000
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 fb30 	bl	80004d8 <__aeabi_dmul>
 800be78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800be7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800be7e:	9c08      	ldr	r4, [sp, #32]
 800be80:	9314      	str	r3, [sp, #80]	; 0x50
 800be82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be86:	f7f4 fdd7 	bl	8000a38 <__aeabi_d2iz>
 800be8a:	9015      	str	r0, [sp, #84]	; 0x54
 800be8c:	f7f4 faba 	bl	8000404 <__aeabi_i2d>
 800be90:	4602      	mov	r2, r0
 800be92:	460b      	mov	r3, r1
 800be94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be98:	f7f4 f966 	bl	8000168 <__aeabi_dsub>
 800be9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be9e:	4606      	mov	r6, r0
 800bea0:	3330      	adds	r3, #48	; 0x30
 800bea2:	f804 3b01 	strb.w	r3, [r4], #1
 800bea6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bea8:	460f      	mov	r7, r1
 800beaa:	429c      	cmp	r4, r3
 800beac:	f04f 0200 	mov.w	r2, #0
 800beb0:	d124      	bne.n	800befc <_dtoa_r+0x64c>
 800beb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800beb6:	4bb3      	ldr	r3, [pc, #716]	; (800c184 <_dtoa_r+0x8d4>)
 800beb8:	f7f4 f958 	bl	800016c <__adddf3>
 800bebc:	4602      	mov	r2, r0
 800bebe:	460b      	mov	r3, r1
 800bec0:	4630      	mov	r0, r6
 800bec2:	4639      	mov	r1, r7
 800bec4:	f7f4 fd98 	bl	80009f8 <__aeabi_dcmpgt>
 800bec8:	2800      	cmp	r0, #0
 800beca:	d162      	bne.n	800bf92 <_dtoa_r+0x6e2>
 800becc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bed0:	2000      	movs	r0, #0
 800bed2:	49ac      	ldr	r1, [pc, #688]	; (800c184 <_dtoa_r+0x8d4>)
 800bed4:	f7f4 f948 	bl	8000168 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	4630      	mov	r0, r6
 800bede:	4639      	mov	r1, r7
 800bee0:	f7f4 fd6c 	bl	80009bc <__aeabi_dcmplt>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	f43f af1d 	beq.w	800bd24 <_dtoa_r+0x474>
 800beea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800beec:	1e7b      	subs	r3, r7, #1
 800beee:	9314      	str	r3, [sp, #80]	; 0x50
 800bef0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bef4:	2b30      	cmp	r3, #48	; 0x30
 800bef6:	d0f8      	beq.n	800beea <_dtoa_r+0x63a>
 800bef8:	46c1      	mov	r9, r8
 800befa:	e03a      	b.n	800bf72 <_dtoa_r+0x6c2>
 800befc:	4ba2      	ldr	r3, [pc, #648]	; (800c188 <_dtoa_r+0x8d8>)
 800befe:	f7f4 faeb 	bl	80004d8 <__aeabi_dmul>
 800bf02:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf06:	e7bc      	b.n	800be82 <_dtoa_r+0x5d2>
 800bf08:	9f08      	ldr	r7, [sp, #32]
 800bf0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf12:	f7f4 fc0b 	bl	800072c <__aeabi_ddiv>
 800bf16:	f7f4 fd8f 	bl	8000a38 <__aeabi_d2iz>
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	f7f4 fa72 	bl	8000404 <__aeabi_i2d>
 800bf20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf24:	f7f4 fad8 	bl	80004d8 <__aeabi_dmul>
 800bf28:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4602      	mov	r2, r0
 800bf30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf34:	f7f4 f918 	bl	8000168 <__aeabi_dsub>
 800bf38:	f807 6b01 	strb.w	r6, [r7], #1
 800bf3c:	9e08      	ldr	r6, [sp, #32]
 800bf3e:	9b02      	ldr	r3, [sp, #8]
 800bf40:	1bbe      	subs	r6, r7, r6
 800bf42:	42b3      	cmp	r3, r6
 800bf44:	d13a      	bne.n	800bfbc <_dtoa_r+0x70c>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	f7f4 f90f 	bl	800016c <__adddf3>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	460b      	mov	r3, r1
 800bf52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf5a:	f7f4 fd4d 	bl	80009f8 <__aeabi_dcmpgt>
 800bf5e:	bb58      	cbnz	r0, 800bfb8 <_dtoa_r+0x708>
 800bf60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf68:	f7f4 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 800bf6c:	b108      	cbz	r0, 800bf72 <_dtoa_r+0x6c2>
 800bf6e:	07e1      	lsls	r1, r4, #31
 800bf70:	d422      	bmi.n	800bfb8 <_dtoa_r+0x708>
 800bf72:	4628      	mov	r0, r5
 800bf74:	4651      	mov	r1, sl
 800bf76:	f000 fbdd 	bl	800c734 <_Bfree>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	703b      	strb	r3, [r7, #0]
 800bf7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bf80:	f109 0001 	add.w	r0, r9, #1
 800bf84:	6018      	str	r0, [r3, #0]
 800bf86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f43f acdf 	beq.w	800b94c <_dtoa_r+0x9c>
 800bf8e:	601f      	str	r7, [r3, #0]
 800bf90:	e4dc      	b.n	800b94c <_dtoa_r+0x9c>
 800bf92:	4627      	mov	r7, r4
 800bf94:	463b      	mov	r3, r7
 800bf96:	461f      	mov	r7, r3
 800bf98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf9c:	2a39      	cmp	r2, #57	; 0x39
 800bf9e:	d107      	bne.n	800bfb0 <_dtoa_r+0x700>
 800bfa0:	9a08      	ldr	r2, [sp, #32]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d1f7      	bne.n	800bf96 <_dtoa_r+0x6e6>
 800bfa6:	2230      	movs	r2, #48	; 0x30
 800bfa8:	9908      	ldr	r1, [sp, #32]
 800bfaa:	f108 0801 	add.w	r8, r8, #1
 800bfae:	700a      	strb	r2, [r1, #0]
 800bfb0:	781a      	ldrb	r2, [r3, #0]
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	701a      	strb	r2, [r3, #0]
 800bfb6:	e79f      	b.n	800bef8 <_dtoa_r+0x648>
 800bfb8:	46c8      	mov	r8, r9
 800bfba:	e7eb      	b.n	800bf94 <_dtoa_r+0x6e4>
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	4b72      	ldr	r3, [pc, #456]	; (800c188 <_dtoa_r+0x8d8>)
 800bfc0:	f7f4 fa8a 	bl	80004d8 <__aeabi_dmul>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f7f4 fcea 	bl	80009a8 <__aeabi_dcmpeq>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d098      	beq.n	800bf0a <_dtoa_r+0x65a>
 800bfd8:	e7cb      	b.n	800bf72 <_dtoa_r+0x6c2>
 800bfda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bfdc:	2a00      	cmp	r2, #0
 800bfde:	f000 80cd 	beq.w	800c17c <_dtoa_r+0x8cc>
 800bfe2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bfe4:	2a01      	cmp	r2, #1
 800bfe6:	f300 80af 	bgt.w	800c148 <_dtoa_r+0x898>
 800bfea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bfec:	2a00      	cmp	r2, #0
 800bfee:	f000 80a7 	beq.w	800c140 <_dtoa_r+0x890>
 800bff2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bff6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bff8:	9f06      	ldr	r7, [sp, #24]
 800bffa:	9a06      	ldr	r2, [sp, #24]
 800bffc:	2101      	movs	r1, #1
 800bffe:	441a      	add	r2, r3
 800c000:	9206      	str	r2, [sp, #24]
 800c002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c004:	4628      	mov	r0, r5
 800c006:	441a      	add	r2, r3
 800c008:	9209      	str	r2, [sp, #36]	; 0x24
 800c00a:	f000 fc4d 	bl	800c8a8 <__i2b>
 800c00e:	4606      	mov	r6, r0
 800c010:	2f00      	cmp	r7, #0
 800c012:	dd0c      	ble.n	800c02e <_dtoa_r+0x77e>
 800c014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c016:	2b00      	cmp	r3, #0
 800c018:	dd09      	ble.n	800c02e <_dtoa_r+0x77e>
 800c01a:	42bb      	cmp	r3, r7
 800c01c:	bfa8      	it	ge
 800c01e:	463b      	movge	r3, r7
 800c020:	9a06      	ldr	r2, [sp, #24]
 800c022:	1aff      	subs	r7, r7, r3
 800c024:	1ad2      	subs	r2, r2, r3
 800c026:	9206      	str	r2, [sp, #24]
 800c028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c02a:	1ad3      	subs	r3, r2, r3
 800c02c:	9309      	str	r3, [sp, #36]	; 0x24
 800c02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c030:	b1f3      	cbz	r3, 800c070 <_dtoa_r+0x7c0>
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	f000 80a9 	beq.w	800c18c <_dtoa_r+0x8dc>
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	dd10      	ble.n	800c060 <_dtoa_r+0x7b0>
 800c03e:	4631      	mov	r1, r6
 800c040:	4622      	mov	r2, r4
 800c042:	4628      	mov	r0, r5
 800c044:	f000 fcea 	bl	800ca1c <__pow5mult>
 800c048:	4652      	mov	r2, sl
 800c04a:	4601      	mov	r1, r0
 800c04c:	4606      	mov	r6, r0
 800c04e:	4628      	mov	r0, r5
 800c050:	f000 fc40 	bl	800c8d4 <__multiply>
 800c054:	4680      	mov	r8, r0
 800c056:	4651      	mov	r1, sl
 800c058:	4628      	mov	r0, r5
 800c05a:	f000 fb6b 	bl	800c734 <_Bfree>
 800c05e:	46c2      	mov	sl, r8
 800c060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c062:	1b1a      	subs	r2, r3, r4
 800c064:	d004      	beq.n	800c070 <_dtoa_r+0x7c0>
 800c066:	4651      	mov	r1, sl
 800c068:	4628      	mov	r0, r5
 800c06a:	f000 fcd7 	bl	800ca1c <__pow5mult>
 800c06e:	4682      	mov	sl, r0
 800c070:	2101      	movs	r1, #1
 800c072:	4628      	mov	r0, r5
 800c074:	f000 fc18 	bl	800c8a8 <__i2b>
 800c078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c07a:	4604      	mov	r4, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f340 8087 	ble.w	800c190 <_dtoa_r+0x8e0>
 800c082:	461a      	mov	r2, r3
 800c084:	4601      	mov	r1, r0
 800c086:	4628      	mov	r0, r5
 800c088:	f000 fcc8 	bl	800ca1c <__pow5mult>
 800c08c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c08e:	4604      	mov	r4, r0
 800c090:	2b01      	cmp	r3, #1
 800c092:	f340 8080 	ble.w	800c196 <_dtoa_r+0x8e6>
 800c096:	f04f 0800 	mov.w	r8, #0
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0a0:	6918      	ldr	r0, [r3, #16]
 800c0a2:	f000 fbb3 	bl	800c80c <__hi0bits>
 800c0a6:	f1c0 0020 	rsb	r0, r0, #32
 800c0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ac:	4418      	add	r0, r3
 800c0ae:	f010 001f 	ands.w	r0, r0, #31
 800c0b2:	f000 8092 	beq.w	800c1da <_dtoa_r+0x92a>
 800c0b6:	f1c0 0320 	rsb	r3, r0, #32
 800c0ba:	2b04      	cmp	r3, #4
 800c0bc:	f340 808a 	ble.w	800c1d4 <_dtoa_r+0x924>
 800c0c0:	f1c0 001c 	rsb	r0, r0, #28
 800c0c4:	9b06      	ldr	r3, [sp, #24]
 800c0c6:	4407      	add	r7, r0
 800c0c8:	4403      	add	r3, r0
 800c0ca:	9306      	str	r3, [sp, #24]
 800c0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ce:	4403      	add	r3, r0
 800c0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d2:	9b06      	ldr	r3, [sp, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dd05      	ble.n	800c0e4 <_dtoa_r+0x834>
 800c0d8:	4651      	mov	r1, sl
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f000 fcf7 	bl	800cad0 <__lshift>
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	dd05      	ble.n	800c0f6 <_dtoa_r+0x846>
 800c0ea:	4621      	mov	r1, r4
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 fcee 	bl	800cad0 <__lshift>
 800c0f4:	4604      	mov	r4, r0
 800c0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d070      	beq.n	800c1de <_dtoa_r+0x92e>
 800c0fc:	4621      	mov	r1, r4
 800c0fe:	4650      	mov	r0, sl
 800c100:	f000 fd52 	bl	800cba8 <__mcmp>
 800c104:	2800      	cmp	r0, #0
 800c106:	da6a      	bge.n	800c1de <_dtoa_r+0x92e>
 800c108:	2300      	movs	r3, #0
 800c10a:	4651      	mov	r1, sl
 800c10c:	220a      	movs	r2, #10
 800c10e:	4628      	mov	r0, r5
 800c110:	f000 fb32 	bl	800c778 <__multadd>
 800c114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c116:	4682      	mov	sl, r0
 800c118:	f109 39ff 	add.w	r9, r9, #4294967295
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 8193 	beq.w	800c448 <_dtoa_r+0xb98>
 800c122:	4631      	mov	r1, r6
 800c124:	2300      	movs	r3, #0
 800c126:	220a      	movs	r2, #10
 800c128:	4628      	mov	r0, r5
 800c12a:	f000 fb25 	bl	800c778 <__multadd>
 800c12e:	f1bb 0f00 	cmp.w	fp, #0
 800c132:	4606      	mov	r6, r0
 800c134:	f300 8093 	bgt.w	800c25e <_dtoa_r+0x9ae>
 800c138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	dc57      	bgt.n	800c1ee <_dtoa_r+0x93e>
 800c13e:	e08e      	b.n	800c25e <_dtoa_r+0x9ae>
 800c140:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c142:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c146:	e756      	b.n	800bff6 <_dtoa_r+0x746>
 800c148:	9b02      	ldr	r3, [sp, #8]
 800c14a:	1e5c      	subs	r4, r3, #1
 800c14c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c14e:	42a3      	cmp	r3, r4
 800c150:	bfb7      	itett	lt
 800c152:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c154:	1b1c      	subge	r4, r3, r4
 800c156:	1ae2      	sublt	r2, r4, r3
 800c158:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c15a:	bfbe      	ittt	lt
 800c15c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c15e:	189b      	addlt	r3, r3, r2
 800c160:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	bfb8      	it	lt
 800c166:	2400      	movlt	r4, #0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	bfbb      	ittet	lt
 800c16c:	9b06      	ldrlt	r3, [sp, #24]
 800c16e:	9a02      	ldrlt	r2, [sp, #8]
 800c170:	9f06      	ldrge	r7, [sp, #24]
 800c172:	1a9f      	sublt	r7, r3, r2
 800c174:	bfac      	ite	ge
 800c176:	9b02      	ldrge	r3, [sp, #8]
 800c178:	2300      	movlt	r3, #0
 800c17a:	e73e      	b.n	800bffa <_dtoa_r+0x74a>
 800c17c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c17e:	9f06      	ldr	r7, [sp, #24]
 800c180:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c182:	e745      	b.n	800c010 <_dtoa_r+0x760>
 800c184:	3fe00000 	.word	0x3fe00000
 800c188:	40240000 	.word	0x40240000
 800c18c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c18e:	e76a      	b.n	800c066 <_dtoa_r+0x7b6>
 800c190:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c192:	2b01      	cmp	r3, #1
 800c194:	dc19      	bgt.n	800c1ca <_dtoa_r+0x91a>
 800c196:	9b04      	ldr	r3, [sp, #16]
 800c198:	b9bb      	cbnz	r3, 800c1ca <_dtoa_r+0x91a>
 800c19a:	9b05      	ldr	r3, [sp, #20]
 800c19c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1a0:	b99b      	cbnz	r3, 800c1ca <_dtoa_r+0x91a>
 800c1a2:	9b05      	ldr	r3, [sp, #20]
 800c1a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1a8:	0d1b      	lsrs	r3, r3, #20
 800c1aa:	051b      	lsls	r3, r3, #20
 800c1ac:	b183      	cbz	r3, 800c1d0 <_dtoa_r+0x920>
 800c1ae:	f04f 0801 	mov.w	r8, #1
 800c1b2:	9b06      	ldr	r3, [sp, #24]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	9306      	str	r3, [sp, #24]
 800c1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c1be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f47f af6a 	bne.w	800c09a <_dtoa_r+0x7ea>
 800c1c6:	2001      	movs	r0, #1
 800c1c8:	e76f      	b.n	800c0aa <_dtoa_r+0x7fa>
 800c1ca:	f04f 0800 	mov.w	r8, #0
 800c1ce:	e7f6      	b.n	800c1be <_dtoa_r+0x90e>
 800c1d0:	4698      	mov	r8, r3
 800c1d2:	e7f4      	b.n	800c1be <_dtoa_r+0x90e>
 800c1d4:	f43f af7d 	beq.w	800c0d2 <_dtoa_r+0x822>
 800c1d8:	4618      	mov	r0, r3
 800c1da:	301c      	adds	r0, #28
 800c1dc:	e772      	b.n	800c0c4 <_dtoa_r+0x814>
 800c1de:	9b02      	ldr	r3, [sp, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	dc36      	bgt.n	800c252 <_dtoa_r+0x9a2>
 800c1e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	dd33      	ble.n	800c252 <_dtoa_r+0x9a2>
 800c1ea:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c1ee:	f1bb 0f00 	cmp.w	fp, #0
 800c1f2:	d10d      	bne.n	800c210 <_dtoa_r+0x960>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	465b      	mov	r3, fp
 800c1f8:	2205      	movs	r2, #5
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	f000 fabc 	bl	800c778 <__multadd>
 800c200:	4601      	mov	r1, r0
 800c202:	4604      	mov	r4, r0
 800c204:	4650      	mov	r0, sl
 800c206:	f000 fccf 	bl	800cba8 <__mcmp>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f73f adb6 	bgt.w	800bd7c <_dtoa_r+0x4cc>
 800c210:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c212:	9f08      	ldr	r7, [sp, #32]
 800c214:	ea6f 0903 	mvn.w	r9, r3
 800c218:	f04f 0800 	mov.w	r8, #0
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f000 fa88 	bl	800c734 <_Bfree>
 800c224:	2e00      	cmp	r6, #0
 800c226:	f43f aea4 	beq.w	800bf72 <_dtoa_r+0x6c2>
 800c22a:	f1b8 0f00 	cmp.w	r8, #0
 800c22e:	d005      	beq.n	800c23c <_dtoa_r+0x98c>
 800c230:	45b0      	cmp	r8, r6
 800c232:	d003      	beq.n	800c23c <_dtoa_r+0x98c>
 800c234:	4641      	mov	r1, r8
 800c236:	4628      	mov	r0, r5
 800c238:	f000 fa7c 	bl	800c734 <_Bfree>
 800c23c:	4631      	mov	r1, r6
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 fa78 	bl	800c734 <_Bfree>
 800c244:	e695      	b.n	800bf72 <_dtoa_r+0x6c2>
 800c246:	2400      	movs	r4, #0
 800c248:	4626      	mov	r6, r4
 800c24a:	e7e1      	b.n	800c210 <_dtoa_r+0x960>
 800c24c:	46c1      	mov	r9, r8
 800c24e:	4626      	mov	r6, r4
 800c250:	e594      	b.n	800bd7c <_dtoa_r+0x4cc>
 800c252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c254:	f8dd b008 	ldr.w	fp, [sp, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 80fc 	beq.w	800c456 <_dtoa_r+0xba6>
 800c25e:	2f00      	cmp	r7, #0
 800c260:	dd05      	ble.n	800c26e <_dtoa_r+0x9be>
 800c262:	4631      	mov	r1, r6
 800c264:	463a      	mov	r2, r7
 800c266:	4628      	mov	r0, r5
 800c268:	f000 fc32 	bl	800cad0 <__lshift>
 800c26c:	4606      	mov	r6, r0
 800c26e:	f1b8 0f00 	cmp.w	r8, #0
 800c272:	d05c      	beq.n	800c32e <_dtoa_r+0xa7e>
 800c274:	4628      	mov	r0, r5
 800c276:	6871      	ldr	r1, [r6, #4]
 800c278:	f000 fa1c 	bl	800c6b4 <_Balloc>
 800c27c:	4607      	mov	r7, r0
 800c27e:	b928      	cbnz	r0, 800c28c <_dtoa_r+0x9dc>
 800c280:	4602      	mov	r2, r0
 800c282:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c286:	4b7e      	ldr	r3, [pc, #504]	; (800c480 <_dtoa_r+0xbd0>)
 800c288:	f7ff bb26 	b.w	800b8d8 <_dtoa_r+0x28>
 800c28c:	6932      	ldr	r2, [r6, #16]
 800c28e:	f106 010c 	add.w	r1, r6, #12
 800c292:	3202      	adds	r2, #2
 800c294:	0092      	lsls	r2, r2, #2
 800c296:	300c      	adds	r0, #12
 800c298:	f7fe fdcc 	bl	800ae34 <memcpy>
 800c29c:	2201      	movs	r2, #1
 800c29e:	4639      	mov	r1, r7
 800c2a0:	4628      	mov	r0, r5
 800c2a2:	f000 fc15 	bl	800cad0 <__lshift>
 800c2a6:	46b0      	mov	r8, r6
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	9b08      	ldr	r3, [sp, #32]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	9302      	str	r3, [sp, #8]
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	445b      	add	r3, fp
 800c2b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c2b6:	9b04      	ldr	r3, [sp, #16]
 800c2b8:	f003 0301 	and.w	r3, r3, #1
 800c2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2be:	9b02      	ldr	r3, [sp, #8]
 800c2c0:	4621      	mov	r1, r4
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c2c8:	f7ff fa64 	bl	800b794 <quorem>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	4641      	mov	r1, r8
 800c2d0:	3330      	adds	r3, #48	; 0x30
 800c2d2:	9004      	str	r0, [sp, #16]
 800c2d4:	4650      	mov	r0, sl
 800c2d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2d8:	f000 fc66 	bl	800cba8 <__mcmp>
 800c2dc:	4632      	mov	r2, r6
 800c2de:	9006      	str	r0, [sp, #24]
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	4628      	mov	r0, r5
 800c2e4:	f000 fc7c 	bl	800cbe0 <__mdiff>
 800c2e8:	68c2      	ldr	r2, [r0, #12]
 800c2ea:	4607      	mov	r7, r0
 800c2ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ee:	bb02      	cbnz	r2, 800c332 <_dtoa_r+0xa82>
 800c2f0:	4601      	mov	r1, r0
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	f000 fc58 	bl	800cba8 <__mcmp>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4628      	mov	r0, r5
 800c300:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c304:	f000 fa16 	bl	800c734 <_Bfree>
 800c308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c30a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c30c:	9f02      	ldr	r7, [sp, #8]
 800c30e:	ea43 0102 	orr.w	r1, r3, r2
 800c312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c314:	430b      	orrs	r3, r1
 800c316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c318:	d10d      	bne.n	800c336 <_dtoa_r+0xa86>
 800c31a:	2b39      	cmp	r3, #57	; 0x39
 800c31c:	d027      	beq.n	800c36e <_dtoa_r+0xabe>
 800c31e:	9a06      	ldr	r2, [sp, #24]
 800c320:	2a00      	cmp	r2, #0
 800c322:	dd01      	ble.n	800c328 <_dtoa_r+0xa78>
 800c324:	9b04      	ldr	r3, [sp, #16]
 800c326:	3331      	adds	r3, #49	; 0x31
 800c328:	f88b 3000 	strb.w	r3, [fp]
 800c32c:	e776      	b.n	800c21c <_dtoa_r+0x96c>
 800c32e:	4630      	mov	r0, r6
 800c330:	e7b9      	b.n	800c2a6 <_dtoa_r+0x9f6>
 800c332:	2201      	movs	r2, #1
 800c334:	e7e2      	b.n	800c2fc <_dtoa_r+0xa4c>
 800c336:	9906      	ldr	r1, [sp, #24]
 800c338:	2900      	cmp	r1, #0
 800c33a:	db04      	blt.n	800c346 <_dtoa_r+0xa96>
 800c33c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800c33e:	4301      	orrs	r1, r0
 800c340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c342:	4301      	orrs	r1, r0
 800c344:	d120      	bne.n	800c388 <_dtoa_r+0xad8>
 800c346:	2a00      	cmp	r2, #0
 800c348:	ddee      	ble.n	800c328 <_dtoa_r+0xa78>
 800c34a:	4651      	mov	r1, sl
 800c34c:	2201      	movs	r2, #1
 800c34e:	4628      	mov	r0, r5
 800c350:	9302      	str	r3, [sp, #8]
 800c352:	f000 fbbd 	bl	800cad0 <__lshift>
 800c356:	4621      	mov	r1, r4
 800c358:	4682      	mov	sl, r0
 800c35a:	f000 fc25 	bl	800cba8 <__mcmp>
 800c35e:	2800      	cmp	r0, #0
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	dc02      	bgt.n	800c36a <_dtoa_r+0xaba>
 800c364:	d1e0      	bne.n	800c328 <_dtoa_r+0xa78>
 800c366:	07da      	lsls	r2, r3, #31
 800c368:	d5de      	bpl.n	800c328 <_dtoa_r+0xa78>
 800c36a:	2b39      	cmp	r3, #57	; 0x39
 800c36c:	d1da      	bne.n	800c324 <_dtoa_r+0xa74>
 800c36e:	2339      	movs	r3, #57	; 0x39
 800c370:	f88b 3000 	strb.w	r3, [fp]
 800c374:	463b      	mov	r3, r7
 800c376:	461f      	mov	r7, r3
 800c378:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	2a39      	cmp	r2, #57	; 0x39
 800c380:	d050      	beq.n	800c424 <_dtoa_r+0xb74>
 800c382:	3201      	adds	r2, #1
 800c384:	701a      	strb	r2, [r3, #0]
 800c386:	e749      	b.n	800c21c <_dtoa_r+0x96c>
 800c388:	2a00      	cmp	r2, #0
 800c38a:	dd03      	ble.n	800c394 <_dtoa_r+0xae4>
 800c38c:	2b39      	cmp	r3, #57	; 0x39
 800c38e:	d0ee      	beq.n	800c36e <_dtoa_r+0xabe>
 800c390:	3301      	adds	r3, #1
 800c392:	e7c9      	b.n	800c328 <_dtoa_r+0xa78>
 800c394:	9a02      	ldr	r2, [sp, #8]
 800c396:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c398:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c39c:	428a      	cmp	r2, r1
 800c39e:	d02a      	beq.n	800c3f6 <_dtoa_r+0xb46>
 800c3a0:	4651      	mov	r1, sl
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	220a      	movs	r2, #10
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f000 f9e6 	bl	800c778 <__multadd>
 800c3ac:	45b0      	cmp	r8, r6
 800c3ae:	4682      	mov	sl, r0
 800c3b0:	f04f 0300 	mov.w	r3, #0
 800c3b4:	f04f 020a 	mov.w	r2, #10
 800c3b8:	4641      	mov	r1, r8
 800c3ba:	4628      	mov	r0, r5
 800c3bc:	d107      	bne.n	800c3ce <_dtoa_r+0xb1e>
 800c3be:	f000 f9db 	bl	800c778 <__multadd>
 800c3c2:	4680      	mov	r8, r0
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	9b02      	ldr	r3, [sp, #8]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	9302      	str	r3, [sp, #8]
 800c3cc:	e777      	b.n	800c2be <_dtoa_r+0xa0e>
 800c3ce:	f000 f9d3 	bl	800c778 <__multadd>
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4680      	mov	r8, r0
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	220a      	movs	r2, #10
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f000 f9cc 	bl	800c778 <__multadd>
 800c3e0:	4606      	mov	r6, r0
 800c3e2:	e7f0      	b.n	800c3c6 <_dtoa_r+0xb16>
 800c3e4:	f1bb 0f00 	cmp.w	fp, #0
 800c3e8:	bfcc      	ite	gt
 800c3ea:	465f      	movgt	r7, fp
 800c3ec:	2701      	movle	r7, #1
 800c3ee:	f04f 0800 	mov.w	r8, #0
 800c3f2:	9a08      	ldr	r2, [sp, #32]
 800c3f4:	4417      	add	r7, r2
 800c3f6:	4651      	mov	r1, sl
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	9302      	str	r3, [sp, #8]
 800c3fe:	f000 fb67 	bl	800cad0 <__lshift>
 800c402:	4621      	mov	r1, r4
 800c404:	4682      	mov	sl, r0
 800c406:	f000 fbcf 	bl	800cba8 <__mcmp>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	dcb2      	bgt.n	800c374 <_dtoa_r+0xac4>
 800c40e:	d102      	bne.n	800c416 <_dtoa_r+0xb66>
 800c410:	9b02      	ldr	r3, [sp, #8]
 800c412:	07db      	lsls	r3, r3, #31
 800c414:	d4ae      	bmi.n	800c374 <_dtoa_r+0xac4>
 800c416:	463b      	mov	r3, r7
 800c418:	461f      	mov	r7, r3
 800c41a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c41e:	2a30      	cmp	r2, #48	; 0x30
 800c420:	d0fa      	beq.n	800c418 <_dtoa_r+0xb68>
 800c422:	e6fb      	b.n	800c21c <_dtoa_r+0x96c>
 800c424:	9a08      	ldr	r2, [sp, #32]
 800c426:	429a      	cmp	r2, r3
 800c428:	d1a5      	bne.n	800c376 <_dtoa_r+0xac6>
 800c42a:	2331      	movs	r3, #49	; 0x31
 800c42c:	f109 0901 	add.w	r9, r9, #1
 800c430:	7013      	strb	r3, [r2, #0]
 800c432:	e6f3      	b.n	800c21c <_dtoa_r+0x96c>
 800c434:	4b13      	ldr	r3, [pc, #76]	; (800c484 <_dtoa_r+0xbd4>)
 800c436:	f7ff baa7 	b.w	800b988 <_dtoa_r+0xd8>
 800c43a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f47f aa80 	bne.w	800b942 <_dtoa_r+0x92>
 800c442:	4b11      	ldr	r3, [pc, #68]	; (800c488 <_dtoa_r+0xbd8>)
 800c444:	f7ff baa0 	b.w	800b988 <_dtoa_r+0xd8>
 800c448:	f1bb 0f00 	cmp.w	fp, #0
 800c44c:	dc03      	bgt.n	800c456 <_dtoa_r+0xba6>
 800c44e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c450:	2b02      	cmp	r3, #2
 800c452:	f73f aecc 	bgt.w	800c1ee <_dtoa_r+0x93e>
 800c456:	9f08      	ldr	r7, [sp, #32]
 800c458:	4621      	mov	r1, r4
 800c45a:	4650      	mov	r0, sl
 800c45c:	f7ff f99a 	bl	800b794 <quorem>
 800c460:	9a08      	ldr	r2, [sp, #32]
 800c462:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c466:	f807 3b01 	strb.w	r3, [r7], #1
 800c46a:	1aba      	subs	r2, r7, r2
 800c46c:	4593      	cmp	fp, r2
 800c46e:	ddb9      	ble.n	800c3e4 <_dtoa_r+0xb34>
 800c470:	4651      	mov	r1, sl
 800c472:	2300      	movs	r3, #0
 800c474:	220a      	movs	r2, #10
 800c476:	4628      	mov	r0, r5
 800c478:	f000 f97e 	bl	800c778 <__multadd>
 800c47c:	4682      	mov	sl, r0
 800c47e:	e7eb      	b.n	800c458 <_dtoa_r+0xba8>
 800c480:	0800e47f 	.word	0x0800e47f
 800c484:	0800e3d8 	.word	0x0800e3d8
 800c488:	0800e3fc 	.word	0x0800e3fc

0800c48c <std>:
 800c48c:	2300      	movs	r3, #0
 800c48e:	b510      	push	{r4, lr}
 800c490:	4604      	mov	r4, r0
 800c492:	e9c0 3300 	strd	r3, r3, [r0]
 800c496:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c49a:	6083      	str	r3, [r0, #8]
 800c49c:	8181      	strh	r1, [r0, #12]
 800c49e:	6643      	str	r3, [r0, #100]	; 0x64
 800c4a0:	81c2      	strh	r2, [r0, #14]
 800c4a2:	6183      	str	r3, [r0, #24]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	2208      	movs	r2, #8
 800c4a8:	305c      	adds	r0, #92	; 0x5c
 800c4aa:	f7fe fceb 	bl	800ae84 <memset>
 800c4ae:	4b05      	ldr	r3, [pc, #20]	; (800c4c4 <std+0x38>)
 800c4b0:	6224      	str	r4, [r4, #32]
 800c4b2:	6263      	str	r3, [r4, #36]	; 0x24
 800c4b4:	4b04      	ldr	r3, [pc, #16]	; (800c4c8 <std+0x3c>)
 800c4b6:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4b8:	4b04      	ldr	r3, [pc, #16]	; (800c4cc <std+0x40>)
 800c4ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4bc:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <std+0x44>)
 800c4be:	6323      	str	r3, [r4, #48]	; 0x30
 800c4c0:	bd10      	pop	{r4, pc}
 800c4c2:	bf00      	nop
 800c4c4:	0800d1f9 	.word	0x0800d1f9
 800c4c8:	0800d21b 	.word	0x0800d21b
 800c4cc:	0800d253 	.word	0x0800d253
 800c4d0:	0800d277 	.word	0x0800d277

0800c4d4 <_cleanup_r>:
 800c4d4:	4901      	ldr	r1, [pc, #4]	; (800c4dc <_cleanup_r+0x8>)
 800c4d6:	f000 b8af 	b.w	800c638 <_fwalk_reent>
 800c4da:	bf00      	nop
 800c4dc:	0800d58d 	.word	0x0800d58d

0800c4e0 <__sfmoreglue>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	2568      	movs	r5, #104	; 0x68
 800c4e4:	1e4a      	subs	r2, r1, #1
 800c4e6:	4355      	muls	r5, r2
 800c4e8:	460e      	mov	r6, r1
 800c4ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4ee:	f000 fcbd 	bl	800ce6c <_malloc_r>
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	b140      	cbz	r0, 800c508 <__sfmoreglue+0x28>
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c4fc:	300c      	adds	r0, #12
 800c4fe:	60a0      	str	r0, [r4, #8]
 800c500:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c504:	f7fe fcbe 	bl	800ae84 <memset>
 800c508:	4620      	mov	r0, r4
 800c50a:	bd70      	pop	{r4, r5, r6, pc}

0800c50c <__sfp_lock_acquire>:
 800c50c:	4801      	ldr	r0, [pc, #4]	; (800c514 <__sfp_lock_acquire+0x8>)
 800c50e:	f000 b8b8 	b.w	800c682 <__retarget_lock_acquire_recursive>
 800c512:	bf00      	nop
 800c514:	20003794 	.word	0x20003794

0800c518 <__sfp_lock_release>:
 800c518:	4801      	ldr	r0, [pc, #4]	; (800c520 <__sfp_lock_release+0x8>)
 800c51a:	f000 b8b3 	b.w	800c684 <__retarget_lock_release_recursive>
 800c51e:	bf00      	nop
 800c520:	20003794 	.word	0x20003794

0800c524 <__sinit_lock_acquire>:
 800c524:	4801      	ldr	r0, [pc, #4]	; (800c52c <__sinit_lock_acquire+0x8>)
 800c526:	f000 b8ac 	b.w	800c682 <__retarget_lock_acquire_recursive>
 800c52a:	bf00      	nop
 800c52c:	20003793 	.word	0x20003793

0800c530 <__sinit_lock_release>:
 800c530:	4801      	ldr	r0, [pc, #4]	; (800c538 <__sinit_lock_release+0x8>)
 800c532:	f000 b8a7 	b.w	800c684 <__retarget_lock_release_recursive>
 800c536:	bf00      	nop
 800c538:	20003793 	.word	0x20003793

0800c53c <__sinit>:
 800c53c:	b510      	push	{r4, lr}
 800c53e:	4604      	mov	r4, r0
 800c540:	f7ff fff0 	bl	800c524 <__sinit_lock_acquire>
 800c544:	69a3      	ldr	r3, [r4, #24]
 800c546:	b11b      	cbz	r3, 800c550 <__sinit+0x14>
 800c548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c54c:	f7ff bff0 	b.w	800c530 <__sinit_lock_release>
 800c550:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c554:	6523      	str	r3, [r4, #80]	; 0x50
 800c556:	4b13      	ldr	r3, [pc, #76]	; (800c5a4 <__sinit+0x68>)
 800c558:	4a13      	ldr	r2, [pc, #76]	; (800c5a8 <__sinit+0x6c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c55e:	42a3      	cmp	r3, r4
 800c560:	bf08      	it	eq
 800c562:	2301      	moveq	r3, #1
 800c564:	4620      	mov	r0, r4
 800c566:	bf08      	it	eq
 800c568:	61a3      	streq	r3, [r4, #24]
 800c56a:	f000 f81f 	bl	800c5ac <__sfp>
 800c56e:	6060      	str	r0, [r4, #4]
 800c570:	4620      	mov	r0, r4
 800c572:	f000 f81b 	bl	800c5ac <__sfp>
 800c576:	60a0      	str	r0, [r4, #8]
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 f817 	bl	800c5ac <__sfp>
 800c57e:	2200      	movs	r2, #0
 800c580:	2104      	movs	r1, #4
 800c582:	60e0      	str	r0, [r4, #12]
 800c584:	6860      	ldr	r0, [r4, #4]
 800c586:	f7ff ff81 	bl	800c48c <std>
 800c58a:	2201      	movs	r2, #1
 800c58c:	2109      	movs	r1, #9
 800c58e:	68a0      	ldr	r0, [r4, #8]
 800c590:	f7ff ff7c 	bl	800c48c <std>
 800c594:	2202      	movs	r2, #2
 800c596:	2112      	movs	r1, #18
 800c598:	68e0      	ldr	r0, [r4, #12]
 800c59a:	f7ff ff77 	bl	800c48c <std>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	61a3      	str	r3, [r4, #24]
 800c5a2:	e7d1      	b.n	800c548 <__sinit+0xc>
 800c5a4:	0800e3c4 	.word	0x0800e3c4
 800c5a8:	0800c4d5 	.word	0x0800c4d5

0800c5ac <__sfp>:
 800c5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ae:	4607      	mov	r7, r0
 800c5b0:	f7ff ffac 	bl	800c50c <__sfp_lock_acquire>
 800c5b4:	4b1e      	ldr	r3, [pc, #120]	; (800c630 <__sfp+0x84>)
 800c5b6:	681e      	ldr	r6, [r3, #0]
 800c5b8:	69b3      	ldr	r3, [r6, #24]
 800c5ba:	b913      	cbnz	r3, 800c5c2 <__sfp+0x16>
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff ffbd 	bl	800c53c <__sinit>
 800c5c2:	3648      	adds	r6, #72	; 0x48
 800c5c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	d503      	bpl.n	800c5d4 <__sfp+0x28>
 800c5cc:	6833      	ldr	r3, [r6, #0]
 800c5ce:	b30b      	cbz	r3, 800c614 <__sfp+0x68>
 800c5d0:	6836      	ldr	r6, [r6, #0]
 800c5d2:	e7f7      	b.n	800c5c4 <__sfp+0x18>
 800c5d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5d8:	b9d5      	cbnz	r5, 800c610 <__sfp+0x64>
 800c5da:	4b16      	ldr	r3, [pc, #88]	; (800c634 <__sfp+0x88>)
 800c5dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5e0:	60e3      	str	r3, [r4, #12]
 800c5e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c5e4:	f000 f84c 	bl	800c680 <__retarget_lock_init_recursive>
 800c5e8:	f7ff ff96 	bl	800c518 <__sfp_lock_release>
 800c5ec:	2208      	movs	r2, #8
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5f8:	6025      	str	r5, [r4, #0]
 800c5fa:	61a5      	str	r5, [r4, #24]
 800c5fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c600:	f7fe fc40 	bl	800ae84 <memset>
 800c604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c60c:	4620      	mov	r0, r4
 800c60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c610:	3468      	adds	r4, #104	; 0x68
 800c612:	e7d9      	b.n	800c5c8 <__sfp+0x1c>
 800c614:	2104      	movs	r1, #4
 800c616:	4638      	mov	r0, r7
 800c618:	f7ff ff62 	bl	800c4e0 <__sfmoreglue>
 800c61c:	4604      	mov	r4, r0
 800c61e:	6030      	str	r0, [r6, #0]
 800c620:	2800      	cmp	r0, #0
 800c622:	d1d5      	bne.n	800c5d0 <__sfp+0x24>
 800c624:	f7ff ff78 	bl	800c518 <__sfp_lock_release>
 800c628:	230c      	movs	r3, #12
 800c62a:	603b      	str	r3, [r7, #0]
 800c62c:	e7ee      	b.n	800c60c <__sfp+0x60>
 800c62e:	bf00      	nop
 800c630:	0800e3c4 	.word	0x0800e3c4
 800c634:	ffff0001 	.word	0xffff0001

0800c638 <_fwalk_reent>:
 800c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c63c:	4606      	mov	r6, r0
 800c63e:	4688      	mov	r8, r1
 800c640:	2700      	movs	r7, #0
 800c642:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c646:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c64a:	f1b9 0901 	subs.w	r9, r9, #1
 800c64e:	d505      	bpl.n	800c65c <_fwalk_reent+0x24>
 800c650:	6824      	ldr	r4, [r4, #0]
 800c652:	2c00      	cmp	r4, #0
 800c654:	d1f7      	bne.n	800c646 <_fwalk_reent+0xe>
 800c656:	4638      	mov	r0, r7
 800c658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65c:	89ab      	ldrh	r3, [r5, #12]
 800c65e:	2b01      	cmp	r3, #1
 800c660:	d907      	bls.n	800c672 <_fwalk_reent+0x3a>
 800c662:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c666:	3301      	adds	r3, #1
 800c668:	d003      	beq.n	800c672 <_fwalk_reent+0x3a>
 800c66a:	4629      	mov	r1, r5
 800c66c:	4630      	mov	r0, r6
 800c66e:	47c0      	blx	r8
 800c670:	4307      	orrs	r7, r0
 800c672:	3568      	adds	r5, #104	; 0x68
 800c674:	e7e9      	b.n	800c64a <_fwalk_reent+0x12>
	...

0800c678 <_localeconv_r>:
 800c678:	4800      	ldr	r0, [pc, #0]	; (800c67c <_localeconv_r+0x4>)
 800c67a:	4770      	bx	lr
 800c67c:	200002dc 	.word	0x200002dc

0800c680 <__retarget_lock_init_recursive>:
 800c680:	4770      	bx	lr

0800c682 <__retarget_lock_acquire_recursive>:
 800c682:	4770      	bx	lr

0800c684 <__retarget_lock_release_recursive>:
 800c684:	4770      	bx	lr
	...

0800c688 <malloc>:
 800c688:	4b02      	ldr	r3, [pc, #8]	; (800c694 <malloc+0xc>)
 800c68a:	4601      	mov	r1, r0
 800c68c:	6818      	ldr	r0, [r3, #0]
 800c68e:	f000 bbed 	b.w	800ce6c <_malloc_r>
 800c692:	bf00      	nop
 800c694:	20000188 	.word	0x20000188

0800c698 <memchr>:
 800c698:	4603      	mov	r3, r0
 800c69a:	b510      	push	{r4, lr}
 800c69c:	b2c9      	uxtb	r1, r1
 800c69e:	4402      	add	r2, r0
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	d101      	bne.n	800c6aa <memchr+0x12>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e003      	b.n	800c6b2 <memchr+0x1a>
 800c6aa:	7804      	ldrb	r4, [r0, #0]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	428c      	cmp	r4, r1
 800c6b0:	d1f6      	bne.n	800c6a0 <memchr+0x8>
 800c6b2:	bd10      	pop	{r4, pc}

0800c6b4 <_Balloc>:
 800c6b4:	b570      	push	{r4, r5, r6, lr}
 800c6b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	460d      	mov	r5, r1
 800c6bc:	b976      	cbnz	r6, 800c6dc <_Balloc+0x28>
 800c6be:	2010      	movs	r0, #16
 800c6c0:	f7ff ffe2 	bl	800c688 <malloc>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	6260      	str	r0, [r4, #36]	; 0x24
 800c6c8:	b920      	cbnz	r0, 800c6d4 <_Balloc+0x20>
 800c6ca:	2166      	movs	r1, #102	; 0x66
 800c6cc:	4b17      	ldr	r3, [pc, #92]	; (800c72c <_Balloc+0x78>)
 800c6ce:	4818      	ldr	r0, [pc, #96]	; (800c730 <_Balloc+0x7c>)
 800c6d0:	f000 fea8 	bl	800d424 <__assert_func>
 800c6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6d8:	6006      	str	r6, [r0, #0]
 800c6da:	60c6      	str	r6, [r0, #12]
 800c6dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c6de:	68f3      	ldr	r3, [r6, #12]
 800c6e0:	b183      	cbz	r3, 800c704 <_Balloc+0x50>
 800c6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6ea:	b9b8      	cbnz	r0, 800c71c <_Balloc+0x68>
 800c6ec:	2101      	movs	r1, #1
 800c6ee:	fa01 f605 	lsl.w	r6, r1, r5
 800c6f2:	1d72      	adds	r2, r6, #5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	0092      	lsls	r2, r2, #2
 800c6f8:	f000 fb5e 	bl	800cdb8 <_calloc_r>
 800c6fc:	b160      	cbz	r0, 800c718 <_Balloc+0x64>
 800c6fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c702:	e00e      	b.n	800c722 <_Balloc+0x6e>
 800c704:	2221      	movs	r2, #33	; 0x21
 800c706:	2104      	movs	r1, #4
 800c708:	4620      	mov	r0, r4
 800c70a:	f000 fb55 	bl	800cdb8 <_calloc_r>
 800c70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c710:	60f0      	str	r0, [r6, #12]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d1e4      	bne.n	800c6e2 <_Balloc+0x2e>
 800c718:	2000      	movs	r0, #0
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	6802      	ldr	r2, [r0, #0]
 800c71e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c722:	2300      	movs	r3, #0
 800c724:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c728:	e7f7      	b.n	800c71a <_Balloc+0x66>
 800c72a:	bf00      	nop
 800c72c:	0800e409 	.word	0x0800e409
 800c730:	0800e4f0 	.word	0x0800e4f0

0800c734 <_Bfree>:
 800c734:	b570      	push	{r4, r5, r6, lr}
 800c736:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	b976      	cbnz	r6, 800c75c <_Bfree+0x28>
 800c73e:	2010      	movs	r0, #16
 800c740:	f7ff ffa2 	bl	800c688 <malloc>
 800c744:	4602      	mov	r2, r0
 800c746:	6268      	str	r0, [r5, #36]	; 0x24
 800c748:	b920      	cbnz	r0, 800c754 <_Bfree+0x20>
 800c74a:	218a      	movs	r1, #138	; 0x8a
 800c74c:	4b08      	ldr	r3, [pc, #32]	; (800c770 <_Bfree+0x3c>)
 800c74e:	4809      	ldr	r0, [pc, #36]	; (800c774 <_Bfree+0x40>)
 800c750:	f000 fe68 	bl	800d424 <__assert_func>
 800c754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c758:	6006      	str	r6, [r0, #0]
 800c75a:	60c6      	str	r6, [r0, #12]
 800c75c:	b13c      	cbz	r4, 800c76e <_Bfree+0x3a>
 800c75e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c760:	6862      	ldr	r2, [r4, #4]
 800c762:	68db      	ldr	r3, [r3, #12]
 800c764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c768:	6021      	str	r1, [r4, #0]
 800c76a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c76e:	bd70      	pop	{r4, r5, r6, pc}
 800c770:	0800e409 	.word	0x0800e409
 800c774:	0800e4f0 	.word	0x0800e4f0

0800c778 <__multadd>:
 800c778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77c:	4698      	mov	r8, r3
 800c77e:	460c      	mov	r4, r1
 800c780:	2300      	movs	r3, #0
 800c782:	690e      	ldr	r6, [r1, #16]
 800c784:	4607      	mov	r7, r0
 800c786:	f101 0014 	add.w	r0, r1, #20
 800c78a:	6805      	ldr	r5, [r0, #0]
 800c78c:	3301      	adds	r3, #1
 800c78e:	b2a9      	uxth	r1, r5
 800c790:	fb02 8101 	mla	r1, r2, r1, r8
 800c794:	0c2d      	lsrs	r5, r5, #16
 800c796:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c79a:	fb02 c505 	mla	r5, r2, r5, ip
 800c79e:	b289      	uxth	r1, r1
 800c7a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c7a4:	429e      	cmp	r6, r3
 800c7a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c7aa:	f840 1b04 	str.w	r1, [r0], #4
 800c7ae:	dcec      	bgt.n	800c78a <__multadd+0x12>
 800c7b0:	f1b8 0f00 	cmp.w	r8, #0
 800c7b4:	d022      	beq.n	800c7fc <__multadd+0x84>
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	42b3      	cmp	r3, r6
 800c7ba:	dc19      	bgt.n	800c7f0 <__multadd+0x78>
 800c7bc:	6861      	ldr	r1, [r4, #4]
 800c7be:	4638      	mov	r0, r7
 800c7c0:	3101      	adds	r1, #1
 800c7c2:	f7ff ff77 	bl	800c6b4 <_Balloc>
 800c7c6:	4605      	mov	r5, r0
 800c7c8:	b928      	cbnz	r0, 800c7d6 <__multadd+0x5e>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	21b5      	movs	r1, #181	; 0xb5
 800c7ce:	4b0d      	ldr	r3, [pc, #52]	; (800c804 <__multadd+0x8c>)
 800c7d0:	480d      	ldr	r0, [pc, #52]	; (800c808 <__multadd+0x90>)
 800c7d2:	f000 fe27 	bl	800d424 <__assert_func>
 800c7d6:	6922      	ldr	r2, [r4, #16]
 800c7d8:	f104 010c 	add.w	r1, r4, #12
 800c7dc:	3202      	adds	r2, #2
 800c7de:	0092      	lsls	r2, r2, #2
 800c7e0:	300c      	adds	r0, #12
 800c7e2:	f7fe fb27 	bl	800ae34 <memcpy>
 800c7e6:	4621      	mov	r1, r4
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	f7ff ffa3 	bl	800c734 <_Bfree>
 800c7ee:	462c      	mov	r4, r5
 800c7f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c7f4:	3601      	adds	r6, #1
 800c7f6:	f8c3 8014 	str.w	r8, [r3, #20]
 800c7fa:	6126      	str	r6, [r4, #16]
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c802:	bf00      	nop
 800c804:	0800e47f 	.word	0x0800e47f
 800c808:	0800e4f0 	.word	0x0800e4f0

0800c80c <__hi0bits>:
 800c80c:	0c02      	lsrs	r2, r0, #16
 800c80e:	0412      	lsls	r2, r2, #16
 800c810:	4603      	mov	r3, r0
 800c812:	b9ca      	cbnz	r2, 800c848 <__hi0bits+0x3c>
 800c814:	0403      	lsls	r3, r0, #16
 800c816:	2010      	movs	r0, #16
 800c818:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c81c:	bf04      	itt	eq
 800c81e:	021b      	lsleq	r3, r3, #8
 800c820:	3008      	addeq	r0, #8
 800c822:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c826:	bf04      	itt	eq
 800c828:	011b      	lsleq	r3, r3, #4
 800c82a:	3004      	addeq	r0, #4
 800c82c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c830:	bf04      	itt	eq
 800c832:	009b      	lsleq	r3, r3, #2
 800c834:	3002      	addeq	r0, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	db05      	blt.n	800c846 <__hi0bits+0x3a>
 800c83a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c83e:	f100 0001 	add.w	r0, r0, #1
 800c842:	bf08      	it	eq
 800c844:	2020      	moveq	r0, #32
 800c846:	4770      	bx	lr
 800c848:	2000      	movs	r0, #0
 800c84a:	e7e5      	b.n	800c818 <__hi0bits+0xc>

0800c84c <__lo0bits>:
 800c84c:	6803      	ldr	r3, [r0, #0]
 800c84e:	4602      	mov	r2, r0
 800c850:	f013 0007 	ands.w	r0, r3, #7
 800c854:	d00b      	beq.n	800c86e <__lo0bits+0x22>
 800c856:	07d9      	lsls	r1, r3, #31
 800c858:	d422      	bmi.n	800c8a0 <__lo0bits+0x54>
 800c85a:	0798      	lsls	r0, r3, #30
 800c85c:	bf49      	itett	mi
 800c85e:	085b      	lsrmi	r3, r3, #1
 800c860:	089b      	lsrpl	r3, r3, #2
 800c862:	2001      	movmi	r0, #1
 800c864:	6013      	strmi	r3, [r2, #0]
 800c866:	bf5c      	itt	pl
 800c868:	2002      	movpl	r0, #2
 800c86a:	6013      	strpl	r3, [r2, #0]
 800c86c:	4770      	bx	lr
 800c86e:	b299      	uxth	r1, r3
 800c870:	b909      	cbnz	r1, 800c876 <__lo0bits+0x2a>
 800c872:	2010      	movs	r0, #16
 800c874:	0c1b      	lsrs	r3, r3, #16
 800c876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c87a:	bf04      	itt	eq
 800c87c:	0a1b      	lsreq	r3, r3, #8
 800c87e:	3008      	addeq	r0, #8
 800c880:	0719      	lsls	r1, r3, #28
 800c882:	bf04      	itt	eq
 800c884:	091b      	lsreq	r3, r3, #4
 800c886:	3004      	addeq	r0, #4
 800c888:	0799      	lsls	r1, r3, #30
 800c88a:	bf04      	itt	eq
 800c88c:	089b      	lsreq	r3, r3, #2
 800c88e:	3002      	addeq	r0, #2
 800c890:	07d9      	lsls	r1, r3, #31
 800c892:	d403      	bmi.n	800c89c <__lo0bits+0x50>
 800c894:	085b      	lsrs	r3, r3, #1
 800c896:	f100 0001 	add.w	r0, r0, #1
 800c89a:	d003      	beq.n	800c8a4 <__lo0bits+0x58>
 800c89c:	6013      	str	r3, [r2, #0]
 800c89e:	4770      	bx	lr
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	4770      	bx	lr
 800c8a4:	2020      	movs	r0, #32
 800c8a6:	4770      	bx	lr

0800c8a8 <__i2b>:
 800c8a8:	b510      	push	{r4, lr}
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	f7ff ff01 	bl	800c6b4 <_Balloc>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	b928      	cbnz	r0, 800c8c2 <__i2b+0x1a>
 800c8b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c8ba:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <__i2b+0x24>)
 800c8bc:	4804      	ldr	r0, [pc, #16]	; (800c8d0 <__i2b+0x28>)
 800c8be:	f000 fdb1 	bl	800d424 <__assert_func>
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	6144      	str	r4, [r0, #20]
 800c8c6:	6103      	str	r3, [r0, #16]
 800c8c8:	bd10      	pop	{r4, pc}
 800c8ca:	bf00      	nop
 800c8cc:	0800e47f 	.word	0x0800e47f
 800c8d0:	0800e4f0 	.word	0x0800e4f0

0800c8d4 <__multiply>:
 800c8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d8:	4614      	mov	r4, r2
 800c8da:	690a      	ldr	r2, [r1, #16]
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	460d      	mov	r5, r1
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	bfbe      	ittt	lt
 800c8e4:	460b      	movlt	r3, r1
 800c8e6:	4625      	movlt	r5, r4
 800c8e8:	461c      	movlt	r4, r3
 800c8ea:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c8ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8f2:	68ab      	ldr	r3, [r5, #8]
 800c8f4:	6869      	ldr	r1, [r5, #4]
 800c8f6:	eb0a 0709 	add.w	r7, sl, r9
 800c8fa:	42bb      	cmp	r3, r7
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	bfb8      	it	lt
 800c900:	3101      	addlt	r1, #1
 800c902:	f7ff fed7 	bl	800c6b4 <_Balloc>
 800c906:	b930      	cbnz	r0, 800c916 <__multiply+0x42>
 800c908:	4602      	mov	r2, r0
 800c90a:	f240 115d 	movw	r1, #349	; 0x15d
 800c90e:	4b41      	ldr	r3, [pc, #260]	; (800ca14 <__multiply+0x140>)
 800c910:	4841      	ldr	r0, [pc, #260]	; (800ca18 <__multiply+0x144>)
 800c912:	f000 fd87 	bl	800d424 <__assert_func>
 800c916:	f100 0614 	add.w	r6, r0, #20
 800c91a:	4633      	mov	r3, r6
 800c91c:	2200      	movs	r2, #0
 800c91e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c922:	4543      	cmp	r3, r8
 800c924:	d31e      	bcc.n	800c964 <__multiply+0x90>
 800c926:	f105 0c14 	add.w	ip, r5, #20
 800c92a:	f104 0314 	add.w	r3, r4, #20
 800c92e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c932:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c936:	9202      	str	r2, [sp, #8]
 800c938:	ebac 0205 	sub.w	r2, ip, r5
 800c93c:	3a15      	subs	r2, #21
 800c93e:	f022 0203 	bic.w	r2, r2, #3
 800c942:	3204      	adds	r2, #4
 800c944:	f105 0115 	add.w	r1, r5, #21
 800c948:	458c      	cmp	ip, r1
 800c94a:	bf38      	it	cc
 800c94c:	2204      	movcc	r2, #4
 800c94e:	9201      	str	r2, [sp, #4]
 800c950:	9a02      	ldr	r2, [sp, #8]
 800c952:	9303      	str	r3, [sp, #12]
 800c954:	429a      	cmp	r2, r3
 800c956:	d808      	bhi.n	800c96a <__multiply+0x96>
 800c958:	2f00      	cmp	r7, #0
 800c95a:	dc55      	bgt.n	800ca08 <__multiply+0x134>
 800c95c:	6107      	str	r7, [r0, #16]
 800c95e:	b005      	add	sp, #20
 800c960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c964:	f843 2b04 	str.w	r2, [r3], #4
 800c968:	e7db      	b.n	800c922 <__multiply+0x4e>
 800c96a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c96e:	f1ba 0f00 	cmp.w	sl, #0
 800c972:	d020      	beq.n	800c9b6 <__multiply+0xe2>
 800c974:	46b1      	mov	r9, r6
 800c976:	2200      	movs	r2, #0
 800c978:	f105 0e14 	add.w	lr, r5, #20
 800c97c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c980:	f8d9 b000 	ldr.w	fp, [r9]
 800c984:	b2a1      	uxth	r1, r4
 800c986:	fa1f fb8b 	uxth.w	fp, fp
 800c98a:	fb0a b101 	mla	r1, sl, r1, fp
 800c98e:	4411      	add	r1, r2
 800c990:	f8d9 2000 	ldr.w	r2, [r9]
 800c994:	0c24      	lsrs	r4, r4, #16
 800c996:	0c12      	lsrs	r2, r2, #16
 800c998:	fb0a 2404 	mla	r4, sl, r4, r2
 800c99c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c9a0:	b289      	uxth	r1, r1
 800c9a2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c9a6:	45f4      	cmp	ip, lr
 800c9a8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c9ac:	f849 1b04 	str.w	r1, [r9], #4
 800c9b0:	d8e4      	bhi.n	800c97c <__multiply+0xa8>
 800c9b2:	9901      	ldr	r1, [sp, #4]
 800c9b4:	5072      	str	r2, [r6, r1]
 800c9b6:	9a03      	ldr	r2, [sp, #12]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c9be:	f1b9 0f00 	cmp.w	r9, #0
 800c9c2:	d01f      	beq.n	800ca04 <__multiply+0x130>
 800c9c4:	46b6      	mov	lr, r6
 800c9c6:	f04f 0a00 	mov.w	sl, #0
 800c9ca:	6834      	ldr	r4, [r6, #0]
 800c9cc:	f105 0114 	add.w	r1, r5, #20
 800c9d0:	880a      	ldrh	r2, [r1, #0]
 800c9d2:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c9d6:	b2a4      	uxth	r4, r4
 800c9d8:	fb09 b202 	mla	r2, r9, r2, fp
 800c9dc:	4492      	add	sl, r2
 800c9de:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c9e2:	f84e 4b04 	str.w	r4, [lr], #4
 800c9e6:	f851 4b04 	ldr.w	r4, [r1], #4
 800c9ea:	f8be 2000 	ldrh.w	r2, [lr]
 800c9ee:	0c24      	lsrs	r4, r4, #16
 800c9f0:	fb09 2404 	mla	r4, r9, r4, r2
 800c9f4:	458c      	cmp	ip, r1
 800c9f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c9fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c9fe:	d8e7      	bhi.n	800c9d0 <__multiply+0xfc>
 800ca00:	9a01      	ldr	r2, [sp, #4]
 800ca02:	50b4      	str	r4, [r6, r2]
 800ca04:	3604      	adds	r6, #4
 800ca06:	e7a3      	b.n	800c950 <__multiply+0x7c>
 800ca08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1a5      	bne.n	800c95c <__multiply+0x88>
 800ca10:	3f01      	subs	r7, #1
 800ca12:	e7a1      	b.n	800c958 <__multiply+0x84>
 800ca14:	0800e47f 	.word	0x0800e47f
 800ca18:	0800e4f0 	.word	0x0800e4f0

0800ca1c <__pow5mult>:
 800ca1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca20:	4615      	mov	r5, r2
 800ca22:	f012 0203 	ands.w	r2, r2, #3
 800ca26:	4606      	mov	r6, r0
 800ca28:	460f      	mov	r7, r1
 800ca2a:	d007      	beq.n	800ca3c <__pow5mult+0x20>
 800ca2c:	4c25      	ldr	r4, [pc, #148]	; (800cac4 <__pow5mult+0xa8>)
 800ca2e:	3a01      	subs	r2, #1
 800ca30:	2300      	movs	r3, #0
 800ca32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ca36:	f7ff fe9f 	bl	800c778 <__multadd>
 800ca3a:	4607      	mov	r7, r0
 800ca3c:	10ad      	asrs	r5, r5, #2
 800ca3e:	d03d      	beq.n	800cabc <__pow5mult+0xa0>
 800ca40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca42:	b97c      	cbnz	r4, 800ca64 <__pow5mult+0x48>
 800ca44:	2010      	movs	r0, #16
 800ca46:	f7ff fe1f 	bl	800c688 <malloc>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	6270      	str	r0, [r6, #36]	; 0x24
 800ca4e:	b928      	cbnz	r0, 800ca5c <__pow5mult+0x40>
 800ca50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca54:	4b1c      	ldr	r3, [pc, #112]	; (800cac8 <__pow5mult+0xac>)
 800ca56:	481d      	ldr	r0, [pc, #116]	; (800cacc <__pow5mult+0xb0>)
 800ca58:	f000 fce4 	bl	800d424 <__assert_func>
 800ca5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca60:	6004      	str	r4, [r0, #0]
 800ca62:	60c4      	str	r4, [r0, #12]
 800ca64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca6c:	b94c      	cbnz	r4, 800ca82 <__pow5mult+0x66>
 800ca6e:	f240 2171 	movw	r1, #625	; 0x271
 800ca72:	4630      	mov	r0, r6
 800ca74:	f7ff ff18 	bl	800c8a8 <__i2b>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca80:	6003      	str	r3, [r0, #0]
 800ca82:	f04f 0900 	mov.w	r9, #0
 800ca86:	07eb      	lsls	r3, r5, #31
 800ca88:	d50a      	bpl.n	800caa0 <__pow5mult+0x84>
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	4622      	mov	r2, r4
 800ca8e:	4630      	mov	r0, r6
 800ca90:	f7ff ff20 	bl	800c8d4 <__multiply>
 800ca94:	4680      	mov	r8, r0
 800ca96:	4639      	mov	r1, r7
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f7ff fe4b 	bl	800c734 <_Bfree>
 800ca9e:	4647      	mov	r7, r8
 800caa0:	106d      	asrs	r5, r5, #1
 800caa2:	d00b      	beq.n	800cabc <__pow5mult+0xa0>
 800caa4:	6820      	ldr	r0, [r4, #0]
 800caa6:	b938      	cbnz	r0, 800cab8 <__pow5mult+0x9c>
 800caa8:	4622      	mov	r2, r4
 800caaa:	4621      	mov	r1, r4
 800caac:	4630      	mov	r0, r6
 800caae:	f7ff ff11 	bl	800c8d4 <__multiply>
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	f8c0 9000 	str.w	r9, [r0]
 800cab8:	4604      	mov	r4, r0
 800caba:	e7e4      	b.n	800ca86 <__pow5mult+0x6a>
 800cabc:	4638      	mov	r0, r7
 800cabe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cac2:	bf00      	nop
 800cac4:	0800e640 	.word	0x0800e640
 800cac8:	0800e409 	.word	0x0800e409
 800cacc:	0800e4f0 	.word	0x0800e4f0

0800cad0 <__lshift>:
 800cad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cad4:	460c      	mov	r4, r1
 800cad6:	4607      	mov	r7, r0
 800cad8:	4691      	mov	r9, r2
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	6849      	ldr	r1, [r1, #4]
 800cade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cae8:	f108 0601 	add.w	r6, r8, #1
 800caec:	42b3      	cmp	r3, r6
 800caee:	db0b      	blt.n	800cb08 <__lshift+0x38>
 800caf0:	4638      	mov	r0, r7
 800caf2:	f7ff fddf 	bl	800c6b4 <_Balloc>
 800caf6:	4605      	mov	r5, r0
 800caf8:	b948      	cbnz	r0, 800cb0e <__lshift+0x3e>
 800cafa:	4602      	mov	r2, r0
 800cafc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cb00:	4b27      	ldr	r3, [pc, #156]	; (800cba0 <__lshift+0xd0>)
 800cb02:	4828      	ldr	r0, [pc, #160]	; (800cba4 <__lshift+0xd4>)
 800cb04:	f000 fc8e 	bl	800d424 <__assert_func>
 800cb08:	3101      	adds	r1, #1
 800cb0a:	005b      	lsls	r3, r3, #1
 800cb0c:	e7ee      	b.n	800caec <__lshift+0x1c>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f100 0114 	add.w	r1, r0, #20
 800cb14:	f100 0210 	add.w	r2, r0, #16
 800cb18:	4618      	mov	r0, r3
 800cb1a:	4553      	cmp	r3, sl
 800cb1c:	db33      	blt.n	800cb86 <__lshift+0xb6>
 800cb1e:	6920      	ldr	r0, [r4, #16]
 800cb20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb24:	f104 0314 	add.w	r3, r4, #20
 800cb28:	f019 091f 	ands.w	r9, r9, #31
 800cb2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cb30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cb34:	d02b      	beq.n	800cb8e <__lshift+0xbe>
 800cb36:	468a      	mov	sl, r1
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f1c9 0e20 	rsb	lr, r9, #32
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	fa00 f009 	lsl.w	r0, r0, r9
 800cb44:	4302      	orrs	r2, r0
 800cb46:	f84a 2b04 	str.w	r2, [sl], #4
 800cb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb4e:	459c      	cmp	ip, r3
 800cb50:	fa22 f20e 	lsr.w	r2, r2, lr
 800cb54:	d8f3      	bhi.n	800cb3e <__lshift+0x6e>
 800cb56:	ebac 0304 	sub.w	r3, ip, r4
 800cb5a:	3b15      	subs	r3, #21
 800cb5c:	f023 0303 	bic.w	r3, r3, #3
 800cb60:	3304      	adds	r3, #4
 800cb62:	f104 0015 	add.w	r0, r4, #21
 800cb66:	4584      	cmp	ip, r0
 800cb68:	bf38      	it	cc
 800cb6a:	2304      	movcc	r3, #4
 800cb6c:	50ca      	str	r2, [r1, r3]
 800cb6e:	b10a      	cbz	r2, 800cb74 <__lshift+0xa4>
 800cb70:	f108 0602 	add.w	r6, r8, #2
 800cb74:	3e01      	subs	r6, #1
 800cb76:	4638      	mov	r0, r7
 800cb78:	4621      	mov	r1, r4
 800cb7a:	612e      	str	r6, [r5, #16]
 800cb7c:	f7ff fdda 	bl	800c734 <_Bfree>
 800cb80:	4628      	mov	r0, r5
 800cb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb86:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	e7c5      	b.n	800cb1a <__lshift+0x4a>
 800cb8e:	3904      	subs	r1, #4
 800cb90:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb94:	459c      	cmp	ip, r3
 800cb96:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb9a:	d8f9      	bhi.n	800cb90 <__lshift+0xc0>
 800cb9c:	e7ea      	b.n	800cb74 <__lshift+0xa4>
 800cb9e:	bf00      	nop
 800cba0:	0800e47f 	.word	0x0800e47f
 800cba4:	0800e4f0 	.word	0x0800e4f0

0800cba8 <__mcmp>:
 800cba8:	4603      	mov	r3, r0
 800cbaa:	690a      	ldr	r2, [r1, #16]
 800cbac:	6900      	ldr	r0, [r0, #16]
 800cbae:	b530      	push	{r4, r5, lr}
 800cbb0:	1a80      	subs	r0, r0, r2
 800cbb2:	d10d      	bne.n	800cbd0 <__mcmp+0x28>
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	3114      	adds	r1, #20
 800cbb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cbbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cbc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cbc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cbc8:	4295      	cmp	r5, r2
 800cbca:	d002      	beq.n	800cbd2 <__mcmp+0x2a>
 800cbcc:	d304      	bcc.n	800cbd8 <__mcmp+0x30>
 800cbce:	2001      	movs	r0, #1
 800cbd0:	bd30      	pop	{r4, r5, pc}
 800cbd2:	42a3      	cmp	r3, r4
 800cbd4:	d3f4      	bcc.n	800cbc0 <__mcmp+0x18>
 800cbd6:	e7fb      	b.n	800cbd0 <__mcmp+0x28>
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800cbdc:	e7f8      	b.n	800cbd0 <__mcmp+0x28>
	...

0800cbe0 <__mdiff>:
 800cbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	4611      	mov	r1, r2
 800cbea:	4620      	mov	r0, r4
 800cbec:	4692      	mov	sl, r2
 800cbee:	f7ff ffdb 	bl	800cba8 <__mcmp>
 800cbf2:	1e05      	subs	r5, r0, #0
 800cbf4:	d111      	bne.n	800cc1a <__mdiff+0x3a>
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f7ff fd5b 	bl	800c6b4 <_Balloc>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	b928      	cbnz	r0, 800cc0e <__mdiff+0x2e>
 800cc02:	f240 2132 	movw	r1, #562	; 0x232
 800cc06:	4b3c      	ldr	r3, [pc, #240]	; (800ccf8 <__mdiff+0x118>)
 800cc08:	483c      	ldr	r0, [pc, #240]	; (800ccfc <__mdiff+0x11c>)
 800cc0a:	f000 fc0b 	bl	800d424 <__assert_func>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc14:	4610      	mov	r0, r2
 800cc16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc1a:	bfa4      	itt	ge
 800cc1c:	4653      	movge	r3, sl
 800cc1e:	46a2      	movge	sl, r4
 800cc20:	4630      	mov	r0, r6
 800cc22:	f8da 1004 	ldr.w	r1, [sl, #4]
 800cc26:	bfa6      	itte	ge
 800cc28:	461c      	movge	r4, r3
 800cc2a:	2500      	movge	r5, #0
 800cc2c:	2501      	movlt	r5, #1
 800cc2e:	f7ff fd41 	bl	800c6b4 <_Balloc>
 800cc32:	4602      	mov	r2, r0
 800cc34:	b918      	cbnz	r0, 800cc3e <__mdiff+0x5e>
 800cc36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc3a:	4b2f      	ldr	r3, [pc, #188]	; (800ccf8 <__mdiff+0x118>)
 800cc3c:	e7e4      	b.n	800cc08 <__mdiff+0x28>
 800cc3e:	f100 0814 	add.w	r8, r0, #20
 800cc42:	f8da 7010 	ldr.w	r7, [sl, #16]
 800cc46:	60c5      	str	r5, [r0, #12]
 800cc48:	f04f 0c00 	mov.w	ip, #0
 800cc4c:	f10a 0514 	add.w	r5, sl, #20
 800cc50:	f10a 0010 	add.w	r0, sl, #16
 800cc54:	46c2      	mov	sl, r8
 800cc56:	6926      	ldr	r6, [r4, #16]
 800cc58:	f104 0914 	add.w	r9, r4, #20
 800cc5c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800cc60:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc64:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800cc68:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc6c:	fa1f f18b 	uxth.w	r1, fp
 800cc70:	4461      	add	r1, ip
 800cc72:	fa1f fc83 	uxth.w	ip, r3
 800cc76:	0c1b      	lsrs	r3, r3, #16
 800cc78:	eba1 010c 	sub.w	r1, r1, ip
 800cc7c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc80:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cc84:	b289      	uxth	r1, r1
 800cc86:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cc8a:	454e      	cmp	r6, r9
 800cc8c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cc90:	f84a 3b04 	str.w	r3, [sl], #4
 800cc94:	d8e6      	bhi.n	800cc64 <__mdiff+0x84>
 800cc96:	1b33      	subs	r3, r6, r4
 800cc98:	3b15      	subs	r3, #21
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	3415      	adds	r4, #21
 800cca0:	3304      	adds	r3, #4
 800cca2:	42a6      	cmp	r6, r4
 800cca4:	bf38      	it	cc
 800cca6:	2304      	movcc	r3, #4
 800cca8:	441d      	add	r5, r3
 800ccaa:	4443      	add	r3, r8
 800ccac:	461e      	mov	r6, r3
 800ccae:	462c      	mov	r4, r5
 800ccb0:	4574      	cmp	r4, lr
 800ccb2:	d30e      	bcc.n	800ccd2 <__mdiff+0xf2>
 800ccb4:	f10e 0103 	add.w	r1, lr, #3
 800ccb8:	1b49      	subs	r1, r1, r5
 800ccba:	f021 0103 	bic.w	r1, r1, #3
 800ccbe:	3d03      	subs	r5, #3
 800ccc0:	45ae      	cmp	lr, r5
 800ccc2:	bf38      	it	cc
 800ccc4:	2100      	movcc	r1, #0
 800ccc6:	4419      	add	r1, r3
 800ccc8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cccc:	b18b      	cbz	r3, 800ccf2 <__mdiff+0x112>
 800ccce:	6117      	str	r7, [r2, #16]
 800ccd0:	e7a0      	b.n	800cc14 <__mdiff+0x34>
 800ccd2:	f854 8b04 	ldr.w	r8, [r4], #4
 800ccd6:	fa1f f188 	uxth.w	r1, r8
 800ccda:	4461      	add	r1, ip
 800ccdc:	1408      	asrs	r0, r1, #16
 800ccde:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800cce2:	b289      	uxth	r1, r1
 800cce4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cce8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ccec:	f846 1b04 	str.w	r1, [r6], #4
 800ccf0:	e7de      	b.n	800ccb0 <__mdiff+0xd0>
 800ccf2:	3f01      	subs	r7, #1
 800ccf4:	e7e8      	b.n	800ccc8 <__mdiff+0xe8>
 800ccf6:	bf00      	nop
 800ccf8:	0800e47f 	.word	0x0800e47f
 800ccfc:	0800e4f0 	.word	0x0800e4f0

0800cd00 <__d2b>:
 800cd00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cd04:	2101      	movs	r1, #1
 800cd06:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cd0a:	4690      	mov	r8, r2
 800cd0c:	461d      	mov	r5, r3
 800cd0e:	f7ff fcd1 	bl	800c6b4 <_Balloc>
 800cd12:	4604      	mov	r4, r0
 800cd14:	b930      	cbnz	r0, 800cd24 <__d2b+0x24>
 800cd16:	4602      	mov	r2, r0
 800cd18:	f240 310a 	movw	r1, #778	; 0x30a
 800cd1c:	4b24      	ldr	r3, [pc, #144]	; (800cdb0 <__d2b+0xb0>)
 800cd1e:	4825      	ldr	r0, [pc, #148]	; (800cdb4 <__d2b+0xb4>)
 800cd20:	f000 fb80 	bl	800d424 <__assert_func>
 800cd24:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cd28:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cd2c:	bb2d      	cbnz	r5, 800cd7a <__d2b+0x7a>
 800cd2e:	9301      	str	r3, [sp, #4]
 800cd30:	f1b8 0300 	subs.w	r3, r8, #0
 800cd34:	d026      	beq.n	800cd84 <__d2b+0x84>
 800cd36:	4668      	mov	r0, sp
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	f7ff fd87 	bl	800c84c <__lo0bits>
 800cd3e:	9900      	ldr	r1, [sp, #0]
 800cd40:	b1f0      	cbz	r0, 800cd80 <__d2b+0x80>
 800cd42:	9a01      	ldr	r2, [sp, #4]
 800cd44:	f1c0 0320 	rsb	r3, r0, #32
 800cd48:	fa02 f303 	lsl.w	r3, r2, r3
 800cd4c:	430b      	orrs	r3, r1
 800cd4e:	40c2      	lsrs	r2, r0
 800cd50:	6163      	str	r3, [r4, #20]
 800cd52:	9201      	str	r2, [sp, #4]
 800cd54:	9b01      	ldr	r3, [sp, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	bf14      	ite	ne
 800cd5a:	2102      	movne	r1, #2
 800cd5c:	2101      	moveq	r1, #1
 800cd5e:	61a3      	str	r3, [r4, #24]
 800cd60:	6121      	str	r1, [r4, #16]
 800cd62:	b1c5      	cbz	r5, 800cd96 <__d2b+0x96>
 800cd64:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd68:	4405      	add	r5, r0
 800cd6a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd6e:	603d      	str	r5, [r7, #0]
 800cd70:	6030      	str	r0, [r6, #0]
 800cd72:	4620      	mov	r0, r4
 800cd74:	b002      	add	sp, #8
 800cd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd7e:	e7d6      	b.n	800cd2e <__d2b+0x2e>
 800cd80:	6161      	str	r1, [r4, #20]
 800cd82:	e7e7      	b.n	800cd54 <__d2b+0x54>
 800cd84:	a801      	add	r0, sp, #4
 800cd86:	f7ff fd61 	bl	800c84c <__lo0bits>
 800cd8a:	2101      	movs	r1, #1
 800cd8c:	9b01      	ldr	r3, [sp, #4]
 800cd8e:	6121      	str	r1, [r4, #16]
 800cd90:	6163      	str	r3, [r4, #20]
 800cd92:	3020      	adds	r0, #32
 800cd94:	e7e5      	b.n	800cd62 <__d2b+0x62>
 800cd96:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cd9a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd9e:	6038      	str	r0, [r7, #0]
 800cda0:	6918      	ldr	r0, [r3, #16]
 800cda2:	f7ff fd33 	bl	800c80c <__hi0bits>
 800cda6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800cdaa:	6031      	str	r1, [r6, #0]
 800cdac:	e7e1      	b.n	800cd72 <__d2b+0x72>
 800cdae:	bf00      	nop
 800cdb0:	0800e47f 	.word	0x0800e47f
 800cdb4:	0800e4f0 	.word	0x0800e4f0

0800cdb8 <_calloc_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	fb02 f501 	mul.w	r5, r2, r1
 800cdbe:	4629      	mov	r1, r5
 800cdc0:	f000 f854 	bl	800ce6c <_malloc_r>
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	b118      	cbz	r0, 800cdd0 <_calloc_r+0x18>
 800cdc8:	462a      	mov	r2, r5
 800cdca:	2100      	movs	r1, #0
 800cdcc:	f7fe f85a 	bl	800ae84 <memset>
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	bd38      	pop	{r3, r4, r5, pc}

0800cdd4 <_free_r>:
 800cdd4:	b538      	push	{r3, r4, r5, lr}
 800cdd6:	4605      	mov	r5, r0
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	d043      	beq.n	800ce64 <_free_r+0x90>
 800cddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde0:	1f0c      	subs	r4, r1, #4
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	bfb8      	it	lt
 800cde6:	18e4      	addlt	r4, r4, r3
 800cde8:	f000 fca6 	bl	800d738 <__malloc_lock>
 800cdec:	4a1e      	ldr	r2, [pc, #120]	; (800ce68 <_free_r+0x94>)
 800cdee:	6813      	ldr	r3, [r2, #0]
 800cdf0:	4610      	mov	r0, r2
 800cdf2:	b933      	cbnz	r3, 800ce02 <_free_r+0x2e>
 800cdf4:	6063      	str	r3, [r4, #4]
 800cdf6:	6014      	str	r4, [r2, #0]
 800cdf8:	4628      	mov	r0, r5
 800cdfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdfe:	f000 bca1 	b.w	800d744 <__malloc_unlock>
 800ce02:	42a3      	cmp	r3, r4
 800ce04:	d90a      	bls.n	800ce1c <_free_r+0x48>
 800ce06:	6821      	ldr	r1, [r4, #0]
 800ce08:	1862      	adds	r2, r4, r1
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	bf01      	itttt	eq
 800ce0e:	681a      	ldreq	r2, [r3, #0]
 800ce10:	685b      	ldreq	r3, [r3, #4]
 800ce12:	1852      	addeq	r2, r2, r1
 800ce14:	6022      	streq	r2, [r4, #0]
 800ce16:	6063      	str	r3, [r4, #4]
 800ce18:	6004      	str	r4, [r0, #0]
 800ce1a:	e7ed      	b.n	800cdf8 <_free_r+0x24>
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	685b      	ldr	r3, [r3, #4]
 800ce20:	b10b      	cbz	r3, 800ce26 <_free_r+0x52>
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	d9fa      	bls.n	800ce1c <_free_r+0x48>
 800ce26:	6811      	ldr	r1, [r2, #0]
 800ce28:	1850      	adds	r0, r2, r1
 800ce2a:	42a0      	cmp	r0, r4
 800ce2c:	d10b      	bne.n	800ce46 <_free_r+0x72>
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	4401      	add	r1, r0
 800ce32:	1850      	adds	r0, r2, r1
 800ce34:	4283      	cmp	r3, r0
 800ce36:	6011      	str	r1, [r2, #0]
 800ce38:	d1de      	bne.n	800cdf8 <_free_r+0x24>
 800ce3a:	6818      	ldr	r0, [r3, #0]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	4401      	add	r1, r0
 800ce40:	6011      	str	r1, [r2, #0]
 800ce42:	6053      	str	r3, [r2, #4]
 800ce44:	e7d8      	b.n	800cdf8 <_free_r+0x24>
 800ce46:	d902      	bls.n	800ce4e <_free_r+0x7a>
 800ce48:	230c      	movs	r3, #12
 800ce4a:	602b      	str	r3, [r5, #0]
 800ce4c:	e7d4      	b.n	800cdf8 <_free_r+0x24>
 800ce4e:	6820      	ldr	r0, [r4, #0]
 800ce50:	1821      	adds	r1, r4, r0
 800ce52:	428b      	cmp	r3, r1
 800ce54:	bf01      	itttt	eq
 800ce56:	6819      	ldreq	r1, [r3, #0]
 800ce58:	685b      	ldreq	r3, [r3, #4]
 800ce5a:	1809      	addeq	r1, r1, r0
 800ce5c:	6021      	streq	r1, [r4, #0]
 800ce5e:	6063      	str	r3, [r4, #4]
 800ce60:	6054      	str	r4, [r2, #4]
 800ce62:	e7c9      	b.n	800cdf8 <_free_r+0x24>
 800ce64:	bd38      	pop	{r3, r4, r5, pc}
 800ce66:	bf00      	nop
 800ce68:	200022c8 	.word	0x200022c8

0800ce6c <_malloc_r>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	1ccd      	adds	r5, r1, #3
 800ce70:	f025 0503 	bic.w	r5, r5, #3
 800ce74:	3508      	adds	r5, #8
 800ce76:	2d0c      	cmp	r5, #12
 800ce78:	bf38      	it	cc
 800ce7a:	250c      	movcc	r5, #12
 800ce7c:	2d00      	cmp	r5, #0
 800ce7e:	4606      	mov	r6, r0
 800ce80:	db01      	blt.n	800ce86 <_malloc_r+0x1a>
 800ce82:	42a9      	cmp	r1, r5
 800ce84:	d903      	bls.n	800ce8e <_malloc_r+0x22>
 800ce86:	230c      	movs	r3, #12
 800ce88:	6033      	str	r3, [r6, #0]
 800ce8a:	2000      	movs	r0, #0
 800ce8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce8e:	f000 fc53 	bl	800d738 <__malloc_lock>
 800ce92:	4921      	ldr	r1, [pc, #132]	; (800cf18 <_malloc_r+0xac>)
 800ce94:	680a      	ldr	r2, [r1, #0]
 800ce96:	4614      	mov	r4, r2
 800ce98:	b99c      	cbnz	r4, 800cec2 <_malloc_r+0x56>
 800ce9a:	4f20      	ldr	r7, [pc, #128]	; (800cf1c <_malloc_r+0xb0>)
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	b923      	cbnz	r3, 800ceaa <_malloc_r+0x3e>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4630      	mov	r0, r6
 800cea4:	f000 f998 	bl	800d1d8 <_sbrk_r>
 800cea8:	6038      	str	r0, [r7, #0]
 800ceaa:	4629      	mov	r1, r5
 800ceac:	4630      	mov	r0, r6
 800ceae:	f000 f993 	bl	800d1d8 <_sbrk_r>
 800ceb2:	1c43      	adds	r3, r0, #1
 800ceb4:	d123      	bne.n	800cefe <_malloc_r+0x92>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	4630      	mov	r0, r6
 800ceba:	6033      	str	r3, [r6, #0]
 800cebc:	f000 fc42 	bl	800d744 <__malloc_unlock>
 800cec0:	e7e3      	b.n	800ce8a <_malloc_r+0x1e>
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	1b5b      	subs	r3, r3, r5
 800cec6:	d417      	bmi.n	800cef8 <_malloc_r+0x8c>
 800cec8:	2b0b      	cmp	r3, #11
 800ceca:	d903      	bls.n	800ced4 <_malloc_r+0x68>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	441c      	add	r4, r3
 800ced0:	6025      	str	r5, [r4, #0]
 800ced2:	e004      	b.n	800cede <_malloc_r+0x72>
 800ced4:	6863      	ldr	r3, [r4, #4]
 800ced6:	42a2      	cmp	r2, r4
 800ced8:	bf0c      	ite	eq
 800ceda:	600b      	streq	r3, [r1, #0]
 800cedc:	6053      	strne	r3, [r2, #4]
 800cede:	4630      	mov	r0, r6
 800cee0:	f000 fc30 	bl	800d744 <__malloc_unlock>
 800cee4:	f104 000b 	add.w	r0, r4, #11
 800cee8:	1d23      	adds	r3, r4, #4
 800ceea:	f020 0007 	bic.w	r0, r0, #7
 800ceee:	1ac2      	subs	r2, r0, r3
 800cef0:	d0cc      	beq.n	800ce8c <_malloc_r+0x20>
 800cef2:	1a1b      	subs	r3, r3, r0
 800cef4:	50a3      	str	r3, [r4, r2]
 800cef6:	e7c9      	b.n	800ce8c <_malloc_r+0x20>
 800cef8:	4622      	mov	r2, r4
 800cefa:	6864      	ldr	r4, [r4, #4]
 800cefc:	e7cc      	b.n	800ce98 <_malloc_r+0x2c>
 800cefe:	1cc4      	adds	r4, r0, #3
 800cf00:	f024 0403 	bic.w	r4, r4, #3
 800cf04:	42a0      	cmp	r0, r4
 800cf06:	d0e3      	beq.n	800ced0 <_malloc_r+0x64>
 800cf08:	1a21      	subs	r1, r4, r0
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f000 f964 	bl	800d1d8 <_sbrk_r>
 800cf10:	3001      	adds	r0, #1
 800cf12:	d1dd      	bne.n	800ced0 <_malloc_r+0x64>
 800cf14:	e7cf      	b.n	800ceb6 <_malloc_r+0x4a>
 800cf16:	bf00      	nop
 800cf18:	200022c8 	.word	0x200022c8
 800cf1c:	200022cc 	.word	0x200022cc

0800cf20 <__ssputs_r>:
 800cf20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf24:	688e      	ldr	r6, [r1, #8]
 800cf26:	4682      	mov	sl, r0
 800cf28:	429e      	cmp	r6, r3
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4690      	mov	r8, r2
 800cf2e:	461f      	mov	r7, r3
 800cf30:	d838      	bhi.n	800cfa4 <__ssputs_r+0x84>
 800cf32:	898a      	ldrh	r2, [r1, #12]
 800cf34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf38:	d032      	beq.n	800cfa0 <__ssputs_r+0x80>
 800cf3a:	6825      	ldr	r5, [r4, #0]
 800cf3c:	6909      	ldr	r1, [r1, #16]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	eba5 0901 	sub.w	r9, r5, r1
 800cf44:	6965      	ldr	r5, [r4, #20]
 800cf46:	444b      	add	r3, r9
 800cf48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf50:	106d      	asrs	r5, r5, #1
 800cf52:	429d      	cmp	r5, r3
 800cf54:	bf38      	it	cc
 800cf56:	461d      	movcc	r5, r3
 800cf58:	0553      	lsls	r3, r2, #21
 800cf5a:	d531      	bpl.n	800cfc0 <__ssputs_r+0xa0>
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	f7ff ff85 	bl	800ce6c <_malloc_r>
 800cf62:	4606      	mov	r6, r0
 800cf64:	b950      	cbnz	r0, 800cf7c <__ssputs_r+0x5c>
 800cf66:	230c      	movs	r3, #12
 800cf68:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6c:	f8ca 3000 	str.w	r3, [sl]
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf76:	81a3      	strh	r3, [r4, #12]
 800cf78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf7c:	464a      	mov	r2, r9
 800cf7e:	6921      	ldr	r1, [r4, #16]
 800cf80:	f7fd ff58 	bl	800ae34 <memcpy>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf8e:	81a3      	strh	r3, [r4, #12]
 800cf90:	6126      	str	r6, [r4, #16]
 800cf92:	444e      	add	r6, r9
 800cf94:	6026      	str	r6, [r4, #0]
 800cf96:	463e      	mov	r6, r7
 800cf98:	6165      	str	r5, [r4, #20]
 800cf9a:	eba5 0509 	sub.w	r5, r5, r9
 800cf9e:	60a5      	str	r5, [r4, #8]
 800cfa0:	42be      	cmp	r6, r7
 800cfa2:	d900      	bls.n	800cfa6 <__ssputs_r+0x86>
 800cfa4:	463e      	mov	r6, r7
 800cfa6:	4632      	mov	r2, r6
 800cfa8:	4641      	mov	r1, r8
 800cfaa:	6820      	ldr	r0, [r4, #0]
 800cfac:	f7fd ff50 	bl	800ae50 <memmove>
 800cfb0:	68a3      	ldr	r3, [r4, #8]
 800cfb2:	6822      	ldr	r2, [r4, #0]
 800cfb4:	1b9b      	subs	r3, r3, r6
 800cfb6:	4432      	add	r2, r6
 800cfb8:	2000      	movs	r0, #0
 800cfba:	60a3      	str	r3, [r4, #8]
 800cfbc:	6022      	str	r2, [r4, #0]
 800cfbe:	e7db      	b.n	800cf78 <__ssputs_r+0x58>
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	f000 fbc5 	bl	800d750 <_realloc_r>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d1e1      	bne.n	800cf90 <__ssputs_r+0x70>
 800cfcc:	4650      	mov	r0, sl
 800cfce:	6921      	ldr	r1, [r4, #16]
 800cfd0:	f7ff ff00 	bl	800cdd4 <_free_r>
 800cfd4:	e7c7      	b.n	800cf66 <__ssputs_r+0x46>
	...

0800cfd8 <_svfiprintf_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	4698      	mov	r8, r3
 800cfde:	898b      	ldrh	r3, [r1, #12]
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	061b      	lsls	r3, r3, #24
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	b09d      	sub	sp, #116	; 0x74
 800cfea:	d50e      	bpl.n	800d00a <_svfiprintf_r+0x32>
 800cfec:	690b      	ldr	r3, [r1, #16]
 800cfee:	b963      	cbnz	r3, 800d00a <_svfiprintf_r+0x32>
 800cff0:	2140      	movs	r1, #64	; 0x40
 800cff2:	f7ff ff3b 	bl	800ce6c <_malloc_r>
 800cff6:	6028      	str	r0, [r5, #0]
 800cff8:	6128      	str	r0, [r5, #16]
 800cffa:	b920      	cbnz	r0, 800d006 <_svfiprintf_r+0x2e>
 800cffc:	230c      	movs	r3, #12
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e0d1      	b.n	800d1aa <_svfiprintf_r+0x1d2>
 800d006:	2340      	movs	r3, #64	; 0x40
 800d008:	616b      	str	r3, [r5, #20]
 800d00a:	2300      	movs	r3, #0
 800d00c:	9309      	str	r3, [sp, #36]	; 0x24
 800d00e:	2320      	movs	r3, #32
 800d010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d014:	2330      	movs	r3, #48	; 0x30
 800d016:	f04f 0901 	mov.w	r9, #1
 800d01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d01e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1c4 <_svfiprintf_r+0x1ec>
 800d022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d026:	4623      	mov	r3, r4
 800d028:	469a      	mov	sl, r3
 800d02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d02e:	b10a      	cbz	r2, 800d034 <_svfiprintf_r+0x5c>
 800d030:	2a25      	cmp	r2, #37	; 0x25
 800d032:	d1f9      	bne.n	800d028 <_svfiprintf_r+0x50>
 800d034:	ebba 0b04 	subs.w	fp, sl, r4
 800d038:	d00b      	beq.n	800d052 <_svfiprintf_r+0x7a>
 800d03a:	465b      	mov	r3, fp
 800d03c:	4622      	mov	r2, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ff6d 	bl	800cf20 <__ssputs_r>
 800d046:	3001      	adds	r0, #1
 800d048:	f000 80aa 	beq.w	800d1a0 <_svfiprintf_r+0x1c8>
 800d04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04e:	445a      	add	r2, fp
 800d050:	9209      	str	r2, [sp, #36]	; 0x24
 800d052:	f89a 3000 	ldrb.w	r3, [sl]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80a2 	beq.w	800d1a0 <_svfiprintf_r+0x1c8>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d066:	f10a 0a01 	add.w	sl, sl, #1
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	9307      	str	r3, [sp, #28]
 800d06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d072:	931a      	str	r3, [sp, #104]	; 0x68
 800d074:	4654      	mov	r4, sl
 800d076:	2205      	movs	r2, #5
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	4851      	ldr	r0, [pc, #324]	; (800d1c4 <_svfiprintf_r+0x1ec>)
 800d07e:	f7ff fb0b 	bl	800c698 <memchr>
 800d082:	9a04      	ldr	r2, [sp, #16]
 800d084:	b9d8      	cbnz	r0, 800d0be <_svfiprintf_r+0xe6>
 800d086:	06d0      	lsls	r0, r2, #27
 800d088:	bf44      	itt	mi
 800d08a:	2320      	movmi	r3, #32
 800d08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d090:	0711      	lsls	r1, r2, #28
 800d092:	bf44      	itt	mi
 800d094:	232b      	movmi	r3, #43	; 0x2b
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09a:	f89a 3000 	ldrb.w	r3, [sl]
 800d09e:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a0:	d015      	beq.n	800d0ce <_svfiprintf_r+0xf6>
 800d0a2:	4654      	mov	r4, sl
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	f04f 0c0a 	mov.w	ip, #10
 800d0aa:	9a07      	ldr	r2, [sp, #28]
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b2:	3b30      	subs	r3, #48	; 0x30
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	d94e      	bls.n	800d156 <_svfiprintf_r+0x17e>
 800d0b8:	b1b0      	cbz	r0, 800d0e8 <_svfiprintf_r+0x110>
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	e014      	b.n	800d0e8 <_svfiprintf_r+0x110>
 800d0be:	eba0 0308 	sub.w	r3, r0, r8
 800d0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	46a2      	mov	sl, r4
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	e7d2      	b.n	800d074 <_svfiprintf_r+0x9c>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	1d19      	adds	r1, r3, #4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	9103      	str	r1, [sp, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	bfbb      	ittet	lt
 800d0da:	425b      	neglt	r3, r3
 800d0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d0e0:	9307      	strge	r3, [sp, #28]
 800d0e2:	9307      	strlt	r3, [sp, #28]
 800d0e4:	bfb8      	it	lt
 800d0e6:	9204      	strlt	r2, [sp, #16]
 800d0e8:	7823      	ldrb	r3, [r4, #0]
 800d0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ec:	d10c      	bne.n	800d108 <_svfiprintf_r+0x130>
 800d0ee:	7863      	ldrb	r3, [r4, #1]
 800d0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f2:	d135      	bne.n	800d160 <_svfiprintf_r+0x188>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	3402      	adds	r4, #2
 800d0f8:	1d1a      	adds	r2, r3, #4
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	9203      	str	r2, [sp, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	bfb8      	it	lt
 800d102:	f04f 33ff 	movlt.w	r3, #4294967295
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1d4 <_svfiprintf_r+0x1fc>
 800d10c:	2203      	movs	r2, #3
 800d10e:	4650      	mov	r0, sl
 800d110:	7821      	ldrb	r1, [r4, #0]
 800d112:	f7ff fac1 	bl	800c698 <memchr>
 800d116:	b140      	cbz	r0, 800d12a <_svfiprintf_r+0x152>
 800d118:	2340      	movs	r3, #64	; 0x40
 800d11a:	eba0 000a 	sub.w	r0, r0, sl
 800d11e:	fa03 f000 	lsl.w	r0, r3, r0
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	3401      	adds	r4, #1
 800d126:	4303      	orrs	r3, r0
 800d128:	9304      	str	r3, [sp, #16]
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	2206      	movs	r2, #6
 800d130:	4825      	ldr	r0, [pc, #148]	; (800d1c8 <_svfiprintf_r+0x1f0>)
 800d132:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d136:	f7ff faaf 	bl	800c698 <memchr>
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d038      	beq.n	800d1b0 <_svfiprintf_r+0x1d8>
 800d13e:	4b23      	ldr	r3, [pc, #140]	; (800d1cc <_svfiprintf_r+0x1f4>)
 800d140:	bb1b      	cbnz	r3, 800d18a <_svfiprintf_r+0x1b2>
 800d142:	9b03      	ldr	r3, [sp, #12]
 800d144:	3307      	adds	r3, #7
 800d146:	f023 0307 	bic.w	r3, r3, #7
 800d14a:	3308      	adds	r3, #8
 800d14c:	9303      	str	r3, [sp, #12]
 800d14e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d150:	4433      	add	r3, r6
 800d152:	9309      	str	r3, [sp, #36]	; 0x24
 800d154:	e767      	b.n	800d026 <_svfiprintf_r+0x4e>
 800d156:	460c      	mov	r4, r1
 800d158:	2001      	movs	r0, #1
 800d15a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d15e:	e7a5      	b.n	800d0ac <_svfiprintf_r+0xd4>
 800d160:	2300      	movs	r3, #0
 800d162:	f04f 0c0a 	mov.w	ip, #10
 800d166:	4619      	mov	r1, r3
 800d168:	3401      	adds	r4, #1
 800d16a:	9305      	str	r3, [sp, #20]
 800d16c:	4620      	mov	r0, r4
 800d16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d172:	3a30      	subs	r2, #48	; 0x30
 800d174:	2a09      	cmp	r2, #9
 800d176:	d903      	bls.n	800d180 <_svfiprintf_r+0x1a8>
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d0c5      	beq.n	800d108 <_svfiprintf_r+0x130>
 800d17c:	9105      	str	r1, [sp, #20]
 800d17e:	e7c3      	b.n	800d108 <_svfiprintf_r+0x130>
 800d180:	4604      	mov	r4, r0
 800d182:	2301      	movs	r3, #1
 800d184:	fb0c 2101 	mla	r1, ip, r1, r2
 800d188:	e7f0      	b.n	800d16c <_svfiprintf_r+0x194>
 800d18a:	ab03      	add	r3, sp, #12
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	462a      	mov	r2, r5
 800d190:	4638      	mov	r0, r7
 800d192:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <_svfiprintf_r+0x1f8>)
 800d194:	a904      	add	r1, sp, #16
 800d196:	f7fd ff1b 	bl	800afd0 <_printf_float>
 800d19a:	1c42      	adds	r2, r0, #1
 800d19c:	4606      	mov	r6, r0
 800d19e:	d1d6      	bne.n	800d14e <_svfiprintf_r+0x176>
 800d1a0:	89ab      	ldrh	r3, [r5, #12]
 800d1a2:	065b      	lsls	r3, r3, #25
 800d1a4:	f53f af2c 	bmi.w	800d000 <_svfiprintf_r+0x28>
 800d1a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1aa:	b01d      	add	sp, #116	; 0x74
 800d1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	462a      	mov	r2, r5
 800d1b6:	4638      	mov	r0, r7
 800d1b8:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <_svfiprintf_r+0x1f8>)
 800d1ba:	a904      	add	r1, sp, #16
 800d1bc:	f7fe f9a4 	bl	800b508 <_printf_i>
 800d1c0:	e7eb      	b.n	800d19a <_svfiprintf_r+0x1c2>
 800d1c2:	bf00      	nop
 800d1c4:	0800e64c 	.word	0x0800e64c
 800d1c8:	0800e656 	.word	0x0800e656
 800d1cc:	0800afd1 	.word	0x0800afd1
 800d1d0:	0800cf21 	.word	0x0800cf21
 800d1d4:	0800e652 	.word	0x0800e652

0800d1d8 <_sbrk_r>:
 800d1d8:	b538      	push	{r3, r4, r5, lr}
 800d1da:	2300      	movs	r3, #0
 800d1dc:	4d05      	ldr	r5, [pc, #20]	; (800d1f4 <_sbrk_r+0x1c>)
 800d1de:	4604      	mov	r4, r0
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	602b      	str	r3, [r5, #0]
 800d1e4:	f7f4 feb4 	bl	8001f50 <_sbrk>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_sbrk_r+0x1a>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_sbrk_r+0x1a>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	2000379c 	.word	0x2000379c

0800d1f8 <__sread>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	f000 fc24 	bl	800da4c <_read_r>
 800d204:	2800      	cmp	r0, #0
 800d206:	bfab      	itete	ge
 800d208:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d20a:	89a3      	ldrhlt	r3, [r4, #12]
 800d20c:	181b      	addge	r3, r3, r0
 800d20e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d212:	bfac      	ite	ge
 800d214:	6563      	strge	r3, [r4, #84]	; 0x54
 800d216:	81a3      	strhlt	r3, [r4, #12]
 800d218:	bd10      	pop	{r4, pc}

0800d21a <__swrite>:
 800d21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	461f      	mov	r7, r3
 800d220:	898b      	ldrh	r3, [r1, #12]
 800d222:	4605      	mov	r5, r0
 800d224:	05db      	lsls	r3, r3, #23
 800d226:	460c      	mov	r4, r1
 800d228:	4616      	mov	r6, r2
 800d22a:	d505      	bpl.n	800d238 <__swrite+0x1e>
 800d22c:	2302      	movs	r3, #2
 800d22e:	2200      	movs	r2, #0
 800d230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d234:	f000 f9f8 	bl	800d628 <_lseek_r>
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	4632      	mov	r2, r6
 800d23c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	4628      	mov	r0, r5
 800d244:	463b      	mov	r3, r7
 800d246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d24a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	f000 b869 	b.w	800d324 <_write_r>

0800d252 <__sseek>:
 800d252:	b510      	push	{r4, lr}
 800d254:	460c      	mov	r4, r1
 800d256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25a:	f000 f9e5 	bl	800d628 <_lseek_r>
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	bf15      	itete	ne
 800d264:	6560      	strne	r0, [r4, #84]	; 0x54
 800d266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d26a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d26e:	81a3      	strheq	r3, [r4, #12]
 800d270:	bf18      	it	ne
 800d272:	81a3      	strhne	r3, [r4, #12]
 800d274:	bd10      	pop	{r4, pc}

0800d276 <__sclose>:
 800d276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27a:	f000 b8f1 	b.w	800d460 <_close_r>
	...

0800d280 <__swbuf_r>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	460e      	mov	r6, r1
 800d284:	4614      	mov	r4, r2
 800d286:	4605      	mov	r5, r0
 800d288:	b118      	cbz	r0, 800d292 <__swbuf_r+0x12>
 800d28a:	6983      	ldr	r3, [r0, #24]
 800d28c:	b90b      	cbnz	r3, 800d292 <__swbuf_r+0x12>
 800d28e:	f7ff f955 	bl	800c53c <__sinit>
 800d292:	4b21      	ldr	r3, [pc, #132]	; (800d318 <__swbuf_r+0x98>)
 800d294:	429c      	cmp	r4, r3
 800d296:	d12b      	bne.n	800d2f0 <__swbuf_r+0x70>
 800d298:	686c      	ldr	r4, [r5, #4]
 800d29a:	69a3      	ldr	r3, [r4, #24]
 800d29c:	60a3      	str	r3, [r4, #8]
 800d29e:	89a3      	ldrh	r3, [r4, #12]
 800d2a0:	071a      	lsls	r2, r3, #28
 800d2a2:	d52f      	bpl.n	800d304 <__swbuf_r+0x84>
 800d2a4:	6923      	ldr	r3, [r4, #16]
 800d2a6:	b36b      	cbz	r3, 800d304 <__swbuf_r+0x84>
 800d2a8:	6923      	ldr	r3, [r4, #16]
 800d2aa:	6820      	ldr	r0, [r4, #0]
 800d2ac:	b2f6      	uxtb	r6, r6
 800d2ae:	1ac0      	subs	r0, r0, r3
 800d2b0:	6963      	ldr	r3, [r4, #20]
 800d2b2:	4637      	mov	r7, r6
 800d2b4:	4283      	cmp	r3, r0
 800d2b6:	dc04      	bgt.n	800d2c2 <__swbuf_r+0x42>
 800d2b8:	4621      	mov	r1, r4
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f000 f966 	bl	800d58c <_fflush_r>
 800d2c0:	bb30      	cbnz	r0, 800d310 <__swbuf_r+0x90>
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	60a3      	str	r3, [r4, #8]
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	1c5a      	adds	r2, r3, #1
 800d2ce:	6022      	str	r2, [r4, #0]
 800d2d0:	701e      	strb	r6, [r3, #0]
 800d2d2:	6963      	ldr	r3, [r4, #20]
 800d2d4:	4283      	cmp	r3, r0
 800d2d6:	d004      	beq.n	800d2e2 <__swbuf_r+0x62>
 800d2d8:	89a3      	ldrh	r3, [r4, #12]
 800d2da:	07db      	lsls	r3, r3, #31
 800d2dc:	d506      	bpl.n	800d2ec <__swbuf_r+0x6c>
 800d2de:	2e0a      	cmp	r6, #10
 800d2e0:	d104      	bne.n	800d2ec <__swbuf_r+0x6c>
 800d2e2:	4621      	mov	r1, r4
 800d2e4:	4628      	mov	r0, r5
 800d2e6:	f000 f951 	bl	800d58c <_fflush_r>
 800d2ea:	b988      	cbnz	r0, 800d310 <__swbuf_r+0x90>
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2f0:	4b0a      	ldr	r3, [pc, #40]	; (800d31c <__swbuf_r+0x9c>)
 800d2f2:	429c      	cmp	r4, r3
 800d2f4:	d101      	bne.n	800d2fa <__swbuf_r+0x7a>
 800d2f6:	68ac      	ldr	r4, [r5, #8]
 800d2f8:	e7cf      	b.n	800d29a <__swbuf_r+0x1a>
 800d2fa:	4b09      	ldr	r3, [pc, #36]	; (800d320 <__swbuf_r+0xa0>)
 800d2fc:	429c      	cmp	r4, r3
 800d2fe:	bf08      	it	eq
 800d300:	68ec      	ldreq	r4, [r5, #12]
 800d302:	e7ca      	b.n	800d29a <__swbuf_r+0x1a>
 800d304:	4621      	mov	r1, r4
 800d306:	4628      	mov	r0, r5
 800d308:	f000 f81e 	bl	800d348 <__swsetup_r>
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d0cb      	beq.n	800d2a8 <__swbuf_r+0x28>
 800d310:	f04f 37ff 	mov.w	r7, #4294967295
 800d314:	e7ea      	b.n	800d2ec <__swbuf_r+0x6c>
 800d316:	bf00      	nop
 800d318:	0800e4b0 	.word	0x0800e4b0
 800d31c:	0800e4d0 	.word	0x0800e4d0
 800d320:	0800e490 	.word	0x0800e490

0800d324 <_write_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4604      	mov	r4, r0
 800d328:	4608      	mov	r0, r1
 800d32a:	4611      	mov	r1, r2
 800d32c:	2200      	movs	r2, #0
 800d32e:	4d05      	ldr	r5, [pc, #20]	; (800d344 <_write_r+0x20>)
 800d330:	602a      	str	r2, [r5, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	f7f4 fdf2 	bl	8001f1c <_write>
 800d338:	1c43      	adds	r3, r0, #1
 800d33a:	d102      	bne.n	800d342 <_write_r+0x1e>
 800d33c:	682b      	ldr	r3, [r5, #0]
 800d33e:	b103      	cbz	r3, 800d342 <_write_r+0x1e>
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	bd38      	pop	{r3, r4, r5, pc}
 800d344:	2000379c 	.word	0x2000379c

0800d348 <__swsetup_r>:
 800d348:	4b32      	ldr	r3, [pc, #200]	; (800d414 <__swsetup_r+0xcc>)
 800d34a:	b570      	push	{r4, r5, r6, lr}
 800d34c:	681d      	ldr	r5, [r3, #0]
 800d34e:	4606      	mov	r6, r0
 800d350:	460c      	mov	r4, r1
 800d352:	b125      	cbz	r5, 800d35e <__swsetup_r+0x16>
 800d354:	69ab      	ldr	r3, [r5, #24]
 800d356:	b913      	cbnz	r3, 800d35e <__swsetup_r+0x16>
 800d358:	4628      	mov	r0, r5
 800d35a:	f7ff f8ef 	bl	800c53c <__sinit>
 800d35e:	4b2e      	ldr	r3, [pc, #184]	; (800d418 <__swsetup_r+0xd0>)
 800d360:	429c      	cmp	r4, r3
 800d362:	d10f      	bne.n	800d384 <__swsetup_r+0x3c>
 800d364:	686c      	ldr	r4, [r5, #4]
 800d366:	89a3      	ldrh	r3, [r4, #12]
 800d368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d36c:	0719      	lsls	r1, r3, #28
 800d36e:	d42c      	bmi.n	800d3ca <__swsetup_r+0x82>
 800d370:	06dd      	lsls	r5, r3, #27
 800d372:	d411      	bmi.n	800d398 <__swsetup_r+0x50>
 800d374:	2309      	movs	r3, #9
 800d376:	6033      	str	r3, [r6, #0]
 800d378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d37c:	f04f 30ff 	mov.w	r0, #4294967295
 800d380:	81a3      	strh	r3, [r4, #12]
 800d382:	e03e      	b.n	800d402 <__swsetup_r+0xba>
 800d384:	4b25      	ldr	r3, [pc, #148]	; (800d41c <__swsetup_r+0xd4>)
 800d386:	429c      	cmp	r4, r3
 800d388:	d101      	bne.n	800d38e <__swsetup_r+0x46>
 800d38a:	68ac      	ldr	r4, [r5, #8]
 800d38c:	e7eb      	b.n	800d366 <__swsetup_r+0x1e>
 800d38e:	4b24      	ldr	r3, [pc, #144]	; (800d420 <__swsetup_r+0xd8>)
 800d390:	429c      	cmp	r4, r3
 800d392:	bf08      	it	eq
 800d394:	68ec      	ldreq	r4, [r5, #12]
 800d396:	e7e6      	b.n	800d366 <__swsetup_r+0x1e>
 800d398:	0758      	lsls	r0, r3, #29
 800d39a:	d512      	bpl.n	800d3c2 <__swsetup_r+0x7a>
 800d39c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d39e:	b141      	cbz	r1, 800d3b2 <__swsetup_r+0x6a>
 800d3a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3a4:	4299      	cmp	r1, r3
 800d3a6:	d002      	beq.n	800d3ae <__swsetup_r+0x66>
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f7ff fd13 	bl	800cdd4 <_free_r>
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	6363      	str	r3, [r4, #52]	; 0x34
 800d3b2:	89a3      	ldrh	r3, [r4, #12]
 800d3b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3b8:	81a3      	strh	r3, [r4, #12]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	6063      	str	r3, [r4, #4]
 800d3be:	6923      	ldr	r3, [r4, #16]
 800d3c0:	6023      	str	r3, [r4, #0]
 800d3c2:	89a3      	ldrh	r3, [r4, #12]
 800d3c4:	f043 0308 	orr.w	r3, r3, #8
 800d3c8:	81a3      	strh	r3, [r4, #12]
 800d3ca:	6923      	ldr	r3, [r4, #16]
 800d3cc:	b94b      	cbnz	r3, 800d3e2 <__swsetup_r+0x9a>
 800d3ce:	89a3      	ldrh	r3, [r4, #12]
 800d3d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d3d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3d8:	d003      	beq.n	800d3e2 <__swsetup_r+0x9a>
 800d3da:	4621      	mov	r1, r4
 800d3dc:	4630      	mov	r0, r6
 800d3de:	f000 f959 	bl	800d694 <__smakebuf_r>
 800d3e2:	89a0      	ldrh	r0, [r4, #12]
 800d3e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3e8:	f010 0301 	ands.w	r3, r0, #1
 800d3ec:	d00a      	beq.n	800d404 <__swsetup_r+0xbc>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	60a3      	str	r3, [r4, #8]
 800d3f2:	6963      	ldr	r3, [r4, #20]
 800d3f4:	425b      	negs	r3, r3
 800d3f6:	61a3      	str	r3, [r4, #24]
 800d3f8:	6923      	ldr	r3, [r4, #16]
 800d3fa:	b943      	cbnz	r3, 800d40e <__swsetup_r+0xc6>
 800d3fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d400:	d1ba      	bne.n	800d378 <__swsetup_r+0x30>
 800d402:	bd70      	pop	{r4, r5, r6, pc}
 800d404:	0781      	lsls	r1, r0, #30
 800d406:	bf58      	it	pl
 800d408:	6963      	ldrpl	r3, [r4, #20]
 800d40a:	60a3      	str	r3, [r4, #8]
 800d40c:	e7f4      	b.n	800d3f8 <__swsetup_r+0xb0>
 800d40e:	2000      	movs	r0, #0
 800d410:	e7f7      	b.n	800d402 <__swsetup_r+0xba>
 800d412:	bf00      	nop
 800d414:	20000188 	.word	0x20000188
 800d418:	0800e4b0 	.word	0x0800e4b0
 800d41c:	0800e4d0 	.word	0x0800e4d0
 800d420:	0800e490 	.word	0x0800e490

0800d424 <__assert_func>:
 800d424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d426:	4614      	mov	r4, r2
 800d428:	461a      	mov	r2, r3
 800d42a:	4b09      	ldr	r3, [pc, #36]	; (800d450 <__assert_func+0x2c>)
 800d42c:	4605      	mov	r5, r0
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68d8      	ldr	r0, [r3, #12]
 800d432:	b14c      	cbz	r4, 800d448 <__assert_func+0x24>
 800d434:	4b07      	ldr	r3, [pc, #28]	; (800d454 <__assert_func+0x30>)
 800d436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d43a:	9100      	str	r1, [sp, #0]
 800d43c:	462b      	mov	r3, r5
 800d43e:	4906      	ldr	r1, [pc, #24]	; (800d458 <__assert_func+0x34>)
 800d440:	f000 f8e0 	bl	800d604 <fiprintf>
 800d444:	f000 fb21 	bl	800da8a <abort>
 800d448:	4b04      	ldr	r3, [pc, #16]	; (800d45c <__assert_func+0x38>)
 800d44a:	461c      	mov	r4, r3
 800d44c:	e7f3      	b.n	800d436 <__assert_func+0x12>
 800d44e:	bf00      	nop
 800d450:	20000188 	.word	0x20000188
 800d454:	0800e65d 	.word	0x0800e65d
 800d458:	0800e66a 	.word	0x0800e66a
 800d45c:	0800e698 	.word	0x0800e698

0800d460 <_close_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	2300      	movs	r3, #0
 800d464:	4d05      	ldr	r5, [pc, #20]	; (800d47c <_close_r+0x1c>)
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f4 fd64 	bl	8001f38 <_close>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_close_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_close_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	2000379c 	.word	0x2000379c

0800d480 <__sflush_r>:
 800d480:	898a      	ldrh	r2, [r1, #12]
 800d482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d486:	4605      	mov	r5, r0
 800d488:	0710      	lsls	r0, r2, #28
 800d48a:	460c      	mov	r4, r1
 800d48c:	d458      	bmi.n	800d540 <__sflush_r+0xc0>
 800d48e:	684b      	ldr	r3, [r1, #4]
 800d490:	2b00      	cmp	r3, #0
 800d492:	dc05      	bgt.n	800d4a0 <__sflush_r+0x20>
 800d494:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	dc02      	bgt.n	800d4a0 <__sflush_r+0x20>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	d0f9      	beq.n	800d49a <__sflush_r+0x1a>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d4ac:	682f      	ldr	r7, [r5, #0]
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	d032      	beq.n	800d518 <__sflush_r+0x98>
 800d4b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	075a      	lsls	r2, r3, #29
 800d4b8:	d505      	bpl.n	800d4c6 <__sflush_r+0x46>
 800d4ba:	6863      	ldr	r3, [r4, #4]
 800d4bc:	1ac0      	subs	r0, r0, r3
 800d4be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4c0:	b10b      	cbz	r3, 800d4c6 <__sflush_r+0x46>
 800d4c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4c4:	1ac0      	subs	r0, r0, r3
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	6a21      	ldr	r1, [r4, #32]
 800d4d0:	47b0      	blx	r6
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	d106      	bne.n	800d4e6 <__sflush_r+0x66>
 800d4d8:	6829      	ldr	r1, [r5, #0]
 800d4da:	291d      	cmp	r1, #29
 800d4dc:	d82c      	bhi.n	800d538 <__sflush_r+0xb8>
 800d4de:	4a2a      	ldr	r2, [pc, #168]	; (800d588 <__sflush_r+0x108>)
 800d4e0:	40ca      	lsrs	r2, r1
 800d4e2:	07d6      	lsls	r6, r2, #31
 800d4e4:	d528      	bpl.n	800d538 <__sflush_r+0xb8>
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	6062      	str	r2, [r4, #4]
 800d4ea:	6922      	ldr	r2, [r4, #16]
 800d4ec:	04d9      	lsls	r1, r3, #19
 800d4ee:	6022      	str	r2, [r4, #0]
 800d4f0:	d504      	bpl.n	800d4fc <__sflush_r+0x7c>
 800d4f2:	1c42      	adds	r2, r0, #1
 800d4f4:	d101      	bne.n	800d4fa <__sflush_r+0x7a>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b903      	cbnz	r3, 800d4fc <__sflush_r+0x7c>
 800d4fa:	6560      	str	r0, [r4, #84]	; 0x54
 800d4fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4fe:	602f      	str	r7, [r5, #0]
 800d500:	2900      	cmp	r1, #0
 800d502:	d0ca      	beq.n	800d49a <__sflush_r+0x1a>
 800d504:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d508:	4299      	cmp	r1, r3
 800d50a:	d002      	beq.n	800d512 <__sflush_r+0x92>
 800d50c:	4628      	mov	r0, r5
 800d50e:	f7ff fc61 	bl	800cdd4 <_free_r>
 800d512:	2000      	movs	r0, #0
 800d514:	6360      	str	r0, [r4, #52]	; 0x34
 800d516:	e7c1      	b.n	800d49c <__sflush_r+0x1c>
 800d518:	6a21      	ldr	r1, [r4, #32]
 800d51a:	2301      	movs	r3, #1
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b0      	blx	r6
 800d520:	1c41      	adds	r1, r0, #1
 800d522:	d1c7      	bne.n	800d4b4 <__sflush_r+0x34>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0c4      	beq.n	800d4b4 <__sflush_r+0x34>
 800d52a:	2b1d      	cmp	r3, #29
 800d52c:	d001      	beq.n	800d532 <__sflush_r+0xb2>
 800d52e:	2b16      	cmp	r3, #22
 800d530:	d101      	bne.n	800d536 <__sflush_r+0xb6>
 800d532:	602f      	str	r7, [r5, #0]
 800d534:	e7b1      	b.n	800d49a <__sflush_r+0x1a>
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d53c:	81a3      	strh	r3, [r4, #12]
 800d53e:	e7ad      	b.n	800d49c <__sflush_r+0x1c>
 800d540:	690f      	ldr	r7, [r1, #16]
 800d542:	2f00      	cmp	r7, #0
 800d544:	d0a9      	beq.n	800d49a <__sflush_r+0x1a>
 800d546:	0793      	lsls	r3, r2, #30
 800d548:	bf18      	it	ne
 800d54a:	2300      	movne	r3, #0
 800d54c:	680e      	ldr	r6, [r1, #0]
 800d54e:	bf08      	it	eq
 800d550:	694b      	ldreq	r3, [r1, #20]
 800d552:	eba6 0807 	sub.w	r8, r6, r7
 800d556:	600f      	str	r7, [r1, #0]
 800d558:	608b      	str	r3, [r1, #8]
 800d55a:	f1b8 0f00 	cmp.w	r8, #0
 800d55e:	dd9c      	ble.n	800d49a <__sflush_r+0x1a>
 800d560:	4643      	mov	r3, r8
 800d562:	463a      	mov	r2, r7
 800d564:	4628      	mov	r0, r5
 800d566:	6a21      	ldr	r1, [r4, #32]
 800d568:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d56a:	47b0      	blx	r6
 800d56c:	2800      	cmp	r0, #0
 800d56e:	dc06      	bgt.n	800d57e <__sflush_r+0xfe>
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	f04f 30ff 	mov.w	r0, #4294967295
 800d576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d57a:	81a3      	strh	r3, [r4, #12]
 800d57c:	e78e      	b.n	800d49c <__sflush_r+0x1c>
 800d57e:	4407      	add	r7, r0
 800d580:	eba8 0800 	sub.w	r8, r8, r0
 800d584:	e7e9      	b.n	800d55a <__sflush_r+0xda>
 800d586:	bf00      	nop
 800d588:	20400001 	.word	0x20400001

0800d58c <_fflush_r>:
 800d58c:	b538      	push	{r3, r4, r5, lr}
 800d58e:	690b      	ldr	r3, [r1, #16]
 800d590:	4605      	mov	r5, r0
 800d592:	460c      	mov	r4, r1
 800d594:	b913      	cbnz	r3, 800d59c <_fflush_r+0x10>
 800d596:	2500      	movs	r5, #0
 800d598:	4628      	mov	r0, r5
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	b118      	cbz	r0, 800d5a6 <_fflush_r+0x1a>
 800d59e:	6983      	ldr	r3, [r0, #24]
 800d5a0:	b90b      	cbnz	r3, 800d5a6 <_fflush_r+0x1a>
 800d5a2:	f7fe ffcb 	bl	800c53c <__sinit>
 800d5a6:	4b14      	ldr	r3, [pc, #80]	; (800d5f8 <_fflush_r+0x6c>)
 800d5a8:	429c      	cmp	r4, r3
 800d5aa:	d11b      	bne.n	800d5e4 <_fflush_r+0x58>
 800d5ac:	686c      	ldr	r4, [r5, #4]
 800d5ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0ef      	beq.n	800d596 <_fflush_r+0xa>
 800d5b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d5b8:	07d0      	lsls	r0, r2, #31
 800d5ba:	d404      	bmi.n	800d5c6 <_fflush_r+0x3a>
 800d5bc:	0599      	lsls	r1, r3, #22
 800d5be:	d402      	bmi.n	800d5c6 <_fflush_r+0x3a>
 800d5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5c2:	f7ff f85e 	bl	800c682 <__retarget_lock_acquire_recursive>
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	4621      	mov	r1, r4
 800d5ca:	f7ff ff59 	bl	800d480 <__sflush_r>
 800d5ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	07da      	lsls	r2, r3, #31
 800d5d4:	d4e0      	bmi.n	800d598 <_fflush_r+0xc>
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	059b      	lsls	r3, r3, #22
 800d5da:	d4dd      	bmi.n	800d598 <_fflush_r+0xc>
 800d5dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5de:	f7ff f851 	bl	800c684 <__retarget_lock_release_recursive>
 800d5e2:	e7d9      	b.n	800d598 <_fflush_r+0xc>
 800d5e4:	4b05      	ldr	r3, [pc, #20]	; (800d5fc <_fflush_r+0x70>)
 800d5e6:	429c      	cmp	r4, r3
 800d5e8:	d101      	bne.n	800d5ee <_fflush_r+0x62>
 800d5ea:	68ac      	ldr	r4, [r5, #8]
 800d5ec:	e7df      	b.n	800d5ae <_fflush_r+0x22>
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <_fflush_r+0x74>)
 800d5f0:	429c      	cmp	r4, r3
 800d5f2:	bf08      	it	eq
 800d5f4:	68ec      	ldreq	r4, [r5, #12]
 800d5f6:	e7da      	b.n	800d5ae <_fflush_r+0x22>
 800d5f8:	0800e4b0 	.word	0x0800e4b0
 800d5fc:	0800e4d0 	.word	0x0800e4d0
 800d600:	0800e490 	.word	0x0800e490

0800d604 <fiprintf>:
 800d604:	b40e      	push	{r1, r2, r3}
 800d606:	b503      	push	{r0, r1, lr}
 800d608:	4601      	mov	r1, r0
 800d60a:	ab03      	add	r3, sp, #12
 800d60c:	4805      	ldr	r0, [pc, #20]	; (800d624 <fiprintf+0x20>)
 800d60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d612:	6800      	ldr	r0, [r0, #0]
 800d614:	9301      	str	r3, [sp, #4]
 800d616:	f000 f8e9 	bl	800d7ec <_vfiprintf_r>
 800d61a:	b002      	add	sp, #8
 800d61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d620:	b003      	add	sp, #12
 800d622:	4770      	bx	lr
 800d624:	20000188 	.word	0x20000188

0800d628 <_lseek_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4604      	mov	r4, r0
 800d62c:	4608      	mov	r0, r1
 800d62e:	4611      	mov	r1, r2
 800d630:	2200      	movs	r2, #0
 800d632:	4d05      	ldr	r5, [pc, #20]	; (800d648 <_lseek_r+0x20>)
 800d634:	602a      	str	r2, [r5, #0]
 800d636:	461a      	mov	r2, r3
 800d638:	f7f4 fc88 	bl	8001f4c <_lseek>
 800d63c:	1c43      	adds	r3, r0, #1
 800d63e:	d102      	bne.n	800d646 <_lseek_r+0x1e>
 800d640:	682b      	ldr	r3, [r5, #0]
 800d642:	b103      	cbz	r3, 800d646 <_lseek_r+0x1e>
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	bd38      	pop	{r3, r4, r5, pc}
 800d648:	2000379c 	.word	0x2000379c

0800d64c <__swhatbuf_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	460e      	mov	r6, r1
 800d650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d654:	4614      	mov	r4, r2
 800d656:	2900      	cmp	r1, #0
 800d658:	461d      	mov	r5, r3
 800d65a:	b096      	sub	sp, #88	; 0x58
 800d65c:	da07      	bge.n	800d66e <__swhatbuf_r+0x22>
 800d65e:	2300      	movs	r3, #0
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	89b3      	ldrh	r3, [r6, #12]
 800d664:	061a      	lsls	r2, r3, #24
 800d666:	d410      	bmi.n	800d68a <__swhatbuf_r+0x3e>
 800d668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d66c:	e00e      	b.n	800d68c <__swhatbuf_r+0x40>
 800d66e:	466a      	mov	r2, sp
 800d670:	f000 fa12 	bl	800da98 <_fstat_r>
 800d674:	2800      	cmp	r0, #0
 800d676:	dbf2      	blt.n	800d65e <__swhatbuf_r+0x12>
 800d678:	9a01      	ldr	r2, [sp, #4]
 800d67a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d67e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d682:	425a      	negs	r2, r3
 800d684:	415a      	adcs	r2, r3
 800d686:	602a      	str	r2, [r5, #0]
 800d688:	e7ee      	b.n	800d668 <__swhatbuf_r+0x1c>
 800d68a:	2340      	movs	r3, #64	; 0x40
 800d68c:	2000      	movs	r0, #0
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	b016      	add	sp, #88	; 0x58
 800d692:	bd70      	pop	{r4, r5, r6, pc}

0800d694 <__smakebuf_r>:
 800d694:	898b      	ldrh	r3, [r1, #12]
 800d696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d698:	079d      	lsls	r5, r3, #30
 800d69a:	4606      	mov	r6, r0
 800d69c:	460c      	mov	r4, r1
 800d69e:	d507      	bpl.n	800d6b0 <__smakebuf_r+0x1c>
 800d6a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6a4:	6023      	str	r3, [r4, #0]
 800d6a6:	6123      	str	r3, [r4, #16]
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	6163      	str	r3, [r4, #20]
 800d6ac:	b002      	add	sp, #8
 800d6ae:	bd70      	pop	{r4, r5, r6, pc}
 800d6b0:	466a      	mov	r2, sp
 800d6b2:	ab01      	add	r3, sp, #4
 800d6b4:	f7ff ffca 	bl	800d64c <__swhatbuf_r>
 800d6b8:	9900      	ldr	r1, [sp, #0]
 800d6ba:	4605      	mov	r5, r0
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7ff fbd5 	bl	800ce6c <_malloc_r>
 800d6c2:	b948      	cbnz	r0, 800d6d8 <__smakebuf_r+0x44>
 800d6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6c8:	059a      	lsls	r2, r3, #22
 800d6ca:	d4ef      	bmi.n	800d6ac <__smakebuf_r+0x18>
 800d6cc:	f023 0303 	bic.w	r3, r3, #3
 800d6d0:	f043 0302 	orr.w	r3, r3, #2
 800d6d4:	81a3      	strh	r3, [r4, #12]
 800d6d6:	e7e3      	b.n	800d6a0 <__smakebuf_r+0xc>
 800d6d8:	4b0d      	ldr	r3, [pc, #52]	; (800d710 <__smakebuf_r+0x7c>)
 800d6da:	62b3      	str	r3, [r6, #40]	; 0x28
 800d6dc:	89a3      	ldrh	r3, [r4, #12]
 800d6de:	6020      	str	r0, [r4, #0]
 800d6e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6e4:	81a3      	strh	r3, [r4, #12]
 800d6e6:	9b00      	ldr	r3, [sp, #0]
 800d6e8:	6120      	str	r0, [r4, #16]
 800d6ea:	6163      	str	r3, [r4, #20]
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	b15b      	cbz	r3, 800d708 <__smakebuf_r+0x74>
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6f6:	f000 f9e1 	bl	800dabc <_isatty_r>
 800d6fa:	b128      	cbz	r0, 800d708 <__smakebuf_r+0x74>
 800d6fc:	89a3      	ldrh	r3, [r4, #12]
 800d6fe:	f023 0303 	bic.w	r3, r3, #3
 800d702:	f043 0301 	orr.w	r3, r3, #1
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	89a0      	ldrh	r0, [r4, #12]
 800d70a:	4305      	orrs	r5, r0
 800d70c:	81a5      	strh	r5, [r4, #12]
 800d70e:	e7cd      	b.n	800d6ac <__smakebuf_r+0x18>
 800d710:	0800c4d5 	.word	0x0800c4d5

0800d714 <__ascii_mbtowc>:
 800d714:	b082      	sub	sp, #8
 800d716:	b901      	cbnz	r1, 800d71a <__ascii_mbtowc+0x6>
 800d718:	a901      	add	r1, sp, #4
 800d71a:	b142      	cbz	r2, 800d72e <__ascii_mbtowc+0x1a>
 800d71c:	b14b      	cbz	r3, 800d732 <__ascii_mbtowc+0x1e>
 800d71e:	7813      	ldrb	r3, [r2, #0]
 800d720:	600b      	str	r3, [r1, #0]
 800d722:	7812      	ldrb	r2, [r2, #0]
 800d724:	1e10      	subs	r0, r2, #0
 800d726:	bf18      	it	ne
 800d728:	2001      	movne	r0, #1
 800d72a:	b002      	add	sp, #8
 800d72c:	4770      	bx	lr
 800d72e:	4610      	mov	r0, r2
 800d730:	e7fb      	b.n	800d72a <__ascii_mbtowc+0x16>
 800d732:	f06f 0001 	mvn.w	r0, #1
 800d736:	e7f8      	b.n	800d72a <__ascii_mbtowc+0x16>

0800d738 <__malloc_lock>:
 800d738:	4801      	ldr	r0, [pc, #4]	; (800d740 <__malloc_lock+0x8>)
 800d73a:	f7fe bfa2 	b.w	800c682 <__retarget_lock_acquire_recursive>
 800d73e:	bf00      	nop
 800d740:	20003790 	.word	0x20003790

0800d744 <__malloc_unlock>:
 800d744:	4801      	ldr	r0, [pc, #4]	; (800d74c <__malloc_unlock+0x8>)
 800d746:	f7fe bf9d 	b.w	800c684 <__retarget_lock_release_recursive>
 800d74a:	bf00      	nop
 800d74c:	20003790 	.word	0x20003790

0800d750 <_realloc_r>:
 800d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d752:	4607      	mov	r7, r0
 800d754:	4614      	mov	r4, r2
 800d756:	460e      	mov	r6, r1
 800d758:	b921      	cbnz	r1, 800d764 <_realloc_r+0x14>
 800d75a:	4611      	mov	r1, r2
 800d75c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d760:	f7ff bb84 	b.w	800ce6c <_malloc_r>
 800d764:	b922      	cbnz	r2, 800d770 <_realloc_r+0x20>
 800d766:	f7ff fb35 	bl	800cdd4 <_free_r>
 800d76a:	4625      	mov	r5, r4
 800d76c:	4628      	mov	r0, r5
 800d76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d770:	f000 f9b4 	bl	800dadc <_malloc_usable_size_r>
 800d774:	42a0      	cmp	r0, r4
 800d776:	d20f      	bcs.n	800d798 <_realloc_r+0x48>
 800d778:	4621      	mov	r1, r4
 800d77a:	4638      	mov	r0, r7
 800d77c:	f7ff fb76 	bl	800ce6c <_malloc_r>
 800d780:	4605      	mov	r5, r0
 800d782:	2800      	cmp	r0, #0
 800d784:	d0f2      	beq.n	800d76c <_realloc_r+0x1c>
 800d786:	4631      	mov	r1, r6
 800d788:	4622      	mov	r2, r4
 800d78a:	f7fd fb53 	bl	800ae34 <memcpy>
 800d78e:	4631      	mov	r1, r6
 800d790:	4638      	mov	r0, r7
 800d792:	f7ff fb1f 	bl	800cdd4 <_free_r>
 800d796:	e7e9      	b.n	800d76c <_realloc_r+0x1c>
 800d798:	4635      	mov	r5, r6
 800d79a:	e7e7      	b.n	800d76c <_realloc_r+0x1c>

0800d79c <__sfputc_r>:
 800d79c:	6893      	ldr	r3, [r2, #8]
 800d79e:	b410      	push	{r4}
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	6093      	str	r3, [r2, #8]
 800d7a6:	da07      	bge.n	800d7b8 <__sfputc_r+0x1c>
 800d7a8:	6994      	ldr	r4, [r2, #24]
 800d7aa:	42a3      	cmp	r3, r4
 800d7ac:	db01      	blt.n	800d7b2 <__sfputc_r+0x16>
 800d7ae:	290a      	cmp	r1, #10
 800d7b0:	d102      	bne.n	800d7b8 <__sfputc_r+0x1c>
 800d7b2:	bc10      	pop	{r4}
 800d7b4:	f7ff bd64 	b.w	800d280 <__swbuf_r>
 800d7b8:	6813      	ldr	r3, [r2, #0]
 800d7ba:	1c58      	adds	r0, r3, #1
 800d7bc:	6010      	str	r0, [r2, #0]
 800d7be:	7019      	strb	r1, [r3, #0]
 800d7c0:	4608      	mov	r0, r1
 800d7c2:	bc10      	pop	{r4}
 800d7c4:	4770      	bx	lr

0800d7c6 <__sfputs_r>:
 800d7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c8:	4606      	mov	r6, r0
 800d7ca:	460f      	mov	r7, r1
 800d7cc:	4614      	mov	r4, r2
 800d7ce:	18d5      	adds	r5, r2, r3
 800d7d0:	42ac      	cmp	r4, r5
 800d7d2:	d101      	bne.n	800d7d8 <__sfputs_r+0x12>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	e007      	b.n	800d7e8 <__sfputs_r+0x22>
 800d7d8:	463a      	mov	r2, r7
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	f7ff ffdc 	bl	800d79c <__sfputc_r>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d1f3      	bne.n	800d7d0 <__sfputs_r+0xa>
 800d7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d7ec <_vfiprintf_r>:
 800d7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f0:	460d      	mov	r5, r1
 800d7f2:	4614      	mov	r4, r2
 800d7f4:	4698      	mov	r8, r3
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	b09d      	sub	sp, #116	; 0x74
 800d7fa:	b118      	cbz	r0, 800d804 <_vfiprintf_r+0x18>
 800d7fc:	6983      	ldr	r3, [r0, #24]
 800d7fe:	b90b      	cbnz	r3, 800d804 <_vfiprintf_r+0x18>
 800d800:	f7fe fe9c 	bl	800c53c <__sinit>
 800d804:	4b89      	ldr	r3, [pc, #548]	; (800da2c <_vfiprintf_r+0x240>)
 800d806:	429d      	cmp	r5, r3
 800d808:	d11b      	bne.n	800d842 <_vfiprintf_r+0x56>
 800d80a:	6875      	ldr	r5, [r6, #4]
 800d80c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d80e:	07d9      	lsls	r1, r3, #31
 800d810:	d405      	bmi.n	800d81e <_vfiprintf_r+0x32>
 800d812:	89ab      	ldrh	r3, [r5, #12]
 800d814:	059a      	lsls	r2, r3, #22
 800d816:	d402      	bmi.n	800d81e <_vfiprintf_r+0x32>
 800d818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d81a:	f7fe ff32 	bl	800c682 <__retarget_lock_acquire_recursive>
 800d81e:	89ab      	ldrh	r3, [r5, #12]
 800d820:	071b      	lsls	r3, r3, #28
 800d822:	d501      	bpl.n	800d828 <_vfiprintf_r+0x3c>
 800d824:	692b      	ldr	r3, [r5, #16]
 800d826:	b9eb      	cbnz	r3, 800d864 <_vfiprintf_r+0x78>
 800d828:	4629      	mov	r1, r5
 800d82a:	4630      	mov	r0, r6
 800d82c:	f7ff fd8c 	bl	800d348 <__swsetup_r>
 800d830:	b1c0      	cbz	r0, 800d864 <_vfiprintf_r+0x78>
 800d832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d834:	07dc      	lsls	r4, r3, #31
 800d836:	d50e      	bpl.n	800d856 <_vfiprintf_r+0x6a>
 800d838:	f04f 30ff 	mov.w	r0, #4294967295
 800d83c:	b01d      	add	sp, #116	; 0x74
 800d83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d842:	4b7b      	ldr	r3, [pc, #492]	; (800da30 <_vfiprintf_r+0x244>)
 800d844:	429d      	cmp	r5, r3
 800d846:	d101      	bne.n	800d84c <_vfiprintf_r+0x60>
 800d848:	68b5      	ldr	r5, [r6, #8]
 800d84a:	e7df      	b.n	800d80c <_vfiprintf_r+0x20>
 800d84c:	4b79      	ldr	r3, [pc, #484]	; (800da34 <_vfiprintf_r+0x248>)
 800d84e:	429d      	cmp	r5, r3
 800d850:	bf08      	it	eq
 800d852:	68f5      	ldreq	r5, [r6, #12]
 800d854:	e7da      	b.n	800d80c <_vfiprintf_r+0x20>
 800d856:	89ab      	ldrh	r3, [r5, #12]
 800d858:	0598      	lsls	r0, r3, #22
 800d85a:	d4ed      	bmi.n	800d838 <_vfiprintf_r+0x4c>
 800d85c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d85e:	f7fe ff11 	bl	800c684 <__retarget_lock_release_recursive>
 800d862:	e7e9      	b.n	800d838 <_vfiprintf_r+0x4c>
 800d864:	2300      	movs	r3, #0
 800d866:	9309      	str	r3, [sp, #36]	; 0x24
 800d868:	2320      	movs	r3, #32
 800d86a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d86e:	2330      	movs	r3, #48	; 0x30
 800d870:	f04f 0901 	mov.w	r9, #1
 800d874:	f8cd 800c 	str.w	r8, [sp, #12]
 800d878:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800da38 <_vfiprintf_r+0x24c>
 800d87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d880:	4623      	mov	r3, r4
 800d882:	469a      	mov	sl, r3
 800d884:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d888:	b10a      	cbz	r2, 800d88e <_vfiprintf_r+0xa2>
 800d88a:	2a25      	cmp	r2, #37	; 0x25
 800d88c:	d1f9      	bne.n	800d882 <_vfiprintf_r+0x96>
 800d88e:	ebba 0b04 	subs.w	fp, sl, r4
 800d892:	d00b      	beq.n	800d8ac <_vfiprintf_r+0xc0>
 800d894:	465b      	mov	r3, fp
 800d896:	4622      	mov	r2, r4
 800d898:	4629      	mov	r1, r5
 800d89a:	4630      	mov	r0, r6
 800d89c:	f7ff ff93 	bl	800d7c6 <__sfputs_r>
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	f000 80aa 	beq.w	800d9fa <_vfiprintf_r+0x20e>
 800d8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8a8:	445a      	add	r2, fp
 800d8aa:	9209      	str	r2, [sp, #36]	; 0x24
 800d8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f000 80a2 	beq.w	800d9fa <_vfiprintf_r+0x20e>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d8bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8c0:	f10a 0a01 	add.w	sl, sl, #1
 800d8c4:	9304      	str	r3, [sp, #16]
 800d8c6:	9307      	str	r3, [sp, #28]
 800d8c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d8ce:	4654      	mov	r4, sl
 800d8d0:	2205      	movs	r2, #5
 800d8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8d6:	4858      	ldr	r0, [pc, #352]	; (800da38 <_vfiprintf_r+0x24c>)
 800d8d8:	f7fe fede 	bl	800c698 <memchr>
 800d8dc:	9a04      	ldr	r2, [sp, #16]
 800d8de:	b9d8      	cbnz	r0, 800d918 <_vfiprintf_r+0x12c>
 800d8e0:	06d1      	lsls	r1, r2, #27
 800d8e2:	bf44      	itt	mi
 800d8e4:	2320      	movmi	r3, #32
 800d8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8ea:	0713      	lsls	r3, r2, #28
 800d8ec:	bf44      	itt	mi
 800d8ee:	232b      	movmi	r3, #43	; 0x2b
 800d8f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8fa:	d015      	beq.n	800d928 <_vfiprintf_r+0x13c>
 800d8fc:	4654      	mov	r4, sl
 800d8fe:	2000      	movs	r0, #0
 800d900:	f04f 0c0a 	mov.w	ip, #10
 800d904:	9a07      	ldr	r2, [sp, #28]
 800d906:	4621      	mov	r1, r4
 800d908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d90c:	3b30      	subs	r3, #48	; 0x30
 800d90e:	2b09      	cmp	r3, #9
 800d910:	d94e      	bls.n	800d9b0 <_vfiprintf_r+0x1c4>
 800d912:	b1b0      	cbz	r0, 800d942 <_vfiprintf_r+0x156>
 800d914:	9207      	str	r2, [sp, #28]
 800d916:	e014      	b.n	800d942 <_vfiprintf_r+0x156>
 800d918:	eba0 0308 	sub.w	r3, r0, r8
 800d91c:	fa09 f303 	lsl.w	r3, r9, r3
 800d920:	4313      	orrs	r3, r2
 800d922:	46a2      	mov	sl, r4
 800d924:	9304      	str	r3, [sp, #16]
 800d926:	e7d2      	b.n	800d8ce <_vfiprintf_r+0xe2>
 800d928:	9b03      	ldr	r3, [sp, #12]
 800d92a:	1d19      	adds	r1, r3, #4
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	9103      	str	r1, [sp, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	bfbb      	ittet	lt
 800d934:	425b      	neglt	r3, r3
 800d936:	f042 0202 	orrlt.w	r2, r2, #2
 800d93a:	9307      	strge	r3, [sp, #28]
 800d93c:	9307      	strlt	r3, [sp, #28]
 800d93e:	bfb8      	it	lt
 800d940:	9204      	strlt	r2, [sp, #16]
 800d942:	7823      	ldrb	r3, [r4, #0]
 800d944:	2b2e      	cmp	r3, #46	; 0x2e
 800d946:	d10c      	bne.n	800d962 <_vfiprintf_r+0x176>
 800d948:	7863      	ldrb	r3, [r4, #1]
 800d94a:	2b2a      	cmp	r3, #42	; 0x2a
 800d94c:	d135      	bne.n	800d9ba <_vfiprintf_r+0x1ce>
 800d94e:	9b03      	ldr	r3, [sp, #12]
 800d950:	3402      	adds	r4, #2
 800d952:	1d1a      	adds	r2, r3, #4
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	9203      	str	r2, [sp, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	bfb8      	it	lt
 800d95c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d960:	9305      	str	r3, [sp, #20]
 800d962:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da48 <_vfiprintf_r+0x25c>
 800d966:	2203      	movs	r2, #3
 800d968:	4650      	mov	r0, sl
 800d96a:	7821      	ldrb	r1, [r4, #0]
 800d96c:	f7fe fe94 	bl	800c698 <memchr>
 800d970:	b140      	cbz	r0, 800d984 <_vfiprintf_r+0x198>
 800d972:	2340      	movs	r3, #64	; 0x40
 800d974:	eba0 000a 	sub.w	r0, r0, sl
 800d978:	fa03 f000 	lsl.w	r0, r3, r0
 800d97c:	9b04      	ldr	r3, [sp, #16]
 800d97e:	3401      	adds	r4, #1
 800d980:	4303      	orrs	r3, r0
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d988:	2206      	movs	r2, #6
 800d98a:	482c      	ldr	r0, [pc, #176]	; (800da3c <_vfiprintf_r+0x250>)
 800d98c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d990:	f7fe fe82 	bl	800c698 <memchr>
 800d994:	2800      	cmp	r0, #0
 800d996:	d03f      	beq.n	800da18 <_vfiprintf_r+0x22c>
 800d998:	4b29      	ldr	r3, [pc, #164]	; (800da40 <_vfiprintf_r+0x254>)
 800d99a:	bb1b      	cbnz	r3, 800d9e4 <_vfiprintf_r+0x1f8>
 800d99c:	9b03      	ldr	r3, [sp, #12]
 800d99e:	3307      	adds	r3, #7
 800d9a0:	f023 0307 	bic.w	r3, r3, #7
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	9303      	str	r3, [sp, #12]
 800d9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9aa:	443b      	add	r3, r7
 800d9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ae:	e767      	b.n	800d880 <_vfiprintf_r+0x94>
 800d9b0:	460c      	mov	r4, r1
 800d9b2:	2001      	movs	r0, #1
 800d9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9b8:	e7a5      	b.n	800d906 <_vfiprintf_r+0x11a>
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	f04f 0c0a 	mov.w	ip, #10
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	3401      	adds	r4, #1
 800d9c4:	9305      	str	r3, [sp, #20]
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9cc:	3a30      	subs	r2, #48	; 0x30
 800d9ce:	2a09      	cmp	r2, #9
 800d9d0:	d903      	bls.n	800d9da <_vfiprintf_r+0x1ee>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0c5      	beq.n	800d962 <_vfiprintf_r+0x176>
 800d9d6:	9105      	str	r1, [sp, #20]
 800d9d8:	e7c3      	b.n	800d962 <_vfiprintf_r+0x176>
 800d9da:	4604      	mov	r4, r0
 800d9dc:	2301      	movs	r3, #1
 800d9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9e2:	e7f0      	b.n	800d9c6 <_vfiprintf_r+0x1da>
 800d9e4:	ab03      	add	r3, sp, #12
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	462a      	mov	r2, r5
 800d9ea:	4630      	mov	r0, r6
 800d9ec:	4b15      	ldr	r3, [pc, #84]	; (800da44 <_vfiprintf_r+0x258>)
 800d9ee:	a904      	add	r1, sp, #16
 800d9f0:	f7fd faee 	bl	800afd0 <_printf_float>
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	1c78      	adds	r0, r7, #1
 800d9f8:	d1d6      	bne.n	800d9a8 <_vfiprintf_r+0x1bc>
 800d9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d9fc:	07d9      	lsls	r1, r3, #31
 800d9fe:	d405      	bmi.n	800da0c <_vfiprintf_r+0x220>
 800da00:	89ab      	ldrh	r3, [r5, #12]
 800da02:	059a      	lsls	r2, r3, #22
 800da04:	d402      	bmi.n	800da0c <_vfiprintf_r+0x220>
 800da06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da08:	f7fe fe3c 	bl	800c684 <__retarget_lock_release_recursive>
 800da0c:	89ab      	ldrh	r3, [r5, #12]
 800da0e:	065b      	lsls	r3, r3, #25
 800da10:	f53f af12 	bmi.w	800d838 <_vfiprintf_r+0x4c>
 800da14:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da16:	e711      	b.n	800d83c <_vfiprintf_r+0x50>
 800da18:	ab03      	add	r3, sp, #12
 800da1a:	9300      	str	r3, [sp, #0]
 800da1c:	462a      	mov	r2, r5
 800da1e:	4630      	mov	r0, r6
 800da20:	4b08      	ldr	r3, [pc, #32]	; (800da44 <_vfiprintf_r+0x258>)
 800da22:	a904      	add	r1, sp, #16
 800da24:	f7fd fd70 	bl	800b508 <_printf_i>
 800da28:	e7e4      	b.n	800d9f4 <_vfiprintf_r+0x208>
 800da2a:	bf00      	nop
 800da2c:	0800e4b0 	.word	0x0800e4b0
 800da30:	0800e4d0 	.word	0x0800e4d0
 800da34:	0800e490 	.word	0x0800e490
 800da38:	0800e64c 	.word	0x0800e64c
 800da3c:	0800e656 	.word	0x0800e656
 800da40:	0800afd1 	.word	0x0800afd1
 800da44:	0800d7c7 	.word	0x0800d7c7
 800da48:	0800e652 	.word	0x0800e652

0800da4c <_read_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4604      	mov	r4, r0
 800da50:	4608      	mov	r0, r1
 800da52:	4611      	mov	r1, r2
 800da54:	2200      	movs	r2, #0
 800da56:	4d05      	ldr	r5, [pc, #20]	; (800da6c <_read_r+0x20>)
 800da58:	602a      	str	r2, [r5, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f7f4 fa4e 	bl	8001efc <_read>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_read_r+0x1e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_read_r+0x1e>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	2000379c 	.word	0x2000379c

0800da70 <__ascii_wctomb>:
 800da70:	4603      	mov	r3, r0
 800da72:	4608      	mov	r0, r1
 800da74:	b141      	cbz	r1, 800da88 <__ascii_wctomb+0x18>
 800da76:	2aff      	cmp	r2, #255	; 0xff
 800da78:	d904      	bls.n	800da84 <__ascii_wctomb+0x14>
 800da7a:	228a      	movs	r2, #138	; 0x8a
 800da7c:	f04f 30ff 	mov.w	r0, #4294967295
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	4770      	bx	lr
 800da84:	2001      	movs	r0, #1
 800da86:	700a      	strb	r2, [r1, #0]
 800da88:	4770      	bx	lr

0800da8a <abort>:
 800da8a:	2006      	movs	r0, #6
 800da8c:	b508      	push	{r3, lr}
 800da8e:	f000 f855 	bl	800db3c <raise>
 800da92:	2001      	movs	r0, #1
 800da94:	f7f4 fa2c 	bl	8001ef0 <_exit>

0800da98 <_fstat_r>:
 800da98:	b538      	push	{r3, r4, r5, lr}
 800da9a:	2300      	movs	r3, #0
 800da9c:	4d06      	ldr	r5, [pc, #24]	; (800dab8 <_fstat_r+0x20>)
 800da9e:	4604      	mov	r4, r0
 800daa0:	4608      	mov	r0, r1
 800daa2:	4611      	mov	r1, r2
 800daa4:	602b      	str	r3, [r5, #0]
 800daa6:	f7f4 fa4a 	bl	8001f3e <_fstat>
 800daaa:	1c43      	adds	r3, r0, #1
 800daac:	d102      	bne.n	800dab4 <_fstat_r+0x1c>
 800daae:	682b      	ldr	r3, [r5, #0]
 800dab0:	b103      	cbz	r3, 800dab4 <_fstat_r+0x1c>
 800dab2:	6023      	str	r3, [r4, #0]
 800dab4:	bd38      	pop	{r3, r4, r5, pc}
 800dab6:	bf00      	nop
 800dab8:	2000379c 	.word	0x2000379c

0800dabc <_isatty_r>:
 800dabc:	b538      	push	{r3, r4, r5, lr}
 800dabe:	2300      	movs	r3, #0
 800dac0:	4d05      	ldr	r5, [pc, #20]	; (800dad8 <_isatty_r+0x1c>)
 800dac2:	4604      	mov	r4, r0
 800dac4:	4608      	mov	r0, r1
 800dac6:	602b      	str	r3, [r5, #0]
 800dac8:	f7f4 fa3e 	bl	8001f48 <_isatty>
 800dacc:	1c43      	adds	r3, r0, #1
 800dace:	d102      	bne.n	800dad6 <_isatty_r+0x1a>
 800dad0:	682b      	ldr	r3, [r5, #0]
 800dad2:	b103      	cbz	r3, 800dad6 <_isatty_r+0x1a>
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	bd38      	pop	{r3, r4, r5, pc}
 800dad8:	2000379c 	.word	0x2000379c

0800dadc <_malloc_usable_size_r>:
 800dadc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dae0:	1f18      	subs	r0, r3, #4
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	bfbc      	itt	lt
 800dae6:	580b      	ldrlt	r3, [r1, r0]
 800dae8:	18c0      	addlt	r0, r0, r3
 800daea:	4770      	bx	lr

0800daec <_raise_r>:
 800daec:	291f      	cmp	r1, #31
 800daee:	b538      	push	{r3, r4, r5, lr}
 800daf0:	4604      	mov	r4, r0
 800daf2:	460d      	mov	r5, r1
 800daf4:	d904      	bls.n	800db00 <_raise_r+0x14>
 800daf6:	2316      	movs	r3, #22
 800daf8:	6003      	str	r3, [r0, #0]
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295
 800dafe:	bd38      	pop	{r3, r4, r5, pc}
 800db00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db02:	b112      	cbz	r2, 800db0a <_raise_r+0x1e>
 800db04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db08:	b94b      	cbnz	r3, 800db1e <_raise_r+0x32>
 800db0a:	4620      	mov	r0, r4
 800db0c:	f000 f830 	bl	800db70 <_getpid_r>
 800db10:	462a      	mov	r2, r5
 800db12:	4601      	mov	r1, r0
 800db14:	4620      	mov	r0, r4
 800db16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db1a:	f000 b817 	b.w	800db4c <_kill_r>
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d00a      	beq.n	800db38 <_raise_r+0x4c>
 800db22:	1c59      	adds	r1, r3, #1
 800db24:	d103      	bne.n	800db2e <_raise_r+0x42>
 800db26:	2316      	movs	r3, #22
 800db28:	6003      	str	r3, [r0, #0]
 800db2a:	2001      	movs	r0, #1
 800db2c:	e7e7      	b.n	800dafe <_raise_r+0x12>
 800db2e:	2400      	movs	r4, #0
 800db30:	4628      	mov	r0, r5
 800db32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db36:	4798      	blx	r3
 800db38:	2000      	movs	r0, #0
 800db3a:	e7e0      	b.n	800dafe <_raise_r+0x12>

0800db3c <raise>:
 800db3c:	4b02      	ldr	r3, [pc, #8]	; (800db48 <raise+0xc>)
 800db3e:	4601      	mov	r1, r0
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	f7ff bfd3 	b.w	800daec <_raise_r>
 800db46:	bf00      	nop
 800db48:	20000188 	.word	0x20000188

0800db4c <_kill_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	2300      	movs	r3, #0
 800db50:	4d06      	ldr	r5, [pc, #24]	; (800db6c <_kill_r+0x20>)
 800db52:	4604      	mov	r4, r0
 800db54:	4608      	mov	r0, r1
 800db56:	4611      	mov	r1, r2
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	f7f4 f9c1 	bl	8001ee0 <_kill>
 800db5e:	1c43      	adds	r3, r0, #1
 800db60:	d102      	bne.n	800db68 <_kill_r+0x1c>
 800db62:	682b      	ldr	r3, [r5, #0]
 800db64:	b103      	cbz	r3, 800db68 <_kill_r+0x1c>
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	bd38      	pop	{r3, r4, r5, pc}
 800db6a:	bf00      	nop
 800db6c:	2000379c 	.word	0x2000379c

0800db70 <_getpid_r>:
 800db70:	f7f4 b9b4 	b.w	8001edc <_getpid>

0800db74 <_init>:
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	bf00      	nop
 800db78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db7a:	bc08      	pop	{r3}
 800db7c:	469e      	mov	lr, r3
 800db7e:	4770      	bx	lr

0800db80 <_fini>:
 800db80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db82:	bf00      	nop
 800db84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db86:	bc08      	pop	{r3}
 800db88:	469e      	mov	lr, r3
 800db8a:	4770      	bx	lr
