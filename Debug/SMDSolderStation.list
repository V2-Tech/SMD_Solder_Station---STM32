
SMDSolderStation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca48  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b8  0800cb58  0800cb58  0001cb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec10  0800ec10  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec10  0800ec10  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec10  0800ec10  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec10  0800ec10  0001ec10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec14  0800ec14  0001ec14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800ec18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030b0  20000350  0800ef68  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003400  0800ef68  00023400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b90da  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a5b9  00000000  00000000  000d9453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003538  00000000  00000000  000e3a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000213db  00000000  00000000  000e6f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000456e3  00000000  00000000  00108323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000affa9  00000000  00000000  0014da06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001fd9af  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00004cb8  00000000  00000000  001fda08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bda4  00000000  00000000  002026c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0004082f  00000000  00000000  0020e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb40 	.word	0x0800cb40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800cb40 	.word	0x0800cb40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2iz>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30f      	bcc.n	800105a <__aeabi_f2iz+0x2a>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d90d      	bls.n	8001060 <__aeabi_f2iz+0x30>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001050:	fa23 f002 	lsr.w	r0, r3, r2
 8001054:	bf18      	it	ne
 8001056:	4240      	negne	r0, r0
 8001058:	4770      	bx	lr
 800105a:	f04f 0000 	mov.w	r0, #0
 800105e:	4770      	bx	lr
 8001060:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001064:	d101      	bne.n	800106a <__aeabi_f2iz+0x3a>
 8001066:	0242      	lsls	r2, r0, #9
 8001068:	d105      	bne.n	8001076 <__aeabi_f2iz+0x46>
 800106a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800106e:	bf08      	it	eq
 8001070:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001074:	4770      	bx	lr
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	4770      	bx	lr

0800107c <__aeabi_f2uiz>:
 800107c:	0042      	lsls	r2, r0, #1
 800107e:	d20e      	bcs.n	800109e <__aeabi_f2uiz+0x22>
 8001080:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001084:	d30b      	bcc.n	800109e <__aeabi_f2uiz+0x22>
 8001086:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800108e:	d409      	bmi.n	80010a4 <__aeabi_f2uiz+0x28>
 8001090:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001094:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001098:	fa23 f002 	lsr.w	r0, r3, r2
 800109c:	4770      	bx	lr
 800109e:	f04f 0000 	mov.w	r0, #0
 80010a2:	4770      	bx	lr
 80010a4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010a8:	d101      	bne.n	80010ae <__aeabi_f2uiz+0x32>
 80010aa:	0242      	lsls	r2, r0, #9
 80010ac:	d102      	bne.n	80010b4 <__aeabi_f2uiz+0x38>
 80010ae:	f04f 30ff 	mov.w	r0, #4294967295
 80010b2:	4770      	bx	lr
 80010b4:	f04f 0000 	mov.w	r0, #0
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <vApplicationGetIdleTaskMemory+0x10>)
 80010be:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <vApplicationGetIdleTaskMemory+0x14>)
 80010c2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010c4:	2340      	movs	r3, #64	; 0x40
 80010c6:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000046c 	.word	0x2000046c
 80010d0:	2000036c 	.word	0x2000036c

080010d4 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <vApplicationGetTimerTaskMemory+0x10>)
 80010d6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80010d8:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <vApplicationGetTimerTaskMemory+0x14>)
 80010da:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200006b8 	.word	0x200006b8
 80010e8:	200004b8 	.word	0x200004b8

080010ec <EncoderRead>:
void EncoderRead(VisualInterface* Interface, TIM_HandleTypeDef* EncoderTimerHandler)
{
	static uint32_t EncLastValue;

	// Encoder counts reading
	uint32_t EncActValue = EncoderTimerHandler->Instance->CNT;
 80010ec:	680b      	ldr	r3, [r1, #0]
{
 80010ee:	b510      	push	{r4, lr}
	uint32_t EncActValue = EncoderTimerHandler->Instance->CNT;
 80010f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
	Interface->SignedEncActValue = (int16_t) EncActValue;
 80010f2:	b20a      	sxth	r2, r1
 80010f4:	8002      	strh	r2, [r0, #0]
	if (EncActValue != EncLastValue)
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <EncoderRead+0x28>)
 80010f8:	6804      	ldr	r4, [r0, #0]
 80010fa:	428c      	cmp	r4, r1
	{
		EncLastValue = EncActValue;
 80010fc:	bf18      	it	ne
 80010fe:	6001      	strne	r1, [r0, #0]

	}

	// Software counts limit
	if (Interface->SignedEncActValue<0)
 8001100:	2a00      	cmp	r2, #0
 8001102:	da02      	bge.n	800110a <EncoderRead+0x1e>
	{
		  __HAL_TIM_SET_COUNTER(EncoderTimerHandler, 0);
 8001104:	2200      	movs	r2, #0
	}
	if (Interface->SignedEncActValue>MAXTEMPERATURE)
	{
		  __HAL_TIM_SET_COUNTER(EncoderTimerHandler, MAXTEMPERATURE);
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001108:	bd10      	pop	{r4, pc}
	if (Interface->SignedEncActValue>MAXTEMPERATURE)
 800110a:	2af0      	cmp	r2, #240	; 0xf0
 800110c:	ddfc      	ble.n	8001108 <EncoderRead+0x1c>
		  __HAL_TIM_SET_COUNTER(EncoderTimerHandler, MAXTEMPERATURE);
 800110e:	22f0      	movs	r2, #240	; 0xf0
 8001110:	e7f9      	b.n	8001106 <EncoderRead+0x1a>
 8001112:	bf00      	nop
 8001114:	20000708 	.word	0x20000708

08001118 <BlinkTimerCallback>:

void BlinkTimerCallback(void const * argument)
{
	BlinkVar = !BlinkVar;
 8001118:	4a02      	ldr	r2, [pc, #8]	; (8001124 <BlinkTimerCallback+0xc>)
 800111a:	7813      	ldrb	r3, [r2, #0]
 800111c:	f083 0301 	eor.w	r3, r3, #1
 8001120:	7013      	strb	r3, [r2, #0]
}
 8001122:	4770      	bx	lr
 8001124:	20000705 	.word	0x20000705

08001128 <MainPage>:
	}
	u8g2_SendBuffer(&u8g2);
}

void MainPage(VisualInterface* Interface, LPFilter *filter, PID *pid)
{
 8001128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//*********************************
	//************* ICONS *************
	//*********************************

	// Draw target temperature icon
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 800112c:	270e      	movs	r7, #14
 800112e:	4b4c      	ldr	r3, [pc, #304]	; (8001260 <MainPage+0x138>)
{
 8001130:	b086      	sub	sp, #24
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 8001132:	9301      	str	r3, [sp, #4]
{
 8001134:	4604      	mov	r4, r0
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 8001136:	2316      	movs	r3, #22
 8001138:	484a      	ldr	r0, [pc, #296]	; (8001264 <MainPage+0x13c>)
{
 800113a:	4688      	mov	r8, r1
 800113c:	4616      	mov	r6, r2
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 800113e:	2102      	movs	r1, #2
 8001140:	2200      	movs	r2, #0
 8001142:	9700      	str	r7, [sp, #0]
 8001144:	f001 f91f 	bl	8002386 <u8g2_DrawXBMP>

	// Draw actual temperature icon
	u8g2_DrawXBMP(&u8g2, 1, 20, 23, 39, temperature_23x39);
 8001148:	4b47      	ldr	r3, [pc, #284]	; (8001268 <MainPage+0x140>)

	// Draw alarm icon
	if (AlarmVar)
 800114a:	4d48      	ldr	r5, [pc, #288]	; (800126c <MainPage+0x144>)
	u8g2_DrawXBMP(&u8g2, 1, 20, 23, 39, temperature_23x39);
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2327      	movs	r3, #39	; 0x27
 8001150:	2214      	movs	r2, #20
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	2317      	movs	r3, #23
 8001158:	4842      	ldr	r0, [pc, #264]	; (8001264 <MainPage+0x13c>)
 800115a:	f001 f914 	bl	8002386 <u8g2_DrawXBMP>
	if (AlarmVar)
 800115e:	782b      	ldrb	r3, [r5, #0]
 8001160:	b143      	cbz	r3, 8001174 <MainPage+0x4c>
	{
		u8g2_DrawXBMP(&u8g2, 110, 0, 14, 14, alarm_14x14);
 8001162:	4b43      	ldr	r3, [pc, #268]	; (8001270 <MainPage+0x148>)
 8001164:	2200      	movs	r2, #0
 8001166:	e9cd 7300 	strd	r7, r3, [sp]
 800116a:	216e      	movs	r1, #110	; 0x6e
 800116c:	463b      	mov	r3, r7
 800116e:	483d      	ldr	r0, [pc, #244]	; (8001264 <MainPage+0x13c>)
 8001170:	f001 f909 	bl	8002386 <u8g2_DrawXBMP>
	}

	// Draw heat icon
	if ((Interface->_ActualHeatState == HeatStatyState) ||
 8001174:	7963      	ldrb	r3, [r4, #5]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d004      	beq.n	8001184 <MainPage+0x5c>
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10c      	bne.n	8001198 <MainPage+0x70>
			((Interface->_ActualHeatState == Heating) && (BlinkVar == 1)))
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <MainPage+0x14c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b14b      	cbz	r3, 8001198 <MainPage+0x70>
	{
		u8g2_DrawXBMP(&u8g2, 96, 26, 30, 28, Heater_30x28);
 8001184:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <MainPage+0x150>)
 8001186:	221a      	movs	r2, #26
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	231c      	movs	r3, #28
 800118c:	2160      	movs	r1, #96	; 0x60
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	4834      	ldr	r0, [pc, #208]	; (8001264 <MainPage+0x13c>)
 8001192:	231e      	movs	r3, #30
 8001194:	f001 f8f7 	bl	8002386 <u8g2_DrawXBMP>
	//*********************************
	//************ VALUES *************
	//*********************************

	// Actual temperature value
	u8g2_SetFont(&u8g2, u8g2_font_helvR14_tf);
 8001198:	4938      	ldr	r1, [pc, #224]	; (800127c <MainPage+0x154>)
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <MainPage+0x13c>)
 800119c:	f001 fc08 	bl	80029b0 <u8g2_SetFont>
	if (filter->FilterOK && !AlarmVar)
 80011a0:	f898 3014 	ldrb.w	r3, [r8, #20]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d046      	beq.n	8001236 <MainPage+0x10e>
 80011a8:	782b      	ldrb	r3, [r5, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d145      	bne.n	800123a <MainPage+0x112>
	{
		sprintf((uint8_t *)ScreenString[0], "%3.0f C",filter->FilteredValue);
 80011ae:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80011b2:	f7ff f939 	bl	8000428 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	a802      	add	r0, sp, #8
 80011bc:	4930      	ldr	r1, [pc, #192]	; (8001280 <MainPage+0x158>)
 80011be:	f009 fa8d 	bl	800a6dc <siprintf>
		u8g2_DrawStr(&u8g2, 32, 24, ScreenString[0]);
	}
	else
	{
		sprintf((uint8_t *)ScreenString[0], "Calc...");
		u8g2_DrawStr(&u8g2, 32, 24, ScreenString[0]);
 80011c2:	ab02      	add	r3, sp, #8
 80011c4:	2218      	movs	r2, #24
 80011c6:	2120      	movs	r1, #32
 80011c8:	4826      	ldr	r0, [pc, #152]	; (8001264 <MainPage+0x13c>)
 80011ca:	f001 fbb1 	bl	8002930 <u8g2_DrawStr>
	}

	// Setpoint value
	u8g2_SetFont(&u8g2, u8g2_font_helvR10_tf);
 80011ce:	492d      	ldr	r1, [pc, #180]	; (8001284 <MainPage+0x15c>)
 80011d0:	4824      	ldr	r0, [pc, #144]	; (8001264 <MainPage+0x13c>)
 80011d2:	f001 fbed 	bl	80029b0 <u8g2_SetFont>
	if (Interface->SignedEncActValue <= MAXTEMPERATURE && Interface->SignedEncActValue >= 0)
 80011d6:	8823      	ldrh	r3, [r4, #0]
 80011d8:	f9b4 7000 	ldrsh.w	r7, [r4]
 80011dc:	2bf0      	cmp	r3, #240	; 0xf0
 80011de:	d818      	bhi.n	8001212 <MainPage+0xea>
	{
		if (Interface->SignedEncActValue == pid->Setpoint)
 80011e0:	f8d6 8000 	ldr.w	r8, [r6]
 80011e4:	4638      	mov	r0, r7
 80011e6:	f7ff fd09 	bl	8000bfc <__aeabi_i2f>
 80011ea:	4641      	mov	r1, r8
 80011ec:	f7ff feee 	bl	8000fcc <__aeabi_fcmpeq>
 80011f0:	4605      	mov	r5, r0
 80011f2:	b348      	cbz	r0, 8001248 <MainPage+0x120>
		{
			sprintf(ScreenString[0], "%3.0f C", pid->Setpoint);
 80011f4:	4640      	mov	r0, r8
 80011f6:	f7ff f917 	bl	8000428 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	a802      	add	r0, sp, #8
 8001200:	491f      	ldr	r1, [pc, #124]	; (8001280 <MainPage+0x158>)
 8001202:	f009 fa6b 	bl	800a6dc <siprintf>
			u8g2_DrawStr(&u8g2, 26, 0, ScreenString[0]);
 8001206:	2200      	movs	r2, #0
 8001208:	ab02      	add	r3, sp, #8
		else
		{
			if (BlinkVar == 1)
			{
				sprintf(ScreenString[0], "%d C", Interface->SignedEncActValue);
				u8g2_DrawStr(&u8g2, 26, 0, ScreenString[0]);
 800120a:	211a      	movs	r1, #26
 800120c:	4815      	ldr	r0, [pc, #84]	; (8001264 <MainPage+0x13c>)
 800120e:	f001 fb8f 	bl	8002930 <u8g2_DrawStr>
			}
		}
	}
	if (Interface->_PulsEncoderPressed)
 8001212:	79a3      	ldrb	r3, [r4, #6]
 8001214:	b153      	cbz	r3, 800122c <MainPage+0x104>
	{
		Interface->_PulsEncoderPressed = false;
 8001216:	2500      	movs	r5, #0
		PIDNewSetpoint(pid, Interface->SignedEncActValue);
 8001218:	f9b4 0000 	ldrsh.w	r0, [r4]
		Interface->_PulsEncoderPressed = false;
 800121c:	71a5      	strb	r5, [r4, #6]
		PIDNewSetpoint(pid, Interface->SignedEncActValue);
 800121e:	f7ff fced 	bl	8000bfc <__aeabi_i2f>
 8001222:	4601      	mov	r1, r0
 8001224:	4630      	mov	r0, r6
 8001226:	f000 fc6b 	bl	8001b00 <PIDNewSetpoint>
		Interface->_TargetChanging = false;
 800122a:	7265      	strb	r5, [r4, #9]
	}

	Interface->_ActualPage = PageMain;
 800122c:	2300      	movs	r3, #0
 800122e:	70e3      	strb	r3, [r4, #3]
}
 8001230:	b006      	add	sp, #24
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if (AlarmVar)
 8001236:	782b      	ldrb	r3, [r5, #0]
 8001238:	b123      	cbz	r3, 8001244 <MainPage+0x11c>
		sprintf((uint8_t *)ScreenString[0], "???.? C");
 800123a:	4913      	ldr	r1, [pc, #76]	; (8001288 <MainPage+0x160>)
		sprintf((uint8_t *)ScreenString[0], "Calc...");
 800123c:	a802      	add	r0, sp, #8
 800123e:	f009 fa6d 	bl	800a71c <strcpy>
 8001242:	e7be      	b.n	80011c2 <MainPage+0x9a>
 8001244:	4911      	ldr	r1, [pc, #68]	; (800128c <MainPage+0x164>)
 8001246:	e7f9      	b.n	800123c <MainPage+0x114>
			if (BlinkVar == 1)
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MainPage+0x14c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0e0      	beq.n	8001212 <MainPage+0xea>
				sprintf(ScreenString[0], "%d C", Interface->SignedEncActValue);
 8001250:	463a      	mov	r2, r7
 8001252:	490f      	ldr	r1, [pc, #60]	; (8001290 <MainPage+0x168>)
 8001254:	a802      	add	r0, sp, #8
 8001256:	f009 fa41 	bl	800a6dc <siprintf>
				u8g2_DrawStr(&u8g2, 26, 0, ScreenString[0]);
 800125a:	462a      	mov	r2, r5
 800125c:	ab02      	add	r3, sp, #8
 800125e:	e7d4      	b.n	800120a <MainPage+0xe2>
 8001260:	0800cc91 	.word	0x0800cc91
 8001264:	20001ba0 	.word	0x20001ba0
 8001268:	0800cc1c 	.word	0x0800cc1c
 800126c:	20000704 	.word	0x20000704
 8001270:	0800cc00 	.word	0x0800cc00
 8001274:	20000705 	.word	0x20000705
 8001278:	0800cb90 	.word	0x0800cb90
 800127c:	0800d88c 	.word	0x0800d88c
 8001280:	0800ccbb 	.word	0x0800ccbb
 8001284:	0800cd60 	.word	0x0800cd60
 8001288:	0800ccc3 	.word	0x0800ccc3
 800128c:	0800cccb 	.word	0x0800cccb
 8001290:	0800ccd3 	.word	0x0800ccd3

08001294 <Graphic>:
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	4604      	mov	r4, r0
	u8g2_ClearBuffer(&u8g2);
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <Graphic+0x28>)
{
 800129a:	460d      	mov	r5, r1
 800129c:	4616      	mov	r6, r2
	u8g2_ClearBuffer(&u8g2);
 800129e:	f001 f8a1 	bl	80023e4 <u8g2_ClearBuffer>
	switch(Interface->_ActualPage)
 80012a2:	78e3      	ldrb	r3, [r4, #3]
 80012a4:	b923      	cbnz	r3, 80012b0 <Graphic+0x1c>
			MainPage(Interface, filter, pid);
 80012a6:	4632      	mov	r2, r6
 80012a8:	4629      	mov	r1, r5
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff ff3c 	bl	8001128 <MainPage>
}
 80012b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	u8g2_SendBuffer(&u8g2);
 80012b4:	4801      	ldr	r0, [pc, #4]	; (80012bc <Graphic+0x28>)
 80012b6:	f001 b89f 	b.w	80023f8 <u8g2_SendBuffer>
 80012ba:	bf00      	nop
 80012bc:	20001ba0 	.word	0x20001ba0

080012c0 <PulsEncoderTimerCallback>:

/* PulsEncoderTimerCallback function */
void PulsEncoderTimerCallback(void const * argument)
{
  /* USER CODE BEGIN PulsEncoderTimerCallback */
	GraphicVar._PulsEncoderHolded = true;
 80012c0:	2201      	movs	r2, #1
 80012c2:	4b01      	ldr	r3, [pc, #4]	; (80012c8 <PulsEncoderTimerCallback+0x8>)
 80012c4:	721a      	strb	r2, [r3, #8]
  /* USER CODE END PulsEncoderTimerCallback */
}
 80012c6:	4770      	bx	lr
 80012c8:	20001ea8 	.word	0x20001ea8

080012cc <StartMainTask>:
	  if (GraphicVar._ActualPage == PageMain)
 80012cc:	4c23      	ldr	r4, [pc, #140]	; (800135c <StartMainTask+0x90>)
{
 80012ce:	b58f      	push	{r0, r1, r2, r3, r7, lr}
  MX_USB_DEVICE_Init();
 80012d0:	f008 fb3c 	bl	800994c <MX_USB_DEVICE_Init>
 80012d4:	46a0      	mov	r8, r4
		  if (EnablePWMOut && TempFilter.FilterOK)
 80012d6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001374 <StartMainTask+0xa8>
	  if (GraphicVar._ActualPage == PageMain)
 80012da:	78e3      	ldrb	r3, [r4, #3]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d139      	bne.n	8001354 <StartMainTask+0x88>
		  if (EnablePWMOut && TempFilter.FilterOK)
 80012e0:	f899 3000 	ldrb.w	r3, [r9]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02e      	beq.n	8001346 <StartMainTask+0x7a>
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <StartMainTask+0x94>)
 80012ea:	7d1b      	ldrb	r3, [r3, #20]
 80012ec:	b35b      	cbz	r3, 8001346 <StartMainTask+0x7a>
		  	  GraphicVar._ActualHeatState = Heating;
 80012ee:	2301      	movs	r3, #1
 80012f0:	7163      	strb	r3, [r4, #5]
		  	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 80012f2:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <StartMainTask+0x98>)
 80012f4:	481c      	ldr	r0, [pc, #112]	; (8001368 <StartMainTask+0x9c>)
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	f000 fc04 	bl	8001b04 <PIDUpdate>
 80012fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001300:	6398      	str	r0, [r3, #56]	; 0x38
		   					  TempPID.PID_P, TempPID.PID_I, TempPID.PID_D);
 8001302:	4d19      	ldr	r5, [pc, #100]	; (8001368 <StartMainTask+0x9c>)
		   sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 8001304:	69a8      	ldr	r0, [r5, #24]
 8001306:	f7ff f88f 	bl	8000428 <__aeabi_f2d>
 800130a:	4606      	mov	r6, r0
 800130c:	6a28      	ldr	r0, [r5, #32]
 800130e:	460f      	mov	r7, r1
 8001310:	f7ff f88a 	bl	8000428 <__aeabi_f2d>
 8001314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001318:	69e8      	ldr	r0, [r5, #28]
 800131a:	f7ff f885 	bl	8000428 <__aeabi_f2d>
 800131e:	4632      	mov	r2, r6
 8001320:	463b      	mov	r3, r7
 8001322:	e9cd 0100 	strd	r0, r1, [sp]
 8001326:	4911      	ldr	r1, [pc, #68]	; (800136c <StartMainTask+0xa0>)
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <StartMainTask+0xa4>)
 800132a:	f009 f9d7 	bl	800a6dc <siprintf>
		  CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <StartMainTask+0xa4>)
 8001330:	f7fe ff0e 	bl	8000150 <strlen>
 8001334:	b281      	uxth	r1, r0
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <StartMainTask+0xa4>)
 8001338:	f008 fb56 	bl	80099e8 <CDC_Transmit_FS>
		  osDelay(1000/PID_LOOP_FREQUENCY_HZ);
 800133c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		  osDelay(1);
 8001340:	f006 fe5a 	bl	8007ff8 <osDelay>
 8001344:	e7c9      	b.n	80012da <StartMainTask+0xe>
		  	  GraphicVar._ActualHeatState = HeatOFF;
 8001346:	2300      	movs	r3, #0
		  	  TIM2->CCR2 = 0;
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
		  	  GraphicVar._ActualHeatState = HeatOFF;
 800134c:	f888 3005 	strb.w	r3, [r8, #5]
		  	  TIM2->CCR2 = 0;
 8001350:	6393      	str	r3, [r2, #56]	; 0x38
 8001352:	e7d6      	b.n	8001302 <StartMainTask+0x36>
	  else if (GraphicVar._ActualPage == PageTuning)
 8001354:	2b02      	cmp	r3, #2
 8001356:	d1c0      	bne.n	80012da <StartMainTask+0xe>
		  osDelay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	e7f1      	b.n	8001340 <StartMainTask+0x74>
 800135c:	20001ea8 	.word	0x20001ea8
 8001360:	20001c84 	.word	0x20001c84
 8001364:	20001c28 	.word	0x20001c28
 8001368:	20001cf8 	.word	0x20001cf8
 800136c:	0800cced 	.word	0x0800cced
 8001370:	20001de5 	.word	0x20001de5
 8001374:	20001eb8 	.word	0x20001eb8

08001378 <StartGraphicTask>:
{
 8001378:	b508      	push	{r3, lr}
	  EncoderRead(&GraphicVar, &htim3);
 800137a:	4d0a      	ldr	r5, [pc, #40]	; (80013a4 <StartGraphicTask+0x2c>)
 800137c:	4e0a      	ldr	r6, [pc, #40]	; (80013a8 <StartGraphicTask+0x30>)
	  printf("Signed encoder actual value: %d\r", GraphicVar.SignedEncActValue);
 800137e:	4c0b      	ldr	r4, [pc, #44]	; (80013ac <StartGraphicTask+0x34>)
	  EncoderRead(&GraphicVar, &htim3);
 8001380:	4631      	mov	r1, r6
 8001382:	4808      	ldr	r0, [pc, #32]	; (80013a4 <StartGraphicTask+0x2c>)
 8001384:	f7ff feb2 	bl	80010ec <EncoderRead>
	  printf("Signed encoder actual value: %d\r", GraphicVar.SignedEncActValue);
 8001388:	f9b5 1000 	ldrsh.w	r1, [r5]
 800138c:	4620      	mov	r0, r4
 800138e:	f009 f98d 	bl	800a6ac <iprintf>
	  Graphic(&GraphicVar, &TempFilter, &TempPID);
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <StartGraphicTask+0x38>)
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <StartGraphicTask+0x3c>)
 8001396:	4803      	ldr	r0, [pc, #12]	; (80013a4 <StartGraphicTask+0x2c>)
 8001398:	f7ff ff7c 	bl	8001294 <Graphic>
	  osDelay(20);
 800139c:	2014      	movs	r0, #20
 800139e:	f006 fe2b 	bl	8007ff8 <osDelay>
  for(;;)
 80013a2:	e7ed      	b.n	8001380 <StartGraphicTask+0x8>
 80013a4:	20001ea8 	.word	0x20001ea8
 80013a8:	20002394 	.word	0x20002394
 80013ac:	0800cd15 	.word	0x0800cd15
 80013b0:	20001cf8 	.word	0x20001cf8
 80013b4:	20001c84 	.word	0x20001c84

080013b8 <ReadTempTimerCallback>:
{
 80013b8:	b510      	push	{r4, lr}
	Max6675_Read_TempValue(&ActTemperature);
 80013ba:	4c05      	ldr	r4, [pc, #20]	; (80013d0 <ReadTempTimerCallback+0x18>)
 80013bc:	4620      	mov	r0, r4
 80013be:	f001 fec3 	bl	8003148 <Max6675_Read_TempValue>
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 80013c2:	6821      	ldr	r1, [r4, #0]
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <ReadTempTimerCallback+0x1c>)
 80013c6:	f000 fb57 	bl	8001a78 <LPFilterUpdate>
 80013ca:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <ReadTempTimerCallback+0x20>)
 80013cc:	6018      	str	r0, [r3, #0]
}
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	20002428 	.word	0x20002428
 80013d4:	20001c84 	.word	0x20001c84
 80013d8:	20001c28 	.word	0x20001c28

080013dc <_write>:
{
 80013dc:	4610      	mov	r0, r2
  for(i=0 ; i<len ; i++)
 80013de:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013e0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
{
 80013e4:	b530      	push	{r4, r5, lr}
  for(i=0 ; i<len ; i++)
 80013e6:	4283      	cmp	r3, r0
 80013e8:	db00      	blt.n	80013ec <_write+0x10>
}
 80013ea:	bd30      	pop	{r4, r5, pc}
 80013ec:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	; 0xe80
 80013f0:	07e5      	lsls	r5, r4, #31
 80013f2:	d507      	bpl.n	8001404 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013f4:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013f8:	07e4      	lsls	r4, r4, #31
 80013fa:	d503      	bpl.n	8001404 <_write+0x28>
    ITM_SendChar((*ptr++));
 80013fc:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013fe:	6815      	ldr	r5, [r2, #0]
 8001400:	b115      	cbz	r5, 8001408 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001402:	7014      	strb	r4, [r2, #0]
  for(i=0 ; i<len ; i++)
 8001404:	3301      	adds	r3, #1
 8001406:	e7ee      	b.n	80013e6 <_write+0xa>
      __NOP();
 8001408:	bf00      	nop
 800140a:	e7f8      	b.n	80013fe <_write+0x22>

0800140c <SystemClock_Config>:
{
 800140c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140e:	2410      	movs	r4, #16
{
 8001410:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	4622      	mov	r2, r4
 8001414:	2100      	movs	r1, #0
 8001416:	a80d      	add	r0, sp, #52	; 0x34
 8001418:	f008 fce0 	bl	8009ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141c:	2214      	movs	r2, #20
 800141e:	2100      	movs	r1, #0
 8001420:	eb0d 0002 	add.w	r0, sp, r2
 8001424:	f008 fcda 	bl	8009ddc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001428:	4622      	mov	r2, r4
 800142a:	2100      	movs	r1, #0
 800142c:	a801      	add	r0, sp, #4
 800142e:	f008 fcd5 	bl	8009ddc <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001432:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800143a:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001440:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001444:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144a:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144c:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800144e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001450:	f003 ffca 	bl	80053e8 <HAL_RCC_OscConfig>
 8001454:	b108      	cbz	r0, 800145a <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001456:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145c:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800146a:	4629      	mov	r1, r5
 800146c:	a805      	add	r0, sp, #20
 800146e:	f004 f991 	bl	8005794 <HAL_RCC_ClockConfig>
 8001472:	b108      	cbz	r0, 8001478 <SystemClock_Config+0x6c>
 8001474:	b672      	cpsid	i
  while (1)
 8001476:	e7fe      	b.n	8001476 <SystemClock_Config+0x6a>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001478:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147a:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800147c:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147e:	f004 fa63 	bl	8005948 <HAL_RCCEx_PeriphCLKConfig>
 8001482:	b108      	cbz	r0, 8001488 <SystemClock_Config+0x7c>
 8001484:	b672      	cpsid	i
  while (1)
 8001486:	e7fe      	b.n	8001486 <SystemClock_Config+0x7a>
}
 8001488:	b015      	add	sp, #84	; 0x54
 800148a:	bd30      	pop	{r4, r5, pc}

0800148c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f04f 0810 	mov.w	r8, #16
{
 8001490:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4cb0      	ldr	r4, [pc, #704]	; (8001758 <main+0x2cc>)
{
 8001496:	b0a5      	sub	sp, #148	; 0x94
  HAL_Init();
 8001498:	f001 fe84 	bl	80031a4 <HAL_Init>
  SystemClock_Config();
 800149c:	f7ff ffb6 	bl	800140c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	4642      	mov	r2, r8
 80014a2:	2100      	movs	r1, #0
 80014a4:	a81b      	add	r0, sp, #108	; 0x6c
 80014a6:	f008 fc99 	bl	8009ddc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014aa:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014ac:	f44f 4520 	mov.w	r5, #40960	; 0xa000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	ea43 0308 	orr.w	r3, r3, r8
 80014b4:	61a3      	str	r3, [r4, #24]
 80014b6:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	ea03 0308 	and.w	r3, r3, r8
 80014be:	930a      	str	r3, [sp, #40]	; 0x28
 80014c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80014c4:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c6:	f043 0320 	orr.w	r3, r3, #32
 80014ca:	61a3      	str	r3, [r4, #24]
 80014cc:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 80014ce:	48a3      	ldr	r0, [pc, #652]	; (800175c <main+0x2d0>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80014d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2700      	movs	r7, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	61a3      	str	r3, [r4, #24]
 80014e2:	69a3      	ldr	r3, [r4, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	930c      	str	r3, [sp, #48]	; 0x30
 80014ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	69a3      	ldr	r3, [r4, #24]
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	61a3      	str	r3, [r4, #24]
 80014f6:	69a3      	ldr	r3, [r4, #24]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	930d      	str	r3, [sp, #52]	; 0x34
 80014fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 8001500:	f002 f8c4 	bl	800368c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2102      	movs	r1, #2
 8001508:	4895      	ldr	r0, [pc, #596]	; (8001760 <main+0x2d4>)
 800150a:	f002 f8bf 	bl	800368c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800150e:	4b95      	ldr	r3, [pc, #596]	; (8001764 <main+0x2d8>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	4895      	ldr	r0, [pc, #596]	; (8001768 <main+0x2dc>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	e9cd 531b 	strd	r5, r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001516:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001518:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151a:	951d      	str	r5, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f001 ffd4 	bl	80034c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 8001520:	488e      	ldr	r0, [pc, #568]	; (800175c <main+0x2d0>)
 8001522:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	e9cd 761d 	strd	r7, r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	e9cd 851b 	strd	r8, r5, [sp, #108]	; 0x6c
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 800152c:	f001 ffcc 	bl	80034c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	e9cd 761d 	strd	r7, r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	e9cd 651b 	strd	r6, r5, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001538:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800153a:	4889      	ldr	r0, [pc, #548]	; (8001760 <main+0x2d4>)
 800153c:	a91b      	add	r1, sp, #108	; 0x6c
 800153e:	f001 ffc3 	bl	80034c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001542:	4b8a      	ldr	r3, [pc, #552]	; (800176c <main+0x2e0>)
  HAL_GPIO_Init(PulsEncoder_GPIO_Port, &GPIO_InitStruct);
 8001544:	4886      	ldr	r0, [pc, #536]	; (8001760 <main+0x2d4>)
 8001546:	a91b      	add	r1, sp, #108	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001548:	e9cd 631b 	strd	r6, r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	951d      	str	r5, [sp, #116]	; 0x74
  HAL_GPIO_Init(PulsEncoder_GPIO_Port, &GPIO_InitStruct);
 800154e:	f001 ffbb 	bl	80034c8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001552:	463a      	mov	r2, r7
 8001554:	2105      	movs	r1, #5
 8001556:	2017      	movs	r0, #23
 8001558:	f001 fe6c 	bl	8003234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800155c:	2017      	movs	r0, #23
 800155e:	f001 fe9b 	bl	8003298 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001562:	463a      	mov	r2, r7
 8001564:	2105      	movs	r1, #5
 8001566:	2028      	movs	r0, #40	; 0x28
 8001568:	f001 fe64 	bl	8003234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800156c:	2028      	movs	r0, #40	; 0x28
 800156e:	f001 fe93 	bl	8003298 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001572:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001574:	463a      	mov	r2, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001576:	432b      	orrs	r3, r5
 8001578:	6163      	str	r3, [r4, #20]
 800157a:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800157c:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001580:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	9309      	str	r3, [sp, #36]	; 0x24
 8001584:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001586:	f001 fe55 	bl	8003234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800158a:	200e      	movs	r0, #14
 800158c:	f001 fe84 	bl	8003298 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001590:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001594:	4876      	ldr	r0, [pc, #472]	; (8001770 <main+0x2e4>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001596:	f8df c208 	ldr.w	ip, [pc, #520]	; 80017a0 <main+0x314>
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800159a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800159e:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a6:	e9c0 7704 	strd	r7, r7, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015aa:	e9c0 e302 	strd	lr, r3, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ae:	e9c0 7708 	strd	r7, r7, [r0, #32]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015b2:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b6:	6287      	str	r7, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015b8:	270a      	movs	r7, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80015ba:	e9c0 3806 	strd	r3, r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80015be:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c0:	f004 fac5 	bl	8005b4e <HAL_SPI_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b108      	cbz	r0, 80015cc <main+0x140>
 80015c8:	b672      	cpsid	i
  while (1)
 80015ca:	e7fe      	b.n	80015ca <main+0x13e>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015cc:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 80015d0:	4868      	ldr	r0, [pc, #416]	; (8001774 <main+0x2e8>)
  hi2c1.Init.ClockSpeed = 400000;
 80015d2:	4a69      	ldr	r2, [pc, #420]	; (8001778 <main+0x2ec>)
 80015d4:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80017a4 <main+0x318>
  hi2c1.Init.OwnAddress1 = 0;
 80015d8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	e9c0 9304 	strd	r9, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	6203      	str	r3, [r0, #32]
  hi2c1.Init.ClockSpeed = 400000;
 80015e6:	e9c0 2a00 	strd	r2, sl, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ea:	f002 f933 	bl	8003854 <HAL_I2C_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b108      	cbz	r0, 80015f6 <main+0x16a>
 80015f2:	b672      	cpsid	i
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <main+0x168>
  huart2.Init.BaudRate = 115200;
 80015f6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 80015fa:	4860      	ldr	r0, [pc, #384]	; (800177c <main+0x2f0>)
  huart2.Init.BaudRate = 115200;
 80015fc:	4c60      	ldr	r4, [pc, #384]	; (8001780 <main+0x2f4>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015fe:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001602:	e9c0 4200 	strd	r4, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001606:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001608:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800160e:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001610:	f005 f998 	bl	8006944 <HAL_UART_Init>
 8001614:	4683      	mov	fp, r0
 8001616:	b108      	cbz	r0, 800161c <main+0x190>
 8001618:	b672      	cpsid	i
  while (1)
 800161a:	e7fe      	b.n	800161a <main+0x18e>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161c:	4601      	mov	r1, r0
 800161e:	4642      	mov	r2, r8
 8001620:	a814      	add	r0, sp, #80	; 0x50
 8001622:	f008 fbdb 	bl	8009ddc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001626:	221c      	movs	r2, #28
 8001628:	4659      	mov	r1, fp
 800162a:	a81b      	add	r0, sp, #108	; 0x6c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	e9cd bb12 	strd	fp, fp, [sp, #72]	; 0x48
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001630:	f008 fbd4 	bl	8009ddc <memset>
  htim2.Instance = TIM2;
 8001634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001638:	4c52      	ldr	r4, [pc, #328]	; (8001784 <main+0x2f8>)
  htim2.Init.Prescaler = 0;
 800163a:	e9c4 3b00 	strd	r3, fp, [r4]
  htim2.Init.Period = 1024-1;
 800163e:	f240 33ff 	movw	r3, #1023	; 0x3ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001642:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	e9c4 3b03 	strd	r3, fp, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	f8c4 b008 	str.w	fp, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164c:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164e:	f004 fedd 	bl	800640c <HAL_TIM_Base_Init>
 8001652:	b108      	cbz	r0, 8001658 <main+0x1cc>
 8001654:	b672      	cpsid	i
  while (1)
 8001656:	e7fe      	b.n	8001656 <main+0x1ca>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800165c:	4620      	mov	r0, r4
 800165e:	a914      	add	r1, sp, #80	; 0x50
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f005 f812 	bl	800668a <HAL_TIM_ConfigClockSource>
 8001666:	b108      	cbz	r0, 800166c <main+0x1e0>
 8001668:	b672      	cpsid	i
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x1de>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800166c:	4620      	mov	r0, r4
 800166e:	f004 fef9 	bl	8006464 <HAL_TIM_PWM_Init>
 8001672:	b108      	cbz	r0, 8001678 <main+0x1ec>
 8001674:	b672      	cpsid	i
  while (1)
 8001676:	e7fe      	b.n	8001676 <main+0x1ea>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167c:	a912      	add	r1, sp, #72	; 0x48
 800167e:	4620      	mov	r0, r4
 8001680:	f005 f8f6 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	b108      	cbz	r0, 800168a <main+0x1fe>
 8001686:	b672      	cpsid	i
  while (1)
 8001688:	e7fe      	b.n	8001688 <main+0x1fc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800168c:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.Pulse = 0;
 800168e:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001692:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001694:	2204      	movs	r2, #4
 8001696:	4620      	mov	r0, r4
 8001698:	a91b      	add	r1, sp, #108	; 0x6c
 800169a:	f004 ff91 	bl	80065c0 <HAL_TIM_PWM_ConfigChannel>
 800169e:	4680      	mov	r8, r0
 80016a0:	b108      	cbz	r0, 80016a6 <main+0x21a>
 80016a2:	b672      	cpsid	i
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <main+0x218>
  HAL_TIM_MspPostInit(&htim2);
 80016a6:	4620      	mov	r0, r4
 80016a8:	f000 fc6e 	bl	8001f88 <HAL_TIM_MspPostInit>
  hi2c2.Instance = I2C2;
 80016ac:	4836      	ldr	r0, [pc, #216]	; (8001788 <main+0x2fc>)
 80016ae:	4b37      	ldr	r3, [pc, #220]	; (800178c <main+0x300>)
  hi2c2.Init.OwnAddress1 = 0;
 80016b0:	e9c0 8802 	strd	r8, r8, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 80016b4:	e9c0 3a00 	strd	r3, sl, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	e9c0 9804 	strd	r9, r8, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016bc:	e9c0 8806 	strd	r8, r8, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	f8c0 8020 	str.w	r8, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016c4:	f002 f8c6 	bl	8003854 <HAL_I2C_Init>
 80016c8:	b108      	cbz	r0, 80016ce <main+0x242>
 80016ca:	b672      	cpsid	i
  while (1)
 80016cc:	e7fe      	b.n	80016cc <main+0x240>
  htim3.Instance = TIM3;
 80016ce:	4c30      	ldr	r4, [pc, #192]	; (8001790 <main+0x304>)
 80016d0:	4b30      	ldr	r3, [pc, #192]	; (8001794 <main+0x308>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d2:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  htim3.Init.Prescaler = 0;
 80016d6:	e9c4 3000 	strd	r3, r0, [r4]
  htim3.Init.Period = 65535;
 80016da:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	e9c4 3003 	strd	r3, r0, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e2:	2303      	movs	r3, #3
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016e4:	e9cd 501d 	strd	r5, r0, [sp, #116]	; 0x74
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e8:	e9cd 301b 	strd	r3, r0, [sp, #108]	; 0x6c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016ec:	e9cd 701f 	strd	r7, r0, [sp, #124]	; 0x7c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016f0:	e9cd 5021 	strd	r5, r0, [sp, #132]	; 0x84
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	60a0      	str	r0, [r4, #8]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016f6:	a91b      	add	r1, sp, #108	; 0x6c
 80016f8:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016fa:	61a6      	str	r6, [r4, #24]
  sConfig.IC2Filter = 10;
 80016fc:	9723      	str	r7, [sp, #140]	; 0x8c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80016fe:	f004 fedd 	bl	80064bc <HAL_TIM_Encoder_Init>
 8001702:	4626      	mov	r6, r4
 8001704:	b108      	cbz	r0, 800170a <main+0x27e>
 8001706:	b672      	cpsid	i
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0x27c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800170c:	4820      	ldr	r0, [pc, #128]	; (8001790 <main+0x304>)
 800170e:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001714:	f005 f8ac 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	b108      	cbz	r0, 8001720 <main+0x294>
 800171c:	b672      	cpsid	i
  while (1)
 800171e:	e7fe      	b.n	800171e <main+0x292>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001720:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8001724:	481c      	ldr	r0, [pc, #112]	; (8001798 <main+0x30c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001726:	491d      	ldr	r1, [pc, #116]	; (800179c <main+0x310>)
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001728:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800172c:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001730:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001734:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001736:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800173a:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800173c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001740:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001742:	2410      	movs	r4, #16
  hspi2.Init.CRCPolynomial = 10;
 8001744:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001746:	e9c0 2406 	strd	r2, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800174a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800174c:	f004 f9ff 	bl	8005b4e <HAL_SPI_Init>
 8001750:	4605      	mov	r5, r0
 8001752:	b348      	cbz	r0, 80017a8 <main+0x31c>
 8001754:	b672      	cpsid	i
  while (1)
 8001756:	e7fe      	b.n	8001756 <main+0x2ca>
 8001758:	40021000 	.word	0x40021000
 800175c:	40010800 	.word	0x40010800
 8001760:	40010c00 	.word	0x40010c00
 8001764:	10210000 	.word	0x10210000
 8001768:	40011000 	.word	0x40011000
 800176c:	10310000 	.word	0x10310000
 8001770:	20001c9c 	.word	0x20001c9c
 8001774:	20001d90 	.word	0x20001d90
 8001778:	40005400 	.word	0x40005400
 800177c:	20001e68 	.word	0x20001e68
 8001780:	40004400 	.word	0x40004400
 8001784:	2000234c 	.word	0x2000234c
 8001788:	20001d3c 	.word	0x20001d3c
 800178c:	40005800 	.word	0x40005800
 8001790:	20002394 	.word	0x20002394
 8001794:	40000400 	.word	0x40000400
 8001798:	20001c2c 	.word	0x20001c2c
 800179c:	40003800 	.word	0x40003800
 80017a0:	40013000 	.word	0x40013000
 80017a4:	00061a80 	.word	0x00061a80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a8:	4622      	mov	r2, r4
 80017aa:	4601      	mov	r1, r0
 80017ac:	a81b      	add	r0, sp, #108	; 0x6c
 80017ae:	f008 fb15 	bl	8009ddc <memset>
  htim4.Init.Prescaler = 1000-1;
 80017b2:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim4.Instance = TIM4;
 80017b6:	4c63      	ldr	r4, [pc, #396]	; (8001944 <main+0x4b8>)
  htim4.Init.Prescaler = 1000-1;
 80017b8:	4a63      	ldr	r2, [pc, #396]	; (8001948 <main+0x4bc>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017ba:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 1000-1;
 80017bc:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 18000-1;
 80017c0:	f244 634f 	movw	r3, #17999	; 0x464f
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017c8:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017d2:	f004 fe1b 	bl	800640c <HAL_TIM_Base_Init>
 80017d6:	b108      	cbz	r0, 80017dc <main+0x350>
 80017d8:	b672      	cpsid	i
  while (1)
 80017da:	e7fe      	b.n	80017da <main+0x34e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e0:	4620      	mov	r0, r4
 80017e2:	a91b      	add	r1, sp, #108	; 0x6c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e4:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017e6:	f004 ff50 	bl	800668a <HAL_TIM_ConfigClockSource>
 80017ea:	b108      	cbz	r0, 80017f0 <main+0x364>
 80017ec:	b672      	cpsid	i
  while (1)
 80017ee:	e7fe      	b.n	80017ee <main+0x362>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f0:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017f4:	a914      	add	r1, sp, #80	; 0x50
 80017f6:	4620      	mov	r0, r4
 80017f8:	f005 f83a 	bl	8006870 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4605      	mov	r5, r0
 80017fe:	b108      	cbz	r0, 8001804 <main+0x378>
 8001800:	b672      	cpsid	i
  while (1)
 8001802:	e7fe      	b.n	8001802 <main+0x376>
  HAL_TIM_Base_Start(&htim2);
 8001804:	4851      	ldr	r0, [pc, #324]	; (800194c <main+0x4c0>)
 8001806:	f004 fc77 	bl	80060f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800180a:	2104      	movs	r1, #4
 800180c:	484f      	ldr	r0, [pc, #316]	; (800194c <main+0x4c0>)
 800180e:	f005 f82d 	bl	800686c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001812:	213c      	movs	r1, #60	; 0x3c
 8001814:	484e      	ldr	r0, [pc, #312]	; (8001950 <main+0x4c4>)
 8001816:	f004 fcc0 	bl	800619a <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800181a:	4620      	mov	r0, r4
 800181c:	f004 fc92 	bl	8006144 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim3, STARTTEMPERATURE);
 8001820:	22b4      	movs	r2, #180	; 0xb4
 8001822:	6833      	ldr	r3, [r6, #0]
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 8001824:	494b      	ldr	r1, [pc, #300]	; (8001954 <main+0x4c8>)
  __HAL_TIM_SET_COUNTER(&htim3, STARTTEMPERATURE);
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 8001828:	484b      	ldr	r0, [pc, #300]	; (8001958 <main+0x4cc>)
 800182a:	4b4c      	ldr	r3, [pc, #304]	; (800195c <main+0x4d0>)
 800182c:	4a4c      	ldr	r2, [pc, #304]	; (8001960 <main+0x4d4>)
 800182e:	f000 fe3b 	bl	80024a8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 8001832:	4849      	ldr	r0, [pc, #292]	; (8001958 <main+0x4cc>)
 8001834:	f001 fc1f 	bl	8003076 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 8001838:	4629      	mov	r1, r5
 800183a:	4847      	ldr	r0, [pc, #284]	; (8001958 <main+0x4cc>)
 800183c:	f001 fc23 	bl	8003086 <u8x8_SetPowerSave>
  u8g2_ClearDisplay(&u8g2);
 8001840:	4845      	ldr	r0, [pc, #276]	; (8001958 <main+0x4cc>)
 8001842:	f000 fe1b 	bl	800247c <u8g2_ClearDisplay>
  u8g2_SetFont(&u8g2, u8g2_font_helvR14_tf);
 8001846:	4947      	ldr	r1, [pc, #284]	; (8001964 <main+0x4d8>)
 8001848:	4843      	ldr	r0, [pc, #268]	; (8001958 <main+0x4cc>)
 800184a:	f001 f8b1 	bl	80029b0 <u8g2_SetFont>
  u8g2_SetFontPosTop(&u8g2);
 800184e:	4842      	ldr	r0, [pc, #264]	; (8001958 <main+0x4cc>)
 8001850:	f001 f8a8 	bl	80029a4 <u8g2_SetFontPosTop>
  LPFilterInit(&TempFilter);
 8001854:	4844      	ldr	r0, [pc, #272]	; (8001968 <main+0x4dc>)
 8001856:	f000 f905 	bl	8001a64 <LPFilterInit>
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 160, 100, 27, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <main+0x4e0>)
 800185c:	f04f 547a 	mov.w	r4, #1048576000	; 0x3e800000
 8001860:	9305      	str	r3, [sp, #20]
 8001862:	f04f 4344 	mov.w	r3, #3288334336	; 0xc4000000
 8001866:	9304      	str	r3, [sp, #16]
 8001868:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800186c:	9303      	str	r3, [sp, #12]
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <main+0x4e4>)
 8001870:	f04f 4289 	mov.w	r2, #1149239296	; 0x44800000
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <main+0x4e8>)
 8001878:	4621      	mov	r1, r4
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <main+0x4ec>)
 800187e:	483f      	ldr	r0, [pc, #252]	; (800197c <main+0x4f0>)
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	f000 f926 	bl	8001ad4 <PIDInit>
  PIDNewSetpoint(&TempPID, STARTTEMPERATURE);
 8001888:	493d      	ldr	r1, [pc, #244]	; (8001980 <main+0x4f4>)
 800188a:	483c      	ldr	r0, [pc, #240]	; (800197c <main+0x4f0>)
 800188c:	f000 f938 	bl	8001b00 <PIDNewSetpoint>
  PID_AutoTuneInit(&TempAutoTuneVar, STARTTEMPERATURE, 0.5, TEMPERATURE_SAMPLE_TIME, 20, 128, 100);
 8001890:	2200      	movs	r2, #0
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <main+0x4f8>)
 8001894:	483c      	ldr	r0, [pc, #240]	; (8001988 <main+0x4fc>)
 8001896:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800189a:	2200      	movs	r2, #0
 800189c:	4b3b      	ldr	r3, [pc, #236]	; (800198c <main+0x500>)
 800189e:	9402      	str	r4, [sp, #8]
 80018a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018a4:	2314      	movs	r3, #20
 80018a6:	2200      	movs	r2, #0
 80018a8:	9303      	str	r3, [sp, #12]
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <main+0x504>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 80018ac:	4e39      	ldr	r6, [pc, #228]	; (8001994 <main+0x508>)
  PID_AutoTuneInit(&TempAutoTuneVar, STARTTEMPERATURE, 0.5, TEMPERATURE_SAMPLE_TIME, 20, 128, 100);
 80018ae:	e9cd 2300 	strd	r2, r3, [sp]
 80018b2:	2200      	movs	r2, #0
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <main+0x50c>)
 80018b6:	f000 f9a7 	bl	8001c08 <PID_AutoTuneInit>
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <main+0x510>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 80018bc:	462a      	mov	r2, r5
 80018be:	2101      	movs	r1, #1
 80018c0:	a80e      	add	r0, sp, #56	; 0x38
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 80018c2:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 80018c6:	f006 fb9f 	bl	8008008 <osTimerCreate>
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <main+0x514>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 80018cc:	6030      	str	r0, [r6, #0]
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80018ce:	462a      	mov	r2, r5
 80018d0:	2101      	movs	r1, #1
 80018d2:	a810      	add	r0, sp, #64	; 0x40
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 80018d4:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80018d8:	f006 fb96 	bl	8008008 <osTimerCreate>
 80018dc:	4c31      	ldr	r4, [pc, #196]	; (80019a4 <main+0x518>)
  osTimerDef(PulsEncoderTimer, PulsEncoderTimerCallback);
 80018de:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <main+0x51c>)
  PulsEncoderTimerHandle = osTimerCreate(osTimer(PulsEncoderTimer), osTimerOnce, NULL);
 80018e0:	462a      	mov	r2, r5
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80018e2:	6020      	str	r0, [r4, #0]
  PulsEncoderTimerHandle = osTimerCreate(osTimer(PulsEncoderTimer), osTimerOnce, NULL);
 80018e4:	4629      	mov	r1, r5
 80018e6:	a812      	add	r0, sp, #72	; 0x48
  osTimerDef(PulsEncoderTimer, PulsEncoderTimerCallback);
 80018e8:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  PulsEncoderTimerHandle = osTimerCreate(osTimer(PulsEncoderTimer), osTimerOnce, NULL);
 80018ec:	f006 fb8c 	bl	8008008 <osTimerCreate>
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <main+0x520>)
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 80018f2:	21fa      	movs	r1, #250	; 0xfa
  PulsEncoderTimerHandle = osTimerCreate(osTimer(PulsEncoderTimer), osTimerOnce, NULL);
 80018f4:	6018      	str	r0, [r3, #0]
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 80018f6:	6830      	ldr	r0, [r6, #0]
 80018f8:	f006 fb9e 	bl	8008038 <osTimerStart>
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 80018fc:	6820      	ldr	r0, [r4, #0]
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 80018fe:	4c2c      	ldr	r4, [pc, #176]	; (80019b0 <main+0x524>)
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 8001900:	21fa      	movs	r1, #250	; 0xfa
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 8001902:	ae14      	add	r6, sp, #80	; 0x50
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 8001904:	f006 fb98 	bl	8008038 <osTimerStart>
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 8001908:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800190a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800190c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001910:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001914:	4629      	mov	r1, r5
 8001916:	a814      	add	r0, sp, #80	; 0x50
 8001918:	f006 fb46 	bl	8007fa8 <osThreadCreate>
 800191c:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <main+0x528>)
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 800191e:	ae1b      	add	r6, sp, #108	; 0x6c
 8001920:	340c      	adds	r4, #12
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001922:	6018      	str	r0, [r3, #0]
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 8001924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001928:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800192c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GraphicTaskHandle = osThreadCreate(osThread(GraphicTask), NULL);
 8001930:	4629      	mov	r1, r5
 8001932:	a81b      	add	r0, sp, #108	; 0x6c
 8001934:	f006 fb38 	bl	8007fa8 <osThreadCreate>
 8001938:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <main+0x52c>)
 800193a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800193c:	f006 fb2f 	bl	8007f9e <osKernelStart>
  while (1)
 8001940:	e7fe      	b.n	8001940 <main+0x4b4>
 8001942:	bf00      	nop
 8001944:	20002300 	.word	0x20002300
 8001948:	40000800 	.word	0x40000800
 800194c:	2000234c 	.word	0x2000234c
 8001950:	20002394 	.word	0x20002394
 8001954:	0800e754 	.word	0x0800e754
 8001958:	20001ba0 	.word	0x20001ba0
 800195c:	08002269 	.word	0x08002269
 8001960:	080021f5 	.word	0x080021f5
 8001964:	0800d88c 	.word	0x0800d88c
 8001968:	20001c84 	.word	0x20001c84
 800196c:	3dcccccd 	.word	0x3dcccccd
 8001970:	41d80000 	.word	0x41d80000
 8001974:	42c80000 	.word	0x42c80000
 8001978:	43200000 	.word	0x43200000
 800197c:	20001cf8 	.word	0x20001cf8
 8001980:	43340000 	.word	0x43340000
 8001984:	40590000 	.word	0x40590000
 8001988:	20001ec8 	.word	0x20001ec8
 800198c:	40600000 	.word	0x40600000
 8001990:	3fe00000 	.word	0x3fe00000
 8001994:	20001ec0 	.word	0x20001ec0
 8001998:	40668000 	.word	0x40668000
 800199c:	080013b9 	.word	0x080013b9
 80019a0:	08001119 	.word	0x08001119
 80019a4:	20002348 	.word	0x20002348
 80019a8:	080012c1 	.word	0x080012c1
 80019ac:	20001eb4 	.word	0x20001eb4
 80019b0:	0800cb58 	.word	0x0800cb58
 80019b4:	20001ebc 	.word	0x20001ebc
 80019b8:	20001cf4 	.word	0x20001cf4

080019bc <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == PulsStart_Pin)
 80019bc:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 80019c0:	4601      	mov	r1, r0
 80019c2:	b510      	push	{r4, lr}
	if(GPIO_Pin == PulsStart_Pin)
 80019c4:	d10a      	bne.n	80019dc <HAL_GPIO_EXTI_Callback+0x20>
		if (GraphicVar._ActualPage == PageMain)
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x7c>)
 80019c8:	78db      	ldrb	r3, [r3, #3]
 80019ca:	b91b      	cbnz	r3, 80019d4 <HAL_GPIO_EXTI_Callback+0x18>
			EnablePWMOut = true;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x80>)
			StartTuning = true;
 80019ce:	2201      	movs	r2, #1
			StartTuning = false;
 80019d0:	701a      	strb	r2, [r3, #0]
 80019d2:	e00b      	b.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
		else if (GraphicVar._ActualPage == PageTuning)
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d109      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
			StartTuning = true;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x84>)
 80019da:	e7f8      	b.n	80019ce <HAL_GPIO_EXTI_Callback+0x12>
	else if (GPIO_Pin == PulsStop_Pin)
 80019dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80019e0:	d10a      	bne.n	80019f8 <HAL_GPIO_EXTI_Callback+0x3c>
		if (GraphicVar._ActualPage == PageMain)
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x7c>)
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	b913      	cbnz	r3, 80019ee <HAL_GPIO_EXTI_Callback+0x32>
			EnablePWMOut = false;
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x80>)
 80019ea:	7013      	strb	r3, [r2, #0]
}
 80019ec:	bd10      	pop	{r4, pc}
		else if (GraphicVar._ActualPage == PageTuning)
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d1fc      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
			StartTuning = false;
 80019f2:	2200      	movs	r2, #0
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_GPIO_EXTI_Callback+0x84>)
 80019f6:	e7eb      	b.n	80019d0 <HAL_GPIO_EXTI_Callback+0x14>
	if(GPIO_Pin == PulsEncoder_Pin && HAL_GPIO_ReadPin(PulsEncoder_GPIO_Port, PulsEncoder_Pin) == GPIO_PIN_SET)
 80019f8:	2880      	cmp	r0, #128	; 0x80
 80019fa:	d1f7      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
 80019fc:	4811      	ldr	r0, [pc, #68]	; (8001a44 <HAL_GPIO_EXTI_Callback+0x88>)
 80019fe:	f001 fe3f 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a02:	2801      	cmp	r0, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_GPIO_EXTI_Callback+0x5a>
		GraphicVar._PulsEncoderPressed = true;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x7c>)
		osTimerStart(PulsEncoderTimerHandle, PULS_HOLDED_TIME_MS/portTICK_PERIOD_MS);
 8001a08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
		GraphicVar._PulsEncoderPressed = true;
 8001a0c:	80d8      	strh	r0, [r3, #6]
		osTimerStart(PulsEncoderTimerHandle, PULS_HOLDED_TIME_MS/portTICK_PERIOD_MS);
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	f006 fb11 	bl	8008038 <osTimerStart>
	if(GPIO_Pin == PulsEncoder_Pin && HAL_GPIO_ReadPin(PulsEncoder_GPIO_Port, PulsEncoder_Pin) == GPIO_PIN_RESET)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	480a      	ldr	r0, [pc, #40]	; (8001a44 <HAL_GPIO_EXTI_Callback+0x88>)
 8001a1a:	f001 fe31 	bl	8003680 <HAL_GPIO_ReadPin>
 8001a1e:	4604      	mov	r4, r0
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d1e3      	bne.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
		osTimerStop(PulsEncoderTimerHandle);
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	f006 fb30 	bl	800808c <osTimerStop>
		GraphicVar._PulsEncoderPressed = false;
 8001a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001a32:	80da      	strh	r2, [r3, #6]
		GraphicVar._PulsEncoderHolded = false;
 8001a34:	721c      	strb	r4, [r3, #8]
}
 8001a36:	e7d9      	b.n	80019ec <HAL_GPIO_EXTI_Callback+0x30>
 8001a38:	20001ea8 	.word	0x20001ea8
 8001a3c:	20001eb8 	.word	0x20001eb8
 8001a40:	200022fc 	.word	0x200022fc
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	20001eb4 	.word	0x20001eb4

08001a4c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 8001a4c:	6802      	ldr	r2, [r0, #0]
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d101      	bne.n	8001a58 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001a54:	f001 bbb8 	b.w	80031c8 <HAL_IncTick>
}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <Error_Handler>:
 8001a60:	b672      	cpsid	i
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <Error_Handler+0x2>

08001a64 <LPFilterInit>:
void LPFilterInit(LPFilter *filter)
{
	/* Clear buffer */
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		filter->buffer[n] = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	6003      	str	r3, [r0, #0]
 8001a68:	6043      	str	r3, [r0, #4]
 8001a6a:	6083      	str	r3, [r0, #8]
 8001a6c:	60c3      	str	r3, [r0, #12]

	/* Reset index */
	filter->bufferIndex = 0;

	/* Reset Output values */
	filter->FilteredValue = 0;
 8001a6e:	6103      	str	r3, [r0, #16]
	filter->FilterOK = false;
 8001a70:	2300      	movs	r3, #0
 8001a72:	8283      	strh	r3, [r0, #20]
}
 8001a74:	4770      	bx	lr
	...

08001a78 <LPFilterUpdate>:

float LPFilterUpdate(LPFilter *filter, float InValue)
{
 8001a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Store last input value into the buffer */
	filter->buffer[filter->bufferIndex] = InValue;
 8001a7c:	7d43      	ldrb	r3, [r0, #21]
		filter->bufferIndex = 0;
		filter->FilterOK = true;
	}

	/* Compute output */
	filter->FilteredValue = 0;
 8001a7e:	2500      	movs	r5, #0
	filter->buffer[filter->bufferIndex] = InValue;
 8001a80:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	filter->bufferIndex++;
 8001a84:	3301      	adds	r3, #1
 8001a86:	b2db      	uxtb	r3, r3
	if (filter->bufferIndex>=FILTER_LENGTH)
 8001a88:	2b03      	cmp	r3, #3
		filter->FilterOK = true;
 8001a8a:	bf88      	it	hi
 8001a8c:	2301      	movhi	r3, #1
{
 8001a8e:	4604      	mov	r4, r0

	uint8_t ConvolvIndex = filter->bufferIndex;
 8001a90:	f04f 0704 	mov.w	r7, #4
	filter->bufferIndex++;
 8001a94:	bf94      	ite	ls
 8001a96:	7543      	strbls	r3, [r0, #21]
		filter->FilterOK = true;
 8001a98:	8283      	strhhi	r3, [r0, #20]
	uint8_t ConvolvIndex = filter->bufferIndex;
 8001a9a:	7d46      	ldrb	r6, [r0, #21]
 8001a9c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 8001ad0 <LPFilterUpdate+0x58>
	filter->FilteredValue = 0;
 8001aa0:	6105      	str	r5, [r0, #16]

	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		/* Shift the index (formula require [n-k] value ) */
		if (ConvolvIndex>0)
 8001aa2:	b19e      	cbz	r6, 8001acc <LPFilterUpdate+0x54>
		{
			ConvolvIndex--;
 8001aa4:	3e01      	subs	r6, #1
 8001aa6:	b2f6      	uxtb	r6, r6
		else
		{
			ConvolvIndex = FILTER_LENGTH - 1;
		}
		/* Do the Convolution */
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 8001aa8:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8001aac:	f858 0b04 	ldr.w	r0, [r8], #4
 8001ab0:	f7ff f8f8 	bl	8000ca4 <__aeabi_fmul>
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f7fe ffec 	bl	8000a94 <__addsf3>
 8001abc:	3f01      	subs	r7, #1
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 8001abe:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 8001ac2:	4605      	mov	r5, r0
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 8001ac4:	d1ed      	bne.n	8001aa2 <LPFilterUpdate+0x2a>
 8001ac6:	6120      	str	r0, [r4, #16]
	}

	/* Return the actual filtered value output */

	return filter->FilteredValue;
}
 8001ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ConvolvIndex = FILTER_LENGTH - 1;
 8001acc:	2603      	movs	r6, #3
 8001ace:	e7eb      	b.n	8001aa8 <LPFilterUpdate+0x30>
 8001ad0:	0800cd38 	.word	0x0800cd38

08001ad4 <PIDInit>:
{
	/* Assign the value to the struct variable */
	PID->SampleTime = SampleTime;

	PID->MaxOutputVal = MaxOuputValue;
	PID->MinOutputVal = MinOutputVal;
 8001ad4:	6283      	str	r3, [r0, #40]	; 0x28

	PID->Kp = Kp;
 8001ad6:	9b00      	ldr	r3, [sp, #0]
	PID->SampleTime = SampleTime;
 8001ad8:	6341      	str	r1, [r0, #52]	; 0x34
	PID->Kp = Kp;
 8001ada:	6083      	str	r3, [r0, #8]
	PID->Ki = Ki;
 8001adc:	9b01      	ldr	r3, [sp, #4]
	PID->MaxOutputVal = MaxOuputValue;
 8001ade:	6242      	str	r2, [r0, #36]	; 0x24
	PID->Ki = Ki;
 8001ae0:	60c3      	str	r3, [r0, #12]
	PID->Kd = Kd;
 8001ae2:	9b02      	ldr	r3, [sp, #8]
 8001ae4:	6103      	str	r3, [r0, #16]

	PID->PID_I_Max = PID_I_Max;
 8001ae6:	9b03      	ldr	r3, [sp, #12]
 8001ae8:	62c3      	str	r3, [r0, #44]	; 0x2c
	PID->PID_I_Min = PID_I_Min;
 8001aea:	9b04      	ldr	r3, [sp, #16]
 8001aec:	6303      	str	r3, [r0, #48]	; 0x30

	PID->PID_D_Tau = PID_D_Tau;
 8001aee:	9b05      	ldr	r3, [sp, #20]
 8001af0:	6143      	str	r3, [r0, #20]

	/* Reset the memory */
	PID->Setpoint = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	6003      	str	r3, [r0, #0]
	PID->OutputVal = 0;
 8001af6:	6043      	str	r3, [r0, #4]
	PID->lastError = 0;
 8001af8:	6383      	str	r3, [r0, #56]	; 0x38
	PID->lastInValue = 0;
 8001afa:	63c3      	str	r3, [r0, #60]	; 0x3c
	PID->PID_Error = 0;
 8001afc:	6403      	str	r3, [r0, #64]	; 0x40
}
 8001afe:	4770      	bx	lr

08001b00 <PIDNewSetpoint>:

void PIDNewSetpoint(PID *PID, float Setpoint)
{
	PID->Setpoint = Setpoint;
 8001b00:	6001      	str	r1, [r0, #0]
}
 8001b02:	4770      	bx	lr

08001b04 <PIDUpdate>:
	PID->lastError = 0;
	PID->lastInValue = 0;
}

uint32_t PIDUpdate(PID *PID, float ActValue)
{
 8001b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b08:	4604      	mov	r4, r0
	/* Calculation of the actual error */
	PID->PID_Error = PID->Setpoint - ActValue;
 8001b0a:	6800      	ldr	r0, [r0, #0]
{
 8001b0c:	460e      	mov	r6, r1
	PID->PID_Error = PID->Setpoint - ActValue;
 8001b0e:	f7fe ffbf 	bl	8000a90 <__aeabi_fsub>

	/* Calculate the PROPORTIONAL part */
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001b12:	68a1      	ldr	r1, [r4, #8]
	PID->PID_Error = PID->Setpoint - ActValue;
 8001b14:	6420      	str	r0, [r4, #64]	; 0x40
 8001b16:	4605      	mov	r5, r0
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001b18:	f7ff f8c4 	bl	8000ca4 <__aeabi_fmul>

	/* Calculate the INTEGRATIVE part */
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001b1c:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 8001b20:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001b24:	61a0      	str	r0, [r4, #24]
 8001b26:	4680      	mov	r8, r0
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001b28:	68e0      	ldr	r0, [r4, #12]
 8001b2a:	f7ff f8bb 	bl	8000ca4 <__aeabi_fmul>
 8001b2e:	4649      	mov	r1, r9
 8001b30:	f7ff f8b8 	bl	8000ca4 <__aeabi_fmul>
 8001b34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001b36:	4607      	mov	r7, r0
 8001b38:	4628      	mov	r0, r5
 8001b3a:	f7fe ffa9 	bl	8000a90 <__aeabi_fsub>
 8001b3e:	4601      	mov	r1, r0
 8001b40:	4638      	mov	r0, r7
 8001b42:	f7ff f8af 	bl	8000ca4 <__aeabi_fmul>
 8001b46:	69e1      	ldr	r1, [r4, #28]
 8001b48:	f7fe ffa4 	bl	8000a94 <__addsf3>

	//Anti-wind-up via integrator clamping
	if (PID->PID_I>PID->PID_I_Max)
 8001b4c:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001b50:	61e0      	str	r0, [r4, #28]
	if (PID->PID_I>PID->PID_I_Max)
 8001b52:	4651      	mov	r1, sl
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001b54:	4607      	mov	r7, r0
	if (PID->PID_I>PID->PID_I_Max)
 8001b56:	f7ff fa61 	bl	800101c <__aeabi_fcmpgt>
 8001b5a:	b110      	cbz	r0, 8001b62 <PIDUpdate+0x5e>
	{
		PID->PID_I = PID->PID_I_Max;
	}
	else if (PID->PID_I<PID->PID_I_Min)
	{
		PID->PID_I = PID->PID_I_Min;
 8001b5c:	f8c4 a01c 	str.w	sl, [r4, #28]
 8001b60:	e007      	b.n	8001b72 <PIDUpdate+0x6e>
	else if (PID->PID_I<PID->PID_I_Min)
 8001b62:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8001b66:	4638      	mov	r0, r7
 8001b68:	4651      	mov	r1, sl
 8001b6a:	f7ff fa39 	bl	8000fe0 <__aeabi_fcmplt>
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	d1f4      	bne.n	8001b5c <PIDUpdate+0x58>
	}

	/* Calculate the DERIVATIVE part (band limited and measurement dependent) */
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001b72:	6961      	ldr	r1, [r4, #20]
 8001b74:	4608      	mov	r0, r1
 8001b76:	f7fe ff8d 	bl	8000a94 <__addsf3>
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001b7a:	6921      	ldr	r1, [r4, #16]
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001b7c:	4607      	mov	r7, r0
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001b7e:	4608      	mov	r0, r1
 8001b80:	f7fe ff88 	bl	8000a94 <__addsf3>
 8001b84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001b86:	4682      	mov	sl, r0
 8001b88:	4630      	mov	r0, r6
 8001b8a:	f7fe ff81 	bl	8000a90 <__aeabi_fsub>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	4650      	mov	r0, sl
 8001b92:	f7ff f887 	bl	8000ca4 <__aeabi_fmul>
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001b96:	4649      	mov	r1, r9
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001b98:	4682      	mov	sl, r0
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	f7fe ff78 	bl	8000a90 <__aeabi_fsub>
 8001ba0:	6a21      	ldr	r1, [r4, #32]
 8001ba2:	f7ff f87f 	bl	8000ca4 <__aeabi_fmul>
 8001ba6:	4601      	mov	r1, r0
 8001ba8:	4650      	mov	r0, sl
 8001baa:	f7fe ff73 	bl	8000a94 <__addsf3>
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 8001bae:	4639      	mov	r1, r7
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001bb0:	f100 4a00 	add.w	sl, r0, #2147483648	; 0x80000000
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 8001bb4:	4648      	mov	r0, r9
 8001bb6:	f7fe ff6d 	bl	8000a94 <__addsf3>
 8001bba:	4601      	mov	r1, r0
 8001bbc:	4650      	mov	r0, sl
 8001bbe:	f7ff f925 	bl	8000e0c <__aeabi_fdiv>
 8001bc2:	4607      	mov	r7, r0

	/* Calculate the total PID value and check the upper/lower output limits*/
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001bc4:	69e1      	ldr	r1, [r4, #28]
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 8001bc6:	6220      	str	r0, [r4, #32]
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001bc8:	4640      	mov	r0, r8
 8001bca:	f7fe ff63 	bl	8000a94 <__addsf3>
 8001bce:	4639      	mov	r1, r7
 8001bd0:	f7fe ff60 	bl	8000a94 <__addsf3>

	if (PID->OutputVal>PID->MaxOutputVal)
 8001bd4:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001bd8:	6060      	str	r0, [r4, #4]
	if (PID->OutputVal>PID->MaxOutputVal)
 8001bda:	4641      	mov	r1, r8
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001bdc:	4607      	mov	r7, r0
	if (PID->OutputVal>PID->MaxOutputVal)
 8001bde:	f7ff fa1d 	bl	800101c <__aeabi_fcmpgt>
 8001be2:	b110      	cbz	r0, 8001bea <PIDUpdate+0xe6>
	{
		PID->OutputVal = PID->MaxOutputVal;
	}
	else if (PID->OutputVal<PID->MinOutputVal)
	{
		PID->OutputVal = PID->MinOutputVal;
 8001be4:	f8c4 8004 	str.w	r8, [r4, #4]
 8001be8:	e007      	b.n	8001bfa <PIDUpdate+0xf6>
	else if (PID->OutputVal<PID->MinOutputVal)
 8001bea:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 8001bee:	4638      	mov	r0, r7
 8001bf0:	4641      	mov	r1, r8
 8001bf2:	f7ff f9f5 	bl	8000fe0 <__aeabi_fcmplt>
 8001bf6:	2800      	cmp	r0, #0
 8001bf8:	d1f4      	bne.n	8001be4 <PIDUpdate+0xe0>
	/* Update the last values*/
	PID->lastError = PID->PID_Error;
	PID->lastInValue = ActValue;

	/* Return the actual PID output value */
	return (uint32_t)PID->OutputVal;
 8001bfa:	6860      	ldr	r0, [r4, #4]
	PID->lastError = PID->PID_Error;
 8001bfc:	63a5      	str	r5, [r4, #56]	; 0x38
	PID->lastInValue = ActValue;
 8001bfe:	63e6      	str	r6, [r4, #60]	; 0x3c
	return (uint32_t)PID->OutputVal;
 8001c00:	f7ff fa3c 	bl	800107c <__aeabi_f2uiz>
}
 8001c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001c08 <PID_AutoTuneInit>:

void PID_AutoTuneInit(PID_AutoTune *PID_AutoTuneStruct, double Setpoint, double NyquistSensorResolution,
						float SampleTime/*Second*/, int16_t TunningDeep, double OutputStartVal, double OutputStepVal)
{
 8001c08:	b510      	push	{r4, lr}
	PID_AutoTuneStruct->setpoint = Setpoint;
	PID_AutoTuneStruct->noiseBand = NyquistSensorResolution;
	PID_AutoTuneStruct->sampleTime = SampleTime * 1000;
 8001c0a:	490d      	ldr	r1, [pc, #52]	; (8001c40 <PID_AutoTuneInit+0x38>)
{
 8001c0c:	4604      	mov	r4, r0
	PID_AutoTuneStruct->setpoint = Setpoint;
 8001c0e:	e9c0 2306 	strd	r2, r3, [r0, #24]
	PID_AutoTuneStruct->noiseBand = NyquistSensorResolution;
 8001c12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001c16:	e9c0 2308 	strd	r2, r3, [r0, #32]
	PID_AutoTuneStruct->sampleTime = SampleTime * 1000;
 8001c1a:	9804      	ldr	r0, [sp, #16]
 8001c1c:	f7ff f842 	bl	8000ca4 <__aeabi_fmul>
 8001c20:	f7ff fa06 	bl	8001030 <__aeabi_f2iz>
	PID_AutoTuneStruct->nLookBack = TunningDeep;
 8001c24:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
	PID_AutoTuneStruct->sampleTime = SampleTime * 1000;
 8001c28:	8720      	strh	r0, [r4, #56]	; 0x38
	PID_AutoTuneStruct->nLookBack = TunningDeep;
 8001c2a:	8763      	strh	r3, [r4, #58]	; 0x3a
	PID_AutoTuneStruct->outputStart = OutputStartVal;
 8001c2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001c30:	e9c4 23f6 	strd	r2, r3, [r4, #984]	; 0x3d8
	PID_AutoTuneStruct->oStep = OutputStepVal;
 8001c34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8001c38:	e9c4 23f4 	strd	r2, r3, [r4, #976]	; 0x3d0
}
 8001c3c:	bd10      	pop	{r4, pc}
 8001c3e:	bf00      	nop
 8001c40:	447a0000 	.word	0x447a0000

08001c44 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_MspInit+0x48>)
{
 8001c46:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c48:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c4a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	f042 0201 	orr.w	r2, r2, #1
 8001c50:	619a      	str	r2, [r3, #24]
 8001c52:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c54:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c58:	f002 0201 	and.w	r2, r2, #1
 8001c5c:	9200      	str	r2, [sp, #0]
 8001c5e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c66:	61da      	str	r2, [r3, #28]
 8001c68:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c6a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c74:	f001 fade 	bl	8003234 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_MspInit+0x4c>)
 8001c7a:	6853      	ldr	r3, [r2, #4]
 8001c7c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	b003      	add	sp, #12
 8001c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40010000 	.word	0x40010000

08001c94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c94:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	2610      	movs	r6, #16
{
 8001c98:	4605      	mov	r5, r0
 8001c9a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	4632      	mov	r2, r6
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	eb0d 0006 	add.w	r0, sp, r6
 8001ca4:	f008 f89a 	bl	8009ddc <memset>
  if(hi2c->Instance==I2C1)
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	4a3b      	ldr	r2, [pc, #236]	; (8001d98 <HAL_I2C_MspInit+0x104>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d137      	bne.n	8001d20 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4c3a      	ldr	r4, [pc, #232]	; (8001d9c <HAL_I2C_MspInit+0x108>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb2:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb8:	4839      	ldr	r0, [pc, #228]	; (8001da0 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	f043 0308 	orr.w	r3, r3, #8
 8001cbe:	61a3      	str	r3, [r4, #24]
 8001cc0:	69a3      	ldr	r3, [r4, #24]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cca:	2312      	movs	r3, #18
 8001ccc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	eb0d 0106 	add.w	r1, sp, r6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f001 fbf6 	bl	80034c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001cdc:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_I2C_MspInit+0x110>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001cde:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ce0:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001ce2:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ce4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cee:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001cf0:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cf6:	61e3      	str	r3, [r4, #28]
 8001cf8:	69e3      	ldr	r3, [r4, #28]
 8001cfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d02:	f001 fa97 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d06:	201f      	movs	r0, #31
 8001d08:	f001 fac6 	bl	8003298 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d0c:	2020      	movs	r0, #32
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2105      	movs	r1, #5
 8001d12:	f001 fa8f 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d16:	2020      	movs	r0, #32

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d18:	f001 fabe 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d1c:	b008      	add	sp, #32
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2c->Instance==I2C2)
 8001d20:	4a21      	ldr	r2, [pc, #132]	; (8001da8 <HAL_I2C_MspInit+0x114>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d1fa      	bne.n	8001d1c <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4c1d      	ldr	r4, [pc, #116]	; (8001d9c <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	481c      	ldr	r0, [pc, #112]	; (8001da0 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	61a3      	str	r3, [r4, #24]
 8001d36:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d38:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	2312      	movs	r3, #18
 8001d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f001 fbbc 	bl	80034c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d50:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d52:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d58:	61e3      	str	r3, [r4, #28]
 8001d5a:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001d5c:	4c13      	ldr	r4, [pc, #76]	; (8001dac <HAL_I2C_MspInit+0x118>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d62:	9303      	str	r3, [sp, #12]
 8001d64:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_I2C_MspInit+0x11c>)
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001d68:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d6a:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d74:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d78:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001d7c:	f001 fa9a 	bl	80032b4 <HAL_DMA_Init>
 8001d80:	b108      	cbz	r0, 8001d86 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001d82:	f7ff fe6d 	bl	8001a60 <Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001d86:	2021      	movs	r0, #33	; 0x21
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2105      	movs	r1, #5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001d8c:	636c      	str	r4, [r5, #52]	; 0x34
 8001d8e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001d90:	f001 fa50 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001d94:	2021      	movs	r0, #33	; 0x21
 8001d96:	e7bf      	b.n	8001d18 <HAL_I2C_MspInit+0x84>
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40005800 	.word	0x40005800
 8001dac:	200022b8 	.word	0x200022b8
 8001db0:	40020044 	.word	0x40020044

08001db4 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	2210      	movs	r2, #16
{
 8001db6:	b510      	push	{r4, lr}
 8001db8:	4604      	mov	r4, r0
 8001dba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	eb0d 0002 	add.w	r0, sp, r2
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	f008 f80b 	bl	8009ddc <memset>
  if(hspi->Instance==SPI1)
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	4a32      	ldr	r2, [pc, #200]	; (8001e94 <HAL_SPI_MspInit+0xe0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d12f      	bne.n	8001e2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <HAL_SPI_MspInit+0xe4>)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2120      	movs	r1, #32
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd4:	4831      	ldr	r0, [pc, #196]	; (8001e9c <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001dda:	619a      	str	r2, [r3, #24]
 8001ddc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dde:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001de0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001de4:	9200      	str	r2, [sp, #0]
 8001de6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de8:	699a      	ldr	r2, [r3, #24]
 8001dea:	f042 0204 	orr.w	r2, r2, #4
 8001dee:	619a      	str	r2, [r3, #24]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e00:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e02:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f001 fb5f 	bl	80034c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	4823      	ldr	r0, [pc, #140]	; (8001e9c <HAL_SPI_MspInit+0xe8>)
 8001e0e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f001 fb57 	bl	80034c8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001e1a:	2023      	movs	r0, #35	; 0x23
 8001e1c:	4622      	mov	r2, r4
 8001e1e:	2105      	movs	r1, #5
 8001e20:	f001 fa08 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e24:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e26:	f001 fa37 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e2a:	b008      	add	sp, #32
 8001e2c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	; (8001ea0 <HAL_SPI_MspInit+0xec>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d1fa      	bne.n	8001e2a <HAL_SPI_MspInit+0x76>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_SPI_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e36:	481b      	ldr	r0, [pc, #108]	; (8001ea4 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e38:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e40:	61da      	str	r2, [r3, #28]
 8001e42:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e44:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e4a:	9202      	str	r2, [sp, #8]
 8001e4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	f042 0208 	orr.w	r2, r2, #8
 8001e54:	619a      	str	r2, [r3, #24]
 8001e56:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	9303      	str	r3, [sp, #12]
 8001e62:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f001 fb2b 	bl	80034c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e72:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e76:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <HAL_SPI_MspInit+0xf0>)
 8001e78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f001 fb22 	bl	80034c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001e84:	2024      	movs	r0, #36	; 0x24
 8001e86:	4622      	mov	r2, r4
 8001e88:	2105      	movs	r1, #5
 8001e8a:	f001 f9d3 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001e8e:	2024      	movs	r0, #36	; 0x24
 8001e90:	e7c9      	b.n	8001e26 <HAL_SPI_MspInit+0x72>
 8001e92:	bf00      	nop
 8001e94:	40013000 	.word	0x40013000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010800 	.word	0x40010800
 8001ea0:	40003800 	.word	0x40003800
 8001ea4:	40010c00 	.word	0x40010c00

08001ea8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001ea8:	6803      	ldr	r3, [r0, #0]
{
 8001eaa:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb0:	d115      	bne.n	8001ede <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eb2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001eb6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001eb8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	61da      	str	r2, [r3, #28]
 8001ec0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ec2:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001eca:	2105      	movs	r1, #5
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ecc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ece:	f001 f9b1 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed2:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ed4:	b003      	add	sp, #12
 8001ed6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001eda:	f001 b9dd 	b.w	8003298 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM4)
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <HAL_TIM_Base_MspInit+0x64>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d110      	bne.n	8001f06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ee6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ee8:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001eea:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	61da      	str	r2, [r3, #28]
 8001ef2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ef4:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001efe:	f001 f999 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001f02:	201e      	movs	r0, #30
 8001f04:	e7e6      	b.n	8001ed4 <HAL_TIM_Base_MspInit+0x2c>
}
 8001f06:	b003      	add	sp, #12
 8001f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40021000 	.word	0x40021000

08001f14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4604      	mov	r4, r0
 8001f18:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	a802      	add	r0, sp, #8
 8001f20:	f007 ff5c 	bl	8009ddc <memset>
  if(htim_encoder->Instance==TIM3)
 8001f24:	6822      	ldr	r2, [r4, #0]
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x68>)
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d125      	bne.n	8001f78 <HAL_TIM_Encoder_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001f30:	69da      	ldr	r2, [r3, #28]
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f34:	f042 0202 	orr.w	r2, r2, #2
 8001f38:	61da      	str	r2, [r3, #28]
 8001f3a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3e:	f002 0202 	and.w	r2, r2, #2
 8001f42:	9200      	str	r2, [sp, #0]
 8001f44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	f042 0208 	orr.w	r2, r2, #8
 8001f4c:	619a      	str	r2, [r3, #24]
 8001f4e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f50:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f001 fab1 	bl	80034c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x70>)
 8001f68:	6853      	ldr	r3, [r2, #4]
 8001f6a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001f6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f76:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd10      	pop	{r4, pc}
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40010c00 	.word	0x40010c00
 8001f84:	40010000 	.word	0x40010000

08001f88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f88:	b510      	push	{r4, lr}
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	2210      	movs	r2, #16
 8001f90:	2100      	movs	r1, #0
 8001f92:	a802      	add	r0, sp, #8
 8001f94:	f007 ff22 	bl	8009ddc <memset>
  if(htim->Instance==TIM2)
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9e:	d112      	bne.n	8001fc6 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fa4:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	4809      	ldr	r0, [pc, #36]	; (8001fcc <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	f042 0204 	orr.w	r2, r2, #4
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8001fba:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	f001 fa81 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001fc6:	b006      	add	sp, #24
 8001fc8:	bd10      	pop	{r4, pc}
 8001fca:	bf00      	nop
 8001fcc:	40010800 	.word	0x40010800

08001fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	2100      	movs	r1, #0
 8001fda:	a802      	add	r0, sp, #8
 8001fdc:	f007 fefe 	bl	8009ddc <memset>
  if(huart->Instance==USART2)
 8001fe0:	6822      	ldr	r2, [r4, #0]
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_UART_MspInit+0x6c>)
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d126      	bne.n	8002036 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001fec:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	4814      	ldr	r0, [pc, #80]	; (8002040 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ff4:	61da      	str	r2, [r3, #28]
 8001ff6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001ffe:	9200      	str	r2, [sp, #0]
 8002000:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	f042 0204 	orr.w	r2, r2, #4
 8002008:	619a      	str	r2, [r3, #24]
 800200a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	9301      	str	r3, [sp, #4]
 8002014:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002020:	f001 fa52 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002024:	2108      	movs	r1, #8
 8002026:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002032:	f001 fa49 	bl	80034c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002036:	b006      	add	sp, #24
 8002038:	bd10      	pop	{r4, pc}
 800203a:	bf00      	nop
 800203c:	40004400 	.word	0x40004400
 8002040:	40010800 	.word	0x40010800

08002044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b510      	push	{r4, lr}
 8002046:	4601      	mov	r1, r0
 8002048:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800204a:	2200      	movs	r2, #0
 800204c:	2019      	movs	r0, #25
 800204e:	f001 f8f1 	bl	8003234 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002052:	2019      	movs	r0, #25
 8002054:	f001 f920 	bl	8003298 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002058:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800205a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 800205c:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800205e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	699b      	ldr	r3, [r3, #24]
  uwTimclock = HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002068:	4c11      	ldr	r4, [pc, #68]	; (80020b0 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800206a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002072:	f003 fc4b 	bl	800590c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002076:	f003 fc39 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_InitTick+0x70>)
 800207c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800207e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002082:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002084:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_InitTick+0x74>)
 8002086:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800208a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 800208e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002090:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8002092:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002096:	f004 f9b9 	bl	800640c <HAL_TIM_Base_Init>
 800209a:	b920      	cbnz	r0, 80020a6 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800209c:	4620      	mov	r0, r4
 800209e:	f004 f851 	bl	8006144 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 80020a2:	b008      	add	sp, #32
 80020a4:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	e7fb      	b.n	80020a2 <HAL_InitTick+0x5e>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	200023dc 	.word	0x200023dc
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	000f4240 	.word	0x000f4240

080020bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler>

080020be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <HardFault_Handler>

080020c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler>

080020c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <BusFault_Handler>

080020c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler>

080020c6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	4770      	bx	lr

080020c8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80020c8:	4801      	ldr	r0, [pc, #4]	; (80020d0 <DMA1_Channel4_IRQHandler+0x8>)
 80020ca:	f001 b967 	b.w	800339c <HAL_DMA_IRQHandler>
 80020ce:	bf00      	nop
 80020d0:	200022b8 	.word	0x200022b8

080020d4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80020d4:	4801      	ldr	r0, [pc, #4]	; (80020dc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80020d6:	f002 bc35 	b.w	8004944 <HAL_PCD_IRQHandler>
 80020da:	bf00      	nop
 80020dc:	20003104 	.word	0x20003104

080020e0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80020e0:	2080      	movs	r0, #128	; 0x80
 80020e2:	f001 bad9 	b.w	8003698 <HAL_GPIO_EXTI_IRQHandler>
	...

080020e8 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e8:	4801      	ldr	r0, [pc, #4]	; (80020f0 <TIM1_UP_IRQHandler+0x8>)
 80020ea:	f004 b8b5 	b.w	8006258 <HAL_TIM_IRQHandler>
 80020ee:	bf00      	nop
 80020f0:	200023dc 	.word	0x200023dc

080020f4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f4:	4801      	ldr	r0, [pc, #4]	; (80020fc <TIM2_IRQHandler+0x8>)
 80020f6:	f004 b8af 	b.w	8006258 <HAL_TIM_IRQHandler>
 80020fa:	bf00      	nop
 80020fc:	2000234c 	.word	0x2000234c

08002100 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <TIM4_IRQHandler+0x8>)
 8002102:	f004 b8a9 	b.w	8006258 <HAL_TIM_IRQHandler>
 8002106:	bf00      	nop
 8002108:	20002300 	.word	0x20002300

0800210c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <I2C1_EV_IRQHandler+0x8>)
 800210e:	f001 be85 	b.w	8003e1c <HAL_I2C_EV_IRQHandler>
 8002112:	bf00      	nop
 8002114:	20001d90 	.word	0x20001d90

08002118 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002118:	4801      	ldr	r0, [pc, #4]	; (8002120 <I2C1_ER_IRQHandler+0x8>)
 800211a:	f002 bacf 	b.w	80046bc <HAL_I2C_ER_IRQHandler>
 800211e:	bf00      	nop
 8002120:	20001d90 	.word	0x20001d90

08002124 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002124:	4801      	ldr	r0, [pc, #4]	; (800212c <I2C2_EV_IRQHandler+0x8>)
 8002126:	f001 be79 	b.w	8003e1c <HAL_I2C_EV_IRQHandler>
 800212a:	bf00      	nop
 800212c:	20001d3c 	.word	0x20001d3c

08002130 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002130:	4801      	ldr	r0, [pc, #4]	; (8002138 <SPI1_IRQHandler+0x8>)
 8002132:	f003 beef 	b.w	8005f14 <HAL_SPI_IRQHandler>
 8002136:	bf00      	nop
 8002138:	20001c9c 	.word	0x20001c9c

0800213c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800213c:	4801      	ldr	r0, [pc, #4]	; (8002144 <SPI2_IRQHandler+0x8>)
 800213e:	f003 bee9 	b.w	8005f14 <HAL_SPI_IRQHandler>
 8002142:	bf00      	nop
 8002144:	20001c2c 	.word	0x20001c2c

08002148 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800214a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800214e:	f001 faa3 	bl	8003698 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800215a:	f001 ba9d 	b.w	8003698 <HAL_GPIO_EXTI_IRQHandler>

0800215e <_getpid>:
 800215e:	2001      	movs	r0, #1
 8002160:	4770      	bx	lr

08002162 <_kill>:
 8002162:	b508      	push	{r3, lr}
 8002164:	f007 fe02 	bl	8009d6c <__errno>
 8002168:	2316      	movs	r3, #22
 800216a:	6003      	str	r3, [r0, #0]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295
 8002170:	bd08      	pop	{r3, pc}

08002172 <_exit>:
 8002172:	b508      	push	{r3, lr}
 8002174:	f007 fdfa 	bl	8009d6c <__errno>
 8002178:	2316      	movs	r3, #22
 800217a:	6003      	str	r3, [r0, #0]
 800217c:	e7fe      	b.n	800217c <_exit+0xa>

0800217e <_read>:
 800217e:	b570      	push	{r4, r5, r6, lr}
 8002180:	460e      	mov	r6, r1
 8002182:	4614      	mov	r4, r2
 8002184:	2500      	movs	r5, #0
 8002186:	42a5      	cmp	r5, r4
 8002188:	db01      	blt.n	800218e <_read+0x10>
 800218a:	4620      	mov	r0, r4
 800218c:	bd70      	pop	{r4, r5, r6, pc}
 800218e:	f3af 8000 	nop.w
 8002192:	5570      	strb	r0, [r6, r5]
 8002194:	3501      	adds	r5, #1
 8002196:	e7f6      	b.n	8002186 <_read+0x8>

08002198 <_close>:
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	4770      	bx	lr

0800219e <_fstat>:
 800219e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a2:	2000      	movs	r0, #0
 80021a4:	604b      	str	r3, [r1, #4]
 80021a6:	4770      	bx	lr

080021a8 <_isatty>:
 80021a8:	2001      	movs	r0, #1
 80021aa:	4770      	bx	lr

080021ac <_lseek>:
 80021ac:	2000      	movs	r0, #0
 80021ae:	4770      	bx	lr

080021b0 <_sbrk>:
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <_sbrk+0x30>)
 80021b2:	4602      	mov	r2, r0
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	b510      	push	{r4, lr}
 80021b8:	b909      	cbnz	r1, 80021be <_sbrk+0xe>
 80021ba:	490a      	ldr	r1, [pc, #40]	; (80021e4 <_sbrk+0x34>)
 80021bc:	6019      	str	r1, [r3, #0]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	4909      	ldr	r1, [pc, #36]	; (80021e8 <_sbrk+0x38>)
 80021c2:	4c0a      	ldr	r4, [pc, #40]	; (80021ec <_sbrk+0x3c>)
 80021c4:	4402      	add	r2, r0
 80021c6:	1b09      	subs	r1, r1, r4
 80021c8:	428a      	cmp	r2, r1
 80021ca:	d906      	bls.n	80021da <_sbrk+0x2a>
 80021cc:	f007 fdce 	bl	8009d6c <__errno>
 80021d0:	230c      	movs	r3, #12
 80021d2:	6003      	str	r3, [r0, #0]
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	bd10      	pop	{r4, pc}
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e7fc      	b.n	80021d8 <_sbrk+0x28>
 80021de:	bf00      	nop
 80021e0:	2000070c 	.word	0x2000070c
 80021e4:	20003400 	.word	0x20003400
 80021e8:	20005000 	.word	0x20005000
 80021ec:	00000400 	.word	0x00000400

080021f0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f0:	4770      	bx	lr
	...

080021f4 <u8x8_byte_stm32_hw_i2c>:

extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80021f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021f6:	3914      	subs	r1, #20
 80021f8:	290c      	cmp	r1, #12
 80021fa:	d82d      	bhi.n	8002258 <u8x8_byte_stm32_hw_i2c+0x64>
 80021fc:	e8df f001 	tbb	[pc, r1]
 8002200:	072c2c11 	.word	0x072c2c11
 8002204:	2c2c1f1b 	.word	0x2c2c1f1b
 8002208:	2c2c2c2c 	.word	0x2c2c2c2c
 800220c:	11          	.byte	0x11
 800220d:	00          	.byte	0x00
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
		{
			buffer[buf_idx++] = *data;
			data++;
 800220e:	2400      	movs	r4, #0
 8002210:	4812      	ldr	r0, [pc, #72]	; (800225c <u8x8_byte_stm32_hw_i2c+0x68>)
			buffer[buf_idx++] = *data;
 8002212:	4d13      	ldr	r5, [pc, #76]	; (8002260 <u8x8_byte_stm32_hw_i2c+0x6c>)
 8002214:	7801      	ldrb	r1, [r0, #0]
 8002216:	440a      	add	r2, r1
 8002218:	b2d2      	uxtb	r2, r2
		while( arg_int > 0 )
 800221a:	4291      	cmp	r1, r2
 800221c:	d104      	bne.n	8002228 <u8x8_byte_stm32_hw_i2c+0x34>
 800221e:	b104      	cbz	r4, 8002222 <u8x8_byte_stm32_hw_i2c+0x2e>
 8002220:	7001      	strb	r1, [r0, #0]
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
		break;
	default:
		return 0;
	}
	return 1;
 8002222:	2001      	movs	r0, #1
}
 8002224:	b002      	add	sp, #8
 8002226:	bd70      	pop	{r4, r5, r6, pc}
			buffer[buf_idx++] = *data;
 8002228:	f813 6b01 	ldrb.w	r6, [r3], #1
 800222c:	1c4c      	adds	r4, r1, #1
 800222e:	546e      	strb	r6, [r5, r1]
 8002230:	b2e1      	uxtb	r1, r4
			data++;
 8002232:	2401      	movs	r4, #1
 8002234:	e7f1      	b.n	800221a <u8x8_byte_stm32_hw_i2c+0x26>
		buf_idx = 0;
 8002236:	2200      	movs	r2, #0
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <u8x8_byte_stm32_hw_i2c+0x68>)
 800223a:	701a      	strb	r2, [r3, #0]
 800223c:	e7f1      	b.n	8002222 <u8x8_byte_stm32_hw_i2c+0x2e>
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 800223e:	2364      	movs	r3, #100	; 0x64
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <u8x8_byte_stm32_hw_i2c+0x68>)
 8002244:	2178      	movs	r1, #120	; 0x78
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <u8x8_byte_stm32_hw_i2c+0x6c>)
 800224a:	4806      	ldr	r0, [pc, #24]	; (8002264 <u8x8_byte_stm32_hw_i2c+0x70>)
 800224c:	f001 fbaa 	bl	80039a4 <HAL_I2C_Master_Transmit>
 8002250:	fab0 f080 	clz	r0, r0
 8002254:	0940      	lsrs	r0, r0, #5
 8002256:	e7e5      	b.n	8002224 <u8x8_byte_stm32_hw_i2c+0x30>
		return 0;
 8002258:	2000      	movs	r0, #0
 800225a:	e7e3      	b.n	8002224 <u8x8_byte_stm32_hw_i2c+0x30>
 800225c:	20000710 	.word	0x20000710
 8002260:	20000711 	.word	0x20000711
 8002264:	20001d3c 	.word	0x20001d3c

08002268 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 8002268:	292d      	cmp	r1, #45	; 0x2d
{
 800226a:	4603      	mov	r3, r0
 800226c:	b507      	push	{r0, r1, r2, lr}
 800226e:	4610      	mov	r0, r2
  switch(msg)
 8002270:	d808      	bhi.n	8002284 <psoc_gpio_and_delay_cb+0x1c>
 8002272:	2927      	cmp	r1, #39	; 0x27
 8002274:	d91a      	bls.n	80022ac <psoc_gpio_and_delay_cb+0x44>
 8002276:	3929      	subs	r1, #41	; 0x29
 8002278:	2903      	cmp	r1, #3
 800227a:	d805      	bhi.n	8002288 <psoc_gpio_and_delay_cb+0x20>
 800227c:	e8df f001 	tbb	[pc, r1]
 8002280:	08040413 	.word	0x08040413
 8002284:	294c      	cmp	r1, #76	; 0x4c
 8002286:	d111      	bne.n	80022ac <psoc_gpio_and_delay_cb+0x44>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8002288:	2001      	movs	r0, #1
 800228a:	b003      	add	sp, #12
 800228c:	f85d fb04 	ldr.w	pc, [sp], #4
		for (i = 1; i <= arg_int*10; i++);
 8002290:	220a      	movs	r2, #10
 8002292:	2301      	movs	r3, #1
 8002294:	4350      	muls	r0, r2
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	9b01      	ldr	r3, [sp, #4]
 800229a:	4298      	cmp	r0, r3
 800229c:	d3f4      	bcc.n	8002288 <psoc_gpio_and_delay_cb+0x20>
 800229e:	9b01      	ldr	r3, [sp, #4]
 80022a0:	3301      	adds	r3, #1
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	e7f8      	b.n	8002298 <psoc_gpio_and_delay_cb+0x30>
      HAL_Delay(arg_int);
 80022a6:	f000 ffa1 	bl	80031ec <HAL_Delay>
      break;
 80022aa:	e7ed      	b.n	8002288 <psoc_gpio_and_delay_cb+0x20>
      u8x8_SetGPIOResult(u8x8, 1);
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 80022b2:	e7e9      	b.n	8002288 <psoc_gpio_and_delay_cb+0x20>

080022b4 <u8g2_DrawHXBM>:
 80022b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b8:	18cf      	adds	r7, r1, r3
 80022ba:	1c53      	adds	r3, r2, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	b2ff      	uxtb	r7, r7
 80022c0:	f890 9086 	ldrb.w	r9, [r0, #134]	; 0x86
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	463b      	mov	r3, r7
 80022c8:	4605      	mov	r5, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	4690      	mov	r8, r2
 80022ce:	f000 fc01 	bl	8002ad4 <u8g2_IsIntersection>
 80022d2:	b150      	cbz	r0, 80022ea <u8g2_DrawHXBM+0x36>
 80022d4:	fab9 fa89 	clz	sl, r9
 80022d8:	2601      	movs	r6, #1
 80022da:	f04f 0b00 	mov.w	fp, #0
 80022de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80022e2:	42a7      	cmp	r7, r4
 80022e4:	d104      	bne.n	80022f0 <u8g2_DrawHXBM+0x3c>
 80022e6:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
 80022ea:	b003      	add	sp, #12
 80022ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	421e      	tst	r6, r3
 80022f6:	d017      	beq.n	8002328 <u8g2_DrawHXBM+0x74>
 80022f8:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
 80022fc:	f8cd b000 	str.w	fp, [sp]
 8002300:	2301      	movs	r3, #1
 8002302:	4642      	mov	r2, r8
 8002304:	4621      	mov	r1, r4
 8002306:	4628      	mov	r0, r5
 8002308:	f000 fb6d 	bl	80029e6 <u8g2_DrawHVLine>
 800230c:	0076      	lsls	r6, r6, #1
 800230e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8002312:	bf08      	it	eq
 8002314:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 8002316:	f104 0401 	add.w	r4, r4, #1
 800231a:	bf04      	itt	eq
 800231c:	3301      	addeq	r3, #1
 800231e:	2601      	moveq	r6, #1
 8002320:	b2e4      	uxtb	r4, r4
 8002322:	bf08      	it	eq
 8002324:	930c      	streq	r3, [sp, #48]	; 0x30
 8002326:	e7dc      	b.n	80022e2 <u8g2_DrawHXBM+0x2e>
 8002328:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ed      	bne.n	800230c <u8g2_DrawHXBM+0x58>
 8002330:	f885 a086 	strb.w	sl, [r5, #134]	; 0x86
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	e7e3      	b.n	8002300 <u8g2_DrawHXBM+0x4c>

08002338 <u8g2_DrawXBM>:
 8002338:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800233c:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8002340:	461e      	mov	r6, r3
 8002342:	4415      	add	r5, r2
 8002344:	b2ed      	uxtb	r5, r5
 8002346:	440b      	add	r3, r1
 8002348:	9500      	str	r5, [sp, #0]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4681      	mov	r9, r0
 800234e:	460f      	mov	r7, r1
 8002350:	4614      	mov	r4, r2
 8002352:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8002356:	f000 fbbd 	bl	8002ad4 <u8g2_IsIntersection>
 800235a:	b128      	cbz	r0, 8002368 <u8g2_DrawXBM+0x30>
 800235c:	f106 0807 	add.w	r8, r6, #7
 8002360:	f3c8 08c4 	ubfx	r8, r8, #3, #5
 8002364:	42a5      	cmp	r5, r4
 8002366:	d102      	bne.n	800236e <u8g2_DrawXBM+0x36>
 8002368:	b002      	add	sp, #8
 800236a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236e:	4622      	mov	r2, r4
 8002370:	f8cd a000 	str.w	sl, [sp]
 8002374:	4633      	mov	r3, r6
 8002376:	4639      	mov	r1, r7
 8002378:	4648      	mov	r0, r9
 800237a:	3401      	adds	r4, #1
 800237c:	f7ff ff9a 	bl	80022b4 <u8g2_DrawHXBM>
 8002380:	44c2      	add	sl, r8
 8002382:	b2e4      	uxtb	r4, r4
 8002384:	e7ee      	b.n	8002364 <u8g2_DrawXBM+0x2c>

08002386 <u8g2_DrawXBMP>:
 8002386:	b410      	push	{r4}
 8002388:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800238c:	9401      	str	r4, [sp, #4]
 800238e:	bc10      	pop	{r4}
 8002390:	f7ff bfd2 	b.w	8002338 <u8g2_DrawXBM>

08002394 <u8g2_send_buffer>:
 8002394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002398:	4604      	mov	r4, r0
 800239a:	2600      	movs	r6, #0
 800239c:	6803      	ldr	r3, [r0, #0]
 800239e:	f890 903c 	ldrb.w	r9, [r0, #60]	; 0x3c
 80023a2:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 80023a6:	f893 8011 	ldrb.w	r8, [r3, #17]
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80023ae:	7c1b      	ldrb	r3, [r3, #16]
 80023b0:	b2f5      	uxtb	r5, r6
 80023b2:	fb06 f103 	mul.w	r1, r6, r3
 80023b6:	b289      	uxth	r1, r1
 80023b8:	00c9      	lsls	r1, r1, #3
 80023ba:	b289      	uxth	r1, r1
 80023bc:	4401      	add	r1, r0
 80023be:	197a      	adds	r2, r7, r5
 80023c0:	3501      	adds	r5, #1
 80023c2:	9100      	str	r1, [sp, #0]
 80023c4:	4620      	mov	r0, r4
 80023c6:	2100      	movs	r1, #0
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	b2ed      	uxtb	r5, r5
 80023cc:	f000 fe3b 	bl	8003046 <u8x8_DrawTile>
 80023d0:	45a9      	cmp	r9, r5
 80023d2:	d904      	bls.n	80023de <u8g2_send_buffer+0x4a>
 80023d4:	3601      	adds	r6, #1
 80023d6:	19bb      	adds	r3, r7, r6
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4598      	cmp	r8, r3
 80023dc:	d8e5      	bhi.n	80023aa <u8g2_send_buffer+0x16>
 80023de:	b003      	add	sp, #12
 80023e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080023e4 <u8g2_ClearBuffer>:
 80023e4:	6803      	ldr	r3, [r0, #0]
 80023e6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80023ea:	7c1b      	ldrb	r3, [r3, #16]
 80023ec:	2100      	movs	r1, #0
 80023ee:	435a      	muls	r2, r3
 80023f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023f2:	00d2      	lsls	r2, r2, #3
 80023f4:	f007 bcf2 	b.w	8009ddc <memset>

080023f8 <u8g2_SendBuffer>:
 80023f8:	b510      	push	{r4, lr}
 80023fa:	4604      	mov	r4, r0
 80023fc:	f7ff ffca 	bl	8002394 <u8g2_send_buffer>
 8002400:	4620      	mov	r0, r4
 8002402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002406:	f000 be46 	b.w	8003096 <u8x8_RefreshDisplay>

0800240a <u8g2_SetBufferCurrTileRow>:
 800240a:	b510      	push	{r4, lr}
 800240c:	4604      	mov	r4, r0
 800240e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002410:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4798      	blx	r3
 8002418:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800241a:	4620      	mov	r0, r4
 800241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4718      	bx	r3

08002424 <u8g2_FirstPage>:
 8002424:	b510      	push	{r4, lr}
 8002426:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
 800242a:	4604      	mov	r4, r0
 800242c:	b10b      	cbz	r3, 8002432 <u8g2_FirstPage+0xe>
 800242e:	f7ff ffd9 	bl	80023e4 <u8g2_ClearBuffer>
 8002432:	4620      	mov	r0, r4
 8002434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002438:	2100      	movs	r1, #0
 800243a:	f7ff bfe6 	b.w	800240a <u8g2_SetBufferCurrTileRow>

0800243e <u8g2_NextPage>:
 800243e:	b538      	push	{r3, r4, r5, lr}
 8002440:	4604      	mov	r4, r0
 8002442:	f7ff ffa7 	bl	8002394 <u8g2_send_buffer>
 8002446:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 800244a:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 800244e:	6823      	ldr	r3, [r4, #0]
 8002450:	440d      	add	r5, r1
 8002452:	7c5b      	ldrb	r3, [r3, #17]
 8002454:	b2ed      	uxtb	r5, r5
 8002456:	42ab      	cmp	r3, r5
 8002458:	d804      	bhi.n	8002464 <u8g2_NextPage+0x26>
 800245a:	4620      	mov	r0, r4
 800245c:	f000 fe1b 	bl	8003096 <u8x8_RefreshDisplay>
 8002460:	2000      	movs	r0, #0
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8002468:	b113      	cbz	r3, 8002470 <u8g2_NextPage+0x32>
 800246a:	4620      	mov	r0, r4
 800246c:	f7ff ffba 	bl	80023e4 <u8g2_ClearBuffer>
 8002470:	4620      	mov	r0, r4
 8002472:	4629      	mov	r1, r5
 8002474:	f7ff ffc9 	bl	800240a <u8g2_SetBufferCurrTileRow>
 8002478:	2001      	movs	r0, #1
 800247a:	e7f2      	b.n	8002462 <u8g2_NextPage+0x24>

0800247c <u8g2_ClearDisplay>:
 800247c:	b510      	push	{r4, lr}
 800247e:	4604      	mov	r4, r0
 8002480:	f7ff ffd0 	bl	8002424 <u8g2_FirstPage>
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff ffda 	bl	800243e <u8g2_NextPage>
 800248a:	4601      	mov	r1, r0
 800248c:	2800      	cmp	r0, #0
 800248e:	d1f9      	bne.n	8002484 <u8g2_ClearDisplay+0x8>
 8002490:	4620      	mov	r0, r4
 8002492:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002496:	f7ff bfb8 	b.w	800240a <u8g2_SetBufferCurrTileRow>
	...

0800249c <u8g2_m_16_8_f>:
 800249c:	2308      	movs	r3, #8
 800249e:	7003      	strb	r3, [r0, #0]
 80024a0:	4800      	ldr	r0, [pc, #0]	; (80024a4 <u8g2_m_16_8_f+0x8>)
 80024a2:	4770      	bx	lr
 80024a4:	20000731 	.word	0x20000731

080024a8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
 80024a8:	b530      	push	{r4, r5, lr}
 80024aa:	b085      	sub	sp, #20
 80024ac:	460d      	mov	r5, r1
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4909      	ldr	r1, [pc, #36]	; (80024d8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 80024b2:	4613      	mov	r3, r2
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
 80024b6:	4604      	mov	r4, r0
 80024b8:	f000 fe12 	bl	80030e0 <u8x8_Setup>
 80024bc:	f10d 000f 	add.w	r0, sp, #15
 80024c0:	f7ff ffec 	bl	800249c <u8g2_m_16_8_f>
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
 80024c6:	4601      	mov	r1, r0
 80024c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80024cc:	4620      	mov	r0, r4
 80024ce:	9500      	str	r5, [sp, #0]
 80024d0:	f000 fbe8 	bl	8002ca4 <u8g2_SetupBuffer>
 80024d4:	b005      	add	sp, #20
 80024d6:	bd30      	pop	{r4, r5, pc}
 80024d8:	08002fa5 	.word	0x08002fa5
 80024dc:	08002e1d 	.word	0x08002e1d
 80024e0:	08002b05 	.word	0x08002b05

080024e4 <u8g2_font_get_word>:
 80024e4:	1842      	adds	r2, r0, r1
 80024e6:	5c43      	ldrb	r3, [r0, r1]
 80024e8:	7850      	ldrb	r0, [r2, #1]
 80024ea:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 80024ee:	b280      	uxth	r0, r0
 80024f0:	4770      	bx	lr

080024f2 <u8g2_add_vector_y>:
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <u8g2_add_vector_y+0x10>
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d005      	beq.n	8002506 <u8g2_add_vector_y+0x14>
 80024fa:	b933      	cbnz	r3, 800250a <u8g2_add_vector_y+0x18>
 80024fc:	4410      	add	r0, r2
 80024fe:	b2c0      	uxtb	r0, r0
 8002500:	4770      	bx	lr
 8002502:	4408      	add	r0, r1
 8002504:	e7fb      	b.n	80024fe <u8g2_add_vector_y+0xc>
 8002506:	1a80      	subs	r0, r0, r2
 8002508:	e7f9      	b.n	80024fe <u8g2_add_vector_y+0xc>
 800250a:	1a40      	subs	r0, r0, r1
 800250c:	e7f7      	b.n	80024fe <u8g2_add_vector_y+0xc>

0800250e <u8g2_add_vector_x>:
 800250e:	2b01      	cmp	r3, #1
 8002510:	d005      	beq.n	800251e <u8g2_add_vector_x+0x10>
 8002512:	2b02      	cmp	r3, #2
 8002514:	d005      	beq.n	8002522 <u8g2_add_vector_x+0x14>
 8002516:	b933      	cbnz	r3, 8002526 <u8g2_add_vector_x+0x18>
 8002518:	4408      	add	r0, r1
 800251a:	b2c0      	uxtb	r0, r0
 800251c:	4770      	bx	lr
 800251e:	1a80      	subs	r0, r0, r2
 8002520:	e7fb      	b.n	800251a <u8g2_add_vector_x+0xc>
 8002522:	1a40      	subs	r0, r0, r1
 8002524:	e7f9      	b.n	800251a <u8g2_add_vector_x+0xc>
 8002526:	4410      	add	r0, r2
 8002528:	e7f7      	b.n	800251a <u8g2_add_vector_x+0xc>

0800252a <u8g2_font_calc_vref_font>:
 800252a:	2000      	movs	r0, #0
 800252c:	4770      	bx	lr

0800252e <u8g2_font_calc_vref_top>:
 800252e:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
 8002532:	3001      	adds	r0, #1
 8002534:	b2c0      	uxtb	r0, r0
 8002536:	4770      	bx	lr

08002538 <u8g2_read_font_info>:
 8002538:	b538      	push	{r3, r4, r5, lr}
 800253a:	780b      	ldrb	r3, [r1, #0]
 800253c:	460d      	mov	r5, r1
 800253e:	7003      	strb	r3, [r0, #0]
 8002540:	784b      	ldrb	r3, [r1, #1]
 8002542:	4604      	mov	r4, r0
 8002544:	7043      	strb	r3, [r0, #1]
 8002546:	788b      	ldrb	r3, [r1, #2]
 8002548:	7083      	strb	r3, [r0, #2]
 800254a:	78cb      	ldrb	r3, [r1, #3]
 800254c:	70c3      	strb	r3, [r0, #3]
 800254e:	790b      	ldrb	r3, [r1, #4]
 8002550:	7103      	strb	r3, [r0, #4]
 8002552:	794b      	ldrb	r3, [r1, #5]
 8002554:	7143      	strb	r3, [r0, #5]
 8002556:	798b      	ldrb	r3, [r1, #6]
 8002558:	7183      	strb	r3, [r0, #6]
 800255a:	79cb      	ldrb	r3, [r1, #7]
 800255c:	71c3      	strb	r3, [r0, #7]
 800255e:	7a0b      	ldrb	r3, [r1, #8]
 8002560:	7203      	strb	r3, [r0, #8]
 8002562:	7a4b      	ldrb	r3, [r1, #9]
 8002564:	7243      	strb	r3, [r0, #9]
 8002566:	7a8b      	ldrb	r3, [r1, #10]
 8002568:	7283      	strb	r3, [r0, #10]
 800256a:	7acb      	ldrb	r3, [r1, #11]
 800256c:	72c3      	strb	r3, [r0, #11]
 800256e:	7b0b      	ldrb	r3, [r1, #12]
 8002570:	7303      	strb	r3, [r0, #12]
 8002572:	7b4b      	ldrb	r3, [r1, #13]
 8002574:	7343      	strb	r3, [r0, #13]
 8002576:	7b8b      	ldrb	r3, [r1, #14]
 8002578:	7383      	strb	r3, [r0, #14]
 800257a:	7bcb      	ldrb	r3, [r1, #15]
 800257c:	73c3      	strb	r3, [r0, #15]
 800257e:	7c0b      	ldrb	r3, [r1, #16]
 8002580:	2111      	movs	r1, #17
 8002582:	7403      	strb	r3, [r0, #16]
 8002584:	4628      	mov	r0, r5
 8002586:	f7ff ffad 	bl	80024e4 <u8g2_font_get_word>
 800258a:	2113      	movs	r1, #19
 800258c:	8260      	strh	r0, [r4, #18]
 800258e:	4628      	mov	r0, r5
 8002590:	f7ff ffa8 	bl	80024e4 <u8g2_font_get_word>
 8002594:	2115      	movs	r1, #21
 8002596:	82a0      	strh	r0, [r4, #20]
 8002598:	4628      	mov	r0, r5
 800259a:	f7ff ffa3 	bl	80024e4 <u8g2_font_get_word>
 800259e:	82e0      	strh	r0, [r4, #22]
 80025a0:	bd38      	pop	{r3, r4, r5, pc}

080025a2 <u8g2_font_decode_get_unsigned_bits>:
 80025a2:	b570      	push	{r4, r5, r6, lr}
 80025a4:	7a84      	ldrb	r4, [r0, #10]
 80025a6:	6806      	ldr	r6, [r0, #0]
 80025a8:	1862      	adds	r2, r4, r1
 80025aa:	7833      	ldrb	r3, [r6, #0]
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	2a07      	cmp	r2, #7
 80025b0:	fa43 f504 	asr.w	r5, r3, r4
 80025b4:	d807      	bhi.n	80025c6 <u8g2_font_decode_get_unsigned_bits+0x24>
 80025b6:	b2eb      	uxtb	r3, r5
 80025b8:	7282      	strb	r2, [r0, #10]
 80025ba:	f04f 30ff 	mov.w	r0, #4294967295
 80025be:	4088      	lsls	r0, r1
 80025c0:	ea23 0000 	bic.w	r0, r3, r0
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	1c73      	adds	r3, r6, #1
 80025c8:	6003      	str	r3, [r0, #0]
 80025ca:	7873      	ldrb	r3, [r6, #1]
 80025cc:	f1c4 0408 	rsb	r4, r4, #8
 80025d0:	b2e4      	uxtb	r4, r4
 80025d2:	40a3      	lsls	r3, r4
 80025d4:	432b      	orrs	r3, r5
 80025d6:	3a08      	subs	r2, #8
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	e7ec      	b.n	80025b8 <u8g2_font_decode_get_unsigned_bits+0x16>

080025de <u8g2_font_setup_decode>:
 80025de:	b538      	push	{r3, r4, r5, lr}
 80025e0:	2300      	movs	r3, #0
 80025e2:	f100 0558 	add.w	r5, r0, #88	; 0x58
 80025e6:	4604      	mov	r4, r0
 80025e8:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
 80025ec:	6581      	str	r1, [r0, #88]	; 0x58
 80025ee:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
 80025f2:	4628      	mov	r0, r5
 80025f4:	f7ff ffd5 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 80025f8:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
 80025fc:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
 8002600:	4628      	mov	r0, r5
 8002602:	f7ff ffce 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 8002606:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 800260a:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
 800260e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
 800261c:	bd38      	pop	{r3, r4, r5, pc}

0800261e <u8g2_font_decode_get_signed_bits>:
 800261e:	b510      	push	{r4, lr}
 8002620:	f7ff ffbf 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 8002624:	2301      	movs	r3, #1
 8002626:	1e4c      	subs	r4, r1, #1
 8002628:	b2e4      	uxtb	r4, r4
 800262a:	fa03 f404 	lsl.w	r4, r3, r4
 800262e:	1b00      	subs	r0, r0, r4
 8002630:	b240      	sxtb	r0, r0
 8002632:	bd10      	pop	{r4, pc}

08002634 <u8g2_font_decode_len>:
 8002634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002638:	4604      	mov	r4, r0
 800263a:	460e      	mov	r6, r1
 800263c:	b087      	sub	sp, #28
 800263e:	f890 505e 	ldrb.w	r5, [r0, #94]	; 0x5e
 8002642:	f890 705f 	ldrb.w	r7, [r0, #95]	; 0x5f
 8002646:	9205      	str	r2, [sp, #20]
 8002648:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
 800264c:	fa4f f987 	sxtb.w	r9, r7
 8002650:	ebab 0305 	sub.w	r3, fp, r5
 8002654:	b2db      	uxtb	r3, r3
 8002656:	42b3      	cmp	r3, r6
 8002658:	9303      	str	r3, [sp, #12]
 800265a:	bf28      	it	cs
 800265c:	4633      	movcs	r3, r6
 800265e:	469a      	mov	sl, r3
 8002660:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002664:	464a      	mov	r2, r9
 8002666:	b269      	sxtb	r1, r5
 8002668:	9304      	str	r3, [sp, #16]
 800266a:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800266e:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8002672:	f7ff ff4c 	bl	800250e <u8g2_add_vector_x>
 8002676:	4680      	mov	r8, r0
 8002678:	9804      	ldr	r0, [sp, #16]
 800267a:	f7ff ff3a 	bl	80024f2 <u8g2_add_vector_y>
 800267e:	9905      	ldr	r1, [sp, #20]
 8002680:	4602      	mov	r2, r0
 8002682:	b1a9      	cbz	r1, 80026b0 <u8g2_font_decode_len+0x7c>
 8002684:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8002688:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4641      	mov	r1, r8
 8002690:	4653      	mov	r3, sl
 8002692:	4620      	mov	r0, r4
 8002694:	f000 f9a7 	bl	80029e6 <u8g2_DrawHVLine>
 8002698:	9b03      	ldr	r3, [sp, #12]
 800269a:	4435      	add	r5, r6
 800269c:	429e      	cmp	r6, r3
 800269e:	b2ed      	uxtb	r5, r5
 80026a0:	d30d      	bcc.n	80026be <u8g2_font_decode_len+0x8a>
 80026a2:	eba5 060b 	sub.w	r6, r5, fp
 80026a6:	3701      	adds	r7, #1
 80026a8:	2500      	movs	r5, #0
 80026aa:	b2f6      	uxtb	r6, r6
 80026ac:	b2ff      	uxtb	r7, r7
 80026ae:	e7cb      	b.n	8002648 <u8g2_font_decode_len+0x14>
 80026b0:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 80026b4:	2900      	cmp	r1, #0
 80026b6:	d1ef      	bne.n	8002698 <u8g2_font_decode_len+0x64>
 80026b8:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
 80026bc:	e7e4      	b.n	8002688 <u8g2_font_decode_len+0x54>
 80026be:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
 80026c2:	f884 905f 	strb.w	r9, [r4, #95]	; 0x5f
 80026c6:	b007      	add	sp, #28
 80026c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080026cc <u8g2_font_decode_glyph>:
 80026cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	4604      	mov	r4, r0
 80026d2:	f100 0758 	add.w	r7, r0, #88	; 0x58
 80026d6:	f7ff ff82 	bl	80025de <u8g2_font_setup_decode>
 80026da:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
 80026de:	4638      	mov	r0, r7
 80026e0:	f994 9061 	ldrsb.w	r9, [r4, #97]	; 0x61
 80026e4:	f7ff ff9b 	bl	800261e <u8g2_font_decode_get_signed_bits>
 80026e8:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 80026ec:	4683      	mov	fp, r0
 80026ee:	4638      	mov	r0, r7
 80026f0:	f7ff ff95 	bl	800261e <u8g2_font_decode_get_signed_bits>
 80026f4:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
 80026f8:	4606      	mov	r6, r0
 80026fa:	4638      	mov	r0, r7
 80026fc:	f7ff ff8f 	bl	800261e <u8g2_font_decode_get_signed_bits>
 8002700:	f994 a060 	ldrsb.w	sl, [r4, #96]	; 0x60
 8002704:	4680      	mov	r8, r0
 8002706:	f1ba 0f00 	cmp.w	sl, #0
 800270a:	dd4d      	ble.n	80027a8 <u8g2_font_decode_glyph+0xdc>
 800270c:	fa5f f589 	uxtb.w	r5, r9
 8002710:	19aa      	adds	r2, r5, r6
 8002712:	4252      	negs	r2, r2
 8002714:	b252      	sxtb	r2, r2
 8002716:	4659      	mov	r1, fp
 8002718:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800271c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 8002720:	f7ff fef5 	bl	800250e <u8g2_add_vector_x>
 8002724:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 8002728:	4606      	mov	r6, r0
 800272a:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800272e:	f7ff fee0 	bl	80024f2 <u8g2_add_vector_y>
 8002732:	4602      	mov	r2, r0
 8002734:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
 8002738:	2b03      	cmp	r3, #3
 800273a:	d85c      	bhi.n	80027f6 <u8g2_font_decode_glyph+0x12a>
 800273c:	e8df f003 	tbb	[pc, r3]
 8002740:	51443802 	.word	0x51443802
 8002744:	eb06 010a 	add.w	r1, r6, sl
 8002748:	4405      	add	r5, r0
 800274a:	b2cb      	uxtb	r3, r1
 800274c:	b2e9      	uxtb	r1, r5
 800274e:	9100      	str	r1, [sp, #0]
 8002750:	4620      	mov	r0, r4
 8002752:	4631      	mov	r1, r6
 8002754:	f000 f9be 	bl	8002ad4 <u8g2_IsIntersection>
 8002758:	b330      	cbz	r0, 80027a8 <u8g2_font_decode_glyph+0xdc>
 800275a:	2300      	movs	r3, #0
 800275c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8002760:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002764:	4638      	mov	r0, r7
 8002766:	f7ff ff1c 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 800276a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 800276e:	4606      	mov	r6, r0
 8002770:	4638      	mov	r0, r7
 8002772:	f7ff ff16 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 8002776:	4605      	mov	r5, r0
 8002778:	2200      	movs	r2, #0
 800277a:	4631      	mov	r1, r6
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ff59 	bl	8002634 <u8g2_font_decode_len>
 8002782:	4629      	mov	r1, r5
 8002784:	4620      	mov	r0, r4
 8002786:	2201      	movs	r2, #1
 8002788:	f7ff ff54 	bl	8002634 <u8g2_font_decode_len>
 800278c:	2101      	movs	r1, #1
 800278e:	4638      	mov	r0, r7
 8002790:	f7ff ff07 	bl	80025a2 <u8g2_font_decode_get_unsigned_bits>
 8002794:	2800      	cmp	r0, #0
 8002796:	d1ef      	bne.n	8002778 <u8g2_font_decode_glyph+0xac>
 8002798:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
 800279c:	454b      	cmp	r3, r9
 800279e:	dbdf      	blt.n	8002760 <u8g2_font_decode_glyph+0x94>
 80027a0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80027a4:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
 80027a8:	4640      	mov	r0, r8
 80027aa:	b003      	add	sp, #12
 80027ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b0:	f1c5 0501 	rsb	r5, r5, #1
 80027b4:	eb06 0c05 	add.w	ip, r6, r5
 80027b8:	eb00 010a 	add.w	r1, r0, sl
 80027bc:	3601      	adds	r6, #1
 80027be:	b2f3      	uxtb	r3, r6
 80027c0:	b2c9      	uxtb	r1, r1
 80027c2:	fa5f f68c 	uxtb.w	r6, ip
 80027c6:	e7c2      	b.n	800274e <u8g2_font_decode_glyph+0x82>
 80027c8:	f1ca 0101 	rsb	r1, sl, #1
 80027cc:	f1c5 0501 	rsb	r5, r5, #1
 80027d0:	eb06 0c01 	add.w	ip, r6, r1
 80027d4:	3201      	adds	r2, #1
 80027d6:	3601      	adds	r6, #1
 80027d8:	4405      	add	r5, r0
 80027da:	b2d1      	uxtb	r1, r2
 80027dc:	b2f3      	uxtb	r3, r6
 80027de:	b2ea      	uxtb	r2, r5
 80027e0:	e7ef      	b.n	80027c2 <u8g2_font_decode_glyph+0xf6>
 80027e2:	f1ca 0a01 	rsb	sl, sl, #1
 80027e6:	3201      	adds	r2, #1
 80027e8:	19ab      	adds	r3, r5, r6
 80027ea:	4482      	add	sl, r0
 80027ec:	b2d1      	uxtb	r1, r2
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	fa5f f28a 	uxtb.w	r2, sl
 80027f4:	e7ab      	b.n	800274e <u8g2_font_decode_glyph+0x82>
 80027f6:	4601      	mov	r1, r0
 80027f8:	4633      	mov	r3, r6
 80027fa:	e7a8      	b.n	800274e <u8g2_font_decode_glyph+0x82>

080027fc <u8g2_font_get_glyph_data>:
 80027fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80027fe:	29ff      	cmp	r1, #255	; 0xff
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	f103 0317 	add.w	r3, r3, #23
 8002806:	460d      	mov	r5, r1
 8002808:	d812      	bhi.n	8002830 <u8g2_font_get_glyph_data+0x34>
 800280a:	2960      	cmp	r1, #96	; 0x60
 800280c:	d909      	bls.n	8002822 <u8g2_font_get_glyph_data+0x26>
 800280e:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8002812:	4413      	add	r3, r2
 8002814:	7858      	ldrb	r0, [r3, #1]
 8002816:	b118      	cbz	r0, 8002820 <u8g2_font_get_glyph_data+0x24>
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	42aa      	cmp	r2, r5
 800281c:	d106      	bne.n	800282c <u8g2_font_get_glyph_data+0x30>
 800281e:	1c98      	adds	r0, r3, #2
 8002820:	bd70      	pop	{r4, r5, r6, pc}
 8002822:	2940      	cmp	r1, #64	; 0x40
 8002824:	d9f6      	bls.n	8002814 <u8g2_font_get_glyph_data+0x18>
 8002826:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 800282a:	e7f2      	b.n	8002812 <u8g2_font_get_glyph_data+0x16>
 800282c:	4403      	add	r3, r0
 800282e:	e7f1      	b.n	8002814 <u8g2_font_get_glyph_data+0x18>
 8002830:	f8b0 407e 	ldrh.w	r4, [r0, #126]	; 0x7e
 8002834:	441c      	add	r4, r3
 8002836:	4626      	mov	r6, r4
 8002838:	2100      	movs	r1, #0
 800283a:	4630      	mov	r0, r6
 800283c:	f7ff fe52 	bl	80024e4 <u8g2_font_get_word>
 8002840:	2102      	movs	r1, #2
 8002842:	4404      	add	r4, r0
 8002844:	4630      	mov	r0, r6
 8002846:	f7ff fe4d 	bl	80024e4 <u8g2_font_get_word>
 800284a:	4285      	cmp	r5, r0
 800284c:	f106 0604 	add.w	r6, r6, #4
 8002850:	d8f2      	bhi.n	8002838 <u8g2_font_get_glyph_data+0x3c>
 8002852:	8820      	ldrh	r0, [r4, #0]
 8002854:	ba40      	rev16	r0, r0
 8002856:	b280      	uxth	r0, r0
 8002858:	2800      	cmp	r0, #0
 800285a:	d0e1      	beq.n	8002820 <u8g2_font_get_glyph_data+0x24>
 800285c:	4285      	cmp	r5, r0
 800285e:	d101      	bne.n	8002864 <u8g2_font_get_glyph_data+0x68>
 8002860:	1ce0      	adds	r0, r4, #3
 8002862:	e7dd      	b.n	8002820 <u8g2_font_get_glyph_data+0x24>
 8002864:	78a3      	ldrb	r3, [r4, #2]
 8002866:	441c      	add	r4, r3
 8002868:	e7f3      	b.n	8002852 <u8g2_font_get_glyph_data+0x56>

0800286a <u8g2_DrawGlyph>:
 800286a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800286c:	461f      	mov	r7, r3
 800286e:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 8002872:	4604      	mov	r4, r0
 8002874:	460e      	mov	r6, r1
 8002876:	4615      	mov	r5, r2
 8002878:	2b03      	cmp	r3, #3
 800287a:	d807      	bhi.n	800288c <u8g2_DrawGlyph+0x22>
 800287c:	e8df f003 	tbb	[pc, r3]
 8002880:	1e1a1502 	.word	0x1e1a1502
 8002884:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002886:	4798      	blx	r3
 8002888:	4405      	add	r5, r0
 800288a:	b2ed      	uxtb	r5, r5
 800288c:	4639      	mov	r1, r7
 800288e:	4620      	mov	r0, r4
 8002890:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
 8002894:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
 8002898:	f7ff ffb0 	bl	80027fc <u8g2_font_get_glyph_data>
 800289c:	4601      	mov	r1, r0
 800289e:	b118      	cbz	r0, 80028a8 <u8g2_DrawGlyph+0x3e>
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff ff13 	bl	80026cc <u8g2_font_decode_glyph>
 80028a6:	b2c0      	uxtb	r0, r0
 80028a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028ac:	4798      	blx	r3
 80028ae:	1a36      	subs	r6, r6, r0
 80028b0:	b2f6      	uxtb	r6, r6
 80028b2:	e7eb      	b.n	800288c <u8g2_DrawGlyph+0x22>
 80028b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028b6:	4798      	blx	r3
 80028b8:	1a2d      	subs	r5, r5, r0
 80028ba:	e7e6      	b.n	800288a <u8g2_DrawGlyph+0x20>
 80028bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80028be:	4798      	blx	r3
 80028c0:	4406      	add	r6, r0
 80028c2:	e7f5      	b.n	80028b0 <u8g2_DrawGlyph+0x46>

080028c4 <u8g2_draw_string>:
 80028c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c8:	461e      	mov	r6, r3
 80028ca:	4607      	mov	r7, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	4615      	mov	r5, r2
 80028d0:	f04f 0a00 	mov.w	sl, #0
 80028d4:	f000 fa0d 	bl	8002cf2 <u8x8_utf8_init>
 80028d8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80028dc:	f64f 79fe 	movw	r9, #65534	; 0xfffe
 80028e0:	3e01      	subs	r6, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4638      	mov	r0, r7
 80028e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80028ea:	4798      	blx	r3
 80028ec:	4540      	cmp	r0, r8
 80028ee:	4603      	mov	r3, r0
 80028f0:	d01b      	beq.n	800292a <u8g2_draw_string+0x66>
 80028f2:	4548      	cmp	r0, r9
 80028f4:	d0f5      	beq.n	80028e2 <u8g2_draw_string+0x1e>
 80028f6:	462a      	mov	r2, r5
 80028f8:	4621      	mov	r1, r4
 80028fa:	4638      	mov	r0, r7
 80028fc:	f7ff ffb5 	bl	800286a <u8g2_DrawGlyph>
 8002900:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8002904:	2b03      	cmp	r3, #3
 8002906:	d805      	bhi.n	8002914 <u8g2_draw_string+0x50>
 8002908:	e8df f003 	tbb	[pc, r3]
 800290c:	0d0b0802 	.word	0x0d0b0802
 8002910:	4404      	add	r4, r0
 8002912:	b2e4      	uxtb	r4, r4
 8002914:	4450      	add	r0, sl
 8002916:	fa5f fa80 	uxtb.w	sl, r0
 800291a:	e7e2      	b.n	80028e2 <u8g2_draw_string+0x1e>
 800291c:	4405      	add	r5, r0
 800291e:	b2ed      	uxtb	r5, r5
 8002920:	e7f8      	b.n	8002914 <u8g2_draw_string+0x50>
 8002922:	1a24      	subs	r4, r4, r0
 8002924:	e7f5      	b.n	8002912 <u8g2_draw_string+0x4e>
 8002926:	1a2d      	subs	r5, r5, r0
 8002928:	e7f9      	b.n	800291e <u8g2_draw_string+0x5a>
 800292a:	4650      	mov	r0, sl
 800292c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002930 <u8g2_DrawStr>:
 8002930:	b410      	push	{r4}
 8002932:	4c02      	ldr	r4, [pc, #8]	; (800293c <u8g2_DrawStr+0xc>)
 8002934:	6044      	str	r4, [r0, #4]
 8002936:	bc10      	pop	{r4}
 8002938:	f7ff bfc4 	b.w	80028c4 <u8g2_draw_string>
 800293c:	08002ce3 	.word	0x08002ce3

08002940 <u8g2_UpdateRefHeight>:
 8002940:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002942:	b510      	push	{r4, lr}
 8002944:	b1c3      	cbz	r3, 8002978 <u8g2_UpdateRefHeight+0x38>
 8002946:	f990 4075 	ldrsb.w	r4, [r0, #117]	; 0x75
 800294a:	f990 1076 	ldrsb.w	r1, [r0, #118]	; 0x76
 800294e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8002952:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
 8002956:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
 800295a:	b16b      	cbz	r3, 8002978 <u8g2_UpdateRefHeight+0x38>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <u8g2_UpdateRefHeight+0x3a>
 8002960:	f990 3077 	ldrsb.w	r3, [r0, #119]	; 0x77
 8002964:	429c      	cmp	r4, r3
 8002966:	bfb8      	it	lt
 8002968:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
 800296c:	f990 3078 	ldrsb.w	r3, [r0, #120]	; 0x78
 8002970:	4299      	cmp	r1, r3
 8002972:	dd01      	ble.n	8002978 <u8g2_UpdateRefHeight+0x38>
 8002974:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
 8002978:	bd10      	pop	{r4, pc}
 800297a:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
 800297e:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
 8002982:	4413      	add	r3, r2
 8002984:	429c      	cmp	r4, r3
 8002986:	bfb8      	it	lt
 8002988:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
 800298c:	4291      	cmp	r1, r2
 800298e:	bfc8      	it	gt
 8002990:	f880 2083 	strbgt.w	r2, [r0, #131]	; 0x83
 8002994:	e7f0      	b.n	8002978 <u8g2_UpdateRefHeight+0x38>
	...

08002998 <u8g2_SetFontPosBaseline>:
 8002998:	4b01      	ldr	r3, [pc, #4]	; (80029a0 <u8g2_SetFontPosBaseline+0x8>)
 800299a:	6543      	str	r3, [r0, #84]	; 0x54
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	0800252b 	.word	0x0800252b

080029a4 <u8g2_SetFontPosTop>:
 80029a4:	4b01      	ldr	r3, [pc, #4]	; (80029ac <u8g2_SetFontPosTop+0x8>)
 80029a6:	6543      	str	r3, [r0, #84]	; 0x54
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	0800252f 	.word	0x0800252f

080029b0 <u8g2_SetFont>:
 80029b0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80029b2:	b510      	push	{r4, lr}
 80029b4:	428a      	cmp	r2, r1
 80029b6:	4604      	mov	r4, r0
 80029b8:	d008      	beq.n	80029cc <u8g2_SetFont+0x1c>
 80029ba:	6501      	str	r1, [r0, #80]	; 0x50
 80029bc:	3068      	adds	r0, #104	; 0x68
 80029be:	f7ff fdbb 	bl	8002538 <u8g2_read_font_info>
 80029c2:	4620      	mov	r0, r4
 80029c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c8:	f7ff bfba 	b.w	8002940 <u8g2_UpdateRefHeight>
 80029cc:	bd10      	pop	{r4, pc}

080029ce <u8g2_draw_hv_line_2dir>:
 80029ce:	b470      	push	{r4, r5, r6}
 80029d0:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
 80029d4:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80029d8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80029da:	1b92      	subs	r2, r2, r6
 80029dc:	46a4      	mov	ip, r4
 80029de:	9503      	str	r5, [sp, #12]
 80029e0:	b2d2      	uxtb	r2, r2
 80029e2:	bc70      	pop	{r4, r5, r6}
 80029e4:	4760      	bx	ip

080029e6 <u8g2_DrawHVLine>:
 80029e6:	b470      	push	{r4, r5, r6}
 80029e8:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
 80029ec:	f89d 500c 	ldrb.w	r5, [sp, #12]
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	d03a      	beq.n	8002a6a <u8g2_DrawHVLine+0x84>
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d038      	beq.n	8002a6a <u8g2_DrawHVLine+0x84>
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d904      	bls.n	8002a06 <u8g2_DrawHVLine+0x20>
 80029fc:	2d02      	cmp	r5, #2
 80029fe:	d12b      	bne.n	8002a58 <u8g2_DrawHVLine+0x72>
 8002a00:	3101      	adds	r1, #1
 8002a02:	1ac9      	subs	r1, r1, r3
 8002a04:	b2c9      	uxtb	r1, r1
 8002a06:	f015 0501 	ands.w	r5, r5, #1
 8002a0a:	d130      	bne.n	8002a6e <u8g2_DrawHVLine+0x88>
 8002a0c:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 8002a10:	4294      	cmp	r4, r2
 8002a12:	d82a      	bhi.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a14:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 8002a18:	4294      	cmp	r4, r2
 8002a1a:	d926      	bls.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a1c:	440b      	add	r3, r1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	428b      	cmp	r3, r1
 8002a22:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 8002a26:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 8002a2a:	d21c      	bcs.n	8002a66 <u8g2_DrawHVLine+0x80>
 8002a2c:	428c      	cmp	r4, r1
 8002a2e:	d919      	bls.n	8002a64 <u8g2_DrawHVLine+0x7e>
 8002a30:	1e63      	subs	r3, r4, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	429e      	cmp	r6, r3
 8002a36:	d218      	bcs.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a38:	42b1      	cmp	r1, r6
 8002a3a:	bf38      	it	cc
 8002a3c:	4631      	movcc	r1, r6
 8002a3e:	429c      	cmp	r4, r3
 8002a40:	bf94      	ite	ls
 8002a42:	ebc1 0404 	rsbls	r4, r1, r4
 8002a46:	ebc1 0403 	rsbhi	r4, r1, r3
 8002a4a:	b2e3      	uxtb	r3, r4
 8002a4c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002a4e:	9503      	str	r5, [sp, #12]
 8002a50:	68a4      	ldr	r4, [r4, #8]
 8002a52:	46a4      	mov	ip, r4
 8002a54:	bc70      	pop	{r4, r5, r6}
 8002a56:	4760      	bx	ip
 8002a58:	2d03      	cmp	r5, #3
 8002a5a:	bf02      	ittt	eq
 8002a5c:	3201      	addeq	r2, #1
 8002a5e:	1ad2      	subeq	r2, r2, r3
 8002a60:	b2d2      	uxtbeq	r2, r2
 8002a62:	e7d0      	b.n	8002a06 <u8g2_DrawHVLine+0x20>
 8002a64:	4631      	mov	r1, r6
 8002a66:	428c      	cmp	r4, r1
 8002a68:	d8e4      	bhi.n	8002a34 <u8g2_DrawHVLine+0x4e>
 8002a6a:	bc70      	pop	{r4, r5, r6}
 8002a6c:	4770      	bx	lr
 8002a6e:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002a72:	428c      	cmp	r4, r1
 8002a74:	d8f9      	bhi.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a76:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 8002a7a:	428c      	cmp	r4, r1
 8002a7c:	d9f5      	bls.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a7e:	4413      	add	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 8002a88:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 8002a8c:	d210      	bcs.n	8002ab0 <u8g2_DrawHVLine+0xca>
 8002a8e:	4294      	cmp	r4, r2
 8002a90:	d90d      	bls.n	8002aae <u8g2_DrawHVLine+0xc8>
 8002a92:	1e63      	subs	r3, r4, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	429e      	cmp	r6, r3
 8002a98:	d2e7      	bcs.n	8002a6a <u8g2_DrawHVLine+0x84>
 8002a9a:	42b2      	cmp	r2, r6
 8002a9c:	bf38      	it	cc
 8002a9e:	4632      	movcc	r2, r6
 8002aa0:	429c      	cmp	r4, r3
 8002aa2:	bf94      	ite	ls
 8002aa4:	ebc2 0404 	rsbls	r4, r2, r4
 8002aa8:	ebc2 0403 	rsbhi	r4, r2, r3
 8002aac:	e7cd      	b.n	8002a4a <u8g2_DrawHVLine+0x64>
 8002aae:	4632      	mov	r2, r6
 8002ab0:	4294      	cmp	r4, r2
 8002ab2:	d8f0      	bhi.n	8002a96 <u8g2_DrawHVLine+0xb0>
 8002ab4:	e7d9      	b.n	8002a6a <u8g2_DrawHVLine+0x84>

08002ab6 <u8g2_is_intersection_decision_tree>:
 8002ab6:	428a      	cmp	r2, r1
 8002ab8:	d206      	bcs.n	8002ac8 <u8g2_is_intersection_decision_tree+0x12>
 8002aba:	4283      	cmp	r3, r0
 8002abc:	d808      	bhi.n	8002ad0 <u8g2_is_intersection_decision_tree+0x1a>
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf94      	ite	ls
 8002ac2:	2000      	movls	r0, #0
 8002ac4:	2001      	movhi	r0, #1
 8002ac6:	4770      	bx	lr
 8002ac8:	4283      	cmp	r3, r0
 8002aca:	d8f8      	bhi.n	8002abe <u8g2_is_intersection_decision_tree+0x8>
 8002acc:	2000      	movs	r0, #0
 8002ace:	4770      	bx	lr
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	4770      	bx	lr

08002ad4 <u8g2_IsIntersection>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	4604      	mov	r4, r0
 8002ad8:	460d      	mov	r5, r1
 8002ada:	461e      	mov	r6, r3
 8002adc:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 8002ae0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8002ae4:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 8002ae8:	f7ff ffe5 	bl	8002ab6 <u8g2_is_intersection_decision_tree>
 8002aec:	b148      	cbz	r0, 8002b02 <u8g2_IsIntersection+0x2e>
 8002aee:	4633      	mov	r3, r6
 8002af0:	462a      	mov	r2, r5
 8002af2:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8002af6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
 8002afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002afe:	f7ff bfda 	b.w	8002ab6 <u8g2_is_intersection_decision_tree>
 8002b02:	bd70      	pop	{r4, r5, r6, pc}

08002b04 <u8g2_ll_hvline_vertical_top_lsb>:
 8002b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b06:	2401      	movs	r4, #1
 8002b08:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
 8002b0c:	f002 0607 	and.w	r6, r2, #7
 8002b10:	40b4      	lsls	r4, r6
 8002b12:	2d01      	cmp	r5, #1
 8002b14:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8002b18:	b2e4      	uxtb	r4, r4
 8002b1a:	d815      	bhi.n	8002b48 <u8g2_ll_hvline_vertical_top_lsb+0x44>
 8002b1c:	4625      	mov	r5, r4
 8002b1e:	d015      	beq.n	8002b4c <u8g2_ll_hvline_vertical_top_lsb+0x48>
 8002b20:	f002 0cf8 	and.w	ip, r2, #248	; 0xf8
 8002b24:	6802      	ldr	r2, [r0, #0]
 8002b26:	f892 e010 	ldrb.w	lr, [r2, #16]
 8002b2a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002b2c:	fb0e 110c 	mla	r1, lr, ip, r1
 8002b30:	4411      	add	r1, r2
 8002b32:	b96f      	cbnz	r7, 8002b50 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 8002b34:	780a      	ldrb	r2, [r1, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	432a      	orrs	r2, r5
 8002b3a:	4062      	eors	r2, r4
 8002b3c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8002b40:	f801 2b01 	strb.w	r2, [r1], #1
 8002b44:	d1f6      	bne.n	8002b34 <u8g2_ll_hvline_vertical_top_lsb+0x30>
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b48:	2500      	movs	r5, #0
 8002b4a:	e7e9      	b.n	8002b20 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
 8002b4c:	2400      	movs	r4, #0
 8002b4e:	e7e7      	b.n	8002b20 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
 8002b50:	780a      	ldrb	r2, [r1, #0]
 8002b52:	3601      	adds	r6, #1
 8002b54:	432a      	orrs	r2, r5
 8002b56:	4062      	eors	r2, r4
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	f016 0607 	ands.w	r6, r6, #7
 8002b5e:	700a      	strb	r2, [r1, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	d10c      	bne.n	8002b7e <u8g2_ll_hvline_vertical_top_lsb+0x7a>
 8002b64:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002b68:	4411      	add	r1, r2
 8002b6a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 8002b6e:	2a01      	cmp	r2, #1
 8002b70:	d80a      	bhi.n	8002b88 <u8g2_ll_hvline_vertical_top_lsb+0x84>
 8002b72:	d00b      	beq.n	8002b8c <u8g2_ll_hvline_vertical_top_lsb+0x88>
 8002b74:	2401      	movs	r4, #1
 8002b76:	4625      	mov	r5, r4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1e9      	bne.n	8002b50 <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 8002b7c:	e7e3      	b.n	8002b46 <u8g2_ll_hvline_vertical_top_lsb+0x42>
 8002b7e:	006d      	lsls	r5, r5, #1
 8002b80:	0064      	lsls	r4, r4, #1
 8002b82:	b2ed      	uxtb	r5, r5
 8002b84:	b2e4      	uxtb	r4, r4
 8002b86:	e7f7      	b.n	8002b78 <u8g2_ll_hvline_vertical_top_lsb+0x74>
 8002b88:	2401      	movs	r4, #1
 8002b8a:	e7f5      	b.n	8002b78 <u8g2_ll_hvline_vertical_top_lsb+0x74>
 8002b8c:	4615      	mov	r5, r2
 8002b8e:	e7f3      	b.n	8002b78 <u8g2_ll_hvline_vertical_top_lsb+0x74>

08002b90 <u8g2_update_dimension_common>:
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8002b96:	6801      	ldr	r1, [r0, #0]
 8002b98:	00e3      	lsls	r3, r4, #3
 8002b9a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8002b9e:	7c0a      	ldrb	r2, [r1, #16]
 8002ba0:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8002ba4:	2a1f      	cmp	r2, #31
 8002ba6:	bf28      	it	cs
 8002ba8:	221f      	movcs	r2, #31
 8002baa:	00eb      	lsls	r3, r5, #3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	00d2      	lsls	r2, r2, #3
 8002bb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002bb4:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8002bb8:	7c4a      	ldrb	r2, [r1, #17]
 8002bba:	1966      	adds	r6, r4, r5
 8002bbc:	4296      	cmp	r6, r2
 8002bbe:	bfc8      	it	gt
 8002bc0:	1b54      	subgt	r4, r2, r5
 8002bc2:	f04f 02f0 	mov.w	r2, #240	; 0xf0
 8002bc6:	bfc8      	it	gt
 8002bc8:	b2e4      	uxtbgt	r4, r4
 8002bca:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8002bce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bd2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
 8002bd6:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 8002bda:	8a8b      	ldrh	r3, [r1, #20]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	bf88      	it	hi
 8002be0:	4613      	movhi	r3, r2
 8002be2:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8002be6:	8acb      	ldrh	r3, [r1, #22]
 8002be8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8002bec:	bd70      	pop	{r4, r5, r6, pc}

08002bee <u8g2_update_dimension_r0>:
 8002bee:	f7ff bfcf 	b.w	8002b90 <u8g2_update_dimension_common>

08002bf2 <u8g2_draw_l90_r0>:
 8002bf2:	b410      	push	{r4}
 8002bf4:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8002bf8:	9401      	str	r4, [sp, #4]
 8002bfa:	bc10      	pop	{r4}
 8002bfc:	f7ff bee7 	b.w	80029ce <u8g2_draw_hv_line_2dir>

08002c00 <u8g2_apply_clip_window>:
 8002c00:	b513      	push	{r0, r1, r4, lr}
 8002c02:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8002c06:	4604      	mov	r4, r0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 8002c0e:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 8002c12:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8002c16:	f7ff ff5d 	bl	8002ad4 <u8g2_IsIntersection>
 8002c1a:	b918      	cbnz	r0, 8002c24 <u8g2_apply_clip_window+0x24>
 8002c1c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
 8002c20:	b002      	add	sp, #8
 8002c22:	bd10      	pop	{r4, pc}
 8002c24:	2301      	movs	r3, #1
 8002c26:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8002c2a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8002c2e:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8002c32:	429a      	cmp	r2, r3
 8002c34:	bf38      	it	cc
 8002c36:	f884 3045 	strbcc.w	r3, [r4, #69]	; 0x45
 8002c3a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002c3e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8002c42:	429a      	cmp	r2, r3
 8002c44:	bf88      	it	hi
 8002c46:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
 8002c4a:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8002c4e:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8002c52:	429a      	cmp	r2, r3
 8002c54:	bf38      	it	cc
 8002c56:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
 8002c5a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002c5e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	bf88      	it	hi
 8002c66:	f884 3048 	strbhi.w	r3, [r4, #72]	; 0x48
 8002c6a:	e7d9      	b.n	8002c20 <u8g2_apply_clip_window+0x20>

08002c6c <u8g2_update_page_win_r0>:
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8002c72:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8002c76:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
 8002c7a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002c7e:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
 8002c82:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8002c86:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
 8002c8a:	f7ff bfb9 	b.w	8002c00 <u8g2_apply_clip_window>

08002c8e <u8g2_SetMaxClipWindow>:
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 8002c94:	22ff      	movs	r2, #255	; 0xff
 8002c96:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002c98:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8002c9c:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4718      	bx	r3

08002ca4 <u8g2_SetupBuffer>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	2500      	movs	r5, #0
 8002ca8:	6303      	str	r3, [r0, #48]	; 0x30
 8002caa:	f240 1301 	movw	r3, #257	; 0x101
 8002cae:	4604      	mov	r4, r0
 8002cb0:	9e04      	ldr	r6, [sp, #16]
 8002cb2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8002cb6:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 8002cba:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
 8002cbe:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
 8002cc2:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 8002cc6:	6381      	str	r1, [r0, #56]	; 0x38
 8002cc8:	6833      	ldr	r3, [r6, #0]
 8002cca:	6505      	str	r5, [r0, #80]	; 0x50
 8002ccc:	6346      	str	r6, [r0, #52]	; 0x34
 8002cce:	4798      	blx	r3
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff ffdc 	bl	8002c8e <u8g2_SetMaxClipWindow>
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f7ff fe5e 	bl	8002998 <u8g2_SetFontPosBaseline>
 8002cdc:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}

08002ce2 <u8x8_ascii_next>:
 8002ce2:	b119      	cbz	r1, 8002cec <u8x8_ascii_next+0xa>
 8002ce4:	290a      	cmp	r1, #10
 8002ce6:	d001      	beq.n	8002cec <u8x8_ascii_next+0xa>
 8002ce8:	b288      	uxth	r0, r1
 8002cea:	4770      	bx	lr
 8002cec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002cf0:	4770      	bx	lr

08002cf2 <u8x8_utf8_init>:
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
 8002cf8:	4770      	bx	lr

08002cfa <u8x8_byte_SendBytes>:
 8002cfa:	b410      	push	{r4}
 8002cfc:	6904      	ldr	r4, [r0, #16]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	46a4      	mov	ip, r4
 8002d02:	460a      	mov	r2, r1
 8002d04:	bc10      	pop	{r4}
 8002d06:	2117      	movs	r1, #23
 8002d08:	4760      	bx	ip

08002d0a <u8x8_byte_SendByte>:
 8002d0a:	b507      	push	{r0, r1, r2, lr}
 8002d0c:	f88d 1007 	strb.w	r1, [sp, #7]
 8002d10:	f10d 0207 	add.w	r2, sp, #7
 8002d14:	2101      	movs	r1, #1
 8002d16:	f7ff fff0 	bl	8002cfa <u8x8_byte_SendBytes>
 8002d1a:	b003      	add	sp, #12
 8002d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08002d20 <u8x8_byte_StartTransfer>:
 8002d20:	2300      	movs	r3, #0
 8002d22:	b410      	push	{r4}
 8002d24:	6904      	ldr	r4, [r0, #16]
 8002d26:	461a      	mov	r2, r3
 8002d28:	46a4      	mov	ip, r4
 8002d2a:	2118      	movs	r1, #24
 8002d2c:	bc10      	pop	{r4}
 8002d2e:	4760      	bx	ip

08002d30 <u8x8_byte_EndTransfer>:
 8002d30:	2300      	movs	r3, #0
 8002d32:	b410      	push	{r4}
 8002d34:	6904      	ldr	r4, [r0, #16]
 8002d36:	461a      	mov	r2, r3
 8002d38:	46a4      	mov	ip, r4
 8002d3a:	2119      	movs	r1, #25
 8002d3c:	bc10      	pop	{r4}
 8002d3e:	4760      	bx	ip

08002d40 <u8x8_i2c_data_transfer>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	4604      	mov	r4, r0
 8002d44:	4616      	mov	r6, r2
 8002d46:	460d      	mov	r5, r1
 8002d48:	f7ff ffea 	bl	8002d20 <u8x8_byte_StartTransfer>
 8002d4c:	2140      	movs	r1, #64	; 0x40
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ffdb 	bl	8002d0a <u8x8_byte_SendByte>
 8002d54:	4633      	mov	r3, r6
 8002d56:	462a      	mov	r2, r5
 8002d58:	4620      	mov	r0, r4
 8002d5a:	6927      	ldr	r7, [r4, #16]
 8002d5c:	2117      	movs	r1, #23
 8002d5e:	47b8      	blx	r7
 8002d60:	4620      	mov	r0, r4
 8002d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d66:	f7ff bfe3 	b.w	8002d30 <u8x8_byte_EndTransfer>

08002d6a <u8x8_cad_SendCmd>:
 8002d6a:	b410      	push	{r4}
 8002d6c:	68c4      	ldr	r4, [r0, #12]
 8002d6e:	460a      	mov	r2, r1
 8002d70:	46a4      	mov	ip, r4
 8002d72:	2300      	movs	r3, #0
 8002d74:	2115      	movs	r1, #21
 8002d76:	bc10      	pop	{r4}
 8002d78:	4760      	bx	ip

08002d7a <u8x8_cad_SendArg>:
 8002d7a:	b410      	push	{r4}
 8002d7c:	68c4      	ldr	r4, [r0, #12]
 8002d7e:	460a      	mov	r2, r1
 8002d80:	46a4      	mov	ip, r4
 8002d82:	2300      	movs	r3, #0
 8002d84:	2116      	movs	r1, #22
 8002d86:	bc10      	pop	{r4}
 8002d88:	4760      	bx	ip

08002d8a <u8x8_cad_SendData>:
 8002d8a:	b410      	push	{r4}
 8002d8c:	68c4      	ldr	r4, [r0, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	46a4      	mov	ip, r4
 8002d92:	460a      	mov	r2, r1
 8002d94:	bc10      	pop	{r4}
 8002d96:	2117      	movs	r1, #23
 8002d98:	4760      	bx	ip

08002d9a <u8x8_cad_StartTransfer>:
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	b410      	push	{r4}
 8002d9e:	68c4      	ldr	r4, [r0, #12]
 8002da0:	461a      	mov	r2, r3
 8002da2:	46a4      	mov	ip, r4
 8002da4:	2118      	movs	r1, #24
 8002da6:	bc10      	pop	{r4}
 8002da8:	4760      	bx	ip

08002daa <u8x8_cad_EndTransfer>:
 8002daa:	2300      	movs	r3, #0
 8002dac:	b410      	push	{r4}
 8002dae:	68c4      	ldr	r4, [r0, #12]
 8002db0:	461a      	mov	r2, r3
 8002db2:	46a4      	mov	ip, r4
 8002db4:	2119      	movs	r1, #25
 8002db6:	bc10      	pop	{r4}
 8002db8:	4760      	bx	ip

08002dba <u8x8_cad_SendSequence>:
 8002dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002dbc:	4605      	mov	r5, r0
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	7821      	ldrb	r1, [r4, #0]
 8002dc2:	2919      	cmp	r1, #25
 8002dc4:	d80d      	bhi.n	8002de2 <u8x8_cad_SendSequence+0x28>
 8002dc6:	2917      	cmp	r1, #23
 8002dc8:	d819      	bhi.n	8002dfe <u8x8_cad_SendSequence+0x44>
 8002dca:	d00e      	beq.n	8002dea <u8x8_cad_SendSequence+0x30>
 8002dcc:	2914      	cmp	r1, #20
 8002dce:	d90a      	bls.n	8002de6 <u8x8_cad_SendSequence+0x2c>
 8002dd0:	7862      	ldrb	r2, [r4, #1]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	68ee      	ldr	r6, [r5, #12]
 8002dd8:	f88d 2007 	strb.w	r2, [sp, #7]
 8002ddc:	47b0      	blx	r6
 8002dde:	3402      	adds	r4, #2
 8002de0:	e7ee      	b.n	8002dc0 <u8x8_cad_SendSequence+0x6>
 8002de2:	29fe      	cmp	r1, #254	; 0xfe
 8002de4:	d012      	beq.n	8002e0c <u8x8_cad_SendSequence+0x52>
 8002de6:	b002      	add	sp, #8
 8002de8:	bd70      	pop	{r4, r5, r6, pc}
 8002dea:	7863      	ldrb	r3, [r4, #1]
 8002dec:	2101      	movs	r1, #1
 8002dee:	4628      	mov	r0, r5
 8002df0:	f10d 0207 	add.w	r2, sp, #7
 8002df4:	f88d 3007 	strb.w	r3, [sp, #7]
 8002df8:	f7ff ffc7 	bl	8002d8a <u8x8_cad_SendData>
 8002dfc:	e7ef      	b.n	8002dde <u8x8_cad_SendSequence+0x24>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	4628      	mov	r0, r5
 8002e02:	461a      	mov	r2, r3
 8002e04:	68ee      	ldr	r6, [r5, #12]
 8002e06:	3401      	adds	r4, #1
 8002e08:	47b0      	blx	r6
 8002e0a:	e7d9      	b.n	8002dc0 <u8x8_cad_SendSequence+0x6>
 8002e0c:	7862      	ldrb	r2, [r4, #1]
 8002e0e:	2129      	movs	r1, #41	; 0x29
 8002e10:	4628      	mov	r0, r5
 8002e12:	f88d 2007 	strb.w	r2, [sp, #7]
 8002e16:	f000 f946 	bl	80030a6 <u8x8_gpio_call>
 8002e1a:	e7e0      	b.n	8002dde <u8x8_cad_SendSequence+0x24>

08002e1c <u8x8_cad_ssd13xx_fast_i2c>:
 8002e1c:	3914      	subs	r1, #20
 8002e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e22:	4604      	mov	r4, r0
 8002e24:	4615      	mov	r5, r2
 8002e26:	461e      	mov	r6, r3
 8002e28:	2905      	cmp	r1, #5
 8002e2a:	d84e      	bhi.n	8002eca <u8x8_cad_ssd13xx_fast_i2c+0xae>
 8002e2c:	e8df f001 	tbb	[pc, r1]
 8002e30:	1c170333 	.word	0x1c170333
 8002e34:	4541      	.short	0x4541
 8002e36:	4e26      	ldr	r6, [pc, #152]	; (8002ed0 <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002e38:	7832      	ldrb	r2, [r6, #0]
 8002e3a:	b10a      	cbz	r2, 8002e40 <u8x8_cad_ssd13xx_fast_i2c+0x24>
 8002e3c:	f7ff ff78 	bl	8002d30 <u8x8_byte_EndTransfer>
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff ff6d 	bl	8002d20 <u8x8_byte_StartTransfer>
 8002e46:	2100      	movs	r1, #0
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f7ff ff5e 	bl	8002d0a <u8x8_byte_SendByte>
 8002e4e:	4629      	mov	r1, r5
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff ff5a 	bl	8002d0a <u8x8_byte_SendByte>
 8002e56:	2001      	movs	r0, #1
 8002e58:	7030      	strb	r0, [r6, #0]
 8002e5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e5e:	4611      	mov	r1, r2
 8002e60:	f7ff ff53 	bl	8002d0a <u8x8_byte_SendByte>
 8002e64:	2001      	movs	r0, #1
 8002e66:	e7f8      	b.n	8002e5a <u8x8_cad_ssd13xx_fast_i2c+0x3e>
 8002e68:	4f19      	ldr	r7, [pc, #100]	; (8002ed0 <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002e6a:	783a      	ldrb	r2, [r7, #0]
 8002e6c:	b10a      	cbz	r2, 8002e72 <u8x8_cad_ssd13xx_fast_i2c+0x56>
 8002e6e:	f7ff ff5f 	bl	8002d30 <u8x8_byte_EndTransfer>
 8002e72:	2d18      	cmp	r5, #24
 8002e74:	4632      	mov	r2, r6
 8002e76:	d806      	bhi.n	8002e86 <u8x8_cad_ssd13xx_fast_i2c+0x6a>
 8002e78:	4629      	mov	r1, r5
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ff60 	bl	8002d40 <u8x8_i2c_data_transfer>
 8002e80:	2300      	movs	r3, #0
 8002e82:	703b      	strb	r3, [r7, #0]
 8002e84:	e7ee      	b.n	8002e64 <u8x8_cad_ssd13xx_fast_i2c+0x48>
 8002e86:	2118      	movs	r1, #24
 8002e88:	4620      	mov	r0, r4
 8002e8a:	3d18      	subs	r5, #24
 8002e8c:	f7ff ff58 	bl	8002d40 <u8x8_i2c_data_transfer>
 8002e90:	b2ed      	uxtb	r5, r5
 8002e92:	3618      	adds	r6, #24
 8002e94:	e7ed      	b.n	8002e72 <u8x8_cad_ssd13xx_fast_i2c+0x56>
 8002e96:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002e9a:	6907      	ldr	r7, [r0, #16]
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	bf04      	itt	eq
 8002ea0:	2378      	moveq	r3, #120	; 0x78
 8002ea2:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
 8002ea6:	46bc      	mov	ip, r7
 8002ea8:	4633      	mov	r3, r6
 8002eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eae:	2114      	movs	r1, #20
 8002eb0:	4760      	bx	ip
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e7d4      	b.n	8002e64 <u8x8_cad_ssd13xx_fast_i2c+0x48>
 8002eba:	4d05      	ldr	r5, [pc, #20]	; (8002ed0 <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002ebc:	782a      	ldrb	r2, [r5, #0]
 8002ebe:	b10a      	cbz	r2, 8002ec4 <u8x8_cad_ssd13xx_fast_i2c+0xa8>
 8002ec0:	f7ff ff36 	bl	8002d30 <u8x8_byte_EndTransfer>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	702b      	strb	r3, [r5, #0]
 8002ec8:	e7cc      	b.n	8002e64 <u8x8_cad_ssd13xx_fast_i2c+0x48>
 8002eca:	2000      	movs	r0, #0
 8002ecc:	e7c5      	b.n	8002e5a <u8x8_cad_ssd13xx_fast_i2c+0x3e>
 8002ece:	bf00      	nop
 8002ed0:	20000b31 	.word	0x20000b31

08002ed4 <u8x8_d_ssd1306_sh1106_generic>:
 8002ed4:	390b      	subs	r1, #11
 8002ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed8:	4604      	mov	r4, r0
 8002eda:	4615      	mov	r5, r2
 8002edc:	461e      	mov	r6, r3
 8002ede:	2904      	cmp	r1, #4
 8002ee0:	d855      	bhi.n	8002f8e <u8x8_d_ssd1306_sh1106_generic+0xba>
 8002ee2:	e8df f001 	tbb	[pc, r1]
 8002ee6:	5403      	.short	0x5403
 8002ee8:	1b0c      	.short	0x1b0c
 8002eea:	29          	.byte	0x29
 8002eeb:	00          	.byte	0x00
 8002eec:	b92a      	cbnz	r2, 8002efa <u8x8_d_ssd1306_sh1106_generic+0x26>
 8002eee:	4929      	ldr	r1, [pc, #164]	; (8002f94 <u8x8_d_ssd1306_sh1106_generic+0xc0>)
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ff62 	bl	8002dba <u8x8_cad_SendSequence>
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002efa:	4927      	ldr	r1, [pc, #156]	; (8002f98 <u8x8_d_ssd1306_sh1106_generic+0xc4>)
 8002efc:	e7f8      	b.n	8002ef0 <u8x8_d_ssd1306_sh1106_generic+0x1c>
 8002efe:	b93a      	cbnz	r2, 8002f10 <u8x8_d_ssd1306_sh1106_generic+0x3c>
 8002f00:	4926      	ldr	r1, [pc, #152]	; (8002f9c <u8x8_d_ssd1306_sh1106_generic+0xc8>)
 8002f02:	f7ff ff5a 	bl	8002dba <u8x8_cad_SendSequence>
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	7c9b      	ldrb	r3, [r3, #18]
 8002f0a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002f0e:	e7f2      	b.n	8002ef6 <u8x8_d_ssd1306_sh1106_generic+0x22>
 8002f10:	4923      	ldr	r1, [pc, #140]	; (8002fa0 <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 8002f12:	f7ff ff52 	bl	8002dba <u8x8_cad_SendSequence>
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	7cdb      	ldrb	r3, [r3, #19]
 8002f1a:	e7f6      	b.n	8002f0a <u8x8_d_ssd1306_sh1106_generic+0x36>
 8002f1c:	f7ff ff3d 	bl	8002d9a <u8x8_cad_StartTransfer>
 8002f20:	2181      	movs	r1, #129	; 0x81
 8002f22:	4620      	mov	r0, r4
 8002f24:	f7ff ff21 	bl	8002d6a <u8x8_cad_SendCmd>
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f7ff ff25 	bl	8002d7a <u8x8_cad_SendArg>
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff ff3a 	bl	8002daa <u8x8_cad_EndTransfer>
 8002f36:	e7de      	b.n	8002ef6 <u8x8_d_ssd1306_sh1106_generic+0x22>
 8002f38:	f7ff ff2f 	bl	8002d9a <u8x8_cad_StartTransfer>
 8002f3c:	7973      	ldrb	r3, [r6, #5]
 8002f3e:	f894 7022 	ldrb.w	r7, [r4, #34]	; 0x22
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8002f48:	f007 07ff 	and.w	r7, r7, #255	; 0xff
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f7ff ff0c 	bl	8002d6a <u8x8_cad_SendCmd>
 8002f52:	0939      	lsrs	r1, r7, #4
 8002f54:	f041 0110 	orr.w	r1, r1, #16
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7ff ff06 	bl	8002d6a <u8x8_cad_SendCmd>
 8002f5e:	f007 010f 	and.w	r1, r7, #15
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ff09 	bl	8002d7a <u8x8_cad_SendArg>
 8002f68:	79b1      	ldrb	r1, [r6, #6]
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002f70:	f7ff ff03 	bl	8002d7a <u8x8_cad_SendArg>
 8002f74:	7931      	ldrb	r1, [r6, #4]
 8002f76:	4620      	mov	r0, r4
 8002f78:	00c9      	lsls	r1, r1, #3
 8002f7a:	6832      	ldr	r2, [r6, #0]
 8002f7c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8002f80:	3d01      	subs	r5, #1
 8002f82:	f7ff ff02 	bl	8002d8a <u8x8_cad_SendData>
 8002f86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002f8a:	d1f3      	bne.n	8002f74 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8002f8c:	e7d0      	b.n	8002f30 <u8x8_d_ssd1306_sh1106_generic+0x5c>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e7b2      	b.n	8002ef8 <u8x8_d_ssd1306_sh1106_generic+0x24>
 8002f92:	bf00      	nop
 8002f94:	0800e7a3 	.word	0x0800e7a3
 8002f98:	0800e7a8 	.word	0x0800e7a8
 8002f9c:	0800e760 	.word	0x0800e760
 8002fa0:	0800e767 	.word	0x0800e767

08002fa4 <u8x8_d_ssd1306_128x64_noname>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	460d      	mov	r5, r1
 8002faa:	f7ff ff93 	bl	8002ed4 <u8x8_d_ssd1306_sh1106_generic>
 8002fae:	b950      	cbnz	r0, 8002fc6 <u8x8_d_ssd1306_128x64_noname+0x22>
 8002fb0:	2d09      	cmp	r5, #9
 8002fb2:	d00a      	beq.n	8002fca <u8x8_d_ssd1306_128x64_noname+0x26>
 8002fb4:	2d0a      	cmp	r5, #10
 8002fb6:	d107      	bne.n	8002fc8 <u8x8_d_ssd1306_128x64_noname+0x24>
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 f814 	bl	8002fe6 <u8x8_d_helper_display_init>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <u8x8_d_ssd1306_128x64_noname+0x30>)
 8002fc2:	f7ff fefa 	bl	8002dba <u8x8_cad_SendSequence>
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	bd38      	pop	{r3, r4, r5, pc}
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4902      	ldr	r1, [pc, #8]	; (8002fd8 <u8x8_d_ssd1306_128x64_noname+0x34>)
 8002fce:	f000 f805 	bl	8002fdc <u8x8_d_helper_display_setup_memory>
 8002fd2:	e7f8      	b.n	8002fc6 <u8x8_d_ssd1306_128x64_noname+0x22>
 8002fd4:	0800e76e 	.word	0x0800e76e
 8002fd8:	0800e7b0 	.word	0x0800e7b0

08002fdc <u8x8_d_helper_display_setup_memory>:
 8002fdc:	6001      	str	r1, [r0, #0]
 8002fde:	7c8b      	ldrb	r3, [r1, #18]
 8002fe0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 8002fe4:	4770      	bx	lr

08002fe6 <u8x8_d_helper_display_init>:
 8002fe6:	b538      	push	{r3, r4, r5, lr}
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2128      	movs	r1, #40	; 0x28
 8002fec:	461a      	mov	r2, r3
 8002fee:	6945      	ldr	r5, [r0, #20]
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	47a8      	blx	r5
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	2114      	movs	r1, #20
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	68e5      	ldr	r5, [r4, #12]
 8002ffe:	47a8      	blx	r5
 8003000:	4620      	mov	r0, r4
 8003002:	2201      	movs	r2, #1
 8003004:	214b      	movs	r1, #75	; 0x4b
 8003006:	f000 f84e 	bl	80030a6 <u8x8_gpio_call>
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	4620      	mov	r0, r4
 800300e:	791a      	ldrb	r2, [r3, #4]
 8003010:	2129      	movs	r1, #41	; 0x29
 8003012:	f000 f848 	bl	80030a6 <u8x8_gpio_call>
 8003016:	4620      	mov	r0, r4
 8003018:	2200      	movs	r2, #0
 800301a:	214b      	movs	r1, #75	; 0x4b
 800301c:	f000 f843 	bl	80030a6 <u8x8_gpio_call>
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	4620      	mov	r0, r4
 8003024:	791a      	ldrb	r2, [r3, #4]
 8003026:	2129      	movs	r1, #41	; 0x29
 8003028:	f000 f83d 	bl	80030a6 <u8x8_gpio_call>
 800302c:	4620      	mov	r0, r4
 800302e:	2201      	movs	r2, #1
 8003030:	214b      	movs	r1, #75	; 0x4b
 8003032:	f000 f838 	bl	80030a6 <u8x8_gpio_call>
 8003036:	6823      	ldr	r3, [r4, #0]
 8003038:	4620      	mov	r0, r4
 800303a:	795a      	ldrb	r2, [r3, #5]
 800303c:	2129      	movs	r1, #41	; 0x29
 800303e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003042:	f000 b830 	b.w	80030a6 <u8x8_gpio_call>

08003046 <u8x8_DrawTile>:
 8003046:	b513      	push	{r0, r1, r4, lr}
 8003048:	f88d 3004 	strb.w	r3, [sp, #4]
 800304c:	9b04      	ldr	r3, [sp, #16]
 800304e:	f88d 1005 	strb.w	r1, [sp, #5]
 8003052:	f88d 2006 	strb.w	r2, [sp, #6]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	466b      	mov	r3, sp
 800305c:	210f      	movs	r1, #15
 800305e:	6884      	ldr	r4, [r0, #8]
 8003060:	47a0      	blx	r4
 8003062:	b002      	add	sp, #8
 8003064:	bd10      	pop	{r4, pc}

08003066 <u8x8_SetupMemory>:
 8003066:	2300      	movs	r3, #0
 8003068:	b410      	push	{r4}
 800306a:	6884      	ldr	r4, [r0, #8]
 800306c:	461a      	mov	r2, r3
 800306e:	46a4      	mov	ip, r4
 8003070:	2109      	movs	r1, #9
 8003072:	bc10      	pop	{r4}
 8003074:	4760      	bx	ip

08003076 <u8x8_InitDisplay>:
 8003076:	2300      	movs	r3, #0
 8003078:	b410      	push	{r4}
 800307a:	6884      	ldr	r4, [r0, #8]
 800307c:	461a      	mov	r2, r3
 800307e:	46a4      	mov	ip, r4
 8003080:	210a      	movs	r1, #10
 8003082:	bc10      	pop	{r4}
 8003084:	4760      	bx	ip

08003086 <u8x8_SetPowerSave>:
 8003086:	b410      	push	{r4}
 8003088:	6884      	ldr	r4, [r0, #8]
 800308a:	460a      	mov	r2, r1
 800308c:	46a4      	mov	ip, r4
 800308e:	2300      	movs	r3, #0
 8003090:	210b      	movs	r1, #11
 8003092:	bc10      	pop	{r4}
 8003094:	4760      	bx	ip

08003096 <u8x8_RefreshDisplay>:
 8003096:	2300      	movs	r3, #0
 8003098:	b410      	push	{r4}
 800309a:	6884      	ldr	r4, [r0, #8]
 800309c:	461a      	mov	r2, r3
 800309e:	46a4      	mov	ip, r4
 80030a0:	2110      	movs	r1, #16
 80030a2:	bc10      	pop	{r4}
 80030a4:	4760      	bx	ip

080030a6 <u8x8_gpio_call>:
 80030a6:	b410      	push	{r4}
 80030a8:	6944      	ldr	r4, [r0, #20]
 80030aa:	2300      	movs	r3, #0
 80030ac:	46a4      	mov	ip, r4
 80030ae:	bc10      	pop	{r4}
 80030b0:	4760      	bx	ip

080030b2 <u8x8_dummy_cb>:
 80030b2:	2000      	movs	r0, #0
 80030b4:	4770      	bx	lr
	...

080030b8 <u8x8_SetupDefaults>:
 80030b8:	2300      	movs	r3, #0
 80030ba:	6003      	str	r3, [r0, #0]
 80030bc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80030c0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80030c2:	6183      	str	r3, [r0, #24]
 80030c4:	23ff      	movs	r3, #255	; 0xff
 80030c6:	4a05      	ldr	r2, [pc, #20]	; (80030dc <u8x8_SetupDefaults+0x24>)
 80030c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80030cc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80030d0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80030d4:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	080030b3 	.word	0x080030b3

080030e0 <u8x8_Setup>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	9f06      	ldr	r7, [sp, #24]
 80030e4:	4616      	mov	r6, r2
 80030e6:	461d      	mov	r5, r3
 80030e8:	f7ff ffe6 	bl	80030b8 <u8x8_SetupDefaults>
 80030ec:	e9c0 1602 	strd	r1, r6, [r0, #8]
 80030f0:	e9c0 5704 	strd	r5, r7, [r0, #16]
 80030f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030f8:	f7ff bfb5 	b.w	8003066 <u8x8_SetupMemory>

080030fc <Reset_Handler>:
 80030fc:	2100      	movs	r1, #0
 80030fe:	e003      	b.n	8003108 <LoopCopyDataInit>

08003100 <CopyDataInit>:
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <LoopFillZerobss+0x14>)
 8003102:	585b      	ldr	r3, [r3, r1]
 8003104:	5043      	str	r3, [r0, r1]
 8003106:	3104      	adds	r1, #4

08003108 <LoopCopyDataInit>:
 8003108:	480a      	ldr	r0, [pc, #40]	; (8003134 <LoopFillZerobss+0x18>)
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <LoopFillZerobss+0x1c>)
 800310c:	1842      	adds	r2, r0, r1
 800310e:	429a      	cmp	r2, r3
 8003110:	d3f6      	bcc.n	8003100 <CopyDataInit>
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <LoopFillZerobss+0x20>)
 8003114:	e002      	b.n	800311c <LoopFillZerobss>

08003116 <FillZerobss>:
 8003116:	2300      	movs	r3, #0
 8003118:	f842 3b04 	str.w	r3, [r2], #4

0800311c <LoopFillZerobss>:
 800311c:	4b08      	ldr	r3, [pc, #32]	; (8003140 <LoopFillZerobss+0x24>)
 800311e:	429a      	cmp	r2, r3
 8003120:	d3f9      	bcc.n	8003116 <FillZerobss>
 8003122:	f7ff f865 	bl	80021f0 <SystemInit>
 8003126:	f006 fe27 	bl	8009d78 <__libc_init_array>
 800312a:	f7fe f9af 	bl	800148c <main>
 800312e:	4770      	bx	lr
 8003130:	0800ec18 	.word	0x0800ec18
 8003134:	20000000 	.word	0x20000000
 8003138:	20000350 	.word	0x20000350
 800313c:	20000350 	.word	0x20000350
 8003140:	20003400 	.word	0x20003400

08003144 <ADC1_2_IRQHandler>:
 8003144:	e7fe      	b.n	8003144 <ADC1_2_IRQHandler>
	...

08003148 <Max6675_Read_TempValue>:
	Temp*=0.25;                                           // Data to Centigrade Conversation
	*tempartureVariable = Temp;
}

int8_t Max6675_Read_TempValue(float* tempartureVariable)
{
 8003148:	b570      	push	{r4, r5, r6, lr}
	float Temp=0;                                  // Temperature Variable
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 800314a:	4e11      	ldr	r6, [pc, #68]	; (8003190 <Max6675_Read_TempValue+0x48>)
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 800314c:	4d11      	ldr	r5, [pc, #68]	; (8003194 <Max6675_Read_TempValue+0x4c>)
{
 800314e:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 8003150:	2200      	movs	r2, #0
 8003152:	4630      	mov	r0, r6
 8003154:	2110      	movs	r1, #16
 8003156:	f000 fa99 	bl	800368c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 800315a:	2332      	movs	r3, #50	; 0x32
 800315c:	4629      	mov	r1, r5
 800315e:	2201      	movs	r2, #1
 8003160:	480d      	ldr	r0, [pc, #52]	; (8003198 <Max6675_Read_TempValue+0x50>)
 8003162:	f002 fe3b 	bl	8005ddc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_SET);         // High State for SPI Communication
 8003166:	2201      	movs	r2, #1
 8003168:	2110      	movs	r1, #16
 800316a:	4630      	mov	r0, r6
 800316c:	f000 fa8e 	bl	800368c <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8003170:	8828      	ldrh	r0, [r5, #0]
 8003172:	4b0a      	ldr	r3, [pc, #40]	; (800319c <Max6675_Read_TempValue+0x54>)
 8003174:	f3c0 0580 	ubfx	r5, r0, #2, #1
 8003178:	701d      	strb	r5, [r3, #0]
	Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 800317a:	08c0      	lsrs	r0, r0, #3
 800317c:	f7fd fd3e 	bl	8000bfc <__aeabi_i2f>
	Temp*=0.25;                                           // Data to Centigrade Conversation
 8003180:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8003184:	f7fd fd8e 	bl	8000ca4 <__aeabi_fmul>
	*tempartureVariable = Temp;
	AlarmVar = TCF;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <Max6675_Read_TempValue+0x58>)
	*tempartureVariable = Temp;
 800318a:	6020      	str	r0, [r4, #0]
	AlarmVar = TCF;
 800318c:	701d      	strb	r5, [r3, #0]
}
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	40010800 	.word	0x40010800
 8003194:	20002424 	.word	0x20002424
 8003198:	20001c9c 	.word	0x20001c9c
 800319c:	20000b32 	.word	0x20000b32
 80031a0:	20000704 	.word	0x20000704

080031a4 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <HAL_Init+0x20>)
{
 80031a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a8:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	f043 0310 	orr.w	r3, r3, #16
 80031b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b2:	f000 f82d 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fe ff44 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031bc:	f7fe fd42 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80031c0:	2000      	movs	r0, #0
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	40022000 	.word	0x40022000

080031c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80031c8:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <HAL_IncTick+0x10>)
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_IncTick+0x14>)
 80031cc:	6811      	ldr	r1, [r2, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	440b      	add	r3, r1
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	2000242c 	.word	0x2000242c
 80031dc:	20000004 	.word	0x20000004

080031e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80031e0:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_GetTick+0x8>)
 80031e2:	6818      	ldr	r0, [r3, #0]
}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	2000242c 	.word	0x2000242c

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80031f0:	f7ff fff6 	bl	80031e0 <HAL_GetTick>
 80031f4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031f6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80031f8:	bf1e      	ittt	ne
 80031fa:	4b04      	ldrne	r3, [pc, #16]	; (800320c <HAL_Delay+0x20>)
 80031fc:	781b      	ldrbne	r3, [r3, #0]
 80031fe:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	1b43      	subs	r3, r0, r5
 8003206:	42a3      	cmp	r3, r4
 8003208:	d3fa      	bcc.n	8003200 <HAL_Delay+0x14>
  {
  }
}
 800320a:	bd38      	pop	{r3, r4, r5, pc}
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003210:	4907      	ldr	r1, [pc, #28]	; (8003230 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003212:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800321e:	0412      	lsls	r2, r2, #16
 8003220:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800322c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003236:	b530      	push	{r4, r5, lr}
 8003238:	68dc      	ldr	r4, [r3, #12]
 800323a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	2b04      	cmp	r3, #4
 8003246:	bf28      	it	cs
 8003248:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003250:	bf98      	it	ls
 8003252:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003258:	bf88      	it	hi
 800325a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	ea21 0303 	bic.w	r3, r1, r3
 8003260:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003262:	fa05 f404 	lsl.w	r4, r5, r4
 8003266:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800326a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	bfac      	ite	ge
 8003272:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	4a07      	ldrlt	r2, [pc, #28]	; (8003294 <HAL_NVIC_SetPriority+0x60>)
 8003278:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800327c:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327e:	bfab      	itete	ge
 8003280:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003288:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800328e:	bd30      	pop	{r4, r5, pc}
 8003290:	e000ed00 	.word	0xe000ed00
 8003294:	e000ed14 	.word	0xe000ed14

08003298 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003298:	2800      	cmp	r0, #0
 800329a:	db08      	blt.n	80032ae <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800329c:	2301      	movs	r3, #1
 800329e:	0942      	lsrs	r2, r0, #5
 80032a0:	f000 001f 	and.w	r0, r0, #31
 80032a4:	fa03 f000 	lsl.w	r0, r3, r0
 80032a8:	4b01      	ldr	r3, [pc, #4]	; (80032b0 <HAL_NVIC_EnableIRQ+0x18>)
 80032aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80032ae:	4770      	bx	lr
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80032b6:	b320      	cbz	r0, 8003302 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80032b8:	2214      	movs	r2, #20
 80032ba:	6801      	ldr	r1, [r0, #0]
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_DMA_Init+0x54>)
 80032be:	440b      	add	r3, r1
 80032c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80032c8:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032ca:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80032cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032ce:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80032d2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d4:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032d6:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032da:	4323      	orrs	r3, r4
 80032dc:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032de:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e4:	6944      	ldr	r4, [r0, #20]
 80032e6:	4323      	orrs	r3, r4
 80032e8:	6984      	ldr	r4, [r0, #24]
 80032ea:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ec:	69c4      	ldr	r4, [r0, #28]
 80032ee:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80032f0:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f2:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80032f4:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80032fa:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fc:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80032fe:	4618      	mov	r0, r3
}
 8003300:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003302:	2001      	movs	r0, #1
 8003304:	e7fc      	b.n	8003300 <HAL_DMA_Init+0x4c>
 8003306:	bf00      	nop
 8003308:	bffdfff8 	.word	0xbffdfff8
 800330c:	40020000 	.word	0x40020000

08003310 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003310:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003312:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003316:	2b02      	cmp	r3, #2
 8003318:	d003      	beq.n	8003322 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800331a:	2304      	movs	r3, #4
 800331c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800331e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8003320:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003322:	6803      	ldr	r3, [r0, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	f022 020e 	bic.w	r2, r2, #14
 800332a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	f022 0201 	bic.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003334:	4a17      	ldr	r2, [pc, #92]	; (8003394 <HAL_DMA_Abort_IT+0x84>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01c      	beq.n	8003374 <HAL_DMA_Abort_IT+0x64>
 800333a:	3214      	adds	r2, #20
 800333c:	4293      	cmp	r3, r2
 800333e:	d01b      	beq.n	8003378 <HAL_DMA_Abort_IT+0x68>
 8003340:	3214      	adds	r2, #20
 8003342:	4293      	cmp	r3, r2
 8003344:	d01a      	beq.n	800337c <HAL_DMA_Abort_IT+0x6c>
 8003346:	3214      	adds	r2, #20
 8003348:	4293      	cmp	r3, r2
 800334a:	d01a      	beq.n	8003382 <HAL_DMA_Abort_IT+0x72>
 800334c:	3214      	adds	r2, #20
 800334e:	4293      	cmp	r3, r2
 8003350:	d01a      	beq.n	8003388 <HAL_DMA_Abort_IT+0x78>
 8003352:	3214      	adds	r2, #20
 8003354:	4293      	cmp	r3, r2
 8003356:	bf0c      	ite	eq
 8003358:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800335c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8003360:	4a0d      	ldr	r2, [pc, #52]	; (8003398 <HAL_DMA_Abort_IT+0x88>)
 8003362:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003364:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003368:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800336a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800336c:	b17b      	cbz	r3, 800338e <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 800336e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2000      	movs	r0, #0
 8003372:	e7d5      	b.n	8003320 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003374:	2301      	movs	r3, #1
 8003376:	e7f3      	b.n	8003360 <HAL_DMA_Abort_IT+0x50>
 8003378:	2310      	movs	r3, #16
 800337a:	e7f1      	b.n	8003360 <HAL_DMA_Abort_IT+0x50>
 800337c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003380:	e7ee      	b.n	8003360 <HAL_DMA_Abort_IT+0x50>
 8003382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003386:	e7eb      	b.n	8003360 <HAL_DMA_Abort_IT+0x50>
 8003388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800338c:	e7e8      	b.n	8003360 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800338e:	4618      	mov	r0, r3
 8003390:	e7c6      	b.n	8003320 <HAL_DMA_Abort_IT+0x10>
 8003392:	bf00      	nop
 8003394:	40020008 	.word	0x40020008
 8003398:	40020000 	.word	0x40020000

0800339c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800339c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800339e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a0:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033a4:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80033a6:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033a8:	4095      	lsls	r5, r2
 80033aa:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 80033ac:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80033ae:	d032      	beq.n	8003416 <HAL_DMA_IRQHandler+0x7a>
 80033b0:	074d      	lsls	r5, r1, #29
 80033b2:	d530      	bpl.n	8003416 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033b8:	bf5e      	ittt	pl
 80033ba:	681a      	ldrpl	r2, [r3, #0]
 80033bc:	f022 0204 	bicpl.w	r2, r2, #4
 80033c0:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033c2:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <HAL_DMA_IRQHandler+0x11c>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d019      	beq.n	80033fc <HAL_DMA_IRQHandler+0x60>
 80033c8:	3214      	adds	r2, #20
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d018      	beq.n	8003400 <HAL_DMA_IRQHandler+0x64>
 80033ce:	3214      	adds	r2, #20
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d017      	beq.n	8003404 <HAL_DMA_IRQHandler+0x68>
 80033d4:	3214      	adds	r2, #20
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d017      	beq.n	800340a <HAL_DMA_IRQHandler+0x6e>
 80033da:	3214      	adds	r2, #20
 80033dc:	4293      	cmp	r3, r2
 80033de:	d017      	beq.n	8003410 <HAL_DMA_IRQHandler+0x74>
 80033e0:	3214      	adds	r2, #20
 80033e2:	4293      	cmp	r3, r2
 80033e4:	bf0c      	ite	eq
 80033e6:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80033ea:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80033ee:	4a33      	ldr	r2, [pc, #204]	; (80034bc <HAL_DMA_IRQHandler+0x120>)
 80033f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05c      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80033f8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80033fa:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80033fc:	2304      	movs	r3, #4
 80033fe:	e7f6      	b.n	80033ee <HAL_DMA_IRQHandler+0x52>
 8003400:	2340      	movs	r3, #64	; 0x40
 8003402:	e7f4      	b.n	80033ee <HAL_DMA_IRQHandler+0x52>
 8003404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003408:	e7f1      	b.n	80033ee <HAL_DMA_IRQHandler+0x52>
 800340a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800340e:	e7ee      	b.n	80033ee <HAL_DMA_IRQHandler+0x52>
 8003410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003414:	e7eb      	b.n	80033ee <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003416:	2502      	movs	r5, #2
 8003418:	4095      	lsls	r5, r2
 800341a:	4225      	tst	r5, r4
 800341c:	d035      	beq.n	800348a <HAL_DMA_IRQHandler+0xee>
 800341e:	078d      	lsls	r5, r1, #30
 8003420:	d533      	bpl.n	800348a <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	0694      	lsls	r4, r2, #26
 8003426:	d406      	bmi.n	8003436 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f022 020a 	bic.w	r2, r2, #10
 800342e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003430:	2201      	movs	r2, #1
 8003432:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003436:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_DMA_IRQHandler+0x11c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d019      	beq.n	8003470 <HAL_DMA_IRQHandler+0xd4>
 800343c:	3214      	adds	r2, #20
 800343e:	4293      	cmp	r3, r2
 8003440:	d018      	beq.n	8003474 <HAL_DMA_IRQHandler+0xd8>
 8003442:	3214      	adds	r2, #20
 8003444:	4293      	cmp	r3, r2
 8003446:	d017      	beq.n	8003478 <HAL_DMA_IRQHandler+0xdc>
 8003448:	3214      	adds	r2, #20
 800344a:	4293      	cmp	r3, r2
 800344c:	d017      	beq.n	800347e <HAL_DMA_IRQHandler+0xe2>
 800344e:	3214      	adds	r2, #20
 8003450:	4293      	cmp	r3, r2
 8003452:	d017      	beq.n	8003484 <HAL_DMA_IRQHandler+0xe8>
 8003454:	3214      	adds	r2, #20
 8003456:	4293      	cmp	r3, r2
 8003458:	bf0c      	ite	eq
 800345a:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800345e:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8003462:	4a16      	ldr	r2, [pc, #88]	; (80034bc <HAL_DMA_IRQHandler+0x120>)
 8003464:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003466:	2300      	movs	r3, #0
 8003468:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800346c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800346e:	e7c1      	b.n	80033f4 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003470:	2302      	movs	r3, #2
 8003472:	e7f6      	b.n	8003462 <HAL_DMA_IRQHandler+0xc6>
 8003474:	2320      	movs	r3, #32
 8003476:	e7f4      	b.n	8003462 <HAL_DMA_IRQHandler+0xc6>
 8003478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800347c:	e7f1      	b.n	8003462 <HAL_DMA_IRQHandler+0xc6>
 800347e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003482:	e7ee      	b.n	8003462 <HAL_DMA_IRQHandler+0xc6>
 8003484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003488:	e7eb      	b.n	8003462 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800348a:	2508      	movs	r5, #8
 800348c:	4095      	lsls	r5, r2
 800348e:	4225      	tst	r5, r4
 8003490:	d00f      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x116>
 8003492:	0709      	lsls	r1, r1, #28
 8003494:	d50d      	bpl.n	80034b2 <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f021 010e 	bic.w	r1, r1, #14
 800349c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800349e:	2301      	movs	r3, #1
 80034a0:	fa03 f202 	lsl.w	r2, r3, r2
 80034a4:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034a6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80034a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034ac:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80034ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80034b0:	e7a0      	b.n	80033f4 <HAL_DMA_IRQHandler+0x58>
}
 80034b2:	bc70      	pop	{r4, r5, r6}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40020008 	.word	0x40020008
 80034bc:	40020000 	.word	0x40020000

080034c0 <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 80034c0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034cc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80034ce:	4616      	mov	r6, r2
 80034d0:	4b64      	ldr	r3, [pc, #400]	; (8003664 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80034d2:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003674 <HAL_GPIO_Init+0x1ac>
 80034d6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8003678 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034da:	680d      	ldr	r5, [r1, #0]
 80034dc:	fa35 f406 	lsrs.w	r4, r5, r6
 80034e0:	d102      	bne.n	80034e8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80034e2:	b003      	add	sp, #12
 80034e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80034e8:	f04f 0801 	mov.w	r8, #1
 80034ec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f0:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80034f4:	ea38 0505 	bics.w	r5, r8, r5
 80034f8:	d17c      	bne.n	80035f4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80034fa:	684d      	ldr	r5, [r1, #4]
 80034fc:	2d03      	cmp	r5, #3
 80034fe:	d807      	bhi.n	8003510 <HAL_GPIO_Init+0x48>
 8003500:	3d01      	subs	r5, #1
 8003502:	2d02      	cmp	r5, #2
 8003504:	f200 8088 	bhi.w	8003618 <HAL_GPIO_Init+0x150>
 8003508:	e8df f005 	tbb	[pc, r5]
 800350c:	9b96      	.short	0x9b96
 800350e:	a1          	.byte	0xa1
 800350f:	00          	.byte	0x00
 8003510:	2d12      	cmp	r5, #18
 8003512:	f000 8099 	beq.w	8003648 <HAL_GPIO_Init+0x180>
 8003516:	d86f      	bhi.n	80035f8 <HAL_GPIO_Init+0x130>
 8003518:	2d11      	cmp	r5, #17
 800351a:	f000 808f 	beq.w	800363c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800351e:	2cff      	cmp	r4, #255	; 0xff
 8003520:	bf98      	it	ls
 8003522:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003524:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003528:	bf88      	it	hi
 800352a:	f100 0a04 	addhi.w	sl, r0, #4
 800352e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003532:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003536:	bf88      	it	hi
 8003538:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800353a:	fa09 fb05 	lsl.w	fp, r9, r5
 800353e:	ea28 080b 	bic.w	r8, r8, fp
 8003542:	fa02 f505 	lsl.w	r5, r2, r5
 8003546:	ea48 0505 	orr.w	r5, r8, r5
 800354a:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800354e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8003552:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003556:	d04d      	beq.n	80035f4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003558:	4f43      	ldr	r7, [pc, #268]	; (8003668 <HAL_GPIO_Init+0x1a0>)
 800355a:	f026 0803 	bic.w	r8, r6, #3
 800355e:	69bd      	ldr	r5, [r7, #24]
 8003560:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003564:	f045 0501 	orr.w	r5, r5, #1
 8003568:	61bd      	str	r5, [r7, #24]
 800356a:	69bd      	ldr	r5, [r7, #24]
 800356c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8003570:	f005 0501 	and.w	r5, r5, #1
 8003574:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003576:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800357a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800357c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003580:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003584:	fa09 f90b 	lsl.w	r9, r9, fp
 8003588:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800358c:	4d37      	ldr	r5, [pc, #220]	; (800366c <HAL_GPIO_Init+0x1a4>)
 800358e:	42a8      	cmp	r0, r5
 8003590:	d061      	beq.n	8003656 <HAL_GPIO_Init+0x18e>
 8003592:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003596:	42a8      	cmp	r0, r5
 8003598:	d05f      	beq.n	800365a <HAL_GPIO_Init+0x192>
 800359a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800359e:	42a8      	cmp	r0, r5
 80035a0:	d05d      	beq.n	800365e <HAL_GPIO_Init+0x196>
 80035a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80035a6:	42a8      	cmp	r0, r5
 80035a8:	bf0c      	ite	eq
 80035aa:	2503      	moveq	r5, #3
 80035ac:	2504      	movne	r5, #4
 80035ae:	fa05 f50b 	lsl.w	r5, r5, fp
 80035b2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80035b6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80035ba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035bc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80035c0:	bf14      	ite	ne
 80035c2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035c4:	43a5      	biceq	r5, r4
 80035c6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80035c8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80035ce:	bf14      	ite	ne
 80035d0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035d2:	43a5      	biceq	r5, r4
 80035d4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80035d6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035d8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80035dc:	bf14      	ite	ne
 80035de:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035e0:	43a5      	biceq	r5, r4
 80035e2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80035e4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035e6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80035ea:	bf14      	ite	ne
 80035ec:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035ee:	ea25 0404 	biceq.w	r4, r5, r4
 80035f2:	60dc      	str	r4, [r3, #12]
	position++;
 80035f4:	3601      	adds	r6, #1
 80035f6:	e770      	b.n	80034da <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80035f8:	4f1d      	ldr	r7, [pc, #116]	; (8003670 <HAL_GPIO_Init+0x1a8>)
 80035fa:	42bd      	cmp	r5, r7
 80035fc:	d00c      	beq.n	8003618 <HAL_GPIO_Init+0x150>
 80035fe:	d817      	bhi.n	8003630 <HAL_GPIO_Init+0x168>
 8003600:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800367c <HAL_GPIO_Init+0x1b4>
 8003604:	454d      	cmp	r5, r9
 8003606:	d007      	beq.n	8003618 <HAL_GPIO_Init+0x150>
 8003608:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800360c:	454d      	cmp	r5, r9
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x150>
 8003610:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003614:	454d      	cmp	r5, r9
 8003616:	d182      	bne.n	800351e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003618:	688a      	ldr	r2, [r1, #8]
 800361a:	b1d2      	cbz	r2, 8003652 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800361c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800361e:	bf08      	it	eq
 8003620:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003624:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003628:	bf18      	it	ne
 800362a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800362e:	e776      	b.n	800351e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8003630:	4565      	cmp	r5, ip
 8003632:	d0f1      	beq.n	8003618 <HAL_GPIO_Init+0x150>
 8003634:	4575      	cmp	r5, lr
 8003636:	e7ee      	b.n	8003616 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003638:	68ca      	ldr	r2, [r1, #12]
          break;
 800363a:	e770      	b.n	800351e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800363c:	68ca      	ldr	r2, [r1, #12]
 800363e:	3204      	adds	r2, #4
          break;
 8003640:	e76d      	b.n	800351e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003642:	68ca      	ldr	r2, [r1, #12]
 8003644:	3208      	adds	r2, #8
          break;
 8003646:	e76a      	b.n	800351e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003648:	68ca      	ldr	r2, [r1, #12]
 800364a:	320c      	adds	r2, #12
          break;
 800364c:	e767      	b.n	800351e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800364e:	2200      	movs	r2, #0
 8003650:	e765      	b.n	800351e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003652:	2204      	movs	r2, #4
 8003654:	e763      	b.n	800351e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003656:	2500      	movs	r5, #0
 8003658:	e7a9      	b.n	80035ae <HAL_GPIO_Init+0xe6>
 800365a:	2501      	movs	r5, #1
 800365c:	e7a7      	b.n	80035ae <HAL_GPIO_Init+0xe6>
 800365e:	2502      	movs	r5, #2
 8003660:	e7a5      	b.n	80035ae <HAL_GPIO_Init+0xe6>
 8003662:	bf00      	nop
 8003664:	40010400 	.word	0x40010400
 8003668:	40021000 	.word	0x40021000
 800366c:	40010800 	.word	0x40010800
 8003670:	10220000 	.word	0x10220000
 8003674:	10310000 	.word	0x10310000
 8003678:	10320000 	.word	0x10320000
 800367c:	10120000 	.word	0x10120000

08003680 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003680:	6883      	ldr	r3, [r0, #8]
 8003682:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003684:	bf14      	ite	ne
 8003686:	2001      	movne	r0, #1
 8003688:	2000      	moveq	r0, #0
 800368a:	4770      	bx	lr

0800368c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800368c:	b10a      	cbz	r2, 8003692 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800368e:	6101      	str	r1, [r0, #16]
  }
}
 8003690:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003692:	0409      	lsls	r1, r1, #16
 8003694:	e7fb      	b.n	800368e <HAL_GPIO_WritePin+0x2>
	...

08003698 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003698:	4a04      	ldr	r2, [pc, #16]	; (80036ac <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800369a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800369c:	6951      	ldr	r1, [r2, #20]
 800369e:	4201      	tst	r1, r0
 80036a0:	d002      	beq.n	80036a8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036a4:	f7fe f98a 	bl	80019bc <HAL_GPIO_EXTI_Callback>
  }
}
 80036a8:	bd08      	pop	{r3, pc}
 80036aa:	bf00      	nop
 80036ac:	40010400 	.word	0x40010400

080036b0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b0:	6801      	ldr	r1, [r0, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	694b      	ldr	r3, [r1, #20]
 80036b6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80036ba:	d010      	beq.n	80036de <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036bc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80036c0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80036c4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ca:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036ce:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036d4:	f043 0304 	orr.w	r3, r3, #4
 80036d8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80036da:	2001      	movs	r0, #1
 80036dc:	4770      	bx	lr
  }
  return HAL_OK;
 80036de:	4618      	mov	r0, r3
}
 80036e0:	4770      	bx	lr

080036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80036e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e6:	4604      	mov	r4, r0
 80036e8:	460f      	mov	r7, r1
 80036ea:	4616      	mov	r6, r2
 80036ec:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	6968      	ldr	r0, [r5, #20]
 80036f2:	ea27 0000 	bic.w	r0, r7, r0
 80036f6:	b280      	uxth	r0, r0
 80036f8:	b1b8      	cbz	r0, 800372a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036fa:	696b      	ldr	r3, [r5, #20]
 80036fc:	055a      	lsls	r2, r3, #21
 80036fe:	d516      	bpl.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003700:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003702:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003708:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800370a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800370e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003714:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800371c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800371e:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8003722:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800372a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800372e:	1c73      	adds	r3, r6, #1
 8003730:	d0de      	beq.n	80036f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7ff fd55 	bl	80031e0 <HAL_GetTick>
 8003736:	eba0 0008 	sub.w	r0, r0, r8
 800373a:	42b0      	cmp	r0, r6
 800373c:	d801      	bhi.n	8003742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800373e:	2e00      	cmp	r6, #0
 8003740:	d1d5      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003744:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003746:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800374c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003752:	f042 0220 	orr.w	r2, r2, #32
 8003756:	e7e4      	b.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003758 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003758:	b570      	push	{r4, r5, r6, lr}
 800375a:	4604      	mov	r4, r0
 800375c:	460d      	mov	r5, r1
 800375e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	075b      	lsls	r3, r3, #29
 8003766:	d501      	bpl.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003768:	2000      	movs	r0, #0
}
 800376a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ff9f 	bl	80036b0 <I2C_IsAcknowledgeFailed>
 8003772:	b9a8      	cbnz	r0, 80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003774:	1c6a      	adds	r2, r5, #1
 8003776:	d0f3      	beq.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003778:	f7ff fd32 	bl	80031e0 <HAL_GetTick>
 800377c:	1b80      	subs	r0, r0, r6
 800377e:	42a8      	cmp	r0, r5
 8003780:	d801      	bhi.n	8003786 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003782:	2d00      	cmp	r5, #0
 8003784:	d1ec      	bne.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003786:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003788:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800378a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800378c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003790:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003796:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	f042 0220 	orr.w	r2, r2, #32
 800379e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80037a0:	2001      	movs	r0, #1
 80037a2:	e7e2      	b.n	800376a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080037a4 <I2C_WaitOnFlagUntilTimeout>:
{
 80037a4:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80037a8:	4606      	mov	r6, r0
 80037aa:	460f      	mov	r7, r1
 80037ac:	4691      	mov	r9, r2
 80037ae:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	f1ba 0f01 	cmp.w	sl, #1
 80037ba:	bf0c      	ite	eq
 80037bc:	695c      	ldreq	r4, [r3, #20]
 80037be:	699c      	ldrne	r4, [r3, #24]
 80037c0:	ea27 0404 	bic.w	r4, r7, r4
 80037c4:	b2a4      	uxth	r4, r4
 80037c6:	fab4 f484 	clz	r4, r4
 80037ca:	0964      	lsrs	r4, r4, #5
 80037cc:	45a1      	cmp	r9, r4
 80037ce:	d001      	beq.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80037d0:	2000      	movs	r0, #0
 80037d2:	e017      	b.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	1c6a      	adds	r2, r5, #1
 80037d6:	d0ee      	beq.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037d8:	f7ff fd02 	bl	80031e0 <HAL_GetTick>
 80037dc:	9b08      	ldr	r3, [sp, #32]
 80037de:	1ac0      	subs	r0, r0, r3
 80037e0:	42a8      	cmp	r0, r5
 80037e2:	d801      	bhi.n	80037e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80037e4:	2d00      	cmp	r5, #0
 80037e6:	d1e5      	bne.n	80037b4 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037e8:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ea:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80037ec:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037ee:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037f0:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037f4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037f8:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80037fa:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	f042 0220 	orr.w	r2, r2, #32
 8003802:	6432      	str	r2, [r6, #64]	; 0x40
}
 8003804:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003808 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4604      	mov	r4, r0
 800380c:	460d      	mov	r5, r1
 800380e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	d501      	bpl.n	800381c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003818:	2000      	movs	r0, #0
}
 800381a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800381c:	4620      	mov	r0, r4
 800381e:	f7ff ff47 	bl	80036b0 <I2C_IsAcknowledgeFailed>
 8003822:	b9a8      	cbnz	r0, 8003850 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003824:	1c6a      	adds	r2, r5, #1
 8003826:	d0f3      	beq.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7ff fcda 	bl	80031e0 <HAL_GetTick>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	42a8      	cmp	r0, r5
 8003830:	d801      	bhi.n	8003836 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003832:	2d00      	cmp	r5, #0
 8003834:	d1ec      	bne.n	8003810 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003836:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003838:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800383a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800383c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003840:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003846:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003850:	2001      	movs	r0, #1
 8003852:	e7e2      	b.n	800381a <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003854 <HAL_I2C_Init>:
{
 8003854:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003856:	4604      	mov	r4, r0
 8003858:	b908      	cbnz	r0, 800385e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800385a:	2001      	movs	r0, #1
}
 800385c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003862:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003866:	b91b      	cbnz	r3, 8003870 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003868:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800386c:	f7fe fa12 	bl	8001c94 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003870:	2324      	movs	r3, #36	; 0x24
 8003872:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800388e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003890:	f002 f81c 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003894:	4a3f      	ldr	r2, [pc, #252]	; (8003994 <HAL_I2C_Init+0x140>)
 8003896:	6863      	ldr	r3, [r4, #4]
 8003898:	4293      	cmp	r3, r2
 800389a:	bf94      	ite	ls
 800389c:	4a3e      	ldrls	r2, [pc, #248]	; (8003998 <HAL_I2C_Init+0x144>)
 800389e:	4a3f      	ldrhi	r2, [pc, #252]	; (800399c <HAL_I2C_Init+0x148>)
 80038a0:	4290      	cmp	r0, r2
 80038a2:	bf8c      	ite	hi
 80038a4:	2200      	movhi	r2, #0
 80038a6:	2201      	movls	r2, #1
 80038a8:	2a00      	cmp	r2, #0
 80038aa:	d1d6      	bne.n	800385a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80038ac:	4e3c      	ldr	r6, [pc, #240]	; (80039a0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ae:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80038b0:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b4:	6851      	ldr	r1, [r2, #4]
 80038b6:	3801      	subs	r0, #1
 80038b8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80038bc:	4331      	orrs	r1, r6
 80038be:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038c0:	4934      	ldr	r1, [pc, #208]	; (8003994 <HAL_I2C_Init+0x140>)
 80038c2:	6a15      	ldr	r5, [r2, #32]
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf81      	itttt	hi
 80038c8:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80038cc:	4371      	mulhi	r1, r6
 80038ce:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80038d2:	fbb1 f1f6 	udivhi	r1, r1, r6
 80038d6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80038da:	bf94      	ite	ls
 80038dc:	1c71      	addls	r1, r6, #1
 80038de:	3101      	addhi	r1, #1
 80038e0:	4329      	orrs	r1, r5
 80038e2:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038e4:	69d1      	ldr	r1, [r2, #28]
 80038e6:	4d2b      	ldr	r5, [pc, #172]	; (8003994 <HAL_I2C_Init+0x140>)
 80038e8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80038f2:	d832      	bhi.n	800395a <HAL_I2C_Init+0x106>
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80038fa:	1c43      	adds	r3, r0, #1
 80038fc:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003900:	4203      	tst	r3, r0
 8003902:	d042      	beq.n	800398a <HAL_I2C_Init+0x136>
 8003904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003908:	430b      	orrs	r3, r1
 800390a:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800390c:	6811      	ldr	r1, [r2, #0]
 800390e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003912:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003916:	4303      	orrs	r3, r0
 8003918:	430b      	orrs	r3, r1
 800391a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800391c:	6891      	ldr	r1, [r2, #8]
 800391e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003922:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003926:	4303      	orrs	r3, r0
 8003928:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800392c:	430b      	orrs	r3, r1
 800392e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003930:	68d1      	ldr	r1, [r2, #12]
 8003932:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003936:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800393a:	4303      	orrs	r3, r0
 800393c:	430b      	orrs	r3, r1
 800393e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003940:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003942:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800394c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003954:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003958:	e780      	b.n	800385c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800395a:	68a5      	ldr	r5, [r4, #8]
 800395c:	b955      	cbnz	r5, 8003974 <HAL_I2C_Init+0x120>
 800395e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	b17b      	cbz	r3, 800398e <HAL_I2C_Init+0x13a>
 800396e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003972:	e7c9      	b.n	8003908 <HAL_I2C_Init+0xb4>
 8003974:	2519      	movs	r5, #25
 8003976:	436b      	muls	r3, r5
 8003978:	fbb0 f3f3 	udiv	r3, r0, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	b123      	cbz	r3, 800398e <HAL_I2C_Init+0x13a>
 8003984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003988:	e7be      	b.n	8003908 <HAL_I2C_Init+0xb4>
 800398a:	2304      	movs	r3, #4
 800398c:	e7bc      	b.n	8003908 <HAL_I2C_Init+0xb4>
 800398e:	2301      	movs	r3, #1
 8003990:	e7ba      	b.n	8003908 <HAL_I2C_Init+0xb4>
 8003992:	bf00      	nop
 8003994:	000186a0 	.word	0x000186a0
 8003998:	001e847f 	.word	0x001e847f
 800399c:	003d08ff 	.word	0x003d08ff
 80039a0:	000f4240 	.word	0x000f4240

080039a4 <HAL_I2C_Master_Transmit>:
{
 80039a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039a8:	4604      	mov	r4, r0
 80039aa:	b085      	sub	sp, #20
 80039ac:	4698      	mov	r8, r3
 80039ae:	460d      	mov	r5, r1
 80039b0:	4691      	mov	r9, r2
 80039b2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80039b4:	f7ff fc14 	bl	80031e0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80039bc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d004      	beq.n	80039cc <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80039c2:	2502      	movs	r5, #2
}
 80039c4:	4628      	mov	r0, r5
 80039c6:	b005      	add	sp, #20
 80039c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039cc:	9000      	str	r0, [sp, #0]
 80039ce:	2319      	movs	r3, #25
 80039d0:	2201      	movs	r2, #1
 80039d2:	4620      	mov	r0, r4
 80039d4:	495b      	ldr	r1, [pc, #364]	; (8003b44 <HAL_I2C_Master_Transmit+0x1a0>)
 80039d6:	f7ff fee5 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80039da:	2800      	cmp	r0, #0
 80039dc:	d1f1      	bne.n	80039c2 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80039de:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d0ed      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0x1e>
 80039e6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039e8:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80039ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039ee:	680b      	ldr	r3, [r1, #0]
 80039f0:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80039f2:	bf5e      	ittt	pl
 80039f4:	680b      	ldrpl	r3, [r1, #0]
 80039f6:	f043 0301 	orrpl.w	r3, r3, #1
 80039fa:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fc:	680b      	ldr	r3, [r1, #0]
 80039fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a02:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a04:	2321      	movs	r3, #33	; 0x21
 8003a06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a0a:	2310      	movs	r3, #16
 8003a0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003a14:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8003a1a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8003a1e:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a20:	4b49      	ldr	r3, [pc, #292]	; (8003b48 <HAL_I2C_Master_Transmit+0x1a4>)
 8003a22:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d004      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x90>
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d002      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x90>
 8003a2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a32:	d104      	bne.n	8003a3e <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a34:	680b      	ldr	r3, [r1, #0]
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e002      	b.n	8003a44 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d0f7      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a44:	2200      	movs	r2, #0
 8003a46:	463b      	mov	r3, r7
 8003a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	9600      	str	r6, [sp, #0]
 8003a50:	f7ff fea8 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	b138      	cbz	r0, 8003a68 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a58:	6813      	ldr	r3, [r2, #0]
 8003a5a:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a5c:	bf44      	itt	mi
 8003a5e:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8003a62:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003a64:	2501      	movs	r5, #1
 8003a66:	e7ad      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a68:	6923      	ldr	r3, [r4, #16]
 8003a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a6e:	d121      	bne.n	8003ab4 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a70:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8003a74:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a76:	4633      	mov	r3, r6
 8003a78:	463a      	mov	r2, r7
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4933      	ldr	r1, [pc, #204]	; (8003b4c <HAL_I2C_Master_Transmit+0x1a8>)
 8003a7e:	f7ff fe30 	bl	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a82:	4605      	mov	r5, r0
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d1ed      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	9003      	str	r0, [sp, #12]
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	9203      	str	r2, [sp, #12]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	9303      	str	r3, [sp, #12]
 8003a94:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8003a96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003a98:	b9f3      	cbnz	r3, 8003ad8 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	6821      	ldr	r1, [r4, #0]
 8003a9c:	680a      	ldr	r2, [r1, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003aa6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003aaa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8003ab2:	e787      	b.n	80039c4 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ab4:	11eb      	asrs	r3, r5, #7
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003abe:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	4633      	mov	r3, r6
 8003ac4:	463a      	mov	r2, r7
 8003ac6:	4922      	ldr	r1, [pc, #136]	; (8003b50 <HAL_I2C_Master_Transmit+0x1ac>)
 8003ac8:	f7ff fe0b 	bl	80036e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d1c9      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	b2ed      	uxtb	r5, r5
 8003ad4:	611d      	str	r5, [r3, #16]
 8003ad6:	e7ce      	b.n	8003a76 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad8:	4632      	mov	r2, r6
 8003ada:	4639      	mov	r1, r7
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7ff fe93 	bl	8003808 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ae2:	b140      	cbz	r0, 8003af6 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d1bc      	bne.n	8003a64 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	6822      	ldr	r2, [r4, #0]
 8003aec:	6813      	ldr	r3, [r2, #0]
 8003aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af2:	6013      	str	r3, [r2, #0]
 8003af4:	e7b6      	b.n	8003a64 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003b00:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8003b02:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003b04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003b06:	3a01      	subs	r2, #1
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0e:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8003b12:	1e51      	subs	r1, r2, #1
 8003b14:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b16:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8003b1a:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b1c:	d00a      	beq.n	8003b34 <HAL_I2C_Master_Transmit+0x190>
 8003b1e:	b149      	cbz	r1, 8003b34 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 8003b22:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b24:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8003b26:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003b28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003b2a:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8003b32:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b34:	4632      	mov	r2, r6
 8003b36:	4639      	mov	r1, r7
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7ff fe0d 	bl	8003758 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d0a9      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0xf2>
 8003b42:	e7cf      	b.n	8003ae4 <HAL_I2C_Master_Transmit+0x140>
 8003b44:	00100002 	.word	0x00100002
 8003b48:	ffff0000 	.word	0xffff0000
 8003b4c:	00010002 	.word	0x00010002
 8003b50:	00010008 	.word	0x00010008

08003b54 <HAL_I2C_MasterTxCpltCallback>:
 8003b54:	4770      	bx	lr

08003b56 <HAL_I2C_MasterRxCpltCallback>:
 8003b56:	4770      	bx	lr

08003b58 <HAL_I2C_SlaveTxCpltCallback>:
 8003b58:	4770      	bx	lr

08003b5a <HAL_I2C_SlaveRxCpltCallback>:
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2C_AddrCallback>:
}
 8003b5c:	4770      	bx	lr

08003b5e <HAL_I2C_ListenCpltCallback>:
 8003b5e:	4770      	bx	lr

08003b60 <HAL_I2C_MemTxCpltCallback>:
 8003b60:	4770      	bx	lr

08003b62 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b62:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003b66:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8003b68:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b6a:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8003b6c:	b983      	cbnz	r3, 8003b90 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003b70:	6802      	ldr	r2, [r0, #0]
 8003b72:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b74:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003b76:	d105      	bne.n	8003b84 <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003b7c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b7e:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8003b80:	6503      	str	r3, [r0, #80]	; 0x50
}
 8003b82:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003b84:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003b88:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003b8a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e7f7      	b.n	8003b80 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8003b90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d103      	bne.n	8003b9e <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003b96:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003b98:	6802      	ldr	r2, [r0, #0]
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	e7f4      	b.n	8003b88 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8003b9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d1ee      	bne.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ba4:	2a22      	cmp	r2, #34	; 0x22
 8003ba6:	d105      	bne.n	8003bb4 <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ba8:	6802      	ldr	r2, [r0, #0]
 8003baa:	6813      	ldr	r3, [r2, #0]
 8003bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e7e6      	b.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bb4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	b163      	cbz	r3, 8003bd4 <I2C_MemoryTransmit_TXE_BTF+0x72>
 8003bba:	2a21      	cmp	r2, #33	; 0x21
 8003bbc:	d10a      	bne.n	8003bd4 <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003bc0:	6802      	ldr	r2, [r0, #0]
 8003bc2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003bc6:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8003bc8:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003bca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	8543      	strh	r3, [r0, #42]	; 0x2a
 8003bd2:	e7d6      	b.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bd4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1d2      	bne.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>
 8003bdc:	2a21      	cmp	r2, #33	; 0x21
 8003bde:	d1d0      	bne.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003be0:	6802      	ldr	r2, [r0, #0]
 8003be2:	6851      	ldr	r1, [r2, #4]
 8003be4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003be8:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	6811      	ldr	r1, [r2, #0]
 8003bec:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003bf0:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8003bf2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003bfe:	f7ff ffaf 	bl	8003b60 <HAL_I2C_MemTxCpltCallback>
}
 8003c02:	e7be      	b.n	8003b82 <I2C_MemoryTransmit_TXE_BTF+0x20>

08003c04 <HAL_I2C_MemRxCpltCallback>:
 8003c04:	4770      	bx	lr

08003c06 <HAL_I2C_ErrorCallback>:
 8003c06:	4770      	bx	lr

08003c08 <HAL_I2C_AbortCpltCallback>:
 8003c08:	4770      	bx	lr
	...

08003c0c <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
{
 8003c0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003c10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003c12:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c14:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c18:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c1a:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c1c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c26:	2323      	movs	r3, #35	; 0x23
 8003c28:	4353      	muls	r3, r2
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 8003c2e:	9a01      	ldr	r2, [sp, #4]
 8003c30:	bb42      	cbnz	r2, 8003c84 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c32:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003c34:	f042 0220 	orr.w	r2, r2, #32
 8003c38:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003c3a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003c3c:	b10d      	cbz	r5, 8003c42 <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003c3e:	2200      	movs	r2, #0
 8003c40:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 8003c42:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003c44:	b10c      	cbz	r4, 8003c4a <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003c46:	2200      	movs	r2, #0
 8003c48:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c50:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8003c52:	2200      	movs	r2, #0
 8003c54:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 8003c56:	b105      	cbz	r5, 8003c5a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c58:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003c5a:	b104      	cbz	r4, 8003c5e <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c5c:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003c66:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003c6a:	2a60      	cmp	r2, #96	; 0x60
 8003c6c:	d111      	bne.n	8003c92 <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003c7a:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c7c:	f7ff ffc4 	bl	8003c08 <HAL_I2C_AbortCpltCallback>
}
 8003c80:	b003      	add	sp, #12
 8003c82:	bd30      	pop	{r4, r5, pc}
    count--;
 8003c84:	9a01      	ldr	r2, [sp, #4]
 8003c86:	3a01      	subs	r2, #1
 8003c88:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	0592      	lsls	r2, r2, #22
 8003c8e:	d4ce      	bmi.n	8003c2e <I2C_DMAAbort+0x22>
 8003c90:	e7d3      	b.n	8003c3a <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c92:	f001 0228 	and.w	r2, r1, #40	; 0x28
 8003c96:	2a28      	cmp	r2, #40	; 0x28
 8003c98:	d10e      	bne.n	8003cb8 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	f041 0101 	orr.w	r1, r1, #1
 8003ca0:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca2:	6819      	ldr	r1, [r3, #0]
 8003ca4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003ca8:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003caa:	2300      	movs	r3, #0
 8003cac:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 8003cb2:	f7ff ffa8 	bl	8003c06 <HAL_I2C_ErrorCallback>
}
 8003cb6:	e7e3      	b.n	8003c80 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8003cc4:	e7f5      	b.n	8003cb2 <I2C_DMAAbort+0xa6>
 8003cc6:	bf00      	nop
 8003cc8:	20000000 	.word	0x20000000

08003ccc <I2C_ITError>:
{
 8003ccc:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cce:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cd2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 8003cd6:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cd8:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003cda:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cdc:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003cde:	6803      	ldr	r3, [r0, #0]
 8003ce0:	d001      	beq.n	8003ce6 <I2C_ITError+0x1a>
 8003ce2:	2940      	cmp	r1, #64	; 0x40
 8003ce4:	d113      	bne.n	8003d0e <I2C_ITError+0x42>
 8003ce6:	2a22      	cmp	r2, #34	; 0x22
 8003ce8:	d111      	bne.n	8003d0e <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003cea:	6819      	ldr	r1, [r3, #0]
 8003cec:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003cf0:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 8003cf8:	d106      	bne.n	8003d08 <I2C_ITError+0x3c>
 8003cfa:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	bf1e      	ittt	ne
 8003cfe:	2220      	movne	r2, #32
 8003d00:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d04:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6322      	str	r2, [r4, #48]	; 0x30
 8003d0c:	e007      	b.n	8003d1e <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d0e:	f002 0128 	and.w	r1, r2, #40	; 0x28
 8003d12:	2928      	cmp	r1, #40	; 0x28
 8003d14:	d1ed      	bne.n	8003cf2 <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d16:	2200      	movs	r2, #0
 8003d18:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003d1a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003d24:	d04f      	beq.n	8003dc6 <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d26:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d28:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003d30:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	4b37      	ldr	r3, [pc, #220]	; (8003e14 <I2C_ITError+0x148>)
 8003d38:	d02b      	beq.n	8003d92 <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003d3a:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003d3c:	f7ff fae8 	bl	8003310 <HAL_DMA_Abort_IT>
 8003d40:	b150      	cbz	r0, 8003d58 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8003d42:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003d44:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003d46:	6813      	ldr	r3, [r2, #0]
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003d4e:	2320      	movs	r3, #32
 8003d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003d54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d56:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8003d58:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003d5a:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d5c:	bf1f      	itttt	ne
 8003d5e:	6822      	ldrne	r2, [r4, #0]
 8003d60:	6853      	ldrne	r3, [r2, #4]
 8003d62:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8003d66:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003d68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8003d6e:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003d70:	0752      	lsls	r2, r2, #29
 8003d72:	d50d      	bpl.n	8003d90 <I2C_ITError+0xc4>
 8003d74:	2b28      	cmp	r3, #40	; 0x28
 8003d76:	d10b      	bne.n	8003d90 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d7a:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d7c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d7e:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d80:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d82:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003d84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d8c:	f7ff fee7 	bl	8003b5e <HAL_I2C_ListenCpltCallback>
}
 8003d90:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003d94:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003d96:	f7ff fabb 	bl	8003310 <HAL_DMA_Abort_IT>
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d0dc      	beq.n	8003d58 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	0651      	lsls	r1, r2, #25
 8003da4:	d505      	bpl.n	8003db2 <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003daa:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dae:	3301      	adds	r3, #1
 8003db0:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003db2:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003db4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003db6:	6813      	ldr	r3, [r2, #0]
 8003db8:	f023 0301 	bic.w	r3, r3, #1
 8003dbc:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003dc4:	e7c6      	b.n	8003d54 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003dc6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003dca:	2960      	cmp	r1, #96	; 0x60
 8003dcc:	d115      	bne.n	8003dfa <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	2120      	movs	r1, #32
 8003dd0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dd4:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dd6:	695a      	ldr	r2, [r3, #20]
 8003dd8:	0652      	lsls	r2, r2, #25
 8003dda:	d505      	bpl.n	8003de8 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003de0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003de4:	3301      	adds	r3, #1
 8003de6:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003de8:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003dea:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003df4:	f7ff ff08 	bl	8003c08 <HAL_I2C_AbortCpltCallback>
 8003df8:	e7ae      	b.n	8003d58 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	0650      	lsls	r0, r2, #25
 8003dfe:	d505      	bpl.n	8003e0c <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e04:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e08:	3301      	adds	r3, #1
 8003e0a:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff fefa 	bl	8003c06 <HAL_I2C_ErrorCallback>
 8003e12:	e7a1      	b.n	8003d58 <I2C_ITError+0x8c>
 8003e14:	08003c0d 	.word	0x08003c0d
 8003e18:	ffff0000 	.word	0xffff0000

08003e1c <HAL_I2C_EV_IRQHandler>:
{
 8003e1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e1e:	6803      	ldr	r3, [r0, #0]
{
 8003e20:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e22:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e24:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e26:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e2e:	2910      	cmp	r1, #16
{
 8003e30:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e32:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e34:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e36:	d002      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x22>
 8003e38:	2d40      	cmp	r5, #64	; 0x40
 8003e3a:	f040 82e0 	bne.w	80043fe <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e3e:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e40:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e42:	f011 0f01 	tst.w	r1, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_I2C_EV_IRQHandler+0x3c>
 8003e48:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003e4c:	d002      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 8003e4e:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003e52:	d150      	bne.n	8003ef6 <HAL_I2C_EV_IRQHandler+0xda>
}
 8003e54:	b00e      	add	sp, #56	; 0x38
 8003e56:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e58:	0596      	lsls	r6, r2, #22
 8003e5a:	d54c      	bpl.n	8003ef6 <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003e5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e5e:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003e62:	d10c      	bne.n	8003e7e <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003e64:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e66:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e68:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003e6c:	2a40      	cmp	r2, #64	; 0x40
 8003e6e:	d111      	bne.n	8003e94 <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003e70:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003e72:	b952      	cbnz	r2, 8003e8a <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003e74:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	e7ea      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003e7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e80:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8003e84:	d1f0      	bne.n	8003e68 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003e86:	2208      	movs	r2, #8
 8003e88:	e7ed      	b.n	8003e66 <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e8a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003e8c:	f042 0201 	orr.w	r2, r2, #1
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	e7f2      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003e9a:	d119      	bne.n	8003ed0 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e9c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003ea0:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ea2:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ea4:	bf16      	itet	ne
 8003ea6:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003eaa:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003eae:	b2d2      	uxtbne	r2, r2
 8003eb0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003eb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003eb4:	b10a      	cbz	r2, 8003eba <HAL_I2C_EV_IRQHandler+0x9e>
 8003eb6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003eb8:	b92a      	cbnz	r2, 8003ec6 <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003eba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d0c9      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003ec0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ec2:	2a00      	cmp	r2, #0
 8003ec4:	d0c6      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	e7c1      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 8003ed0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ed2:	b932      	cbnz	r2, 8003ee2 <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003ed4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003ed6:	11d2      	asrs	r2, r2, #7
 8003ed8:	f002 0206 	and.w	r2, r2, #6
 8003edc:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003ee0:	e7cb      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003ee2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003ee4:	2a01      	cmp	r2, #1
 8003ee6:	d1b5      	bne.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003ee8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003eea:	11d2      	asrs	r2, r2, #7
 8003eec:	f002 0206 	and.w	r2, r2, #6
 8003ef0:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003ef4:	e7c1      	b.n	8003e7a <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ef6:	070e      	lsls	r6, r1, #28
 8003ef8:	d50e      	bpl.n	8003f18 <HAL_I2C_EV_IRQHandler+0xfc>
 8003efa:	0596      	lsls	r6, r2, #22
 8003efc:	d50c      	bpl.n	8003f18 <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003efe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003f04:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003f06:	b912      	cbnz	r2, 8003f0e <HAL_I2C_EV_IRQHandler+0xf2>
 8003f08:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f0a:	2900      	cmp	r1, #0
 8003f0c:	d0a2      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003f0e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003f10:	2a00      	cmp	r2, #0
 8003f12:	d1d8      	bne.n	8003ec6 <HAL_I2C_EV_IRQHandler+0xaa>
 8003f14:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f16:	e7d3      	b.n	8003ec0 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f18:	078e      	lsls	r6, r1, #30
 8003f1a:	f140 80e6 	bpl.w	80040ea <HAL_I2C_EV_IRQHandler+0x2ce>
 8003f1e:	0596      	lsls	r6, r2, #22
 8003f20:	f140 80e3 	bpl.w	80040ea <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f24:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f2a:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f2c:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003f30:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f32:	2822      	cmp	r0, #34	; 0x22
 8003f34:	f040 80d1 	bne.w	80040da <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003f3a:	b940      	cbnz	r0, 8003f4e <HAL_I2C_EV_IRQHandler+0x132>
 8003f3c:	2940      	cmp	r1, #64	; 0x40
 8003f3e:	d106      	bne.n	8003f4e <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	9001      	str	r0, [sp, #4]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	9201      	str	r2, [sp, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	9b01      	ldr	r3, [sp, #4]
 8003f4c:	e782      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f4e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003f50:	b989      	cbnz	r1, 8003f76 <HAL_I2C_EV_IRQHandler+0x15a>
 8003f52:	6920      	ldr	r0, [r4, #16]
 8003f54:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8003f58:	d10d      	bne.n	8003f76 <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5a:	9102      	str	r1, [sp, #8]
 8003f5c:	695a      	ldr	r2, [r3, #20]
 8003f5e:	9202      	str	r2, [sp, #8]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	9202      	str	r2, [sp, #8]
 8003f64:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003f70:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8003f72:	6523      	str	r3, [r4, #80]	; 0x50
 8003f74:	e76e      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8003f76:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003f78:	b289      	uxth	r1, r1
 8003f7a:	b951      	cbnz	r1, 8003f92 <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	9103      	str	r1, [sp, #12]
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	9203      	str	r2, [sp, #12]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	9203      	str	r2, [sp, #12]
 8003f86:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e019      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8003f92:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003f94:	b289      	uxth	r1, r1
 8003f96:	2901      	cmp	r1, #1
 8003f98:	d149      	bne.n	800402e <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f9a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa6:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003fae:	d00c      	beq.n	8003fca <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	9204      	str	r2, [sp, #16]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	9204      	str	r2, [sp, #16]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	9304      	str	r3, [sp, #16]
 8003fc4:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e7d3      	b.n	8003f72 <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	9205      	str	r2, [sp, #20]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	9205      	str	r2, [sp, #20]
 8003fd0:	699a      	ldr	r2, [r3, #24]
 8003fd2:	9205      	str	r2, [sp, #20]
 8003fd4:	9a05      	ldr	r2, [sp, #20]
 8003fd6:	e7d7      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003fd8:	2a08      	cmp	r2, #8
 8003fda:	d01c      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0x1fa>
 8003fdc:	2a20      	cmp	r2, #32
 8003fde:	d01a      	beq.n	8004016 <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fe0:	2d12      	cmp	r5, #18
 8003fe2:	d10d      	bne.n	8004000 <HAL_I2C_EV_IRQHandler+0x1e4>
 8003fe4:	2a01      	cmp	r2, #1
 8003fe6:	d116      	bne.n	8004016 <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fee:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	9206      	str	r2, [sp, #24]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	9206      	str	r2, [sp, #24]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	9306      	str	r3, [sp, #24]
 8003ffc:	9b06      	ldr	r3, [sp, #24]
 8003ffe:	e7e2      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004000:	2a10      	cmp	r2, #16
 8004002:	d8f1      	bhi.n	8003fe8 <HAL_I2C_EV_IRQHandler+0x1cc>
 8004004:	499c      	ldr	r1, [pc, #624]	; (8004278 <HAL_I2C_EV_IRQHandler+0x45c>)
 8004006:	fa21 f202 	lsr.w	r2, r1, r2
 800400a:	07d0      	lsls	r0, r2, #31
 800400c:	d5ec      	bpl.n	8003fe8 <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004014:	e7eb      	b.n	8003fee <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401e:	2200      	movs	r2, #0
 8004020:	9207      	str	r2, [sp, #28]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	9207      	str	r2, [sp, #28]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	9207      	str	r2, [sp, #28]
 800402a:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	e7ac      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 800402e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8004030:	b289      	uxth	r1, r1
 8004032:	2902      	cmp	r1, #2
 8004034:	d133      	bne.n	800409e <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004036:	2a10      	cmp	r2, #16
 8004038:	d805      	bhi.n	8004046 <HAL_I2C_EV_IRQHandler+0x22a>
 800403a:	498f      	ldr	r1, [pc, #572]	; (8004278 <HAL_I2C_EV_IRQHandler+0x45c>)
 800403c:	40d1      	lsrs	r1, r2
 800403e:	43c9      	mvns	r1, r1
 8004040:	f011 0101 	ands.w	r1, r1, #1
 8004044:	d020      	beq.n	8004088 <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800404c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2100      	movs	r1, #0
 8004050:	9108      	str	r1, [sp, #32]
 8004052:	6959      	ldr	r1, [r3, #20]
 8004054:	9108      	str	r1, [sp, #32]
 8004056:	6999      	ldr	r1, [r3, #24]
 8004058:	9108      	str	r1, [sp, #32]
 800405a:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004062:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	0509      	lsls	r1, r1, #20
 8004068:	d5ad      	bpl.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
 800406a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800406e:	d006      	beq.n	800407e <HAL_I2C_EV_IRQHandler+0x262>
 8004070:	1e51      	subs	r1, r2, #1
 8004072:	291f      	cmp	r1, #31
 8004074:	d8a7      	bhi.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
 8004076:	4a81      	ldr	r2, [pc, #516]	; (800427c <HAL_I2C_EV_IRQHandler+0x460>)
 8004078:	40ca      	lsrs	r2, r1
 800407a:	07d2      	lsls	r2, r2, #31
 800407c:	d5a3      	bpl.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e79e      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800408e:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	9109      	str	r1, [sp, #36]	; 0x24
 8004092:	6959      	ldr	r1, [r3, #20]
 8004094:	9109      	str	r1, [sp, #36]	; 0x24
 8004096:	6999      	ldr	r1, [r3, #24]
 8004098:	9109      	str	r1, [sp, #36]	; 0x24
 800409a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800409c:	e7e2      	b.n	8004064 <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80040a4:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040a6:	6859      	ldr	r1, [r3, #4]
 80040a8:	050e      	lsls	r6, r1, #20
 80040aa:	d50e      	bpl.n	80040ca <HAL_I2C_EV_IRQHandler+0x2ae>
 80040ac:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80040b0:	d007      	beq.n	80040c2 <HAL_I2C_EV_IRQHandler+0x2a6>
 80040b2:	3a01      	subs	r2, #1
 80040b4:	2a1f      	cmp	r2, #31
 80040b6:	d808      	bhi.n	80040ca <HAL_I2C_EV_IRQHandler+0x2ae>
 80040b8:	4970      	ldr	r1, [pc, #448]	; (800427c <HAL_I2C_EV_IRQHandler+0x460>)
 80040ba:	fa21 f202 	lsr.w	r2, r1, r2
 80040be:	07d5      	lsls	r5, r2, #31
 80040c0:	d503      	bpl.n	80040ca <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c8:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ca:	2200      	movs	r2, #0
 80040cc:	920a      	str	r2, [sp, #40]	; 0x28
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	920a      	str	r2, [sp, #40]	; 0x28
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	930a      	str	r3, [sp, #40]	; 0x28
 80040d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040d8:	e775      	b.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2200      	movs	r2, #0
 80040dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80040e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040e8:	e6b4      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040ea:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040ee:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040f0:	f000 8098 	beq.w	8004224 <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040f4:	0500      	lsls	r0, r0, #20
 80040f6:	f53f aead 	bmi.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040fa:	060e      	lsls	r6, r1, #24
 80040fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004100:	d555      	bpl.n	80041ae <HAL_I2C_EV_IRQHandler+0x392>
 8004102:	0551      	lsls	r1, r2, #21
 8004104:	d553      	bpl.n	80041ae <HAL_I2C_EV_IRQHandler+0x392>
 8004106:	2800      	cmp	r0, #0
 8004108:	d154      	bne.n	80041b4 <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800410a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800410e:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004110:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004114:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004116:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004118:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800411a:	bb7d      	cbnz	r5, 800417c <HAL_I2C_EV_IRQHandler+0x360>
 800411c:	2a21      	cmp	r2, #33	; 0x21
 800411e:	d12f      	bne.n	8004180 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004120:	2808      	cmp	r0, #8
 8004122:	d014      	beq.n	800414e <HAL_I2C_EV_IRQHandler+0x332>
 8004124:	2820      	cmp	r0, #32
 8004126:	d012      	beq.n	800414e <HAL_I2C_EV_IRQHandler+0x332>
 8004128:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 800412c:	d00f      	beq.n	800414e <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004134:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004136:	2311      	movs	r3, #17
 8004138:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800413a:	2300      	movs	r3, #0
 800413c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004140:	2320      	movs	r3, #32
 8004142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004146:	4620      	mov	r0, r4
 8004148:	f7ff fd04 	bl	8003b54 <HAL_I2C_MasterTxCpltCallback>
 800414c:	e682      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414e:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004150:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004152:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004156:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004160:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8004162:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8004164:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004166:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800416a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800416e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004172:	2a40      	cmp	r2, #64	; 0x40
 8004174:	d1e8      	bne.n	8004148 <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004176:	f7ff fcf3 	bl	8003b60 <HAL_I2C_MemTxCpltCallback>
 800417a:	e66b      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800417c:	2a21      	cmp	r2, #33	; 0x21
 800417e:	d005      	beq.n	800418c <HAL_I2C_EV_IRQHandler+0x370>
 8004180:	2940      	cmp	r1, #64	; 0x40
 8004182:	f47f ae67 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004186:	2a22      	cmp	r2, #34	; 0x22
 8004188:	f47f ae64 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 800418c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800418e:	b292      	uxth	r2, r2
 8004190:	b91a      	cbnz	r2, 800419a <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004198:	e698      	b.n	8003ecc <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800419a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800419e:	2a40      	cmp	r2, #64	; 0x40
 80041a0:	d116      	bne.n	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041a2:	4620      	mov	r0, r4
}
 80041a4:	b00e      	add	sp, #56	; 0x38
 80041a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041aa:	f7ff bcda 	b.w	8003b62 <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ae:	2800      	cmp	r0, #0
 80041b0:	f43f ae50 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 80041b4:	0592      	lsls	r2, r2, #22
 80041b6:	f57f ae4d 	bpl.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80041ba:	2d10      	cmp	r5, #16
 80041bc:	d1f1      	bne.n	80041a2 <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041c0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80041c4:	2a21      	cmp	r2, #33	; 0x21
 80041c6:	f47f ae45 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80041ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041cc:	b292      	uxth	r2, r2
 80041ce:	b14a      	cbz	r2, 80041e4 <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041d0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80041d2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80041d6:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80041d8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80041da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 80041e2:	e637      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e4:	2908      	cmp	r1, #8
 80041e6:	d00d      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x3e8>
 80041e8:	2920      	cmp	r1, #32
 80041ea:	d00b      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x3e8>
 80041ec:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80041f0:	d008      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80041f8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041fa:	2311      	movs	r3, #17
 80041fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8004202:	e79d      	b.n	8004140 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800420a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004212:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8004216:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800421a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800421e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004222:	e790      	b.n	8004146 <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004224:	0506      	lsls	r6, r0, #20
 8004226:	f53f ae15 	bmi.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800422a:	064d      	lsls	r5, r1, #25
 800422c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004230:	d57b      	bpl.n	800432a <HAL_I2C_EV_IRQHandler+0x50e>
 8004232:	0551      	lsls	r1, r2, #21
 8004234:	d579      	bpl.n	800432a <HAL_I2C_EV_IRQHandler+0x50e>
 8004236:	2800      	cmp	r0, #0
 8004238:	d17a      	bne.n	8004330 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800423a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800423e:	2a22      	cmp	r2, #34	; 0x22
 8004240:	f47f ae08 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8004244:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004246:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8004248:	2a03      	cmp	r2, #3
 800424a:	d919      	bls.n	8004280 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004250:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004258:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800425a:	3b01      	subs	r3, #1
 800425c:	b29b      	uxth	r3, r3
 800425e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8004260:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b03      	cmp	r3, #3
 8004266:	f47f adf5 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	6853      	ldr	r3, [r2, #4]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004272:	6053      	str	r3, [r2, #4]
 8004274:	e5ee      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 8004276:	bf00      	nop
 8004278:	00010014 	.word	0x00010014
 800427c:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004280:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004282:	2902      	cmp	r1, #2
 8004284:	f43f ade6 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 8004288:	2a01      	cmp	r2, #1
 800428a:	f63f ade3 	bhi.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800428e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8004292:	4a72      	ldr	r2, [pc, #456]	; (800445c <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8004294:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	fbb2 f2f1 	udiv	r2, r2, r1
 800429c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80042a0:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 80042a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042a4:	3a01      	subs	r2, #1
 80042a6:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 80042a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042aa:	b9d1      	cbnz	r1, 80042e2 <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 80042ae:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	f042 0220 	orr.w	r2, r2, #32
 80042b4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042c6:	3301      	adds	r3, #1
 80042c8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80042ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	2320      	movs	r3, #32
 80042d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80042dc:	f7ff fc93 	bl	8003c06 <HAL_I2C_ErrorCallback>
 80042e0:	e5b8      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 80042e8:	d1db      	bne.n	80042a2 <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80042f0:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80042f8:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	6919      	ldr	r1, [r3, #16]
 80042fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042fe:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8004300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004302:	3301      	adds	r3, #1
 8004304:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004306:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004308:	3b01      	subs	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800430e:	2320      	movs	r3, #32
 8004310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004314:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004318:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800431c:	2b40      	cmp	r3, #64	; 0x40
 800431e:	d168      	bne.n	80043f2 <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004320:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004322:	4620      	mov	r0, r4
 8004324:	f7ff fc6e 	bl	8003c04 <HAL_I2C_MemRxCpltCallback>
 8004328:	e594      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800432a:	2800      	cmp	r0, #0
 800432c:	f43f ad92 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 8004330:	0592      	lsls	r2, r2, #22
 8004332:	f57f ad8f 	bpl.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004336:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8004338:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800433a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800433c:	b280      	uxth	r0, r0
 800433e:	2804      	cmp	r0, #4
 8004340:	d109      	bne.n	8004356 <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004348:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800434e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004350:	3301      	adds	r3, #1
 8004352:	6263      	str	r3, [r4, #36]	; 0x24
 8004354:	e741      	b.n	80041da <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 8004356:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004358:	b280      	uxth	r0, r0
 800435a:	2803      	cmp	r0, #3
 800435c:	d10c      	bne.n	8004378 <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800435e:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004360:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004362:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8004366:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004368:	d0ef      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x52e>
 800436a:	2a02      	cmp	r2, #2
 800436c:	d0ed      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004374:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004376:	e7e8      	b.n	800434a <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8004378:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800437a:	b280      	uxth	r0, r0
 800437c:	2802      	cmp	r0, #2
 800437e:	d1e4      	bne.n	800434a <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004380:	2a01      	cmp	r2, #1
 8004382:	d001      	beq.n	8004388 <HAL_I2C_EV_IRQHandler+0x56c>
 8004384:	2a10      	cmp	r2, #16
 8004386:	d128      	bne.n	80043da <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8004394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004396:	1c53      	adds	r3, r2, #1
 8004398:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800439a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800439c:	3b01      	subs	r3, #1
 800439e:	b29b      	uxth	r3, r3
 80043a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 80043a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043aa:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 80043ac:	3301      	adds	r3, #1
 80043ae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80043b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80043b8:	6853      	ldr	r3, [r2, #4]
 80043ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043be:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	2320      	movs	r3, #32
 80043c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043c6:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043d4:	d10d      	bne.n	80043f2 <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80043d6:	6323      	str	r3, [r4, #48]	; 0x30
 80043d8:	e7a3      	b.n	8004322 <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80043da:	2a04      	cmp	r2, #4
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x5c6>
 80043de:	2a02      	cmp	r2, #2
 80043e0:	d103      	bne.n	80043ea <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043e8:	e7d1      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f0:	e7cd      	b.n	800438e <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043f2:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043f4:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043f6:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043f8:	f7ff fbad 	bl	8003b56 <HAL_I2C_MasterRxCpltCallback>
 80043fc:	e52a      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043fe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004400:	b311      	cbz	r1, 8004448 <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 8004402:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004404:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004406:	078e      	lsls	r6, r1, #30
 8004408:	d52a      	bpl.n	8004460 <HAL_I2C_EV_IRQHandler+0x644>
 800440a:	0596      	lsls	r6, r2, #22
 800440c:	d528      	bpl.n	8004460 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800440e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004410:	b102      	cbz	r2, 8004414 <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004412:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004414:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004418:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800441c:	2a28      	cmp	r2, #40	; 0x28
 800441e:	d116      	bne.n	800444e <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004420:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004422:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800442c:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 800442e:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004432:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004434:	bf54      	ite	pl
 8004436:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004438:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800443a:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 800443e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004442:	f7ff fb8b 	bl	8003b5c <HAL_I2C_AddrCallback>
 8004446:	e505      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004448:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	e7db      	b.n	8004406 <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800444e:	f06f 0202 	mvn.w	r2, #2
 8004452:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004454:	2300      	movs	r3, #0
 8004456:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800445a:	e4fb      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 800445c:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004460:	06ce      	lsls	r6, r1, #27
 8004462:	f140 80b1 	bpl.w	80045c8 <HAL_I2C_EV_IRQHandler+0x7ac>
 8004466:	0595      	lsls	r5, r2, #22
 8004468:	f140 80ae 	bpl.w	80045c8 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800446c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004470:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004472:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004474:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004478:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800447a:	2200      	movs	r2, #0
 800447c:	920d      	str	r2, [sp, #52]	; 0x34
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	920d      	str	r2, [sp, #52]	; 0x34
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004492:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	0512      	lsls	r2, r2, #20
 8004498:	d520      	bpl.n	80044dc <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800449a:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 800449e:	2a22      	cmp	r2, #34	; 0x22
 80044a0:	d14a      	bne.n	8004538 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80044a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80044a4:	6802      	ldr	r2, [r0, #0]
 80044a6:	6852      	ldr	r2, [r2, #4]
 80044a8:	b292      	uxth	r2, r2
 80044aa:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 80044ac:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80044ae:	b292      	uxth	r2, r2
 80044b0:	b11a      	cbz	r2, 80044ba <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80044b4:	f042 0204 	orr.w	r2, r2, #4
 80044b8:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c0:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044c2:	f7fe fffd 	bl	80034c0 <HAL_DMA_GetState>
 80044c6:	2801      	cmp	r0, #1
 80044c8:	d008      	beq.n	80044dc <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80044cc:	4b79      	ldr	r3, [pc, #484]	; (80046b4 <HAL_I2C_EV_IRQHandler+0x898>)
 80044ce:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044d0:	f7fe ff1e 	bl	8003310 <HAL_DMA_Abort_IT>
 80044d4:	b110      	cbz	r0, 80044dc <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044da:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80044dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044de:	b29b      	uxth	r3, r3
 80044e0:	b313      	cbz	r3, 8004528 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	0756      	lsls	r6, r2, #29
 80044e8:	d509      	bpl.n	80044fe <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044ee:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80044f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f2:	3301      	adds	r3, #1
 80044f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80044f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	0650      	lsls	r0, r2, #25
 8004504:	d509      	bpl.n	800451a <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800450c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800450e:	3301      	adds	r3, #1
 8004510:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004512:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004514:	3b01      	subs	r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800451a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	b11b      	cbz	r3, 8004528 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004522:	f043 0304 	orr.w	r3, r3, #4
 8004526:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004528:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800452a:	b313      	cbz	r3, 8004572 <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 800452c:	4620      	mov	r0, r4
}
 800452e:	b00e      	add	sp, #56	; 0x38
 8004530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8004534:	f7ff bbca 	b.w	8003ccc <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004538:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800453a:	6802      	ldr	r2, [r0, #0]
 800453c:	6852      	ldr	r2, [r2, #4]
 800453e:	b292      	uxth	r2, r2
 8004540:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004542:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004544:	b292      	uxth	r2, r2
 8004546:	b11a      	cbz	r2, 8004550 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004548:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800454a:	f042 0204 	orr.w	r2, r2, #4
 800454e:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004556:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004558:	f7fe ffb2 	bl	80034c0 <HAL_DMA_GetState>
 800455c:	2801      	cmp	r0, #1
 800455e:	d0bd      	beq.n	80044dc <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004560:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004562:	4b54      	ldr	r3, [pc, #336]	; (80046b4 <HAL_I2C_EV_IRQHandler+0x898>)
 8004564:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004566:	f7fe fed3 	bl	8003310 <HAL_DMA_Abort_IT>
 800456a:	2800      	cmp	r0, #0
 800456c:	d0b6      	beq.n	80044dc <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800456e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004570:	e7b2      	b.n	80044d8 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004572:	2d2a      	cmp	r5, #42	; 0x2a
 8004574:	d106      	bne.n	8004584 <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004576:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004578:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800457a:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800457c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004580:	f7ff faeb 	bl	8003b5a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004584:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	d10c      	bne.n	80045a6 <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458c:	4b4a      	ldr	r3, [pc, #296]	; (80046b8 <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 800458e:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004590:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004592:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 8004594:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8004596:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004598:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800459c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80045a0:	f7ff fadd 	bl	8003b5e <HAL_I2C_ListenCpltCallback>
 80045a4:	e456      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80045a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045a8:	2b22      	cmp	r3, #34	; 0x22
 80045aa:	d002      	beq.n	80045b2 <HAL_I2C_EV_IRQHandler+0x796>
 80045ac:	2d22      	cmp	r5, #34	; 0x22
 80045ae:	f47f ac51 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045b2:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045c0:	4620      	mov	r0, r4
 80045c2:	f7ff faca 	bl	8003b5a <HAL_I2C_SlaveRxCpltCallback>
 80045c6:	e445      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045c8:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 80045cc:	2821      	cmp	r0, #33	; 0x21
 80045ce:	f3c1 0580 	ubfx	r5, r1, #2, #1
 80045d2:	d135      	bne.n	8004640 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045d4:	0609      	lsls	r1, r1, #24
 80045d6:	d527      	bpl.n	8004628 <HAL_I2C_EV_IRQHandler+0x80c>
 80045d8:	0556      	lsls	r6, r2, #21
 80045da:	d525      	bpl.n	8004628 <HAL_I2C_EV_IRQHandler+0x80c>
 80045dc:	bb3d      	cbnz	r5, 800462e <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045de:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80045e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e4:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80045e6:	b292      	uxth	r2, r2
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	f43f ac33 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80045f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80045f4:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80045f6:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80045f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80045fa:	3a01      	subs	r2, #1
 80045fc:	b292      	uxth	r2, r2
 80045fe:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004600:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004602:	b292      	uxth	r2, r2
 8004604:	2a00      	cmp	r2, #0
 8004606:	f47f ac25 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 800460a:	2929      	cmp	r1, #41	; 0x29
 800460c:	f47f ac22 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004616:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004618:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800461a:	6320      	str	r0, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800461c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800461e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004622:	f7ff fa99 	bl	8003b58 <HAL_I2C_SlaveTxCpltCallback>
 8004626:	e415      	b.n	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004628:	2d00      	cmp	r5, #0
 800462a:	f43f ac13 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 800462e:	0595      	lsls	r5, r2, #22
 8004630:	f57f ac10 	bpl.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004634:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004636:	b292      	uxth	r2, r2
 8004638:	2a00      	cmp	r2, #0
 800463a:	f43f ac0b 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 800463e:	e5c7      	b.n	80041d0 <HAL_I2C_EV_IRQHandler+0x3b4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004640:	0648      	lsls	r0, r1, #25
 8004642:	d527      	bpl.n	8004694 <HAL_I2C_EV_IRQHandler+0x878>
 8004644:	0551      	lsls	r1, r2, #21
 8004646:	d525      	bpl.n	8004694 <HAL_I2C_EV_IRQHandler+0x878>
 8004648:	bb3d      	cbnz	r5, 800469a <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800464a:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 800464e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004650:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 8004652:	b289      	uxth	r1, r1
 8004654:	2900      	cmp	r1, #0
 8004656:	f43f abfd 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	6919      	ldr	r1, [r3, #16]
 800465c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800465e:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8004660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004662:	3301      	adds	r3, #1
 8004664:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004668:	3b01      	subs	r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800466e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	f47f abee 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 8004678:	2a2a      	cmp	r2, #42	; 0x2a
 800467a:	f47f abeb 	bne.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	6853      	ldr	r3, [r2, #4]
 8004682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004686:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004688:	2322      	movs	r3, #34	; 0x22
 800468a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800468c:	2328      	movs	r3, #40	; 0x28
 800468e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8004692:	e795      	b.n	80045c0 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004694:	2d00      	cmp	r5, #0
 8004696:	f43f abdd 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
 800469a:	0592      	lsls	r2, r2, #22
 800469c:	f57f abda 	bpl.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80046a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80046a2:	b292      	uxth	r2, r2
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	f43f abd5 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e64d      	b.n	800434e <HAL_I2C_EV_IRQHandler+0x532>
 80046b2:	bf00      	nop
 80046b4:	08003c0d 	.word	0x08003c0d
 80046b8:	ffff0000 	.word	0xffff0000

080046bc <HAL_I2C_ER_IRQHandler>:
{
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046be:	6803      	ldr	r3, [r0, #0]
{
 80046c0:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046c2:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046c4:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046c6:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046ca:	05f8      	lsls	r0, r7, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046cc:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046ce:	f3c7 2500 	ubfx	r5, r7, #8, #1
 80046d2:	d50b      	bpl.n	80046ec <HAL_I2C_ER_IRQHandler+0x30>
 80046d4:	05f1      	lsls	r1, r6, #23
 80046d6:	f3c6 2500 	ubfx	r5, r6, #8, #1
 80046da:	d507      	bpl.n	80046ec <HAL_I2C_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046dc:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 80046e0:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046e2:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80046ea:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046ec:	05b8      	lsls	r0, r7, #22
 80046ee:	d506      	bpl.n	80046fe <HAL_I2C_ER_IRQHandler+0x42>
 80046f0:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046f2:	bf42      	ittt	mi
 80046f4:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 80046f8:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046fc:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046fe:	0578      	lsls	r0, r7, #21
 8004700:	d536      	bpl.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
 8004702:	05f1      	lsls	r1, r6, #23
 8004704:	d534      	bpl.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
    tmp2 = hi2c->XferCount;
 8004706:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8004708:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800470c:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 800470e:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 8004712:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 8004714:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004716:	d15b      	bne.n	80047d0 <HAL_I2C_ER_IRQHandler+0x114>
 8004718:	2800      	cmp	r0, #0
 800471a:	d159      	bne.n	80047d0 <HAL_I2C_ER_IRQHandler+0x114>
 800471c:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 8004720:	2821      	cmp	r0, #33	; 0x21
 8004722:	d004      	beq.n	800472e <HAL_I2C_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004724:	2928      	cmp	r1, #40	; 0x28
 8004726:	d153      	bne.n	80047d0 <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004728:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 800472c:	d150      	bne.n	80047d0 <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800472e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004732:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004734:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004736:	2908      	cmp	r1, #8
 8004738:	d001      	beq.n	800473e <HAL_I2C_ER_IRQHandler+0x82>
 800473a:	2920      	cmp	r1, #32
 800473c:	d12a      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd8>
 800473e:	2a28      	cmp	r2, #40	; 0x28
 8004740:	d128      	bne.n	8004794 <HAL_I2C_ER_IRQHandler+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004742:	4a2c      	ldr	r2, [pc, #176]	; (80047f4 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 8004744:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004746:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800474e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004754:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800475c:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800475e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004760:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004762:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004764:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004768:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800476c:	f7ff f9f7 	bl	8003b5e <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004770:	053a      	lsls	r2, r7, #20
 8004772:	d53b      	bpl.n	80047ec <HAL_I2C_ER_IRQHandler+0x130>
 8004774:	05f3      	lsls	r3, r6, #23
 8004776:	d539      	bpl.n	80047ec <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004778:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800477c:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 800477e:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004782:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 8004784:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 8004786:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8004788:	431d      	orrs	r5, r3
 800478a:	6425      	str	r5, [r4, #64]	; 0x40
}
 800478c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004790:	f7ff ba9c 	b.w	8003ccc <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004794:	2a21      	cmp	r2, #33	; 0x21
 8004796:	d117      	bne.n	80047c8 <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004798:	4916      	ldr	r1, [pc, #88]	; (80047f4 <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800479a:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800479c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800479e:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80047a0:	2220      	movs	r2, #32
 80047a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047a6:	2200      	movs	r2, #0
 80047a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047b2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047c2:	f7ff f9c9 	bl	8003b58 <HAL_I2C_SlaveTxCpltCallback>
 80047c6:	e7d3      	b.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047cc:	615a      	str	r2, [r3, #20]
 80047ce:	e7cf      	b.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047d4:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d6:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80047d8:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047dc:	d001      	beq.n	80047e2 <HAL_I2C_ER_IRQHandler+0x126>
 80047de:	2a40      	cmp	r2, #64	; 0x40
 80047e0:	d1c6      	bne.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	e7c1      	b.n	8004770 <HAL_I2C_ER_IRQHandler+0xb4>
  if (error != HAL_I2C_ERROR_NONE)
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	d1c9      	bne.n	8004784 <HAL_I2C_ER_IRQHandler+0xc8>
}
 80047f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047f2:	bf00      	nop
 80047f4:	ffff0000 	.word	0xffff0000

080047f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047fa:	4604      	mov	r4, r0
{
 80047fc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80047fe:	b310      	cbz	r0, 8004846 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004800:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 8004804:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004808:	b91b      	cbnz	r3, 8004812 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800480a:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800480e:	f005 f97b 	bl	8009b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004812:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004814:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004816:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8004818:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 800481c:	f855 0b10 	ldr.w	r0, [r5], #16
 8004820:	f002 f8ce 	bl	80069c0 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004826:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	1d27      	adds	r7, r4, #4
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	4626      	mov	r6, r4
 8004830:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004834:	f856 0b10 	ldr.w	r0, [r6], #16
 8004838:	f002 f8b2 	bl	80069a0 <USB_CoreInit>
 800483c:	4605      	mov	r5, r0
 800483e:	b120      	cbz	r0, 800484a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004840:	2302      	movs	r3, #2
 8004842:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004846:	2501      	movs	r5, #1
 8004848:	e04c      	b.n	80048e4 <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800484a:	4601      	mov	r1, r0
 800484c:	6820      	ldr	r0, [r4, #0]
 800484e:	f002 f8c1 	bl	80069d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004852:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004854:	f04f 0e01 	mov.w	lr, #1
 8004858:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800485a:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800485c:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004860:	b2ca      	uxtb	r2, r1
 8004862:	4594      	cmp	ip, r2
 8004864:	f101 0101 	add.w	r1, r1, #1
 8004868:	d81b      	bhi.n	80048a2 <HAL_PCD_Init+0xaa>
 800486a:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800486c:	2528      	movs	r5, #40	; 0x28
 800486e:	4619      	mov	r1, r3
 8004870:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004872:	4584      	cmp	ip, r0
 8004874:	f103 0301 	add.w	r3, r3, #1
 8004878:	d820      	bhi.n	80048bc <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487a:	46ec      	mov	ip, sp
 800487c:	4635      	mov	r5, r6
 800487e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004880:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004884:	682b      	ldr	r3, [r5, #0]
 8004886:	f8cc 3000 	str.w	r3, [ip]
 800488a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800488e:	6820      	ldr	r0, [r4, #0]
 8004890:	f002 f8a2 	bl	80069d8 <USB_DevInit>
 8004894:	2301      	movs	r3, #1
 8004896:	4605      	mov	r5, r0
 8004898:	b1e8      	cbz	r0, 80048d6 <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800489a:	2202      	movs	r2, #2
 800489c:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 80048a0:	e7d1      	b.n	8004846 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 80048a2:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048a6:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 80048aa:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80048ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048b2:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048b4:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 80048b8:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ba:	e7d1      	b.n	8004860 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 80048bc:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048c0:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 80048c4:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 80048c8:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048cc:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048d0:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d4:	e7cc      	b.n	8004870 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 80048d6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80048da:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80048dc:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80048e0:	f002 fb38 	bl	8006f54 <USB_DevDisconnect>

  return HAL_OK;
}
 80048e4:	4628      	mov	r0, r5
 80048e6:	b007      	add	sp, #28
 80048e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80048ea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80048ec:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80048f0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d010      	beq.n	8004918 <HAL_PCD_Start+0x2e>
 80048f6:	2501      	movs	r5, #1
 80048f8:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80048fc:	6800      	ldr	r0, [r0, #0]
 80048fe:	f002 f856 	bl	80069ae <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004902:	4629      	mov	r1, r5
 8004904:	4620      	mov	r0, r4
 8004906:	f005 fa30 	bl	8009d6a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	f002 fb20 	bl	8006f50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004910:	2000      	movs	r0, #0
 8004912:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8004916:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004918:	2002      	movs	r0, #2
 800491a:	e7fc      	b.n	8004916 <HAL_PCD_Start+0x2c>

0800491c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800491c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800491e:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 8004922:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004924:	2a01      	cmp	r2, #1
 8004926:	d00b      	beq.n	8004940 <HAL_PCD_SetAddress+0x24>
 8004928:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800492a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 800492e:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004932:	6800      	ldr	r0, [r0, #0]
 8004934:	f002 fb06 	bl	8006f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004938:	2000      	movs	r0, #0
 800493a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 800493e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004940:	2002      	movs	r0, #2
 8004942:	e7fc      	b.n	800493e <HAL_PCD_SetAddress+0x22>

08004944 <HAL_PCD_IRQHandler>:
{
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	4604      	mov	r4, r0
 800494a:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800494c:	6800      	ldr	r0, [r0, #0]
 800494e:	f002 fb03 	bl	8006f58 <USB_ReadInterrupts>
 8004952:	0402      	lsls	r2, r0, #16
 8004954:	d509      	bpl.n	800496a <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004956:	f8df 9860 	ldr.w	r9, [pc, #2144]	; 80051b8 <HAL_PCD_IRQHandler+0x874>
 800495a:	f8df 8860 	ldr.w	r8, [pc, #2144]	; 80051bc <HAL_PCD_IRQHandler+0x878>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8004964:	041d      	lsls	r5, r3, #16
 8004966:	f100 80c1 	bmi.w	8004aec <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800496a:	6820      	ldr	r0, [r4, #0]
 800496c:	f002 faf4 	bl	8006f58 <USB_ReadInterrupts>
 8004970:	0543      	lsls	r3, r0, #21
 8004972:	d50f      	bpl.n	8004994 <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004974:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8004976:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004978:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800497c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004980:	041b      	lsls	r3, r3, #16
 8004982:	0c1b      	lsrs	r3, r3, #16
 8004984:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004988:	f005 f8f9 	bl	8009b7e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800498c:	2100      	movs	r1, #0
 800498e:	4620      	mov	r0, r4
 8004990:	f7ff ffc4 	bl	800491c <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	f002 fadf 	bl	8006f58 <USB_ReadInterrupts>
 800499a:	0441      	lsls	r1, r0, #17
 800499c:	d508      	bpl.n	80049b0 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80049a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80049b0:	6820      	ldr	r0, [r4, #0]
 80049b2:	f002 fad1 	bl	8006f58 <USB_ReadInterrupts>
 80049b6:	0482      	lsls	r2, r0, #18
 80049b8:	d508      	bpl.n	80049cc <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80049c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	f002 fac3 	bl	8006f58 <USB_ReadInterrupts>
 80049d2:	04c3      	lsls	r3, r0, #19
 80049d4:	d51c      	bpl.n	8004a10 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80049d6:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80049d8:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80049da:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80049ea:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80049ee:	f023 0308 	bic.w	r3, r3, #8
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80049fa:	f005 f8e3 	bl	8009bc4 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004a10:	6820      	ldr	r0, [r4, #0]
 8004a12:	f002 faa1 	bl	8006f58 <USB_ReadInterrupts>
 8004a16:	0507      	lsls	r7, r0, #20
 8004a18:	d546      	bpl.n	8004aa8 <HAL_PCD_IRQHandler+0x164>
 8004a1a:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	4606      	mov	r6, r0
 8004a20:	4619      	mov	r1, r3
 8004a22:	461a      	mov	r2, r3
 8004a24:	f103 0520 	add.w	r5, r3, #32
 8004a28:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 8004a2c:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004a2e:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8004a32:	d1f9      	bne.n	8004a28 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004a34:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004a42:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004a46:	f022 0201 	bic.w	r2, r2, #1
 8004a4a:	0412      	lsls	r2, r2, #16
 8004a4c:	0c12      	lsrs	r2, r2, #16
 8004a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004a52:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004a56:	0556      	lsls	r6, r2, #21
 8004a58:	d5fb      	bpl.n	8004a52 <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a5a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a62:	0412      	lsls	r2, r2, #16
 8004a64:	0c12      	lsrs	r2, r2, #16
 8004a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004a6a:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004a6e:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8004a72:	428d      	cmp	r5, r1
 8004a74:	d1f9      	bne.n	8004a6a <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a76:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004a7a:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a7c:	b292      	uxth	r2, r2
 8004a7e:	f042 0208 	orr.w	r2, r2, #8
 8004a82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004a86:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8e:	0412      	lsls	r2, r2, #16
 8004a90:	0c12      	lsrs	r2, r2, #16
 8004a92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004a96:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004aa4:	f005 f87e 	bl	8009ba4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004aa8:	6820      	ldr	r0, [r4, #0]
 8004aaa:	f002 fa55 	bl	8006f58 <USB_ReadInterrupts>
 8004aae:	0582      	lsls	r2, r0, #22
 8004ab0:	d50b      	bpl.n	8004aca <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ab2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8004ab4:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ab6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004aba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8004ac6:	f005 f856 	bl	8009b76 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	f002 fa44 	bl	8006f58 <USB_ReadInterrupts>
 8004ad0:	05c3      	lsls	r3, r0, #23
 8004ad2:	d508      	bpl.n	8004ae6 <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	0c1b      	lsrs	r3, r3, #16
 8004ae2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8004ae6:	b005      	add	sp, #20
 8004ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004aec:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 8004af0:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 8004af2:	f016 060f 	ands.w	r6, r6, #15
 8004af6:	f040 80b9 	bne.w	8004c6c <HAL_PCD_IRQHandler+0x328>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004afa:	f011 0110 	ands.w	r1, r1, #16
 8004afe:	d12d      	bne.n	8004b5c <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b00:	8803      	ldrh	r3, [r0, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	ea03 0309 	and.w	r3, r3, r9
 8004b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0c:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b0e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004b12:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8004b20:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8004b24:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2a:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8004b2c:	4413      	add	r3, r2
 8004b2e:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b30:	4620      	mov	r0, r4
 8004b32:	f005 f818 	bl	8009b66 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004b36:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f43f af0f 	beq.w	800495e <HAL_PCD_IRQHandler+0x1a>
 8004b40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	f47f af0b 	bne.w	800495e <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004b48:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b52:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004b56:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004b5a:	e700      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b5c:	8805      	ldrh	r5, [r0, #0]
 8004b5e:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b60:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 8004b64:	d021      	beq.n	8004baa <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b66:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004b6a:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004b78:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b7c:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8004b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b84:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004b88:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004b8c:	f002 fcd8 	bl	8007540 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b90:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004b92:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b94:	8813      	ldrh	r3, [r2, #0]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	051b      	lsls	r3, r3, #20
 8004b9c:	0d1b      	lsrs	r3, r3, #20
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8004ba4:	f004 ffd0 	bl	8009b48 <HAL_PCD_SetupStageCallback>
 8004ba8:	e6d9      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004baa:	041f      	lsls	r7, r3, #16
 8004bac:	f57f aed7 	bpl.w	800495e <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bb0:	8803      	ldrh	r3, [r0, #0]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	051b      	lsls	r3, r3, #20
 8004bb8:	0d1b      	lsrs	r3, r3, #20
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bc0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004bc4:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004bd2:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8004bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bda:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004bde:	b18b      	cbz	r3, 8004c04 <HAL_PCD_IRQHandler+0x2c0>
 8004be0:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 8004be4:	b171      	cbz	r1, 8004c04 <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004be6:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8004bea:	f002 fca9 	bl	8007540 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004bf2:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bf6:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8004bf8:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004bfa:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8004bfc:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c00:	f004 ffa8 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c04:	6821      	ldr	r1, [r4, #0]
 8004c06:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 8004c0a:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8004c0e:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	b9cd      	cbnz	r5, 8004c4a <HAL_PCD_IRQHandler+0x306>
 8004c16:	5ac2      	ldrh	r2, [r0, r3]
 8004c18:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004c1c:	0412      	lsls	r2, r2, #16
 8004c1e:	0c12      	lsrs	r2, r2, #16
 8004c20:	52c2      	strh	r2, [r0, r3]
 8004c22:	5ac2      	ldrh	r2, [r0, r3]
 8004c24:	b292      	uxth	r2, r2
 8004c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2a:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004c2c:	880b      	ldrh	r3, [r1, #0]
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c46:	800b      	strh	r3, [r1, #0]
 8004c48:	e689      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c4a:	2d3e      	cmp	r5, #62	; 0x3e
 8004c4c:	d806      	bhi.n	8004c5c <HAL_PCD_IRQHandler+0x318>
 8004c4e:	086a      	lsrs	r2, r5, #1
 8004c50:	07ee      	lsls	r6, r5, #31
 8004c52:	bf48      	it	mi
 8004c54:	3201      	addmi	r2, #1
 8004c56:	0292      	lsls	r2, r2, #10
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	e7e6      	b.n	8004c2a <HAL_PCD_IRQHandler+0x2e6>
 8004c5c:	096a      	lsrs	r2, r5, #5
 8004c5e:	06ed      	lsls	r5, r5, #27
 8004c60:	bf08      	it	eq
 8004c62:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004c66:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8004c6a:	e7f5      	b.n	8004c58 <HAL_PCD_IRQHandler+0x314>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c6c:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c70:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004c72:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c74:	f140 80f8 	bpl.w	8004e68 <HAL_PCD_IRQHandler+0x524>
        if (ep->doublebuffer == 0U)
 8004c78:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c7a:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004c7e:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	051b      	lsls	r3, r3, #20
 8004c88:	0d1b      	lsrs	r3, r3, #20
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004c92:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 8004c96:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8004c9a:	b9b3      	cbnz	r3, 8004cca <HAL_PCD_IRQHandler+0x386>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004ca0:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3306      	adds	r3, #6
 8004ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cac:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004cb0:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	f000 80bb 	beq.w	8004e30 <HAL_PCD_IRQHandler+0x4ec>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004cba:	462b      	mov	r3, r5
 8004cbc:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cc0:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8004cc4:	f002 fc3c 	bl	8007540 <USB_ReadPMA>
 8004cc8:	e0b2      	b.n	8004e30 <HAL_PCD_IRQHandler+0x4ec>
          if (ep->type == EP_TYPE_BULK)
 8004cca:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8004cce:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	f040 808b 	bne.w	8004dee <HAL_PCD_IRQHandler+0x4aa>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cd8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cdc:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 8004ce0:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 8004ce4:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cee:	d040      	beq.n	8004d72 <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004cf0:	449b      	add	fp, r3
 8004cf2:	f10b 0b02 	add.w	fp, fp, #2
 8004cf6:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 8004cfa:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8004cfe:	4295      	cmp	r5, r2
 8004d00:	d913      	bls.n	8004d2a <HAL_PCD_IRQHandler+0x3e6>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d08:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	0c1b      	lsrs	r3, r3, #16
 8004d18:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8004d28:	e004      	b.n	8004d34 <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len -= count;
 8004d2a:	1b52      	subs	r2, r2, r5
 8004d2c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004d30:	2a00      	cmp	r2, #0
 8004d32:	d0e9      	beq.n	8004d08 <HAL_PCD_IRQHandler+0x3c4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d34:	f1be 0f00 	cmp.w	lr, #0
 8004d38:	d012      	beq.n	8004d60 <HAL_PCD_IRQHandler+0x41c>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004d3a:	2328      	movs	r3, #40	; 0x28
 8004d3c:	fb03 4306 	mla	r3, r3, r6, r4
 8004d40:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8004d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	0c1b      	lsrs	r3, r3, #16
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	d065      	beq.n	8004e30 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d64:	2128      	movs	r1, #40	; 0x28
 8004d66:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004d70:	e7a6      	b.n	8004cc0 <HAL_PCD_IRQHandler+0x37c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d72:	445b      	add	r3, fp
 8004d74:	3306      	adds	r3, #6
 8004d76:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004d7a:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8004d7e:	4295      	cmp	r5, r2
 8004d80:	d912      	bls.n	8004da8 <HAL_PCD_IRQHandler+0x464>
 8004d82:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d86:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	0c1b      	lsrs	r3, r3, #16
 8004d96:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8004da6:	e004      	b.n	8004db2 <HAL_PCD_IRQHandler+0x46e>
      ep->xfer_len -= count;
 8004da8:	1b52      	subs	r2, r2, r5
 8004daa:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004dae:	2a00      	cmp	r2, #0
 8004db0:	d0e9      	beq.n	8004d86 <HAL_PCD_IRQHandler+0x442>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004db2:	f1be 0f00 	cmp.w	lr, #0
 8004db6:	d112      	bne.n	8004dde <HAL_PCD_IRQHandler+0x49a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004db8:	2328      	movs	r3, #40	; 0x28
 8004dba:	fb03 4306 	mla	r3, r3, r6, r4
 8004dbe:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8004dc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	0c1b      	lsrs	r3, r3, #16
 8004dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004dda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004dde:	b33d      	cbz	r5, 8004e30 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004de0:	2128      	movs	r1, #40	; 0x28
 8004de2:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004de6:	462b      	mov	r3, r5
 8004de8:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004dec:	e768      	b.n	8004cc0 <HAL_PCD_IRQHandler+0x37c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004dee:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	0c1b      	lsrs	r3, r3, #16
 8004dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e06:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e0a:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8004e0e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e18:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004e1c:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e1e:	d056      	beq.n	8004ece <HAL_PCD_IRQHandler+0x58a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e20:	3202      	adds	r2, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004e28:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004e2c:	2d00      	cmp	r5, #0
 8004e2e:	d19c      	bne.n	8004d6a <HAL_PCD_IRQHandler+0x426>
        ep->xfer_count += count;
 8004e30:	2128      	movs	r1, #40	; 0x28
 8004e32:	4371      	muls	r1, r6
 8004e34:	1863      	adds	r3, r4, r1
 8004e36:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8004e3a:	442a      	add	r2, r5
 8004e3c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8004e40:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004e44:	442a      	add	r2, r5
 8004e46:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004e4a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004e4e:	b11a      	cbz	r2, 8004e58 <HAL_PCD_IRQHandler+0x514>
 8004e50:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004e54:	429d      	cmp	r5, r3
 8004e56:	d243      	bcs.n	8004ee0 <HAL_PCD_IRQHandler+0x59c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004e58:	2328      	movs	r3, #40	; 0x28
 8004e5a:	fb03 4306 	mla	r3, r3, r6, r4
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8004e64:	f004 fe76 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004e68:	063a      	lsls	r2, r7, #24
 8004e6a:	f57f ad78 	bpl.w	800495e <HAL_PCD_IRQHandler+0x1a>
 8004e6e:	2528      	movs	r5, #40	; 0x28
 8004e70:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004e72:	fb05 4506 	mla	r5, r5, r6, r4
 8004e76:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8004e7a:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	ea03 0309 	and.w	r3, r3, r9
 8004e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e88:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8004e8c:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8004e90:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d101      	bne.n	8004e9c <HAL_PCD_IRQHandler+0x558>
 8004e98:	05fb      	lsls	r3, r7, #23
 8004e9a:	d439      	bmi.n	8004f10 <HAL_PCD_IRQHandler+0x5cc>
          if (ep->xfer_len > TxByteNbre)
 8004e9c:	2728      	movs	r7, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e9e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8004ea2:	fb07 4306 	mla	r3, r7, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	3202      	adds	r2, #2
 8004eaa:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8004eae:	f83e e011 	ldrh.w	lr, [lr, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8004eb2:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40
 8004eb6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004eba:	45f4      	cmp	ip, lr
 8004ebc:	d817      	bhi.n	8004eee <HAL_PCD_IRQHandler+0x5aa>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004ec8:	f004 fe4d 	bl	8009b66 <HAL_PCD_DataInStageCallback>
 8004ecc:	e547      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004ece:	3206      	adds	r2, #6
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004ed6:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004eda:	2d00      	cmp	r5, #0
 8004edc:	d0a8      	beq.n	8004e30 <HAL_PCD_IRQHandler+0x4ec>
 8004ede:	e782      	b.n	8004de6 <HAL_PCD_IRQHandler+0x4a2>
        ep = &hpcd->OUT_ep[epindex];
 8004ee0:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004ee4:	6820      	ldr	r0, [r4, #0]
 8004ee6:	4421      	add	r1, r4
 8004ee8:	f002 f84c 	bl	8006f84 <USB_EPStartXfer>
 8004eec:	e7bc      	b.n	8004e68 <HAL_PCD_IRQHandler+0x524>
            ep->xfer_len -= TxByteNbre;
 8004eee:	ebac 020e 	sub.w	r2, ip, lr
 8004ef2:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8004ef4:	2a00      	cmp	r2, #0
 8004ef6:	d0e4      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8004ef8:	fb06 7707 	mla	r7, r6, r7, r7
            ep->xfer_buff += TxByteNbre;
 8004efc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8004f00:	4471      	add	r1, lr
            ep->xfer_count += TxByteNbre;
 8004f02:	4472      	add	r2, lr
            ep->xfer_buff += TxByteNbre;
 8004f04:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004f06:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f08:	19e1      	adds	r1, r4, r7
 8004f0a:	f002 f83b 	bl	8006f84 <USB_EPStartXfer>
 8004f0e:	e526      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004f14:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004f18:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f1a:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
 8004f1e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f20:	4452      	add	r2, sl
 8004f22:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f26:	f000 80a2 	beq.w	800506e <HAL_PCD_IRQHandler+0x72a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f2a:	3202      	adds	r2, #2
 8004f2c:	f83e c012 	ldrh.w	ip, [lr, r2, lsl #1]
 8004f30:	2228      	movs	r2, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 8004f32:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004f36:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8004f38:	bf28      	it	cs
 8004f3a:	2300      	movcs	r3, #0
 8004f3c:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8004f40:	bf38      	it	cc
 8004f42:	eba3 030c 	subcc.w	r3, r3, ip
 8004f46:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f48:	b2bf      	uxth	r7, r7
 8004f4a:	b9bb      	cbnz	r3, 8004f7c <HAL_PCD_IRQHandler+0x638>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f004 fe0a 	bl	8009b66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f52:	2f00      	cmp	r7, #0
 8004f54:	f000 80a3 	beq.w	800509e <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f58:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	041b      	lsls	r3, r3, #16
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f76:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004f7a:	e090      	b.n	800509e <HAL_PCD_IRQHandler+0x75a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f7c:	b16f      	cbz	r7, 8004f9a <HAL_PCD_IRQHandler+0x656>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004f7e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f96:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004f9a:	2328      	movs	r3, #40	; 0x28
 8004f9c:	fb03 4306 	mla	r3, r3, r6, r4
 8004fa0:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8004fa4:	2a01      	cmp	r2, #1
 8004fa6:	d17a      	bne.n	800509e <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004faa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004fac:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fae:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004fb0:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004fb4:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fb6:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8004fb8:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004fba:	d327      	bcc.n	800500c <HAL_PCD_IRQHandler+0x6c8>
          ep->xfer_len_db -= len;
 8004fbc:	1abf      	subs	r7, r7, r2
 8004fbe:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fc0:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8004fc4:	b293      	uxth	r3, r2
 8004fc6:	2f00      	cmp	r7, #0
 8004fc8:	d143      	bne.n	8005052 <HAL_PCD_IRQHandler+0x70e>
 8004fca:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004fce:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 8004fd2:	b2bf      	uxth	r7, r7
 8004fd4:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8004fd8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004fdc:	4477      	add	r7, lr
 8004fde:	bb02      	cbnz	r2, 8005022 <HAL_PCD_IRQHandler+0x6de>
 8004fe0:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8004fe4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004fe8:	0412      	lsls	r2, r2, #16
 8004fea:	0c12      	lsrs	r2, r2, #16
 8004fec:	f82c 2007 	strh.w	r2, [ip, r7]
 8004ff0:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8004ff4:	b292      	uxth	r2, r2
 8004ff6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ffa:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ffe:	2228      	movs	r2, #40	; 0x28
 8005000:	fb02 4606 	mla	r6, r2, r6, r4
 8005004:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005006:	f001 ffad 	bl	8006f64 <USB_WritePMA>
 800500a:	e048      	b.n	800509e <HAL_PCD_IRQHandler+0x75a>
        else if (ep->xfer_len_db == 0U)
 800500c:	b91f      	cbnz	r7, 8005016 <HAL_PCD_IRQHandler+0x6d2>
    if (ep->xfer_len > TxByteNbre)
 800500e:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8005010:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 8005014:	e7d4      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x67c>
          ep->xfer_fill_db = 0U;
 8005016:	2200      	movs	r2, #0
 8005018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 800501c:	649a      	str	r2, [r3, #72]	; 0x48
 800501e:	463a      	mov	r2, r7
 8005020:	e7ce      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005022:	2a3e      	cmp	r2, #62	; 0x3e
 8005024:	d80c      	bhi.n	8005040 <HAL_PCD_IRQHandler+0x6fc>
 8005026:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 800502a:	07d2      	lsls	r2, r2, #31
 800502c:	bf48      	it	mi
 800502e:	f10e 0e01 	addmi.w	lr, lr, #1
 8005032:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8005036:	fa1f fe8e 	uxth.w	lr, lr
 800503a:	f82c e007 	strh.w	lr, [ip, r7]
 800503e:	e7de      	b.n	8004ffe <HAL_PCD_IRQHandler+0x6ba>
 8005040:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8005044:	06d2      	lsls	r2, r2, #27
 8005046:	bf08      	it	eq
 8005048:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 800504c:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8005050:	e7f1      	b.n	8005036 <HAL_PCD_IRQHandler+0x6f2>
 8005052:	2f01      	cmp	r7, #1
 8005054:	d1d3      	bne.n	8004ffe <HAL_PCD_IRQHandler+0x6ba>
 8005056:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800505a:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 800505e:	fa1f fc82 	uxth.w	ip, r2
 8005062:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8005066:	013f      	lsls	r7, r7, #4
 8005068:	4462      	add	r2, ip
 800506a:	52bb      	strh	r3, [r7, r2]
 800506c:	e7c7      	b.n	8004ffe <HAL_PCD_IRQHandler+0x6ba>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800506e:	3206      	adds	r2, #6
 8005070:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8005074:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8005076:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800507a:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800507c:	bf88      	it	hi
 800507e:	4663      	movhi	r3, ip
 8005080:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8005084:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxByteNbre;
 8005088:	bf98      	it	ls
 800508a:	1a9b      	subls	r3, r3, r2
 800508c:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8005090:	b9c3      	cbnz	r3, 80050c4 <HAL_PCD_IRQHandler+0x780>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005092:	4620      	mov	r0, r4
 8005094:	f004 fd67 	bl	8009b66 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005098:	2f00      	cmp	r7, #0
 800509a:	f43f af5d 	beq.w	8004f58 <HAL_PCD_IRQHandler+0x614>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800509e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050b2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80050b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050be:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80050c2:	e44c      	b.n	800495e <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050c4:	b96f      	cbnz	r7, 80050e2 <HAL_PCD_IRQHandler+0x79e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80050c6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80050e2:	2328      	movs	r3, #40	; 0x28
 80050e4:	fb03 4306 	mla	r3, r3, r6, r4
 80050e8:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 80050ec:	2901      	cmp	r1, #1
 80050ee:	d1d6      	bne.n	800509e <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 80050f0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 80050f2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 80050f4:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 80050f6:	f8d3 c048 	ldr.w	ip, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 80050fa:	645f      	str	r7, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 80050fc:	6b9f      	ldr	r7, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 80050fe:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8005100:	45bc      	cmp	ip, r7
        ep->xfer_buff += TxByteNbre;
 8005102:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8005104:	d326      	bcc.n	8005154 <HAL_PCD_IRQHandler+0x810>
          ep->xfer_len_db -= len;
 8005106:	ebac 0207 	sub.w	r2, ip, r7
 800510a:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800510c:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8005110:	b2bb      	uxth	r3, r7
 8005112:	2a00      	cmp	r2, #0
 8005114:	d143      	bne.n	800519e <HAL_PCD_IRQHandler+0x85a>
 8005116:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 800511a:	fa1f f28c 	uxth.w	r2, ip
 800511e:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8005122:	4494      	add	ip, r2
 8005124:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8005128:	0112      	lsls	r2, r2, #4
 800512a:	bb07      	cbnz	r7, 800516e <HAL_PCD_IRQHandler+0x82a>
 800512c:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8005130:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8005134:	043f      	lsls	r7, r7, #16
 8005136:	0c3f      	lsrs	r7, r7, #16
 8005138:	f82c 7002 	strh.w	r7, [ip, r2]
 800513c:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8005140:	b2bf      	uxth	r7, r7
 8005142:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8005146:	f82c 7002 	strh.w	r7, [ip, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800514a:	2228      	movs	r2, #40	; 0x28
 800514c:	fb02 4606 	mla	r6, r2, r6, r4
 8005150:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8005152:	e758      	b.n	8005006 <HAL_PCD_IRQHandler+0x6c2>
        else if (ep->xfer_len_db == 0U)
 8005154:	f1bc 0f00 	cmp.w	ip, #0
 8005158:	d103      	bne.n	8005162 <HAL_PCD_IRQHandler+0x81e>
    if (ep->xfer_len >= TxByteNbre)
 800515a:	4617      	mov	r7, r2
          ep->xfer_fill_db = 0U;
 800515c:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
 8005160:	e7d4      	b.n	800510c <HAL_PCD_IRQHandler+0x7c8>
          ep->xfer_len_db = 0U;
 8005162:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 8005164:	4667      	mov	r7, ip
          ep->xfer_len_db = 0U;
 8005166:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8005168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800516c:	e7ce      	b.n	800510c <HAL_PCD_IRQHandler+0x7c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800516e:	2f3e      	cmp	r7, #62	; 0x3e
 8005170:	d80c      	bhi.n	800518c <HAL_PCD_IRQHandler+0x848>
 8005172:	ea4f 0e57 	mov.w	lr, r7, lsr #1
 8005176:	07ff      	lsls	r7, r7, #31
 8005178:	bf48      	it	mi
 800517a:	f10e 0e01 	addmi.w	lr, lr, #1
 800517e:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8005182:	fa1f fe8e 	uxth.w	lr, lr
 8005186:	f82c e002 	strh.w	lr, [ip, r2]
 800518a:	e7de      	b.n	800514a <HAL_PCD_IRQHandler+0x806>
 800518c:	ea4f 1e57 	mov.w	lr, r7, lsr #5
 8005190:	06ff      	lsls	r7, r7, #27
 8005192:	bf08      	it	eq
 8005194:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8005198:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 800519c:	e7f1      	b.n	8005182 <HAL_PCD_IRQHandler+0x83e>
 800519e:	2a01      	cmp	r2, #1
 80051a0:	d1d3      	bne.n	800514a <HAL_PCD_IRQHandler+0x806>
 80051a2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 80051a6:	b2ba      	uxth	r2, r7
 80051a8:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 80051ac:	4417      	add	r7, r2
 80051ae:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 80051b2:	0112      	lsls	r2, r2, #4
 80051b4:	52bb      	strh	r3, [r7, r2]
 80051b6:	e7c8      	b.n	800514a <HAL_PCD_IRQHandler+0x806>
 80051b8:	ffff8f0f 	.word	0xffff8f0f
 80051bc:	ffff8000 	.word	0xffff8000

080051c0 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 80051c0:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	4605      	mov	r5, r0
 80051c8:	f001 0007 	and.w	r0, r1, #7
 80051cc:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 80051d0:	d01c      	beq.n	800520c <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 80051d2:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d4:	fb00 1101 	mla	r1, r0, r1, r1
 80051d8:	4429      	add	r1, r5
    ep->is_in = 1U;
 80051da:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 80051dc:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80051de:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051e0:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80051e2:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80051e4:	b102      	cbz	r2, 80051e8 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80051e6:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80051e8:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80051ea:	bf04      	itt	eq
 80051ec:	2300      	moveq	r3, #0
 80051ee:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80051f0:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d013      	beq.n	8005220 <HAL_PCD_EP_Open+0x60>
 80051f8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80051fa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80051fc:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005200:	f001 fbfe 	bl	8006a00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005204:	2000      	movs	r0, #0
 8005206:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 800520a:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800520c:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800520e:	fb01 f400 	mul.w	r4, r1, r0
 8005212:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8005216:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005218:	4429      	add	r1, r5
    ep->is_in = 0U;
 800521a:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 800521e:	e7dd      	b.n	80051dc <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8005220:	2002      	movs	r0, #2
 8005222:	e7f2      	b.n	800520a <HAL_PCD_EP_Open+0x4a>

08005224 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8005224:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8005228:	b510      	push	{r4, lr}
 800522a:	f001 0207 	and.w	r2, r1, #7
 800522e:	4604      	mov	r4, r0
 8005230:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8005234:	d013      	beq.n	800525e <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8005236:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005238:	fb02 1101 	mla	r1, r2, r1, r1
 800523c:	4401      	add	r1, r0
    ep->is_in = 1U;
 800523e:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005240:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005242:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005246:	2b01      	cmp	r3, #1
 8005248:	d013      	beq.n	8005272 <HAL_PCD_EP_Close+0x4e>
 800524a:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800524c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800524e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005252:	f001 fd2d 	bl	8006cb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005256:	2000      	movs	r0, #0
 8005258:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800525c:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800525e:	fb01 f302 	mul.w	r3, r1, r2
 8005262:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8005266:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005268:	4403      	add	r3, r0
 800526a:	2000      	movs	r0, #0
 800526c:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8005270:	e7e6      	b.n	8005240 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8005272:	2002      	movs	r0, #2
 8005274:	e7f2      	b.n	800525c <HAL_PCD_EP_Close+0x38>

08005276 <HAL_PCD_EP_Receive>:
{
 8005276:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8005278:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 800527a:	2600      	movs	r6, #0
 800527c:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8005280:	434c      	muls	r4, r1
 8005282:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8005284:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005288:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800528c:	4401      	add	r1, r0
  ep->xfer_len = len;
 800528e:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8005292:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8005296:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800529a:	6800      	ldr	r0, [r0, #0]
 800529c:	f001 fe72 	bl	8006f84 <USB_EPStartXfer>
}
 80052a0:	4630      	mov	r0, r6
 80052a2:	bd70      	pop	{r4, r5, r6, pc}

080052a4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052a4:	2328      	movs	r3, #40	; 0x28
 80052a6:	f001 0107 	and.w	r1, r1, #7
 80052aa:	fb03 0101 	mla	r1, r3, r1, r0
}
 80052ae:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 80052b2:	4770      	bx	lr

080052b4 <HAL_PCD_EP_Transmit>:
{
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 80052ba:	2128      	movs	r1, #40	; 0x28
 80052bc:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 80052c0:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80052c2:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80052c6:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c8:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 80052cc:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052d0:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 80052d2:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 80052d4:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80052d6:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80052da:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80052de:	6800      	ldr	r0, [r0, #0]
 80052e0:	f001 fe50 	bl	8006f84 <USB_EPStartXfer>
}
 80052e4:	4630      	mov	r0, r6
 80052e6:	bd70      	pop	{r4, r5, r6, pc}

080052e8 <HAL_PCD_EP_SetStall>:
{
 80052e8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052ea:	6843      	ldr	r3, [r0, #4]
 80052ec:	f001 0507 	and.w	r5, r1, #7
 80052f0:	429d      	cmp	r5, r3
{
 80052f2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052f4:	d828      	bhi.n	8005348 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 80052f6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80052fa:	f04f 0328 	mov.w	r3, #40	; 0x28
 80052fe:	d01a      	beq.n	8005336 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005300:	fb05 3303 	mla	r3, r5, r3, r3
 8005304:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8005306:	2301      	movs	r3, #1
 8005308:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 800530a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800530c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800530e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8005310:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8005314:	429a      	cmp	r2, r3
 8005316:	d019      	beq.n	800534c <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005318:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800531a:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800531e:	f001 fda6 	bl	8006e6e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005322:	b925      	cbnz	r5, 800532e <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 800532a:	f001 fe19 	bl	8006f60 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 800532e:	2000      	movs	r0, #0
 8005330:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8005334:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8005336:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005338:	434b      	muls	r3, r1
 800533a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 800533e:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005340:	4401      	add	r1, r0
    ep->is_in = 0U;
 8005342:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 8005346:	e7e0      	b.n	800530a <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8005348:	2001      	movs	r0, #1
 800534a:	e7f3      	b.n	8005334 <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 800534c:	2002      	movs	r0, #2
 800534e:	e7f1      	b.n	8005334 <HAL_PCD_EP_SetStall+0x4c>

08005350 <HAL_PCD_EP_ClrStall>:
{
 8005350:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005352:	6843      	ldr	r3, [r0, #4]
 8005354:	f001 020f 	and.w	r2, r1, #15
 8005358:	429a      	cmp	r2, r3
{
 800535a:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800535c:	d826      	bhi.n	80053ac <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 800535e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005362:	f001 0207 	and.w	r2, r1, #7
 8005366:	f04f 0128 	mov.w	r1, #40	; 0x28
 800536a:	d015      	beq.n	8005398 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 800536c:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800536e:	fb02 1101 	mla	r1, r2, r1, r1
 8005372:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005374:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 8005376:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005378:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 800537a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800537c:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005380:	2b01      	cmp	r3, #1
 8005382:	d015      	beq.n	80053b0 <HAL_PCD_EP_ClrStall+0x60>
 8005384:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005386:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005388:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800538c:	f001 fd8f 	bl	8006eae <USB_EPClearStall>
  return HAL_OK;
 8005390:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8005392:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 8005396:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005398:	fb01 f302 	mul.w	r3, r1, r2
 800539c:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 80053a0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80053a2:	4403      	add	r3, r0
 80053a4:	2000      	movs	r0, #0
 80053a6:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 80053aa:	e7e4      	b.n	8005376 <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 80053ac:	2001      	movs	r0, #1
 80053ae:	e7f2      	b.n	8005396 <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 80053b0:	2002      	movs	r0, #2
 80053b2:	e7f0      	b.n	8005396 <HAL_PCD_EP_ClrStall+0x46>

080053b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80053b4:	b510      	push	{r4, lr}
 80053b6:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80053b8:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053bc:	bf1b      	ittet	ne
 80053be:	f001 0107 	andne.w	r1, r1, #7
 80053c2:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053c6:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ca:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 80053cc:	bf08      	it	eq
 80053ce:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80053d2:	b299      	uxth	r1, r3
 80053d4:	b91a      	cbnz	r2, 80053de <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80053d6:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80053d8:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80053da:	2000      	movs	r0, #0
 80053dc:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80053de:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053e0:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80053e2:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053e4:	e7f9      	b.n	80053da <HAL_PCDEx_PMAConfig+0x26>
	...

080053e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ec:	4605      	mov	r5, r0
 80053ee:	b338      	cbz	r0, 8005440 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f0:	6803      	ldr	r3, [r0, #0]
 80053f2:	07db      	lsls	r3, r3, #31
 80053f4:	d410      	bmi.n	8005418 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053f6:	682b      	ldr	r3, [r5, #0]
 80053f8:	079f      	lsls	r7, r3, #30
 80053fa:	d45e      	bmi.n	80054ba <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	0719      	lsls	r1, r3, #28
 8005400:	f100 8095 	bmi.w	800552e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	075a      	lsls	r2, r3, #29
 8005408:	f100 80bf 	bmi.w	800558a <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800540c:	69e8      	ldr	r0, [r5, #28]
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 812c 	bne.w	800566c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8005414:	2000      	movs	r0, #0
 8005416:	e029      	b.n	800546c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005418:	4c8f      	ldr	r4, [pc, #572]	; (8005658 <HAL_RCC_OscConfig+0x270>)
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b04      	cmp	r3, #4
 8005422:	d007      	beq.n	8005434 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	f003 030c 	and.w	r3, r3, #12
 800542a:	2b08      	cmp	r3, #8
 800542c:	d10a      	bne.n	8005444 <HAL_RCC_OscConfig+0x5c>
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	03de      	lsls	r6, r3, #15
 8005432:	d507      	bpl.n	8005444 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	039c      	lsls	r4, r3, #14
 8005438:	d5dd      	bpl.n	80053f6 <HAL_RCC_OscConfig+0xe>
 800543a:	686b      	ldr	r3, [r5, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1da      	bne.n	80053f6 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8005440:	2001      	movs	r0, #1
 8005442:	e013      	b.n	800546c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005444:	686b      	ldr	r3, [r5, #4]
 8005446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544a:	d112      	bne.n	8005472 <HAL_RCC_OscConfig+0x8a>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005452:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005454:	f7fd fec4 	bl	80031e0 <HAL_GetTick>
 8005458:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	0398      	lsls	r0, r3, #14
 800545e:	d4ca      	bmi.n	80053f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005460:	f7fd febe 	bl	80031e0 <HAL_GetTick>
 8005464:	1b80      	subs	r0, r0, r6
 8005466:	2864      	cmp	r0, #100	; 0x64
 8005468:	d9f7      	bls.n	800545a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800546a:	2003      	movs	r0, #3
}
 800546c:	b002      	add	sp, #8
 800546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005472:	b99b      	cbnz	r3, 800549c <HAL_RCC_OscConfig+0xb4>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005482:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005484:	f7fd feac 	bl	80031e0 <HAL_GetTick>
 8005488:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	0399      	lsls	r1, r3, #14
 800548e:	d5b2      	bpl.n	80053f6 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005490:	f7fd fea6 	bl	80031e0 <HAL_GetTick>
 8005494:	1b80      	subs	r0, r0, r6
 8005496:	2864      	cmp	r0, #100	; 0x64
 8005498:	d9f7      	bls.n	800548a <HAL_RCC_OscConfig+0xa2>
 800549a:	e7e6      	b.n	800546a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800549c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	d103      	bne.n	80054ac <HAL_RCC_OscConfig+0xc4>
 80054a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	e7cf      	b.n	800544c <HAL_RCC_OscConfig+0x64>
 80054ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	6823      	ldr	r3, [r4, #0]
 80054b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b8:	e7cb      	b.n	8005452 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ba:	4c67      	ldr	r4, [pc, #412]	; (8005658 <HAL_RCC_OscConfig+0x270>)
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	f013 0f0c 	tst.w	r3, #12
 80054c2:	d007      	beq.n	80054d4 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054c4:	6863      	ldr	r3, [r4, #4]
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d110      	bne.n	80054f0 <HAL_RCC_OscConfig+0x108>
 80054ce:	6863      	ldr	r3, [r4, #4]
 80054d0:	03da      	lsls	r2, r3, #15
 80054d2:	d40d      	bmi.n	80054f0 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	079b      	lsls	r3, r3, #30
 80054d8:	d502      	bpl.n	80054e0 <HAL_RCC_OscConfig+0xf8>
 80054da:	692b      	ldr	r3, [r5, #16]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d1af      	bne.n	8005440 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	696a      	ldr	r2, [r5, #20]
 80054e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80054e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	e785      	b.n	80053fc <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054f0:	692a      	ldr	r2, [r5, #16]
 80054f2:	4b5a      	ldr	r3, [pc, #360]	; (800565c <HAL_RCC_OscConfig+0x274>)
 80054f4:	b16a      	cbz	r2, 8005512 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80054fa:	f7fd fe71 	bl	80031e0 <HAL_GetTick>
 80054fe:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	079f      	lsls	r7, r3, #30
 8005504:	d4ec      	bmi.n	80054e0 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005506:	f7fd fe6b 	bl	80031e0 <HAL_GetTick>
 800550a:	1b80      	subs	r0, r0, r6
 800550c:	2802      	cmp	r0, #2
 800550e:	d9f7      	bls.n	8005500 <HAL_RCC_OscConfig+0x118>
 8005510:	e7ab      	b.n	800546a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8005512:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005514:	f7fd fe64 	bl	80031e0 <HAL_GetTick>
 8005518:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	0798      	lsls	r0, r3, #30
 800551e:	f57f af6d 	bpl.w	80053fc <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005522:	f7fd fe5d 	bl	80031e0 <HAL_GetTick>
 8005526:	1b80      	subs	r0, r0, r6
 8005528:	2802      	cmp	r0, #2
 800552a:	d9f6      	bls.n	800551a <HAL_RCC_OscConfig+0x132>
 800552c:	e79d      	b.n	800546a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800552e:	69aa      	ldr	r2, [r5, #24]
 8005530:	4e49      	ldr	r6, [pc, #292]	; (8005658 <HAL_RCC_OscConfig+0x270>)
 8005532:	4b4b      	ldr	r3, [pc, #300]	; (8005660 <HAL_RCC_OscConfig+0x278>)
 8005534:	b1da      	cbz	r2, 800556e <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800553a:	f7fd fe51 	bl	80031e0 <HAL_GetTick>
 800553e:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005540:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005542:	079b      	lsls	r3, r3, #30
 8005544:	d50d      	bpl.n	8005562 <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005546:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800554a:	4b46      	ldr	r3, [pc, #280]	; (8005664 <HAL_RCC_OscConfig+0x27c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005552:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005554:	bf00      	nop
  }
  while (Delay --);
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	1e5a      	subs	r2, r3, #1
 800555a:	9201      	str	r2, [sp, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1f9      	bne.n	8005554 <HAL_RCC_OscConfig+0x16c>
 8005560:	e750      	b.n	8005404 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd fe3d 	bl	80031e0 <HAL_GetTick>
 8005566:	1b00      	subs	r0, r0, r4
 8005568:	2802      	cmp	r0, #2
 800556a:	d9e9      	bls.n	8005540 <HAL_RCC_OscConfig+0x158>
 800556c:	e77d      	b.n	800546a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800556e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005570:	f7fd fe36 	bl	80031e0 <HAL_GetTick>
 8005574:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005576:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005578:	079f      	lsls	r7, r3, #30
 800557a:	f57f af43 	bpl.w	8005404 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800557e:	f7fd fe2f 	bl	80031e0 <HAL_GetTick>
 8005582:	1b00      	subs	r0, r0, r4
 8005584:	2802      	cmp	r0, #2
 8005586:	d9f6      	bls.n	8005576 <HAL_RCC_OscConfig+0x18e>
 8005588:	e76f      	b.n	800546a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558a:	4c33      	ldr	r4, [pc, #204]	; (8005658 <HAL_RCC_OscConfig+0x270>)
 800558c:	69e3      	ldr	r3, [r4, #28]
 800558e:	00d8      	lsls	r0, r3, #3
 8005590:	d424      	bmi.n	80055dc <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8005592:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005594:	69e3      	ldr	r3, [r4, #28]
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	61e3      	str	r3, [r4, #28]
 800559c:	69e3      	ldr	r3, [r4, #28]
 800559e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a6:	4e30      	ldr	r6, [pc, #192]	; (8005668 <HAL_RCC_OscConfig+0x280>)
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	05d9      	lsls	r1, r3, #23
 80055ac:	d518      	bpl.n	80055e0 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ae:	68eb      	ldr	r3, [r5, #12]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d126      	bne.n	8005602 <HAL_RCC_OscConfig+0x21a>
 80055b4:	6a23      	ldr	r3, [r4, #32]
 80055b6:	f043 0301 	orr.w	r3, r3, #1
 80055ba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80055bc:	f7fd fe10 	bl	80031e0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80055c4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c6:	6a23      	ldr	r3, [r4, #32]
 80055c8:	079b      	lsls	r3, r3, #30
 80055ca:	d53f      	bpl.n	800564c <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 80055cc:	2f00      	cmp	r7, #0
 80055ce:	f43f af1d 	beq.w	800540c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d2:	69e3      	ldr	r3, [r4, #28]
 80055d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d8:	61e3      	str	r3, [r4, #28]
 80055da:	e717      	b.n	800540c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80055dc:	2700      	movs	r7, #0
 80055de:	e7e2      	b.n	80055a6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055e0:	6833      	ldr	r3, [r6, #0]
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80055e8:	f7fd fdfa 	bl	80031e0 <HAL_GetTick>
 80055ec:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ee:	6833      	ldr	r3, [r6, #0]
 80055f0:	05da      	lsls	r2, r3, #23
 80055f2:	d4dc      	bmi.n	80055ae <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055f4:	f7fd fdf4 	bl	80031e0 <HAL_GetTick>
 80055f8:	eba0 0008 	sub.w	r0, r0, r8
 80055fc:	2864      	cmp	r0, #100	; 0x64
 80055fe:	d9f6      	bls.n	80055ee <HAL_RCC_OscConfig+0x206>
 8005600:	e733      	b.n	800546a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005602:	b9ab      	cbnz	r3, 8005630 <HAL_RCC_OscConfig+0x248>
 8005604:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	6223      	str	r3, [r4, #32]
 8005610:	6a23      	ldr	r3, [r4, #32]
 8005612:	f023 0304 	bic.w	r3, r3, #4
 8005616:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005618:	f7fd fde2 	bl	80031e0 <HAL_GetTick>
 800561c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561e:	6a23      	ldr	r3, [r4, #32]
 8005620:	0798      	lsls	r0, r3, #30
 8005622:	d5d3      	bpl.n	80055cc <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005624:	f7fd fddc 	bl	80031e0 <HAL_GetTick>
 8005628:	1b80      	subs	r0, r0, r6
 800562a:	4540      	cmp	r0, r8
 800562c:	d9f7      	bls.n	800561e <HAL_RCC_OscConfig+0x236>
 800562e:	e71c      	b.n	800546a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005630:	2b05      	cmp	r3, #5
 8005632:	6a23      	ldr	r3, [r4, #32]
 8005634:	d103      	bne.n	800563e <HAL_RCC_OscConfig+0x256>
 8005636:	f043 0304 	orr.w	r3, r3, #4
 800563a:	6223      	str	r3, [r4, #32]
 800563c:	e7ba      	b.n	80055b4 <HAL_RCC_OscConfig+0x1cc>
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	6223      	str	r3, [r4, #32]
 8005644:	6a23      	ldr	r3, [r4, #32]
 8005646:	f023 0304 	bic.w	r3, r3, #4
 800564a:	e7b6      	b.n	80055ba <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564c:	f7fd fdc8 	bl	80031e0 <HAL_GetTick>
 8005650:	1b80      	subs	r0, r0, r6
 8005652:	4540      	cmp	r0, r8
 8005654:	d9b7      	bls.n	80055c6 <HAL_RCC_OscConfig+0x1de>
 8005656:	e708      	b.n	800546a <HAL_RCC_OscConfig+0x82>
 8005658:	40021000 	.word	0x40021000
 800565c:	42420000 	.word	0x42420000
 8005660:	42420480 	.word	0x42420480
 8005664:	20000000 	.word	0x20000000
 8005668:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800566c:	4b2a      	ldr	r3, [pc, #168]	; (8005718 <HAL_RCC_OscConfig+0x330>)
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	461c      	mov	r4, r3
 8005672:	f002 020c 	and.w	r2, r2, #12
 8005676:	2a08      	cmp	r2, #8
 8005678:	d03d      	beq.n	80056f6 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800567a:	2300      	movs	r3, #0
 800567c:	4e27      	ldr	r6, [pc, #156]	; (800571c <HAL_RCC_OscConfig+0x334>)
 800567e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005680:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005682:	d12b      	bne.n	80056dc <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8005684:	f7fd fdac 	bl	80031e0 <HAL_GetTick>
 8005688:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	0199      	lsls	r1, r3, #6
 800568e:	d41f      	bmi.n	80056d0 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005690:	6a2b      	ldr	r3, [r5, #32]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005696:	d105      	bne.n	80056a4 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005698:	6862      	ldr	r2, [r4, #4]
 800569a:	68a9      	ldr	r1, [r5, #8]
 800569c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80056a0:	430a      	orrs	r2, r1
 80056a2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80056ae:	4313      	orrs	r3, r2
 80056b0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80056b2:	2301      	movs	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80056b6:	f7fd fd93 	bl	80031e0 <HAL_GetTick>
 80056ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	019a      	lsls	r2, r3, #6
 80056c0:	f53f aea8 	bmi.w	8005414 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056c4:	f7fd fd8c 	bl	80031e0 <HAL_GetTick>
 80056c8:	1b40      	subs	r0, r0, r5
 80056ca:	2802      	cmp	r0, #2
 80056cc:	d9f6      	bls.n	80056bc <HAL_RCC_OscConfig+0x2d4>
 80056ce:	e6cc      	b.n	800546a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d0:	f7fd fd86 	bl	80031e0 <HAL_GetTick>
 80056d4:	1bc0      	subs	r0, r0, r7
 80056d6:	2802      	cmp	r0, #2
 80056d8:	d9d7      	bls.n	800568a <HAL_RCC_OscConfig+0x2a2>
 80056da:	e6c6      	b.n	800546a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80056dc:	f7fd fd80 	bl	80031e0 <HAL_GetTick>
 80056e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	019b      	lsls	r3, r3, #6
 80056e6:	f57f ae95 	bpl.w	8005414 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fd fd79 	bl	80031e0 <HAL_GetTick>
 80056ee:	1b40      	subs	r0, r0, r5
 80056f0:	2802      	cmp	r0, #2
 80056f2:	d9f6      	bls.n	80056e2 <HAL_RCC_OscConfig+0x2fa>
 80056f4:	e6b9      	b.n	800546a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056f6:	2801      	cmp	r0, #1
 80056f8:	f43f aeb8 	beq.w	800546c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80056fc:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fe:	6a2a      	ldr	r2, [r5, #32]
 8005700:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8005704:	4291      	cmp	r1, r2
 8005706:	f47f ae9b 	bne.w	8005440 <HAL_RCC_OscConfig+0x58>
 800570a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800570c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005710:	4293      	cmp	r3, r2
 8005712:	f43f ae7f 	beq.w	8005414 <HAL_RCC_OscConfig+0x2c>
 8005716:	e693      	b.n	8005440 <HAL_RCC_OscConfig+0x58>
 8005718:	40021000 	.word	0x40021000
 800571c:	42420060 	.word	0x42420060

08005720 <HAL_RCC_GetSysClockFreq>:
{
 8005720:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005722:	4b18      	ldr	r3, [pc, #96]	; (8005784 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8005724:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005726:	ac02      	add	r4, sp, #8
 8005728:	f103 0510 	add.w	r5, r3, #16
 800572c:	4622      	mov	r2, r4
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	6859      	ldr	r1, [r3, #4]
 8005732:	3308      	adds	r3, #8
 8005734:	c203      	stmia	r2!, {r0, r1}
 8005736:	42ab      	cmp	r3, r5
 8005738:	4614      	mov	r4, r2
 800573a:	d1f7      	bne.n	800572c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800573c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8005740:	4911      	ldr	r1, [pc, #68]	; (8005788 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005742:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8005746:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005748:	f003 020c 	and.w	r2, r3, #12
 800574c:	2a08      	cmp	r2, #8
 800574e:	d117      	bne.n	8005780 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005750:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8005754:	a806      	add	r0, sp, #24
 8005756:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005758:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800575a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800575e:	d50c      	bpl.n	800577a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005760:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005762:	480a      	ldr	r0, [pc, #40]	; (800578c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005764:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005768:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800576a:	aa06      	add	r2, sp, #24
 800576c:	4413      	add	r3, r2
 800576e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005772:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005776:	b007      	add	sp, #28
 8005778:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800577a:	4805      	ldr	r0, [pc, #20]	; (8005790 <HAL_RCC_GetSysClockFreq+0x70>)
 800577c:	4350      	muls	r0, r2
 800577e:	e7fa      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8005780:	4802      	ldr	r0, [pc, #8]	; (800578c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8005782:	e7f8      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x56>
 8005784:	0800e7c8 	.word	0x0800e7c8
 8005788:	40021000 	.word	0x40021000
 800578c:	007a1200 	.word	0x007a1200
 8005790:	003d0900 	.word	0x003d0900

08005794 <HAL_RCC_ClockConfig>:
{
 8005794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005798:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800579a:	4604      	mov	r4, r0
 800579c:	b910      	cbnz	r0, 80057a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800579e:	2001      	movs	r0, #1
}
 80057a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a4:	4a44      	ldr	r2, [pc, #272]	; (80058b8 <HAL_RCC_ClockConfig+0x124>)
 80057a6:	6813      	ldr	r3, [r2, #0]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	428b      	cmp	r3, r1
 80057ae:	d328      	bcc.n	8005802 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	078e      	lsls	r6, r1, #30
 80057b4:	d430      	bmi.n	8005818 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b6:	07ca      	lsls	r2, r1, #31
 80057b8:	d443      	bmi.n	8005842 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057ba:	4a3f      	ldr	r2, [pc, #252]	; (80058b8 <HAL_RCC_ClockConfig+0x124>)
 80057bc:	6813      	ldr	r3, [r2, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	42ab      	cmp	r3, r5
 80057c4:	d865      	bhi.n	8005892 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	4d3c      	ldr	r5, [pc, #240]	; (80058bc <HAL_RCC_ClockConfig+0x128>)
 80057ca:	f012 0f04 	tst.w	r2, #4
 80057ce:	d16c      	bne.n	80058aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	0713      	lsls	r3, r2, #28
 80057d2:	d506      	bpl.n	80057e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057d4:	686b      	ldr	r3, [r5, #4]
 80057d6:	6922      	ldr	r2, [r4, #16]
 80057d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80057dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80057e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057e2:	f7ff ff9d 	bl	8005720 <HAL_RCC_GetSysClockFreq>
 80057e6:	686b      	ldr	r3, [r5, #4]
 80057e8:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <HAL_RCC_ClockConfig+0x12c>)
 80057ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80057ee:	5cd3      	ldrb	r3, [r2, r3]
 80057f0:	40d8      	lsrs	r0, r3
 80057f2:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <HAL_RCC_ClockConfig+0x130>)
 80057f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80057f6:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_ClockConfig+0x134>)
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	f7fc fc23 	bl	8002044 <HAL_InitTick>
  return HAL_OK;
 80057fe:	2000      	movs	r0, #0
 8005800:	e7ce      	b.n	80057a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005802:	6813      	ldr	r3, [r2, #0]
 8005804:	f023 0307 	bic.w	r3, r3, #7
 8005808:	430b      	orrs	r3, r1
 800580a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	428b      	cmp	r3, r1
 8005814:	d1c3      	bne.n	800579e <HAL_RCC_ClockConfig+0xa>
 8005816:	e7cb      	b.n	80057b0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	4b28      	ldr	r3, [pc, #160]	; (80058bc <HAL_RCC_ClockConfig+0x128>)
 800581a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800581e:	bf1e      	ittt	ne
 8005820:	685a      	ldrne	r2, [r3, #4]
 8005822:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8005826:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005828:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800582a:	bf42      	ittt	mi
 800582c:	685a      	ldrmi	r2, [r3, #4]
 800582e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8005832:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68a0      	ldr	r0, [r4, #8]
 8005838:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800583c:	4302      	orrs	r2, r0
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	e7b9      	b.n	80057b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005842:	6862      	ldr	r2, [r4, #4]
 8005844:	4e1d      	ldr	r6, [pc, #116]	; (80058bc <HAL_RCC_ClockConfig+0x128>)
 8005846:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005848:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800584a:	d11a      	bne.n	8005882 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	d0a5      	beq.n	800579e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005852:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005854:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005858:	f023 0303 	bic.w	r3, r3, #3
 800585c:	4313      	orrs	r3, r2
 800585e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005860:	f7fd fcbe 	bl	80031e0 <HAL_GetTick>
 8005864:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	6873      	ldr	r3, [r6, #4]
 8005868:	6862      	ldr	r2, [r4, #4]
 800586a:	f003 030c 	and.w	r3, r3, #12
 800586e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005872:	d0a2      	beq.n	80057ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005874:	f7fd fcb4 	bl	80031e0 <HAL_GetTick>
 8005878:	1bc0      	subs	r0, r0, r7
 800587a:	4540      	cmp	r0, r8
 800587c:	d9f3      	bls.n	8005866 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800587e:	2003      	movs	r0, #3
 8005880:	e78e      	b.n	80057a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005882:	2a02      	cmp	r2, #2
 8005884:	d102      	bne.n	800588c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005886:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800588a:	e7e1      	b.n	8005850 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588c:	f013 0f02 	tst.w	r3, #2
 8005890:	e7de      	b.n	8005850 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	f023 0307 	bic.w	r3, r3, #7
 8005898:	432b      	orrs	r3, r5
 800589a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800589c:	6813      	ldr	r3, [r2, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	f47f af7b 	bne.w	800579e <HAL_RCC_ClockConfig+0xa>
 80058a8:	e78d      	b.n	80057c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058aa:	686b      	ldr	r3, [r5, #4]
 80058ac:	68e1      	ldr	r1, [r4, #12]
 80058ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058b2:	430b      	orrs	r3, r1
 80058b4:	606b      	str	r3, [r5, #4]
 80058b6:	e78b      	b.n	80057d0 <HAL_RCC_ClockConfig+0x3c>
 80058b8:	40022000 	.word	0x40022000
 80058bc:	40021000 	.word	0x40021000
 80058c0:	0800cd48 	.word	0x0800cd48
 80058c4:	20000000 	.word	0x20000000
 80058c8:	20000008 	.word	0x20000008

080058cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058cc:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80058d6:	5cd3      	ldrb	r3, [r2, r3]
 80058d8:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80058da:	6810      	ldr	r0, [r2, #0]
}
 80058dc:	40d8      	lsrs	r0, r3
 80058de:	4770      	bx	lr
 80058e0:	40021000 	.word	0x40021000
 80058e4:	0800cd58 	.word	0x0800cd58
 80058e8:	20000000 	.word	0x20000000

080058ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_RCC_GetPCLK2Freq+0x14>)
 80058ee:	4a05      	ldr	r2, [pc, #20]	; (8005904 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80058f6:	5cd3      	ldrb	r3, [r2, r3]
 80058f8:	4a03      	ldr	r2, [pc, #12]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80058fa:	6810      	ldr	r0, [r2, #0]
}
 80058fc:	40d8      	lsrs	r0, r3
 80058fe:	4770      	bx	lr
 8005900:	40021000 	.word	0x40021000
 8005904:	0800cd58 	.word	0x0800cd58
 8005908:	20000000 	.word	0x20000000

0800590c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800590c:	230f      	movs	r3, #15
 800590e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCC_GetClockConfig+0x34>)
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	f002 0203 	and.w	r2, r2, #3
 8005918:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8005920:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005928:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	08db      	lsrs	r3, r3, #3
 800592e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005932:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005934:	4b03      	ldr	r3, [pc, #12]	; (8005944 <HAL_RCC_GetClockConfig+0x38>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	600b      	str	r3, [r1, #0]
}
 800593e:	4770      	bx	lr
 8005940:	40021000 	.word	0x40021000
 8005944:	40022000 	.word	0x40022000

08005948 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005948:	6803      	ldr	r3, [r0, #0]
{
 800594a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800594e:	07d9      	lsls	r1, r3, #31
{
 8005950:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005952:	d520      	bpl.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005954:	4c35      	ldr	r4, [pc, #212]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005956:	69e3      	ldr	r3, [r4, #28]
 8005958:	00da      	lsls	r2, r3, #3
 800595a:	d432      	bmi.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800595c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800595e:	69e3      	ldr	r3, [r4, #28]
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	61e3      	str	r3, [r4, #28]
 8005966:	69e3      	ldr	r3, [r4, #28]
 8005968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	4e2f      	ldr	r6, [pc, #188]	; (8005a30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005972:	6833      	ldr	r3, [r6, #0]
 8005974:	05db      	lsls	r3, r3, #23
 8005976:	d526      	bpl.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005978:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800597a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800597e:	d136      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005980:	6a23      	ldr	r3, [r4, #32]
 8005982:	686a      	ldr	r2, [r5, #4]
 8005984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005988:	4313      	orrs	r3, r2
 800598a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800598c:	b11f      	cbz	r7, 8005996 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800598e:	69e3      	ldr	r3, [r4, #28]
 8005990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005994:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005996:	6828      	ldr	r0, [r5, #0]
 8005998:	0783      	lsls	r3, r0, #30
 800599a:	d506      	bpl.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800599c:	4923      	ldr	r1, [pc, #140]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800599e:	68ab      	ldr	r3, [r5, #8]
 80059a0:	684a      	ldr	r2, [r1, #4]
 80059a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80059a6:	431a      	orrs	r2, r3
 80059a8:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059aa:	f010 0010 	ands.w	r0, r0, #16
 80059ae:	d01b      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b0:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80059b2:	68e9      	ldr	r1, [r5, #12]
 80059b4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80059b6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80059bc:	430b      	orrs	r3, r1
 80059be:	6053      	str	r3, [r2, #4]
 80059c0:	e012      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80059c2:	2700      	movs	r7, #0
 80059c4:	e7d4      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059c6:	6833      	ldr	r3, [r6, #0]
 80059c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80059ce:	f7fd fc07 	bl	80031e0 <HAL_GetTick>
 80059d2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	05d8      	lsls	r0, r3, #23
 80059d8:	d4ce      	bmi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059da:	f7fd fc01 	bl	80031e0 <HAL_GetTick>
 80059de:	eba0 0008 	sub.w	r0, r0, r8
 80059e2:	2864      	cmp	r0, #100	; 0x64
 80059e4:	d9f6      	bls.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80059e6:	2003      	movs	r0, #3
}
 80059e8:	b002      	add	sp, #8
 80059ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059ee:	686a      	ldr	r2, [r5, #4]
 80059f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d0c3      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80059f8:	2001      	movs	r0, #1
 80059fa:	4a0e      	ldr	r2, [pc, #56]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059fc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80059fe:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a00:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a06:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8005a08:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	d5b8      	bpl.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8005a0e:	f7fd fbe7 	bl	80031e0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a12:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005a16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	6a23      	ldr	r3, [r4, #32]
 8005a1a:	079a      	lsls	r2, r3, #30
 8005a1c:	d4b0      	bmi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fd fbdf 	bl	80031e0 <HAL_GetTick>
 8005a22:	1b80      	subs	r0, r0, r6
 8005a24:	4540      	cmp	r0, r8
 8005a26:	d9f7      	bls.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005a28:	e7dd      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005a2a:	bf00      	nop
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40007000 	.word	0x40007000
 8005a34:	42420440 	.word	0x42420440

08005a38 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a3c:	461c      	mov	r4, r3
 8005a3e:	4616      	mov	r6, r2
 8005a40:	460f      	mov	r7, r1
 8005a42:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a44:	f7fd fbcc 	bl	80031e0 <HAL_GetTick>
 8005a48:	4434      	add	r4, r6
 8005a4a:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005a4c:	f7fd fbc8 	bl	80031e0 <HAL_GetTick>
 8005a50:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a52:	4b23      	ldr	r3, [pc, #140]	; (8005ae0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005a5a:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a5c:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8005a5e:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a60:	6893      	ldr	r3, [r2, #8]
 8005a62:	ea37 0303 	bics.w	r3, r7, r3
 8005a66:	d001      	beq.n	8005a6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8005a68:	2000      	movs	r0, #0
 8005a6a:	e02e      	b.n	8005aca <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005a6c:	1c73      	adds	r3, r6, #1
 8005a6e:	d0f7      	beq.n	8005a60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a70:	f7fd fbb6 	bl	80031e0 <HAL_GetTick>
 8005a74:	eba0 0008 	sub.w	r0, r0, r8
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d329      	bcc.n	8005ad0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a84:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a86:	686a      	ldr	r2, [r5, #4]
 8005a88:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005a8c:	d10a      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005a8e:	68aa      	ldr	r2, [r5, #8]
 8005a90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005a94:	d002      	beq.n	8005a9c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a96:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005a9a:	d103      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8005aa6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005aaa:	d107      	bne.n	8005abc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aba:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005abc:	2301      	movs	r3, #1
 8005abe:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2003      	movs	r0, #3
 8005ac6:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8005aca:	b002      	add	sp, #8
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8005ad0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005ad2:	2b00      	cmp	r3, #0
      count--;
 8005ad4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005ad6:	bf08      	it	eq
 8005ad8:	2400      	moveq	r4, #0
      count--;
 8005ada:	3b01      	subs	r3, #1
 8005adc:	e7be      	b.n	8005a5c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8005ade:	bf00      	nop
 8005ae0:	20000000 	.word	0x20000000

08005ae4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ae8:	6842      	ldr	r2, [r0, #4]
{
 8005aea:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aec:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005af0:	d116      	bne.n	8005b20 <SPI_EndRxTransaction+0x3c>
 8005af2:	6882      	ldr	r2, [r0, #8]
 8005af4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005af8:	d002      	beq.n	8005b00 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005afa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005afe:	d10f      	bne.n	8005b20 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b00:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b02:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8005b06:	6828      	ldr	r0, [r5, #0]
 8005b08:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005b0c:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005b0e:	d107      	bne.n	8005b20 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b10:	460a      	mov	r2, r1
 8005b12:	2101      	movs	r1, #1
 8005b14:	4620      	mov	r0, r4
 8005b16:	f7ff ff8f 	bl	8005a38 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005b1a:	b920      	cbnz	r0, 8005b26 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005b1c:	2000      	movs	r0, #0
}
 8005b1e:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b20:	460a      	mov	r2, r1
 8005b22:	2180      	movs	r1, #128	; 0x80
 8005b24:	e7f6      	b.n	8005b14 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b26:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b28:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b2a:	f043 0320 	orr.w	r3, r3, #32
 8005b2e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b30:	e7f5      	b.n	8005b1e <SPI_EndRxTransaction+0x3a>

08005b32 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b32:	b510      	push	{r4, lr}
 8005b34:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b36:	460a      	mov	r2, r1
 8005b38:	2180      	movs	r1, #128	; 0x80
{
 8005b3a:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b3c:	f7ff ff7c 	bl	8005a38 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005b40:	b120      	cbz	r0, 8005b4c <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8005b42:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005b46:	f043 0320 	orr.w	r3, r3, #32
 8005b4a:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8005b4c:	bd10      	pop	{r4, pc}

08005b4e <HAL_SPI_Init>:
{
 8005b4e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8005b50:	4604      	mov	r4, r0
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d051      	beq.n	8005bfa <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b56:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d14a      	bne.n	8005bf2 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b5c:	6842      	ldr	r2, [r0, #4]
 8005b5e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005b62:	d000      	beq.n	8005b66 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b64:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005b6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005b72:	b923      	cbnz	r3, 8005b7e <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8005b74:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005b76:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005b7a:	f7fc f91b 	bl	8001db4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b7e:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005b80:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b82:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8005b86:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b88:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b8e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8005b96:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005b9a:	4303      	orrs	r3, r0
 8005b9c:	68e0      	ldr	r0, [r4, #12]
 8005b9e:	69a1      	ldr	r1, [r4, #24]
 8005ba0:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8005ba4:	4303      	orrs	r3, r0
 8005ba6:	6920      	ldr	r0, [r4, #16]
 8005ba8:	f000 0002 	and.w	r0, r0, #2
 8005bac:	4303      	orrs	r3, r0
 8005bae:	6960      	ldr	r0, [r4, #20]
 8005bb0:	f000 0001 	and.w	r0, r0, #1
 8005bb4:	4303      	orrs	r3, r0
 8005bb6:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8005bba:	4303      	orrs	r3, r0
 8005bbc:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005bbe:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bc0:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8005bc4:	4303      	orrs	r3, r0
 8005bc6:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005bc8:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bcc:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8005bd0:	4303      	orrs	r3, r0
 8005bd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005bd4:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8005bd8:	4303      	orrs	r3, r0
 8005bda:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005bdc:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bde:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005be0:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be6:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005be8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bea:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8005bf0:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bf2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bf4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005bf8:	e7b5      	b.n	8005b66 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	e7f8      	b.n	8005bf0 <HAL_SPI_Init+0xa2>

08005bfe <HAL_SPI_TransmitReceive>:
{
 8005bfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c02:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8005c04:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8005c08:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8005c0a:	2b01      	cmp	r3, #1
{
 8005c0c:	460d      	mov	r5, r1
 8005c0e:	4691      	mov	r9, r2
 8005c10:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8005c14:	f000 80e0 	beq.w	8005dd8 <HAL_SPI_TransmitReceive+0x1da>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005c1e:	f7fd fadf 	bl	80031e0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8005c22:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8005c26:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c28:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8005c2a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8005c2c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c2e:	d00a      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x48>
 8005c30:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005c34:	f040 80ce 	bne.w	8005dd4 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c38:	68a3      	ldr	r3, [r4, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f040 80ca 	bne.w	8005dd4 <HAL_SPI_TransmitReceive+0x1d6>
 8005c40:	2904      	cmp	r1, #4
 8005c42:	f040 80c7 	bne.w	8005dd4 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c46:	2d00      	cmp	r5, #0
 8005c48:	d03f      	beq.n	8005cca <HAL_SPI_TransmitReceive+0xcc>
 8005c4a:	f1b9 0f00 	cmp.w	r9, #0
 8005c4e:	d03c      	beq.n	8005cca <HAL_SPI_TransmitReceive+0xcc>
 8005c50:	2e00      	cmp	r6, #0
 8005c52:	d03a      	beq.n	8005cca <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c54:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c58:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c5c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c5e:	bf1c      	itt	ne
 8005c60:	2305      	movne	r3, #5
 8005c62:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8005c6a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005c70:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8005c72:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c74:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8005c76:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c78:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005c7a:	bf58      	it	pl
 8005c7c:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c7e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8005c80:	bf58      	it	pl
 8005c82:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8005c86:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8005c88:	bf58      	it	pl
 8005c8a:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c8c:	68e1      	ldr	r1, [r4, #12]
 8005c8e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005c92:	d151      	bne.n	8005d38 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c94:	b10a      	cbz	r2, 8005c9a <HAL_SPI_TransmitReceive+0x9c>
 8005c96:	2e01      	cmp	r6, #1
 8005c98:	d107      	bne.n	8005caa <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c9a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005c9e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005ca0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005caa:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	b96b      	cbnz	r3, 8005cce <HAL_SPI_TransmitReceive+0xd0>
 8005cb2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	b953      	cbnz	r3, 8005cce <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cb8:	463a      	mov	r2, r7
 8005cba:	4641      	mov	r1, r8
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff ff38 	bl	8005b32 <SPI_EndRxTxTransaction>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d07b      	beq.n	8005dbe <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cc6:	2320      	movs	r3, #32
 8005cc8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005cca:	2001      	movs	r0, #1
 8005ccc:	e02b      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cce:	6821      	ldr	r1, [r4, #0]
 8005cd0:	688b      	ldr	r3, [r1, #8]
 8005cd2:	079a      	lsls	r2, r3, #30
 8005cd4:	d50d      	bpl.n	8005cf2 <HAL_SPI_TransmitReceive+0xf4>
 8005cd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	b153      	cbz	r3, 8005cf2 <HAL_SPI_TransmitReceive+0xf4>
 8005cdc:	b14d      	cbz	r5, 8005cf2 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8005cde:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ce0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ce2:	f833 2b02 	ldrh.w	r2, [r3], #2
 8005ce6:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cf2:	688a      	ldr	r2, [r1, #8]
 8005cf4:	f012 0201 	ands.w	r2, r2, #1
 8005cf8:	d00c      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0x116>
 8005cfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b14b      	cbz	r3, 8005d14 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8005d00:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d02:	68c9      	ldr	r1, [r1, #12]
 8005d04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d06:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d0a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005d0c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d14:	f7fd fa64 	bl	80031e0 <HAL_GetTick>
 8005d18:	1bc0      	subs	r0, r0, r7
 8005d1a:	4540      	cmp	r0, r8
 8005d1c:	d3c6      	bcc.n	8005cac <HAL_SPI_TransmitReceive+0xae>
 8005d1e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005d22:	d0c3      	beq.n	8005cac <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8005d24:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8005d32:	b003      	add	sp, #12
 8005d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d38:	b10a      	cbz	r2, 8005d3e <HAL_SPI_TransmitReceive+0x140>
 8005d3a:	2e01      	cmp	r6, #1
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d3e:	782a      	ldrb	r2, [r5, #0]
 8005d40:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d44:	3301      	adds	r3, #1
 8005d46:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005d48:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005d50:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	b91b      	cbnz	r3, 8005d60 <HAL_SPI_TransmitReceive+0x162>
 8005d58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ab      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	6893      	ldr	r3, [r2, #8]
 8005d64:	079b      	lsls	r3, r3, #30
 8005d66:	d50e      	bpl.n	8005d86 <HAL_SPI_TransmitReceive+0x188>
 8005d68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	b15b      	cbz	r3, 8005d86 <HAL_SPI_TransmitReceive+0x188>
 8005d6e:	b155      	cbz	r5, 8005d86 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8005d70:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005d72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005d7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d86:	6822      	ldr	r2, [r4, #0]
 8005d88:	6891      	ldr	r1, [r2, #8]
 8005d8a:	f011 0101 	ands.w	r1, r1, #1
 8005d8e:	d00d      	beq.n	8005dac <HAL_SPI_TransmitReceive+0x1ae>
 8005d90:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	b153      	cbz	r3, 8005dac <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8005d96:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d98:	68d2      	ldr	r2, [r2, #12]
 8005d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005da0:	3301      	adds	r3, #1
 8005da2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005da4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005dac:	f7fd fa18 	bl	80031e0 <HAL_GetTick>
 8005db0:	1bc0      	subs	r0, r0, r7
 8005db2:	4540      	cmp	r0, r8
 8005db4:	d3cd      	bcc.n	8005d52 <HAL_SPI_TransmitReceive+0x154>
 8005db6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005dba:	d0ca      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x154>
 8005dbc:	e7b2      	b.n	8005d24 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dbe:	68a3      	ldr	r3, [r4, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d1b0      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	9001      	str	r0, [sp, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	9201      	str	r2, [sp, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	e7a8      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	e7a6      	b.n	8005d26 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8005dd8:	2002      	movs	r0, #2
 8005dda:	e7aa      	b.n	8005d32 <HAL_SPI_TransmitReceive+0x134>

08005ddc <HAL_SPI_Receive>:
{
 8005ddc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005de0:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005de2:	6843      	ldr	r3, [r0, #4]
{
 8005de4:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8005dea:	4688      	mov	r8, r1
 8005dec:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005dee:	d10c      	bne.n	8005e0a <HAL_SPI_Receive+0x2e>
 8005df0:	6883      	ldr	r3, [r0, #8]
 8005df2:	b953      	cbnz	r3, 8005e0a <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005df4:	2304      	movs	r3, #4
 8005df6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	9500      	str	r5, [sp, #0]
 8005dfe:	460a      	mov	r2, r1
 8005e00:	f7ff fefd 	bl	8005bfe <HAL_SPI_TransmitReceive>
}
 8005e04:	b002      	add	sp, #8
 8005e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8005e0a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d07d      	beq.n	8005f0e <HAL_SPI_Receive+0x132>
 8005e12:	2301      	movs	r3, #1
 8005e14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005e18:	f7fd f9e2 	bl	80031e0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e1c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8005e20:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	b2d8      	uxtb	r0, r3
 8005e26:	d170      	bne.n	8005f0a <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 8005e28:	f1b8 0f00 	cmp.w	r8, #0
 8005e2c:	d05b      	beq.n	8005ee6 <HAL_SPI_Receive+0x10a>
 8005e2e:	2e00      	cmp	r6, #0
 8005e30:	d059      	beq.n	8005ee6 <HAL_SPI_Receive+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e32:	2304      	movs	r3, #4
 8005e34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e38:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3a:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e3c:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->TxISR       = NULL;
 8005e42:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005e46:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005e48:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005e4a:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005e4c:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e4e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e56:	d107      	bne.n	8005e68 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e66:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005e6c:	bf5e      	ittt	pl
 8005e6e:	681a      	ldrpl	r2, [r3, #0]
 8005e70:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8005e74:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e76:	68e3      	ldr	r3, [r4, #12]
 8005e78:	b1f3      	cbz	r3, 8005eb8 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8005e7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b1fb      	cbz	r3, 8005ec0 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	07d2      	lsls	r2, r2, #31
 8005e86:	d535      	bpl.n	8005ef4 <HAL_SPI_Receive+0x118>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e8c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e90:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005e92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005e94:	3b01      	subs	r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005e9a:	e7ee      	b.n	8005e7a <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	07d0      	lsls	r0, r2, #31
 8005ea2:	d518      	bpl.n	8005ed6 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ea4:	7b1b      	ldrb	r3, [r3, #12]
 8005ea6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005ea8:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eac:	3301      	adds	r3, #1
 8005eae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005eb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8005eb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ed      	bne.n	8005e9c <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec0:	463a      	mov	r2, r7
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f7ff fe0d 	bl	8005ae4 <SPI_EndRxTransaction>
 8005eca:	b9d8      	cbnz	r0, 8005f04 <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005ece:	3800      	subs	r0, #0
 8005ed0:	bf18      	it	ne
 8005ed2:	2001      	movne	r0, #1
error :
 8005ed4:	e007      	b.n	8005ee6 <HAL_SPI_Receive+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ed6:	f7fd f983 	bl	80031e0 <HAL_GetTick>
 8005eda:	1bc0      	subs	r0, r0, r7
 8005edc:	42a8      	cmp	r0, r5
 8005ede:	d3eb      	bcc.n	8005eb8 <HAL_SPI_Receive+0xdc>
 8005ee0:	1c69      	adds	r1, r5, #1
 8005ee2:	d0e9      	beq.n	8005eb8 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8005ee4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005eec:	2300      	movs	r3, #0
 8005eee:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8005ef2:	e787      	b.n	8005e04 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ef4:	f7fd f974 	bl	80031e0 <HAL_GetTick>
 8005ef8:	1bc0      	subs	r0, r0, r7
 8005efa:	42a8      	cmp	r0, r5
 8005efc:	d3bd      	bcc.n	8005e7a <HAL_SPI_Receive+0x9e>
 8005efe:	1c6b      	adds	r3, r5, #1
 8005f00:	d0bb      	beq.n	8005e7a <HAL_SPI_Receive+0x9e>
 8005f02:	e7ef      	b.n	8005ee4 <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f04:	2320      	movs	r3, #32
 8005f06:	6563      	str	r3, [r4, #84]	; 0x54
 8005f08:	e7e0      	b.n	8005ecc <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005f0a:	2002      	movs	r0, #2
 8005f0c:	e7eb      	b.n	8005ee6 <HAL_SPI_Receive+0x10a>
  __HAL_LOCK(hspi);
 8005f0e:	2002      	movs	r0, #2
 8005f10:	e778      	b.n	8005e04 <HAL_SPI_Receive+0x28>

08005f12 <HAL_SPI_ErrorCallback>:
 8005f12:	4770      	bx	lr

08005f14 <HAL_SPI_IRQHandler>:
{
 8005f14:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005f16:	6803      	ldr	r3, [r0, #0]
{
 8005f18:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005f1a:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005f1c:	689a      	ldr	r2, [r3, #8]
{
 8005f1e:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005f20:	0656      	lsls	r6, r2, #25
 8005f22:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8005f26:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8005f2a:	d408      	bmi.n	8005f3e <HAL_SPI_IRQHandler+0x2a>
 8005f2c:	07d6      	lsls	r6, r2, #31
 8005f2e:	d506      	bpl.n	8005f3e <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f30:	064e      	lsls	r6, r1, #25
 8005f32:	d504      	bpl.n	8005f3e <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8005f34:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8005f36:	b005      	add	sp, #20
 8005f38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8005f3c:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f3e:	0796      	lsls	r6, r2, #30
 8005f40:	d504      	bpl.n	8005f4c <HAL_SPI_IRQHandler+0x38>
 8005f42:	0608      	lsls	r0, r1, #24
 8005f44:	d502      	bpl.n	8005f4c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8005f46:	4620      	mov	r0, r4
 8005f48:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f4a:	e7f4      	b.n	8005f36 <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005f4c:	0956      	lsrs	r6, r2, #5
 8005f4e:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8005f52:	07d2      	lsls	r2, r2, #31
 8005f54:	d54c      	bpl.n	8005ff0 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f56:	068d      	lsls	r5, r1, #26
 8005f58:	d54a      	bpl.n	8005ff0 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f5a:	b177      	cbz	r7, 8005f7a <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f5c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8005f60:	2000      	movs	r0, #0
 8005f62:	2a03      	cmp	r2, #3
 8005f64:	d03e      	beq.n	8005fe4 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f66:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f68:	f042 0204 	orr.w	r2, r2, #4
 8005f6c:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f6e:	9001      	str	r0, [sp, #4]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	9201      	str	r2, [sp, #4]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	9201      	str	r2, [sp, #4]
 8005f78:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005f7a:	07f0      	lsls	r0, r6, #31
 8005f7c:	d50c      	bpl.n	8005f98 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005f7e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f80:	f042 0201 	orr.w	r2, r2, #1
 8005f84:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005f86:	2200      	movs	r2, #0
 8005f88:	9203      	str	r2, [sp, #12]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	9203      	str	r2, [sp, #12]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f94:	601a      	str	r2, [r3, #0]
 8005f96:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f98:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f9a:	b34a      	cbz	r2, 8005ff0 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fa2:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005faa:	078a      	lsls	r2, r1, #30
 8005fac:	d022      	beq.n	8005ff4 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fae:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005fb0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005fb2:	f022 0203 	bic.w	r2, r2, #3
 8005fb6:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005fb8:	b140      	cbz	r0, 8005fcc <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fba:	4b10      	ldr	r3, [pc, #64]	; (8005ffc <HAL_SPI_IRQHandler+0xe8>)
 8005fbc:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005fbe:	f7fd f9a7 	bl	8003310 <HAL_DMA_Abort_IT>
 8005fc2:	b118      	cbz	r0, 8005fcc <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fca:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005fcc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005fce:	b178      	cbz	r0, 8005ff0 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_SPI_IRQHandler+0xe8>)
 8005fd2:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005fd4:	f7fd f99c 	bl	8003310 <HAL_DMA_Abort_IT>
 8005fd8:	b150      	cbz	r0, 8005ff0 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005fda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe0:	6563      	str	r3, [r4, #84]	; 0x54
 8005fe2:	e005      	b.n	8005ff0 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	9302      	str	r3, [sp, #8]
 8005fee:	9b02      	ldr	r3, [sp, #8]
}
 8005ff0:	b005      	add	sp, #20
 8005ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff ff8c 	bl	8005f12 <HAL_SPI_ErrorCallback>
 8005ffa:	e7f9      	b.n	8005ff0 <HAL_SPI_IRQHandler+0xdc>
 8005ffc:	08006001 	.word	0x08006001

08006000 <SPI_DMAAbortOnError>:
{
 8006000:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8006002:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006004:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8006006:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006008:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800600a:	f7ff ff82 	bl	8005f12 <HAL_SPI_ErrorCallback>
}
 800600e:	bd08      	pop	{r3, pc}

08006010 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006010:	6a03      	ldr	r3, [r0, #32]
{
 8006012:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800601e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006020:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006022:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006026:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006028:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800602a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800602e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006030:	4d0a      	ldr	r5, [pc, #40]	; (800605c <TIM_OC1_SetConfig+0x4c>)
 8006032:	42a8      	cmp	r0, r5
 8006034:	d10b      	bne.n	800604e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006036:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006038:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800603c:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800603e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006042:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8006046:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8006048:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800604c:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006050:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006052:	684a      	ldr	r2, [r1, #4]
 8006054:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006056:	6203      	str	r3, [r0, #32]
}
 8006058:	bd70      	pop	{r4, r5, r6, pc}
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00

08006060 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006060:	6a03      	ldr	r3, [r0, #32]
{
 8006062:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006068:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800606e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006070:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006072:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8006076:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006078:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800607a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800607e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006082:	4d0b      	ldr	r5, [pc, #44]	; (80060b0 <TIM_OC3_SetConfig+0x50>)
 8006084:	42a8      	cmp	r0, r5
 8006086:	d10d      	bne.n	80060a4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006088:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800608a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006092:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006096:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800609a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800609c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060a0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a8:	684a      	ldr	r2, [r1, #4]
 80060aa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ac:	6203      	str	r3, [r0, #32]
}
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	40012c00 	.word	0x40012c00

080060b4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b4:	6a03      	ldr	r3, [r0, #32]
{
 80060b6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060bc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060c2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80060d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d8:	4d06      	ldr	r5, [pc, #24]	; (80060f4 <TIM_OC4_SetConfig+0x40>)
 80060da:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060dc:	bf02      	ittt	eq
 80060de:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060e0:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060e4:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060ec:	684a      	ldr	r2, [r1, #4]
 80060ee:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f0:	6203      	str	r3, [r0, #32]
}
 80060f2:	bd30      	pop	{r4, r5, pc}
 80060f4:	40012c00 	.word	0x40012c00

080060f8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80060f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d11c      	bne.n	800613a <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006102:	4a0f      	ldr	r2, [pc, #60]	; (8006140 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006108:	6803      	ldr	r3, [r0, #0]
 800610a:	4293      	cmp	r3, r2
 800610c:	d00a      	beq.n	8006124 <HAL_TIM_Base_Start+0x2c>
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d007      	beq.n	8006124 <HAL_TIM_Base_Start+0x2c>
 8006114:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006118:	4293      	cmp	r3, r2
 800611a:	d003      	beq.n	8006124 <HAL_TIM_Base_Start+0x2c>
 800611c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006120:	4293      	cmp	r3, r2
 8006122:	d104      	bne.n	800612e <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006124:	689a      	ldr	r2, [r3, #8]
 8006126:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612a:	2a06      	cmp	r2, #6
 800612c:	d003      	beq.n	8006136 <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	f042 0201 	orr.w	r2, r2, #1
 8006134:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006136:	2000      	movs	r0, #0
}
 8006138:	4770      	bx	lr
    return HAL_ERROR;
 800613a:	2001      	movs	r0, #1
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40012c00 	.word	0x40012c00

08006144 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006144:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006148:	2b01      	cmp	r3, #1
 800614a:	d120      	bne.n	800618e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800614c:	2302      	movs	r3, #2
 800614e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006152:	6803      	ldr	r3, [r0, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800615c:	4a0d      	ldr	r2, [pc, #52]	; (8006194 <HAL_TIM_Base_Start_IT+0x50>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00a      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x34>
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d007      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x34>
 8006168:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <HAL_TIM_Base_Start_IT+0x34>
 8006170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006174:	4293      	cmp	r3, r2
 8006176:	d104      	bne.n	8006182 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006178:	689a      	ldr	r2, [r3, #8]
 800617a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617e:	2a06      	cmp	r2, #6
 8006180:	d003      	beq.n	800618a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	f042 0201 	orr.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800618a:	2000      	movs	r0, #0
}
 800618c:	4770      	bx	lr
    return HAL_ERROR;
 800618e:	2001      	movs	r0, #1
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40012c00 	.word	0x40012c00

08006198 <HAL_TIM_PWM_MspInit>:
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_Encoder_Start>:
{
 800619a:	4603      	mov	r3, r0
 800619c:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800619e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061a2:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061a6:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061aa:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061ae:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061b0:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061b2:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061b4:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 80061b6:	b9c1      	cbnz	r1, 80061ea <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061b8:	2a01      	cmp	r2, #1
 80061ba:	d145      	bne.n	8006248 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061bc:	2d01      	cmp	r5, #1
 80061be:	d145      	bne.n	800624c <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061ca:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061cc:	6a11      	ldr	r1, [r2, #32]
 80061ce:	f021 0101 	bic.w	r1, r1, #1
 80061d2:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061d4:	6a11      	ldr	r1, [r2, #32]
 80061d6:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 80061da:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061dc:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 80061ea:	2904      	cmp	r1, #4
 80061ec:	d111      	bne.n	8006212 <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ee:	2801      	cmp	r0, #1
 80061f0:	d12a      	bne.n	8006248 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061f2:	2c01      	cmp	r4, #1
 80061f4:	d1f8      	bne.n	80061e8 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006200:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8006202:	6a11      	ldr	r1, [r2, #32]
 8006204:	f021 0110 	bic.w	r1, r1, #16
 8006208:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800620a:	6a11      	ldr	r1, [r2, #32]
 800620c:	f041 0110 	orr.w	r1, r1, #16
 8006210:	e7e3      	b.n	80061da <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006212:	2a01      	cmp	r2, #1
 8006214:	d118      	bne.n	8006248 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006216:	2801      	cmp	r0, #1
 8006218:	d118      	bne.n	800624c <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800621a:	2d01      	cmp	r5, #1
 800621c:	d1e4      	bne.n	80061e8 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800621e:	2c01      	cmp	r4, #1
 8006220:	d1e2      	bne.n	80061e8 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  switch (Channel)
 8006234:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8006236:	6a11      	ldr	r1, [r2, #32]
 8006238:	f021 0101 	bic.w	r1, r1, #1
 800623c:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800623e:	6a11      	ldr	r1, [r2, #32]
 8006240:	f041 0101 	orr.w	r1, r1, #1
 8006244:	6211      	str	r1, [r2, #32]
 8006246:	e7dc      	b.n	8006202 <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8006248:	2001      	movs	r0, #1
 800624a:	e7cd      	b.n	80061e8 <HAL_TIM_Encoder_Start+0x4e>
 800624c:	4610      	mov	r0, r2
 800624e:	e7cb      	b.n	80061e8 <HAL_TIM_Encoder_Start+0x4e>

08006250 <HAL_TIM_OC_DelayElapsedCallback>:
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_IC_CaptureCallback>:
 8006252:	4770      	bx	lr

08006254 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006254:	4770      	bx	lr

08006256 <HAL_TIM_TriggerCallback>:
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006258:	6803      	ldr	r3, [r0, #0]
{
 800625a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800625c:	691a      	ldr	r2, [r3, #16]
{
 800625e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006260:	0791      	lsls	r1, r2, #30
 8006262:	d50e      	bpl.n	8006282 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	0792      	lsls	r2, r2, #30
 8006268:	d50b      	bpl.n	8006282 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800626a:	f06f 0202 	mvn.w	r2, #2
 800626e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006270:	2201      	movs	r2, #1
 8006272:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d077      	beq.n	800636a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800627a:	f7ff ffea 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	2300      	movs	r3, #0
 8006280:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	691a      	ldr	r2, [r3, #16]
 8006286:	0750      	lsls	r0, r2, #29
 8006288:	d510      	bpl.n	80062ac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	0751      	lsls	r1, r2, #29
 800628e:	d50d      	bpl.n	80062ac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006290:	f06f 0204 	mvn.w	r2, #4
 8006294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006296:	2202      	movs	r2, #2
 8006298:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800629a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800629c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800629e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80062a2:	d068      	beq.n	8006376 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80062a4:	f7ff ffd5 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a8:	2300      	movs	r3, #0
 80062aa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	0712      	lsls	r2, r2, #28
 80062b2:	d50f      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	0710      	lsls	r0, r2, #28
 80062b8:	d50c      	bpl.n	80062d4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062ba:	f06f 0208 	mvn.w	r2, #8
 80062be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c0:	2204      	movs	r2, #4
 80062c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062c8:	0799      	lsls	r1, r3, #30
 80062ca:	d05a      	beq.n	8006382 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80062cc:	f7ff ffc1 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d0:	2300      	movs	r3, #0
 80062d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	06d2      	lsls	r2, r2, #27
 80062da:	d510      	bpl.n	80062fe <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062dc:	68da      	ldr	r2, [r3, #12]
 80062de:	06d0      	lsls	r0, r2, #27
 80062e0:	d50d      	bpl.n	80062fe <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062e2:	f06f 0210 	mvn.w	r2, #16
 80062e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e8:	2208      	movs	r2, #8
 80062ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80062f4:	d04b      	beq.n	800638e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	f7ff ffac 	bl	8006252 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	2300      	movs	r3, #0
 80062fc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	07d1      	lsls	r1, r2, #31
 8006304:	d508      	bpl.n	8006318 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	07d2      	lsls	r2, r2, #31
 800630a:	d505      	bpl.n	8006318 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800630c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8006310:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006312:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006314:	f7fb fb9a 	bl	8001a4c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	0610      	lsls	r0, r2, #24
 800631e:	d508      	bpl.n	8006332 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	0611      	lsls	r1, r2, #24
 8006324:	d505      	bpl.n	8006332 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006326:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800632a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800632c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800632e:	f000 face 	bl	80068ce <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	0652      	lsls	r2, r2, #25
 8006338:	d508      	bpl.n	800634c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	0650      	lsls	r0, r2, #25
 800633e:	d505      	bpl.n	800634c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006340:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8006344:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006346:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006348:	f7ff ff85 	bl	8006256 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800634c:	6823      	ldr	r3, [r4, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	0691      	lsls	r1, r2, #26
 8006352:	d522      	bpl.n	800639a <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	0692      	lsls	r2, r2, #26
 8006358:	d51f      	bpl.n	800639a <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800635a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800635e:	4620      	mov	r0, r4
}
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006364:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006366:	f000 bab1 	b.w	80068cc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800636a:	f7ff ff71 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636e:	4620      	mov	r0, r4
 8006370:	f7ff ff70 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
 8006374:	e783      	b.n	800627e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	f7ff ff6b 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637a:	4620      	mov	r0, r4
 800637c:	f7ff ff6a 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
 8006380:	e792      	b.n	80062a8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	f7ff ff65 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006386:	4620      	mov	r0, r4
 8006388:	f7ff ff64 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
 800638c:	e7a0      	b.n	80062d0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	f7ff ff5f 	bl	8006250 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006392:	4620      	mov	r0, r4
 8006394:	f7ff ff5e 	bl	8006254 <HAL_TIM_PWM_PulseFinishedCallback>
 8006398:	e7af      	b.n	80062fa <HAL_TIM_IRQHandler+0xa2>
}
 800639a:	bd10      	pop	{r4, pc}

0800639c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800639e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	4290      	cmp	r0, r2
 80063a2:	d00a      	beq.n	80063ba <TIM_Base_SetConfig+0x1e>
 80063a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063a8:	d007      	beq.n	80063ba <TIM_Base_SetConfig+0x1e>
 80063aa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80063ae:	4290      	cmp	r0, r2
 80063b0:	d003      	beq.n	80063ba <TIM_Base_SetConfig+0x1e>
 80063b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063b6:	4290      	cmp	r0, r2
 80063b8:	d115      	bne.n	80063e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80063ba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80063c0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	4a11      	ldr	r2, [pc, #68]	; (8006408 <TIM_Base_SetConfig+0x6c>)
 80063c4:	4290      	cmp	r0, r2
 80063c6:	d00a      	beq.n	80063de <TIM_Base_SetConfig+0x42>
 80063c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80063cc:	d007      	beq.n	80063de <TIM_Base_SetConfig+0x42>
 80063ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80063d2:	4290      	cmp	r0, r2
 80063d4:	d003      	beq.n	80063de <TIM_Base_SetConfig+0x42>
 80063d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063da:	4290      	cmp	r0, r2
 80063dc:	d103      	bne.n	80063e6 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063de:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e6:	694a      	ldr	r2, [r1, #20]
 80063e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ec:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80063ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f0:	688b      	ldr	r3, [r1, #8]
 80063f2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80063f4:	680b      	ldr	r3, [r1, #0]
 80063f6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <TIM_Base_SetConfig+0x6c>)
 80063fa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80063fc:	bf04      	itt	eq
 80063fe:	690b      	ldreq	r3, [r1, #16]
 8006400:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006402:	2301      	movs	r3, #1
 8006404:	6143      	str	r3, [r0, #20]
}
 8006406:	4770      	bx	lr
 8006408:	40012c00 	.word	0x40012c00

0800640c <HAL_TIM_Base_Init>:
{
 800640c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800640e:	4604      	mov	r4, r0
 8006410:	b330      	cbz	r0, 8006460 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006412:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006416:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800641a:	b91b      	cbnz	r3, 8006424 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800641c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006420:	f7fb fd42 	bl	8001ea8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006426:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006428:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642c:	1d21      	adds	r1, r4, #4
 800642e:	f7ff ffb5 	bl	800639c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006432:	2301      	movs	r3, #1
  return HAL_OK;
 8006434:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006436:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800643a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800643e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006442:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006446:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800644e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006452:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006456:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800645a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800645e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006460:	2001      	movs	r0, #1
 8006462:	e7fc      	b.n	800645e <HAL_TIM_Base_Init+0x52>

08006464 <HAL_TIM_PWM_Init>:
{
 8006464:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006466:	4604      	mov	r4, r0
 8006468:	b330      	cbz	r0, 80064b8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800646a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800646e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006472:	b91b      	cbnz	r3, 800647c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006474:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006478:	f7ff fe8e 	bl	8006198 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800647e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006480:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006484:	1d21      	adds	r1, r4, #4
 8006486:	f7ff ff89 	bl	800639c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648a:	2301      	movs	r3, #1
  return HAL_OK;
 800648c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800648e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006496:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800649a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800649e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80064ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80064b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80064b8:	2001      	movs	r0, #1
 80064ba:	e7fc      	b.n	80064b6 <HAL_TIM_PWM_Init+0x52>

080064bc <HAL_TIM_Encoder_Init>:
{
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	460d      	mov	r5, r1
  if (htim == NULL)
 80064c0:	4604      	mov	r4, r0
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d04d      	beq.n	8006562 <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 80064c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80064ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80064ce:	b91b      	cbnz	r3, 80064d8 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 80064d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80064d4:	f7fb fd1e 	bl	8001f14 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064da:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80064e4:	6883      	ldr	r3, [r0, #8]
 80064e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ea:	f023 0307 	bic.w	r3, r3, #7
 80064ee:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f0:	f7ff ff54 	bl	800639c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80064f4:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80064f6:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80064f8:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80064fa:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064fc:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80064fe:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006500:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006502:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006506:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800650a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800650e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006510:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006514:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006516:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800651e:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 8006520:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006522:	430b      	orrs	r3, r1
 8006524:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006526:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800652a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800652e:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006530:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006532:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006536:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8006538:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800653a:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800653e:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006540:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006542:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8006544:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 8006546:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006548:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800655c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006562:	2001      	movs	r0, #1
 8006564:	e7fc      	b.n	8006560 <HAL_TIM_Encoder_Init+0xa4>
	...

08006568 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006568:	6a03      	ldr	r3, [r0, #32]
{
 800656a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800656c:	f023 0310 	bic.w	r3, r3, #16
 8006570:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8006572:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8006574:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006576:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006578:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800657a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006582:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006584:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006588:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800658c:	4d0b      	ldr	r5, [pc, #44]	; (80065bc <TIM_OC2_SetConfig+0x54>)
 800658e:	42a8      	cmp	r0, r5
 8006590:	d10d      	bne.n	80065ae <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006592:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006598:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800659c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065a0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80065a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80065ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80065b0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80065b2:	684a      	ldr	r2, [r1, #4]
 80065b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80065b6:	6203      	str	r3, [r0, #32]
}
 80065b8:	bd70      	pop	{r4, r5, r6, pc}
 80065ba:	bf00      	nop
 80065bc:	40012c00 	.word	0x40012c00

080065c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80065c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80065c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80065c6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d052      	beq.n	8006672 <HAL_TIM_PWM_ConfigChannel+0xb2>
 80065cc:	2301      	movs	r3, #1
  switch (Channel)
 80065ce:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80065d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80065d4:	d03c      	beq.n	8006650 <HAL_TIM_PWM_ConfigChannel+0x90>
 80065d6:	d806      	bhi.n	80065e6 <HAL_TIM_PWM_ConfigChannel+0x26>
 80065d8:	b1c2      	cbz	r2, 800660c <HAL_TIM_PWM_ConfigChannel+0x4c>
 80065da:	2a04      	cmp	r2, #4
 80065dc:	d027      	beq.n	800662e <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 80065de:	2000      	movs	r0, #0
 80065e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80065e6:	2a0c      	cmp	r2, #12
 80065e8:	d1f9      	bne.n	80065de <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065ea:	6800      	ldr	r0, [r0, #0]
 80065ec:	f7ff fd62 	bl	80060b4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065f4:	69da      	ldr	r2, [r3, #28]
 80065f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006602:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006604:	69da      	ldr	r2, [r3, #28]
 8006606:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800660a:	e030      	b.n	800666e <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800660c:	6800      	ldr	r0, [r0, #0]
 800660e:	f7ff fcff 	bl	8006010 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006612:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006614:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	f042 0208 	orr.w	r2, r2, #8
 800661c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	f022 0204 	bic.w	r2, r2, #4
 8006624:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006626:	699a      	ldr	r2, [r3, #24]
 8006628:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800662a:	619a      	str	r2, [r3, #24]
      break;
 800662c:	e7d7      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800662e:	6800      	ldr	r0, [r0, #0]
 8006630:	f7ff ff9a 	bl	8006568 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006634:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006636:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800663e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006640:	699a      	ldr	r2, [r3, #24]
 8006642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800664e:	e7ec      	b.n	800662a <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006650:	6800      	ldr	r0, [r0, #0]
 8006652:	f7ff fd05 	bl	8006060 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006656:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006658:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	f042 0208 	orr.w	r2, r2, #8
 8006660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	f022 0204 	bic.w	r2, r2, #4
 8006668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800666e:	61da      	str	r2, [r3, #28]
      break;
 8006670:	e7b5      	b.n	80065de <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8006672:	2002      	movs	r0, #2
 8006674:	e7b6      	b.n	80065e4 <HAL_TIM_PWM_ConfigChannel+0x24>

08006676 <TIM_ETR_SetConfig>:
{
 8006676:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8006678:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800667a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800667c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006680:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006684:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8006686:	6082      	str	r2, [r0, #8]
}
 8006688:	bd10      	pop	{r4, pc}

0800668a <HAL_TIM_ConfigClockSource>:
{
 800668a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800668c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006690:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006692:	2b01      	cmp	r3, #1
 8006694:	f04f 0002 	mov.w	r0, #2
 8006698:	d027      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0x60>
 800669a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800669c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80066a0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80066a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80066a6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80066b0:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80066b2:	680b      	ldr	r3, [r1, #0]
 80066b4:	2b60      	cmp	r3, #96	; 0x60
 80066b6:	d04d      	beq.n	8006754 <HAL_TIM_ConfigClockSource+0xca>
 80066b8:	d832      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x96>
 80066ba:	2b40      	cmp	r3, #64	; 0x40
 80066bc:	d062      	beq.n	8006784 <HAL_TIM_ConfigClockSource+0xfa>
 80066be:	d815      	bhi.n	80066ec <HAL_TIM_ConfigClockSource+0x62>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d003      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0x42>
 80066c4:	d809      	bhi.n	80066da <HAL_TIM_ConfigClockSource+0x50>
 80066c6:	f033 0210 	bics.w	r2, r3, #16
 80066ca:	d108      	bne.n	80066de <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 80066cc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f043 0307 	orr.w	r3, r3, #7
 80066d8:	e020      	b.n	800671c <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80066da:	2b30      	cmp	r3, #48	; 0x30
 80066dc:	d0f6      	beq.n	80066cc <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 80066de:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80066e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80066e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80066e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80066ec:	2b50      	cmp	r3, #80	; 0x50
 80066ee:	d1f6      	bne.n	80066de <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f0:	684a      	ldr	r2, [r1, #4]
 80066f2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80066f4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f6:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066f8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066fc:	f025 0501 	bic.w	r5, r5, #1
 8006700:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006702:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006704:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800670a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800670e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006710:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006712:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006718:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800671c:	6083      	str	r3, [r0, #8]
}
 800671e:	e7de      	b.n	80066de <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8006720:	2b70      	cmp	r3, #112	; 0x70
 8006722:	d00c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0xb4>
 8006724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006728:	d1d9      	bne.n	80066de <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 800672a:	68cb      	ldr	r3, [r1, #12]
 800672c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006730:	f7ff ffa1 	bl	8006676 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006734:	6822      	ldr	r2, [r4, #0]
 8006736:	6893      	ldr	r3, [r2, #8]
 8006738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800673c:	e008      	b.n	8006750 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800673e:	68cb      	ldr	r3, [r1, #12]
 8006740:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006744:	f7ff ff97 	bl	8006676 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800674c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006750:	6093      	str	r3, [r2, #8]
      break;
 8006752:	e7c4      	b.n	80066de <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006754:	684d      	ldr	r5, [r1, #4]
 8006756:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006758:	6a01      	ldr	r1, [r0, #32]
 800675a:	f021 0110 	bic.w	r1, r1, #16
 800675e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006760:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006762:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006764:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006768:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800676c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006770:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006774:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006776:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006778:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8006782:	e7cb      	b.n	800671c <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006784:	684a      	ldr	r2, [r1, #4]
 8006786:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006788:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800678c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006790:	f025 0501 	bic.w	r5, r5, #1
 8006794:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006796:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006798:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800679a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800679e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80067a2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80067a4:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80067a6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067ac:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80067b0:	e7b4      	b.n	800671c <HAL_TIM_ConfigClockSource+0x92>

080067b2 <TIM_CCxChannelCmd>:
{
 80067b2:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b4:	2401      	movs	r4, #1
  TIMx->CCER &= ~tmp;
 80067b6:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067b8:	f001 011f 	and.w	r1, r1, #31
 80067bc:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80067be:	ea23 0304 	bic.w	r3, r3, r4
 80067c2:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067c4:	6a03      	ldr	r3, [r0, #32]
 80067c6:	408a      	lsls	r2, r1
 80067c8:	431a      	orrs	r2, r3
 80067ca:	6202      	str	r2, [r0, #32]
}
 80067cc:	bd10      	pop	{r4, pc}
	...

080067d0 <HAL_TIM_OC_Start>:
{
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067d4:	b929      	cbnz	r1, 80067e2 <HAL_TIM_OC_Start+0x12>
 80067d6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d01d      	beq.n	800681a <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 80067de:	2001      	movs	r0, #1
}
 80067e0:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067e2:	2904      	cmp	r1, #4
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_OC_Start+0x26>
 80067e6:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d1f7      	bne.n	80067de <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ee:	2302      	movs	r3, #2
 80067f0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80067f4:	e014      	b.n	8006820 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80067f6:	2908      	cmp	r1, #8
 80067f8:	d107      	bne.n	800680a <HAL_TIM_OC_Start+0x3a>
 80067fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d1ed      	bne.n	80067de <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006802:	2302      	movs	r3, #2
 8006804:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8006808:	e00a      	b.n	8006820 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800680a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800680e:	2b01      	cmp	r3, #1
 8006810:	d1e5      	bne.n	80067de <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006812:	2302      	movs	r3, #2
 8006814:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8006818:	e002      	b.n	8006820 <HAL_TIM_OC_Start+0x50>
 800681a:	2302      	movs	r3, #2
 800681c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006820:	2201      	movs	r2, #1
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	f7ff ffc5 	bl	80067b2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	4a0e      	ldr	r2, [pc, #56]	; (8006864 <HAL_TIM_OC_Start+0x94>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10a      	bne.n	8006846 <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 8006830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006836:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683e:	2a06      	cmp	r2, #6
 8006840:	d10b      	bne.n	800685a <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 8006842:	2000      	movs	r0, #0
 8006844:	e7cc      	b.n	80067e0 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684a:	d0f5      	beq.n	8006838 <HAL_TIM_OC_Start+0x68>
 800684c:	4a06      	ldr	r2, [pc, #24]	; (8006868 <HAL_TIM_OC_Start+0x98>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d0f2      	beq.n	8006838 <HAL_TIM_OC_Start+0x68>
 8006852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006856:	4293      	cmp	r3, r2
 8006858:	d0ee      	beq.n	8006838 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	f042 0201 	orr.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e7ee      	b.n	8006842 <HAL_TIM_OC_Start+0x72>
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40000400 	.word	0x40000400

0800686c <HAL_TIM_PWM_Start>:
 800686c:	f7ff bfb0 	b.w	80067d0 <HAL_TIM_OC_Start>

08006870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006870:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006876:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8006878:	2b01      	cmp	r3, #1
 800687a:	f04f 0002 	mov.w	r0, #2
 800687e:	d022      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006880:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006882:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8006886:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006888:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800688a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800688e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006890:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006892:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006894:	4c0c      	ldr	r4, [pc, #48]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8006896:	42a3      	cmp	r3, r4
 8006898:	d00a      	beq.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800689a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689e:	d007      	beq.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80068a0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d003      	beq.n	80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80068a8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80068ac:	42a3      	cmp	r3, r4
 80068ae:	d104      	bne.n	80068ba <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b0:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068b2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068b6:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068b8:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068ba:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80068bc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80068be:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80068c2:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80068c6:	bd30      	pop	{r4, r5, pc}
 80068c8:	40012c00 	.word	0x40012c00

080068cc <HAL_TIMEx_CommutCallback>:
 80068cc:	4770      	bx	lr

080068ce <HAL_TIMEx_BreakCallback>:
 80068ce:	4770      	bx	lr

080068d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068d0:	b510      	push	{r4, lr}
 80068d2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068d4:	6803      	ldr	r3, [r0, #0]
 80068d6:	68c1      	ldr	r1, [r0, #12]
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80068de:	430a      	orrs	r2, r1
 80068e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068e2:	6882      	ldr	r2, [r0, #8]
 80068e4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80068e6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068e8:	4302      	orrs	r2, r0
 80068ea:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80068ec:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80068f0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068f4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80068f6:	430a      	orrs	r2, r1
 80068f8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	69a1      	ldr	r1, [r4, #24]
 80068fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006902:	430a      	orrs	r2, r1
 8006904:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006906:	4a0e      	ldr	r2, [pc, #56]	; (8006940 <UART_SetConfig+0x70>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d115      	bne.n	8006938 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800690c:	f7fe ffee 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006910:	2319      	movs	r3, #25
 8006912:	4343      	muls	r3, r0
 8006914:	6862      	ldr	r2, [r4, #4]
 8006916:	6820      	ldr	r0, [r4, #0]
 8006918:	0092      	lsls	r2, r2, #2
 800691a:	fbb3 f3f2 	udiv	r3, r3, r2
 800691e:	2264      	movs	r2, #100	; 0x64
 8006920:	fbb3 f1f2 	udiv	r1, r3, r2
 8006924:	fb02 3311 	mls	r3, r2, r1, r3
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	3332      	adds	r3, #50	; 0x32
 800692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006930:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006934:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8006936:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8006938:	f7fe ffc8 	bl	80058cc <HAL_RCC_GetPCLK1Freq>
 800693c:	e7e8      	b.n	8006910 <UART_SetConfig+0x40>
 800693e:	bf00      	nop
 8006940:	40013800 	.word	0x40013800

08006944 <HAL_UART_Init>:
{
 8006944:	b510      	push	{r4, lr}
  if (huart == NULL)
 8006946:	4604      	mov	r4, r0
 8006948:	b340      	cbz	r0, 800699c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800694a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800694e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006952:	b91b      	cbnz	r3, 800695c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006954:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006958:	f7fb fb3a 	bl	8001fd0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800695c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800695e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006960:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006964:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8006966:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800696c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800696e:	f7ff ffaf 	bl	80068d0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006972:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006974:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006976:	691a      	ldr	r2, [r3, #16]
 8006978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800697c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800697e:	695a      	ldr	r2, [r3, #20]
 8006980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006984:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006986:	68da      	ldr	r2, [r3, #12]
 8006988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800698c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800698e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006990:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006992:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006996:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800699a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800699c:	2001      	movs	r0, #1
 800699e:	e7fc      	b.n	800699a <HAL_UART_Init+0x56>

080069a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069a0:	b084      	sub	sp, #16
 80069a2:	a801      	add	r0, sp, #4
 80069a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80069a8:	b004      	add	sp, #16
 80069aa:	2000      	movs	r0, #0
 80069ac:	4770      	bx	lr

080069ae <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80069ae:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80069b0:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 80069b4:	2000      	movs	r0, #0
 80069b6:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 80069ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 80069be:	4770      	bx	lr

080069c0 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80069c0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80069c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069c8:	045b      	lsls	r3, r3, #17
 80069ca:	0c5b      	lsrs	r3, r3, #17
 80069cc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 80069d0:	2000      	movs	r0, #0
 80069d2:	4770      	bx	lr

080069d4 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 80069d4:	2000      	movs	r0, #0
 80069d6:	4770      	bx	lr

080069d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80069d8:	b084      	sub	sp, #16
 80069da:	b510      	push	{r4, lr}
 80069dc:	4604      	mov	r4, r0
 80069de:	a803      	add	r0, sp, #12
 80069e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80069e4:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 80069ec:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80069f0:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80069f4:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	b004      	add	sp, #16
 80069fe:	4770      	bx	lr

08006a00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a02:	780d      	ldrb	r5, [r1, #0]
{
 8006a04:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a06:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8006a0a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006a0c:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8006a10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006a14:	0412      	lsls	r2, r2, #16
 8006a16:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8006a18:	2803      	cmp	r0, #3
 8006a1a:	d84f      	bhi.n	8006abc <USB_ActivateEndpoint+0xbc>
 8006a1c:	e8df f000 	tbb	[pc, r0]
 8006a20:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a28:	f248 0480 	movw	r4, #32896	; 0x8080
 8006a2c:	4322      	orrs	r2, r4
 8006a2e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a32:	780e      	ldrb	r6, [r1, #0]
 8006a34:	4d9b      	ldr	r5, [pc, #620]	; (8006ca4 <USB_ActivateEndpoint+0x2a4>)
 8006a36:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8006a3a:	b292      	uxth	r2, r2
 8006a3c:	402a      	ands	r2, r5
 8006a3e:	4332      	orrs	r2, r6
 8006a40:	4322      	orrs	r2, r4
 8006a42:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8006a46:	7b0c      	ldrb	r4, [r1, #12]
 8006a48:	780a      	ldrb	r2, [r1, #0]
 8006a4a:	2c00      	cmp	r4, #0
 8006a4c:	f040 8089 	bne.w	8006b62 <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8006a50:	88cc      	ldrh	r4, [r1, #6]
 8006a52:	784e      	ldrb	r6, [r1, #1]
 8006a54:	0864      	lsrs	r4, r4, #1
 8006a56:	0064      	lsls	r4, r4, #1
 8006a58:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006a5c:	b386      	cbz	r6, 8006ac0 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a5e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8006a62:	b2b6      	uxth	r6, r6
 8006a64:	4432      	add	r2, r6
 8006a66:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a6a:	780c      	ldrb	r4, [r1, #0]
 8006a6c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a70:	0652      	lsls	r2, r2, #25
 8006a72:	d509      	bpl.n	8006a88 <USB_ActivateEndpoint+0x88>
 8006a74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a78:	b292      	uxth	r2, r2
 8006a7a:	402a      	ands	r2, r5
 8006a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a80:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006a84:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006a88:	78ca      	ldrb	r2, [r1, #3]
 8006a8a:	780c      	ldrb	r4, [r1, #0]
 8006a8c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a8e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006a92:	4985      	ldr	r1, [pc, #532]	; (8006ca8 <USB_ActivateEndpoint+0x2a8>)
 8006a94:	b292      	uxth	r2, r2
 8006a96:	ea02 0201 	and.w	r2, r2, r1
 8006a9a:	bf18      	it	ne
 8006a9c:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006aa4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aa8:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8006aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8006aae:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8006ab2:	2000      	movs	r0, #0
      break;
 8006ab4:	e7b8      	b.n	8006a28 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8006aba:	e7fa      	b.n	8006ab2 <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8006abc:	2001      	movs	r0, #1
 8006abe:	e7b3      	b.n	8006a28 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ac0:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ac4:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ac6:	b2ad      	uxth	r5, r5
 8006ac8:	442a      	add	r2, r5
 8006aca:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006ace:	780a      	ldrb	r2, [r1, #0]
 8006ad0:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8006ad4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006ad8:	b2a4      	uxth	r4, r4
 8006ada:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8006ade:	bb7e      	cbnz	r6, 8006b40 <USB_ActivateEndpoint+0x140>
 8006ae0:	5b15      	ldrh	r5, [r2, r4]
 8006ae2:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 8006ae6:	042d      	lsls	r5, r5, #16
 8006ae8:	0c2d      	lsrs	r5, r5, #16
 8006aea:	5315      	strh	r5, [r2, r4]
 8006aec:	5b15      	ldrh	r5, [r2, r4]
 8006aee:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 8006af2:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 8006af6:	b2ad      	uxth	r5, r5
 8006af8:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afa:	780c      	ldrb	r4, [r1, #0]
 8006afc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b00:	0455      	lsls	r5, r2, #17
 8006b02:	d50d      	bpl.n	8006b20 <USB_ActivateEndpoint+0x120>
 8006b04:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006b08:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006b0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b10:	0412      	lsls	r2, r2, #16
 8006b12:	0c12      	lsrs	r2, r2, #16
 8006b14:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006b18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b1c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b20:	7809      	ldrb	r1, [r1, #0]
 8006b22:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006b26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006b2e:	0412      	lsls	r2, r2, #16
 8006b30:	0c12      	lsrs	r2, r2, #16
 8006b32:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b3e:	e071      	b.n	8006c24 <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006b40:	2e3e      	cmp	r6, #62	; 0x3e
 8006b42:	d805      	bhi.n	8006b50 <USB_ActivateEndpoint+0x150>
 8006b44:	0875      	lsrs	r5, r6, #1
 8006b46:	07f7      	lsls	r7, r6, #31
 8006b48:	bf48      	it	mi
 8006b4a:	3501      	addmi	r5, #1
 8006b4c:	02ad      	lsls	r5, r5, #10
 8006b4e:	e7d2      	b.n	8006af6 <USB_ActivateEndpoint+0xf6>
 8006b50:	0977      	lsrs	r7, r6, #5
 8006b52:	4d56      	ldr	r5, [pc, #344]	; (8006cac <USB_ActivateEndpoint+0x2ac>)
 8006b54:	06f6      	lsls	r6, r6, #27
 8006b56:	bf08      	it	eq
 8006b58:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006b5c:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8006b60:	e7c9      	b.n	8006af6 <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006b62:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006b66:	b2a4      	uxth	r4, r4
 8006b68:	402c      	ands	r4, r5
 8006b6a:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8006b6e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8006b72:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006b76:	780a      	ldrb	r2, [r1, #0]
 8006b78:	890c      	ldrh	r4, [r1, #8]
 8006b7a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8006b7e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006b82:	0864      	lsrs	r4, r4, #1
 8006b84:	b2b6      	uxth	r6, r6
 8006b86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b8a:	0064      	lsls	r4, r4, #1
 8006b8c:	5394      	strh	r4, [r2, r6]
 8006b8e:	780a      	ldrb	r2, [r1, #0]
 8006b90:	894c      	ldrh	r4, [r1, #10]
 8006b92:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8006b96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006b9a:	0864      	lsrs	r4, r4, #1
 8006b9c:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8006ba0:	0064      	lsls	r4, r4, #1
 8006ba2:	b2b6      	uxth	r6, r6
 8006ba4:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8006ba6:	784a      	ldrb	r2, [r1, #1]
 8006ba8:	780c      	ldrb	r4, [r1, #0]
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	d13d      	bne.n	8006c2a <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bb2:	0452      	lsls	r2, r2, #17
 8006bb4:	d509      	bpl.n	8006bca <USB_ActivateEndpoint+0x1ca>
 8006bb6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bba:	b292      	uxth	r2, r2
 8006bbc:	402a      	ands	r2, r5
 8006bbe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006bca:	780c      	ldrb	r4, [r1, #0]
 8006bcc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bd0:	0657      	lsls	r7, r2, #25
 8006bd2:	d50d      	bpl.n	8006bf0 <USB_ActivateEndpoint+0x1f0>
 8006bd4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006bd8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006bdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006be0:	0412      	lsls	r2, r2, #16
 8006be2:	0c12      	lsrs	r2, r2, #16
 8006be4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006be8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006bec:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf0:	f248 0480 	movw	r4, #32896	; 0x8080
 8006bf4:	780d      	ldrb	r5, [r1, #0]
 8006bf6:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8006bfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006bfe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c02:	0412      	lsls	r2, r2, #16
 8006c04:	0c12      	lsrs	r2, r2, #16
 8006c06:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8006c0a:	4322      	orrs	r2, r4
 8006c0c:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c10:	7809      	ldrb	r1, [r1, #0]
 8006c12:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006c16:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1e:	0412      	lsls	r2, r2, #16
 8006c20:	0c12      	lsrs	r2, r2, #16
 8006c22:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c24:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8006c28:	e740      	b.n	8006aac <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c2a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c2e:	0456      	lsls	r6, r2, #17
 8006c30:	d509      	bpl.n	8006c46 <USB_ActivateEndpoint+0x246>
 8006c32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c36:	b292      	uxth	r2, r2
 8006c38:	402a      	ands	r2, r5
 8006c3a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006c3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c42:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c46:	780c      	ldrb	r4, [r1, #0]
 8006c48:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c4c:	0652      	lsls	r2, r2, #25
 8006c4e:	d50d      	bpl.n	8006c6c <USB_ActivateEndpoint+0x26c>
 8006c50:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c54:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006c58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c5c:	0412      	lsls	r2, r2, #16
 8006c5e:	0c12      	lsrs	r2, r2, #16
 8006c60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c64:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006c68:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006c6c:	78ca      	ldrb	r2, [r1, #3]
 8006c6e:	780c      	ldrb	r4, [r1, #0]
 8006c70:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c72:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006c76:	4d0c      	ldr	r5, [pc, #48]	; (8006ca8 <USB_ActivateEndpoint+0x2a8>)
 8006c78:	b292      	uxth	r2, r2
 8006c7a:	ea02 0205 	and.w	r2, r2, r5
 8006c7e:	bf18      	it	ne
 8006c80:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c8c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c90:	7809      	ldrb	r1, [r1, #0]
 8006c92:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8006c96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006c9e:	0412      	lsls	r2, r2, #16
 8006ca0:	0c12      	lsrs	r2, r2, #16
 8006ca2:	e748      	b.n	8006b36 <USB_ActivateEndpoint+0x136>
 8006ca4:	ffff8f8f 	.word	0xffff8f8f
 8006ca8:	ffff8fbf 	.word	0xffff8fbf
 8006cac:	ffff8000 	.word	0xffff8000

08006cb0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006cb0:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8006cb2:	7b0c      	ldrb	r4, [r1, #12]
 8006cb4:	784b      	ldrb	r3, [r1, #1]
 8006cb6:	780a      	ldrb	r2, [r1, #0]
 8006cb8:	2c00      	cmp	r4, #0
 8006cba:	d13d      	bne.n	8006d38 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8006cbc:	b313      	cbz	r3, 8006d04 <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cbe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cc2:	065c      	lsls	r4, r3, #25
 8006cc4:	d50d      	bpl.n	8006ce2 <USB_DeactivateEndpoint+0x32>
 8006cc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cd2:	041b      	lsls	r3, r3, #16
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ce2:	780a      	ldrb	r2, [r1, #0]
 8006ce4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cf0:	041b      	lsls	r3, r3, #16
 8006cf2:	0c1b      	lsrs	r3, r3, #16
 8006cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 8006d00:	2000      	movs	r0, #0
 8006d02:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d08:	045b      	lsls	r3, r3, #17
 8006d0a:	d50d      	bpl.n	8006d28 <USB_DeactivateEndpoint+0x78>
 8006d0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	041b      	lsls	r3, r3, #16
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d28:	780a      	ldrb	r2, [r1, #0]
 8006d2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d36:	e7db      	b.n	8006cf0 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d14e      	bne.n	8006dda <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d40:	045c      	lsls	r4, r3, #17
 8006d42:	d50d      	bpl.n	8006d60 <USB_DeactivateEndpoint+0xb0>
 8006d44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	780a      	ldrb	r2, [r1, #0]
 8006d62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d66:	065b      	lsls	r3, r3, #25
 8006d68:	d50d      	bpl.n	8006d86 <USB_DeactivateEndpoint+0xd6>
 8006d6a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d82:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006d86:	780a      	ldrb	r2, [r1, #0]
 8006d88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006d8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	0c1b      	lsrs	r3, r3, #16
 8006d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006da0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006da4:	f248 0280 	movw	r2, #32896	; 0x8080
 8006da8:	780c      	ldrb	r4, [r1, #0]
 8006daa:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	041b      	lsls	r3, r3, #16
 8006db8:	0c1b      	lsrs	r3, r3, #16
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc0:	7809      	ldrb	r1, [r1, #0]
 8006dc2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	0c1b      	lsrs	r3, r3, #16
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8006dd8:	e792      	b.n	8006d00 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006dde:	045c      	lsls	r4, r3, #17
 8006de0:	d50d      	bpl.n	8006dfe <USB_DeactivateEndpoint+0x14e>
 8006de2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	041b      	lsls	r3, r3, #16
 8006df0:	0c1b      	lsrs	r3, r3, #16
 8006df2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dfe:	780a      	ldrb	r2, [r1, #0]
 8006e00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e04:	065b      	lsls	r3, r3, #25
 8006e06:	d50d      	bpl.n	8006e24 <USB_DeactivateEndpoint+0x174>
 8006e08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e14:	041b      	lsls	r3, r3, #16
 8006e16:	0c1b      	lsrs	r3, r3, #16
 8006e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006e24:	780a      	ldrb	r2, [r1, #0]
 8006e26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e42:	f248 0280 	movw	r2, #32896	; 0x8080
 8006e46:	780c      	ldrb	r4, [r1, #0]
 8006e48:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	0c1b      	lsrs	r3, r3, #16
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e5e:	7809      	ldrb	r1, [r1, #0]
 8006e60:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6c:	e7af      	b.n	8006dce <USB_DeactivateEndpoint+0x11e>

08006e6e <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006e6e:	784b      	ldrb	r3, [r1, #1]
 8006e70:	780a      	ldrb	r2, [r1, #0]
 8006e72:	b18b      	cbz	r3, 8006e98 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006e74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e80:	041b      	lsls	r3, r3, #16
 8006e82:	0c1b      	lsrs	r3, r3, #16
 8006e84:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006e94:	2000      	movs	r0, #0
 8006e96:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006e98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006eac:	e7ec      	b.n	8006e88 <USB_EPSetStall+0x1a>

08006eae <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006eae:	7b0b      	ldrb	r3, [r1, #12]
 8006eb0:	bb43      	cbnz	r3, 8006f04 <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8006eb2:	784b      	ldrb	r3, [r1, #1]
 8006eb4:	780a      	ldrb	r2, [r1, #0]
 8006eb6:	b33b      	cbz	r3, 8006f08 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006eb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ebc:	065b      	lsls	r3, r3, #25
 8006ebe:	d50d      	bpl.n	8006edc <USB_EPClearStall+0x2e>
 8006ec0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	0c1b      	lsrs	r3, r3, #16
 8006ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ed4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ed8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006edc:	78cb      	ldrb	r3, [r1, #3]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d010      	beq.n	8006f04 <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ee2:	780a      	ldrb	r2, [r1, #0]
 8006ee4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef0:	041b      	lsls	r3, r3, #16
 8006ef2:	0c1b      	lsrs	r3, r3, #16
 8006ef4:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ef8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006f04:	2000      	movs	r0, #0
 8006f06:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006f08:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f0c:	045b      	lsls	r3, r3, #17
 8006f0e:	d50d      	bpl.n	8006f2c <USB_EPClearStall+0x7e>
 8006f10:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1c:	041b      	lsls	r3, r3, #16
 8006f1e:	0c1b      	lsrs	r3, r3, #16
 8006f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f2c:	780a      	ldrb	r2, [r1, #0]
 8006f2e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	0c1b      	lsrs	r3, r3, #16
 8006f3e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006f42:	e7d9      	b.n	8006ef8 <USB_EPClearStall+0x4a>

08006f44 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006f44:	b911      	cbnz	r1, 8006f4c <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f46:	2380      	movs	r3, #128	; 0x80
 8006f48:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	4770      	bx	lr

08006f50 <USB_DevConnect>:
 8006f50:	2000      	movs	r0, #0
 8006f52:	4770      	bx	lr

08006f54 <USB_DevDisconnect>:
 8006f54:	2000      	movs	r0, #0
 8006f56:	4770      	bx	lr

08006f58 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f58:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006f5c:	b280      	uxth	r0, r0
 8006f5e:	4770      	bx	lr

08006f60 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006f60:	2000      	movs	r0, #0
 8006f62:	4770      	bx	lr

08006f64 <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f64:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f68:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d100      	bne.n	8006f7a <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8006f78:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f7a:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8006f7e:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8006f82:	e7f7      	b.n	8006f74 <USB_WritePMA+0x10>

08006f84 <USB_EPStartXfer>:
{
 8006f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f86:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8006f88:	7849      	ldrb	r1, [r1, #1]
{
 8006f8a:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8006f8c:	2901      	cmp	r1, #1
 8006f8e:	7b2a      	ldrb	r2, [r5, #12]
 8006f90:	f040 81a1 	bne.w	80072d6 <USB_EPStartXfer+0x352>
    if (ep->xfer_len > ep->maxpacket)
 8006f94:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006f98:	69ae      	ldr	r6, [r5, #24]
 8006f9a:	6969      	ldr	r1, [r5, #20]
 8006f9c:	4566      	cmp	r6, ip
 8006f9e:	bf28      	it	cs
 8006fa0:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8006fa2:	bb02      	cbnz	r2, 8006fe6 <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fa4:	b2b6      	uxth	r6, r6
 8006fa6:	88ea      	ldrh	r2, [r5, #6]
 8006fa8:	4633      	mov	r3, r6
 8006faa:	f7ff ffdb 	bl	8006f64 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fae:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006fb2:	7829      	ldrb	r1, [r5, #0]
 8006fb4:	b290      	uxth	r0, r2
 8006fb6:	f204 4204 	addw	r2, r4, #1028	; 0x404
 8006fba:	0109      	lsls	r1, r1, #4
 8006fbc:	4402      	add	r2, r0
 8006fbe:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006fc0:	782a      	ldrb	r2, [r5, #0]
 8006fc2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	0c1b      	lsrs	r3, r3, #16
 8006fd2:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8006fd6:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe0:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8006fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8006fe6:	78eb      	ldrb	r3, [r5, #3]
 8006fe8:	782f      	ldrb	r7, [r5, #0]
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	f040 8138 	bne.w	8007260 <USB_EPStartXfer+0x2dc>
        if (ep->xfer_len_db > ep->maxpacket)
 8006ff0:	6a2b      	ldr	r3, [r5, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ff2:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8006ff6:	459c      	cmp	ip, r3
 8006ff8:	f080 811a 	bcs.w	8007230 <USB_EPStartXfer+0x2ac>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006ffc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007000:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007004:	0412      	lsls	r2, r2, #16
 8007006:	0c12      	lsrs	r2, r2, #16
 8007008:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800700c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007010:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007014:	782a      	ldrb	r2, [r5, #0]
          ep->xfer_len_db -= len;
 8007016:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007018:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 800701c:	622b      	str	r3, [r5, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800701e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007022:	b2b3      	uxth	r3, r6
 8007024:	7868      	ldrb	r0, [r5, #1]
 8007026:	f000 8083 	beq.w	8007130 <USB_EPStartXfer+0x1ac>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800702a:	2800      	cmp	r0, #0
 800702c:	d152      	bne.n	80070d4 <USB_EPStartXfer+0x150>
 800702e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8007032:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8007036:	b280      	uxth	r0, r0
 8007038:	4438      	add	r0, r7
 800703a:	0112      	lsls	r2, r2, #4
 800703c:	2e00      	cmp	r6, #0
 800703e:	d136      	bne.n	80070ae <USB_EPStartXfer+0x12a>
 8007040:	5a87      	ldrh	r7, [r0, r2]
 8007042:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8007046:	043f      	lsls	r7, r7, #16
 8007048:	0c3f      	lsrs	r7, r7, #16
 800704a:	5287      	strh	r7, [r0, r2]
 800704c:	5a87      	ldrh	r7, [r0, r2]
 800704e:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8007052:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8007056:	b2bf      	uxth	r7, r7
 8007058:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800705a:	4620      	mov	r0, r4
 800705c:	896a      	ldrh	r2, [r5, #10]
 800705e:	f7ff ff81 	bl	8006f64 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007062:	6a2a      	ldr	r2, [r5, #32]
 8007064:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 8007066:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8007068:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 800706a:	bf8a      	itet	hi
 800706c:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 800706e:	2300      	movls	r3, #0
 8007070:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007072:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 8007074:	4431      	add	r1, r6
 8007076:	622b      	str	r3, [r5, #32]
 8007078:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800707a:	b293      	uxth	r3, r2
 800707c:	2800      	cmp	r0, #0
 800707e:	d14b      	bne.n	8007118 <USB_EPStartXfer+0x194>
 8007080:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8007084:	782e      	ldrb	r6, [r5, #0]
 8007086:	b280      	uxth	r0, r0
 8007088:	f204 4704 	addw	r7, r4, #1028	; 0x404
 800708c:	0136      	lsls	r6, r6, #4
 800708e:	4438      	add	r0, r7
 8007090:	bb5a      	cbnz	r2, 80070ea <USB_EPStartXfer+0x166>
 8007092:	5a32      	ldrh	r2, [r6, r0]
 8007094:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007098:	0412      	lsls	r2, r2, #16
 800709a:	0c12      	lsrs	r2, r2, #16
 800709c:	5232      	strh	r2, [r6, r0]
 800709e:	5a32      	ldrh	r2, [r6, r0]
 80070a0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80070a4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80070a8:	b292      	uxth	r2, r2
 80070aa:	5232      	strh	r2, [r6, r0]
 80070ac:	e026      	b.n	80070fc <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070ae:	2e3e      	cmp	r6, #62	; 0x3e
 80070b0:	d806      	bhi.n	80070c0 <USB_EPStartXfer+0x13c>
 80070b2:	0877      	lsrs	r7, r6, #1
 80070b4:	f016 0f01 	tst.w	r6, #1
 80070b8:	bf18      	it	ne
 80070ba:	3701      	addne	r7, #1
 80070bc:	02bf      	lsls	r7, r7, #10
 80070be:	e7ca      	b.n	8007056 <USB_EPStartXfer+0xd2>
 80070c0:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80070c4:	06f7      	lsls	r7, r6, #27
 80070c6:	4fa3      	ldr	r7, [pc, #652]	; (8007354 <USB_EPStartXfer+0x3d0>)
 80070c8:	bf08      	it	eq
 80070ca:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80070ce:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 80070d2:	e7c0      	b.n	8007056 <USB_EPStartXfer+0xd2>
 80070d4:	2801      	cmp	r0, #1
 80070d6:	d1c0      	bne.n	800705a <USB_EPStartXfer+0xd6>
 80070d8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80070dc:	0112      	lsls	r2, r2, #4
 80070de:	b287      	uxth	r7, r0
 80070e0:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 80070e4:	4438      	add	r0, r7
 80070e6:	5283      	strh	r3, [r0, r2]
 80070e8:	e7b7      	b.n	800705a <USB_EPStartXfer+0xd6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070ea:	2a3e      	cmp	r2, #62	; 0x3e
 80070ec:	d80b      	bhi.n	8007106 <USB_EPStartXfer+0x182>
 80070ee:	0857      	lsrs	r7, r2, #1
 80070f0:	07d2      	lsls	r2, r2, #31
 80070f2:	bf48      	it	mi
 80070f4:	3701      	addmi	r7, #1
 80070f6:	02bf      	lsls	r7, r7, #10
 80070f8:	b2bf      	uxth	r7, r7
 80070fa:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070fc:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070fe:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007100:	f7ff ff30 	bl	8006f64 <USB_WritePMA>
 8007104:	e75c      	b.n	8006fc0 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007106:	0957      	lsrs	r7, r2, #5
 8007108:	06d2      	lsls	r2, r2, #27
 800710a:	4a92      	ldr	r2, [pc, #584]	; (8007354 <USB_EPStartXfer+0x3d0>)
 800710c:	bf08      	it	eq
 800710e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007112:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007116:	e7c7      	b.n	80070a8 <USB_EPStartXfer+0x124>
 8007118:	2801      	cmp	r0, #1
 800711a:	d1ef      	bne.n	80070fc <USB_EPStartXfer+0x178>
 800711c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8007120:	7828      	ldrb	r0, [r5, #0]
 8007122:	b296      	uxth	r6, r2
 8007124:	f204 4204 	addw	r2, r4, #1028	; 0x404
 8007128:	0100      	lsls	r0, r0, #4
 800712a:	4432      	add	r2, r6
 800712c:	5283      	strh	r3, [r0, r2]
 800712e:	e7e5      	b.n	80070fc <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007130:	2800      	cmp	r0, #0
 8007132:	d152      	bne.n	80071da <USB_EPStartXfer+0x256>
 8007134:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8007138:	f204 4704 	addw	r7, r4, #1028	; 0x404
 800713c:	b280      	uxth	r0, r0
 800713e:	4438      	add	r0, r7
 8007140:	0112      	lsls	r2, r2, #4
 8007142:	2e00      	cmp	r6, #0
 8007144:	d136      	bne.n	80071b4 <USB_EPStartXfer+0x230>
 8007146:	5a87      	ldrh	r7, [r0, r2]
 8007148:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800714c:	043f      	lsls	r7, r7, #16
 800714e:	0c3f      	lsrs	r7, r7, #16
 8007150:	5287      	strh	r7, [r0, r2]
 8007152:	5a87      	ldrh	r7, [r0, r2]
 8007154:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8007158:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 800715c:	b2bf      	uxth	r7, r7
 800715e:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007160:	4620      	mov	r0, r4
 8007162:	892a      	ldrh	r2, [r5, #8]
 8007164:	f7ff fefe 	bl	8006f64 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007168:	6a2a      	ldr	r2, [r5, #32]
 800716a:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 800716c:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800716e:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8007170:	bf8a      	itet	hi
 8007172:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8007174:	2300      	movls	r3, #0
 8007176:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007178:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 800717a:	4431      	add	r1, r6
 800717c:	622b      	str	r3, [r5, #32]
 800717e:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007180:	b293      	uxth	r3, r2
 8007182:	2800      	cmp	r0, #0
 8007184:	d148      	bne.n	8007218 <USB_EPStartXfer+0x294>
 8007186:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 800718a:	782e      	ldrb	r6, [r5, #0]
 800718c:	b280      	uxth	r0, r0
 800718e:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8007192:	0136      	lsls	r6, r6, #4
 8007194:	4438      	add	r0, r7
 8007196:	bb5a      	cbnz	r2, 80071f0 <USB_EPStartXfer+0x26c>
 8007198:	5a32      	ldrh	r2, [r6, r0]
 800719a:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800719e:	0412      	lsls	r2, r2, #16
 80071a0:	0c12      	lsrs	r2, r2, #16
 80071a2:	5232      	strh	r2, [r6, r0]
 80071a4:	5a32      	ldrh	r2, [r6, r0]
 80071a6:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80071aa:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80071ae:	b292      	uxth	r2, r2
 80071b0:	5232      	strh	r2, [r6, r0]
 80071b2:	e026      	b.n	8007202 <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071b4:	2e3e      	cmp	r6, #62	; 0x3e
 80071b6:	d806      	bhi.n	80071c6 <USB_EPStartXfer+0x242>
 80071b8:	0877      	lsrs	r7, r6, #1
 80071ba:	f016 0f01 	tst.w	r6, #1
 80071be:	bf18      	it	ne
 80071c0:	3701      	addne	r7, #1
 80071c2:	02bf      	lsls	r7, r7, #10
 80071c4:	e7ca      	b.n	800715c <USB_EPStartXfer+0x1d8>
 80071c6:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 80071ca:	06f7      	lsls	r7, r6, #27
 80071cc:	4f61      	ldr	r7, [pc, #388]	; (8007354 <USB_EPStartXfer+0x3d0>)
 80071ce:	bf08      	it	eq
 80071d0:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80071d4:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 80071d8:	e7c0      	b.n	800715c <USB_EPStartXfer+0x1d8>
 80071da:	2801      	cmp	r0, #1
 80071dc:	d1c0      	bne.n	8007160 <USB_EPStartXfer+0x1dc>
 80071de:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80071e2:	0112      	lsls	r2, r2, #4
 80071e4:	b287      	uxth	r7, r0
 80071e6:	f204 4004 	addw	r0, r4, #1028	; 0x404
 80071ea:	4438      	add	r0, r7
 80071ec:	5283      	strh	r3, [r0, r2]
 80071ee:	e7b7      	b.n	8007160 <USB_EPStartXfer+0x1dc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071f0:	2a3e      	cmp	r2, #62	; 0x3e
 80071f2:	d808      	bhi.n	8007206 <USB_EPStartXfer+0x282>
 80071f4:	0857      	lsrs	r7, r2, #1
 80071f6:	07d2      	lsls	r2, r2, #31
 80071f8:	bf48      	it	mi
 80071fa:	3701      	addmi	r7, #1
 80071fc:	02bf      	lsls	r7, r7, #10
 80071fe:	b2bf      	uxth	r7, r7
 8007200:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007202:	896a      	ldrh	r2, [r5, #10]
 8007204:	e77b      	b.n	80070fe <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007206:	0957      	lsrs	r7, r2, #5
 8007208:	06d2      	lsls	r2, r2, #27
 800720a:	4a52      	ldr	r2, [pc, #328]	; (8007354 <USB_EPStartXfer+0x3d0>)
 800720c:	bf08      	it	eq
 800720e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007212:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007216:	e7ca      	b.n	80071ae <USB_EPStartXfer+0x22a>
 8007218:	2801      	cmp	r0, #1
 800721a:	d1f2      	bne.n	8007202 <USB_EPStartXfer+0x27e>
 800721c:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8007220:	7828      	ldrb	r0, [r5, #0]
 8007222:	b296      	uxth	r6, r2
 8007224:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8007228:	0100      	lsls	r0, r0, #4
 800722a:	4432      	add	r2, r6
 800722c:	5283      	strh	r3, [r0, r2]
 800722e:	e7e8      	b.n	8007202 <USB_EPStartXfer+0x27e>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007230:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8007234:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007238:	0412      	lsls	r2, r2, #16
 800723a:	0c12      	lsrs	r2, r2, #16
 800723c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007240:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007244:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007248:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800724c:	782e      	ldrb	r6, [r5, #0]
 800724e:	b297      	uxth	r7, r2
 8007250:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007254:	443a      	add	r2, r7
 8007256:	0136      	lsls	r6, r6, #4
 8007258:	b29b      	uxth	r3, r3
 800725a:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800725c:	892a      	ldrh	r2, [r5, #8]
 800725e:	e74f      	b.n	8007100 <USB_EPStartXfer+0x17c>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007260:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8007264:	b2b3      	uxth	r3, r6
 8007266:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800726a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800726e:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8007272:	b290      	uxth	r0, r2
 8007274:	bf15      	itete	ne
 8007276:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800727a:	f204 4204 	addweq	r2, r4, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800727e:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007280:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007282:	bf15      	itete	ne
 8007284:	53d3      	strhne	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007286:	53d3      	strheq	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8007288:	896a      	ldrhne	r2, [r5, #10]
          pmabuffer = ep->pmaaddr0;
 800728a:	892a      	ldrheq	r2, [r5, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800728c:	4620      	mov	r0, r4
 800728e:	f7ff fe69 	bl	8006f64 <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8007292:	786b      	ldrb	r3, [r5, #1]
 8007294:	782a      	ldrb	r2, [r5, #0]
 8007296:	b973      	cbnz	r3, 80072b6 <USB_EPStartXfer+0x332>
 8007298:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800729c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072b0:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80072b4:	e684      	b.n	8006fc0 <USB_EPStartXfer+0x3c>
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	f47f ae82 	bne.w	8006fc0 <USB_EPStartXfer+0x3c>
 80072bc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80072c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c8:	041b      	lsls	r3, r3, #16
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	e7ec      	b.n	80072b0 <USB_EPStartXfer+0x32c>
    if (ep->doublebuffer == 0U)
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	d13e      	bne.n	8007358 <USB_EPStartXfer+0x3d4>
      if (ep->xfer_len > ep->maxpacket)
 80072da:	69ab      	ldr	r3, [r5, #24]
 80072dc:	6929      	ldr	r1, [r5, #16]
 80072de:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80072e0:	bf84      	itt	hi
 80072e2:	1a5a      	subhi	r2, r3, r1
 80072e4:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072e6:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80072ea:	7828      	ldrb	r0, [r5, #0]
 80072ec:	61aa      	str	r2, [r5, #24]
 80072ee:	b28a      	uxth	r2, r1
 80072f0:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 80072f4:	0100      	lsls	r0, r0, #4
 80072f6:	4411      	add	r1, r2
 80072f8:	b96b      	cbnz	r3, 8007316 <USB_EPStartXfer+0x392>
 80072fa:	5a43      	ldrh	r3, [r0, r1]
 80072fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007300:	041b      	lsls	r3, r3, #16
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	5243      	strh	r3, [r0, r1]
 8007306:	5a43      	ldrh	r3, [r0, r1]
 8007308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800730c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007310:	b29b      	uxth	r3, r3
 8007312:	5243      	strh	r3, [r0, r1]
 8007314:	e008      	b.n	8007328 <USB_EPStartXfer+0x3a4>
 8007316:	2b3e      	cmp	r3, #62	; 0x3e
 8007318:	d812      	bhi.n	8007340 <USB_EPStartXfer+0x3bc>
 800731a:	085a      	lsrs	r2, r3, #1
 800731c:	07df      	lsls	r7, r3, #31
 800731e:	bf48      	it	mi
 8007320:	3201      	addmi	r2, #1
 8007322:	0292      	lsls	r2, r2, #10
 8007324:	b292      	uxth	r2, r2
 8007326:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007328:	782a      	ldrb	r2, [r5, #0]
 800732a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800732e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800733e:	e64a      	b.n	8006fd6 <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007340:	095a      	lsrs	r2, r3, #5
 8007342:	06de      	lsls	r6, r3, #27
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <USB_EPStartXfer+0x3d0>)
 8007346:	bf08      	it	eq
 8007348:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800734c:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007350:	e7de      	b.n	8007310 <USB_EPStartXfer+0x38c>
 8007352:	bf00      	nop
 8007354:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8007358:	78eb      	ldrb	r3, [r5, #3]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d17e      	bne.n	800745c <USB_EPStartXfer+0x4d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800735e:	b9b9      	cbnz	r1, 8007390 <USB_EPStartXfer+0x40c>
 8007360:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8007364:	7829      	ldrb	r1, [r5, #0]
 8007366:	b293      	uxth	r3, r2
 8007368:	f200 4204 	addw	r2, r0, #1028	; 0x404
 800736c:	6928      	ldr	r0, [r5, #16]
 800736e:	0109      	lsls	r1, r1, #4
 8007370:	441a      	add	r2, r3
 8007372:	2800      	cmp	r0, #0
 8007374:	d144      	bne.n	8007400 <USB_EPStartXfer+0x47c>
 8007376:	5a8b      	ldrh	r3, [r1, r2]
 8007378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800737c:	041b      	lsls	r3, r3, #16
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	528b      	strh	r3, [r1, r2]
 8007382:	5a8b      	ldrh	r3, [r1, r2]
 8007384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800738c:	b29b      	uxth	r3, r3
 800738e:	528b      	strh	r3, [r1, r2]
 8007390:	786a      	ldrb	r2, [r5, #1]
 8007392:	782b      	ldrb	r3, [r5, #0]
 8007394:	2a00      	cmp	r2, #0
 8007396:	d155      	bne.n	8007444 <USB_EPStartXfer+0x4c0>
 8007398:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800739c:	6928      	ldr	r0, [r5, #16]
 800739e:	b28a      	uxth	r2, r1
 80073a0:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 80073a4:	4411      	add	r1, r2
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d13a      	bne.n	8007422 <USB_EPStartXfer+0x49e>
 80073ac:	5aca      	ldrh	r2, [r1, r3]
 80073ae:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80073b2:	0412      	lsls	r2, r2, #16
 80073b4:	0c12      	lsrs	r2, r2, #16
 80073b6:	52ca      	strh	r2, [r1, r3]
 80073b8:	5aca      	ldrh	r2, [r1, r3]
 80073ba:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80073be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80073c2:	b292      	uxth	r2, r2
 80073c4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80073c6:	69eb      	ldr	r3, [r5, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0ad      	beq.n	8007328 <USB_EPStartXfer+0x3a4>
 80073cc:	f244 0340 	movw	r3, #16448	; 0x4040
 80073d0:	782a      	ldrb	r2, [r5, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073d2:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d6:	ea03 0001 	and.w	r0, r3, r1
 80073da:	438b      	bics	r3, r1
 80073dc:	d001      	beq.n	80073e2 <USB_EPStartXfer+0x45e>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d1a2      	bne.n	8007328 <USB_EPStartXfer+0x3a4>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80073e2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073fa:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80073fe:	e793      	b.n	8007328 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007400:	283e      	cmp	r0, #62	; 0x3e
 8007402:	d805      	bhi.n	8007410 <USB_EPStartXfer+0x48c>
 8007404:	0843      	lsrs	r3, r0, #1
 8007406:	07c0      	lsls	r0, r0, #31
 8007408:	bf48      	it	mi
 800740a:	3301      	addmi	r3, #1
 800740c:	029b      	lsls	r3, r3, #10
 800740e:	e7bd      	b.n	800738c <USB_EPStartXfer+0x408>
 8007410:	0946      	lsrs	r6, r0, #5
 8007412:	4b4a      	ldr	r3, [pc, #296]	; (800753c <USB_EPStartXfer+0x5b8>)
 8007414:	06c7      	lsls	r7, r0, #27
 8007416:	bf08      	it	eq
 8007418:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800741c:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8007420:	e7b4      	b.n	800738c <USB_EPStartXfer+0x408>
 8007422:	283e      	cmp	r0, #62	; 0x3e
 8007424:	d805      	bhi.n	8007432 <USB_EPStartXfer+0x4ae>
 8007426:	0842      	lsrs	r2, r0, #1
 8007428:	07c0      	lsls	r0, r0, #31
 800742a:	bf48      	it	mi
 800742c:	3201      	addmi	r2, #1
 800742e:	0292      	lsls	r2, r2, #10
 8007430:	e7c7      	b.n	80073c2 <USB_EPStartXfer+0x43e>
 8007432:	0946      	lsrs	r6, r0, #5
 8007434:	4a41      	ldr	r2, [pc, #260]	; (800753c <USB_EPStartXfer+0x5b8>)
 8007436:	06c7      	lsls	r7, r0, #27
 8007438:	bf08      	it	eq
 800743a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800743e:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8007442:	e7be      	b.n	80073c2 <USB_EPStartXfer+0x43e>
 8007444:	2a01      	cmp	r2, #1
 8007446:	d1be      	bne.n	80073c6 <USB_EPStartXfer+0x442>
 8007448:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	b291      	uxth	r1, r2
 8007450:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8007454:	440a      	add	r2, r1
 8007456:	8a29      	ldrh	r1, [r5, #16]
 8007458:	52d1      	strh	r1, [r2, r3]
 800745a:	e7b4      	b.n	80073c6 <USB_EPStartXfer+0x442>
      else if (ep->type == EP_TYPE_ISOC)
 800745c:	2b01      	cmp	r3, #1
 800745e:	d16a      	bne.n	8007536 <USB_EPStartXfer+0x5b2>
        if (ep->xfer_len > ep->maxpacket)
 8007460:	69ab      	ldr	r3, [r5, #24]
 8007462:	692a      	ldr	r2, [r5, #16]
 8007464:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 8007466:	bf94      	ite	ls
 8007468:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 800746a:	1a98      	subhi	r0, r3, r2
 800746c:	61a8      	str	r0, [r5, #24]
 800746e:	bf88      	it	hi
 8007470:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007472:	b9a9      	cbnz	r1, 80074a0 <USB_EPStartXfer+0x51c>
 8007474:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8007478:	7828      	ldrb	r0, [r5, #0]
 800747a:	b28a      	uxth	r2, r1
 800747c:	f204 4104 	addw	r1, r4, #1028	; 0x404
 8007480:	0100      	lsls	r0, r0, #4
 8007482:	4411      	add	r1, r2
 8007484:	bb33      	cbnz	r3, 80074d4 <USB_EPStartXfer+0x550>
 8007486:	5a42      	ldrh	r2, [r0, r1]
 8007488:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800748c:	0412      	lsls	r2, r2, #16
 800748e:	0c12      	lsrs	r2, r2, #16
 8007490:	5242      	strh	r2, [r0, r1]
 8007492:	5a42      	ldrh	r2, [r0, r1]
 8007494:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007498:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800749c:	b292      	uxth	r2, r2
 800749e:	5242      	strh	r2, [r0, r1]
 80074a0:	7869      	ldrb	r1, [r5, #1]
 80074a2:	782a      	ldrb	r2, [r5, #0]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	d139      	bne.n	800751c <USB_EPStartXfer+0x598>
 80074a8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 80074ac:	0112      	lsls	r2, r2, #4
 80074ae:	b281      	uxth	r1, r0
 80074b0:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 80074b4:	4408      	add	r0, r1
 80074b6:	b9f3      	cbnz	r3, 80074f6 <USB_EPStartXfer+0x572>
 80074b8:	5a83      	ldrh	r3, [r0, r2]
 80074ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	5283      	strh	r3, [r0, r2]
 80074c4:	5a83      	ldrh	r3, [r0, r2]
 80074c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	5283      	strh	r3, [r0, r2]
 80074d2:	e729      	b.n	8007328 <USB_EPStartXfer+0x3a4>
 80074d4:	2b3e      	cmp	r3, #62	; 0x3e
 80074d6:	d805      	bhi.n	80074e4 <USB_EPStartXfer+0x560>
 80074d8:	085a      	lsrs	r2, r3, #1
 80074da:	07de      	lsls	r6, r3, #31
 80074dc:	bf48      	it	mi
 80074de:	3201      	addmi	r2, #1
 80074e0:	0292      	lsls	r2, r2, #10
 80074e2:	e7db      	b.n	800749c <USB_EPStartXfer+0x518>
 80074e4:	095e      	lsrs	r6, r3, #5
 80074e6:	4a15      	ldr	r2, [pc, #84]	; (800753c <USB_EPStartXfer+0x5b8>)
 80074e8:	06df      	lsls	r7, r3, #27
 80074ea:	bf08      	it	eq
 80074ec:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80074f0:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80074f4:	e7d2      	b.n	800749c <USB_EPStartXfer+0x518>
 80074f6:	2b3e      	cmp	r3, #62	; 0x3e
 80074f8:	d807      	bhi.n	800750a <USB_EPStartXfer+0x586>
 80074fa:	0859      	lsrs	r1, r3, #1
 80074fc:	07de      	lsls	r6, r3, #31
 80074fe:	bf48      	it	mi
 8007500:	3101      	addmi	r1, #1
 8007502:	0289      	lsls	r1, r1, #10
 8007504:	b289      	uxth	r1, r1
 8007506:	5281      	strh	r1, [r0, r2]
 8007508:	e70e      	b.n	8007328 <USB_EPStartXfer+0x3a4>
 800750a:	0959      	lsrs	r1, r3, #5
 800750c:	06db      	lsls	r3, r3, #27
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <USB_EPStartXfer+0x5b8>)
 8007510:	bf08      	it	eq
 8007512:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8007516:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800751a:	e7d8      	b.n	80074ce <USB_EPStartXfer+0x54a>
 800751c:	2901      	cmp	r1, #1
 800751e:	f47f af03 	bne.w	8007328 <USB_EPStartXfer+0x3a4>
 8007522:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8007526:	0112      	lsls	r2, r2, #4
 8007528:	b288      	uxth	r0, r1
 800752a:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800752e:	4401      	add	r1, r0
 8007530:	b29b      	uxth	r3, r3
 8007532:	528b      	strh	r3, [r1, r2]
 8007534:	e6f8      	b.n	8007328 <USB_EPStartXfer+0x3a4>
        return HAL_ERROR;
 8007536:	2001      	movs	r0, #1
 8007538:	e554      	b.n	8006fe4 <USB_EPStartXfer+0x60>
 800753a:	bf00      	nop
 800753c:	ffff8000 	.word	0xffff8000

08007540 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007540:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8007544:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 800754a:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 800754c:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800754e:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8007550:	462e      	mov	r6, r5
 8007552:	3402      	adds	r4, #2
 8007554:	b936      	cbnz	r6, 8007564 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007556:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8007558:	bf44      	itt	mi
 800755a:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800755e:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8007562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8007564:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8007568:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 800756a:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800756c:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007570:	0a00      	lsrs	r0, r0, #8
 8007572:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 8007576:	e7ec      	b.n	8007552 <USB_ReadPMA+0x12>

08007578 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007578:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 800757c:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800757e:	b16b      	cbz	r3, 800759c <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007580:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007584:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007588:	28ff      	cmp	r0, #255	; 0xff
 800758a:	d007      	beq.n	800759c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	4621      	mov	r1, r4
 8007590:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8007594:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8007596:	23ff      	movs	r3, #255	; 0xff
 8007598:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 800759c:	2000      	movs	r0, #0
 800759e:	bd10      	pop	{r4, pc}

080075a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80075a0:	2343      	movs	r3, #67	; 0x43
 80075a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80075a4:	4800      	ldr	r0, [pc, #0]	; (80075a8 <USBD_CDC_GetFSCfgDesc+0x8>)
 80075a6:	4770      	bx	lr
 80075a8:	20000044 	.word	0x20000044

080075ac <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80075ac:	2343      	movs	r3, #67	; 0x43
 80075ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80075b0:	4800      	ldr	r0, [pc, #0]	; (80075b4 <USBD_CDC_GetHSCfgDesc+0x8>)
 80075b2:	4770      	bx	lr
 80075b4:	20000088 	.word	0x20000088

080075b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80075b8:	2343      	movs	r3, #67	; 0x43
 80075ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80075bc:	4800      	ldr	r0, [pc, #0]	; (80075c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80075be:	4770      	bx	lr
 80075c0:	200000d8 	.word	0x200000d8

080075c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80075c4:	230a      	movs	r3, #10
 80075c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80075c8:	4800      	ldr	r0, [pc, #0]	; (80075cc <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80075ca:	4770      	bx	lr
 80075cc:	200000cc 	.word	0x200000cc

080075d0 <USBD_CDC_DataOut>:
{
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80075d4:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075d8:	f002 fbbe 	bl	8009d58 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80075dc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80075e0:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80075e4:	b14b      	cbz	r3, 80075fa <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80075e6:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80075ea:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80075f4:	4798      	blx	r3
    return USBD_OK;
 80075f6:	2000      	movs	r0, #0
}
 80075f8:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80075fa:	2002      	movs	r0, #2
 80075fc:	e7fc      	b.n	80075f8 <USBD_CDC_DataOut+0x28>

080075fe <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075fe:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8007602:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 8007604:	b1d2      	cbz	r2, 800763c <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007606:	2714      	movs	r7, #20
 8007608:	fb07 0701 	mla	r7, r7, r1, r0
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	b18b      	cbz	r3, 8007634 <USBD_CDC_DataIn+0x36>
 8007610:	2628      	movs	r6, #40	; 0x28
 8007612:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8007616:	fb06 4501 	mla	r5, r6, r1, r4
 800761a:	6bad      	ldr	r5, [r5, #56]	; 0x38
 800761c:	fbb3 f4f5 	udiv	r4, r3, r5
 8007620:	fb05 3414 	mls	r4, r5, r4, r3
 8007624:	b934      	cbnz	r4, 8007634 <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007626:	4623      	mov	r3, r4
 8007628:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 800762a:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800762c:	f002 fb78 	bl	8009d20 <USBD_LL_Transmit>
    return USBD_OK;
 8007630:	4620      	mov	r0, r4
}
 8007632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8007634:	2000      	movs	r0, #0
 8007636:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 800763a:	e7fa      	b.n	8007632 <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 800763c:	2002      	movs	r0, #2
 800763e:	e7f8      	b.n	8007632 <USBD_CDC_DataIn+0x34>

08007640 <USBD_CDC_Setup>:
{
 8007640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8007644:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007648:	780a      	ldrb	r2, [r1, #0]
{
 800764a:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800764c:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8007650:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007652:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8007656:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800765a:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800765e:	d028      	beq.n	80076b2 <USBD_CDC_Setup+0x72>
 8007660:	2c20      	cmp	r4, #32
 8007662:	d142      	bne.n	80076ea <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 8007664:	88cc      	ldrh	r4, [r1, #6]
 8007666:	784b      	ldrb	r3, [r1, #1]
 8007668:	b1e4      	cbz	r4, 80076a4 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800766a:	0612      	lsls	r2, r2, #24
 800766c:	d511      	bpl.n	8007692 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800766e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007672:	4639      	mov	r1, r7
 8007674:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	4622      	mov	r2, r4
 800767c:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800767e:	4639      	mov	r1, r7
 8007680:	4628      	mov	r0, r5
 8007682:	88f2      	ldrh	r2, [r6, #6]
 8007684:	f000 fc4b 	bl	8007f1e <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8007688:	4644      	mov	r4, r8
}
 800768a:	4620      	mov	r0, r4
 800768c:	b003      	add	sp, #12
 800768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007692:	4622      	mov	r2, r4
 8007694:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 8007696:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800769a:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800769e:	f000 fc53 	bl	8007f48 <USBD_CtlPrepareRx>
 80076a2:	e7f1      	b.n	8007688 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076a4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80076a8:	4618      	mov	r0, r3
 80076aa:	6895      	ldr	r5, [r2, #8]
 80076ac:	4622      	mov	r2, r4
 80076ae:	47a8      	blx	r5
 80076b0:	e7eb      	b.n	800768a <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80076b2:	784b      	ldrb	r3, [r1, #1]
 80076b4:	2b0a      	cmp	r3, #10
 80076b6:	d00c      	beq.n	80076d2 <USBD_CDC_Setup+0x92>
 80076b8:	2b0b      	cmp	r3, #11
 80076ba:	d012      	beq.n	80076e2 <USBD_CDC_Setup+0xa2>
 80076bc:	b9ab      	cbnz	r3, 80076ea <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d111      	bne.n	80076ea <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80076c6:	2202      	movs	r2, #2
 80076c8:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076cc:	f000 fc27 	bl	8007f1e <USBD_CtlSendData>
 80076d0:	e7db      	b.n	800768a <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d107      	bne.n	80076ea <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80076da:	2201      	movs	r2, #1
 80076dc:	f10d 0105 	add.w	r1, sp, #5
 80076e0:	e7f4      	b.n	80076cc <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80076e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d0cf      	beq.n	800768a <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	f000 fbef 	bl	8007ed0 <USBD_CtlError>
          ret = USBD_FAIL;
 80076f2:	2402      	movs	r4, #2
          break;
 80076f4:	e7c9      	b.n	800768a <USBD_CDC_Setup+0x4a>

080076f6 <USBD_CDC_DeInit>:
{
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076fa:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80076fc:	2181      	movs	r1, #129	; 0x81
 80076fe:	f002 fac5 	bl	8009c8c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007702:	2101      	movs	r1, #1
 8007704:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007706:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007708:	f002 fac0 	bl	8009c8c <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800770c:	2182      	movs	r1, #130	; 0x82
 800770e:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007710:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007714:	f002 faba 	bl	8009c8c <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8007718:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800771c:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 800771e:	b14b      	cbz	r3, 8007734 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007720:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007728:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 800772c:	f002 fb1c 	bl	8009d68 <USBD_static_free>
    pdev->pClassData = NULL;
 8007730:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8007734:	2000      	movs	r0, #0
 8007736:	bd38      	pop	{r3, r4, r5, pc}

08007738 <USBD_CDC_Init>:
{
 8007738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800773c:	7c03      	ldrb	r3, [r0, #16]
{
 800773e:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007740:	bbbb      	cbnz	r3, 80077b2 <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007746:	2202      	movs	r2, #2
 8007748:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800774a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800774c:	f002 fa8e 	bl	8009c6c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007750:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007754:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007756:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007758:	4629      	mov	r1, r5
 800775a:	2202      	movs	r2, #2
 800775c:	4620      	mov	r0, r4
 800775e:	f002 fa85 	bl	8009c6c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007762:	2308      	movs	r3, #8
 8007764:	2203      	movs	r2, #3
 8007766:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007768:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800776c:	4620      	mov	r0, r4
 800776e:	f002 fa7d 	bl	8009c6c <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007772:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007776:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007778:	f002 faf2 	bl	8009d60 <USBD_static_malloc>
 800777c:	4605      	mov	r5, r0
 800777e:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8007782:	b340      	cbz	r0, 80077d6 <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 8007784:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007788:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4798      	blx	r3
    hcdc->TxState = 0U;
 8007790:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8007794:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	7c26      	ldrb	r6, [r4, #16]
 800779a:	b99e      	cbnz	r6, 80077c4 <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800779c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077a0:	4639      	mov	r1, r7
 80077a2:	4620      	mov	r0, r4
 80077a4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80077a8:	f002 fac8 	bl	8009d3c <USBD_LL_PrepareReceive>
}
 80077ac:	4630      	mov	r0, r6
 80077ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077b2:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077b4:	2340      	movs	r3, #64	; 0x40
 80077b6:	2202      	movs	r2, #2
 80077b8:	2181      	movs	r1, #129	; 0x81
 80077ba:	f002 fa57 	bl	8009c6c <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077be:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80077c0:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80077c2:	e7c8      	b.n	8007756 <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	4639      	mov	r1, r7
 80077c8:	4620      	mov	r0, r4
 80077ca:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80077ce:	f002 fab5 	bl	8009d3c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80077d2:	4646      	mov	r6, r8
 80077d4:	e7ea      	b.n	80077ac <USBD_CDC_Init+0x74>
    ret = 1U;
 80077d6:	463e      	mov	r6, r7
 80077d8:	e7e8      	b.n	80077ac <USBD_CDC_Init+0x74>

080077da <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80077da:	b119      	cbz	r1, 80077e4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80077dc:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80077e0:	2000      	movs	r0, #0
 80077e2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80077e4:	2002      	movs	r0, #2
  }

  return ret;
}
 80077e6:	4770      	bx	lr

080077e8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80077ec:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80077ee:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80077f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80077f6:	4770      	bx	lr

080077f8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80077f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80077fc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80077fe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8007802:	4770      	bx	lr

08007804 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007804:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8007808:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 800780a:	b182      	cbz	r2, 800782e <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 800780c:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 8007810:	2301      	movs	r3, #1
 8007812:	b974      	cbnz	r4, 8007832 <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007814:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007818:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800781c:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800781e:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007820:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8007824:	b29b      	uxth	r3, r3
 8007826:	f002 fa7b 	bl	8009d20 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 800782a:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800782c:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 800782e:	2002      	movs	r0, #2
 8007830:	e7fc      	b.n	800782c <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 8007832:	4618      	mov	r0, r3
 8007834:	e7fa      	b.n	800782c <USBD_CDC_TransmitPacket+0x28>

08007836 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007836:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 800783a:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800783c:	b182      	cbz	r2, 8007860 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800783e:	7c04      	ldrb	r4, [r0, #16]
 8007840:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8007844:	b934      	cbnz	r4, 8007854 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800784a:	2101      	movs	r1, #1
 800784c:	f002 fa76 	bl	8009d3c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007850:	4620      	mov	r0, r4
 8007852:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	2101      	movs	r1, #1
 8007858:	f002 fa70 	bl	8009d3c <USBD_LL_PrepareReceive>
    return USBD_OK;
 800785c:	2400      	movs	r4, #0
 800785e:	e7f7      	b.n	8007850 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8007860:	2402      	movs	r4, #2
 8007862:	e7f5      	b.n	8007850 <USBD_CDC_ReceivePacket+0x1a>

08007864 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007864:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007866:	b180      	cbz	r0, 800788a <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007868:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800786c:	b113      	cbz	r3, 8007874 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007874:	b109      	cbz	r1, 800787a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007876:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787a:	2301      	movs	r3, #1
  pdev->id = id;
 800787c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 800787e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007882:	f002 f9a3 	bl	8009bcc <USBD_LL_Init>

  return USBD_OK;
 8007886:	2000      	movs	r0, #0
}
 8007888:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800788a:	2002      	movs	r0, #2
 800788c:	e7fc      	b.n	8007888 <USBD_Init+0x24>

0800788e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 800788e:	b119      	cbz	r1, 8007898 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007890:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8007894:	2000      	movs	r0, #0
 8007896:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007898:	2002      	movs	r0, #2
  }

  return status;
}
 800789a:	4770      	bx	lr

0800789c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800789c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800789e:	f002 f9d7 	bl	8009c50 <USBD_LL_Start>

  return USBD_OK;
}
 80078a2:	2000      	movs	r0, #0
 80078a4:	bd08      	pop	{r3, pc}

080078a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078a6:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80078a8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078ac:	b90b      	cbnz	r3, 80078b2 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 80078ae:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 80078b0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4798      	blx	r3
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d0fa      	beq.n	80078b0 <USBD_SetClassConfig+0xa>
 80078ba:	e7f8      	b.n	80078ae <USBD_SetClassConfig+0x8>

080078bc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80078bc:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80078be:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	4798      	blx	r3

  return USBD_OK;
}
 80078c6:	2000      	movs	r0, #0
 80078c8:	bd08      	pop	{r3, pc}

080078ca <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078ca:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078cc:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 80078d0:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 fae8 	bl	8007ea8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80078d8:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80078da:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80078de:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80078e2:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80078e6:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80078ea:	f001 031f 	and.w	r3, r1, #31
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d008      	beq.n	8007904 <USBD_LL_SetupStage+0x3a>
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d00b      	beq.n	800790e <USBD_LL_SetupStage+0x44>
 80078f6:	b97b      	cbnz	r3, 8007918 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80078f8:	4629      	mov	r1, r5
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 f8fc 	bl	8007af8 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8007900:	2000      	movs	r0, #0
 8007902:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8007904:	4629      	mov	r1, r5
 8007906:	4620      	mov	r0, r4
 8007908:	f000 fa20 	bl	8007d4c <USBD_StdItfReq>
      break;
 800790c:	e7f8      	b.n	8007900 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 800790e:	4629      	mov	r1, r5
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fa3f 	bl	8007d94 <USBD_StdEPReq>
      break;
 8007916:	e7f3      	b.n	8007900 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007918:	4620      	mov	r0, r4
 800791a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800791e:	f002 f9c3 	bl	8009ca8 <USBD_LL_StallEP>
      break;
 8007922:	e7ed      	b.n	8007900 <USBD_LL_SetupStage+0x36>

08007924 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007924:	b570      	push	{r4, r5, r6, lr}
 8007926:	4604      	mov	r4, r0
 8007928:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800792a:	460d      	mov	r5, r1
 800792c:	bb39      	cbnz	r1, 800797e <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800792e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007932:	2b03      	cmp	r3, #3
 8007934:	d11c      	bne.n	8007970 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007936:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 800793a:	4291      	cmp	r1, r2
 800793c:	d90b      	bls.n	8007956 <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 800793e:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8007940:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8007942:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8007946:	bf8c      	ite	hi
 8007948:	b28a      	uxthhi	r2, r1
 800794a:	b292      	uxthls	r2, r2
 800794c:	4631      	mov	r1, r6
 800794e:	f000 fb08 	bl	8007f62 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8007952:	4628      	mov	r0, r5
 8007954:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007956:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	b123      	cbz	r3, 8007968 <USBD_LL_DataOutStage+0x44>
 800795e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007962:	2a03      	cmp	r2, #3
 8007964:	d100      	bne.n	8007968 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 8007966:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007968:	4620      	mov	r0, r4
 800796a:	f000 fb02 	bl	8007f72 <USBD_CtlSendStatus>
 800796e:	e7f0      	b.n	8007952 <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007970:	2b05      	cmp	r3, #5
 8007972:	d1ee      	bne.n	8007952 <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8007974:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007978:	f002 f996 	bl	8009ca8 <USBD_LL_StallEP>
 800797c:	e7e9      	b.n	8007952 <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 800797e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	b133      	cbz	r3, 8007994 <USBD_LL_DataOutStage+0x70>
 8007986:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800798a:	2a03      	cmp	r2, #3
 800798c:	d102      	bne.n	8007994 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 800798e:	4798      	blx	r3
  return USBD_OK;
 8007990:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8007992:	e7de      	b.n	8007952 <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 8007994:	2502      	movs	r5, #2
 8007996:	e7dc      	b.n	8007952 <USBD_LL_DataOutStage+0x2e>

08007998 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800799e:	460d      	mov	r5, r1
 80079a0:	2900      	cmp	r1, #0
 80079a2:	d147      	bne.n	8007a34 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079a4:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d13c      	bne.n	8007a26 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 80079ac:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 80079b0:	429e      	cmp	r6, r3
 80079b2:	d914      	bls.n	80079de <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80079b4:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079b6:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 80079b8:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f000 fabc 	bl	8007f38 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079c0:	462b      	mov	r3, r5
 80079c2:	462a      	mov	r2, r5
 80079c4:	4629      	mov	r1, r5
 80079c6:	4620      	mov	r0, r4
 80079c8:	f002 f9b8 	bl	8009d3c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079cc:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d102      	bne.n	80079da <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80079da:	4628      	mov	r0, r5
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80079de:	69c2      	ldr	r2, [r0, #28]
 80079e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80079e4:	fb03 2616 	mls	r6, r3, r6, r2
 80079e8:	b95e      	cbnz	r6, 8007a02 <USBD_LL_DataInStage+0x6a>
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d809      	bhi.n	8007a02 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80079ee:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d205      	bcs.n	8007a02 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80079f6:	460a      	mov	r2, r1
 80079f8:	f000 fa9e 	bl	8007f38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80079fc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8007a00:	e7de      	b.n	80079c0 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007a02:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	b12b      	cbz	r3, 8007a16 <USBD_LL_DataInStage+0x7e>
 8007a0a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8007a0e:	2a03      	cmp	r2, #3
 8007a10:	d101      	bne.n	8007a16 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8007a12:	4620      	mov	r0, r4
 8007a14:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f002 f945 	bl	8009ca8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f000 fab2 	bl	8007f88 <USBD_CtlReceiveStatus>
 8007a24:	e7d2      	b.n	80079cc <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007a26:	f033 0304 	bics.w	r3, r3, #4
 8007a2a:	d1cf      	bne.n	80079cc <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8007a2c:	2180      	movs	r1, #128	; 0x80
 8007a2e:	f002 f93b 	bl	8009ca8 <USBD_LL_StallEP>
 8007a32:	e7cb      	b.n	80079cc <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8007a34:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	b133      	cbz	r3, 8007a4a <USBD_LL_DataInStage+0xb2>
 8007a3c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007a40:	2a03      	cmp	r2, #3
 8007a42:	d102      	bne.n	8007a4a <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8007a44:	4798      	blx	r3
  return USBD_OK;
 8007a46:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007a48:	e7c7      	b.n	80079da <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8007a4a:	2502      	movs	r5, #2
 8007a4c:	e7c5      	b.n	80079da <USBD_LL_DataInStage+0x42>

08007a4e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a4e:	2200      	movs	r2, #0
{
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a54:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a56:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a58:	4611      	mov	r1, r2
 8007a5a:	2340      	movs	r3, #64	; 0x40
 8007a5c:	f002 f906 	bl	8009c6c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a60:	4633      	mov	r3, r6
 8007a62:	2180      	movs	r1, #128	; 0x80
 8007a64:	2200      	movs	r2, #0
 8007a66:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a68:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a6c:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a70:	f002 f8fc 	bl	8009c6c <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a74:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8007a76:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a7a:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a7c:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a7e:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a82:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a86:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a88:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8007a8c:	b123      	cbz	r3, 8007a98 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a8e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007a92:	4620      	mov	r0, r4
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007a98:	2000      	movs	r0, #0
 8007a9a:	bd70      	pop	{r4, r5, r6, pc}

08007a9c <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007a9c:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	4770      	bx	lr

08007aa2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007aa2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007aa6:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007aaa:	2304      	movs	r3, #4
 8007aac:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr

08007ab4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ab4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007ab8:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007aba:	bf04      	itt	eq
 8007abc:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8007ac0:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	4770      	bx	lr

08007ac8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ac8:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aca:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007ace:	2a03      	cmp	r2, #3
 8007ad0:	d104      	bne.n	8007adc <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8007ad2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	b103      	cbz	r3, 8007adc <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007ada:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8007adc:	2000      	movs	r0, #0
 8007ade:	bd08      	pop	{r3, pc}

08007ae0 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8007ae4:	2180      	movs	r1, #128	; 0x80
 8007ae6:	f002 f8df 	bl	8009ca8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007aea:	4620      	mov	r0, r4
}
 8007aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007af0:	2100      	movs	r1, #0
 8007af2:	f002 b8d9 	b.w	8009ca8 <USBD_LL_StallEP>
	...

08007af8 <USBD_StdDevReq>:
{
 8007af8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007afa:	780b      	ldrb	r3, [r1, #0]
 8007afc:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b02:	2b20      	cmp	r3, #32
{
 8007b04:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b06:	d012      	beq.n	8007b2e <USBD_StdDevReq+0x36>
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d010      	beq.n	8007b2e <USBD_StdDevReq+0x36>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d151      	bne.n	8007bb4 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8007b10:	784b      	ldrb	r3, [r1, #1]
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	d84e      	bhi.n	8007bb4 <USBD_StdDevReq+0xbc>
 8007b16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007b1a:	00ee      	.short	0x00ee
 8007b1c:	004d010a 	.word	0x004d010a
 8007b20:	004d0103 	.word	0x004d0103
 8007b24:	00130087 	.word	0x00130087
 8007b28:	00d6004d 	.word	0x00d6004d
 8007b2c:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8007b2e:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007b32:	4629      	mov	r1, r5
 8007b34:	4620      	mov	r0, r4
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4798      	blx	r3
}
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	b003      	add	sp, #12
 8007b3e:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007b46:	884b      	ldrh	r3, [r1, #2]
 8007b48:	0a1a      	lsrs	r2, r3, #8
 8007b4a:	3a01      	subs	r2, #1
 8007b4c:	2a06      	cmp	r2, #6
 8007b4e:	d831      	bhi.n	8007bb4 <USBD_StdDevReq+0xbc>
 8007b50:	e8df f002 	tbb	[pc, r2]
 8007b54:	30231604 	.word	0x30231604
 8007b58:	4830      	.short	0x4830
 8007b5a:	52          	.byte	0x52
 8007b5b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b5c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007b60:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b62:	7c20      	ldrb	r0, [r4, #16]
 8007b64:	f10d 0106 	add.w	r1, sp, #6
 8007b68:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007b6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007b6e:	2a00      	cmp	r2, #0
 8007b70:	d056      	beq.n	8007c20 <USBD_StdDevReq+0x128>
 8007b72:	88eb      	ldrh	r3, [r5, #6]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d14a      	bne.n	8007c0e <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 f9fa 	bl	8007f72 <USBD_CtlSendStatus>
 8007b7e:	e7dc      	b.n	8007b3a <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b80:	7c02      	ldrb	r2, [r0, #16]
 8007b82:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007b86:	b932      	cbnz	r2, 8007b96 <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b8a:	f10d 0006 	add.w	r0, sp, #6
 8007b8e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b90:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b92:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007b94:	e7e9      	b.n	8007b6a <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	e7f7      	b.n	8007b8a <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b05      	cmp	r3, #5
 8007b9e:	d809      	bhi.n	8007bb4 <USBD_StdDevReq+0xbc>
 8007ba0:	e8df f003 	tbb	[pc, r3]
 8007ba4:	14100c03 	.word	0x14100c03
 8007ba8:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007baa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bae:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1d6      	bne.n	8007b62 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	f7ff ff93 	bl	8007ae0 <USBD_CtlError.constprop.0>
        break;
 8007bba:	e7be      	b.n	8007b3a <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bbc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	e7f5      	b.n	8007bb0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bc4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	e7f1      	b.n	8007bb0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bcc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	e7ed      	b.n	8007bb0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bd4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	e7e9      	b.n	8007bb0 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bdc:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	e7e5      	b.n	8007bb0 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be4:	7c03      	ldrb	r3, [r0, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1e4      	bne.n	8007bb4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007bee:	f10d 0006 	add.w	r0, sp, #6
 8007bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf4:	4798      	blx	r3
  if (err != 0U)
 8007bf6:	e7b8      	b.n	8007b6a <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf8:	7c03      	ldrb	r3, [r0, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1da      	bne.n	8007bb4 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bfe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007c02:	f10d 0006 	add.w	r0, sp, #6
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c0a:	2307      	movs	r3, #7
 8007c0c:	e7c1      	b.n	8007b92 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	bf28      	it	cs
 8007c12:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c14:	4601      	mov	r1, r0
 8007c16:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8007c18:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c1c:	f000 f97f 	bl	8007f1e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007c20:	88eb      	ldrh	r3, [r5, #6]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d189      	bne.n	8007b3a <USBD_StdDevReq+0x42>
 8007c26:	e7a7      	b.n	8007b78 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c28:	888b      	ldrh	r3, [r1, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1c2      	bne.n	8007bb4 <USBD_StdDevReq+0xbc>
 8007c2e:	88cb      	ldrh	r3, [r1, #6]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1bf      	bne.n	8007bb4 <USBD_StdDevReq+0xbc>
 8007c34:	884d      	ldrh	r5, [r1, #2]
 8007c36:	2d7f      	cmp	r5, #127	; 0x7f
 8007c38:	d8bc      	bhi.n	8007bb4 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d0b8      	beq.n	8007bb4 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c42:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8007c44:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c48:	f002 f85c 	bl	8009d04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f990 	bl	8007f72 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007c52:	b11d      	cbz	r5, 8007c5c <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c54:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c56:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007c5a:	e76e      	b.n	8007b3a <USBD_StdDevReq+0x42>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e7fa      	b.n	8007c56 <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8007c60:	7889      	ldrb	r1, [r1, #2]
 8007c62:	4d39      	ldr	r5, [pc, #228]	; (8007d48 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c64:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007c66:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c68:	d8a4      	bhi.n	8007bb4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007c6a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d008      	beq.n	8007c84 <USBD_StdDevReq+0x18c>
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d015      	beq.n	8007ca2 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 8007c76:	f7ff ff33 	bl	8007ae0 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	7829      	ldrb	r1, [r5, #0]
 8007c7e:	f7ff fe1d 	bl	80078bc <USBD_ClrClassConfig>
        break;
 8007c82:	e75a      	b.n	8007b3a <USBD_StdDevReq+0x42>
        if (cfgidx)
 8007c84:	2900      	cmp	r1, #0
 8007c86:	f43f af77 	beq.w	8007b78 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8007c8a:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c8c:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007c8e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c90:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff fe06 	bl	80078a6 <USBD_SetClassConfig>
 8007c9a:	2802      	cmp	r0, #2
 8007c9c:	f47f af6c 	bne.w	8007b78 <USBD_StdDevReq+0x80>
 8007ca0:	e788      	b.n	8007bb4 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 8007ca2:	b931      	cbnz	r1, 8007cb2 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca4:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8007ca6:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ca8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007cac:	f7ff fe06 	bl	80078bc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007cb0:	e762      	b.n	8007b78 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 8007cb2:	6841      	ldr	r1, [r0, #4]
 8007cb4:	2901      	cmp	r1, #1
 8007cb6:	f43f af5f 	beq.w	8007b78 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007cba:	b2c9      	uxtb	r1, r1
 8007cbc:	f7ff fdfe 	bl	80078bc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007cc0:	7829      	ldrb	r1, [r5, #0]
 8007cc2:	6061      	str	r1, [r4, #4]
 8007cc4:	e7e6      	b.n	8007c94 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 8007cc6:	88ca      	ldrh	r2, [r1, #6]
 8007cc8:	2a01      	cmp	r2, #1
 8007cca:	f47f af73 	bne.w	8007bb4 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007cce:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d80a      	bhi.n	8007cec <USBD_StdDevReq+0x1f4>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f43f af6c 	beq.w	8007bb4 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8007cdc:	4601      	mov	r1, r0
 8007cde:	2300      	movs	r3, #0
 8007ce0:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f000 f91a 	bl	8007f1e <USBD_CtlSendData>
      break;
 8007cea:	e726      	b.n	8007b3a <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	f47f af61 	bne.w	8007bb4 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cf2:	1d01      	adds	r1, r0, #4
 8007cf4:	e7f6      	b.n	8007ce4 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 8007cf6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	f63f af59 	bhi.w	8007bb4 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8007d02:	88cb      	ldrh	r3, [r1, #6]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	f47f af55 	bne.w	8007bb4 <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8007d0e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8007d12:	b10b      	cbz	r3, 8007d18 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007d14:	2303      	movs	r3, #3
 8007d16:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007d18:	2202      	movs	r2, #2
 8007d1a:	f104 010c 	add.w	r1, r4, #12
 8007d1e:	e7e1      	b.n	8007ce4 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d20:	884b      	ldrh	r3, [r1, #2]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	f47f af09 	bne.w	8007b3a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007d28:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8007d2c:	e724      	b.n	8007b78 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8007d2e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007d32:	3b01      	subs	r3, #1
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	f63f af3d 	bhi.w	8007bb4 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d3a:	884b      	ldrh	r3, [r1, #2]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	f47f aefc 	bne.w	8007b3a <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007d42:	2300      	movs	r3, #0
 8007d44:	e7f0      	b.n	8007d28 <USBD_StdDevReq+0x230>
 8007d46:	bf00      	nop
 8007d48:	20000b33 	.word	0x20000b33

08007d4c <USBD_StdItfReq>:
{
 8007d4c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d4e:	780b      	ldrb	r3, [r1, #0]
{
 8007d50:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d52:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007d56:	2a40      	cmp	r2, #64	; 0x40
{
 8007d58:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d5a:	d001      	beq.n	8007d60 <USBD_StdItfReq+0x14>
 8007d5c:	065b      	lsls	r3, r3, #25
 8007d5e:	d415      	bmi.n	8007d8c <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8007d60:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007d64:	3b01      	subs	r3, #1
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d810      	bhi.n	8007d8c <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d6a:	792b      	ldrb	r3, [r5, #4]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d80d      	bhi.n	8007d8c <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d70:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007d74:	4629      	mov	r1, r5
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4620      	mov	r0, r4
 8007d7a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d7c:	88eb      	ldrh	r3, [r5, #6]
 8007d7e:	b91b      	cbnz	r3, 8007d88 <USBD_StdItfReq+0x3c>
 8007d80:	b910      	cbnz	r0, 8007d88 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f8f5 	bl	8007f72 <USBD_CtlSendStatus>
}
 8007d88:	2000      	movs	r0, #0
 8007d8a:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f7ff fea7 	bl	8007ae0 <USBD_CtlError.constprop.0>
          break;
 8007d92:	e7f9      	b.n	8007d88 <USBD_StdItfReq+0x3c>

08007d94 <USBD_StdEPReq>:
{
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	780a      	ldrb	r2, [r1, #0]
 8007d98:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d9a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007d9e:	2a20      	cmp	r2, #32
{
 8007da0:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da2:	d027      	beq.n	8007df4 <USBD_StdEPReq+0x60>
 8007da4:	2a40      	cmp	r2, #64	; 0x40
 8007da6:	d025      	beq.n	8007df4 <USBD_StdEPReq+0x60>
 8007da8:	bb92      	cbnz	r2, 8007e10 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8007daa:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007dac:	888d      	ldrh	r5, [r1, #4]
 8007dae:	2a01      	cmp	r2, #1
 8007db0:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8007db2:	d03d      	beq.n	8007e30 <USBD_StdEPReq+0x9c>
 8007db4:	2a03      	cmp	r2, #3
 8007db6:	d025      	beq.n	8007e04 <USBD_StdEPReq+0x70>
 8007db8:	bb52      	cbnz	r2, 8007e10 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8007dba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d04d      	beq.n	8007e5e <USBD_StdEPReq+0xca>
 8007dc2:	2b03      	cmp	r3, #3
 8007dc4:	d124      	bne.n	8007e10 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc6:	2214      	movs	r2, #20
 8007dc8:	f001 030f 	and.w	r3, r1, #15
 8007dcc:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8007dd4:	d054      	beq.n	8007e80 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	b1d3      	cbz	r3, 8007e10 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dda:	2314      	movs	r3, #20
 8007ddc:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007de0:	fb05 3303 	mla	r3, r5, r3, r3
 8007de4:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007de6:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007dea:	d155      	bne.n	8007e98 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8007dec:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007dee:	2202      	movs	r2, #2
 8007df0:	4629      	mov	r1, r5
 8007df2:	e041      	b.n	8007e78 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8007df4:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	6892      	ldr	r2, [r2, #8]
 8007dfe:	4790      	blx	r2
}
 8007e00:	2000      	movs	r0, #0
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8007e04:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007e08:	2a02      	cmp	r2, #2
 8007e0a:	d01f      	beq.n	8007e4c <USBD_StdEPReq+0xb8>
 8007e0c:	2a03      	cmp	r2, #3
 8007e0e:	d003      	beq.n	8007e18 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff fe65 	bl	8007ae0 <USBD_CtlError.constprop.0>
              break;
 8007e16:	e7f3      	b.n	8007e00 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e18:	885a      	ldrh	r2, [r3, #2]
 8007e1a:	b92a      	cbnz	r2, 8007e28 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8007e1c:	064a      	lsls	r2, r1, #25
 8007e1e:	d003      	beq.n	8007e28 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e20:	88db      	ldrh	r3, [r3, #6]
 8007e22:	b90b      	cbnz	r3, 8007e28 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e24:	f001 ff40 	bl	8009ca8 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 f8a2 	bl	8007f72 <USBD_CtlSendStatus>
              break;
 8007e2e:	e7e7      	b.n	8007e00 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8007e30:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007e34:	2a02      	cmp	r2, #2
 8007e36:	d009      	beq.n	8007e4c <USBD_StdEPReq+0xb8>
 8007e38:	2a03      	cmp	r2, #3
 8007e3a:	d1e9      	bne.n	8007e10 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1de      	bne.n	8007e00 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e42:	064d      	lsls	r5, r1, #25
 8007e44:	d0f0      	beq.n	8007e28 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e46:	f001 ff3d 	bl	8009cc4 <USBD_LL_ClearStallEP>
 8007e4a:	e7ed      	b.n	8007e28 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4c:	064b      	lsls	r3, r1, #25
 8007e4e:	d0df      	beq.n	8007e10 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8007e50:	f001 ff2a 	bl	8009ca8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e54:	2180      	movs	r1, #128	; 0x80
 8007e56:	4620      	mov	r0, r4
 8007e58:	f001 ff26 	bl	8009ca8 <USBD_LL_StallEP>
 8007e5c:	e7d0      	b.n	8007e00 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e5e:	064a      	lsls	r2, r1, #25
 8007e60:	d1d6      	bne.n	8007e10 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e62:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8007e64:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e68:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e6c:	bf4c      	ite	mi
 8007e6e:	f100 0114 	addmi.w	r1, r0, #20
 8007e72:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8007e76:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 f850 	bl	8007f1e <USBD_CtlSendData>
              break;
 8007e7e:	e7bf      	b.n	8007e00 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e80:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d0c3      	beq.n	8007e10 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e88:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e8a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8e:	fb03 0505 	mla	r5, r3, r5, r0
 8007e92:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8007e96:	e7a6      	b.n	8007de6 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 ff21 	bl	8009ce0 <USBD_LL_IsStallEP>
 8007e9e:	b108      	cbz	r0, 8007ea4 <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7a3      	b.n	8007dec <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8007ea4:	6028      	str	r0, [r5, #0]
 8007ea6:	e7a2      	b.n	8007dee <USBD_StdEPReq+0x5a>

08007ea8 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007ea8:	780b      	ldrb	r3, [r1, #0]
 8007eaa:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007eac:	784b      	ldrb	r3, [r1, #1]
 8007eae:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007eb0:	78ca      	ldrb	r2, [r1, #3]
 8007eb2:	788b      	ldrb	r3, [r1, #2]
 8007eb4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007eb8:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007eba:	794a      	ldrb	r2, [r1, #5]
 8007ebc:	790b      	ldrb	r3, [r1, #4]
 8007ebe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ec2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ec4:	79ca      	ldrb	r2, [r1, #7]
 8007ec6:	798b      	ldrb	r3, [r1, #6]
 8007ec8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007ecc:	80c3      	strh	r3, [r0, #6]
}
 8007ece:	4770      	bx	lr

08007ed0 <USBD_CtlError>:
{
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007ed4:	2180      	movs	r1, #128	; 0x80
 8007ed6:	f001 fee7 	bl	8009ca8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007eda:	4620      	mov	r0, r4
}
 8007edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	f001 bee1 	b.w	8009ca8 <USBD_LL_StallEP>

08007ee6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ee6:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007ee8:	b188      	cbz	r0, 8007f0e <USBD_GetString+0x28>
 8007eea:	2500      	movs	r5, #0
 8007eec:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007eee:	462b      	mov	r3, r5
 8007ef0:	3501      	adds	r5, #1
 8007ef2:	5d44      	ldrb	r4, [r0, r5]
 8007ef4:	2c00      	cmp	r4, #0
 8007ef6:	d1fa      	bne.n	8007eee <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	3301      	adds	r3, #1
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007f00:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007f02:	2303      	movs	r3, #3
 8007f04:	704b      	strb	r3, [r1, #1]
 8007f06:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007f08:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007f0c:	b905      	cbnz	r5, 8007f10 <USBD_GetString+0x2a>
}
 8007f0e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	54cd      	strb	r5, [r1, r3]
 8007f14:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8007f16:	3302      	adds	r3, #2
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	548c      	strb	r4, [r1, r2]
 8007f1c:	e7f4      	b.n	8007f08 <USBD_GetString+0x22>

08007f1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007f1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f20:	2202      	movs	r2, #2
{
 8007f22:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007f24:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007f28:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f2c:	460a      	mov	r2, r1
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f001 fef6 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd10      	pop	{r4, pc}

08007f38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f38:	b508      	push	{r3, lr}
 8007f3a:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f3c:	460a      	mov	r2, r1
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f001 feee 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f44:	2000      	movs	r0, #0
 8007f46:	bd08      	pop	{r3, pc}

08007f48 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f48:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f4a:	2203      	movs	r2, #3
{
 8007f4c:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8007f4e:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f52:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f56:	460a      	mov	r2, r1
 8007f58:	2100      	movs	r1, #0
 8007f5a:	f001 feef 	bl	8009d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f5e:	2000      	movs	r0, #0
 8007f60:	bd10      	pop	{r4, pc}

08007f62 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f62:	b508      	push	{r3, lr}
 8007f64:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f66:	460a      	mov	r2, r1
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f001 fee7 	bl	8009d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f6e:	2000      	movs	r0, #0
 8007f70:	bd08      	pop	{r3, pc}

08007f72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f72:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f74:	2304      	movs	r3, #4
 8007f76:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4619      	mov	r1, r3
 8007f80:	f001 fece 	bl	8009d20 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f84:	2000      	movs	r0, #0
 8007f86:	bd08      	pop	{r3, pc}

08007f88 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f88:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f8a:	2305      	movs	r3, #5
 8007f8c:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f90:	2300      	movs	r3, #0
 8007f92:	461a      	mov	r2, r3
 8007f94:	4619      	mov	r1, r3
 8007f96:	f001 fed1 	bl	8009d3c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	bd08      	pop	{r3, pc}

08007f9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f9e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007fa0:	f000 fdb4 	bl	8008b0c <vTaskStartScheduler>
  
  return osOK;
}
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	bd08      	pop	{r3, pc}

08007fa8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fac:	6946      	ldr	r6, [r0, #20]
{
 8007fae:	460b      	mov	r3, r1
 8007fb0:	e9d0 1000 	ldrd	r1, r0, [r0]
 8007fb4:	692a      	ldr	r2, [r5, #16]
 8007fb6:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8007fba:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007fbc:	b176      	cbz	r6, 8007fdc <osThreadCreate+0x34>
 8007fbe:	69ad      	ldr	r5, [r5, #24]
 8007fc0:	b165      	cbz	r5, 8007fdc <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007fc2:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007fc8:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fca:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007fce:	9400      	str	r4, [sp, #0]
 8007fd0:	f000 fd38 	bl	8008a44 <xTaskCreateStatic>
 8007fd4:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fd6:	9805      	ldr	r0, [sp, #20]
}
 8007fd8:	b006      	add	sp, #24
 8007fda:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007fdc:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fde:	bf0c      	ite	eq
 8007fe0:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007fe2:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fe4:	ad05      	add	r5, sp, #20
 8007fe6:	e9cd 4500 	strd	r4, r5, [sp]
 8007fea:	b292      	uxth	r2, r2
 8007fec:	f000 fd61 	bl	8008ab2 <xTaskCreate>
 8007ff0:	2801      	cmp	r0, #1
 8007ff2:	d0f0      	beq.n	8007fd6 <osThreadCreate+0x2e>
      return NULL;
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	e7ef      	b.n	8007fd8 <osThreadCreate+0x30>

08007ff8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007ff8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007ffa:	2801      	cmp	r0, #1
 8007ffc:	bf38      	it	cc
 8007ffe:	2001      	movcc	r0, #1
 8008000:	f000 fede 	bl	8008dc0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008004:	2000      	movs	r0, #0
 8008006:	bd08      	pop	{r3, pc}

08008008 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008008:	b513      	push	{r0, r1, r4, lr}
 800800a:	c811      	ldmia	r0, {r0, r4}
 800800c:	3901      	subs	r1, #1
 800800e:	4613      	mov	r3, r2
 8008010:	424a      	negs	r2, r1
 8008012:	414a      	adcs	r2, r1
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008014:	b13c      	cbz	r4, 8008026 <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8008016:	e9cd 0400 	strd	r0, r4, [sp]
 800801a:	2101      	movs	r1, #1
 800801c:	4805      	ldr	r0, [pc, #20]	; (8008034 <osTimerCreate+0x2c>)
 800801e:	f001 f8b2 	bl	8009186 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8008022:	b002      	add	sp, #8
 8008024:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8008026:	9000      	str	r0, [sp, #0]
 8008028:	2101      	movs	r1, #1
 800802a:	4802      	ldr	r0, [pc, #8]	; (8008034 <osTimerCreate+0x2c>)
 800802c:	f001 f884 	bl	8009138 <xTimerCreate>
 8008030:	e7f7      	b.n	8008022 <osTimerCreate+0x1a>
 8008032:	bf00      	nop
 8008034:	0800cd14 	.word	0x0800cd14

08008038 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8008038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800803a:	2400      	movs	r4, #0
 800803c:	2901      	cmp	r1, #1
 800803e:	460a      	mov	r2, r1
 8008040:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8008042:	bf38      	it	cc
 8008044:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008046:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 800804a:	b1a3      	cbz	r3, 8008076 <osTimerStart+0x3e>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800804c:	2109      	movs	r1, #9
 800804e:	9400      	str	r4, [sp, #0]
 8008050:	ab03      	add	r3, sp, #12
 8008052:	f001 f8d5 	bl	8009200 <xTimerGenericCommand>
 8008056:	2801      	cmp	r0, #1
 8008058:	d113      	bne.n	8008082 <osTimerStart+0x4a>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	b913      	cbnz	r3, 8008064 <osTimerStart+0x2c>
  osStatus result = osOK;
 800805e:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8008060:	b004      	add	sp, #16
 8008062:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8008064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008068:	4b07      	ldr	r3, [pc, #28]	; (8008088 <osTimerStart+0x50>)
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	e7f3      	b.n	800805e <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8008076:	2104      	movs	r1, #4
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	f001 f8c1 	bl	8009200 <xTimerGenericCommand>
 800807e:	2801      	cmp	r0, #1
 8008080:	d0ed      	beq.n	800805e <osTimerStart+0x26>
      result = osErrorOS;
 8008082:	20ff      	movs	r0, #255	; 0xff
  return result;
 8008084:	e7ec      	b.n	8008060 <osTimerStart+0x28>
 8008086:	bf00      	nop
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800808c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800808e:	2400      	movs	r4, #0
 8008090:	9403      	str	r4, [sp, #12]
 8008092:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8008096:	b1ab      	cbz	r3, 80080c4 <osTimerStop+0x38>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8008098:	4622      	mov	r2, r4
 800809a:	2108      	movs	r1, #8
 800809c:	9400      	str	r4, [sp, #0]
 800809e:	ab03      	add	r3, sp, #12
 80080a0:	f001 f8ae 	bl	8009200 <xTimerGenericCommand>
 80080a4:	2801      	cmp	r0, #1
 80080a6:	d114      	bne.n	80080d2 <osTimerStop+0x46>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80080a8:	9b03      	ldr	r3, [sp, #12]
 80080aa:	b913      	cbnz	r3, 80080b2 <osTimerStop+0x26>
  osStatus result = osOK;
 80080ac:	2000      	movs	r0, #0
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 80080ae:	b004      	add	sp, #16
 80080b0:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80080b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b6:	4b08      	ldr	r3, [pc, #32]	; (80080d8 <osTimerStop+0x4c>)
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	e7f3      	b.n	80080ac <osTimerStop+0x20>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80080c4:	461a      	mov	r2, r3
 80080c6:	2103      	movs	r1, #3
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	f001 f899 	bl	8009200 <xTimerGenericCommand>
 80080ce:	2801      	cmp	r0, #1
 80080d0:	d0ec      	beq.n	80080ac <osTimerStop+0x20>
      result = osErrorOS;
 80080d2:	20ff      	movs	r0, #255	; 0xff
 80080d4:	e7eb      	b.n	80080ae <osTimerStop+0x22>
 80080d6:	bf00      	nop
 80080d8:	e000ed04 	.word	0xe000ed04

080080dc <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e0:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e8:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080ea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080ec:	2300      	movs	r3, #0
 80080ee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080f0:	4770      	bx	lr

080080f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080f6:	4770      	bx	lr

080080f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80080f8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080fa:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80080fc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080fe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008104:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008106:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008108:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800810a:	3301      	adds	r3, #1
 800810c:	6003      	str	r3, [r0, #0]
}
 800810e:	4770      	bx	lr

08008110 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008110:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008112:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008114:	1c63      	adds	r3, r4, #1
 8008116:	d10a      	bne.n	800812e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008118:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800811e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008120:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008122:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008124:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008126:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008128:	3301      	adds	r3, #1
 800812a:	6003      	str	r3, [r0, #0]
}
 800812c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800812e:	f100 0208 	add.w	r2, r0, #8
 8008132:	4613      	mov	r3, r2
 8008134:	6852      	ldr	r2, [r2, #4]
 8008136:	6815      	ldr	r5, [r2, #0]
 8008138:	42a5      	cmp	r5, r4
 800813a:	d9fa      	bls.n	8008132 <vListInsert+0x22>
 800813c:	e7ed      	b.n	800811a <vListInsert+0xa>

0800813e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800813e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008140:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008144:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008146:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008148:	6859      	ldr	r1, [r3, #4]
 800814a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800814c:	bf08      	it	eq
 800814e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008150:	2200      	movs	r2, #0
 8008152:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	3a01      	subs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800815a:	6818      	ldr	r0, [r3, #0]
}
 800815c:	4770      	bx	lr

0800815e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800815e:	b510      	push	{r4, lr}
 8008160:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008162:	f001 f9ff 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008166:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008168:	f001 fa1e 	bl	80095a8 <vPortExitCritical>

	return xReturn;
}
 800816c:	fab4 f084 	clz	r0, r4
 8008170:	0940      	lsrs	r0, r0, #5
 8008172:	bd10      	pop	{r4, pc}

08008174 <prvCopyDataToQueue>:
{
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008178:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800817a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800817c:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800817e:	b162      	cbz	r2, 800819a <prvCopyDataToQueue+0x26>
	else if( xPosition == queueSEND_TO_BACK )
 8008180:	b97e      	cbnz	r6, 80081a2 <prvCopyDataToQueue+0x2e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008182:	6880      	ldr	r0, [r0, #8]
 8008184:	f001 fe1c 	bl	8009dc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008188:	68a3      	ldr	r3, [r4, #8]
 800818a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800818c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800818e:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008190:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008192:	4293      	cmp	r3, r2
 8008194:	d301      	bcc.n	800819a <prvCopyDataToQueue+0x26>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800819a:	3501      	adds	r5, #1
}
 800819c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800819e:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a2:	68c0      	ldr	r0, [r0, #12]
 80081a4:	f001 fe0c 	bl	8009dc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	4251      	negs	r1, r2
 80081ae:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081b0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081b2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081b4:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80081b6:	bf3e      	ittt	cc
 80081b8:	6863      	ldrcc	r3, [r4, #4]
 80081ba:	185b      	addcc	r3, r3, r1
 80081bc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80081be:	2e02      	cmp	r6, #2
 80081c0:	d1eb      	bne.n	800819a <prvCopyDataToQueue+0x26>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081c2:	2d00      	cmp	r5, #0
 80081c4:	d0e9      	beq.n	800819a <prvCopyDataToQueue+0x26>
				--uxMessagesWaiting;
 80081c6:	3d01      	subs	r5, #1
 80081c8:	e7e7      	b.n	800819a <prvCopyDataToQueue+0x26>

080081ca <prvCopyDataFromQueue>:
{
 80081ca:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80081ce:	4608      	mov	r0, r1
 80081d0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081d2:	b162      	cbz	r2, 80081ee <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80081d4:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081d6:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80081d8:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081da:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80081dc:	bf28      	it	cs
 80081de:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80081e0:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80081e2:	bf28      	it	cs
 80081e4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80081e6:	68d9      	ldr	r1, [r3, #12]
}
 80081e8:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80081ea:	f001 bde9 	b.w	8009dc0 <memcpy>
}
 80081ee:	bc10      	pop	{r4}
 80081f0:	4770      	bx	lr

080081f2 <prvUnlockQueue>:
{
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80081f6:	f001 f9b5 	bl	8009564 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80081fa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081fe:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008202:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008204:	2d00      	cmp	r5, #0
 8008206:	dc14      	bgt.n	8008232 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008208:	23ff      	movs	r3, #255	; 0xff
 800820a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800820e:	f001 f9cb 	bl	80095a8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008212:	f001 f9a7 	bl	8009564 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008216:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800821a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800821e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008220:	2d00      	cmp	r5, #0
 8008222:	dc12      	bgt.n	800824a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008224:	23ff      	movs	r3, #255	; 0xff
 8008226:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800822a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800822e:	f001 b9bb 	b.w	80095a8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008234:	2b00      	cmp	r3, #0
 8008236:	d0e7      	beq.n	8008208 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008238:	4630      	mov	r0, r6
 800823a:	f000 fe59 	bl	8008ef0 <xTaskRemoveFromEventList>
 800823e:	b108      	cbz	r0, 8008244 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008240:	f000 fee0 	bl	8009004 <vTaskMissedYield>
			--cTxLock;
 8008244:	3d01      	subs	r5, #1
 8008246:	b26d      	sxtb	r5, r5
 8008248:	e7dc      	b.n	8008204 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0e9      	beq.n	8008224 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008250:	4630      	mov	r0, r6
 8008252:	f000 fe4d 	bl	8008ef0 <xTaskRemoveFromEventList>
 8008256:	b108      	cbz	r0, 800825c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8008258:	f000 fed4 	bl	8009004 <vTaskMissedYield>
				--cRxLock;
 800825c:	3d01      	subs	r5, #1
 800825e:	b26d      	sxtb	r5, r5
 8008260:	e7de      	b.n	8008220 <prvUnlockQueue+0x2e>
	...

08008264 <xQueueGenericReset>:
{
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008268:	4604      	mov	r4, r0
 800826a:	b940      	cbnz	r0, 800827e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	e7fe      	b.n	800827c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800827e:	f001 f971 	bl	8009564 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008282:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8008286:	434b      	muls	r3, r1
 8008288:	6822      	ldr	r2, [r4, #0]
 800828a:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800828c:	1a5b      	subs	r3, r3, r1
 800828e:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008290:	6060      	str	r0, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008292:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008294:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8008296:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008298:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800829a:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800829c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80082a4:	b995      	cbnz	r5, 80082cc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082a6:	6923      	ldr	r3, [r4, #16]
 80082a8:	b163      	cbz	r3, 80082c4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082aa:	f104 0010 	add.w	r0, r4, #16
 80082ae:	f000 fe1f 	bl	8008ef0 <xTaskRemoveFromEventList>
 80082b2:	b138      	cbz	r0, 80082c4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80082b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <xQueueGenericReset+0x7c>)
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80082c4:	f001 f970 	bl	80095a8 <vPortExitCritical>
}
 80082c8:	2001      	movs	r0, #1
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082cc:	f104 0010 	add.w	r0, r4, #16
 80082d0:	f7ff ff04 	bl	80080dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082d8:	f7ff ff00 	bl	80080dc <vListInitialise>
 80082dc:	e7f2      	b.n	80082c4 <xQueueGenericReset+0x60>
 80082de:	bf00      	nop
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <xQueueGenericCreateStatic>:
	{
 80082e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082e6:	460d      	mov	r5, r1
 80082e8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082ea:	b940      	cbnz	r0, 80082fe <xQueueGenericCreateStatic+0x1a>
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	e7fe      	b.n	80082fc <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 80082fe:	b943      	cbnz	r3, 8008312 <xQueueGenericCreateStatic+0x2e>
 8008300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008304:	f383 8811 	msr	BASEPRI, r3
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	f3bf 8f4f 	dsb	sy
 8008310:	e7fe      	b.n	8008310 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008312:	b14a      	cbz	r2, 8008328 <xQueueGenericCreateStatic+0x44>
 8008314:	b991      	cbnz	r1, 800833c <xQueueGenericCreateStatic+0x58>
 8008316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831a:	f383 8811 	msr	BASEPRI, r3
 800831e:	f3bf 8f6f 	isb	sy
 8008322:	f3bf 8f4f 	dsb	sy
 8008326:	e7fe      	b.n	8008326 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008328:	b141      	cbz	r1, 800833c <xQueueGenericCreateStatic+0x58>
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	e7fe      	b.n	800833a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800833c:	2348      	movs	r3, #72	; 0x48
 800833e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008340:	9b01      	ldr	r3, [sp, #4]
 8008342:	2b48      	cmp	r3, #72	; 0x48
 8008344:	d008      	beq.n	8008358 <xQueueGenericCreateStatic+0x74>
 8008346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834a:	f383 8811 	msr	BASEPRI, r3
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	e7fe      	b.n	8008356 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008358:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 800835a:	2d00      	cmp	r5, #0
 800835c:	bf08      	it	eq
 800835e:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8008360:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008364:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008368:	4620      	mov	r0, r4
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	f7ff ff7a 	bl	8008264 <xQueueGenericReset>
	}
 8008370:	4620      	mov	r0, r4
 8008372:	b003      	add	sp, #12
 8008374:	bd30      	pop	{r4, r5, pc}
	...

08008378 <xQueueGenericSend>:
{
 8008378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800837c:	4688      	mov	r8, r1
 800837e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008380:	4604      	mov	r4, r0
{
 8008382:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008384:	b940      	cbnz	r0, 8008398 <xQueueGenericSend+0x20>
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	e7fe      	b.n	8008396 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008398:	b951      	cbnz	r1, 80083b0 <xQueueGenericSend+0x38>
 800839a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800839c:	b143      	cbz	r3, 80083b0 <xQueueGenericSend+0x38>
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	e7fe      	b.n	80083ae <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083b0:	2f02      	cmp	r7, #2
 80083b2:	d10b      	bne.n	80083cc <xQueueGenericSend+0x54>
 80083b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d008      	beq.n	80083cc <xQueueGenericSend+0x54>
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	e7fe      	b.n	80083ca <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083cc:	f000 fe20 	bl	8009010 <xTaskGetSchedulerState>
 80083d0:	4606      	mov	r6, r0
 80083d2:	b950      	cbnz	r0, 80083ea <xQueueGenericSend+0x72>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	b14b      	cbz	r3, 80083ec <xQueueGenericSend+0x74>
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	e7fe      	b.n	80083e8 <xQueueGenericSend+0x70>
 80083ea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80083ec:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80083f0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80084d8 <xQueueGenericSend+0x160>
 80083f4:	e037      	b.n	8008466 <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 80083f6:	9d01      	ldr	r5, [sp, #4]
 80083f8:	b91d      	cbnz	r5, 8008402 <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 80083fa:	f001 f8d5 	bl	80095a8 <vPortExitCritical>
			return errQUEUE_FULL;
 80083fe:	2000      	movs	r0, #0
 8008400:	e050      	b.n	80084a4 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 8008402:	b916      	cbnz	r6, 800840a <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008404:	a802      	add	r0, sp, #8
 8008406:	f000 fdb5 	bl	8008f74 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800840a:	f001 f8cd 	bl	80095a8 <vPortExitCritical>
		vTaskSuspendAll();
 800840e:	f000 fbc1 	bl	8008b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008412:	f001 f8a7 	bl	8009564 <vPortEnterCritical>
 8008416:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800841a:	2bff      	cmp	r3, #255	; 0xff
 800841c:	bf08      	it	eq
 800841e:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8008422:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008426:	2bff      	cmp	r3, #255	; 0xff
 8008428:	bf08      	it	eq
 800842a:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800842e:	f001 f8bb 	bl	80095a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008432:	a901      	add	r1, sp, #4
 8008434:	a802      	add	r0, sp, #8
 8008436:	f000 fda9 	bl	8008f8c <xTaskCheckForTimeOut>
 800843a:	2800      	cmp	r0, #0
 800843c:	d146      	bne.n	80084cc <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800843e:	f001 f891 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008442:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008444:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008446:	429a      	cmp	r2, r3
 8008448:	d12f      	bne.n	80084aa <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800844a:	f001 f8ad 	bl	80095a8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800844e:	9901      	ldr	r1, [sp, #4]
 8008450:	f104 0010 	add.w	r0, r4, #16
 8008454:	f000 fd12 	bl	8008e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008458:	4620      	mov	r0, r4
 800845a:	f7ff feca 	bl	80081f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800845e:	f000 fc39 	bl	8008cd4 <xTaskResumeAll>
 8008462:	b350      	cbz	r0, 80084ba <xQueueGenericSend+0x142>
 8008464:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008466:	f001 f87d 	bl	8009564 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800846c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800846e:	429a      	cmp	r2, r3
 8008470:	d301      	bcc.n	8008476 <xQueueGenericSend+0xfe>
 8008472:	2f02      	cmp	r7, #2
 8008474:	d1bf      	bne.n	80083f6 <xQueueGenericSend+0x7e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008476:	463a      	mov	r2, r7
 8008478:	4641      	mov	r1, r8
 800847a:	4620      	mov	r0, r4
 800847c:	f7ff fe7a 	bl	8008174 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008482:	b11b      	cbz	r3, 800848c <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008484:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008488:	f000 fd32 	bl	8008ef0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800848c:	b138      	cbz	r0, 800849e <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	4b11      	ldr	r3, [pc, #68]	; (80084d8 <xQueueGenericSend+0x160>)
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800849e:	f001 f883 	bl	80095a8 <vPortExitCritical>
				return pdPASS;
 80084a2:	2001      	movs	r0, #1
}
 80084a4:	b004      	add	sp, #16
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80084aa:	f001 f87d 	bl	80095a8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80084ae:	4620      	mov	r0, r4
 80084b0:	f7ff fe9f 	bl	80081f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80084b4:	f000 fc0e 	bl	8008cd4 <xTaskResumeAll>
 80084b8:	e7d4      	b.n	8008464 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 80084ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084be:	f8ca 3000 	str.w	r3, [sl]
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	e7cb      	b.n	8008464 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 80084cc:	4620      	mov	r0, r4
 80084ce:	f7ff fe90 	bl	80081f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80084d2:	f000 fbff 	bl	8008cd4 <xTaskResumeAll>
 80084d6:	e792      	b.n	80083fe <xQueueGenericSend+0x86>
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <xQueueGenericSendFromISR>:
{
 80084dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e0:	4689      	mov	r9, r1
 80084e2:	4690      	mov	r8, r2
 80084e4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80084e6:	4604      	mov	r4, r0
 80084e8:	b940      	cbnz	r0, 80084fc <xQueueGenericSendFromISR+0x20>
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	e7fe      	b.n	80084fa <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084fc:	b951      	cbnz	r1, 8008514 <xQueueGenericSendFromISR+0x38>
 80084fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008500:	b143      	cbz	r3, 8008514 <xQueueGenericSendFromISR+0x38>
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	e7fe      	b.n	8008512 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008514:	2f02      	cmp	r7, #2
 8008516:	d10b      	bne.n	8008530 <xQueueGenericSendFromISR+0x54>
 8008518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800851a:	2b01      	cmp	r3, #1
 800851c:	d008      	beq.n	8008530 <xQueueGenericSendFromISR+0x54>
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	e7fe      	b.n	800852e <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008530:	f001 f8f8 	bl	8009724 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008534:	f3ef 8611 	mrs	r6, BASEPRI
 8008538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008548:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800854a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800854c:	429a      	cmp	r2, r3
 800854e:	d301      	bcc.n	8008554 <xQueueGenericSendFromISR+0x78>
 8008550:	2f02      	cmp	r7, #2
 8008552:	d122      	bne.n	800859a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008554:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008558:	463a      	mov	r2, r7
 800855a:	4649      	mov	r1, r9
 800855c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800855e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008560:	f7ff fe08 	bl	8008174 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008564:	1c6b      	adds	r3, r5, #1
 8008566:	d113      	bne.n	8008590 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800856a:	b90b      	cbnz	r3, 8008570 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800856c:	2001      	movs	r0, #1
 800856e:	e00b      	b.n	8008588 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008570:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008574:	f000 fcbc 	bl	8008ef0 <xTaskRemoveFromEventList>
 8008578:	2800      	cmp	r0, #0
 800857a:	d0f7      	beq.n	800856c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800857c:	f1b8 0f00 	cmp.w	r8, #0
 8008580:	d0f4      	beq.n	800856c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008582:	2001      	movs	r0, #1
 8008584:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008588:	f386 8811 	msr	BASEPRI, r6
}
 800858c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008590:	3501      	adds	r5, #1
 8008592:	b26d      	sxtb	r5, r5
 8008594:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008598:	e7e8      	b.n	800856c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800859a:	2000      	movs	r0, #0
 800859c:	e7f4      	b.n	8008588 <xQueueGenericSendFromISR+0xac>
	...

080085a0 <xQueueReceive>:
{
 80085a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085a4:	b085      	sub	sp, #20
 80085a6:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80085a8:	4604      	mov	r4, r0
{
 80085aa:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80085ac:	b940      	cbnz	r0, 80085c0 <xQueueReceive+0x20>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	e7fe      	b.n	80085be <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c0:	b951      	cbnz	r1, 80085d8 <xQueueReceive+0x38>
 80085c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80085c4:	b143      	cbz	r3, 80085d8 <xQueueReceive+0x38>
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	e7fe      	b.n	80085d6 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085d8:	f000 fd1a 	bl	8009010 <xTaskGetSchedulerState>
 80085dc:	4606      	mov	r6, r0
 80085de:	b950      	cbnz	r0, 80085f6 <xQueueReceive+0x56>
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	b14b      	cbz	r3, 80085f8 <xQueueReceive+0x58>
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	e7fe      	b.n	80085f4 <xQueueReceive+0x54>
 80085f6:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80085f8:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80085fc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80086dc <xQueueReceive+0x13c>
 8008600:	e03b      	b.n	800867a <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008602:	9d01      	ldr	r5, [sp, #4]
 8008604:	b91d      	cbnz	r5, 800860e <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8008606:	f000 ffcf 	bl	80095a8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800860a:	2000      	movs	r0, #0
 800860c:	e052      	b.n	80086b4 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800860e:	b916      	cbnz	r6, 8008616 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008610:	a802      	add	r0, sp, #8
 8008612:	f000 fcaf 	bl	8008f74 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008616:	f000 ffc7 	bl	80095a8 <vPortExitCritical>
		vTaskSuspendAll();
 800861a:	f000 fabb 	bl	8008b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800861e:	f000 ffa1 	bl	8009564 <vPortEnterCritical>
 8008622:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008626:	2bff      	cmp	r3, #255	; 0xff
 8008628:	bf08      	it	eq
 800862a:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800862e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008632:	2bff      	cmp	r3, #255	; 0xff
 8008634:	bf08      	it	eq
 8008636:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800863a:	f000 ffb5 	bl	80095a8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800863e:	a901      	add	r1, sp, #4
 8008640:	a802      	add	r0, sp, #8
 8008642:	f000 fca3 	bl	8008f8c <xTaskCheckForTimeOut>
 8008646:	2800      	cmp	r0, #0
 8008648:	d13d      	bne.n	80086c6 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800864a:	4620      	mov	r0, r4
 800864c:	f7ff fd87 	bl	800815e <prvIsQueueEmpty>
 8008650:	b398      	cbz	r0, 80086ba <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008652:	9901      	ldr	r1, [sp, #4]
 8008654:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008658:	f000 fc10 	bl	8008e7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800865c:	4620      	mov	r0, r4
 800865e:	f7ff fdc8 	bl	80081f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008662:	f000 fb37 	bl	8008cd4 <xTaskResumeAll>
 8008666:	b938      	cbnz	r0, 8008678 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8008668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800866c:	f8c9 3000 	str.w	r3, [r9]
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800867a:	f000 ff73 	bl	8009564 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800867e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008680:	2d00      	cmp	r5, #0
 8008682:	d0be      	beq.n	8008602 <xQueueReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008684:	4639      	mov	r1, r7
 8008686:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008688:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800868a:	f7ff fd9e 	bl	80081ca <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800868e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	b163      	cbz	r3, 80086ae <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008694:	f104 0010 	add.w	r0, r4, #16
 8008698:	f000 fc2a 	bl	8008ef0 <xTaskRemoveFromEventList>
 800869c:	b138      	cbz	r0, 80086ae <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <xQueueReceive+0x13c>)
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80086ae:	f000 ff7b 	bl	80095a8 <vPortExitCritical>
				return pdPASS;
 80086b2:	2001      	movs	r0, #1
}
 80086b4:	b005      	add	sp, #20
 80086b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80086ba:	4620      	mov	r0, r4
 80086bc:	f7ff fd99 	bl	80081f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086c0:	f000 fb08 	bl	8008cd4 <xTaskResumeAll>
 80086c4:	e7d8      	b.n	8008678 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7ff fd93 	bl	80081f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086cc:	f000 fb02 	bl	8008cd4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086d0:	4620      	mov	r0, r4
 80086d2:	f7ff fd44 	bl	800815e <prvIsQueueEmpty>
 80086d6:	2800      	cmp	r0, #0
 80086d8:	d0ce      	beq.n	8008678 <xQueueReceive+0xd8>
 80086da:	e796      	b.n	800860a <xQueueReceive+0x6a>
 80086dc:	e000ed04 	.word	0xe000ed04

080086e0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086e0:	2300      	movs	r3, #0
	{
 80086e2:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086e4:	4a06      	ldr	r2, [pc, #24]	; (8008700 <vQueueAddToRegistry+0x20>)
 80086e6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80086ea:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80086ee:	b91d      	cbnz	r5, 80086f8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086f4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086f6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086f8:	3301      	adds	r3, #1
 80086fa:	2b08      	cmp	r3, #8
 80086fc:	d1f3      	bne.n	80086e6 <vQueueAddToRegistry+0x6>
 80086fe:	e7fa      	b.n	80086f6 <vQueueAddToRegistry+0x16>
 8008700:	20002430 	.word	0x20002430

08008704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	4604      	mov	r4, r0
 8008708:	460d      	mov	r5, r1
 800870a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800870c:	f000 ff2a 	bl	8009564 <vPortEnterCritical>
 8008710:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008714:	2bff      	cmp	r3, #255	; 0xff
 8008716:	bf04      	itt	eq
 8008718:	2300      	moveq	r3, #0
 800871a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800871e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008722:	2bff      	cmp	r3, #255	; 0xff
 8008724:	bf04      	itt	eq
 8008726:	2300      	moveq	r3, #0
 8008728:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800872c:	f000 ff3c 	bl	80095a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008730:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008732:	b92b      	cbnz	r3, 8008740 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008734:	4632      	mov	r2, r6
 8008736:	4629      	mov	r1, r5
 8008738:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800873c:	f000 fbb8 	bl	8008eb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008740:	4620      	mov	r0, r4
	}
 8008742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008746:	f7ff bd54 	b.w	80081f2 <prvUnlockQueue>
	...

0800874c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008750:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008752:	f000 ff07 	bl	8009564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008756:	4b34      	ldr	r3, [pc, #208]	; (8008828 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8008758:	4d34      	ldr	r5, [pc, #208]	; (800882c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4e34      	ldr	r6, [pc, #208]	; (8008830 <prvAddNewTaskToReadyList+0xe4>)
 800875e:	3201      	adds	r2, #1
 8008760:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008762:	682a      	ldr	r2, [r5, #0]
 8008764:	2a00      	cmp	r2, #0
 8008766:	d154      	bne.n	8008812 <prvAddNewTaskToReadyList+0xc6>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008768:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d12b      	bne.n	80087c8 <prvAddNewTaskToReadyList+0x7c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008770:	4830      	ldr	r0, [pc, #192]	; (8008834 <prvAddNewTaskToReadyList+0xe8>)
 8008772:	f7ff fcb3 	bl	80080dc <vListInitialise>
 8008776:	4830      	ldr	r0, [pc, #192]	; (8008838 <prvAddNewTaskToReadyList+0xec>)
 8008778:	f7ff fcb0 	bl	80080dc <vListInitialise>
 800877c:	482f      	ldr	r0, [pc, #188]	; (800883c <prvAddNewTaskToReadyList+0xf0>)
 800877e:	f7ff fcad 	bl	80080dc <vListInitialise>
 8008782:	482f      	ldr	r0, [pc, #188]	; (8008840 <prvAddNewTaskToReadyList+0xf4>)
 8008784:	f7ff fcaa 	bl	80080dc <vListInitialise>
 8008788:	482e      	ldr	r0, [pc, #184]	; (8008844 <prvAddNewTaskToReadyList+0xf8>)
 800878a:	f7ff fca7 	bl	80080dc <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 800878e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8008874 <prvAddNewTaskToReadyList+0x128>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008792:	482d      	ldr	r0, [pc, #180]	; (8008848 <prvAddNewTaskToReadyList+0xfc>)
 8008794:	f7ff fca2 	bl	80080dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008798:	4f2c      	ldr	r7, [pc, #176]	; (800884c <prvAddNewTaskToReadyList+0x100>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800879a:	482d      	ldr	r0, [pc, #180]	; (8008850 <prvAddNewTaskToReadyList+0x104>)
 800879c:	f7ff fc9e 	bl	80080dc <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 80087a0:	4640      	mov	r0, r8
 80087a2:	f7ff fc9b 	bl	80080dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff fc98 	bl	80080dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80087ac:	4829      	ldr	r0, [pc, #164]	; (8008854 <prvAddNewTaskToReadyList+0x108>)
 80087ae:	f7ff fc95 	bl	80080dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80087b2:	4829      	ldr	r0, [pc, #164]	; (8008858 <prvAddNewTaskToReadyList+0x10c>)
 80087b4:	f7ff fc92 	bl	80080dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80087b8:	4828      	ldr	r0, [pc, #160]	; (800885c <prvAddNewTaskToReadyList+0x110>)
 80087ba:	f7ff fc8f 	bl	80080dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80087be:	4b28      	ldr	r3, [pc, #160]	; (8008860 <prvAddNewTaskToReadyList+0x114>)
 80087c0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80087c4:	4b27      	ldr	r3, [pc, #156]	; (8008864 <prvAddNewTaskToReadyList+0x118>)
 80087c6:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 80087c8:	4a27      	ldr	r2, [pc, #156]	; (8008868 <prvAddNewTaskToReadyList+0x11c>)
		prvAddTaskToReadyList( pxNewTCB );
 80087ca:	4928      	ldr	r1, [pc, #160]	; (800886c <prvAddNewTaskToReadyList+0x120>)
		uxTaskNumber++;
 80087cc:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80087ce:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80087d0:	3301      	adds	r3, #1
 80087d2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80087d4:	2301      	movs	r3, #1
 80087d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80087d8:	4093      	lsls	r3, r2
 80087da:	4303      	orrs	r3, r0
 80087dc:	2014      	movs	r0, #20
 80087de:	600b      	str	r3, [r1, #0]
 80087e0:	4b14      	ldr	r3, [pc, #80]	; (8008834 <prvAddNewTaskToReadyList+0xe8>)
 80087e2:	1d21      	adds	r1, r4, #4
 80087e4:	fb00 3002 	mla	r0, r0, r2, r3
 80087e8:	f7ff fc86 	bl	80080f8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80087ec:	f000 fedc 	bl	80095a8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80087f0:	6833      	ldr	r3, [r6, #0]
 80087f2:	b163      	cbz	r3, 800880e <prvAddNewTaskToReadyList+0xc2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d207      	bcs.n	800880e <prvAddNewTaskToReadyList+0xc2>
			taskYIELD_IF_USING_PREEMPTION();
 80087fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008802:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <prvAddNewTaskToReadyList+0x124>)
 8008804:	601a      	str	r2, [r3, #0]
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	f3bf 8f6f 	isb	sy
}
 800880e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008812:	6833      	ldr	r3, [r6, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1d7      	bne.n	80087c8 <prvAddNewTaskToReadyList+0x7c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008818:	682b      	ldr	r3, [r5, #0]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800881e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008820:	bf98      	it	ls
 8008822:	602c      	strls	r4, [r5, #0]
 8008824:	e7d0      	b.n	80087c8 <prvAddNewTaskToReadyList+0x7c>
 8008826:	bf00      	nop
 8008828:	20000bcc 	.word	0x20000bcc
 800882c:	20000b34 	.word	0x20000b34
 8008830:	20000c28 	.word	0x20000c28
 8008834:	20000b40 	.word	0x20000b40
 8008838:	20000b54 	.word	0x20000b54
 800883c:	20000b68 	.word	0x20000b68
 8008840:	20000b7c 	.word	0x20000b7c
 8008844:	20000b90 	.word	0x20000b90
 8008848:	20000ba4 	.word	0x20000ba4
 800884c:	20000bf8 	.word	0x20000bf8
 8008850:	20000bb8 	.word	0x20000bb8
 8008854:	20000c14 	.word	0x20000c14
 8008858:	20000c40 	.word	0x20000c40
 800885c:	20000c2c 	.word	0x20000c2c
 8008860:	20000b38 	.word	0x20000b38
 8008864:	20000b3c 	.word	0x20000b3c
 8008868:	20000bdc 	.word	0x20000bdc
 800886c:	20000be0 	.word	0x20000be0
 8008870:	e000ed04 	.word	0xe000ed04
 8008874:	20000be4 	.word	0x20000be4

08008878 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008878:	4a06      	ldr	r2, [pc, #24]	; (8008894 <prvResetNextTaskUnblockTime+0x1c>)
 800887a:	6813      	ldr	r3, [r2, #0]
 800887c:	6819      	ldr	r1, [r3, #0]
 800887e:	4b06      	ldr	r3, [pc, #24]	; (8008898 <prvResetNextTaskUnblockTime+0x20>)
 8008880:	b919      	cbnz	r1, 800888a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008886:	601a      	str	r2, [r3, #0]
	}
}
 8008888:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800888e:	68d2      	ldr	r2, [r2, #12]
 8008890:	6852      	ldr	r2, [r2, #4]
 8008892:	e7f8      	b.n	8008886 <prvResetNextTaskUnblockTime+0xe>
 8008894:	20000b38 	.word	0x20000b38
 8008898:	20000c0c 	.word	0x20000c0c

0800889c <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800889c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a0:	4607      	mov	r7, r0
 80088a2:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80088a6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 80088aa:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80088ac:	3801      	subs	r0, #1
 80088ae:	eb06 0680 	add.w	r6, r6, r0, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80088b2:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80088b4:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b8:	1e4b      	subs	r3, r1, #1
 80088ba:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80088be:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088c0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80088c4:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 80088c8:	7818      	ldrb	r0, [r3, #0]
 80088ca:	b108      	cbz	r0, 80088d0 <prvInitialiseNewTask.isra.0+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088cc:	428b      	cmp	r3, r1
 80088ce:	d1f7      	bne.n	80088c0 <prvInitialiseNewTask.isra.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088d0:	9d08      	ldr	r5, [sp, #32]
 80088d2:	f04f 0a00 	mov.w	sl, #0
 80088d6:	2d06      	cmp	r5, #6
 80088d8:	bf28      	it	cs
 80088da:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088dc:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80088de:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088e0:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088e4:	f7ff fc05 	bl	80080f2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088e8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088ec:	f104 0018 	add.w	r0, r4, #24
 80088f0:	f7ff fbff 	bl	80080f2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80088f4:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f8:	464a      	mov	r2, r9
 80088fa:	4639      	mov	r1, r7
 80088fc:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088fe:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008900:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008902:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008904:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008908:	f000 fe04 	bl	8009514 <pxPortInitialiseStack>
 800890c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	d001      	beq.n	8008918 <prvInitialiseNewTask.isra.0+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008914:	f8c8 4000 	str.w	r4, [r8]
}
 8008918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800891c <prvDeleteTCB>:
	{
 800891c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800891e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	{
 8008922:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008924:	b93b      	cbnz	r3, 8008936 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8008926:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8008928:	f000 ffd8 	bl	80098dc <vPortFree>
				vPortFree( pxTCB );
 800892c:	4620      	mov	r0, r4
	}
 800892e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8008932:	f000 bfd3 	b.w	80098dc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008936:	2b01      	cmp	r3, #1
 8008938:	d0f9      	beq.n	800892e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800893a:	2b02      	cmp	r3, #2
 800893c:	d008      	beq.n	8008950 <prvDeleteTCB+0x34>
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	e7fe      	b.n	800894e <prvDeleteTCB+0x32>
	}
 8008950:	bd10      	pop	{r4, pc}
	...

08008954 <prvIdleTask>:
{
 8008954:	b580      	push	{r7, lr}
				taskYIELD();
 8008956:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80089b4 <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800895a:	4f12      	ldr	r7, [pc, #72]	; (80089a4 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800895c:	4c12      	ldr	r4, [pc, #72]	; (80089a8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800895e:	4d13      	ldr	r5, [pc, #76]	; (80089ac <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	b963      	cbnz	r3, 800897e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008964:	4b12      	ldr	r3, [pc, #72]	; (80089b0 <prvIdleTask+0x5c>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d9f8      	bls.n	800895e <prvIdleTask+0xa>
				taskYIELD();
 800896c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008970:	f8c8 3000 	str.w	r3, [r8]
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	e7ee      	b.n	800895c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800897e:	f000 fdf1 	bl	8009564 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008986:	1d30      	adds	r0, r6, #4
 8008988:	f7ff fbd9 	bl	800813e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	3b01      	subs	r3, #1
 8008990:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	3b01      	subs	r3, #1
 8008996:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008998:	f000 fe06 	bl	80095a8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800899c:	4630      	mov	r0, r6
 800899e:	f7ff ffbd 	bl	800891c <prvDeleteTCB>
 80089a2:	e7dd      	b.n	8008960 <prvIdleTask+0xc>
 80089a4:	20000c40 	.word	0x20000c40
 80089a8:	20000bd0 	.word	0x20000bd0
 80089ac:	20000bcc 	.word	0x20000bcc
 80089b0:	20000b40 	.word	0x20000b40
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80089ba:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089bc:	4f1b      	ldr	r7, [pc, #108]	; (8008a2c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80089be:	681c      	ldr	r4, [r3, #0]
{
 80089c0:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089c2:	6838      	ldr	r0, [r7, #0]
{
 80089c4:	460e      	mov	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089c6:	3004      	adds	r0, #4
 80089c8:	f7ff fbb9 	bl	800813e <uxListRemove>
 80089cc:	463b      	mov	r3, r7
 80089ce:	b940      	cbnz	r0, 80089e2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	4817      	ldr	r0, [pc, #92]	; (8008a30 <prvAddCurrentTaskToDelayedList+0x78>)
 80089d4:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 80089d6:	2101      	movs	r1, #1
 80089d8:	6802      	ldr	r2, [r0, #0]
 80089da:	40b9      	lsls	r1, r7
 80089dc:	ea22 0201 	bic.w	r2, r2, r1
 80089e0:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80089e2:	1c6a      	adds	r2, r5, #1
 80089e4:	d107      	bne.n	80089f6 <prvAddCurrentTaskToDelayedList+0x3e>
 80089e6:	b136      	cbz	r6, 80089f6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089e8:	6819      	ldr	r1, [r3, #0]
 80089ea:	4812      	ldr	r0, [pc, #72]	; (8008a34 <prvAddCurrentTaskToDelayedList+0x7c>)
 80089ec:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80089ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089f2:	f7ff bb81 	b.w	80080f8 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	1964      	adds	r4, r4, r5
 80089fa:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80089fc:	d307      	bcc.n	8008a0e <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80089fe:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <prvAddCurrentTaskToDelayedList+0x80>)
 8008a00:	6810      	ldr	r0, [r2, #0]
 8008a02:	6819      	ldr	r1, [r3, #0]
}
 8008a04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a08:	3104      	adds	r1, #4
 8008a0a:	f7ff bb81 	b.w	8008110 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008a0e:	4a0b      	ldr	r2, [pc, #44]	; (8008a3c <prvAddCurrentTaskToDelayedList+0x84>)
 8008a10:	6810      	ldr	r0, [r2, #0]
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	3104      	adds	r1, #4
 8008a16:	f7ff fb7b 	bl	8008110 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008a1a:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <prvAddCurrentTaskToDelayedList+0x88>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008a20:	bf88      	it	hi
 8008a22:	601c      	strhi	r4, [r3, #0]
}
 8008a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20000c54 	.word	0x20000c54
 8008a2c:	20000b34 	.word	0x20000b34
 8008a30:	20000be0 	.word	0x20000be0
 8008a34:	20000c2c 	.word	0x20000c2c
 8008a38:	20000b3c 	.word	0x20000b3c
 8008a3c:	20000b38 	.word	0x20000b38
 8008a40:	20000c0c 	.word	0x20000c0c

08008a44 <xTaskCreateStatic>:
	{
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008a4c:	b945      	cbnz	r5, 8008a60 <xTaskCreateStatic+0x1c>
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	e7fe      	b.n	8008a5e <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8008a60:	b944      	cbnz	r4, 8008a74 <xTaskCreateStatic+0x30>
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	e7fe      	b.n	8008a72 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a74:	264c      	movs	r6, #76	; 0x4c
 8008a76:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a78:	9e04      	ldr	r6, [sp, #16]
 8008a7a:	2e4c      	cmp	r6, #76	; 0x4c
 8008a7c:	d008      	beq.n	8008a90 <xTaskCreateStatic+0x4c>
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	e7fe      	b.n	8008a8e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a90:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a92:	2502      	movs	r5, #2
 8008a94:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a98:	ad05      	add	r5, sp, #20
 8008a9a:	9501      	str	r5, [sp, #4]
 8008a9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008a9e:	9402      	str	r4, [sp, #8]
 8008aa0:	9500      	str	r5, [sp, #0]
 8008aa2:	f7ff fefb 	bl	800889c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7ff fe50 	bl	800874c <prvAddNewTaskToReadyList>
	}
 8008aac:	9805      	ldr	r0, [sp, #20]
 8008aae:	b006      	add	sp, #24
 8008ab0:	bd70      	pop	{r4, r5, r6, pc}

08008ab2 <xTaskCreate>:
	{
 8008ab2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008aba:	0090      	lsls	r0, r2, #2
	{
 8008abc:	4688      	mov	r8, r1
 8008abe:	4616      	mov	r6, r2
 8008ac0:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ac2:	f000 fe81 	bl	80097c8 <pvPortMalloc>
			if( pxStack != NULL )
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	b1e8      	cbz	r0, 8008b06 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008aca:	204c      	movs	r0, #76	; 0x4c
 8008acc:	f000 fe7c 	bl	80097c8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	b1a8      	cbz	r0, 8008b00 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ada:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008adc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae2:	4632      	mov	r2, r6
 8008ae4:	4641      	mov	r1, r8
 8008ae6:	9002      	str	r0, [sp, #8]
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	4638      	mov	r0, r7
 8008aec:	464b      	mov	r3, r9
 8008aee:	f7ff fed5 	bl	800889c <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008af2:	4620      	mov	r0, r4
 8008af4:	f7ff fe2a 	bl	800874c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008af8:	2001      	movs	r0, #1
	}
 8008afa:	b005      	add	sp, #20
 8008afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008b00:	4628      	mov	r0, r5
 8008b02:	f000 feeb 	bl	80098dc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008b0a:	e7f6      	b.n	8008afa <xTaskCreate+0x48>

08008b0c <vTaskStartScheduler>:
{
 8008b0c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b0e:	2400      	movs	r4, #0
{
 8008b10:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b12:	aa07      	add	r2, sp, #28
 8008b14:	a906      	add	r1, sp, #24
 8008b16:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b18:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b1c:	f7f8 face 	bl	80010bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	9a07      	ldr	r2, [sp, #28]
 8008b24:	9302      	str	r3, [sp, #8]
 8008b26:	9b06      	ldr	r3, [sp, #24]
 8008b28:	4915      	ldr	r1, [pc, #84]	; (8008b80 <vTaskStartScheduler+0x74>)
 8008b2a:	e9cd 4300 	strd	r4, r3, [sp]
 8008b2e:	4815      	ldr	r0, [pc, #84]	; (8008b84 <vTaskStartScheduler+0x78>)
 8008b30:	4623      	mov	r3, r4
 8008b32:	f7ff ff87 	bl	8008a44 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008b36:	b1a8      	cbz	r0, 8008b64 <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 8008b38:	f000 facc 	bl	80090d4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8008b3c:	2801      	cmp	r0, #1
 8008b3e:	d113      	bne.n	8008b68 <vTaskStartScheduler+0x5c>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	f383 8811 	msr	BASEPRI, r3
 8008b48:	f3bf 8f6f 	isb	sy
 8008b4c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	4b0c      	ldr	r3, [pc, #48]	; (8008b88 <vTaskStartScheduler+0x7c>)
 8008b56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <vTaskStartScheduler+0x80>)
 8008b5a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	; (8008b90 <vTaskStartScheduler+0x84>)
 8008b5e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8008b60:	f000 fd88 	bl	8009674 <xPortStartScheduler>
}
 8008b64:	b008      	add	sp, #32
 8008b66:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d1fb      	bne.n	8008b64 <vTaskStartScheduler+0x58>
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	e7fe      	b.n	8008b7c <vTaskStartScheduler+0x70>
 8008b7e:	bf00      	nop
 8008b80:	0800e7d9 	.word	0x0800e7d9
 8008b84:	08008955 	.word	0x08008955
 8008b88:	20000c0c 	.word	0x20000c0c
 8008b8c:	20000c28 	.word	0x20000c28
 8008b90:	20000c54 	.word	0x20000c54

08008b94 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8008b94:	4a02      	ldr	r2, [pc, #8]	; (8008ba0 <vTaskSuspendAll+0xc>)
 8008b96:	6813      	ldr	r3, [r2, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	6013      	str	r3, [r2, #0]
}
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000bd8 	.word	0x20000bd8

08008ba4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8008ba4:	4b01      	ldr	r3, [pc, #4]	; (8008bac <xTaskGetTickCount+0x8>)
 8008ba6:	6818      	ldr	r0, [r3, #0]
}
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	20000c54 	.word	0x20000c54

08008bb0 <xTaskIncrementTick>:
{
 8008bb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bb4:	4b3c      	ldr	r3, [pc, #240]	; (8008ca8 <xTaskIncrementTick+0xf8>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d16e      	bne.n	8008c9a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bbc:	4b3b      	ldr	r3, [pc, #236]	; (8008cac <xTaskIncrementTick+0xfc>)
 8008bbe:	681d      	ldr	r5, [r3, #0]
 8008bc0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8008bc2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bc4:	b9bd      	cbnz	r5, 8008bf6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8008bc6:	4b3a      	ldr	r3, [pc, #232]	; (8008cb0 <xTaskIncrementTick+0x100>)
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	b142      	cbz	r2, 8008be0 <xTaskIncrementTick+0x30>
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	e7fe      	b.n	8008bde <xTaskIncrementTick+0x2e>
 8008be0:	4a34      	ldr	r2, [pc, #208]	; (8008cb4 <xTaskIncrementTick+0x104>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6810      	ldr	r0, [r2, #0]
 8008be6:	6018      	str	r0, [r3, #0]
 8008be8:	6011      	str	r1, [r2, #0]
 8008bea:	4a33      	ldr	r2, [pc, #204]	; (8008cb8 <xTaskIncrementTick+0x108>)
 8008bec:	6813      	ldr	r3, [r2, #0]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	f7ff fe41 	bl	8008878 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bf6:	4e31      	ldr	r6, [pc, #196]	; (8008cbc <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008bf8:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bfa:	6833      	ldr	r3, [r6, #0]
 8008bfc:	4f30      	ldr	r7, [pc, #192]	; (8008cc0 <xTaskIncrementTick+0x110>)
 8008bfe:	42ab      	cmp	r3, r5
 8008c00:	d910      	bls.n	8008c24 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c02:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <xTaskIncrementTick+0x114>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	2314      	movs	r3, #20
 8008c0a:	4353      	muls	r3, r2
 8008c0c:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	bf28      	it	cs
 8008c12:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8008c14:	4b2c      	ldr	r3, [pc, #176]	; (8008cc8 <xTaskIncrementTick+0x118>)
 8008c16:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008c18:	2b00      	cmp	r3, #0
}
 8008c1a:	bf0c      	ite	eq
 8008c1c:	4620      	moveq	r0, r4
 8008c1e:	2001      	movne	r0, #1
 8008c20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c24:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008cb0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8008c28:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008cd0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c2c:	f8da 3000 	ldr.w	r3, [sl]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	b91b      	cbnz	r3, 8008c3c <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c34:	f04f 33ff 	mov.w	r3, #4294967295
 8008c38:	6033      	str	r3, [r6, #0]
					break;
 8008c3a:	e7e2      	b.n	8008c02 <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c3c:	f8da 3000 	ldr.w	r3, [sl]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c46:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8008c4a:	4295      	cmp	r5, r2
 8008c4c:	d201      	bcs.n	8008c52 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8008c4e:	6032      	str	r2, [r6, #0]
						break;
 8008c50:	e7d7      	b.n	8008c02 <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c52:	f10b 0804 	add.w	r8, fp, #4
 8008c56:	4640      	mov	r0, r8
 8008c58:	f7ff fa71 	bl	800813e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c5c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8008c60:	b11a      	cbz	r2, 8008c6a <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c62:	f10b 0018 	add.w	r0, fp, #24
 8008c66:	f7ff fa6a 	bl	800813e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8008c70:	f8d9 3000 	ldr.w	r3, [r9]
 8008c74:	4082      	lsls	r2, r0
 8008c76:	431a      	orrs	r2, r3
 8008c78:	f8c9 2000 	str.w	r2, [r9]
 8008c7c:	2214      	movs	r2, #20
 8008c7e:	4641      	mov	r1, r8
 8008c80:	fb02 7000 	mla	r0, r2, r0, r7
 8008c84:	f7ff fa38 	bl	80080f8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c88:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <xTaskIncrementTick+0x114>)
 8008c8a:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008c8e:	6819      	ldr	r1, [r3, #0]
 8008c90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8008c92:	429a      	cmp	r2, r3
 8008c94:	bf28      	it	cs
 8008c96:	2401      	movcs	r4, #1
 8008c98:	e7c8      	b.n	8008c2c <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008c9a:	4a0c      	ldr	r2, [pc, #48]	; (8008ccc <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008c9c:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	6013      	str	r3, [r2, #0]
 8008ca4:	e7b6      	b.n	8008c14 <xTaskIncrementTick+0x64>
 8008ca6:	bf00      	nop
 8008ca8:	20000bd8 	.word	0x20000bd8
 8008cac:	20000c54 	.word	0x20000c54
 8008cb0:	20000b38 	.word	0x20000b38
 8008cb4:	20000b3c 	.word	0x20000b3c
 8008cb8:	20000c10 	.word	0x20000c10
 8008cbc:	20000c0c 	.word	0x20000c0c
 8008cc0:	20000b40 	.word	0x20000b40
 8008cc4:	20000b34 	.word	0x20000b34
 8008cc8:	20000c58 	.word	0x20000c58
 8008ccc:	20000bd4 	.word	0x20000bd4
 8008cd0:	20000be0 	.word	0x20000be0

08008cd4 <xTaskResumeAll>:
{
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008cd8:	4c30      	ldr	r4, [pc, #192]	; (8008d9c <xTaskResumeAll+0xc8>)
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	b943      	cbnz	r3, 8008cf0 <xTaskResumeAll+0x1c>
 8008cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	e7fe      	b.n	8008cee <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008cf0:	f000 fc38 	bl	8009564 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cfa:	6824      	ldr	r4, [r4, #0]
 8008cfc:	b12c      	cbz	r4, 8008d0a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008cfe:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008d00:	f000 fc52 	bl	80095a8 <vPortExitCritical>
}
 8008d04:	4620      	mov	r0, r4
 8008d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008d0a:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <xTaskResumeAll+0xcc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0f5      	beq.n	8008cfe <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d12:	4d24      	ldr	r5, [pc, #144]	; (8008da4 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008d14:	4e24      	ldr	r6, [pc, #144]	; (8008da8 <xTaskResumeAll+0xd4>)
 8008d16:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008dbc <xTaskResumeAll+0xe8>
 8008d1a:	e01f      	b.n	8008d5c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d1c:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008d1e:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008d20:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d22:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d26:	f104 0018 	add.w	r0, r4, #24
 8008d2a:	f7ff fa08 	bl	800813e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d2e:	4648      	mov	r0, r9
 8008d30:	f7ff fa05 	bl	800813e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008d34:	2014      	movs	r0, #20
 8008d36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d38:	6831      	ldr	r1, [r6, #0]
 8008d3a:	fa07 f302 	lsl.w	r3, r7, r2
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	fb00 8002 	mla	r0, r0, r2, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	6033      	str	r3, [r6, #0]
 8008d48:	f7ff f9d6 	bl	80080f8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <xTaskResumeAll+0xd8>)
 8008d4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d301      	bcc.n	8008d5c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8008d58:	4b15      	ldr	r3, [pc, #84]	; (8008db0 <xTaskResumeAll+0xdc>)
 8008d5a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1dc      	bne.n	8008d1c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8008d62:	b10c      	cbz	r4, 8008d68 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8008d64:	f7ff fd88 	bl	8008878 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008d68:	4d12      	ldr	r5, [pc, #72]	; (8008db4 <xTaskResumeAll+0xe0>)
 8008d6a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008d6c:	b144      	cbz	r4, 8008d80 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8008d6e:	2701      	movs	r7, #1
 8008d70:	4e0f      	ldr	r6, [pc, #60]	; (8008db0 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8008d72:	f7ff ff1d 	bl	8008bb0 <xTaskIncrementTick>
 8008d76:	b100      	cbz	r0, 8008d7a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8008d78:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008d7a:	3c01      	subs	r4, #1
 8008d7c:	d1f9      	bne.n	8008d72 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8008d7e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <xTaskResumeAll+0xdc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d0ba      	beq.n	8008cfe <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	; (8008db8 <xTaskResumeAll+0xe4>)
 8008d8e:	601a      	str	r2, [r3, #0]
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008d98:	2401      	movs	r4, #1
 8008d9a:	e7b1      	b.n	8008d00 <xTaskResumeAll+0x2c>
 8008d9c:	20000bd8 	.word	0x20000bd8
 8008da0:	20000bcc 	.word	0x20000bcc
 8008da4:	20000c14 	.word	0x20000c14
 8008da8:	20000be0 	.word	0x20000be0
 8008dac:	20000b34 	.word	0x20000b34
 8008db0:	20000c58 	.word	0x20000c58
 8008db4:	20000bd4 	.word	0x20000bd4
 8008db8:	e000ed04 	.word	0xe000ed04
 8008dbc:	20000b40 	.word	0x20000b40

08008dc0 <vTaskDelay>:
	{
 8008dc0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008dc2:	b940      	cbnz	r0, 8008dd6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <vTaskDelay+0x40>)
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	f3bf 8f6f 	isb	sy
	}
 8008dd4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <vTaskDelay+0x44>)
 8008dd8:	6819      	ldr	r1, [r3, #0]
 8008dda:	b141      	cbz	r1, 8008dee <vTaskDelay+0x2e>
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	e7fe      	b.n	8008dec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008dee:	f7ff fed1 	bl	8008b94 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008df2:	f7ff fde1 	bl	80089b8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008df6:	f7ff ff6d 	bl	8008cd4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d0e2      	beq.n	8008dc4 <vTaskDelay+0x4>
 8008dfe:	e7e9      	b.n	8008dd4 <vTaskDelay+0x14>
 8008e00:	e000ed04 	.word	0xe000ed04
 8008e04:	20000bd8 	.word	0x20000bd8

08008e08 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e08:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <vTaskSwitchContext+0x60>)
{
 8008e0a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <vTaskSwitchContext+0x64>)
 8008e10:	b112      	cbz	r2, 8008e18 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008e12:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e14:	601a      	str	r2, [r3, #0]
}
 8008e16:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008e18:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008e1a:	4b15      	ldr	r3, [pc, #84]	; (8008e70 <vTaskSwitchContext+0x68>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e1e:	fab3 f383 	clz	r3, r3
 8008e22:	2214      	movs	r2, #20
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f1c3 031f 	rsb	r3, r3, #31
 8008e2a:	435a      	muls	r2, r3
 8008e2c:	4911      	ldr	r1, [pc, #68]	; (8008e74 <vTaskSwitchContext+0x6c>)
 8008e2e:	588c      	ldr	r4, [r1, r2]
 8008e30:	1888      	adds	r0, r1, r2
 8008e32:	b944      	cbnz	r4, 8008e46 <vTaskSwitchContext+0x3e>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	e7fe      	b.n	8008e44 <vTaskSwitchContext+0x3c>
 8008e46:	6844      	ldr	r4, [r0, #4]
 8008e48:	3208      	adds	r2, #8
 8008e4a:	6864      	ldr	r4, [r4, #4]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	4294      	cmp	r4, r2
 8008e50:	bf08      	it	eq
 8008e52:	6862      	ldreq	r2, [r4, #4]
 8008e54:	6044      	str	r4, [r0, #4]
 8008e56:	bf08      	it	eq
 8008e58:	6042      	streq	r2, [r0, #4]
 8008e5a:	2214      	movs	r2, #20
 8008e5c:	fb02 1303 	mla	r3, r2, r3, r1
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	68da      	ldr	r2, [r3, #12]
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <vTaskSwitchContext+0x70>)
 8008e66:	e7d5      	b.n	8008e14 <vTaskSwitchContext+0xc>
 8008e68:	20000bd8 	.word	0x20000bd8
 8008e6c:	20000c58 	.word	0x20000c58
 8008e70:	20000be0 	.word	0x20000be0
 8008e74:	20000b40 	.word	0x20000b40
 8008e78:	20000b34 	.word	0x20000b34

08008e7c <vTaskPlaceOnEventList>:
{
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008e80:	b940      	cbnz	r0, 8008e94 <vTaskPlaceOnEventList+0x18>
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	e7fe      	b.n	8008e92 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <vTaskPlaceOnEventList+0x30>)
 8008e96:	6819      	ldr	r1, [r3, #0]
 8008e98:	3118      	adds	r1, #24
 8008e9a:	f7ff f939 	bl	8008110 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e9e:	4620      	mov	r0, r4
}
 8008ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	f7ff bd87 	b.w	80089b8 <prvAddCurrentTaskToDelayedList>
 8008eaa:	bf00      	nop
 8008eac:	20000b34 	.word	0x20000b34

08008eb0 <vTaskPlaceOnEventListRestricted>:
	{
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008eb6:	b940      	cbnz	r0, 8008eca <vTaskPlaceOnEventListRestricted+0x1a>
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	e7fe      	b.n	8008ec8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008eca:	4b08      	ldr	r3, [pc, #32]	; (8008eec <vTaskPlaceOnEventListRestricted+0x3c>)
 8008ecc:	6819      	ldr	r1, [r3, #0]
 8008ece:	3118      	adds	r1, #24
 8008ed0:	f7ff f912 	bl	80080f8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008ed4:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ed6:	4621      	mov	r1, r4
 8008ed8:	bf08      	it	eq
 8008eda:	4628      	moveq	r0, r5
	}
 8008edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ee0:	bf18      	it	ne
 8008ee2:	f04f 30ff 	movne.w	r0, #4294967295
 8008ee6:	f7ff bd67 	b.w	80089b8 <prvAddCurrentTaskToDelayedList>
 8008eea:	bf00      	nop
 8008eec:	20000b34 	.word	0x20000b34

08008ef0 <xTaskRemoveFromEventList>:
{
 8008ef0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008ef2:	68c3      	ldr	r3, [r0, #12]
 8008ef4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008ef6:	b944      	cbnz	r4, 8008f0a <xTaskRemoveFromEventList+0x1a>
 8008ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	e7fe      	b.n	8008f08 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f0a:	f104 0518 	add.w	r5, r4, #24
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f7ff f915 	bl	800813e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f14:	4b11      	ldr	r3, [pc, #68]	; (8008f5c <xTaskRemoveFromEventList+0x6c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	b9e3      	cbnz	r3, 8008f54 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f1a:	1d25      	adds	r5, r4, #4
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f7ff f90e 	bl	800813e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f22:	2301      	movs	r3, #1
 8008f24:	490e      	ldr	r1, [pc, #56]	; (8008f60 <xTaskRemoveFromEventList+0x70>)
 8008f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f28:	6808      	ldr	r0, [r1, #0]
 8008f2a:	4093      	lsls	r3, r2
 8008f2c:	4303      	orrs	r3, r0
 8008f2e:	2014      	movs	r0, #20
 8008f30:	600b      	str	r3, [r1, #0]
 8008f32:	4629      	mov	r1, r5
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <xTaskRemoveFromEventList+0x74>)
 8008f36:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f3a:	f7ff f8dd 	bl	80080f8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f3e:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <xTaskRemoveFromEventList+0x78>)
 8008f40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f46:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008f48:	bf85      	ittet	hi
 8008f4a:	2001      	movhi	r0, #1
 8008f4c:	4b07      	ldrhi	r3, [pc, #28]	; (8008f6c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8008f4e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008f50:	6018      	strhi	r0, [r3, #0]
}
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f54:	4629      	mov	r1, r5
 8008f56:	4806      	ldr	r0, [pc, #24]	; (8008f70 <xTaskRemoveFromEventList+0x80>)
 8008f58:	e7ef      	b.n	8008f3a <xTaskRemoveFromEventList+0x4a>
 8008f5a:	bf00      	nop
 8008f5c:	20000bd8 	.word	0x20000bd8
 8008f60:	20000be0 	.word	0x20000be0
 8008f64:	20000b40 	.word	0x20000b40
 8008f68:	20000b34 	.word	0x20000b34
 8008f6c:	20000c58 	.word	0x20000c58
 8008f70:	20000c14 	.word	0x20000c14

08008f74 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <vTaskInternalSetTimeOutState+0x10>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f7a:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <vTaskInternalSetTimeOutState+0x14>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6043      	str	r3, [r0, #4]
}
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	20000c10 	.word	0x20000c10
 8008f88:	20000c54 	.word	0x20000c54

08008f8c <xTaskCheckForTimeOut>:
{
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008f90:	4605      	mov	r5, r0
 8008f92:	b940      	cbnz	r0, 8008fa6 <xTaskCheckForTimeOut+0x1a>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	e7fe      	b.n	8008fa4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008fa6:	b941      	cbnz	r1, 8008fba <xTaskCheckForTimeOut+0x2e>
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008fba:	f000 fad3 	bl	8009564 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <xTaskCheckForTimeOut+0x70>)
 8008fc0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	1c5a      	adds	r2, r3, #1
 8008fc6:	d010      	beq.n	8008fea <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fc8:	480d      	ldr	r0, [pc, #52]	; (8009000 <xTaskCheckForTimeOut+0x74>)
 8008fca:	682e      	ldr	r6, [r5, #0]
 8008fcc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fce:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008fd0:	4286      	cmp	r6, r0
 8008fd2:	d001      	beq.n	8008fd8 <xTaskCheckForTimeOut+0x4c>
 8008fd4:	428a      	cmp	r2, r1
 8008fd6:	d90f      	bls.n	8008ff8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fd8:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008fda:	4283      	cmp	r3, r0
 8008fdc:	d90a      	bls.n	8008ff4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008fde:	1a5b      	subs	r3, r3, r1
 8008fe0:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe2:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008fe4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008fe6:	f7ff ffc5 	bl	8008f74 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008fea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008fec:	f000 fadc 	bl	80095a8 <vPortExitCritical>
}
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008ff8:	2401      	movs	r4, #1
 8008ffa:	e7f7      	b.n	8008fec <xTaskCheckForTimeOut+0x60>
 8008ffc:	20000c54 	.word	0x20000c54
 8009000:	20000c10 	.word	0x20000c10

08009004 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009004:	2201      	movs	r2, #1
 8009006:	4b01      	ldr	r3, [pc, #4]	; (800900c <vTaskMissedYield+0x8>)
 8009008:	601a      	str	r2, [r3, #0]
}
 800900a:	4770      	bx	lr
 800900c:	20000c58 	.word	0x20000c58

08009010 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <xTaskGetSchedulerState+0x18>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	b133      	cbz	r3, 8009024 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <xTaskGetSchedulerState+0x1c>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800901c:	bf0c      	ite	eq
 800901e:	2002      	moveq	r0, #2
 8009020:	2000      	movne	r0, #0
 8009022:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009024:	2001      	movs	r0, #1
	}
 8009026:	4770      	bx	lr
 8009028:	20000c28 	.word	0x20000c28
 800902c:	20000bd8 	.word	0x20000bd8

08009030 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009032:	4c11      	ldr	r4, [pc, #68]	; (8009078 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009034:	f000 fa96 	bl	8009564 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009038:	6825      	ldr	r5, [r4, #0]
 800903a:	b9bd      	cbnz	r5, 800906c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800903c:	4f0f      	ldr	r7, [pc, #60]	; (800907c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800903e:	4e10      	ldr	r6, [pc, #64]	; (8009080 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff f84b 	bl	80080dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff f848 	bl	80080dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800904e:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8009050:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009052:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009054:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8009056:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009058:	4a0c      	ldr	r2, [pc, #48]	; (800908c <prvCheckForValidListAndQueue+0x5c>)
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <prvCheckForValidListAndQueue+0x60>)
 800905c:	9500      	str	r5, [sp, #0]
 800905e:	f7ff f941 	bl	80082e4 <xQueueGenericCreateStatic>
 8009062:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009064:	b110      	cbz	r0, 800906c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009066:	490b      	ldr	r1, [pc, #44]	; (8009094 <prvCheckForValidListAndQueue+0x64>)
 8009068:	f7ff fb3a 	bl	80086e0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009072:	f000 ba99 	b.w	80095a8 <vPortExitCritical>
 8009076:	bf00      	nop
 8009078:	20000d50 	.word	0x20000d50
 800907c:	20000cdc 	.word	0x20000cdc
 8009080:	20000cf0 	.word	0x20000cf0
 8009084:	20000c5c 	.word	0x20000c5c
 8009088:	20000c60 	.word	0x20000c60
 800908c:	20000c64 	.word	0x20000c64
 8009090:	20000d08 	.word	0x20000d08
 8009094:	0800e7de 	.word	0x0800e7de

08009098 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009098:	4291      	cmp	r1, r2
{
 800909a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800909c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800909e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80090a0:	d80a      	bhi.n	80090b8 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a2:	1ad2      	subs	r2, r2, r3
 80090a4:	6983      	ldr	r3, [r0, #24]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d20d      	bcs.n	80090c6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <prvInsertTimerInActiveList+0x34>)
 80090ac:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	f7ff f82e 	bl	8008110 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80090b4:	2000      	movs	r0, #0
}
 80090b6:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d201      	bcs.n	80090c0 <prvInsertTimerInActiveList+0x28>
 80090bc:	4299      	cmp	r1, r3
 80090be:	d202      	bcs.n	80090c6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090c0:	4b03      	ldr	r3, [pc, #12]	; (80090d0 <prvInsertTimerInActiveList+0x38>)
 80090c2:	1d01      	adds	r1, r0, #4
 80090c4:	e7f3      	b.n	80090ae <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80090c6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80090c8:	e7f5      	b.n	80090b6 <prvInsertTimerInActiveList+0x1e>
 80090ca:	bf00      	nop
 80090cc:	20000c60 	.word	0x20000c60
 80090d0:	20000c5c 	.word	0x20000c5c

080090d4 <xTimerCreateTimerTask>:
{
 80090d4:	b510      	push	{r4, lr}
 80090d6:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80090d8:	f7ff ffaa 	bl	8009030 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80090dc:	4b12      	ldr	r3, [pc, #72]	; (8009128 <xTimerCreateTimerTask+0x54>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	b1b3      	cbz	r3, 8009110 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090e2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090e4:	aa07      	add	r2, sp, #28
 80090e6:	a906      	add	r1, sp, #24
 80090e8:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090ea:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090ee:	f7f7 fff1 	bl	80010d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80090f2:	9b05      	ldr	r3, [sp, #20]
 80090f4:	9a07      	ldr	r2, [sp, #28]
 80090f6:	9302      	str	r3, [sp, #8]
 80090f8:	9b06      	ldr	r3, [sp, #24]
 80090fa:	490c      	ldr	r1, [pc, #48]	; (800912c <xTimerCreateTimerTask+0x58>)
 80090fc:	9301      	str	r3, [sp, #4]
 80090fe:	2302      	movs	r3, #2
 8009100:	480b      	ldr	r0, [pc, #44]	; (8009130 <xTimerCreateTimerTask+0x5c>)
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	4623      	mov	r3, r4
 8009106:	f7ff fc9d 	bl	8008a44 <xTaskCreateStatic>
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <xTimerCreateTimerTask+0x60>)
 800910c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800910e:	b940      	cbnz	r0, 8009122 <xTimerCreateTimerTask+0x4e>
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8009120:	e7fe      	b.n	8009120 <xTimerCreateTimerTask+0x4c>
}
 8009122:	2001      	movs	r0, #1
 8009124:	b008      	add	sp, #32
 8009126:	bd10      	pop	{r4, pc}
 8009128:	20000d50 	.word	0x20000d50
 800912c:	0800e7e3 	.word	0x0800e7e3
 8009130:	080092d1 	.word	0x080092d1
 8009134:	20000d54 	.word	0x20000d54

08009138 <xTimerCreate>:
	{
 8009138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800913c:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800913e:	202c      	movs	r0, #44	; 0x2c
	{
 8009140:	460d      	mov	r5, r1
 8009142:	4617      	mov	r7, r2
 8009144:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009146:	f000 fb3f 	bl	80097c8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 800914a:	4604      	mov	r4, r0
 800914c:	b1c0      	cbz	r0, 8009180 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800914e:	b945      	cbnz	r5, 8009162 <xTimerCreate+0x2a>
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	e7fe      	b.n	8009160 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8009162:	f7ff ff65 	bl	8009030 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009166:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009168:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800916c:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 800916e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8009172:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009174:	1d20      	adds	r0, r4, #4
 8009176:	f7fe ffbc 	bl	80080f2 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8009180:	4620      	mov	r0, r4
 8009182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009186 <xTimerCreateStatic>:
	{
 8009186:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800918a:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 800918c:	232c      	movs	r3, #44	; 0x2c
 800918e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009190:	9b01      	ldr	r3, [sp, #4]
	{
 8009192:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8009194:	2b2c      	cmp	r3, #44	; 0x2c
	{
 8009196:	460d      	mov	r5, r1
 8009198:	4617      	mov	r7, r2
 800919a:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 800919c:	d008      	beq.n	80091b0 <xTimerCreateStatic+0x2a>
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	e7fe      	b.n	80091ae <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 80091b0:	b944      	cbnz	r4, 80091c4 <xTimerCreateStatic+0x3e>
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	e7fe      	b.n	80091c2 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80091c4:	b941      	cbnz	r1, 80091d8 <xTimerCreateStatic+0x52>
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	e7fe      	b.n	80091d6 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 80091d8:	f7ff ff2a 	bl	8009030 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80091dc:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80091de:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80091e0:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 80091e2:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 80091e6:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 80091ea:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80091ec:	f7fe ff81 	bl	80080f2 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80091f0:	2301      	movs	r3, #1
	}
 80091f2:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80091f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 80091f8:	b002      	add	sp, #8
 80091fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009200 <xTimerGenericCommand>:
{
 8009200:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009202:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8009204:	4604      	mov	r4, r0
{
 8009206:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009208:	b940      	cbnz	r0, 800921c <xTimerGenericCommand+0x1c>
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	e7fe      	b.n	800921a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800921c:	4d0c      	ldr	r5, [pc, #48]	; (8009250 <xTimerGenericCommand+0x50>)
 800921e:	6828      	ldr	r0, [r5, #0]
 8009220:	b178      	cbz	r0, 8009242 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009222:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009224:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009228:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800922a:	dc0c      	bgt.n	8009246 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800922c:	f7ff fef0 	bl	8009010 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009230:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009232:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009234:	bf14      	ite	ne
 8009236:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009238:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800923a:	6828      	ldr	r0, [r5, #0]
 800923c:	a901      	add	r1, sp, #4
 800923e:	f7ff f89b 	bl	8008378 <xQueueGenericSend>
}
 8009242:	b004      	add	sp, #16
 8009244:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009246:	2300      	movs	r3, #0
 8009248:	a901      	add	r1, sp, #4
 800924a:	f7ff f947 	bl	80084dc <xQueueGenericSendFromISR>
 800924e:	e7f8      	b.n	8009242 <xTimerGenericCommand+0x42>
 8009250:	20000d50 	.word	0x20000d50

08009254 <prvSwitchTimerLists>:
{
 8009254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009258:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800925c:	4d1a      	ldr	r5, [pc, #104]	; (80092c8 <prvSwitchTimerLists+0x74>)
 800925e:	682b      	ldr	r3, [r5, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	b932      	cbnz	r2, 8009272 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8009264:	4a19      	ldr	r2, [pc, #100]	; (80092cc <prvSwitchTimerLists+0x78>)
 8009266:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009268:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800926a:	6029      	str	r1, [r5, #0]
}
 800926c:	b002      	add	sp, #8
 800926e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009272:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009274:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009276:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009278:	1d27      	adds	r7, r4, #4
 800927a:	4638      	mov	r0, r7
 800927c:	f7fe ff5f 	bl	800813e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009280:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009282:	4620      	mov	r0, r4
 8009284:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009286:	69e3      	ldr	r3, [r4, #28]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d1e8      	bne.n	800925e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800928c:	69a3      	ldr	r3, [r4, #24]
 800928e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009290:	429e      	cmp	r6, r3
 8009292:	d206      	bcs.n	80092a2 <prvSwitchTimerLists+0x4e>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009294:	4639      	mov	r1, r7
 8009296:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009298:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800929a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800929c:	f7fe ff38 	bl	8008110 <vListInsert>
 80092a0:	e7dd      	b.n	800925e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092a2:	2300      	movs	r3, #0
 80092a4:	4632      	mov	r2, r6
 80092a6:	4619      	mov	r1, r3
 80092a8:	4620      	mov	r0, r4
 80092aa:	f8cd 8000 	str.w	r8, [sp]
 80092ae:	f7ff ffa7 	bl	8009200 <xTimerGenericCommand>
				configASSERT( xResult );
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d1d3      	bne.n	800925e <prvSwitchTimerLists+0xa>
 80092b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	e7fe      	b.n	80092c6 <prvSwitchTimerLists+0x72>
 80092c8:	20000c5c 	.word	0x20000c5c
 80092cc:	20000c60 	.word	0x20000c60

080092d0 <prvTimerTask>:
{
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092d4:	4e72      	ldr	r6, [pc, #456]	; (80094a0 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 80092d6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80094b0 <prvTimerTask+0x1e0>
 80092da:	46b0      	mov	r8, r6
{
 80092dc:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092de:	6833      	ldr	r3, [r6, #0]
 80092e0:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 80092e4:	f1bb 0f00 	cmp.w	fp, #0
 80092e8:	d04a      	beq.n	8009380 <prvTimerTask+0xb0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 80092f0:	f7ff fc50 	bl	8008b94 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80092f4:	f7ff fc56 	bl	8008ba4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80092f8:	4d6a      	ldr	r5, [pc, #424]	; (80094a4 <prvTimerTask+0x1d4>)
	xTimeNow = xTaskGetTickCount();
 80092fa:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	462f      	mov	r7, r5
 8009300:	4298      	cmp	r0, r3
 8009302:	d23f      	bcs.n	8009384 <prvTimerTask+0xb4>
		prvSwitchTimerLists();
 8009304:	f7ff ffa6 	bl	8009254 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009308:	602c      	str	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800930a:	f7ff fce3 	bl	8008cd4 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800930e:	f04f 0b00 	mov.w	fp, #0
 8009312:	f8df a198 	ldr.w	sl, [pc, #408]	; 80094ac <prvTimerTask+0x1dc>
 8009316:	2200      	movs	r2, #0
 8009318:	f8da 0000 	ldr.w	r0, [sl]
 800931c:	a903      	add	r1, sp, #12
 800931e:	f7ff f93f 	bl	80085a0 <xQueueReceive>
 8009322:	2800      	cmp	r0, #0
 8009324:	d0db      	beq.n	80092de <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009326:	9b03      	ldr	r3, [sp, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	dbf4      	blt.n	8009316 <prvTimerTask+0x46>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800932c:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800932e:	6963      	ldr	r3, [r4, #20]
 8009330:	b113      	cbz	r3, 8009338 <prvTimerTask+0x68>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009332:	1d20      	adds	r0, r4, #4
 8009334:	f7fe ff03 	bl	800813e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8009338:	f7ff fc34 	bl	8008ba4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800933c:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 800933e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8009340:	4298      	cmp	r0, r3
 8009342:	d201      	bcs.n	8009348 <prvTimerTask+0x78>
		prvSwitchTimerLists();
 8009344:	f7ff ff86 	bl	8009254 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009348:	9b03      	ldr	r3, [sp, #12]
 800934a:	603d      	str	r5, [r7, #0]
			switch( xMessage.xMessageID )
 800934c:	2b09      	cmp	r3, #9
 800934e:	d8e2      	bhi.n	8009316 <prvTimerTask+0x46>
 8009350:	a201      	add	r2, pc, #4	; (adr r2, 8009358 <prvTimerTask+0x88>)
 8009352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009356:	bf00      	nop
 8009358:	08009419 	.word	0x08009419
 800935c:	08009419 	.word	0x08009419
 8009360:	08009419 	.word	0x08009419
 8009364:	08009317 	.word	0x08009317
 8009368:	08009467 	.word	0x08009467
 800936c:	0800948d 	.word	0x0800948d
 8009370:	08009419 	.word	0x08009419
 8009374:	08009419 	.word	0x08009419
 8009378:	08009317 	.word	0x08009317
 800937c:	08009467 	.word	0x08009467
		xNextExpireTime = ( TickType_t ) 0U;
 8009380:	46da      	mov	sl, fp
 8009382:	e7b5      	b.n	80092f0 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8009384:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009386:	f1bb 0f00 	cmp.w	fp, #0
 800938a:	d02a      	beq.n	80093e2 <prvTimerTask+0x112>
 800938c:	4582      	cmp	sl, r0
 800938e:	d841      	bhi.n	8009414 <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8009390:	f7ff fca0 	bl	8008cd4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009394:	f8d8 3000 	ldr.w	r3, [r8]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800939c:	1d28      	adds	r0, r5, #4
 800939e:	f7fe fece 	bl	800813e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80093a2:	69eb      	ldr	r3, [r5, #28]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d118      	bne.n	80093da <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80093a8:	69a9      	ldr	r1, [r5, #24]
 80093aa:	4653      	mov	r3, sl
 80093ac:	4622      	mov	r2, r4
 80093ae:	4628      	mov	r0, r5
 80093b0:	4451      	add	r1, sl
 80093b2:	f7ff fe71 	bl	8009098 <prvInsertTimerInActiveList>
 80093b6:	b180      	cbz	r0, 80093da <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b8:	2300      	movs	r3, #0
 80093ba:	4652      	mov	r2, sl
 80093bc:	4619      	mov	r1, r3
 80093be:	4628      	mov	r0, r5
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	f7ff ff1d 	bl	8009200 <xTimerGenericCommand>
			configASSERT( xResult );
 80093c6:	b940      	cbnz	r0, 80093da <prvTimerTask+0x10a>
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	e7fe      	b.n	80093d8 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80093da:	4628      	mov	r0, r5
 80093dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093de:	4798      	blx	r3
}
 80093e0:	e795      	b.n	800930e <prvTimerTask+0x3e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093e2:	4b31      	ldr	r3, [pc, #196]	; (80094a8 <prvTimerTask+0x1d8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	fab2 f282 	clz	r2, r2
 80093ec:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093ee:	4b2f      	ldr	r3, [pc, #188]	; (80094ac <prvTimerTask+0x1dc>)
 80093f0:	ebaa 0104 	sub.w	r1, sl, r4
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	f7ff f985 	bl	8008704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093fa:	f7ff fc6b 	bl	8008cd4 <xTaskResumeAll>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d185      	bne.n	800930e <prvTimerTask+0x3e>
					portYIELD_WITHIN_API();
 8009402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009406:	f8c9 3000 	str.w	r3, [r9]
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	e77c      	b.n	800930e <prvTimerTask+0x3e>
 8009414:	2200      	movs	r2, #0
 8009416:	e7ea      	b.n	80093ee <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009418:	69a1      	ldr	r1, [r4, #24]
 800941a:	9b04      	ldr	r3, [sp, #16]
 800941c:	462a      	mov	r2, r5
 800941e:	4620      	mov	r0, r4
 8009420:	4419      	add	r1, r3
 8009422:	f7ff fe39 	bl	8009098 <prvInsertTimerInActiveList>
 8009426:	2800      	cmp	r0, #0
 8009428:	f43f af75 	beq.w	8009316 <prvTimerTask+0x46>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800942c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942e:	4620      	mov	r0, r4
 8009430:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009432:	69e3      	ldr	r3, [r4, #28]
 8009434:	2b01      	cmp	r3, #1
 8009436:	f47f af6e 	bne.w	8009316 <prvTimerTask+0x46>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800943a:	2300      	movs	r3, #0
 800943c:	69a2      	ldr	r2, [r4, #24]
 800943e:	9904      	ldr	r1, [sp, #16]
 8009440:	4620      	mov	r0, r4
 8009442:	440a      	add	r2, r1
 8009444:	f8cd b000 	str.w	fp, [sp]
 8009448:	4619      	mov	r1, r3
 800944a:	f7ff fed9 	bl	8009200 <xTimerGenericCommand>
							configASSERT( xResult );
 800944e:	2800      	cmp	r0, #0
 8009450:	f47f af61 	bne.w	8009316 <prvTimerTask+0x46>
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	e7fe      	b.n	8009464 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009466:	9904      	ldr	r1, [sp, #16]
 8009468:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800946a:	b941      	cbnz	r1, 800947e <prvTimerTask+0x1ae>
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	e7fe      	b.n	800947c <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800947e:	462b      	mov	r3, r5
 8009480:	462a      	mov	r2, r5
 8009482:	4620      	mov	r0, r4
 8009484:	4429      	add	r1, r5
 8009486:	f7ff fe07 	bl	8009098 <prvInsertTimerInActiveList>
					break;
 800948a:	e744      	b.n	8009316 <prvTimerTask+0x46>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800948c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009490:	2b00      	cmp	r3, #0
 8009492:	f47f af40 	bne.w	8009316 <prvTimerTask+0x46>
							vPortFree( pxTimer );
 8009496:	4620      	mov	r0, r4
 8009498:	f000 fa20 	bl	80098dc <vPortFree>
 800949c:	e73b      	b.n	8009316 <prvTimerTask+0x46>
 800949e:	bf00      	nop
 80094a0:	20000c5c 	.word	0x20000c5c
 80094a4:	20000d04 	.word	0x20000d04
 80094a8:	20000c60 	.word	0x20000c60
 80094ac:	20000d50 	.word	0x20000d50
 80094b0:	e000ed04 	.word	0xe000ed04

080094b4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80094b4:	4806      	ldr	r0, [pc, #24]	; (80094d0 <prvPortStartFirstTask+0x1c>)
 80094b6:	6800      	ldr	r0, [r0, #0]
 80094b8:	6800      	ldr	r0, [r0, #0]
 80094ba:	f380 8808 	msr	MSP, r0
 80094be:	b662      	cpsie	i
 80094c0:	b661      	cpsie	f
 80094c2:	f3bf 8f4f 	dsb	sy
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	df00      	svc	0
 80094cc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094ce:	0000      	.short	0x0000
 80094d0:	e000ed08 	.word	0xe000ed08

080094d4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80094d4:	2300      	movs	r3, #0
{
 80094d6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80094d8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80094da:	4b0d      	ldr	r3, [pc, #52]	; (8009510 <prvTaskExitError+0x3c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3301      	adds	r3, #1
 80094e0:	d008      	beq.n	80094f4 <prvTaskExitError+0x20>
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	e7fe      	b.n	80094f2 <prvTaskExitError+0x1e>
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	f383 8811 	msr	BASEPRI, r3
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0fc      	beq.n	8009504 <prvTaskExitError+0x30>
}
 800950a:	b002      	add	sp, #8
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	2000011c 	.word	0x2000011c

08009514 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009518:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800951e:	f021 0101 	bic.w	r1, r1, #1
 8009522:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009526:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800952a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800952e:	3840      	subs	r0, #64	; 0x40
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	080094d5 	.word	0x080094d5
	...

08009540 <SVC_Handler>:
	__asm volatile (
 8009540:	4b07      	ldr	r3, [pc, #28]	; (8009560 <pxCurrentTCBConst2>)
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	6808      	ldr	r0, [r1, #0]
 8009546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800954a:	f380 8809 	msr	PSP, r0
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f04f 0000 	mov.w	r0, #0
 8009556:	f380 8811 	msr	BASEPRI, r0
 800955a:	f04e 0e0d 	orr.w	lr, lr, #13
 800955e:	4770      	bx	lr

08009560 <pxCurrentTCBConst2>:
 8009560:	20000b34 	.word	0x20000b34

08009564 <vPortEnterCritical>:
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009574:	4a0a      	ldr	r2, [pc, #40]	; (80095a0 <vPortEnterCritical+0x3c>)
 8009576:	6813      	ldr	r3, [r2, #0]
 8009578:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800957a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800957c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800957e:	d10d      	bne.n	800959c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <vPortEnterCritical+0x40>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009588:	d008      	beq.n	800959c <vPortEnterCritical+0x38>
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	e7fe      	b.n	800959a <vPortEnterCritical+0x36>
	}
}
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	2000011c 	.word	0x2000011c
 80095a4:	e000ed04 	.word	0xe000ed04

080095a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80095a8:	4a08      	ldr	r2, [pc, #32]	; (80095cc <vPortExitCritical+0x24>)
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	b943      	cbnz	r3, 80095c0 <vPortExitCritical+0x18>
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	e7fe      	b.n	80095be <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80095c0:	3b01      	subs	r3, #1
 80095c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095c4:	b90b      	cbnz	r3, 80095ca <vPortExitCritical+0x22>
	__asm volatile
 80095c6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80095ca:	4770      	bx	lr
 80095cc:	2000011c 	.word	0x2000011c

080095d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095d0:	f3ef 8009 	mrs	r0, PSP
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	4b0d      	ldr	r3, [pc, #52]	; (8009610 <pxCurrentTCBConst>)
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80095e0:	6010      	str	r0, [r2, #0]
 80095e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80095e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095ea:	f380 8811 	msr	BASEPRI, r0
 80095ee:	f7ff fc0b 	bl	8008e08 <vTaskSwitchContext>
 80095f2:	f04f 0000 	mov.w	r0, #0
 80095f6:	f380 8811 	msr	BASEPRI, r0
 80095fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80095fe:	6819      	ldr	r1, [r3, #0]
 8009600:	6808      	ldr	r0, [r1, #0]
 8009602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009606:	f380 8809 	msr	PSP, r0
 800960a:	f3bf 8f6f 	isb	sy
 800960e:	4770      	bx	lr

08009610 <pxCurrentTCBConst>:
 8009610:	20000b34 	.word	0x20000b34

08009614 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009614:	b508      	push	{r3, lr}
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009626:	f7ff fac3 	bl	8008bb0 <xTaskIncrementTick>
 800962a:	b118      	cbz	r0, 8009634 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800962c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009630:	4b02      	ldr	r3, [pc, #8]	; (800963c <SysTick_Handler+0x28>)
 8009632:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009634:	2300      	movs	r3, #0
 8009636:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800963a:	bd08      	pop	{r3, pc}
 800963c:	e000ed04 	.word	0xe000ed04

08009640 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009640:	2300      	movs	r3, #0
 8009642:	4a08      	ldr	r2, [pc, #32]	; (8009664 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009644:	4908      	ldr	r1, [pc, #32]	; (8009668 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009648:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800964a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <vPortSetupTimerInterrupt+0x2c>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	fbb3 f3f1 	udiv	r3, r3, r1
 8009656:	4906      	ldr	r1, [pc, #24]	; (8009670 <vPortSetupTimerInterrupt+0x30>)
 8009658:	3b01      	subs	r3, #1
 800965a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800965c:	2307      	movs	r3, #7
 800965e:	6013      	str	r3, [r2, #0]
}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	e000e010 	.word	0xe000e010
 8009668:	e000e018 	.word	0xe000e018
 800966c:	20000000 	.word	0x20000000
 8009670:	e000e014 	.word	0xe000e014

08009674 <xPortStartScheduler>:
{
 8009674:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009676:	4b26      	ldr	r3, [pc, #152]	; (8009710 <xPortStartScheduler+0x9c>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009678:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009680:	22ff      	movs	r2, #255	; 0xff
 8009682:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009684:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009686:	4a23      	ldr	r2, [pc, #140]	; (8009714 <xPortStartScheduler+0xa0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800968e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009692:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009696:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009698:	2307      	movs	r3, #7
 800969a:	4a1f      	ldr	r2, [pc, #124]	; (8009718 <xPortStartScheduler+0xa4>)
 800969c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800969e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80096a2:	1e5c      	subs	r4, r3, #1
 80096a4:	0600      	lsls	r0, r0, #24
 80096a6:	d40c      	bmi.n	80096c2 <xPortStartScheduler+0x4e>
 80096a8:	b111      	cbz	r1, 80096b0 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	d011      	beq.n	80096d4 <xPortStartScheduler+0x60>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	e7fe      	b.n	80096c0 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80096c2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80096c6:	2101      	movs	r1, #1
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	f88d 3003 	strb.w	r3, [sp, #3]
 80096d0:	4623      	mov	r3, r4
 80096d2:	e7e4      	b.n	800969e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096d4:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 80096d8:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80096da:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	4a0c      	ldr	r2, [pc, #48]	; (8009710 <xPortStartScheduler+0x9c>)
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80096e4:	4b0d      	ldr	r3, [pc, #52]	; (800971c <xPortStartScheduler+0xa8>)
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80096ec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80096f4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80096f6:	f7ff ffa3 	bl	8009640 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <xPortStartScheduler+0xac>)
 80096fc:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80096fe:	f7ff fed9 	bl	80094b4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009702:	f7ff fb81 	bl	8008e08 <vTaskSwitchContext>
	prvTaskExitError();
 8009706:	f7ff fee5 	bl	80094d4 <prvTaskExitError>
}
 800970a:	4620      	mov	r0, r4
 800970c:	b002      	add	sp, #8
 800970e:	bd10      	pop	{r4, pc}
 8009710:	e000e400 	.word	0xe000e400
 8009714:	20000d58 	.word	0x20000d58
 8009718:	20000d5c 	.word	0x20000d5c
 800971c:	e000ed20 	.word	0xe000ed20
 8009720:	2000011c 	.word	0x2000011c

08009724 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009724:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009728:	2b0f      	cmp	r3, #15
 800972a:	d90e      	bls.n	800974a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972c:	4a10      	ldr	r2, [pc, #64]	; (8009770 <vPortValidateInterruptPriority+0x4c>)
 800972e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009730:	4a10      	ldr	r2, [pc, #64]	; (8009774 <vPortValidateInterruptPriority+0x50>)
 8009732:	7812      	ldrb	r2, [r2, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d908      	bls.n	800974a <vPortValidateInterruptPriority+0x26>
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	e7fe      	b.n	8009748 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800974a:	4b0b      	ldr	r3, [pc, #44]	; (8009778 <vPortValidateInterruptPriority+0x54>)
 800974c:	4a0b      	ldr	r2, [pc, #44]	; (800977c <vPortValidateInterruptPriority+0x58>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009756:	4293      	cmp	r3, r2
 8009758:	d908      	bls.n	800976c <vPortValidateInterruptPriority+0x48>
 800975a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	e7fe      	b.n	800976a <vPortValidateInterruptPriority+0x46>
	}
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	e000e3f0 	.word	0xe000e3f0
 8009774:	20000d58 	.word	0x20000d58
 8009778:	e000ed0c 	.word	0xe000ed0c
 800977c:	20000d5c 	.word	0x20000d5c

08009780 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009780:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009782:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvInsertBlockIntoFreeList+0x40>)
 8009784:	461a      	mov	r2, r3
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4283      	cmp	r3, r0
 800978a:	d3fb      	bcc.n	8009784 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800978c:	6854      	ldr	r4, [r2, #4]
 800978e:	1911      	adds	r1, r2, r4
 8009790:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009792:	bf01      	itttt	eq
 8009794:	6841      	ldreq	r1, [r0, #4]
 8009796:	4610      	moveq	r0, r2
 8009798:	1909      	addeq	r1, r1, r4
 800979a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800979c:	6844      	ldr	r4, [r0, #4]
 800979e:	1901      	adds	r1, r0, r4
 80097a0:	428b      	cmp	r3, r1
 80097a2:	d107      	bne.n	80097b4 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097a4:	4907      	ldr	r1, [pc, #28]	; (80097c4 <prvInsertBlockIntoFreeList+0x44>)
 80097a6:	6809      	ldr	r1, [r1, #0]
 80097a8:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097aa:	bf1f      	itttt	ne
 80097ac:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80097ae:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097b0:	1909      	addne	r1, r1, r4
 80097b2:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80097b4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80097b6:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80097b8:	bf18      	it	ne
 80097ba:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097bc:	bd10      	pop	{r4, pc}
 80097be:	bf00      	nop
 80097c0:	20001970 	.word	0x20001970
 80097c4:	20000d60 	.word	0x20000d60

080097c8 <pvPortMalloc>:
{
 80097c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097cc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80097ce:	f7ff f9e1 	bl	8008b94 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80097d2:	4b3b      	ldr	r3, [pc, #236]	; (80098c0 <pvPortMalloc+0xf8>)
 80097d4:	483b      	ldr	r0, [pc, #236]	; (80098c4 <pvPortMalloc+0xfc>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	469c      	mov	ip, r3
 80097da:	b9d2      	cbnz	r2, 8009812 <pvPortMalloc+0x4a>
	xStart.xBlockSize = ( size_t ) 0;
 80097dc:	2100      	movs	r1, #0
	uxAddress = ( size_t ) ucHeap;
 80097de:	4a3a      	ldr	r2, [pc, #232]	; (80098c8 <pvPortMalloc+0x100>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097e0:	4b3a      	ldr	r3, [pc, #232]	; (80098cc <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097e2:	0755      	lsls	r5, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097e4:	bf1c      	itt	ne
 80097e6:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097e8:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097ec:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80097ee:	6059      	str	r1, [r3, #4]
	uxAddress -= xHeapStructSize;
 80097f0:	4b37      	ldr	r3, [pc, #220]	; (80098d0 <pvPortMalloc+0x108>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097f2:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80097f6:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097fa:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097fc:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 8009800:	f8cc 3000 	str.w	r3, [ip]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009804:	4b33      	ldr	r3, [pc, #204]	; (80098d4 <pvPortMalloc+0x10c>)
 8009806:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009808:	4b33      	ldr	r3, [pc, #204]	; (80098d8 <pvPortMalloc+0x110>)
 800980a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800980c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009810:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009812:	6807      	ldr	r7, [r0, #0]
 8009814:	4227      	tst	r7, r4
 8009816:	d14e      	bne.n	80098b6 <pvPortMalloc+0xee>
			if( xWantedSize > 0 )
 8009818:	2c00      	cmp	r4, #0
 800981a:	d03f      	beq.n	800989c <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 800981c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009820:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009822:	bf1c      	itt	ne
 8009824:	f023 0307 	bicne.w	r3, r3, #7
 8009828:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800982a:	2b00      	cmp	r3, #0
 800982c:	d043      	beq.n	80098b6 <pvPortMalloc+0xee>
 800982e:	4a2a      	ldr	r2, [pc, #168]	; (80098d8 <pvPortMalloc+0x110>)
 8009830:	6816      	ldr	r6, [r2, #0]
 8009832:	4690      	mov	r8, r2
 8009834:	429e      	cmp	r6, r3
 8009836:	d33e      	bcc.n	80098b6 <pvPortMalloc+0xee>
				pxBlock = xStart.pxNextFreeBlock;
 8009838:	4a24      	ldr	r2, [pc, #144]	; (80098cc <pvPortMalloc+0x104>)
 800983a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983c:	6869      	ldr	r1, [r5, #4]
 800983e:	4299      	cmp	r1, r3
 8009840:	d201      	bcs.n	8009846 <pvPortMalloc+0x7e>
 8009842:	6828      	ldr	r0, [r5, #0]
 8009844:	b9a8      	cbnz	r0, 8009872 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 8009846:	f8dc 0000 	ldr.w	r0, [ip]
 800984a:	42a8      	cmp	r0, r5
 800984c:	d033      	beq.n	80098b6 <pvPortMalloc+0xee>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800984e:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009850:	1ac9      	subs	r1, r1, r3
 8009852:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009854:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009856:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	d912      	bls.n	8009880 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800985a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800985c:	0742      	lsls	r2, r0, #29
 800985e:	d00b      	beq.n	8009878 <pvPortMalloc+0xb0>
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	e7fe      	b.n	8009870 <pvPortMalloc+0xa8>
 8009872:	462a      	mov	r2, r5
 8009874:	4605      	mov	r5, r0
 8009876:	e7e1      	b.n	800983c <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009878:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800987a:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800987c:	f7ff ff80 	bl	8009780 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009880:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009882:	4914      	ldr	r1, [pc, #80]	; (80098d4 <pvPortMalloc+0x10c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009884:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009886:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8009888:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800988a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800988c:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009890:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009892:	bf38      	it	cc
 8009894:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009896:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009898:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800989a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800989c:	f7ff fa1a 	bl	8008cd4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098a0:	0763      	lsls	r3, r4, #29
 80098a2:	d00a      	beq.n	80098ba <pvPortMalloc+0xf2>
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	f383 8811 	msr	BASEPRI, r3
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	f3bf 8f4f 	dsb	sy
 80098b4:	e7fe      	b.n	80098b4 <pvPortMalloc+0xec>
void *pvReturn = NULL;
 80098b6:	2400      	movs	r4, #0
 80098b8:	e7f0      	b.n	800989c <pvPortMalloc+0xd4>
}
 80098ba:	4620      	mov	r0, r4
 80098bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c0:	20000d60 	.word	0x20000d60
 80098c4:	20001964 	.word	0x20001964
 80098c8:	20000d64 	.word	0x20000d64
 80098cc:	20001970 	.word	0x20001970
 80098d0:	2000195c 	.word	0x2000195c
 80098d4:	2000196c 	.word	0x2000196c
 80098d8:	20001968 	.word	0x20001968

080098dc <vPortFree>:
{
 80098dc:	b510      	push	{r4, lr}
	if( pv != NULL )
 80098de:	4604      	mov	r4, r0
 80098e0:	b370      	cbz	r0, 8009940 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098e2:	4a18      	ldr	r2, [pc, #96]	; (8009944 <vPortFree+0x68>)
 80098e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80098e8:	6812      	ldr	r2, [r2, #0]
 80098ea:	4213      	tst	r3, r2
 80098ec:	d108      	bne.n	8009900 <vPortFree+0x24>
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	e7fe      	b.n	80098fe <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009900:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009904:	b141      	cbz	r1, 8009918 <vPortFree+0x3c>
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	e7fe      	b.n	8009916 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009918:	ea23 0302 	bic.w	r3, r3, r2
 800991c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009920:	f7ff f938 	bl	8008b94 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009924:	4a08      	ldr	r2, [pc, #32]	; (8009948 <vPortFree+0x6c>)
 8009926:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800992a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800992c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009930:	440b      	add	r3, r1
 8009932:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009934:	f7ff ff24 	bl	8009780 <prvInsertBlockIntoFreeList>
}
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800993c:	f7ff b9ca 	b.w	8008cd4 <xTaskResumeAll>
}
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	20001964 	.word	0x20001964
 8009948:	20001968 	.word	0x20001968

0800994c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800994c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800994e:	2200      	movs	r2, #0
 8009950:	490e      	ldr	r1, [pc, #56]	; (800998c <MX_USB_DEVICE_Init+0x40>)
 8009952:	480f      	ldr	r0, [pc, #60]	; (8009990 <MX_USB_DEVICE_Init+0x44>)
 8009954:	f7fd ff86 	bl	8007864 <USBD_Init>
 8009958:	b108      	cbz	r0, 800995e <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800995a:	f7f8 f881 	bl	8001a60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800995e:	490d      	ldr	r1, [pc, #52]	; (8009994 <MX_USB_DEVICE_Init+0x48>)
 8009960:	480b      	ldr	r0, [pc, #44]	; (8009990 <MX_USB_DEVICE_Init+0x44>)
 8009962:	f7fd ff94 	bl	800788e <USBD_RegisterClass>
 8009966:	b108      	cbz	r0, 800996c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8009968:	f7f8 f87a 	bl	8001a60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800996c:	490a      	ldr	r1, [pc, #40]	; (8009998 <MX_USB_DEVICE_Init+0x4c>)
 800996e:	4808      	ldr	r0, [pc, #32]	; (8009990 <MX_USB_DEVICE_Init+0x44>)
 8009970:	f7fd ff33 	bl	80077da <USBD_CDC_RegisterInterface>
 8009974:	b108      	cbz	r0, 800997a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8009976:	f7f8 f873 	bl	8001a60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800997a:	4805      	ldr	r0, [pc, #20]	; (8009990 <MX_USB_DEVICE_Init+0x44>)
 800997c:	f7fd ff8e 	bl	800789c <USBD_Start>
 8009980:	b118      	cbz	r0, 800998a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009982:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8009986:	f7f8 b86b 	b.w	8001a60 <Error_Handler>
}
 800998a:	bd08      	pop	{r3, pc}
 800998c:	20000130 	.word	0x20000130
 8009990:	20002470 	.word	0x20002470
 8009994:	2000000c 	.word	0x2000000c
 8009998:	20000120 	.word	0x20000120

0800999c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800999c:	2000      	movs	r0, #0
 800999e:	4770      	bx	lr

080099a0 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80099a0:	2000      	movs	r0, #0
 80099a2:	4770      	bx	lr

080099a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099a6:	4c05      	ldr	r4, [pc, #20]	; (80099bc <CDC_Receive_FS+0x18>)
{
 80099a8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7fd ff24 	bl	80077f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099b0:	4620      	mov	r0, r4
 80099b2:	f7fd ff40 	bl	8007836 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80099b6:	2000      	movs	r0, #0
 80099b8:	bd10      	pop	{r4, pc}
 80099ba:	bf00      	nop
 80099bc:	20002470 	.word	0x20002470

080099c0 <CDC_Init_FS>:
{
 80099c0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80099c2:	4c06      	ldr	r4, [pc, #24]	; (80099dc <CDC_Init_FS+0x1c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	4620      	mov	r0, r4
 80099c8:	4905      	ldr	r1, [pc, #20]	; (80099e0 <CDC_Init_FS+0x20>)
 80099ca:	f7fd ff0d 	bl	80077e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80099ce:	4620      	mov	r0, r4
 80099d0:	4904      	ldr	r1, [pc, #16]	; (80099e4 <CDC_Init_FS+0x24>)
 80099d2:	f7fd ff11 	bl	80077f8 <USBD_CDC_SetRxBuffer>
}
 80099d6:	2000      	movs	r0, #0
 80099d8:	bd10      	pop	{r4, pc}
 80099da:	bf00      	nop
 80099dc:	20002470 	.word	0x20002470
 80099e0:	20002734 	.word	0x20002734
 80099e4:	20002b1c 	.word	0x20002b1c

080099e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099e8:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099ea:	4c09      	ldr	r4, [pc, #36]	; (8009a10 <CDC_Transmit_FS+0x28>)
{
 80099ec:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099ee:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 80099f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099f6:	b943      	cbnz	r3, 8009a0a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099f8:	4601      	mov	r1, r0
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7fd fef4 	bl	80077e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a00:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8009a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a06:	f7fd befd 	b.w	8007804 <USBD_CDC_TransmitPacket>
}
 8009a0a:	2001      	movs	r0, #1
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	bf00      	nop
 8009a10:	20002470 	.word	0x20002470

08009a14 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a14:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009a16:	4801      	ldr	r0, [pc, #4]	; (8009a1c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a18:	800b      	strh	r3, [r1, #0]
}
 8009a1a:	4770      	bx	lr
 8009a1c:	2000014c 	.word	0x2000014c

08009a20 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a20:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009a22:	4801      	ldr	r0, [pc, #4]	; (8009a28 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009a24:	800b      	strh	r3, [r1, #0]
}
 8009a26:	4770      	bx	lr
 8009a28:	20000160 	.word	0x20000160

08009a2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8009a30:	461e      	mov	r6, r3
 8009a32:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 8009a34:	0f04      	lsrs	r4, r0, #28
 8009a36:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a3a:	bf34      	ite	cc
 8009a3c:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a3e:	3437      	addcs	r4, #55	; 0x37
 8009a40:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8009a44:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 8009a48:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 8009a4a:	b2dc      	uxtb	r4, r3
 8009a4c:	42a2      	cmp	r2, r4
    value = value << 4;
 8009a4e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8009a52:	d8ef      	bhi.n	8009a34 <IntToUnicode+0x8>
  }
}
 8009a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a58 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8009a58:	231a      	movs	r3, #26
{
 8009a5a:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8009a5c:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a5e:	4b09      	ldr	r3, [pc, #36]	; (8009a84 <USBD_FS_SerialStrDescriptor+0x2c>)
 8009a60:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a62:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8009a64:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8009a66:	18c0      	adds	r0, r0, r3
 8009a68:	d00a      	beq.n	8009a80 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a6a:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a6c:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a6e:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a70:	4906      	ldr	r1, [pc, #24]	; (8009a8c <USBD_FS_SerialStrDescriptor+0x34>)
 8009a72:	f7ff ffdb 	bl	8009a2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a76:	2204      	movs	r2, #4
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4905      	ldr	r1, [pc, #20]	; (8009a90 <USBD_FS_SerialStrDescriptor+0x38>)
 8009a7c:	f7ff ffd6 	bl	8009a2c <IntToUnicode>
}
 8009a80:	4804      	ldr	r0, [pc, #16]	; (8009a94 <USBD_FS_SerialStrDescriptor+0x3c>)
 8009a82:	bd10      	pop	{r4, pc}
 8009a84:	1ffff7e8 	.word	0x1ffff7e8
 8009a88:	1ffff7ec 	.word	0x1ffff7ec
 8009a8c:	20000166 	.word	0x20000166
 8009a90:	20000176 	.word	0x20000176
 8009a94:	20000164 	.word	0x20000164

08009a98 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009a98:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a9a:	4c04      	ldr	r4, [pc, #16]	; (8009aac <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8009a9c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a9e:	4804      	ldr	r0, [pc, #16]	; (8009ab0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	f7fe fa20 	bl	8007ee6 <USBD_GetString>
}
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	bd10      	pop	{r4, pc}
 8009aaa:	bf00      	nop
 8009aac:	20002f04 	.word	0x20002f04
 8009ab0:	0800e7eb 	.word	0x0800e7eb

08009ab4 <USBD_FS_ProductStrDescriptor>:
{
 8009ab4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ab6:	4c04      	ldr	r4, [pc, #16]	; (8009ac8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8009ab8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aba:	4804      	ldr	r0, [pc, #16]	; (8009acc <USBD_FS_ProductStrDescriptor+0x18>)
 8009abc:	4621      	mov	r1, r4
 8009abe:	f7fe fa12 	bl	8007ee6 <USBD_GetString>
}
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20002f04 	.word	0x20002f04
 8009acc:	0800e7fe 	.word	0x0800e7fe

08009ad0 <USBD_FS_ConfigStrDescriptor>:
{
 8009ad0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ad2:	4c04      	ldr	r4, [pc, #16]	; (8009ae4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8009ad4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ad6:	4804      	ldr	r0, [pc, #16]	; (8009ae8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009ad8:	4621      	mov	r1, r4
 8009ada:	f7fe fa04 	bl	8007ee6 <USBD_GetString>
}
 8009ade:	4620      	mov	r0, r4
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	20002f04 	.word	0x20002f04
 8009ae8:	0800e814 	.word	0x0800e814

08009aec <USBD_FS_InterfaceStrDescriptor>:
{
 8009aec:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009aee:	4c04      	ldr	r4, [pc, #16]	; (8009b00 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8009af0:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009af2:	4804      	ldr	r0, [pc, #16]	; (8009b04 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009af4:	4621      	mov	r1, r4
 8009af6:	f7fe f9f6 	bl	8007ee6 <USBD_GetString>
}
 8009afa:	4620      	mov	r0, r4
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	bf00      	nop
 8009b00:	20002f04 	.word	0x20002f04
 8009b04:	0800e81f 	.word	0x0800e81f

08009b08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009b08:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8009b0a:	4b0e      	ldr	r3, [pc, #56]	; (8009b44 <HAL_PCD_MspInit+0x3c>)
 8009b0c:	6802      	ldr	r2, [r0, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d115      	bne.n	8009b3e <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b12:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8009b16:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009b18:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8009b1a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8009b1e:	61da      	str	r2, [r3, #28]
 8009b20:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009b22:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009b24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b28:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009b2a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8009b2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009b2e:	f7f9 fb81 	bl	8003234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b32:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b34:	b003      	add	sp, #12
 8009b36:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b3a:	f7f9 bbad 	b.w	8003298 <HAL_NVIC_EnableIRQ>
}
 8009b3e:	b003      	add	sp, #12
 8009b40:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b44:	40005c00 	.word	0x40005c00

08009b48 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b48:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 8009b4c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009b50:	f7fd bebb 	b.w	80078ca <USBD_LL_SetupStage>

08009b54 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b54:	2328      	movs	r3, #40	; 0x28
 8009b56:	fb03 0301 	mla	r3, r3, r1, r0
 8009b5a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009b5e:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8009b62:	f7fd bedf 	b.w	8007924 <USBD_LL_DataOutStage>

08009b66 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b66:	2328      	movs	r3, #40	; 0x28
 8009b68:	fb03 0301 	mla	r3, r3, r1, r0
 8009b6c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b72:	f7fd bf11 	b.w	8007998 <USBD_LL_DataInStage>

08009b76 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b76:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009b7a:	f7fd bfa5 	b.w	8007ac8 <USBD_LL_SOF>

08009b7e <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b7e:	6883      	ldr	r3, [r0, #8]
{
 8009b80:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b82:	2b02      	cmp	r3, #2
{
 8009b84:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b86:	d001      	beq.n	8009b8c <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8009b88:	f7f7 ff6a 	bl	8001a60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b8c:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8009b90:	2101      	movs	r1, #1
 8009b92:	f7fd ff83 	bl	8007a9c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b96:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 8009b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b9e:	f7fd bf56 	b.w	8007a4e <USBD_LL_Reset>
	...

08009ba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ba8:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009bac:	f7fd ff79 	bl	8007aa2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bb0:	69a3      	ldr	r3, [r4, #24]
 8009bb2:	b123      	cbz	r3, 8009bbe <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bb4:	4a02      	ldr	r2, [pc, #8]	; (8009bc0 <HAL_PCD_SuspendCallback+0x1c>)
 8009bb6:	6913      	ldr	r3, [r2, #16]
 8009bb8:	f043 0306 	orr.w	r3, r3, #6
 8009bbc:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bbe:	bd10      	pop	{r4, pc}
 8009bc0:	e000ed00 	.word	0xe000ed00

08009bc4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bc4:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009bc8:	f7fd bf74 	b.w	8007ab4 <USBD_LL_Resume>

08009bcc <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bcc:	2308      	movs	r3, #8
{
 8009bce:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bd0:	4a1d      	ldr	r2, [pc, #116]	; (8009c48 <USBD_LL_Init+0x7c>)
{
 8009bd2:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8009bd4:	481d      	ldr	r0, [pc, #116]	; (8009c4c <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bd6:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bda:	2302      	movs	r3, #2
 8009bdc:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bde:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8009be0:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009be4:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009be8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bec:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bee:	f7fa fe03 	bl	80047f8 <HAL_PCD_Init>
 8009bf2:	b108      	cbz	r0, 8009bf8 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8009bf4:	f7f7 ff34 	bl	8001a60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2318      	movs	r3, #24
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009c02:	f7fb fbd7 	bl	80053b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c06:	2358      	movs	r3, #88	; 0x58
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2180      	movs	r1, #128	; 0x80
 8009c0c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009c10:	f7fb fbd0 	bl	80053b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c14:	23c0      	movs	r3, #192	; 0xc0
 8009c16:	2200      	movs	r2, #0
 8009c18:	2181      	movs	r1, #129	; 0x81
 8009c1a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009c1e:	f7fb fbc9 	bl	80053b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c26:	2200      	movs	r2, #0
 8009c28:	2101      	movs	r1, #1
 8009c2a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009c2e:	f7fb fbc1 	bl	80053b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c36:	2200      	movs	r2, #0
 8009c38:	2182      	movs	r1, #130	; 0x82
 8009c3a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009c3e:	f7fb fbb9 	bl	80053b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 8009c42:	2000      	movs	r0, #0
 8009c44:	bd10      	pop	{r4, pc}
 8009c46:	bf00      	nop
 8009c48:	40005c00 	.word	0x40005c00
 8009c4c:	20003104 	.word	0x20003104

08009c50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c50:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c52:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c56:	f7fa fe48 	bl	80048ea <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8009c5a:	2803      	cmp	r0, #3
 8009c5c:	bf96      	itet	ls
 8009c5e:	4b02      	ldrls	r3, [pc, #8]	; (8009c68 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c60:	2002      	movhi	r0, #2
 8009c62:	5c18      	ldrbls	r0, [r3, r0]
}
 8009c64:	bd08      	pop	{r3, pc}
 8009c66:	bf00      	nop
 8009c68:	0800e82d 	.word	0x0800e82d

08009c6c <USBD_LL_OpenEP>:
{
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 8009c74:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c76:	4623      	mov	r3, r4
 8009c78:	f7fb faa2 	bl	80051c0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8009c7c:	2803      	cmp	r0, #3
 8009c7e:	bf96      	itet	ls
 8009c80:	4b01      	ldrls	r3, [pc, #4]	; (8009c88 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c82:	2002      	movhi	r0, #2
 8009c84:	5c18      	ldrbls	r0, [r3, r0]
}
 8009c86:	bd10      	pop	{r4, pc}
 8009c88:	0800e82d 	.word	0x0800e82d

08009c8c <USBD_LL_CloseEP>:
{
 8009c8c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c8e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009c92:	f7fb fac7 	bl	8005224 <HAL_PCD_EP_Close>
  switch (hal_status)
 8009c96:	2803      	cmp	r0, #3
 8009c98:	bf96      	itet	ls
 8009c9a:	4b02      	ldrls	r3, [pc, #8]	; (8009ca4 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c9c:	2002      	movhi	r0, #2
 8009c9e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009ca0:	bd08      	pop	{r3, pc}
 8009ca2:	bf00      	nop
 8009ca4:	0800e82d 	.word	0x0800e82d

08009ca8 <USBD_LL_StallEP>:
{
 8009ca8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009caa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009cae:	f7fb fb1b 	bl	80052e8 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8009cb2:	2803      	cmp	r0, #3
 8009cb4:	bf96      	itet	ls
 8009cb6:	4b02      	ldrls	r3, [pc, #8]	; (8009cc0 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cb8:	2002      	movhi	r0, #2
 8009cba:	5c18      	ldrbls	r0, [r3, r0]
}
 8009cbc:	bd08      	pop	{r3, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800e82d 	.word	0x0800e82d

08009cc4 <USBD_LL_ClearStallEP>:
{
 8009cc4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cc6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009cca:	f7fb fb41 	bl	8005350 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8009cce:	2803      	cmp	r0, #3
 8009cd0:	bf96      	itet	ls
 8009cd2:	4b02      	ldrls	r3, [pc, #8]	; (8009cdc <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cd4:	2002      	movhi	r0, #2
 8009cd6:	5c18      	ldrbls	r0, [r3, r0]
}
 8009cd8:	bd08      	pop	{r3, pc}
 8009cda:	bf00      	nop
 8009cdc:	0800e82d 	.word	0x0800e82d

08009ce0 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ce0:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8009ce2:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ce6:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cea:	bf1b      	ittet	ne
 8009cec:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8009cf0:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cf4:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009cf8:	1889      	addne	r1, r1, r2
 8009cfa:	bf14      	ite	ne
 8009cfc:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cfe:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8009d02:	4770      	bx	lr

08009d04 <USBD_LL_SetUSBAddress>:
{
 8009d04:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d06:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009d0a:	f7fa fe07 	bl	800491c <HAL_PCD_SetAddress>
  switch (hal_status)
 8009d0e:	2803      	cmp	r0, #3
 8009d10:	bf96      	itet	ls
 8009d12:	4b02      	ldrls	r3, [pc, #8]	; (8009d1c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d14:	2002      	movhi	r0, #2
 8009d16:	5c18      	ldrbls	r0, [r3, r0]
}
 8009d18:	bd08      	pop	{r3, pc}
 8009d1a:	bf00      	nop
 8009d1c:	0800e82d 	.word	0x0800e82d

08009d20 <USBD_LL_Transmit>:
{
 8009d20:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d22:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009d26:	f7fb fac5 	bl	80052b4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8009d2a:	2803      	cmp	r0, #3
 8009d2c:	bf96      	itet	ls
 8009d2e:	4b02      	ldrls	r3, [pc, #8]	; (8009d38 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d30:	2002      	movhi	r0, #2
 8009d32:	5c18      	ldrbls	r0, [r3, r0]
}
 8009d34:	bd08      	pop	{r3, pc}
 8009d36:	bf00      	nop
 8009d38:	0800e82d 	.word	0x0800e82d

08009d3c <USBD_LL_PrepareReceive>:
{
 8009d3c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d3e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009d42:	f7fb fa98 	bl	8005276 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8009d46:	2803      	cmp	r0, #3
 8009d48:	bf96      	itet	ls
 8009d4a:	4b02      	ldrls	r3, [pc, #8]	; (8009d54 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d4c:	2002      	movhi	r0, #2
 8009d4e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009d50:	bd08      	pop	{r3, pc}
 8009d52:	bf00      	nop
 8009d54:	0800e82d 	.word	0x0800e82d

08009d58 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d58:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009d5c:	f7fb baa2 	b.w	80052a4 <HAL_PCD_EP_GetRxCount>

08009d60 <USBD_static_malloc>:
}
 8009d60:	4800      	ldr	r0, [pc, #0]	; (8009d64 <USBD_static_malloc+0x4>)
 8009d62:	4770      	bx	lr
 8009d64:	20001978 	.word	0x20001978

08009d68 <USBD_static_free>:
}
 8009d68:	4770      	bx	lr

08009d6a <HAL_PCDEx_SetConnectionState>:
}
 8009d6a:	4770      	bx	lr

08009d6c <__errno>:
 8009d6c:	4b01      	ldr	r3, [pc, #4]	; (8009d74 <__errno+0x8>)
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20000180 	.word	0x20000180

08009d78 <__libc_init_array>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	2600      	movs	r6, #0
 8009d7c:	4d0c      	ldr	r5, [pc, #48]	; (8009db0 <__libc_init_array+0x38>)
 8009d7e:	4c0d      	ldr	r4, [pc, #52]	; (8009db4 <__libc_init_array+0x3c>)
 8009d80:	1b64      	subs	r4, r4, r5
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	42a6      	cmp	r6, r4
 8009d86:	d109      	bne.n	8009d9c <__libc_init_array+0x24>
 8009d88:	f002 feda 	bl	800cb40 <_init>
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	4d0a      	ldr	r5, [pc, #40]	; (8009db8 <__libc_init_array+0x40>)
 8009d90:	4c0a      	ldr	r4, [pc, #40]	; (8009dbc <__libc_init_array+0x44>)
 8009d92:	1b64      	subs	r4, r4, r5
 8009d94:	10a4      	asrs	r4, r4, #2
 8009d96:	42a6      	cmp	r6, r4
 8009d98:	d105      	bne.n	8009da6 <__libc_init_array+0x2e>
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da0:	4798      	blx	r3
 8009da2:	3601      	adds	r6, #1
 8009da4:	e7ee      	b.n	8009d84 <__libc_init_array+0xc>
 8009da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009daa:	4798      	blx	r3
 8009dac:	3601      	adds	r6, #1
 8009dae:	e7f2      	b.n	8009d96 <__libc_init_array+0x1e>
 8009db0:	0800ec10 	.word	0x0800ec10
 8009db4:	0800ec10 	.word	0x0800ec10
 8009db8:	0800ec10 	.word	0x0800ec10
 8009dbc:	0800ec14 	.word	0x0800ec14

08009dc0 <memcpy>:
 8009dc0:	440a      	add	r2, r1
 8009dc2:	4291      	cmp	r1, r2
 8009dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dc8:	d100      	bne.n	8009dcc <memcpy+0xc>
 8009dca:	4770      	bx	lr
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dd2:	4291      	cmp	r1, r2
 8009dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd8:	d1f9      	bne.n	8009dce <memcpy+0xe>
 8009dda:	bd10      	pop	{r4, pc}

08009ddc <memset>:
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4402      	add	r2, r0
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d100      	bne.n	8009de6 <memset+0xa>
 8009de4:	4770      	bx	lr
 8009de6:	f803 1b01 	strb.w	r1, [r3], #1
 8009dea:	e7f9      	b.n	8009de0 <memset+0x4>

08009dec <__cvt>:
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df2:	461f      	mov	r7, r3
 8009df4:	bfbb      	ittet	lt
 8009df6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009dfa:	461f      	movlt	r7, r3
 8009dfc:	2300      	movge	r3, #0
 8009dfe:	232d      	movlt	r3, #45	; 0x2d
 8009e00:	b088      	sub	sp, #32
 8009e02:	4614      	mov	r4, r2
 8009e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009e08:	7013      	strb	r3, [r2, #0]
 8009e0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009e10:	f023 0820 	bic.w	r8, r3, #32
 8009e14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e18:	d005      	beq.n	8009e26 <__cvt+0x3a>
 8009e1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e1e:	d100      	bne.n	8009e22 <__cvt+0x36>
 8009e20:	3501      	adds	r5, #1
 8009e22:	2302      	movs	r3, #2
 8009e24:	e000      	b.n	8009e28 <__cvt+0x3c>
 8009e26:	2303      	movs	r3, #3
 8009e28:	aa07      	add	r2, sp, #28
 8009e2a:	9204      	str	r2, [sp, #16]
 8009e2c:	aa06      	add	r2, sp, #24
 8009e2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e32:	e9cd 3500 	strd	r3, r5, [sp]
 8009e36:	4622      	mov	r2, r4
 8009e38:	463b      	mov	r3, r7
 8009e3a:	f000 fd05 	bl	800a848 <_dtoa_r>
 8009e3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e42:	4606      	mov	r6, r0
 8009e44:	d102      	bne.n	8009e4c <__cvt+0x60>
 8009e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e48:	07db      	lsls	r3, r3, #31
 8009e4a:	d522      	bpl.n	8009e92 <__cvt+0xa6>
 8009e4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e50:	eb06 0905 	add.w	r9, r6, r5
 8009e54:	d110      	bne.n	8009e78 <__cvt+0x8c>
 8009e56:	7833      	ldrb	r3, [r6, #0]
 8009e58:	2b30      	cmp	r3, #48	; 0x30
 8009e5a:	d10a      	bne.n	8009e72 <__cvt+0x86>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2300      	movs	r3, #0
 8009e60:	4620      	mov	r0, r4
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8009e68:	b918      	cbnz	r0, 8009e72 <__cvt+0x86>
 8009e6a:	f1c5 0501 	rsb	r5, r5, #1
 8009e6e:	f8ca 5000 	str.w	r5, [sl]
 8009e72:	f8da 3000 	ldr.w	r3, [sl]
 8009e76:	4499      	add	r9, r3
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	4639      	mov	r1, r7
 8009e80:	f7f6 fd92 	bl	80009a8 <__aeabi_dcmpeq>
 8009e84:	b108      	cbz	r0, 8009e8a <__cvt+0x9e>
 8009e86:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e8a:	2230      	movs	r2, #48	; 0x30
 8009e8c:	9b07      	ldr	r3, [sp, #28]
 8009e8e:	454b      	cmp	r3, r9
 8009e90:	d307      	bcc.n	8009ea2 <__cvt+0xb6>
 8009e92:	4630      	mov	r0, r6
 8009e94:	9b07      	ldr	r3, [sp, #28]
 8009e96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009e98:	1b9b      	subs	r3, r3, r6
 8009e9a:	6013      	str	r3, [r2, #0]
 8009e9c:	b008      	add	sp, #32
 8009e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea2:	1c59      	adds	r1, r3, #1
 8009ea4:	9107      	str	r1, [sp, #28]
 8009ea6:	701a      	strb	r2, [r3, #0]
 8009ea8:	e7f0      	b.n	8009e8c <__cvt+0xa0>

08009eaa <__exponent>:
 8009eaa:	4603      	mov	r3, r0
 8009eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	f803 2b02 	strb.w	r2, [r3], #2
 8009eb4:	bfb6      	itet	lt
 8009eb6:	222d      	movlt	r2, #45	; 0x2d
 8009eb8:	222b      	movge	r2, #43	; 0x2b
 8009eba:	4249      	neglt	r1, r1
 8009ebc:	2909      	cmp	r1, #9
 8009ebe:	7042      	strb	r2, [r0, #1]
 8009ec0:	dd2b      	ble.n	8009f1a <__exponent+0x70>
 8009ec2:	f10d 0407 	add.w	r4, sp, #7
 8009ec6:	46a4      	mov	ip, r4
 8009ec8:	270a      	movs	r7, #10
 8009eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ece:	460a      	mov	r2, r1
 8009ed0:	46a6      	mov	lr, r4
 8009ed2:	fb07 1516 	mls	r5, r7, r6, r1
 8009ed6:	2a63      	cmp	r2, #99	; 0x63
 8009ed8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009edc:	4631      	mov	r1, r6
 8009ede:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ee2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ee6:	dcf0      	bgt.n	8009eca <__exponent+0x20>
 8009ee8:	3130      	adds	r1, #48	; 0x30
 8009eea:	f1ae 0502 	sub.w	r5, lr, #2
 8009eee:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	1c44      	adds	r4, r0, #1
 8009ef6:	4561      	cmp	r1, ip
 8009ef8:	d30a      	bcc.n	8009f10 <__exponent+0x66>
 8009efa:	f10d 0209 	add.w	r2, sp, #9
 8009efe:	eba2 020e 	sub.w	r2, r2, lr
 8009f02:	4565      	cmp	r5, ip
 8009f04:	bf88      	it	hi
 8009f06:	2200      	movhi	r2, #0
 8009f08:	4413      	add	r3, r2
 8009f0a:	1a18      	subs	r0, r3, r0
 8009f0c:	b003      	add	sp, #12
 8009f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f14:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009f18:	e7ed      	b.n	8009ef6 <__exponent+0x4c>
 8009f1a:	2330      	movs	r3, #48	; 0x30
 8009f1c:	3130      	adds	r1, #48	; 0x30
 8009f1e:	7083      	strb	r3, [r0, #2]
 8009f20:	70c1      	strb	r1, [r0, #3]
 8009f22:	1d03      	adds	r3, r0, #4
 8009f24:	e7f1      	b.n	8009f0a <__exponent+0x60>
	...

08009f28 <_printf_float>:
 8009f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2c:	b091      	sub	sp, #68	; 0x44
 8009f2e:	460c      	mov	r4, r1
 8009f30:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009f34:	4616      	mov	r6, r2
 8009f36:	461f      	mov	r7, r3
 8009f38:	4605      	mov	r5, r0
 8009f3a:	f001 fb69 	bl	800b610 <_localeconv_r>
 8009f3e:	6803      	ldr	r3, [r0, #0]
 8009f40:	4618      	mov	r0, r3
 8009f42:	9309      	str	r3, [sp, #36]	; 0x24
 8009f44:	f7f6 f904 	bl	8000150 <strlen>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8009f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8009f50:	900a      	str	r0, [sp, #40]	; 0x28
 8009f52:	3307      	adds	r3, #7
 8009f54:	f023 0307 	bic.w	r3, r3, #7
 8009f58:	f103 0208 	add.w	r2, r3, #8
 8009f5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009f60:	f8d4 b000 	ldr.w	fp, [r4]
 8009f64:	f8c8 2000 	str.w	r2, [r8]
 8009f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009f70:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009f74:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7e:	4640      	mov	r0, r8
 8009f80:	4b9c      	ldr	r3, [pc, #624]	; (800a1f4 <_printf_float+0x2cc>)
 8009f82:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f84:	f7f6 fd42 	bl	8000a0c <__aeabi_dcmpun>
 8009f88:	bb70      	cbnz	r0, 8009fe8 <_printf_float+0xc0>
 8009f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4b98      	ldr	r3, [pc, #608]	; (800a1f4 <_printf_float+0x2cc>)
 8009f92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f94:	f7f6 fd1c 	bl	80009d0 <__aeabi_dcmple>
 8009f98:	bb30      	cbnz	r0, 8009fe8 <_printf_float+0xc0>
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4651      	mov	r1, sl
 8009fa2:	f7f6 fd0b 	bl	80009bc <__aeabi_dcmplt>
 8009fa6:	b110      	cbz	r0, 8009fae <_printf_float+0x86>
 8009fa8:	232d      	movs	r3, #45	; 0x2d
 8009faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fae:	4b92      	ldr	r3, [pc, #584]	; (800a1f8 <_printf_float+0x2d0>)
 8009fb0:	4892      	ldr	r0, [pc, #584]	; (800a1fc <_printf_float+0x2d4>)
 8009fb2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009fb6:	bf94      	ite	ls
 8009fb8:	4698      	movls	r8, r3
 8009fba:	4680      	movhi	r8, r0
 8009fbc:	2303      	movs	r3, #3
 8009fbe:	f04f 0a00 	mov.w	sl, #0
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	f02b 0304 	bic.w	r3, fp, #4
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	4633      	mov	r3, r6
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4628      	mov	r0, r5
 8009fd0:	9700      	str	r7, [sp, #0]
 8009fd2:	aa0f      	add	r2, sp, #60	; 0x3c
 8009fd4:	f000 f9d4 	bl	800a380 <_printf_common>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f040 8090 	bne.w	800a0fe <_printf_float+0x1d6>
 8009fde:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe2:	b011      	add	sp, #68	; 0x44
 8009fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe8:	4642      	mov	r2, r8
 8009fea:	4653      	mov	r3, sl
 8009fec:	4640      	mov	r0, r8
 8009fee:	4651      	mov	r1, sl
 8009ff0:	f7f6 fd0c 	bl	8000a0c <__aeabi_dcmpun>
 8009ff4:	b148      	cbz	r0, 800a00a <_printf_float+0xe2>
 8009ff6:	f1ba 0f00 	cmp.w	sl, #0
 8009ffa:	bfb8      	it	lt
 8009ffc:	232d      	movlt	r3, #45	; 0x2d
 8009ffe:	4880      	ldr	r0, [pc, #512]	; (800a200 <_printf_float+0x2d8>)
 800a000:	bfb8      	it	lt
 800a002:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a006:	4b7f      	ldr	r3, [pc, #508]	; (800a204 <_printf_float+0x2dc>)
 800a008:	e7d3      	b.n	8009fb2 <_printf_float+0x8a>
 800a00a:	6863      	ldr	r3, [r4, #4]
 800a00c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a010:	1c5a      	adds	r2, r3, #1
 800a012:	d142      	bne.n	800a09a <_printf_float+0x172>
 800a014:	2306      	movs	r3, #6
 800a016:	6063      	str	r3, [r4, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	9206      	str	r2, [sp, #24]
 800a01c:	aa0e      	add	r2, sp, #56	; 0x38
 800a01e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a022:	aa0d      	add	r2, sp, #52	; 0x34
 800a024:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a028:	9203      	str	r2, [sp, #12]
 800a02a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a02e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	6863      	ldr	r3, [r4, #4]
 800a036:	4642      	mov	r2, r8
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	4628      	mov	r0, r5
 800a03c:	4653      	mov	r3, sl
 800a03e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a040:	f7ff fed4 	bl	8009dec <__cvt>
 800a044:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a046:	4680      	mov	r8, r0
 800a048:	2947      	cmp	r1, #71	; 0x47
 800a04a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a04c:	d108      	bne.n	800a060 <_printf_float+0x138>
 800a04e:	1cc8      	adds	r0, r1, #3
 800a050:	db02      	blt.n	800a058 <_printf_float+0x130>
 800a052:	6863      	ldr	r3, [r4, #4]
 800a054:	4299      	cmp	r1, r3
 800a056:	dd40      	ble.n	800a0da <_printf_float+0x1b2>
 800a058:	f1a9 0902 	sub.w	r9, r9, #2
 800a05c:	fa5f f989 	uxtb.w	r9, r9
 800a060:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a064:	d81f      	bhi.n	800a0a6 <_printf_float+0x17e>
 800a066:	464a      	mov	r2, r9
 800a068:	3901      	subs	r1, #1
 800a06a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a06e:	910d      	str	r1, [sp, #52]	; 0x34
 800a070:	f7ff ff1b 	bl	8009eaa <__exponent>
 800a074:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a076:	4682      	mov	sl, r0
 800a078:	1813      	adds	r3, r2, r0
 800a07a:	2a01      	cmp	r2, #1
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	dc02      	bgt.n	800a086 <_printf_float+0x15e>
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	07d2      	lsls	r2, r2, #31
 800a084:	d501      	bpl.n	800a08a <_printf_float+0x162>
 800a086:	3301      	adds	r3, #1
 800a088:	6123      	str	r3, [r4, #16]
 800a08a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d09b      	beq.n	8009fca <_printf_float+0xa2>
 800a092:	232d      	movs	r3, #45	; 0x2d
 800a094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a098:	e797      	b.n	8009fca <_printf_float+0xa2>
 800a09a:	2947      	cmp	r1, #71	; 0x47
 800a09c:	d1bc      	bne.n	800a018 <_printf_float+0xf0>
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1ba      	bne.n	800a018 <_printf_float+0xf0>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e7b7      	b.n	800a016 <_printf_float+0xee>
 800a0a6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a0aa:	d118      	bne.n	800a0de <_printf_float+0x1b6>
 800a0ac:	2900      	cmp	r1, #0
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	dd0b      	ble.n	800a0ca <_printf_float+0x1a2>
 800a0b2:	6121      	str	r1, [r4, #16]
 800a0b4:	b913      	cbnz	r3, 800a0bc <_printf_float+0x194>
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	07d0      	lsls	r0, r2, #31
 800a0ba:	d502      	bpl.n	800a0c2 <_printf_float+0x19a>
 800a0bc:	3301      	adds	r3, #1
 800a0be:	440b      	add	r3, r1
 800a0c0:	6123      	str	r3, [r4, #16]
 800a0c2:	f04f 0a00 	mov.w	sl, #0
 800a0c6:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0c8:	e7df      	b.n	800a08a <_printf_float+0x162>
 800a0ca:	b913      	cbnz	r3, 800a0d2 <_printf_float+0x1aa>
 800a0cc:	6822      	ldr	r2, [r4, #0]
 800a0ce:	07d2      	lsls	r2, r2, #31
 800a0d0:	d501      	bpl.n	800a0d6 <_printf_float+0x1ae>
 800a0d2:	3302      	adds	r3, #2
 800a0d4:	e7f4      	b.n	800a0c0 <_printf_float+0x198>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e7f2      	b.n	800a0c0 <_printf_float+0x198>
 800a0da:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	db05      	blt.n	800a0f0 <_printf_float+0x1c8>
 800a0e4:	6823      	ldr	r3, [r4, #0]
 800a0e6:	6121      	str	r1, [r4, #16]
 800a0e8:	07d8      	lsls	r0, r3, #31
 800a0ea:	d5ea      	bpl.n	800a0c2 <_printf_float+0x19a>
 800a0ec:	1c4b      	adds	r3, r1, #1
 800a0ee:	e7e7      	b.n	800a0c0 <_printf_float+0x198>
 800a0f0:	2900      	cmp	r1, #0
 800a0f2:	bfcc      	ite	gt
 800a0f4:	2201      	movgt	r2, #1
 800a0f6:	f1c1 0202 	rsble	r2, r1, #2
 800a0fa:	4413      	add	r3, r2
 800a0fc:	e7e0      	b.n	800a0c0 <_printf_float+0x198>
 800a0fe:	6823      	ldr	r3, [r4, #0]
 800a100:	055a      	lsls	r2, r3, #21
 800a102:	d407      	bmi.n	800a114 <_printf_float+0x1ec>
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	4642      	mov	r2, r8
 800a108:	4631      	mov	r1, r6
 800a10a:	4628      	mov	r0, r5
 800a10c:	47b8      	blx	r7
 800a10e:	3001      	adds	r0, #1
 800a110:	d12b      	bne.n	800a16a <_printf_float+0x242>
 800a112:	e764      	b.n	8009fde <_printf_float+0xb6>
 800a114:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a118:	f240 80dd 	bls.w	800a2d6 <_printf_float+0x3ae>
 800a11c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a120:	2200      	movs	r2, #0
 800a122:	2300      	movs	r3, #0
 800a124:	f7f6 fc40 	bl	80009a8 <__aeabi_dcmpeq>
 800a128:	2800      	cmp	r0, #0
 800a12a:	d033      	beq.n	800a194 <_printf_float+0x26c>
 800a12c:	2301      	movs	r3, #1
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	4a35      	ldr	r2, [pc, #212]	; (800a208 <_printf_float+0x2e0>)
 800a134:	47b8      	blx	r7
 800a136:	3001      	adds	r0, #1
 800a138:	f43f af51 	beq.w	8009fde <_printf_float+0xb6>
 800a13c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a140:	429a      	cmp	r2, r3
 800a142:	db02      	blt.n	800a14a <_printf_float+0x222>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	07d8      	lsls	r0, r3, #31
 800a148:	d50f      	bpl.n	800a16a <_printf_float+0x242>
 800a14a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	f43f af42 	beq.w	8009fde <_printf_float+0xb6>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	f104 091a 	add.w	r9, r4, #26
 800a162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a164:	3b01      	subs	r3, #1
 800a166:	4543      	cmp	r3, r8
 800a168:	dc09      	bgt.n	800a17e <_printf_float+0x256>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	079b      	lsls	r3, r3, #30
 800a16e:	f100 8102 	bmi.w	800a376 <_printf_float+0x44e>
 800a172:	68e0      	ldr	r0, [r4, #12]
 800a174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a176:	4298      	cmp	r0, r3
 800a178:	bfb8      	it	lt
 800a17a:	4618      	movlt	r0, r3
 800a17c:	e731      	b.n	8009fe2 <_printf_float+0xba>
 800a17e:	2301      	movs	r3, #1
 800a180:	464a      	mov	r2, r9
 800a182:	4631      	mov	r1, r6
 800a184:	4628      	mov	r0, r5
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	f43f af28 	beq.w	8009fde <_printf_float+0xb6>
 800a18e:	f108 0801 	add.w	r8, r8, #1
 800a192:	e7e6      	b.n	800a162 <_printf_float+0x23a>
 800a194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc38      	bgt.n	800a20c <_printf_float+0x2e4>
 800a19a:	2301      	movs	r3, #1
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	4a19      	ldr	r2, [pc, #100]	; (800a208 <_printf_float+0x2e0>)
 800a1a2:	47b8      	blx	r7
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	f43f af1a 	beq.w	8009fde <_printf_float+0xb6>
 800a1aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	d102      	bne.n	800a1b8 <_printf_float+0x290>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	07d9      	lsls	r1, r3, #31
 800a1b6:	d5d8      	bpl.n	800a16a <_printf_float+0x242>
 800a1b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b8      	blx	r7
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f43f af0b 	beq.w	8009fde <_printf_float+0xb6>
 800a1c8:	f04f 0900 	mov.w	r9, #0
 800a1cc:	f104 0a1a 	add.w	sl, r4, #26
 800a1d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1d2:	425b      	negs	r3, r3
 800a1d4:	454b      	cmp	r3, r9
 800a1d6:	dc01      	bgt.n	800a1dc <_printf_float+0x2b4>
 800a1d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1da:	e794      	b.n	800a106 <_printf_float+0x1de>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	4652      	mov	r2, sl
 800a1e0:	4631      	mov	r1, r6
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	47b8      	blx	r7
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	f43f aef9 	beq.w	8009fde <_printf_float+0xb6>
 800a1ec:	f109 0901 	add.w	r9, r9, #1
 800a1f0:	e7ee      	b.n	800a1d0 <_printf_float+0x2a8>
 800a1f2:	bf00      	nop
 800a1f4:	7fefffff 	.word	0x7fefffff
 800a1f8:	0800e838 	.word	0x0800e838
 800a1fc:	0800e83c 	.word	0x0800e83c
 800a200:	0800e844 	.word	0x0800e844
 800a204:	0800e840 	.word	0x0800e840
 800a208:	0800e848 	.word	0x0800e848
 800a20c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a20e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a210:	429a      	cmp	r2, r3
 800a212:	bfa8      	it	ge
 800a214:	461a      	movge	r2, r3
 800a216:	2a00      	cmp	r2, #0
 800a218:	4691      	mov	r9, r2
 800a21a:	dc37      	bgt.n	800a28c <_printf_float+0x364>
 800a21c:	f04f 0b00 	mov.w	fp, #0
 800a220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a224:	f104 021a 	add.w	r2, r4, #26
 800a228:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a22c:	ebaa 0309 	sub.w	r3, sl, r9
 800a230:	455b      	cmp	r3, fp
 800a232:	dc33      	bgt.n	800a29c <_printf_float+0x374>
 800a234:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a238:	429a      	cmp	r2, r3
 800a23a:	db3b      	blt.n	800a2b4 <_printf_float+0x38c>
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	07da      	lsls	r2, r3, #31
 800a240:	d438      	bmi.n	800a2b4 <_printf_float+0x38c>
 800a242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a244:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a246:	eba2 030a 	sub.w	r3, r2, sl
 800a24a:	eba2 0901 	sub.w	r9, r2, r1
 800a24e:	4599      	cmp	r9, r3
 800a250:	bfa8      	it	ge
 800a252:	4699      	movge	r9, r3
 800a254:	f1b9 0f00 	cmp.w	r9, #0
 800a258:	dc34      	bgt.n	800a2c4 <_printf_float+0x39c>
 800a25a:	f04f 0800 	mov.w	r8, #0
 800a25e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a262:	f104 0a1a 	add.w	sl, r4, #26
 800a266:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	eba3 0309 	sub.w	r3, r3, r9
 800a270:	4543      	cmp	r3, r8
 800a272:	f77f af7a 	ble.w	800a16a <_printf_float+0x242>
 800a276:	2301      	movs	r3, #1
 800a278:	4652      	mov	r2, sl
 800a27a:	4631      	mov	r1, r6
 800a27c:	4628      	mov	r0, r5
 800a27e:	47b8      	blx	r7
 800a280:	3001      	adds	r0, #1
 800a282:	f43f aeac 	beq.w	8009fde <_printf_float+0xb6>
 800a286:	f108 0801 	add.w	r8, r8, #1
 800a28a:	e7ec      	b.n	800a266 <_printf_float+0x33e>
 800a28c:	4613      	mov	r3, r2
 800a28e:	4631      	mov	r1, r6
 800a290:	4642      	mov	r2, r8
 800a292:	4628      	mov	r0, r5
 800a294:	47b8      	blx	r7
 800a296:	3001      	adds	r0, #1
 800a298:	d1c0      	bne.n	800a21c <_printf_float+0x2f4>
 800a29a:	e6a0      	b.n	8009fde <_printf_float+0xb6>
 800a29c:	2301      	movs	r3, #1
 800a29e:	4631      	mov	r1, r6
 800a2a0:	4628      	mov	r0, r5
 800a2a2:	920b      	str	r2, [sp, #44]	; 0x2c
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	f43f ae99 	beq.w	8009fde <_printf_float+0xb6>
 800a2ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2ae:	f10b 0b01 	add.w	fp, fp, #1
 800a2b2:	e7b9      	b.n	800a228 <_printf_float+0x300>
 800a2b4:	4631      	mov	r1, r6
 800a2b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	d1bf      	bne.n	800a242 <_printf_float+0x31a>
 800a2c2:	e68c      	b.n	8009fde <_printf_float+0xb6>
 800a2c4:	464b      	mov	r3, r9
 800a2c6:	4631      	mov	r1, r6
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	eb08 020a 	add.w	r2, r8, sl
 800a2ce:	47b8      	blx	r7
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	d1c2      	bne.n	800a25a <_printf_float+0x332>
 800a2d4:	e683      	b.n	8009fde <_printf_float+0xb6>
 800a2d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d8:	2a01      	cmp	r2, #1
 800a2da:	dc01      	bgt.n	800a2e0 <_printf_float+0x3b8>
 800a2dc:	07db      	lsls	r3, r3, #31
 800a2de:	d537      	bpl.n	800a350 <_printf_float+0x428>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	4642      	mov	r2, r8
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	47b8      	blx	r7
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	f43f ae77 	beq.w	8009fde <_printf_float+0xb6>
 800a2f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f ae6f 	beq.w	8009fde <_printf_float+0xb6>
 800a300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a304:	2200      	movs	r2, #0
 800a306:	2300      	movs	r3, #0
 800a308:	f7f6 fb4e 	bl	80009a8 <__aeabi_dcmpeq>
 800a30c:	b9d8      	cbnz	r0, 800a346 <_printf_float+0x41e>
 800a30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a310:	f108 0201 	add.w	r2, r8, #1
 800a314:	3b01      	subs	r3, #1
 800a316:	4631      	mov	r1, r6
 800a318:	4628      	mov	r0, r5
 800a31a:	47b8      	blx	r7
 800a31c:	3001      	adds	r0, #1
 800a31e:	d10e      	bne.n	800a33e <_printf_float+0x416>
 800a320:	e65d      	b.n	8009fde <_printf_float+0xb6>
 800a322:	2301      	movs	r3, #1
 800a324:	464a      	mov	r2, r9
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	47b8      	blx	r7
 800a32c:	3001      	adds	r0, #1
 800a32e:	f43f ae56 	beq.w	8009fde <_printf_float+0xb6>
 800a332:	f108 0801 	add.w	r8, r8, #1
 800a336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a338:	3b01      	subs	r3, #1
 800a33a:	4543      	cmp	r3, r8
 800a33c:	dcf1      	bgt.n	800a322 <_printf_float+0x3fa>
 800a33e:	4653      	mov	r3, sl
 800a340:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a344:	e6e0      	b.n	800a108 <_printf_float+0x1e0>
 800a346:	f04f 0800 	mov.w	r8, #0
 800a34a:	f104 091a 	add.w	r9, r4, #26
 800a34e:	e7f2      	b.n	800a336 <_printf_float+0x40e>
 800a350:	2301      	movs	r3, #1
 800a352:	4642      	mov	r2, r8
 800a354:	e7df      	b.n	800a316 <_printf_float+0x3ee>
 800a356:	2301      	movs	r3, #1
 800a358:	464a      	mov	r2, r9
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	f43f ae3c 	beq.w	8009fde <_printf_float+0xb6>
 800a366:	f108 0801 	add.w	r8, r8, #1
 800a36a:	68e3      	ldr	r3, [r4, #12]
 800a36c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a36e:	1a5b      	subs	r3, r3, r1
 800a370:	4543      	cmp	r3, r8
 800a372:	dcf0      	bgt.n	800a356 <_printf_float+0x42e>
 800a374:	e6fd      	b.n	800a172 <_printf_float+0x24a>
 800a376:	f04f 0800 	mov.w	r8, #0
 800a37a:	f104 0919 	add.w	r9, r4, #25
 800a37e:	e7f4      	b.n	800a36a <_printf_float+0x442>

0800a380 <_printf_common>:
 800a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a384:	4616      	mov	r6, r2
 800a386:	4699      	mov	r9, r3
 800a388:	688a      	ldr	r2, [r1, #8]
 800a38a:	690b      	ldr	r3, [r1, #16]
 800a38c:	4607      	mov	r7, r0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfb8      	it	lt
 800a392:	4613      	movlt	r3, r2
 800a394:	6033      	str	r3, [r6, #0]
 800a396:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a39a:	460c      	mov	r4, r1
 800a39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3a0:	b10a      	cbz	r2, 800a3a6 <_printf_common+0x26>
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	6033      	str	r3, [r6, #0]
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	0699      	lsls	r1, r3, #26
 800a3aa:	bf42      	ittt	mi
 800a3ac:	6833      	ldrmi	r3, [r6, #0]
 800a3ae:	3302      	addmi	r3, #2
 800a3b0:	6033      	strmi	r3, [r6, #0]
 800a3b2:	6825      	ldr	r5, [r4, #0]
 800a3b4:	f015 0506 	ands.w	r5, r5, #6
 800a3b8:	d106      	bne.n	800a3c8 <_printf_common+0x48>
 800a3ba:	f104 0a19 	add.w	sl, r4, #25
 800a3be:	68e3      	ldr	r3, [r4, #12]
 800a3c0:	6832      	ldr	r2, [r6, #0]
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	dc28      	bgt.n	800a41a <_printf_common+0x9a>
 800a3c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3cc:	1e13      	subs	r3, r2, #0
 800a3ce:	6822      	ldr	r2, [r4, #0]
 800a3d0:	bf18      	it	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	0692      	lsls	r2, r2, #26
 800a3d6:	d42d      	bmi.n	800a434 <_printf_common+0xb4>
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3e0:	47c0      	blx	r8
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d020      	beq.n	800a428 <_printf_common+0xa8>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	68e5      	ldr	r5, [r4, #12]
 800a3ea:	f003 0306 	and.w	r3, r3, #6
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	bf18      	it	ne
 800a3f2:	2500      	movne	r5, #0
 800a3f4:	6832      	ldr	r2, [r6, #0]
 800a3f6:	f04f 0600 	mov.w	r6, #0
 800a3fa:	68a3      	ldr	r3, [r4, #8]
 800a3fc:	bf08      	it	eq
 800a3fe:	1aad      	subeq	r5, r5, r2
 800a400:	6922      	ldr	r2, [r4, #16]
 800a402:	bf08      	it	eq
 800a404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a408:	4293      	cmp	r3, r2
 800a40a:	bfc4      	itt	gt
 800a40c:	1a9b      	subgt	r3, r3, r2
 800a40e:	18ed      	addgt	r5, r5, r3
 800a410:	341a      	adds	r4, #26
 800a412:	42b5      	cmp	r5, r6
 800a414:	d11a      	bne.n	800a44c <_printf_common+0xcc>
 800a416:	2000      	movs	r0, #0
 800a418:	e008      	b.n	800a42c <_printf_common+0xac>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4652      	mov	r2, sl
 800a41e:	4649      	mov	r1, r9
 800a420:	4638      	mov	r0, r7
 800a422:	47c0      	blx	r8
 800a424:	3001      	adds	r0, #1
 800a426:	d103      	bne.n	800a430 <_printf_common+0xb0>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a430:	3501      	adds	r5, #1
 800a432:	e7c4      	b.n	800a3be <_printf_common+0x3e>
 800a434:	2030      	movs	r0, #48	; 0x30
 800a436:	18e1      	adds	r1, r4, r3
 800a438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a43c:	1c5a      	adds	r2, r3, #1
 800a43e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a442:	4422      	add	r2, r4
 800a444:	3302      	adds	r3, #2
 800a446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a44a:	e7c5      	b.n	800a3d8 <_printf_common+0x58>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4622      	mov	r2, r4
 800a450:	4649      	mov	r1, r9
 800a452:	4638      	mov	r0, r7
 800a454:	47c0      	blx	r8
 800a456:	3001      	adds	r0, #1
 800a458:	d0e6      	beq.n	800a428 <_printf_common+0xa8>
 800a45a:	3601      	adds	r6, #1
 800a45c:	e7d9      	b.n	800a412 <_printf_common+0x92>
	...

0800a460 <_printf_i>:
 800a460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	460c      	mov	r4, r1
 800a466:	7e27      	ldrb	r7, [r4, #24]
 800a468:	4691      	mov	r9, r2
 800a46a:	2f78      	cmp	r7, #120	; 0x78
 800a46c:	4680      	mov	r8, r0
 800a46e:	469a      	mov	sl, r3
 800a470:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a472:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a476:	d807      	bhi.n	800a488 <_printf_i+0x28>
 800a478:	2f62      	cmp	r7, #98	; 0x62
 800a47a:	d80a      	bhi.n	800a492 <_printf_i+0x32>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	f000 80d9 	beq.w	800a634 <_printf_i+0x1d4>
 800a482:	2f58      	cmp	r7, #88	; 0x58
 800a484:	f000 80a4 	beq.w	800a5d0 <_printf_i+0x170>
 800a488:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a48c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a490:	e03a      	b.n	800a508 <_printf_i+0xa8>
 800a492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a496:	2b15      	cmp	r3, #21
 800a498:	d8f6      	bhi.n	800a488 <_printf_i+0x28>
 800a49a:	a001      	add	r0, pc, #4	; (adr r0, 800a4a0 <_printf_i+0x40>)
 800a49c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a50d 	.word	0x0800a50d
 800a4a8:	0800a489 	.word	0x0800a489
 800a4ac:	0800a489 	.word	0x0800a489
 800a4b0:	0800a489 	.word	0x0800a489
 800a4b4:	0800a489 	.word	0x0800a489
 800a4b8:	0800a50d 	.word	0x0800a50d
 800a4bc:	0800a489 	.word	0x0800a489
 800a4c0:	0800a489 	.word	0x0800a489
 800a4c4:	0800a489 	.word	0x0800a489
 800a4c8:	0800a489 	.word	0x0800a489
 800a4cc:	0800a61b 	.word	0x0800a61b
 800a4d0:	0800a53d 	.word	0x0800a53d
 800a4d4:	0800a5fd 	.word	0x0800a5fd
 800a4d8:	0800a489 	.word	0x0800a489
 800a4dc:	0800a489 	.word	0x0800a489
 800a4e0:	0800a63d 	.word	0x0800a63d
 800a4e4:	0800a489 	.word	0x0800a489
 800a4e8:	0800a53d 	.word	0x0800a53d
 800a4ec:	0800a489 	.word	0x0800a489
 800a4f0:	0800a489 	.word	0x0800a489
 800a4f4:	0800a605 	.word	0x0800a605
 800a4f8:	680b      	ldr	r3, [r1, #0]
 800a4fa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a4fe:	1d1a      	adds	r2, r3, #4
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	600a      	str	r2, [r1, #0]
 800a504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a508:	2301      	movs	r3, #1
 800a50a:	e0a4      	b.n	800a656 <_printf_i+0x1f6>
 800a50c:	6825      	ldr	r5, [r4, #0]
 800a50e:	6808      	ldr	r0, [r1, #0]
 800a510:	062e      	lsls	r6, r5, #24
 800a512:	f100 0304 	add.w	r3, r0, #4
 800a516:	d50a      	bpl.n	800a52e <_printf_i+0xce>
 800a518:	6805      	ldr	r5, [r0, #0]
 800a51a:	600b      	str	r3, [r1, #0]
 800a51c:	2d00      	cmp	r5, #0
 800a51e:	da03      	bge.n	800a528 <_printf_i+0xc8>
 800a520:	232d      	movs	r3, #45	; 0x2d
 800a522:	426d      	negs	r5, r5
 800a524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a528:	230a      	movs	r3, #10
 800a52a:	485e      	ldr	r0, [pc, #376]	; (800a6a4 <_printf_i+0x244>)
 800a52c:	e019      	b.n	800a562 <_printf_i+0x102>
 800a52e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a532:	6805      	ldr	r5, [r0, #0]
 800a534:	600b      	str	r3, [r1, #0]
 800a536:	bf18      	it	ne
 800a538:	b22d      	sxthne	r5, r5
 800a53a:	e7ef      	b.n	800a51c <_printf_i+0xbc>
 800a53c:	680b      	ldr	r3, [r1, #0]
 800a53e:	6825      	ldr	r5, [r4, #0]
 800a540:	1d18      	adds	r0, r3, #4
 800a542:	6008      	str	r0, [r1, #0]
 800a544:	0628      	lsls	r0, r5, #24
 800a546:	d501      	bpl.n	800a54c <_printf_i+0xec>
 800a548:	681d      	ldr	r5, [r3, #0]
 800a54a:	e002      	b.n	800a552 <_printf_i+0xf2>
 800a54c:	0669      	lsls	r1, r5, #25
 800a54e:	d5fb      	bpl.n	800a548 <_printf_i+0xe8>
 800a550:	881d      	ldrh	r5, [r3, #0]
 800a552:	2f6f      	cmp	r7, #111	; 0x6f
 800a554:	bf0c      	ite	eq
 800a556:	2308      	moveq	r3, #8
 800a558:	230a      	movne	r3, #10
 800a55a:	4852      	ldr	r0, [pc, #328]	; (800a6a4 <_printf_i+0x244>)
 800a55c:	2100      	movs	r1, #0
 800a55e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a562:	6866      	ldr	r6, [r4, #4]
 800a564:	2e00      	cmp	r6, #0
 800a566:	bfa8      	it	ge
 800a568:	6821      	ldrge	r1, [r4, #0]
 800a56a:	60a6      	str	r6, [r4, #8]
 800a56c:	bfa4      	itt	ge
 800a56e:	f021 0104 	bicge.w	r1, r1, #4
 800a572:	6021      	strge	r1, [r4, #0]
 800a574:	b90d      	cbnz	r5, 800a57a <_printf_i+0x11a>
 800a576:	2e00      	cmp	r6, #0
 800a578:	d04d      	beq.n	800a616 <_printf_i+0x1b6>
 800a57a:	4616      	mov	r6, r2
 800a57c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a580:	fb03 5711 	mls	r7, r3, r1, r5
 800a584:	5dc7      	ldrb	r7, [r0, r7]
 800a586:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a58a:	462f      	mov	r7, r5
 800a58c:	42bb      	cmp	r3, r7
 800a58e:	460d      	mov	r5, r1
 800a590:	d9f4      	bls.n	800a57c <_printf_i+0x11c>
 800a592:	2b08      	cmp	r3, #8
 800a594:	d10b      	bne.n	800a5ae <_printf_i+0x14e>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	07df      	lsls	r7, r3, #31
 800a59a:	d508      	bpl.n	800a5ae <_printf_i+0x14e>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	6861      	ldr	r1, [r4, #4]
 800a5a0:	4299      	cmp	r1, r3
 800a5a2:	bfde      	ittt	le
 800a5a4:	2330      	movle	r3, #48	; 0x30
 800a5a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5ae:	1b92      	subs	r2, r2, r6
 800a5b0:	6122      	str	r2, [r4, #16]
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	f8cd a000 	str.w	sl, [sp]
 800a5bc:	aa03      	add	r2, sp, #12
 800a5be:	f7ff fedf 	bl	800a380 <_printf_common>
 800a5c2:	3001      	adds	r0, #1
 800a5c4:	d14c      	bne.n	800a660 <_printf_i+0x200>
 800a5c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ca:	b004      	add	sp, #16
 800a5cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d0:	4834      	ldr	r0, [pc, #208]	; (800a6a4 <_printf_i+0x244>)
 800a5d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5d6:	680e      	ldr	r6, [r1, #0]
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	f856 5b04 	ldr.w	r5, [r6], #4
 800a5de:	061f      	lsls	r7, r3, #24
 800a5e0:	600e      	str	r6, [r1, #0]
 800a5e2:	d514      	bpl.n	800a60e <_printf_i+0x1ae>
 800a5e4:	07d9      	lsls	r1, r3, #31
 800a5e6:	bf44      	itt	mi
 800a5e8:	f043 0320 	orrmi.w	r3, r3, #32
 800a5ec:	6023      	strmi	r3, [r4, #0]
 800a5ee:	b91d      	cbnz	r5, 800a5f8 <_printf_i+0x198>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	f023 0320 	bic.w	r3, r3, #32
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	2310      	movs	r3, #16
 800a5fa:	e7af      	b.n	800a55c <_printf_i+0xfc>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	f043 0320 	orr.w	r3, r3, #32
 800a602:	6023      	str	r3, [r4, #0]
 800a604:	2378      	movs	r3, #120	; 0x78
 800a606:	4828      	ldr	r0, [pc, #160]	; (800a6a8 <_printf_i+0x248>)
 800a608:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a60c:	e7e3      	b.n	800a5d6 <_printf_i+0x176>
 800a60e:	065e      	lsls	r6, r3, #25
 800a610:	bf48      	it	mi
 800a612:	b2ad      	uxthmi	r5, r5
 800a614:	e7e6      	b.n	800a5e4 <_printf_i+0x184>
 800a616:	4616      	mov	r6, r2
 800a618:	e7bb      	b.n	800a592 <_printf_i+0x132>
 800a61a:	680b      	ldr	r3, [r1, #0]
 800a61c:	6826      	ldr	r6, [r4, #0]
 800a61e:	1d1d      	adds	r5, r3, #4
 800a620:	6960      	ldr	r0, [r4, #20]
 800a622:	600d      	str	r5, [r1, #0]
 800a624:	0635      	lsls	r5, r6, #24
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	d501      	bpl.n	800a62e <_printf_i+0x1ce>
 800a62a:	6018      	str	r0, [r3, #0]
 800a62c:	e002      	b.n	800a634 <_printf_i+0x1d4>
 800a62e:	0671      	lsls	r1, r6, #25
 800a630:	d5fb      	bpl.n	800a62a <_printf_i+0x1ca>
 800a632:	8018      	strh	r0, [r3, #0]
 800a634:	2300      	movs	r3, #0
 800a636:	4616      	mov	r6, r2
 800a638:	6123      	str	r3, [r4, #16]
 800a63a:	e7ba      	b.n	800a5b2 <_printf_i+0x152>
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	1d1a      	adds	r2, r3, #4
 800a640:	600a      	str	r2, [r1, #0]
 800a642:	681e      	ldr	r6, [r3, #0]
 800a644:	2100      	movs	r1, #0
 800a646:	4630      	mov	r0, r6
 800a648:	6862      	ldr	r2, [r4, #4]
 800a64a:	f000 fff1 	bl	800b630 <memchr>
 800a64e:	b108      	cbz	r0, 800a654 <_printf_i+0x1f4>
 800a650:	1b80      	subs	r0, r0, r6
 800a652:	6060      	str	r0, [r4, #4]
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2300      	movs	r3, #0
 800a65a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a65e:	e7a8      	b.n	800a5b2 <_printf_i+0x152>
 800a660:	4632      	mov	r2, r6
 800a662:	4649      	mov	r1, r9
 800a664:	4640      	mov	r0, r8
 800a666:	6923      	ldr	r3, [r4, #16]
 800a668:	47d0      	blx	sl
 800a66a:	3001      	adds	r0, #1
 800a66c:	d0ab      	beq.n	800a5c6 <_printf_i+0x166>
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	079b      	lsls	r3, r3, #30
 800a672:	d413      	bmi.n	800a69c <_printf_i+0x23c>
 800a674:	68e0      	ldr	r0, [r4, #12]
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	4298      	cmp	r0, r3
 800a67a:	bfb8      	it	lt
 800a67c:	4618      	movlt	r0, r3
 800a67e:	e7a4      	b.n	800a5ca <_printf_i+0x16a>
 800a680:	2301      	movs	r3, #1
 800a682:	4632      	mov	r2, r6
 800a684:	4649      	mov	r1, r9
 800a686:	4640      	mov	r0, r8
 800a688:	47d0      	blx	sl
 800a68a:	3001      	adds	r0, #1
 800a68c:	d09b      	beq.n	800a5c6 <_printf_i+0x166>
 800a68e:	3501      	adds	r5, #1
 800a690:	68e3      	ldr	r3, [r4, #12]
 800a692:	9903      	ldr	r1, [sp, #12]
 800a694:	1a5b      	subs	r3, r3, r1
 800a696:	42ab      	cmp	r3, r5
 800a698:	dcf2      	bgt.n	800a680 <_printf_i+0x220>
 800a69a:	e7eb      	b.n	800a674 <_printf_i+0x214>
 800a69c:	2500      	movs	r5, #0
 800a69e:	f104 0619 	add.w	r6, r4, #25
 800a6a2:	e7f5      	b.n	800a690 <_printf_i+0x230>
 800a6a4:	0800e84a 	.word	0x0800e84a
 800a6a8:	0800e85b 	.word	0x0800e85b

0800a6ac <iprintf>:
 800a6ac:	b40f      	push	{r0, r1, r2, r3}
 800a6ae:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <iprintf+0x2c>)
 800a6b0:	b513      	push	{r0, r1, r4, lr}
 800a6b2:	681c      	ldr	r4, [r3, #0]
 800a6b4:	b124      	cbz	r4, 800a6c0 <iprintf+0x14>
 800a6b6:	69a3      	ldr	r3, [r4, #24]
 800a6b8:	b913      	cbnz	r3, 800a6c0 <iprintf+0x14>
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 ff0a 	bl	800b4d4 <__sinit>
 800a6c0:	ab05      	add	r3, sp, #20
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	9a04      	ldr	r2, [sp, #16]
 800a6c6:	68a1      	ldr	r1, [r4, #8]
 800a6c8:	9301      	str	r3, [sp, #4]
 800a6ca:	f001 fd79 	bl	800c1c0 <_vfiprintf_r>
 800a6ce:	b002      	add	sp, #8
 800a6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6d4:	b004      	add	sp, #16
 800a6d6:	4770      	bx	lr
 800a6d8:	20000180 	.word	0x20000180

0800a6dc <siprintf>:
 800a6dc:	b40e      	push	{r1, r2, r3}
 800a6de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6e2:	b500      	push	{lr}
 800a6e4:	b09c      	sub	sp, #112	; 0x70
 800a6e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a6e8:	9002      	str	r0, [sp, #8]
 800a6ea:	9006      	str	r0, [sp, #24]
 800a6ec:	9107      	str	r1, [sp, #28]
 800a6ee:	9104      	str	r1, [sp, #16]
 800a6f0:	4808      	ldr	r0, [pc, #32]	; (800a714 <siprintf+0x38>)
 800a6f2:	4909      	ldr	r1, [pc, #36]	; (800a718 <siprintf+0x3c>)
 800a6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6f8:	9105      	str	r1, [sp, #20]
 800a6fa:	6800      	ldr	r0, [r0, #0]
 800a6fc:	a902      	add	r1, sp, #8
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	f001 fc36 	bl	800bf70 <_svfiprintf_r>
 800a704:	2200      	movs	r2, #0
 800a706:	9b02      	ldr	r3, [sp, #8]
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	b01c      	add	sp, #112	; 0x70
 800a70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a710:	b003      	add	sp, #12
 800a712:	4770      	bx	lr
 800a714:	20000180 	.word	0x20000180
 800a718:	ffff0208 	.word	0xffff0208

0800a71c <strcpy>:
 800a71c:	4603      	mov	r3, r0
 800a71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a722:	f803 2b01 	strb.w	r2, [r3], #1
 800a726:	2a00      	cmp	r2, #0
 800a728:	d1f9      	bne.n	800a71e <strcpy+0x2>
 800a72a:	4770      	bx	lr

0800a72c <quorem>:
 800a72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a730:	6903      	ldr	r3, [r0, #16]
 800a732:	690c      	ldr	r4, [r1, #16]
 800a734:	4607      	mov	r7, r0
 800a736:	42a3      	cmp	r3, r4
 800a738:	f2c0 8083 	blt.w	800a842 <quorem+0x116>
 800a73c:	3c01      	subs	r4, #1
 800a73e:	f100 0514 	add.w	r5, r0, #20
 800a742:	f101 0814 	add.w	r8, r1, #20
 800a746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a750:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a754:	3301      	adds	r3, #1
 800a756:	429a      	cmp	r2, r3
 800a758:	fbb2 f6f3 	udiv	r6, r2, r3
 800a75c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a760:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a764:	d332      	bcc.n	800a7cc <quorem+0xa0>
 800a766:	f04f 0e00 	mov.w	lr, #0
 800a76a:	4640      	mov	r0, r8
 800a76c:	46ac      	mov	ip, r5
 800a76e:	46f2      	mov	sl, lr
 800a770:	f850 2b04 	ldr.w	r2, [r0], #4
 800a774:	b293      	uxth	r3, r2
 800a776:	fb06 e303 	mla	r3, r6, r3, lr
 800a77a:	0c12      	lsrs	r2, r2, #16
 800a77c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a780:	fb06 e202 	mla	r2, r6, r2, lr
 800a784:	b29b      	uxth	r3, r3
 800a786:	ebaa 0303 	sub.w	r3, sl, r3
 800a78a:	f8dc a000 	ldr.w	sl, [ip]
 800a78e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a792:	fa1f fa8a 	uxth.w	sl, sl
 800a796:	4453      	add	r3, sl
 800a798:	fa1f fa82 	uxth.w	sl, r2
 800a79c:	f8dc 2000 	ldr.w	r2, [ip]
 800a7a0:	4581      	cmp	r9, r0
 800a7a2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a7a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7b0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7b4:	f84c 3b04 	str.w	r3, [ip], #4
 800a7b8:	d2da      	bcs.n	800a770 <quorem+0x44>
 800a7ba:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7be:	b92b      	cbnz	r3, 800a7cc <quorem+0xa0>
 800a7c0:	9b01      	ldr	r3, [sp, #4]
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	429d      	cmp	r5, r3
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	d32f      	bcc.n	800a82a <quorem+0xfe>
 800a7ca:	613c      	str	r4, [r7, #16]
 800a7cc:	4638      	mov	r0, r7
 800a7ce:	f001 f9b7 	bl	800bb40 <__mcmp>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	db25      	blt.n	800a822 <quorem+0xf6>
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f04f 0c00 	mov.w	ip, #0
 800a7dc:	3601      	adds	r6, #1
 800a7de:	f858 1b04 	ldr.w	r1, [r8], #4
 800a7e2:	f8d0 e000 	ldr.w	lr, [r0]
 800a7e6:	b28b      	uxth	r3, r1
 800a7e8:	ebac 0303 	sub.w	r3, ip, r3
 800a7ec:	fa1f f28e 	uxth.w	r2, lr
 800a7f0:	4413      	add	r3, r2
 800a7f2:	0c0a      	lsrs	r2, r1, #16
 800a7f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a802:	45c1      	cmp	r9, r8
 800a804:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a808:	f840 3b04 	str.w	r3, [r0], #4
 800a80c:	d2e7      	bcs.n	800a7de <quorem+0xb2>
 800a80e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a816:	b922      	cbnz	r2, 800a822 <quorem+0xf6>
 800a818:	3b04      	subs	r3, #4
 800a81a:	429d      	cmp	r5, r3
 800a81c:	461a      	mov	r2, r3
 800a81e:	d30a      	bcc.n	800a836 <quorem+0x10a>
 800a820:	613c      	str	r4, [r7, #16]
 800a822:	4630      	mov	r0, r6
 800a824:	b003      	add	sp, #12
 800a826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	3b04      	subs	r3, #4
 800a82e:	2a00      	cmp	r2, #0
 800a830:	d1cb      	bne.n	800a7ca <quorem+0x9e>
 800a832:	3c01      	subs	r4, #1
 800a834:	e7c6      	b.n	800a7c4 <quorem+0x98>
 800a836:	6812      	ldr	r2, [r2, #0]
 800a838:	3b04      	subs	r3, #4
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	d1f0      	bne.n	800a820 <quorem+0xf4>
 800a83e:	3c01      	subs	r4, #1
 800a840:	e7eb      	b.n	800a81a <quorem+0xee>
 800a842:	2000      	movs	r0, #0
 800a844:	e7ee      	b.n	800a824 <quorem+0xf8>
	...

0800a848 <_dtoa_r>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	4616      	mov	r6, r2
 800a84e:	461f      	mov	r7, r3
 800a850:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a852:	b099      	sub	sp, #100	; 0x64
 800a854:	4605      	mov	r5, r0
 800a856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a85a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a85e:	b974      	cbnz	r4, 800a87e <_dtoa_r+0x36>
 800a860:	2010      	movs	r0, #16
 800a862:	f000 fedd 	bl	800b620 <malloc>
 800a866:	4602      	mov	r2, r0
 800a868:	6268      	str	r0, [r5, #36]	; 0x24
 800a86a:	b920      	cbnz	r0, 800a876 <_dtoa_r+0x2e>
 800a86c:	21ea      	movs	r1, #234	; 0xea
 800a86e:	4bae      	ldr	r3, [pc, #696]	; (800ab28 <_dtoa_r+0x2e0>)
 800a870:	48ae      	ldr	r0, [pc, #696]	; (800ab2c <_dtoa_r+0x2e4>)
 800a872:	f001 fefb 	bl	800c66c <__assert_func>
 800a876:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a87a:	6004      	str	r4, [r0, #0]
 800a87c:	60c4      	str	r4, [r0, #12]
 800a87e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a880:	6819      	ldr	r1, [r3, #0]
 800a882:	b151      	cbz	r1, 800a89a <_dtoa_r+0x52>
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	2301      	movs	r3, #1
 800a888:	4093      	lsls	r3, r2
 800a88a:	604a      	str	r2, [r1, #4]
 800a88c:	608b      	str	r3, [r1, #8]
 800a88e:	4628      	mov	r0, r5
 800a890:	f000 ff1c 	bl	800b6cc <_Bfree>
 800a894:	2200      	movs	r2, #0
 800a896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	1e3b      	subs	r3, r7, #0
 800a89c:	bfaf      	iteee	ge
 800a89e:	2300      	movge	r3, #0
 800a8a0:	2201      	movlt	r2, #1
 800a8a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8a6:	9305      	strlt	r3, [sp, #20]
 800a8a8:	bfa8      	it	ge
 800a8aa:	f8c8 3000 	strge.w	r3, [r8]
 800a8ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a8b2:	4b9f      	ldr	r3, [pc, #636]	; (800ab30 <_dtoa_r+0x2e8>)
 800a8b4:	bfb8      	it	lt
 800a8b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a8ba:	ea33 0309 	bics.w	r3, r3, r9
 800a8be:	d119      	bne.n	800a8f4 <_dtoa_r+0xac>
 800a8c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8cc:	4333      	orrs	r3, r6
 800a8ce:	f000 8580 	beq.w	800b3d2 <_dtoa_r+0xb8a>
 800a8d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a8d4:	b953      	cbnz	r3, 800a8ec <_dtoa_r+0xa4>
 800a8d6:	4b97      	ldr	r3, [pc, #604]	; (800ab34 <_dtoa_r+0x2ec>)
 800a8d8:	e022      	b.n	800a920 <_dtoa_r+0xd8>
 800a8da:	4b97      	ldr	r3, [pc, #604]	; (800ab38 <_dtoa_r+0x2f0>)
 800a8dc:	9308      	str	r3, [sp, #32]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	9808      	ldr	r0, [sp, #32]
 800a8e6:	b019      	add	sp, #100	; 0x64
 800a8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8ec:	4b91      	ldr	r3, [pc, #580]	; (800ab34 <_dtoa_r+0x2ec>)
 800a8ee:	9308      	str	r3, [sp, #32]
 800a8f0:	3303      	adds	r3, #3
 800a8f2:	e7f5      	b.n	800a8e0 <_dtoa_r+0x98>
 800a8f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a8f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a8fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a900:	2200      	movs	r2, #0
 800a902:	2300      	movs	r3, #0
 800a904:	f7f6 f850 	bl	80009a8 <__aeabi_dcmpeq>
 800a908:	4680      	mov	r8, r0
 800a90a:	b158      	cbz	r0, 800a924 <_dtoa_r+0xdc>
 800a90c:	2301      	movs	r3, #1
 800a90e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8559 	beq.w	800b3cc <_dtoa_r+0xb84>
 800a91a:	4888      	ldr	r0, [pc, #544]	; (800ab3c <_dtoa_r+0x2f4>)
 800a91c:	6018      	str	r0, [r3, #0]
 800a91e:	1e43      	subs	r3, r0, #1
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	e7df      	b.n	800a8e4 <_dtoa_r+0x9c>
 800a924:	ab16      	add	r3, sp, #88	; 0x58
 800a926:	9301      	str	r3, [sp, #4]
 800a928:	ab17      	add	r3, sp, #92	; 0x5c
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4628      	mov	r0, r5
 800a92e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a932:	f001 f9b1 	bl	800bc98 <__d2b>
 800a936:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a93a:	4682      	mov	sl, r0
 800a93c:	2c00      	cmp	r4, #0
 800a93e:	d07e      	beq.n	800aa3e <_dtoa_r+0x1f6>
 800a940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a946:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a94a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a94e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a952:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a956:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a95a:	2200      	movs	r2, #0
 800a95c:	4b78      	ldr	r3, [pc, #480]	; (800ab40 <_dtoa_r+0x2f8>)
 800a95e:	f7f5 fc03 	bl	8000168 <__aeabi_dsub>
 800a962:	a36b      	add	r3, pc, #428	; (adr r3, 800ab10 <_dtoa_r+0x2c8>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fdb6 	bl	80004d8 <__aeabi_dmul>
 800a96c:	a36a      	add	r3, pc, #424	; (adr r3, 800ab18 <_dtoa_r+0x2d0>)
 800a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a972:	f7f5 fbfb 	bl	800016c <__adddf3>
 800a976:	4606      	mov	r6, r0
 800a978:	4620      	mov	r0, r4
 800a97a:	460f      	mov	r7, r1
 800a97c:	f7f5 fd42 	bl	8000404 <__aeabi_i2d>
 800a980:	a367      	add	r3, pc, #412	; (adr r3, 800ab20 <_dtoa_r+0x2d8>)
 800a982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a986:	f7f5 fda7 	bl	80004d8 <__aeabi_dmul>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 fbeb 	bl	800016c <__adddf3>
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	f7f6 f84d 	bl	8000a38 <__aeabi_d2iz>
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4681      	mov	r9, r0
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	f7f6 f808 	bl	80009bc <__aeabi_dcmplt>
 800a9ac:	b148      	cbz	r0, 800a9c2 <_dtoa_r+0x17a>
 800a9ae:	4648      	mov	r0, r9
 800a9b0:	f7f5 fd28 	bl	8000404 <__aeabi_i2d>
 800a9b4:	4632      	mov	r2, r6
 800a9b6:	463b      	mov	r3, r7
 800a9b8:	f7f5 fff6 	bl	80009a8 <__aeabi_dcmpeq>
 800a9bc:	b908      	cbnz	r0, 800a9c2 <_dtoa_r+0x17a>
 800a9be:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9c2:	f1b9 0f16 	cmp.w	r9, #22
 800a9c6:	d857      	bhi.n	800aa78 <_dtoa_r+0x230>
 800a9c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9cc:	4b5d      	ldr	r3, [pc, #372]	; (800ab44 <_dtoa_r+0x2fc>)
 800a9ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f7f5 fff1 	bl	80009bc <__aeabi_dcmplt>
 800a9da:	2800      	cmp	r0, #0
 800a9dc:	d04e      	beq.n	800aa7c <_dtoa_r+0x234>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9e8:	1b1c      	subs	r4, r3, r4
 800a9ea:	1e63      	subs	r3, r4, #1
 800a9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ee:	bf49      	itett	mi
 800a9f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800a9f4:	2300      	movpl	r3, #0
 800a9f6:	9306      	strmi	r3, [sp, #24]
 800a9f8:	2300      	movmi	r3, #0
 800a9fa:	bf54      	ite	pl
 800a9fc:	9306      	strpl	r3, [sp, #24]
 800a9fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aa00:	f1b9 0f00 	cmp.w	r9, #0
 800aa04:	db3c      	blt.n	800aa80 <_dtoa_r+0x238>
 800aa06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa08:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa0c:	444b      	add	r3, r9
 800aa0e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa10:	2300      	movs	r3, #0
 800aa12:	930a      	str	r3, [sp, #40]	; 0x28
 800aa14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d86c      	bhi.n	800aaf4 <_dtoa_r+0x2ac>
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	bfc4      	itt	gt
 800aa1e:	3b04      	subgt	r3, #4
 800aa20:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aa22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa24:	bfc8      	it	gt
 800aa26:	2400      	movgt	r4, #0
 800aa28:	f1a3 0302 	sub.w	r3, r3, #2
 800aa2c:	bfd8      	it	le
 800aa2e:	2401      	movle	r4, #1
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	f200 808b 	bhi.w	800ab4c <_dtoa_r+0x304>
 800aa36:	e8df f003 	tbb	[pc, r3]
 800aa3a:	4f2d      	.short	0x4f2d
 800aa3c:	5b4d      	.short	0x5b4d
 800aa3e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800aa42:	441c      	add	r4, r3
 800aa44:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800aa48:	2b20      	cmp	r3, #32
 800aa4a:	bfc3      	ittte	gt
 800aa4c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa50:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800aa54:	fa09 f303 	lslgt.w	r3, r9, r3
 800aa58:	f1c3 0320 	rsble	r3, r3, #32
 800aa5c:	bfc6      	itte	gt
 800aa5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa62:	4318      	orrgt	r0, r3
 800aa64:	fa06 f003 	lslle.w	r0, r6, r3
 800aa68:	f7f5 fcbc 	bl	80003e4 <__aeabi_ui2d>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aa72:	3c01      	subs	r4, #1
 800aa74:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa76:	e770      	b.n	800a95a <_dtoa_r+0x112>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e7b3      	b.n	800a9e4 <_dtoa_r+0x19c>
 800aa7c:	900f      	str	r0, [sp, #60]	; 0x3c
 800aa7e:	e7b2      	b.n	800a9e6 <_dtoa_r+0x19e>
 800aa80:	9b06      	ldr	r3, [sp, #24]
 800aa82:	eba3 0309 	sub.w	r3, r3, r9
 800aa86:	9306      	str	r3, [sp, #24]
 800aa88:	f1c9 0300 	rsb	r3, r9, #0
 800aa8c:	930a      	str	r3, [sp, #40]	; 0x28
 800aa8e:	2300      	movs	r3, #0
 800aa90:	930e      	str	r3, [sp, #56]	; 0x38
 800aa92:	e7bf      	b.n	800aa14 <_dtoa_r+0x1cc>
 800aa94:	2300      	movs	r3, #0
 800aa96:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	dc59      	bgt.n	800ab52 <_dtoa_r+0x30a>
 800aa9e:	f04f 0b01 	mov.w	fp, #1
 800aaa2:	465b      	mov	r3, fp
 800aaa4:	f8cd b008 	str.w	fp, [sp, #8]
 800aaa8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800aaac:	2200      	movs	r2, #0
 800aaae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800aab0:	6042      	str	r2, [r0, #4]
 800aab2:	2204      	movs	r2, #4
 800aab4:	f102 0614 	add.w	r6, r2, #20
 800aab8:	429e      	cmp	r6, r3
 800aaba:	6841      	ldr	r1, [r0, #4]
 800aabc:	d94f      	bls.n	800ab5e <_dtoa_r+0x316>
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 fdc4 	bl	800b64c <_Balloc>
 800aac4:	9008      	str	r0, [sp, #32]
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d14d      	bne.n	800ab66 <_dtoa_r+0x31e>
 800aaca:	4602      	mov	r2, r0
 800aacc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aad0:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <_dtoa_r+0x300>)
 800aad2:	e6cd      	b.n	800a870 <_dtoa_r+0x28>
 800aad4:	2301      	movs	r3, #1
 800aad6:	e7de      	b.n	800aa96 <_dtoa_r+0x24e>
 800aad8:	2300      	movs	r3, #0
 800aada:	930b      	str	r3, [sp, #44]	; 0x2c
 800aadc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aade:	eb09 0b03 	add.w	fp, r9, r3
 800aae2:	f10b 0301 	add.w	r3, fp, #1
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	9302      	str	r3, [sp, #8]
 800aaea:	bfb8      	it	lt
 800aaec:	2301      	movlt	r3, #1
 800aaee:	e7dd      	b.n	800aaac <_dtoa_r+0x264>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e7f2      	b.n	800aada <_dtoa_r+0x292>
 800aaf4:	2401      	movs	r4, #1
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	940b      	str	r4, [sp, #44]	; 0x2c
 800aafa:	9322      	str	r3, [sp, #136]	; 0x88
 800aafc:	f04f 3bff 	mov.w	fp, #4294967295
 800ab00:	2200      	movs	r2, #0
 800ab02:	2312      	movs	r3, #18
 800ab04:	f8cd b008 	str.w	fp, [sp, #8]
 800ab08:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab0a:	e7cf      	b.n	800aaac <_dtoa_r+0x264>
 800ab0c:	f3af 8000 	nop.w
 800ab10:	636f4361 	.word	0x636f4361
 800ab14:	3fd287a7 	.word	0x3fd287a7
 800ab18:	8b60c8b3 	.word	0x8b60c8b3
 800ab1c:	3fc68a28 	.word	0x3fc68a28
 800ab20:	509f79fb 	.word	0x509f79fb
 800ab24:	3fd34413 	.word	0x3fd34413
 800ab28:	0800e879 	.word	0x0800e879
 800ab2c:	0800e890 	.word	0x0800e890
 800ab30:	7ff00000 	.word	0x7ff00000
 800ab34:	0800e875 	.word	0x0800e875
 800ab38:	0800e86c 	.word	0x0800e86c
 800ab3c:	0800e849 	.word	0x0800e849
 800ab40:	3ff80000 	.word	0x3ff80000
 800ab44:	0800e9e8 	.word	0x0800e9e8
 800ab48:	0800e8ef 	.word	0x0800e8ef
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab50:	e7d4      	b.n	800aafc <_dtoa_r+0x2b4>
 800ab52:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ab56:	465b      	mov	r3, fp
 800ab58:	f8cd b008 	str.w	fp, [sp, #8]
 800ab5c:	e7a6      	b.n	800aaac <_dtoa_r+0x264>
 800ab5e:	3101      	adds	r1, #1
 800ab60:	6041      	str	r1, [r0, #4]
 800ab62:	0052      	lsls	r2, r2, #1
 800ab64:	e7a6      	b.n	800aab4 <_dtoa_r+0x26c>
 800ab66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab68:	9a08      	ldr	r2, [sp, #32]
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	9b02      	ldr	r3, [sp, #8]
 800ab6e:	2b0e      	cmp	r3, #14
 800ab70:	f200 80a8 	bhi.w	800acc4 <_dtoa_r+0x47c>
 800ab74:	2c00      	cmp	r4, #0
 800ab76:	f000 80a5 	beq.w	800acc4 <_dtoa_r+0x47c>
 800ab7a:	f1b9 0f00 	cmp.w	r9, #0
 800ab7e:	dd34      	ble.n	800abea <_dtoa_r+0x3a2>
 800ab80:	4a9a      	ldr	r2, [pc, #616]	; (800adec <_dtoa_r+0x5a4>)
 800ab82:	f009 030f 	and.w	r3, r9, #15
 800ab86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab8a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ab8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ab96:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ab9a:	d016      	beq.n	800abca <_dtoa_r+0x382>
 800ab9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aba0:	4b93      	ldr	r3, [pc, #588]	; (800adf0 <_dtoa_r+0x5a8>)
 800aba2:	2703      	movs	r7, #3
 800aba4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aba8:	f7f5 fdc0 	bl	800072c <__aeabi_ddiv>
 800abac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abb0:	f004 040f 	and.w	r4, r4, #15
 800abb4:	4e8e      	ldr	r6, [pc, #568]	; (800adf0 <_dtoa_r+0x5a8>)
 800abb6:	b954      	cbnz	r4, 800abce <_dtoa_r+0x386>
 800abb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800abbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800abc0:	f7f5 fdb4 	bl	800072c <__aeabi_ddiv>
 800abc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abc8:	e029      	b.n	800ac1e <_dtoa_r+0x3d6>
 800abca:	2702      	movs	r7, #2
 800abcc:	e7f2      	b.n	800abb4 <_dtoa_r+0x36c>
 800abce:	07e1      	lsls	r1, r4, #31
 800abd0:	d508      	bpl.n	800abe4 <_dtoa_r+0x39c>
 800abd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800abd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abda:	f7f5 fc7d 	bl	80004d8 <__aeabi_dmul>
 800abde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800abe2:	3701      	adds	r7, #1
 800abe4:	1064      	asrs	r4, r4, #1
 800abe6:	3608      	adds	r6, #8
 800abe8:	e7e5      	b.n	800abb6 <_dtoa_r+0x36e>
 800abea:	f000 80a5 	beq.w	800ad38 <_dtoa_r+0x4f0>
 800abee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800abf2:	f1c9 0400 	rsb	r4, r9, #0
 800abf6:	4b7d      	ldr	r3, [pc, #500]	; (800adec <_dtoa_r+0x5a4>)
 800abf8:	f004 020f 	and.w	r2, r4, #15
 800abfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f7f5 fc68 	bl	80004d8 <__aeabi_dmul>
 800ac08:	2702      	movs	r7, #2
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac10:	4e77      	ldr	r6, [pc, #476]	; (800adf0 <_dtoa_r+0x5a8>)
 800ac12:	1124      	asrs	r4, r4, #4
 800ac14:	2c00      	cmp	r4, #0
 800ac16:	f040 8084 	bne.w	800ad22 <_dtoa_r+0x4da>
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1d2      	bne.n	800abc4 <_dtoa_r+0x37c>
 800ac1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f000 808b 	beq.w	800ad3c <_dtoa_r+0x4f4>
 800ac26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ac2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac32:	2200      	movs	r2, #0
 800ac34:	4b6f      	ldr	r3, [pc, #444]	; (800adf4 <_dtoa_r+0x5ac>)
 800ac36:	f7f5 fec1 	bl	80009bc <__aeabi_dcmplt>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	d07e      	beq.n	800ad3c <_dtoa_r+0x4f4>
 800ac3e:	9b02      	ldr	r3, [sp, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d07b      	beq.n	800ad3c <_dtoa_r+0x4f4>
 800ac44:	f1bb 0f00 	cmp.w	fp, #0
 800ac48:	dd38      	ble.n	800acbc <_dtoa_r+0x474>
 800ac4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac4e:	2200      	movs	r2, #0
 800ac50:	4b69      	ldr	r3, [pc, #420]	; (800adf8 <_dtoa_r+0x5b0>)
 800ac52:	f7f5 fc41 	bl	80004d8 <__aeabi_dmul>
 800ac56:	465c      	mov	r4, fp
 800ac58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac5c:	f109 38ff 	add.w	r8, r9, #4294967295
 800ac60:	3701      	adds	r7, #1
 800ac62:	4638      	mov	r0, r7
 800ac64:	f7f5 fbce 	bl	8000404 <__aeabi_i2d>
 800ac68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac6c:	f7f5 fc34 	bl	80004d8 <__aeabi_dmul>
 800ac70:	2200      	movs	r2, #0
 800ac72:	4b62      	ldr	r3, [pc, #392]	; (800adfc <_dtoa_r+0x5b4>)
 800ac74:	f7f5 fa7a 	bl	800016c <__adddf3>
 800ac78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ac7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac80:	9611      	str	r6, [sp, #68]	; 0x44
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d15d      	bne.n	800ad42 <_dtoa_r+0x4fa>
 800ac86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4b5c      	ldr	r3, [pc, #368]	; (800ae00 <_dtoa_r+0x5b8>)
 800ac8e:	f7f5 fa6b 	bl	8000168 <__aeabi_dsub>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac9a:	4633      	mov	r3, r6
 800ac9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ac9e:	f7f5 feab 	bl	80009f8 <__aeabi_dcmpgt>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	f040 829e 	bne.w	800b1e4 <_dtoa_r+0x99c>
 800aca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800acae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800acb2:	f7f5 fe83 	bl	80009bc <__aeabi_dcmplt>
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f040 8292 	bne.w	800b1e0 <_dtoa_r+0x998>
 800acbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800acc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800acc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f2c0 8153 	blt.w	800af72 <_dtoa_r+0x72a>
 800accc:	f1b9 0f0e 	cmp.w	r9, #14
 800acd0:	f300 814f 	bgt.w	800af72 <_dtoa_r+0x72a>
 800acd4:	4b45      	ldr	r3, [pc, #276]	; (800adec <_dtoa_r+0x5a4>)
 800acd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800acda:	e9d3 3400 	ldrd	r3, r4, [r3]
 800acde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ace2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f280 80db 	bge.w	800aea0 <_dtoa_r+0x658>
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f300 80d7 	bgt.w	800aea0 <_dtoa_r+0x658>
 800acf2:	f040 8274 	bne.w	800b1de <_dtoa_r+0x996>
 800acf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acfa:	2200      	movs	r2, #0
 800acfc:	4b40      	ldr	r3, [pc, #256]	; (800ae00 <_dtoa_r+0x5b8>)
 800acfe:	f7f5 fbeb 	bl	80004d8 <__aeabi_dmul>
 800ad02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad06:	f7f5 fe6d 	bl	80009e4 <__aeabi_dcmpge>
 800ad0a:	9c02      	ldr	r4, [sp, #8]
 800ad0c:	4626      	mov	r6, r4
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f040 824a 	bne.w	800b1a8 <_dtoa_r+0x960>
 800ad14:	2331      	movs	r3, #49	; 0x31
 800ad16:	9f08      	ldr	r7, [sp, #32]
 800ad18:	f109 0901 	add.w	r9, r9, #1
 800ad1c:	f807 3b01 	strb.w	r3, [r7], #1
 800ad20:	e246      	b.n	800b1b0 <_dtoa_r+0x968>
 800ad22:	07e2      	lsls	r2, r4, #31
 800ad24:	d505      	bpl.n	800ad32 <_dtoa_r+0x4ea>
 800ad26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad2a:	f7f5 fbd5 	bl	80004d8 <__aeabi_dmul>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	3701      	adds	r7, #1
 800ad32:	1064      	asrs	r4, r4, #1
 800ad34:	3608      	adds	r6, #8
 800ad36:	e76d      	b.n	800ac14 <_dtoa_r+0x3cc>
 800ad38:	2702      	movs	r7, #2
 800ad3a:	e770      	b.n	800ac1e <_dtoa_r+0x3d6>
 800ad3c:	46c8      	mov	r8, r9
 800ad3e:	9c02      	ldr	r4, [sp, #8]
 800ad40:	e78f      	b.n	800ac62 <_dtoa_r+0x41a>
 800ad42:	9908      	ldr	r1, [sp, #32]
 800ad44:	4b29      	ldr	r3, [pc, #164]	; (800adec <_dtoa_r+0x5a4>)
 800ad46:	4421      	add	r1, r4
 800ad48:	9112      	str	r1, [sp, #72]	; 0x48
 800ad4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ad54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad58:	2900      	cmp	r1, #0
 800ad5a:	d055      	beq.n	800ae08 <_dtoa_r+0x5c0>
 800ad5c:	2000      	movs	r0, #0
 800ad5e:	4929      	ldr	r1, [pc, #164]	; (800ae04 <_dtoa_r+0x5bc>)
 800ad60:	f7f5 fce4 	bl	800072c <__aeabi_ddiv>
 800ad64:	463b      	mov	r3, r7
 800ad66:	4632      	mov	r2, r6
 800ad68:	f7f5 f9fe 	bl	8000168 <__aeabi_dsub>
 800ad6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ad70:	9f08      	ldr	r7, [sp, #32]
 800ad72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad76:	f7f5 fe5f 	bl	8000a38 <__aeabi_d2iz>
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	f7f5 fb42 	bl	8000404 <__aeabi_i2d>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad88:	f7f5 f9ee 	bl	8000168 <__aeabi_dsub>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	460b      	mov	r3, r1
 800ad90:	3430      	adds	r4, #48	; 0x30
 800ad92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad9a:	f807 4b01 	strb.w	r4, [r7], #1
 800ad9e:	f7f5 fe0d 	bl	80009bc <__aeabi_dcmplt>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	d174      	bne.n	800ae90 <_dtoa_r+0x648>
 800ada6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adaa:	2000      	movs	r0, #0
 800adac:	4911      	ldr	r1, [pc, #68]	; (800adf4 <_dtoa_r+0x5ac>)
 800adae:	f7f5 f9db 	bl	8000168 <__aeabi_dsub>
 800adb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800adb6:	f7f5 fe01 	bl	80009bc <__aeabi_dcmplt>
 800adba:	2800      	cmp	r0, #0
 800adbc:	f040 80b6 	bne.w	800af2c <_dtoa_r+0x6e4>
 800adc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800adc2:	429f      	cmp	r7, r3
 800adc4:	f43f af7a 	beq.w	800acbc <_dtoa_r+0x474>
 800adc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800adcc:	2200      	movs	r2, #0
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <_dtoa_r+0x5b0>)
 800add0:	f7f5 fb82 	bl	80004d8 <__aeabi_dmul>
 800add4:	2200      	movs	r2, #0
 800add6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800adda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adde:	4b06      	ldr	r3, [pc, #24]	; (800adf8 <_dtoa_r+0x5b0>)
 800ade0:	f7f5 fb7a 	bl	80004d8 <__aeabi_dmul>
 800ade4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ade8:	e7c3      	b.n	800ad72 <_dtoa_r+0x52a>
 800adea:	bf00      	nop
 800adec:	0800e9e8 	.word	0x0800e9e8
 800adf0:	0800e9c0 	.word	0x0800e9c0
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	40240000 	.word	0x40240000
 800adfc:	401c0000 	.word	0x401c0000
 800ae00:	40140000 	.word	0x40140000
 800ae04:	3fe00000 	.word	0x3fe00000
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fb64 	bl	80004d8 <__aeabi_dmul>
 800ae10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae16:	9c08      	ldr	r4, [sp, #32]
 800ae18:	9314      	str	r3, [sp, #80]	; 0x50
 800ae1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae1e:	f7f5 fe0b 	bl	8000a38 <__aeabi_d2iz>
 800ae22:	9015      	str	r0, [sp, #84]	; 0x54
 800ae24:	f7f5 faee 	bl	8000404 <__aeabi_i2d>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae30:	f7f5 f99a 	bl	8000168 <__aeabi_dsub>
 800ae34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae36:	4606      	mov	r6, r0
 800ae38:	3330      	adds	r3, #48	; 0x30
 800ae3a:	f804 3b01 	strb.w	r3, [r4], #1
 800ae3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae40:	460f      	mov	r7, r1
 800ae42:	429c      	cmp	r4, r3
 800ae44:	f04f 0200 	mov.w	r2, #0
 800ae48:	d124      	bne.n	800ae94 <_dtoa_r+0x64c>
 800ae4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae4e:	4bb3      	ldr	r3, [pc, #716]	; (800b11c <_dtoa_r+0x8d4>)
 800ae50:	f7f5 f98c 	bl	800016c <__adddf3>
 800ae54:	4602      	mov	r2, r0
 800ae56:	460b      	mov	r3, r1
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fdcc 	bl	80009f8 <__aeabi_dcmpgt>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	d162      	bne.n	800af2a <_dtoa_r+0x6e2>
 800ae64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae68:	2000      	movs	r0, #0
 800ae6a:	49ac      	ldr	r1, [pc, #688]	; (800b11c <_dtoa_r+0x8d4>)
 800ae6c:	f7f5 f97c 	bl	8000168 <__aeabi_dsub>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4630      	mov	r0, r6
 800ae76:	4639      	mov	r1, r7
 800ae78:	f7f5 fda0 	bl	80009bc <__aeabi_dcmplt>
 800ae7c:	2800      	cmp	r0, #0
 800ae7e:	f43f af1d 	beq.w	800acbc <_dtoa_r+0x474>
 800ae82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ae84:	1e7b      	subs	r3, r7, #1
 800ae86:	9314      	str	r3, [sp, #80]	; 0x50
 800ae88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ae8c:	2b30      	cmp	r3, #48	; 0x30
 800ae8e:	d0f8      	beq.n	800ae82 <_dtoa_r+0x63a>
 800ae90:	46c1      	mov	r9, r8
 800ae92:	e03a      	b.n	800af0a <_dtoa_r+0x6c2>
 800ae94:	4ba2      	ldr	r3, [pc, #648]	; (800b120 <_dtoa_r+0x8d8>)
 800ae96:	f7f5 fb1f 	bl	80004d8 <__aeabi_dmul>
 800ae9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae9e:	e7bc      	b.n	800ae1a <_dtoa_r+0x5d2>
 800aea0:	9f08      	ldr	r7, [sp, #32]
 800aea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aeaa:	f7f5 fc3f 	bl	800072c <__aeabi_ddiv>
 800aeae:	f7f5 fdc3 	bl	8000a38 <__aeabi_d2iz>
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	f7f5 faa6 	bl	8000404 <__aeabi_i2d>
 800aeb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aebc:	f7f5 fb0c 	bl	80004d8 <__aeabi_dmul>
 800aec0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aec4:	460b      	mov	r3, r1
 800aec6:	4602      	mov	r2, r0
 800aec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aecc:	f7f5 f94c 	bl	8000168 <__aeabi_dsub>
 800aed0:	f807 6b01 	strb.w	r6, [r7], #1
 800aed4:	9e08      	ldr	r6, [sp, #32]
 800aed6:	9b02      	ldr	r3, [sp, #8]
 800aed8:	1bbe      	subs	r6, r7, r6
 800aeda:	42b3      	cmp	r3, r6
 800aedc:	d13a      	bne.n	800af54 <_dtoa_r+0x70c>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	f7f5 f943 	bl	800016c <__adddf3>
 800aee6:	4602      	mov	r2, r0
 800aee8:	460b      	mov	r3, r1
 800aeea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aeee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aef2:	f7f5 fd81 	bl	80009f8 <__aeabi_dcmpgt>
 800aef6:	bb58      	cbnz	r0, 800af50 <_dtoa_r+0x708>
 800aef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aefc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af00:	f7f5 fd52 	bl	80009a8 <__aeabi_dcmpeq>
 800af04:	b108      	cbz	r0, 800af0a <_dtoa_r+0x6c2>
 800af06:	07e1      	lsls	r1, r4, #31
 800af08:	d422      	bmi.n	800af50 <_dtoa_r+0x708>
 800af0a:	4628      	mov	r0, r5
 800af0c:	4651      	mov	r1, sl
 800af0e:	f000 fbdd 	bl	800b6cc <_Bfree>
 800af12:	2300      	movs	r3, #0
 800af14:	703b      	strb	r3, [r7, #0]
 800af16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800af18:	f109 0001 	add.w	r0, r9, #1
 800af1c:	6018      	str	r0, [r3, #0]
 800af1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af20:	2b00      	cmp	r3, #0
 800af22:	f43f acdf 	beq.w	800a8e4 <_dtoa_r+0x9c>
 800af26:	601f      	str	r7, [r3, #0]
 800af28:	e4dc      	b.n	800a8e4 <_dtoa_r+0x9c>
 800af2a:	4627      	mov	r7, r4
 800af2c:	463b      	mov	r3, r7
 800af2e:	461f      	mov	r7, r3
 800af30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af34:	2a39      	cmp	r2, #57	; 0x39
 800af36:	d107      	bne.n	800af48 <_dtoa_r+0x700>
 800af38:	9a08      	ldr	r2, [sp, #32]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d1f7      	bne.n	800af2e <_dtoa_r+0x6e6>
 800af3e:	2230      	movs	r2, #48	; 0x30
 800af40:	9908      	ldr	r1, [sp, #32]
 800af42:	f108 0801 	add.w	r8, r8, #1
 800af46:	700a      	strb	r2, [r1, #0]
 800af48:	781a      	ldrb	r2, [r3, #0]
 800af4a:	3201      	adds	r2, #1
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e79f      	b.n	800ae90 <_dtoa_r+0x648>
 800af50:	46c8      	mov	r8, r9
 800af52:	e7eb      	b.n	800af2c <_dtoa_r+0x6e4>
 800af54:	2200      	movs	r2, #0
 800af56:	4b72      	ldr	r3, [pc, #456]	; (800b120 <_dtoa_r+0x8d8>)
 800af58:	f7f5 fabe 	bl	80004d8 <__aeabi_dmul>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	f7f5 fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d098      	beq.n	800aea2 <_dtoa_r+0x65a>
 800af70:	e7cb      	b.n	800af0a <_dtoa_r+0x6c2>
 800af72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af74:	2a00      	cmp	r2, #0
 800af76:	f000 80cd 	beq.w	800b114 <_dtoa_r+0x8cc>
 800af7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af7c:	2a01      	cmp	r2, #1
 800af7e:	f300 80af 	bgt.w	800b0e0 <_dtoa_r+0x898>
 800af82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800af84:	2a00      	cmp	r2, #0
 800af86:	f000 80a7 	beq.w	800b0d8 <_dtoa_r+0x890>
 800af8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af90:	9f06      	ldr	r7, [sp, #24]
 800af92:	9a06      	ldr	r2, [sp, #24]
 800af94:	2101      	movs	r1, #1
 800af96:	441a      	add	r2, r3
 800af98:	9206      	str	r2, [sp, #24]
 800af9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af9c:	4628      	mov	r0, r5
 800af9e:	441a      	add	r2, r3
 800afa0:	9209      	str	r2, [sp, #36]	; 0x24
 800afa2:	f000 fc4d 	bl	800b840 <__i2b>
 800afa6:	4606      	mov	r6, r0
 800afa8:	2f00      	cmp	r7, #0
 800afaa:	dd0c      	ble.n	800afc6 <_dtoa_r+0x77e>
 800afac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afae:	2b00      	cmp	r3, #0
 800afb0:	dd09      	ble.n	800afc6 <_dtoa_r+0x77e>
 800afb2:	42bb      	cmp	r3, r7
 800afb4:	bfa8      	it	ge
 800afb6:	463b      	movge	r3, r7
 800afb8:	9a06      	ldr	r2, [sp, #24]
 800afba:	1aff      	subs	r7, r7, r3
 800afbc:	1ad2      	subs	r2, r2, r3
 800afbe:	9206      	str	r2, [sp, #24]
 800afc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	9309      	str	r3, [sp, #36]	; 0x24
 800afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc8:	b1f3      	cbz	r3, 800b008 <_dtoa_r+0x7c0>
 800afca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	f000 80a9 	beq.w	800b124 <_dtoa_r+0x8dc>
 800afd2:	2c00      	cmp	r4, #0
 800afd4:	dd10      	ble.n	800aff8 <_dtoa_r+0x7b0>
 800afd6:	4631      	mov	r1, r6
 800afd8:	4622      	mov	r2, r4
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 fcea 	bl	800b9b4 <__pow5mult>
 800afe0:	4652      	mov	r2, sl
 800afe2:	4601      	mov	r1, r0
 800afe4:	4606      	mov	r6, r0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 fc40 	bl	800b86c <__multiply>
 800afec:	4680      	mov	r8, r0
 800afee:	4651      	mov	r1, sl
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 fb6b 	bl	800b6cc <_Bfree>
 800aff6:	46c2      	mov	sl, r8
 800aff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800affa:	1b1a      	subs	r2, r3, r4
 800affc:	d004      	beq.n	800b008 <_dtoa_r+0x7c0>
 800affe:	4651      	mov	r1, sl
 800b000:	4628      	mov	r0, r5
 800b002:	f000 fcd7 	bl	800b9b4 <__pow5mult>
 800b006:	4682      	mov	sl, r0
 800b008:	2101      	movs	r1, #1
 800b00a:	4628      	mov	r0, r5
 800b00c:	f000 fc18 	bl	800b840 <__i2b>
 800b010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b012:	4604      	mov	r4, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	f340 8087 	ble.w	800b128 <_dtoa_r+0x8e0>
 800b01a:	461a      	mov	r2, r3
 800b01c:	4601      	mov	r1, r0
 800b01e:	4628      	mov	r0, r5
 800b020:	f000 fcc8 	bl	800b9b4 <__pow5mult>
 800b024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b026:	4604      	mov	r4, r0
 800b028:	2b01      	cmp	r3, #1
 800b02a:	f340 8080 	ble.w	800b12e <_dtoa_r+0x8e6>
 800b02e:	f04f 0800 	mov.w	r8, #0
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b038:	6918      	ldr	r0, [r3, #16]
 800b03a:	f000 fbb3 	bl	800b7a4 <__hi0bits>
 800b03e:	f1c0 0020 	rsb	r0, r0, #32
 800b042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b044:	4418      	add	r0, r3
 800b046:	f010 001f 	ands.w	r0, r0, #31
 800b04a:	f000 8092 	beq.w	800b172 <_dtoa_r+0x92a>
 800b04e:	f1c0 0320 	rsb	r3, r0, #32
 800b052:	2b04      	cmp	r3, #4
 800b054:	f340 808a 	ble.w	800b16c <_dtoa_r+0x924>
 800b058:	f1c0 001c 	rsb	r0, r0, #28
 800b05c:	9b06      	ldr	r3, [sp, #24]
 800b05e:	4407      	add	r7, r0
 800b060:	4403      	add	r3, r0
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b066:	4403      	add	r3, r0
 800b068:	9309      	str	r3, [sp, #36]	; 0x24
 800b06a:	9b06      	ldr	r3, [sp, #24]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	dd05      	ble.n	800b07c <_dtoa_r+0x834>
 800b070:	4651      	mov	r1, sl
 800b072:	461a      	mov	r2, r3
 800b074:	4628      	mov	r0, r5
 800b076:	f000 fcf7 	bl	800ba68 <__lshift>
 800b07a:	4682      	mov	sl, r0
 800b07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dd05      	ble.n	800b08e <_dtoa_r+0x846>
 800b082:	4621      	mov	r1, r4
 800b084:	461a      	mov	r2, r3
 800b086:	4628      	mov	r0, r5
 800b088:	f000 fcee 	bl	800ba68 <__lshift>
 800b08c:	4604      	mov	r4, r0
 800b08e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d070      	beq.n	800b176 <_dtoa_r+0x92e>
 800b094:	4621      	mov	r1, r4
 800b096:	4650      	mov	r0, sl
 800b098:	f000 fd52 	bl	800bb40 <__mcmp>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	da6a      	bge.n	800b176 <_dtoa_r+0x92e>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4651      	mov	r1, sl
 800b0a4:	220a      	movs	r2, #10
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	f000 fb32 	bl	800b710 <__multadd>
 800b0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0ae:	4682      	mov	sl, r0
 800b0b0:	f109 39ff 	add.w	r9, r9, #4294967295
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 8193 	beq.w	800b3e0 <_dtoa_r+0xb98>
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	2300      	movs	r3, #0
 800b0be:	220a      	movs	r2, #10
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	f000 fb25 	bl	800b710 <__multadd>
 800b0c6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	f300 8093 	bgt.w	800b1f6 <_dtoa_r+0x9ae>
 800b0d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	dc57      	bgt.n	800b186 <_dtoa_r+0x93e>
 800b0d6:	e08e      	b.n	800b1f6 <_dtoa_r+0x9ae>
 800b0d8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0de:	e756      	b.n	800af8e <_dtoa_r+0x746>
 800b0e0:	9b02      	ldr	r3, [sp, #8]
 800b0e2:	1e5c      	subs	r4, r3, #1
 800b0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0e6:	42a3      	cmp	r3, r4
 800b0e8:	bfb7      	itett	lt
 800b0ea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b0ec:	1b1c      	subge	r4, r3, r4
 800b0ee:	1ae2      	sublt	r2, r4, r3
 800b0f0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b0f2:	bfbe      	ittt	lt
 800b0f4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b0f6:	189b      	addlt	r3, r3, r2
 800b0f8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b0fa:	9b02      	ldr	r3, [sp, #8]
 800b0fc:	bfb8      	it	lt
 800b0fe:	2400      	movlt	r4, #0
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfbb      	ittet	lt
 800b104:	9b06      	ldrlt	r3, [sp, #24]
 800b106:	9a02      	ldrlt	r2, [sp, #8]
 800b108:	9f06      	ldrge	r7, [sp, #24]
 800b10a:	1a9f      	sublt	r7, r3, r2
 800b10c:	bfac      	ite	ge
 800b10e:	9b02      	ldrge	r3, [sp, #8]
 800b110:	2300      	movlt	r3, #0
 800b112:	e73e      	b.n	800af92 <_dtoa_r+0x74a>
 800b114:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b116:	9f06      	ldr	r7, [sp, #24]
 800b118:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b11a:	e745      	b.n	800afa8 <_dtoa_r+0x760>
 800b11c:	3fe00000 	.word	0x3fe00000
 800b120:	40240000 	.word	0x40240000
 800b124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b126:	e76a      	b.n	800affe <_dtoa_r+0x7b6>
 800b128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	dc19      	bgt.n	800b162 <_dtoa_r+0x91a>
 800b12e:	9b04      	ldr	r3, [sp, #16]
 800b130:	b9bb      	cbnz	r3, 800b162 <_dtoa_r+0x91a>
 800b132:	9b05      	ldr	r3, [sp, #20]
 800b134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b138:	b99b      	cbnz	r3, 800b162 <_dtoa_r+0x91a>
 800b13a:	9b05      	ldr	r3, [sp, #20]
 800b13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b140:	0d1b      	lsrs	r3, r3, #20
 800b142:	051b      	lsls	r3, r3, #20
 800b144:	b183      	cbz	r3, 800b168 <_dtoa_r+0x920>
 800b146:	f04f 0801 	mov.w	r8, #1
 800b14a:	9b06      	ldr	r3, [sp, #24]
 800b14c:	3301      	adds	r3, #1
 800b14e:	9306      	str	r3, [sp, #24]
 800b150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b152:	3301      	adds	r3, #1
 800b154:	9309      	str	r3, [sp, #36]	; 0x24
 800b156:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f47f af6a 	bne.w	800b032 <_dtoa_r+0x7ea>
 800b15e:	2001      	movs	r0, #1
 800b160:	e76f      	b.n	800b042 <_dtoa_r+0x7fa>
 800b162:	f04f 0800 	mov.w	r8, #0
 800b166:	e7f6      	b.n	800b156 <_dtoa_r+0x90e>
 800b168:	4698      	mov	r8, r3
 800b16a:	e7f4      	b.n	800b156 <_dtoa_r+0x90e>
 800b16c:	f43f af7d 	beq.w	800b06a <_dtoa_r+0x822>
 800b170:	4618      	mov	r0, r3
 800b172:	301c      	adds	r0, #28
 800b174:	e772      	b.n	800b05c <_dtoa_r+0x814>
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	dc36      	bgt.n	800b1ea <_dtoa_r+0x9a2>
 800b17c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b17e:	2b02      	cmp	r3, #2
 800b180:	dd33      	ble.n	800b1ea <_dtoa_r+0x9a2>
 800b182:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b186:	f1bb 0f00 	cmp.w	fp, #0
 800b18a:	d10d      	bne.n	800b1a8 <_dtoa_r+0x960>
 800b18c:	4621      	mov	r1, r4
 800b18e:	465b      	mov	r3, fp
 800b190:	2205      	movs	r2, #5
 800b192:	4628      	mov	r0, r5
 800b194:	f000 fabc 	bl	800b710 <__multadd>
 800b198:	4601      	mov	r1, r0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4650      	mov	r0, sl
 800b19e:	f000 fccf 	bl	800bb40 <__mcmp>
 800b1a2:	2800      	cmp	r0, #0
 800b1a4:	f73f adb6 	bgt.w	800ad14 <_dtoa_r+0x4cc>
 800b1a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1aa:	9f08      	ldr	r7, [sp, #32]
 800b1ac:	ea6f 0903 	mvn.w	r9, r3
 800b1b0:	f04f 0800 	mov.w	r8, #0
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 fa88 	bl	800b6cc <_Bfree>
 800b1bc:	2e00      	cmp	r6, #0
 800b1be:	f43f aea4 	beq.w	800af0a <_dtoa_r+0x6c2>
 800b1c2:	f1b8 0f00 	cmp.w	r8, #0
 800b1c6:	d005      	beq.n	800b1d4 <_dtoa_r+0x98c>
 800b1c8:	45b0      	cmp	r8, r6
 800b1ca:	d003      	beq.n	800b1d4 <_dtoa_r+0x98c>
 800b1cc:	4641      	mov	r1, r8
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f000 fa7c 	bl	800b6cc <_Bfree>
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 fa78 	bl	800b6cc <_Bfree>
 800b1dc:	e695      	b.n	800af0a <_dtoa_r+0x6c2>
 800b1de:	2400      	movs	r4, #0
 800b1e0:	4626      	mov	r6, r4
 800b1e2:	e7e1      	b.n	800b1a8 <_dtoa_r+0x960>
 800b1e4:	46c1      	mov	r9, r8
 800b1e6:	4626      	mov	r6, r4
 800b1e8:	e594      	b.n	800ad14 <_dtoa_r+0x4cc>
 800b1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1ec:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 80fc 	beq.w	800b3ee <_dtoa_r+0xba6>
 800b1f6:	2f00      	cmp	r7, #0
 800b1f8:	dd05      	ble.n	800b206 <_dtoa_r+0x9be>
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	463a      	mov	r2, r7
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 fc32 	bl	800ba68 <__lshift>
 800b204:	4606      	mov	r6, r0
 800b206:	f1b8 0f00 	cmp.w	r8, #0
 800b20a:	d05c      	beq.n	800b2c6 <_dtoa_r+0xa7e>
 800b20c:	4628      	mov	r0, r5
 800b20e:	6871      	ldr	r1, [r6, #4]
 800b210:	f000 fa1c 	bl	800b64c <_Balloc>
 800b214:	4607      	mov	r7, r0
 800b216:	b928      	cbnz	r0, 800b224 <_dtoa_r+0x9dc>
 800b218:	4602      	mov	r2, r0
 800b21a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b21e:	4b7e      	ldr	r3, [pc, #504]	; (800b418 <_dtoa_r+0xbd0>)
 800b220:	f7ff bb26 	b.w	800a870 <_dtoa_r+0x28>
 800b224:	6932      	ldr	r2, [r6, #16]
 800b226:	f106 010c 	add.w	r1, r6, #12
 800b22a:	3202      	adds	r2, #2
 800b22c:	0092      	lsls	r2, r2, #2
 800b22e:	300c      	adds	r0, #12
 800b230:	f7fe fdc6 	bl	8009dc0 <memcpy>
 800b234:	2201      	movs	r2, #1
 800b236:	4639      	mov	r1, r7
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fc15 	bl	800ba68 <__lshift>
 800b23e:	46b0      	mov	r8, r6
 800b240:	4606      	mov	r6, r0
 800b242:	9b08      	ldr	r3, [sp, #32]
 800b244:	3301      	adds	r3, #1
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	445b      	add	r3, fp
 800b24c:	930a      	str	r3, [sp, #40]	; 0x28
 800b24e:	9b04      	ldr	r3, [sp, #16]
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	9309      	str	r3, [sp, #36]	; 0x24
 800b256:	9b02      	ldr	r3, [sp, #8]
 800b258:	4621      	mov	r1, r4
 800b25a:	4650      	mov	r0, sl
 800b25c:	f103 3bff 	add.w	fp, r3, #4294967295
 800b260:	f7ff fa64 	bl	800a72c <quorem>
 800b264:	4603      	mov	r3, r0
 800b266:	4641      	mov	r1, r8
 800b268:	3330      	adds	r3, #48	; 0x30
 800b26a:	9004      	str	r0, [sp, #16]
 800b26c:	4650      	mov	r0, sl
 800b26e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b270:	f000 fc66 	bl	800bb40 <__mcmp>
 800b274:	4632      	mov	r2, r6
 800b276:	9006      	str	r0, [sp, #24]
 800b278:	4621      	mov	r1, r4
 800b27a:	4628      	mov	r0, r5
 800b27c:	f000 fc7c 	bl	800bb78 <__mdiff>
 800b280:	68c2      	ldr	r2, [r0, #12]
 800b282:	4607      	mov	r7, r0
 800b284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b286:	bb02      	cbnz	r2, 800b2ca <_dtoa_r+0xa82>
 800b288:	4601      	mov	r1, r0
 800b28a:	4650      	mov	r0, sl
 800b28c:	f000 fc58 	bl	800bb40 <__mcmp>
 800b290:	4602      	mov	r2, r0
 800b292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b294:	4639      	mov	r1, r7
 800b296:	4628      	mov	r0, r5
 800b298:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b29c:	f000 fa16 	bl	800b6cc <_Bfree>
 800b2a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b2a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2a4:	9f02      	ldr	r7, [sp, #8]
 800b2a6:	ea43 0102 	orr.w	r1, r3, r2
 800b2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ac:	430b      	orrs	r3, r1
 800b2ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2b0:	d10d      	bne.n	800b2ce <_dtoa_r+0xa86>
 800b2b2:	2b39      	cmp	r3, #57	; 0x39
 800b2b4:	d027      	beq.n	800b306 <_dtoa_r+0xabe>
 800b2b6:	9a06      	ldr	r2, [sp, #24]
 800b2b8:	2a00      	cmp	r2, #0
 800b2ba:	dd01      	ble.n	800b2c0 <_dtoa_r+0xa78>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	3331      	adds	r3, #49	; 0x31
 800b2c0:	f88b 3000 	strb.w	r3, [fp]
 800b2c4:	e776      	b.n	800b1b4 <_dtoa_r+0x96c>
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	e7b9      	b.n	800b23e <_dtoa_r+0x9f6>
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	e7e2      	b.n	800b294 <_dtoa_r+0xa4c>
 800b2ce:	9906      	ldr	r1, [sp, #24]
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	db04      	blt.n	800b2de <_dtoa_r+0xa96>
 800b2d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b2d6:	4301      	orrs	r1, r0
 800b2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2da:	4301      	orrs	r1, r0
 800b2dc:	d120      	bne.n	800b320 <_dtoa_r+0xad8>
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	ddee      	ble.n	800b2c0 <_dtoa_r+0xa78>
 800b2e2:	4651      	mov	r1, sl
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	9302      	str	r3, [sp, #8]
 800b2ea:	f000 fbbd 	bl	800ba68 <__lshift>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4682      	mov	sl, r0
 800b2f2:	f000 fc25 	bl	800bb40 <__mcmp>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	dc02      	bgt.n	800b302 <_dtoa_r+0xaba>
 800b2fc:	d1e0      	bne.n	800b2c0 <_dtoa_r+0xa78>
 800b2fe:	07da      	lsls	r2, r3, #31
 800b300:	d5de      	bpl.n	800b2c0 <_dtoa_r+0xa78>
 800b302:	2b39      	cmp	r3, #57	; 0x39
 800b304:	d1da      	bne.n	800b2bc <_dtoa_r+0xa74>
 800b306:	2339      	movs	r3, #57	; 0x39
 800b308:	f88b 3000 	strb.w	r3, [fp]
 800b30c:	463b      	mov	r3, r7
 800b30e:	461f      	mov	r7, r3
 800b310:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b314:	3b01      	subs	r3, #1
 800b316:	2a39      	cmp	r2, #57	; 0x39
 800b318:	d050      	beq.n	800b3bc <_dtoa_r+0xb74>
 800b31a:	3201      	adds	r2, #1
 800b31c:	701a      	strb	r2, [r3, #0]
 800b31e:	e749      	b.n	800b1b4 <_dtoa_r+0x96c>
 800b320:	2a00      	cmp	r2, #0
 800b322:	dd03      	ble.n	800b32c <_dtoa_r+0xae4>
 800b324:	2b39      	cmp	r3, #57	; 0x39
 800b326:	d0ee      	beq.n	800b306 <_dtoa_r+0xabe>
 800b328:	3301      	adds	r3, #1
 800b32a:	e7c9      	b.n	800b2c0 <_dtoa_r+0xa78>
 800b32c:	9a02      	ldr	r2, [sp, #8]
 800b32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b330:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b334:	428a      	cmp	r2, r1
 800b336:	d02a      	beq.n	800b38e <_dtoa_r+0xb46>
 800b338:	4651      	mov	r1, sl
 800b33a:	2300      	movs	r3, #0
 800b33c:	220a      	movs	r2, #10
 800b33e:	4628      	mov	r0, r5
 800b340:	f000 f9e6 	bl	800b710 <__multadd>
 800b344:	45b0      	cmp	r8, r6
 800b346:	4682      	mov	sl, r0
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	f04f 020a 	mov.w	r2, #10
 800b350:	4641      	mov	r1, r8
 800b352:	4628      	mov	r0, r5
 800b354:	d107      	bne.n	800b366 <_dtoa_r+0xb1e>
 800b356:	f000 f9db 	bl	800b710 <__multadd>
 800b35a:	4680      	mov	r8, r0
 800b35c:	4606      	mov	r6, r0
 800b35e:	9b02      	ldr	r3, [sp, #8]
 800b360:	3301      	adds	r3, #1
 800b362:	9302      	str	r3, [sp, #8]
 800b364:	e777      	b.n	800b256 <_dtoa_r+0xa0e>
 800b366:	f000 f9d3 	bl	800b710 <__multadd>
 800b36a:	4631      	mov	r1, r6
 800b36c:	4680      	mov	r8, r0
 800b36e:	2300      	movs	r3, #0
 800b370:	220a      	movs	r2, #10
 800b372:	4628      	mov	r0, r5
 800b374:	f000 f9cc 	bl	800b710 <__multadd>
 800b378:	4606      	mov	r6, r0
 800b37a:	e7f0      	b.n	800b35e <_dtoa_r+0xb16>
 800b37c:	f1bb 0f00 	cmp.w	fp, #0
 800b380:	bfcc      	ite	gt
 800b382:	465f      	movgt	r7, fp
 800b384:	2701      	movle	r7, #1
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	9a08      	ldr	r2, [sp, #32]
 800b38c:	4417      	add	r7, r2
 800b38e:	4651      	mov	r1, sl
 800b390:	2201      	movs	r2, #1
 800b392:	4628      	mov	r0, r5
 800b394:	9302      	str	r3, [sp, #8]
 800b396:	f000 fb67 	bl	800ba68 <__lshift>
 800b39a:	4621      	mov	r1, r4
 800b39c:	4682      	mov	sl, r0
 800b39e:	f000 fbcf 	bl	800bb40 <__mcmp>
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	dcb2      	bgt.n	800b30c <_dtoa_r+0xac4>
 800b3a6:	d102      	bne.n	800b3ae <_dtoa_r+0xb66>
 800b3a8:	9b02      	ldr	r3, [sp, #8]
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d4ae      	bmi.n	800b30c <_dtoa_r+0xac4>
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	461f      	mov	r7, r3
 800b3b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3b6:	2a30      	cmp	r2, #48	; 0x30
 800b3b8:	d0fa      	beq.n	800b3b0 <_dtoa_r+0xb68>
 800b3ba:	e6fb      	b.n	800b1b4 <_dtoa_r+0x96c>
 800b3bc:	9a08      	ldr	r2, [sp, #32]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d1a5      	bne.n	800b30e <_dtoa_r+0xac6>
 800b3c2:	2331      	movs	r3, #49	; 0x31
 800b3c4:	f109 0901 	add.w	r9, r9, #1
 800b3c8:	7013      	strb	r3, [r2, #0]
 800b3ca:	e6f3      	b.n	800b1b4 <_dtoa_r+0x96c>
 800b3cc:	4b13      	ldr	r3, [pc, #76]	; (800b41c <_dtoa_r+0xbd4>)
 800b3ce:	f7ff baa7 	b.w	800a920 <_dtoa_r+0xd8>
 800b3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f47f aa80 	bne.w	800a8da <_dtoa_r+0x92>
 800b3da:	4b11      	ldr	r3, [pc, #68]	; (800b420 <_dtoa_r+0xbd8>)
 800b3dc:	f7ff baa0 	b.w	800a920 <_dtoa_r+0xd8>
 800b3e0:	f1bb 0f00 	cmp.w	fp, #0
 800b3e4:	dc03      	bgt.n	800b3ee <_dtoa_r+0xba6>
 800b3e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	f73f aecc 	bgt.w	800b186 <_dtoa_r+0x93e>
 800b3ee:	9f08      	ldr	r7, [sp, #32]
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	f7ff f99a 	bl	800a72c <quorem>
 800b3f8:	9a08      	ldr	r2, [sp, #32]
 800b3fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b3fe:	f807 3b01 	strb.w	r3, [r7], #1
 800b402:	1aba      	subs	r2, r7, r2
 800b404:	4593      	cmp	fp, r2
 800b406:	ddb9      	ble.n	800b37c <_dtoa_r+0xb34>
 800b408:	4651      	mov	r1, sl
 800b40a:	2300      	movs	r3, #0
 800b40c:	220a      	movs	r2, #10
 800b40e:	4628      	mov	r0, r5
 800b410:	f000 f97e 	bl	800b710 <__multadd>
 800b414:	4682      	mov	sl, r0
 800b416:	e7eb      	b.n	800b3f0 <_dtoa_r+0xba8>
 800b418:	0800e8ef 	.word	0x0800e8ef
 800b41c:	0800e848 	.word	0x0800e848
 800b420:	0800e86c 	.word	0x0800e86c

0800b424 <std>:
 800b424:	2300      	movs	r3, #0
 800b426:	b510      	push	{r4, lr}
 800b428:	4604      	mov	r4, r0
 800b42a:	e9c0 3300 	strd	r3, r3, [r0]
 800b42e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b432:	6083      	str	r3, [r0, #8]
 800b434:	8181      	strh	r1, [r0, #12]
 800b436:	6643      	str	r3, [r0, #100]	; 0x64
 800b438:	81c2      	strh	r2, [r0, #14]
 800b43a:	6183      	str	r3, [r0, #24]
 800b43c:	4619      	mov	r1, r3
 800b43e:	2208      	movs	r2, #8
 800b440:	305c      	adds	r0, #92	; 0x5c
 800b442:	f7fe fccb 	bl	8009ddc <memset>
 800b446:	4b05      	ldr	r3, [pc, #20]	; (800b45c <std+0x38>)
 800b448:	6224      	str	r4, [r4, #32]
 800b44a:	6263      	str	r3, [r4, #36]	; 0x24
 800b44c:	4b04      	ldr	r3, [pc, #16]	; (800b460 <std+0x3c>)
 800b44e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b450:	4b04      	ldr	r3, [pc, #16]	; (800b464 <std+0x40>)
 800b452:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b454:	4b04      	ldr	r3, [pc, #16]	; (800b468 <std+0x44>)
 800b456:	6323      	str	r3, [r4, #48]	; 0x30
 800b458:	bd10      	pop	{r4, pc}
 800b45a:	bf00      	nop
 800b45c:	0800c441 	.word	0x0800c441
 800b460:	0800c463 	.word	0x0800c463
 800b464:	0800c49b 	.word	0x0800c49b
 800b468:	0800c4bf 	.word	0x0800c4bf

0800b46c <_cleanup_r>:
 800b46c:	4901      	ldr	r1, [pc, #4]	; (800b474 <_cleanup_r+0x8>)
 800b46e:	f000 b8af 	b.w	800b5d0 <_fwalk_reent>
 800b472:	bf00      	nop
 800b474:	0800c7d5 	.word	0x0800c7d5

0800b478 <__sfmoreglue>:
 800b478:	b570      	push	{r4, r5, r6, lr}
 800b47a:	2568      	movs	r5, #104	; 0x68
 800b47c:	1e4a      	subs	r2, r1, #1
 800b47e:	4355      	muls	r5, r2
 800b480:	460e      	mov	r6, r1
 800b482:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b486:	f000 fcbd 	bl	800be04 <_malloc_r>
 800b48a:	4604      	mov	r4, r0
 800b48c:	b140      	cbz	r0, 800b4a0 <__sfmoreglue+0x28>
 800b48e:	2100      	movs	r1, #0
 800b490:	e9c0 1600 	strd	r1, r6, [r0]
 800b494:	300c      	adds	r0, #12
 800b496:	60a0      	str	r0, [r4, #8]
 800b498:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b49c:	f7fe fc9e 	bl	8009ddc <memset>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	bd70      	pop	{r4, r5, r6, pc}

0800b4a4 <__sfp_lock_acquire>:
 800b4a4:	4801      	ldr	r0, [pc, #4]	; (800b4ac <__sfp_lock_acquire+0x8>)
 800b4a6:	f000 b8b8 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800b4aa:	bf00      	nop
 800b4ac:	200033f4 	.word	0x200033f4

0800b4b0 <__sfp_lock_release>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	; (800b4b8 <__sfp_lock_release+0x8>)
 800b4b2:	f000 b8b3 	b.w	800b61c <__retarget_lock_release_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	200033f4 	.word	0x200033f4

0800b4bc <__sinit_lock_acquire>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	; (800b4c4 <__sinit_lock_acquire+0x8>)
 800b4be:	f000 b8ac 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	200033f3 	.word	0x200033f3

0800b4c8 <__sinit_lock_release>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	; (800b4d0 <__sinit_lock_release+0x8>)
 800b4ca:	f000 b8a7 	b.w	800b61c <__retarget_lock_release_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	200033f3 	.word	0x200033f3

0800b4d4 <__sinit>:
 800b4d4:	b510      	push	{r4, lr}
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	f7ff fff0 	bl	800b4bc <__sinit_lock_acquire>
 800b4dc:	69a3      	ldr	r3, [r4, #24]
 800b4de:	b11b      	cbz	r3, 800b4e8 <__sinit+0x14>
 800b4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e4:	f7ff bff0 	b.w	800b4c8 <__sinit_lock_release>
 800b4e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4ec:	6523      	str	r3, [r4, #80]	; 0x50
 800b4ee:	4b13      	ldr	r3, [pc, #76]	; (800b53c <__sinit+0x68>)
 800b4f0:	4a13      	ldr	r2, [pc, #76]	; (800b540 <__sinit+0x6c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4f6:	42a3      	cmp	r3, r4
 800b4f8:	bf08      	it	eq
 800b4fa:	2301      	moveq	r3, #1
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	bf08      	it	eq
 800b500:	61a3      	streq	r3, [r4, #24]
 800b502:	f000 f81f 	bl	800b544 <__sfp>
 800b506:	6060      	str	r0, [r4, #4]
 800b508:	4620      	mov	r0, r4
 800b50a:	f000 f81b 	bl	800b544 <__sfp>
 800b50e:	60a0      	str	r0, [r4, #8]
 800b510:	4620      	mov	r0, r4
 800b512:	f000 f817 	bl	800b544 <__sfp>
 800b516:	2200      	movs	r2, #0
 800b518:	2104      	movs	r1, #4
 800b51a:	60e0      	str	r0, [r4, #12]
 800b51c:	6860      	ldr	r0, [r4, #4]
 800b51e:	f7ff ff81 	bl	800b424 <std>
 800b522:	2201      	movs	r2, #1
 800b524:	2109      	movs	r1, #9
 800b526:	68a0      	ldr	r0, [r4, #8]
 800b528:	f7ff ff7c 	bl	800b424 <std>
 800b52c:	2202      	movs	r2, #2
 800b52e:	2112      	movs	r1, #18
 800b530:	68e0      	ldr	r0, [r4, #12]
 800b532:	f7ff ff77 	bl	800b424 <std>
 800b536:	2301      	movs	r3, #1
 800b538:	61a3      	str	r3, [r4, #24]
 800b53a:	e7d1      	b.n	800b4e0 <__sinit+0xc>
 800b53c:	0800e834 	.word	0x0800e834
 800b540:	0800b46d 	.word	0x0800b46d

0800b544 <__sfp>:
 800b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b546:	4607      	mov	r7, r0
 800b548:	f7ff ffac 	bl	800b4a4 <__sfp_lock_acquire>
 800b54c:	4b1e      	ldr	r3, [pc, #120]	; (800b5c8 <__sfp+0x84>)
 800b54e:	681e      	ldr	r6, [r3, #0]
 800b550:	69b3      	ldr	r3, [r6, #24]
 800b552:	b913      	cbnz	r3, 800b55a <__sfp+0x16>
 800b554:	4630      	mov	r0, r6
 800b556:	f7ff ffbd 	bl	800b4d4 <__sinit>
 800b55a:	3648      	adds	r6, #72	; 0x48
 800b55c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b560:	3b01      	subs	r3, #1
 800b562:	d503      	bpl.n	800b56c <__sfp+0x28>
 800b564:	6833      	ldr	r3, [r6, #0]
 800b566:	b30b      	cbz	r3, 800b5ac <__sfp+0x68>
 800b568:	6836      	ldr	r6, [r6, #0]
 800b56a:	e7f7      	b.n	800b55c <__sfp+0x18>
 800b56c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b570:	b9d5      	cbnz	r5, 800b5a8 <__sfp+0x64>
 800b572:	4b16      	ldr	r3, [pc, #88]	; (800b5cc <__sfp+0x88>)
 800b574:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b578:	60e3      	str	r3, [r4, #12]
 800b57a:	6665      	str	r5, [r4, #100]	; 0x64
 800b57c:	f000 f84c 	bl	800b618 <__retarget_lock_init_recursive>
 800b580:	f7ff ff96 	bl	800b4b0 <__sfp_lock_release>
 800b584:	2208      	movs	r2, #8
 800b586:	4629      	mov	r1, r5
 800b588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b590:	6025      	str	r5, [r4, #0]
 800b592:	61a5      	str	r5, [r4, #24]
 800b594:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b598:	f7fe fc20 	bl	8009ddc <memset>
 800b59c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5a8:	3468      	adds	r4, #104	; 0x68
 800b5aa:	e7d9      	b.n	800b560 <__sfp+0x1c>
 800b5ac:	2104      	movs	r1, #4
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	f7ff ff62 	bl	800b478 <__sfmoreglue>
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	6030      	str	r0, [r6, #0]
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	d1d5      	bne.n	800b568 <__sfp+0x24>
 800b5bc:	f7ff ff78 	bl	800b4b0 <__sfp_lock_release>
 800b5c0:	230c      	movs	r3, #12
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	e7ee      	b.n	800b5a4 <__sfp+0x60>
 800b5c6:	bf00      	nop
 800b5c8:	0800e834 	.word	0x0800e834
 800b5cc:	ffff0001 	.word	0xffff0001

0800b5d0 <_fwalk_reent>:
 800b5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d4:	4606      	mov	r6, r0
 800b5d6:	4688      	mov	r8, r1
 800b5d8:	2700      	movs	r7, #0
 800b5da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5e2:	f1b9 0901 	subs.w	r9, r9, #1
 800b5e6:	d505      	bpl.n	800b5f4 <_fwalk_reent+0x24>
 800b5e8:	6824      	ldr	r4, [r4, #0]
 800b5ea:	2c00      	cmp	r4, #0
 800b5ec:	d1f7      	bne.n	800b5de <_fwalk_reent+0xe>
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d907      	bls.n	800b60a <_fwalk_reent+0x3a>
 800b5fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5fe:	3301      	adds	r3, #1
 800b600:	d003      	beq.n	800b60a <_fwalk_reent+0x3a>
 800b602:	4629      	mov	r1, r5
 800b604:	4630      	mov	r0, r6
 800b606:	47c0      	blx	r8
 800b608:	4307      	orrs	r7, r0
 800b60a:	3568      	adds	r5, #104	; 0x68
 800b60c:	e7e9      	b.n	800b5e2 <_fwalk_reent+0x12>
	...

0800b610 <_localeconv_r>:
 800b610:	4800      	ldr	r0, [pc, #0]	; (800b614 <_localeconv_r+0x4>)
 800b612:	4770      	bx	lr
 800b614:	200002d4 	.word	0x200002d4

0800b618 <__retarget_lock_init_recursive>:
 800b618:	4770      	bx	lr

0800b61a <__retarget_lock_acquire_recursive>:
 800b61a:	4770      	bx	lr

0800b61c <__retarget_lock_release_recursive>:
 800b61c:	4770      	bx	lr
	...

0800b620 <malloc>:
 800b620:	4b02      	ldr	r3, [pc, #8]	; (800b62c <malloc+0xc>)
 800b622:	4601      	mov	r1, r0
 800b624:	6818      	ldr	r0, [r3, #0]
 800b626:	f000 bbed 	b.w	800be04 <_malloc_r>
 800b62a:	bf00      	nop
 800b62c:	20000180 	.word	0x20000180

0800b630 <memchr>:
 800b630:	4603      	mov	r3, r0
 800b632:	b510      	push	{r4, lr}
 800b634:	b2c9      	uxtb	r1, r1
 800b636:	4402      	add	r2, r0
 800b638:	4293      	cmp	r3, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	d101      	bne.n	800b642 <memchr+0x12>
 800b63e:	2000      	movs	r0, #0
 800b640:	e003      	b.n	800b64a <memchr+0x1a>
 800b642:	7804      	ldrb	r4, [r0, #0]
 800b644:	3301      	adds	r3, #1
 800b646:	428c      	cmp	r4, r1
 800b648:	d1f6      	bne.n	800b638 <memchr+0x8>
 800b64a:	bd10      	pop	{r4, pc}

0800b64c <_Balloc>:
 800b64c:	b570      	push	{r4, r5, r6, lr}
 800b64e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b650:	4604      	mov	r4, r0
 800b652:	460d      	mov	r5, r1
 800b654:	b976      	cbnz	r6, 800b674 <_Balloc+0x28>
 800b656:	2010      	movs	r0, #16
 800b658:	f7ff ffe2 	bl	800b620 <malloc>
 800b65c:	4602      	mov	r2, r0
 800b65e:	6260      	str	r0, [r4, #36]	; 0x24
 800b660:	b920      	cbnz	r0, 800b66c <_Balloc+0x20>
 800b662:	2166      	movs	r1, #102	; 0x66
 800b664:	4b17      	ldr	r3, [pc, #92]	; (800b6c4 <_Balloc+0x78>)
 800b666:	4818      	ldr	r0, [pc, #96]	; (800b6c8 <_Balloc+0x7c>)
 800b668:	f001 f800 	bl	800c66c <__assert_func>
 800b66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b670:	6006      	str	r6, [r0, #0]
 800b672:	60c6      	str	r6, [r0, #12]
 800b674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b676:	68f3      	ldr	r3, [r6, #12]
 800b678:	b183      	cbz	r3, 800b69c <_Balloc+0x50>
 800b67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b682:	b9b8      	cbnz	r0, 800b6b4 <_Balloc+0x68>
 800b684:	2101      	movs	r1, #1
 800b686:	fa01 f605 	lsl.w	r6, r1, r5
 800b68a:	1d72      	adds	r2, r6, #5
 800b68c:	4620      	mov	r0, r4
 800b68e:	0092      	lsls	r2, r2, #2
 800b690:	f000 fb5e 	bl	800bd50 <_calloc_r>
 800b694:	b160      	cbz	r0, 800b6b0 <_Balloc+0x64>
 800b696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b69a:	e00e      	b.n	800b6ba <_Balloc+0x6e>
 800b69c:	2221      	movs	r2, #33	; 0x21
 800b69e:	2104      	movs	r1, #4
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f000 fb55 	bl	800bd50 <_calloc_r>
 800b6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6a8:	60f0      	str	r0, [r6, #12]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e4      	bne.n	800b67a <_Balloc+0x2e>
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	bd70      	pop	{r4, r5, r6, pc}
 800b6b4:	6802      	ldr	r2, [r0, #0]
 800b6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6c0:	e7f7      	b.n	800b6b2 <_Balloc+0x66>
 800b6c2:	bf00      	nop
 800b6c4:	0800e879 	.word	0x0800e879
 800b6c8:	0800e960 	.word	0x0800e960

0800b6cc <_Bfree>:
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6d0:	4605      	mov	r5, r0
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	b976      	cbnz	r6, 800b6f4 <_Bfree+0x28>
 800b6d6:	2010      	movs	r0, #16
 800b6d8:	f7ff ffa2 	bl	800b620 <malloc>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	6268      	str	r0, [r5, #36]	; 0x24
 800b6e0:	b920      	cbnz	r0, 800b6ec <_Bfree+0x20>
 800b6e2:	218a      	movs	r1, #138	; 0x8a
 800b6e4:	4b08      	ldr	r3, [pc, #32]	; (800b708 <_Bfree+0x3c>)
 800b6e6:	4809      	ldr	r0, [pc, #36]	; (800b70c <_Bfree+0x40>)
 800b6e8:	f000 ffc0 	bl	800c66c <__assert_func>
 800b6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6f0:	6006      	str	r6, [r0, #0]
 800b6f2:	60c6      	str	r6, [r0, #12]
 800b6f4:	b13c      	cbz	r4, 800b706 <_Bfree+0x3a>
 800b6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6f8:	6862      	ldr	r2, [r4, #4]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b700:	6021      	str	r1, [r4, #0]
 800b702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b706:	bd70      	pop	{r4, r5, r6, pc}
 800b708:	0800e879 	.word	0x0800e879
 800b70c:	0800e960 	.word	0x0800e960

0800b710 <__multadd>:
 800b710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b714:	4698      	mov	r8, r3
 800b716:	460c      	mov	r4, r1
 800b718:	2300      	movs	r3, #0
 800b71a:	690e      	ldr	r6, [r1, #16]
 800b71c:	4607      	mov	r7, r0
 800b71e:	f101 0014 	add.w	r0, r1, #20
 800b722:	6805      	ldr	r5, [r0, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	b2a9      	uxth	r1, r5
 800b728:	fb02 8101 	mla	r1, r2, r1, r8
 800b72c:	0c2d      	lsrs	r5, r5, #16
 800b72e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b732:	fb02 c505 	mla	r5, r2, r5, ip
 800b736:	b289      	uxth	r1, r1
 800b738:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b73c:	429e      	cmp	r6, r3
 800b73e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b742:	f840 1b04 	str.w	r1, [r0], #4
 800b746:	dcec      	bgt.n	800b722 <__multadd+0x12>
 800b748:	f1b8 0f00 	cmp.w	r8, #0
 800b74c:	d022      	beq.n	800b794 <__multadd+0x84>
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	42b3      	cmp	r3, r6
 800b752:	dc19      	bgt.n	800b788 <__multadd+0x78>
 800b754:	6861      	ldr	r1, [r4, #4]
 800b756:	4638      	mov	r0, r7
 800b758:	3101      	adds	r1, #1
 800b75a:	f7ff ff77 	bl	800b64c <_Balloc>
 800b75e:	4605      	mov	r5, r0
 800b760:	b928      	cbnz	r0, 800b76e <__multadd+0x5e>
 800b762:	4602      	mov	r2, r0
 800b764:	21b5      	movs	r1, #181	; 0xb5
 800b766:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <__multadd+0x8c>)
 800b768:	480d      	ldr	r0, [pc, #52]	; (800b7a0 <__multadd+0x90>)
 800b76a:	f000 ff7f 	bl	800c66c <__assert_func>
 800b76e:	6922      	ldr	r2, [r4, #16]
 800b770:	f104 010c 	add.w	r1, r4, #12
 800b774:	3202      	adds	r2, #2
 800b776:	0092      	lsls	r2, r2, #2
 800b778:	300c      	adds	r0, #12
 800b77a:	f7fe fb21 	bl	8009dc0 <memcpy>
 800b77e:	4621      	mov	r1, r4
 800b780:	4638      	mov	r0, r7
 800b782:	f7ff ffa3 	bl	800b6cc <_Bfree>
 800b786:	462c      	mov	r4, r5
 800b788:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b78c:	3601      	adds	r6, #1
 800b78e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b792:	6126      	str	r6, [r4, #16]
 800b794:	4620      	mov	r0, r4
 800b796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b79a:	bf00      	nop
 800b79c:	0800e8ef 	.word	0x0800e8ef
 800b7a0:	0800e960 	.word	0x0800e960

0800b7a4 <__hi0bits>:
 800b7a4:	0c02      	lsrs	r2, r0, #16
 800b7a6:	0412      	lsls	r2, r2, #16
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	b9ca      	cbnz	r2, 800b7e0 <__hi0bits+0x3c>
 800b7ac:	0403      	lsls	r3, r0, #16
 800b7ae:	2010      	movs	r0, #16
 800b7b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b7b4:	bf04      	itt	eq
 800b7b6:	021b      	lsleq	r3, r3, #8
 800b7b8:	3008      	addeq	r0, #8
 800b7ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b7be:	bf04      	itt	eq
 800b7c0:	011b      	lsleq	r3, r3, #4
 800b7c2:	3004      	addeq	r0, #4
 800b7c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b7c8:	bf04      	itt	eq
 800b7ca:	009b      	lsleq	r3, r3, #2
 800b7cc:	3002      	addeq	r0, #2
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	db05      	blt.n	800b7de <__hi0bits+0x3a>
 800b7d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b7d6:	f100 0001 	add.w	r0, r0, #1
 800b7da:	bf08      	it	eq
 800b7dc:	2020      	moveq	r0, #32
 800b7de:	4770      	bx	lr
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e7e5      	b.n	800b7b0 <__hi0bits+0xc>

0800b7e4 <__lo0bits>:
 800b7e4:	6803      	ldr	r3, [r0, #0]
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	f013 0007 	ands.w	r0, r3, #7
 800b7ec:	d00b      	beq.n	800b806 <__lo0bits+0x22>
 800b7ee:	07d9      	lsls	r1, r3, #31
 800b7f0:	d422      	bmi.n	800b838 <__lo0bits+0x54>
 800b7f2:	0798      	lsls	r0, r3, #30
 800b7f4:	bf49      	itett	mi
 800b7f6:	085b      	lsrmi	r3, r3, #1
 800b7f8:	089b      	lsrpl	r3, r3, #2
 800b7fa:	2001      	movmi	r0, #1
 800b7fc:	6013      	strmi	r3, [r2, #0]
 800b7fe:	bf5c      	itt	pl
 800b800:	2002      	movpl	r0, #2
 800b802:	6013      	strpl	r3, [r2, #0]
 800b804:	4770      	bx	lr
 800b806:	b299      	uxth	r1, r3
 800b808:	b909      	cbnz	r1, 800b80e <__lo0bits+0x2a>
 800b80a:	2010      	movs	r0, #16
 800b80c:	0c1b      	lsrs	r3, r3, #16
 800b80e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b812:	bf04      	itt	eq
 800b814:	0a1b      	lsreq	r3, r3, #8
 800b816:	3008      	addeq	r0, #8
 800b818:	0719      	lsls	r1, r3, #28
 800b81a:	bf04      	itt	eq
 800b81c:	091b      	lsreq	r3, r3, #4
 800b81e:	3004      	addeq	r0, #4
 800b820:	0799      	lsls	r1, r3, #30
 800b822:	bf04      	itt	eq
 800b824:	089b      	lsreq	r3, r3, #2
 800b826:	3002      	addeq	r0, #2
 800b828:	07d9      	lsls	r1, r3, #31
 800b82a:	d403      	bmi.n	800b834 <__lo0bits+0x50>
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	f100 0001 	add.w	r0, r0, #1
 800b832:	d003      	beq.n	800b83c <__lo0bits+0x58>
 800b834:	6013      	str	r3, [r2, #0]
 800b836:	4770      	bx	lr
 800b838:	2000      	movs	r0, #0
 800b83a:	4770      	bx	lr
 800b83c:	2020      	movs	r0, #32
 800b83e:	4770      	bx	lr

0800b840 <__i2b>:
 800b840:	b510      	push	{r4, lr}
 800b842:	460c      	mov	r4, r1
 800b844:	2101      	movs	r1, #1
 800b846:	f7ff ff01 	bl	800b64c <_Balloc>
 800b84a:	4602      	mov	r2, r0
 800b84c:	b928      	cbnz	r0, 800b85a <__i2b+0x1a>
 800b84e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b852:	4b04      	ldr	r3, [pc, #16]	; (800b864 <__i2b+0x24>)
 800b854:	4804      	ldr	r0, [pc, #16]	; (800b868 <__i2b+0x28>)
 800b856:	f000 ff09 	bl	800c66c <__assert_func>
 800b85a:	2301      	movs	r3, #1
 800b85c:	6144      	str	r4, [r0, #20]
 800b85e:	6103      	str	r3, [r0, #16]
 800b860:	bd10      	pop	{r4, pc}
 800b862:	bf00      	nop
 800b864:	0800e8ef 	.word	0x0800e8ef
 800b868:	0800e960 	.word	0x0800e960

0800b86c <__multiply>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	4614      	mov	r4, r2
 800b872:	690a      	ldr	r2, [r1, #16]
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	460d      	mov	r5, r1
 800b878:	429a      	cmp	r2, r3
 800b87a:	bfbe      	ittt	lt
 800b87c:	460b      	movlt	r3, r1
 800b87e:	4625      	movlt	r5, r4
 800b880:	461c      	movlt	r4, r3
 800b882:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b886:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b88a:	68ab      	ldr	r3, [r5, #8]
 800b88c:	6869      	ldr	r1, [r5, #4]
 800b88e:	eb0a 0709 	add.w	r7, sl, r9
 800b892:	42bb      	cmp	r3, r7
 800b894:	b085      	sub	sp, #20
 800b896:	bfb8      	it	lt
 800b898:	3101      	addlt	r1, #1
 800b89a:	f7ff fed7 	bl	800b64c <_Balloc>
 800b89e:	b930      	cbnz	r0, 800b8ae <__multiply+0x42>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	f240 115d 	movw	r1, #349	; 0x15d
 800b8a6:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <__multiply+0x140>)
 800b8a8:	4841      	ldr	r0, [pc, #260]	; (800b9b0 <__multiply+0x144>)
 800b8aa:	f000 fedf 	bl	800c66c <__assert_func>
 800b8ae:	f100 0614 	add.w	r6, r0, #20
 800b8b2:	4633      	mov	r3, r6
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b8ba:	4543      	cmp	r3, r8
 800b8bc:	d31e      	bcc.n	800b8fc <__multiply+0x90>
 800b8be:	f105 0c14 	add.w	ip, r5, #20
 800b8c2:	f104 0314 	add.w	r3, r4, #20
 800b8c6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b8ca:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b8ce:	9202      	str	r2, [sp, #8]
 800b8d0:	ebac 0205 	sub.w	r2, ip, r5
 800b8d4:	3a15      	subs	r2, #21
 800b8d6:	f022 0203 	bic.w	r2, r2, #3
 800b8da:	3204      	adds	r2, #4
 800b8dc:	f105 0115 	add.w	r1, r5, #21
 800b8e0:	458c      	cmp	ip, r1
 800b8e2:	bf38      	it	cc
 800b8e4:	2204      	movcc	r2, #4
 800b8e6:	9201      	str	r2, [sp, #4]
 800b8e8:	9a02      	ldr	r2, [sp, #8]
 800b8ea:	9303      	str	r3, [sp, #12]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d808      	bhi.n	800b902 <__multiply+0x96>
 800b8f0:	2f00      	cmp	r7, #0
 800b8f2:	dc55      	bgt.n	800b9a0 <__multiply+0x134>
 800b8f4:	6107      	str	r7, [r0, #16]
 800b8f6:	b005      	add	sp, #20
 800b8f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fc:	f843 2b04 	str.w	r2, [r3], #4
 800b900:	e7db      	b.n	800b8ba <__multiply+0x4e>
 800b902:	f8b3 a000 	ldrh.w	sl, [r3]
 800b906:	f1ba 0f00 	cmp.w	sl, #0
 800b90a:	d020      	beq.n	800b94e <__multiply+0xe2>
 800b90c:	46b1      	mov	r9, r6
 800b90e:	2200      	movs	r2, #0
 800b910:	f105 0e14 	add.w	lr, r5, #20
 800b914:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b918:	f8d9 b000 	ldr.w	fp, [r9]
 800b91c:	b2a1      	uxth	r1, r4
 800b91e:	fa1f fb8b 	uxth.w	fp, fp
 800b922:	fb0a b101 	mla	r1, sl, r1, fp
 800b926:	4411      	add	r1, r2
 800b928:	f8d9 2000 	ldr.w	r2, [r9]
 800b92c:	0c24      	lsrs	r4, r4, #16
 800b92e:	0c12      	lsrs	r2, r2, #16
 800b930:	fb0a 2404 	mla	r4, sl, r4, r2
 800b934:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b938:	b289      	uxth	r1, r1
 800b93a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b93e:	45f4      	cmp	ip, lr
 800b940:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b944:	f849 1b04 	str.w	r1, [r9], #4
 800b948:	d8e4      	bhi.n	800b914 <__multiply+0xa8>
 800b94a:	9901      	ldr	r1, [sp, #4]
 800b94c:	5072      	str	r2, [r6, r1]
 800b94e:	9a03      	ldr	r2, [sp, #12]
 800b950:	3304      	adds	r3, #4
 800b952:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b956:	f1b9 0f00 	cmp.w	r9, #0
 800b95a:	d01f      	beq.n	800b99c <__multiply+0x130>
 800b95c:	46b6      	mov	lr, r6
 800b95e:	f04f 0a00 	mov.w	sl, #0
 800b962:	6834      	ldr	r4, [r6, #0]
 800b964:	f105 0114 	add.w	r1, r5, #20
 800b968:	880a      	ldrh	r2, [r1, #0]
 800b96a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b96e:	b2a4      	uxth	r4, r4
 800b970:	fb09 b202 	mla	r2, r9, r2, fp
 800b974:	4492      	add	sl, r2
 800b976:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b97a:	f84e 4b04 	str.w	r4, [lr], #4
 800b97e:	f851 4b04 	ldr.w	r4, [r1], #4
 800b982:	f8be 2000 	ldrh.w	r2, [lr]
 800b986:	0c24      	lsrs	r4, r4, #16
 800b988:	fb09 2404 	mla	r4, r9, r4, r2
 800b98c:	458c      	cmp	ip, r1
 800b98e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b992:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b996:	d8e7      	bhi.n	800b968 <__multiply+0xfc>
 800b998:	9a01      	ldr	r2, [sp, #4]
 800b99a:	50b4      	str	r4, [r6, r2]
 800b99c:	3604      	adds	r6, #4
 800b99e:	e7a3      	b.n	800b8e8 <__multiply+0x7c>
 800b9a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d1a5      	bne.n	800b8f4 <__multiply+0x88>
 800b9a8:	3f01      	subs	r7, #1
 800b9aa:	e7a1      	b.n	800b8f0 <__multiply+0x84>
 800b9ac:	0800e8ef 	.word	0x0800e8ef
 800b9b0:	0800e960 	.word	0x0800e960

0800b9b4 <__pow5mult>:
 800b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4615      	mov	r5, r2
 800b9ba:	f012 0203 	ands.w	r2, r2, #3
 800b9be:	4606      	mov	r6, r0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	d007      	beq.n	800b9d4 <__pow5mult+0x20>
 800b9c4:	4c25      	ldr	r4, [pc, #148]	; (800ba5c <__pow5mult+0xa8>)
 800b9c6:	3a01      	subs	r2, #1
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ce:	f7ff fe9f 	bl	800b710 <__multadd>
 800b9d2:	4607      	mov	r7, r0
 800b9d4:	10ad      	asrs	r5, r5, #2
 800b9d6:	d03d      	beq.n	800ba54 <__pow5mult+0xa0>
 800b9d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9da:	b97c      	cbnz	r4, 800b9fc <__pow5mult+0x48>
 800b9dc:	2010      	movs	r0, #16
 800b9de:	f7ff fe1f 	bl	800b620 <malloc>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	6270      	str	r0, [r6, #36]	; 0x24
 800b9e6:	b928      	cbnz	r0, 800b9f4 <__pow5mult+0x40>
 800b9e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9ec:	4b1c      	ldr	r3, [pc, #112]	; (800ba60 <__pow5mult+0xac>)
 800b9ee:	481d      	ldr	r0, [pc, #116]	; (800ba64 <__pow5mult+0xb0>)
 800b9f0:	f000 fe3c 	bl	800c66c <__assert_func>
 800b9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9f8:	6004      	str	r4, [r0, #0]
 800b9fa:	60c4      	str	r4, [r0, #12]
 800b9fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba04:	b94c      	cbnz	r4, 800ba1a <__pow5mult+0x66>
 800ba06:	f240 2171 	movw	r1, #625	; 0x271
 800ba0a:	4630      	mov	r0, r6
 800ba0c:	f7ff ff18 	bl	800b840 <__i2b>
 800ba10:	2300      	movs	r3, #0
 800ba12:	4604      	mov	r4, r0
 800ba14:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba18:	6003      	str	r3, [r0, #0]
 800ba1a:	f04f 0900 	mov.w	r9, #0
 800ba1e:	07eb      	lsls	r3, r5, #31
 800ba20:	d50a      	bpl.n	800ba38 <__pow5mult+0x84>
 800ba22:	4639      	mov	r1, r7
 800ba24:	4622      	mov	r2, r4
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7ff ff20 	bl	800b86c <__multiply>
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	4639      	mov	r1, r7
 800ba30:	4630      	mov	r0, r6
 800ba32:	f7ff fe4b 	bl	800b6cc <_Bfree>
 800ba36:	4647      	mov	r7, r8
 800ba38:	106d      	asrs	r5, r5, #1
 800ba3a:	d00b      	beq.n	800ba54 <__pow5mult+0xa0>
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	b938      	cbnz	r0, 800ba50 <__pow5mult+0x9c>
 800ba40:	4622      	mov	r2, r4
 800ba42:	4621      	mov	r1, r4
 800ba44:	4630      	mov	r0, r6
 800ba46:	f7ff ff11 	bl	800b86c <__multiply>
 800ba4a:	6020      	str	r0, [r4, #0]
 800ba4c:	f8c0 9000 	str.w	r9, [r0]
 800ba50:	4604      	mov	r4, r0
 800ba52:	e7e4      	b.n	800ba1e <__pow5mult+0x6a>
 800ba54:	4638      	mov	r0, r7
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800eab0 	.word	0x0800eab0
 800ba60:	0800e879 	.word	0x0800e879
 800ba64:	0800e960 	.word	0x0800e960

0800ba68 <__lshift>:
 800ba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	4607      	mov	r7, r0
 800ba70:	4691      	mov	r9, r2
 800ba72:	6923      	ldr	r3, [r4, #16]
 800ba74:	6849      	ldr	r1, [r1, #4]
 800ba76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba7a:	68a3      	ldr	r3, [r4, #8]
 800ba7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba80:	f108 0601 	add.w	r6, r8, #1
 800ba84:	42b3      	cmp	r3, r6
 800ba86:	db0b      	blt.n	800baa0 <__lshift+0x38>
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff fddf 	bl	800b64c <_Balloc>
 800ba8e:	4605      	mov	r5, r0
 800ba90:	b948      	cbnz	r0, 800baa6 <__lshift+0x3e>
 800ba92:	4602      	mov	r2, r0
 800ba94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba98:	4b27      	ldr	r3, [pc, #156]	; (800bb38 <__lshift+0xd0>)
 800ba9a:	4828      	ldr	r0, [pc, #160]	; (800bb3c <__lshift+0xd4>)
 800ba9c:	f000 fde6 	bl	800c66c <__assert_func>
 800baa0:	3101      	adds	r1, #1
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	e7ee      	b.n	800ba84 <__lshift+0x1c>
 800baa6:	2300      	movs	r3, #0
 800baa8:	f100 0114 	add.w	r1, r0, #20
 800baac:	f100 0210 	add.w	r2, r0, #16
 800bab0:	4618      	mov	r0, r3
 800bab2:	4553      	cmp	r3, sl
 800bab4:	db33      	blt.n	800bb1e <__lshift+0xb6>
 800bab6:	6920      	ldr	r0, [r4, #16]
 800bab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800babc:	f104 0314 	add.w	r3, r4, #20
 800bac0:	f019 091f 	ands.w	r9, r9, #31
 800bac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bacc:	d02b      	beq.n	800bb26 <__lshift+0xbe>
 800bace:	468a      	mov	sl, r1
 800bad0:	2200      	movs	r2, #0
 800bad2:	f1c9 0e20 	rsb	lr, r9, #32
 800bad6:	6818      	ldr	r0, [r3, #0]
 800bad8:	fa00 f009 	lsl.w	r0, r0, r9
 800badc:	4302      	orrs	r2, r0
 800bade:	f84a 2b04 	str.w	r2, [sl], #4
 800bae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bae6:	459c      	cmp	ip, r3
 800bae8:	fa22 f20e 	lsr.w	r2, r2, lr
 800baec:	d8f3      	bhi.n	800bad6 <__lshift+0x6e>
 800baee:	ebac 0304 	sub.w	r3, ip, r4
 800baf2:	3b15      	subs	r3, #21
 800baf4:	f023 0303 	bic.w	r3, r3, #3
 800baf8:	3304      	adds	r3, #4
 800bafa:	f104 0015 	add.w	r0, r4, #21
 800bafe:	4584      	cmp	ip, r0
 800bb00:	bf38      	it	cc
 800bb02:	2304      	movcc	r3, #4
 800bb04:	50ca      	str	r2, [r1, r3]
 800bb06:	b10a      	cbz	r2, 800bb0c <__lshift+0xa4>
 800bb08:	f108 0602 	add.w	r6, r8, #2
 800bb0c:	3e01      	subs	r6, #1
 800bb0e:	4638      	mov	r0, r7
 800bb10:	4621      	mov	r1, r4
 800bb12:	612e      	str	r6, [r5, #16]
 800bb14:	f7ff fdda 	bl	800b6cc <_Bfree>
 800bb18:	4628      	mov	r0, r5
 800bb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb22:	3301      	adds	r3, #1
 800bb24:	e7c5      	b.n	800bab2 <__lshift+0x4a>
 800bb26:	3904      	subs	r1, #4
 800bb28:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb2c:	459c      	cmp	ip, r3
 800bb2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb32:	d8f9      	bhi.n	800bb28 <__lshift+0xc0>
 800bb34:	e7ea      	b.n	800bb0c <__lshift+0xa4>
 800bb36:	bf00      	nop
 800bb38:	0800e8ef 	.word	0x0800e8ef
 800bb3c:	0800e960 	.word	0x0800e960

0800bb40 <__mcmp>:
 800bb40:	4603      	mov	r3, r0
 800bb42:	690a      	ldr	r2, [r1, #16]
 800bb44:	6900      	ldr	r0, [r0, #16]
 800bb46:	b530      	push	{r4, r5, lr}
 800bb48:	1a80      	subs	r0, r0, r2
 800bb4a:	d10d      	bne.n	800bb68 <__mcmp+0x28>
 800bb4c:	3314      	adds	r3, #20
 800bb4e:	3114      	adds	r1, #20
 800bb50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bb54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bb58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bb5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bb60:	4295      	cmp	r5, r2
 800bb62:	d002      	beq.n	800bb6a <__mcmp+0x2a>
 800bb64:	d304      	bcc.n	800bb70 <__mcmp+0x30>
 800bb66:	2001      	movs	r0, #1
 800bb68:	bd30      	pop	{r4, r5, pc}
 800bb6a:	42a3      	cmp	r3, r4
 800bb6c:	d3f4      	bcc.n	800bb58 <__mcmp+0x18>
 800bb6e:	e7fb      	b.n	800bb68 <__mcmp+0x28>
 800bb70:	f04f 30ff 	mov.w	r0, #4294967295
 800bb74:	e7f8      	b.n	800bb68 <__mcmp+0x28>
	...

0800bb78 <__mdiff>:
 800bb78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	460c      	mov	r4, r1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	4611      	mov	r1, r2
 800bb82:	4620      	mov	r0, r4
 800bb84:	4692      	mov	sl, r2
 800bb86:	f7ff ffdb 	bl	800bb40 <__mcmp>
 800bb8a:	1e05      	subs	r5, r0, #0
 800bb8c:	d111      	bne.n	800bbb2 <__mdiff+0x3a>
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4630      	mov	r0, r6
 800bb92:	f7ff fd5b 	bl	800b64c <_Balloc>
 800bb96:	4602      	mov	r2, r0
 800bb98:	b928      	cbnz	r0, 800bba6 <__mdiff+0x2e>
 800bb9a:	f240 2132 	movw	r1, #562	; 0x232
 800bb9e:	4b3c      	ldr	r3, [pc, #240]	; (800bc90 <__mdiff+0x118>)
 800bba0:	483c      	ldr	r0, [pc, #240]	; (800bc94 <__mdiff+0x11c>)
 800bba2:	f000 fd63 	bl	800c66c <__assert_func>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbac:	4610      	mov	r0, r2
 800bbae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb2:	bfa4      	itt	ge
 800bbb4:	4653      	movge	r3, sl
 800bbb6:	46a2      	movge	sl, r4
 800bbb8:	4630      	mov	r0, r6
 800bbba:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bbbe:	bfa6      	itte	ge
 800bbc0:	461c      	movge	r4, r3
 800bbc2:	2500      	movge	r5, #0
 800bbc4:	2501      	movlt	r5, #1
 800bbc6:	f7ff fd41 	bl	800b64c <_Balloc>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	b918      	cbnz	r0, 800bbd6 <__mdiff+0x5e>
 800bbce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbd2:	4b2f      	ldr	r3, [pc, #188]	; (800bc90 <__mdiff+0x118>)
 800bbd4:	e7e4      	b.n	800bba0 <__mdiff+0x28>
 800bbd6:	f100 0814 	add.w	r8, r0, #20
 800bbda:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bbde:	60c5      	str	r5, [r0, #12]
 800bbe0:	f04f 0c00 	mov.w	ip, #0
 800bbe4:	f10a 0514 	add.w	r5, sl, #20
 800bbe8:	f10a 0010 	add.w	r0, sl, #16
 800bbec:	46c2      	mov	sl, r8
 800bbee:	6926      	ldr	r6, [r4, #16]
 800bbf0:	f104 0914 	add.w	r9, r4, #20
 800bbf4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bbf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbfc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bc00:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc04:	fa1f f18b 	uxth.w	r1, fp
 800bc08:	4461      	add	r1, ip
 800bc0a:	fa1f fc83 	uxth.w	ip, r3
 800bc0e:	0c1b      	lsrs	r3, r3, #16
 800bc10:	eba1 010c 	sub.w	r1, r1, ip
 800bc14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bc1c:	b289      	uxth	r1, r1
 800bc1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bc22:	454e      	cmp	r6, r9
 800bc24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bc28:	f84a 3b04 	str.w	r3, [sl], #4
 800bc2c:	d8e6      	bhi.n	800bbfc <__mdiff+0x84>
 800bc2e:	1b33      	subs	r3, r6, r4
 800bc30:	3b15      	subs	r3, #21
 800bc32:	f023 0303 	bic.w	r3, r3, #3
 800bc36:	3415      	adds	r4, #21
 800bc38:	3304      	adds	r3, #4
 800bc3a:	42a6      	cmp	r6, r4
 800bc3c:	bf38      	it	cc
 800bc3e:	2304      	movcc	r3, #4
 800bc40:	441d      	add	r5, r3
 800bc42:	4443      	add	r3, r8
 800bc44:	461e      	mov	r6, r3
 800bc46:	462c      	mov	r4, r5
 800bc48:	4574      	cmp	r4, lr
 800bc4a:	d30e      	bcc.n	800bc6a <__mdiff+0xf2>
 800bc4c:	f10e 0103 	add.w	r1, lr, #3
 800bc50:	1b49      	subs	r1, r1, r5
 800bc52:	f021 0103 	bic.w	r1, r1, #3
 800bc56:	3d03      	subs	r5, #3
 800bc58:	45ae      	cmp	lr, r5
 800bc5a:	bf38      	it	cc
 800bc5c:	2100      	movcc	r1, #0
 800bc5e:	4419      	add	r1, r3
 800bc60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bc64:	b18b      	cbz	r3, 800bc8a <__mdiff+0x112>
 800bc66:	6117      	str	r7, [r2, #16]
 800bc68:	e7a0      	b.n	800bbac <__mdiff+0x34>
 800bc6a:	f854 8b04 	ldr.w	r8, [r4], #4
 800bc6e:	fa1f f188 	uxth.w	r1, r8
 800bc72:	4461      	add	r1, ip
 800bc74:	1408      	asrs	r0, r1, #16
 800bc76:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bc7a:	b289      	uxth	r1, r1
 800bc7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bc80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bc84:	f846 1b04 	str.w	r1, [r6], #4
 800bc88:	e7de      	b.n	800bc48 <__mdiff+0xd0>
 800bc8a:	3f01      	subs	r7, #1
 800bc8c:	e7e8      	b.n	800bc60 <__mdiff+0xe8>
 800bc8e:	bf00      	nop
 800bc90:	0800e8ef 	.word	0x0800e8ef
 800bc94:	0800e960 	.word	0x0800e960

0800bc98 <__d2b>:
 800bc98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bca2:	4690      	mov	r8, r2
 800bca4:	461d      	mov	r5, r3
 800bca6:	f7ff fcd1 	bl	800b64c <_Balloc>
 800bcaa:	4604      	mov	r4, r0
 800bcac:	b930      	cbnz	r0, 800bcbc <__d2b+0x24>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	f240 310a 	movw	r1, #778	; 0x30a
 800bcb4:	4b24      	ldr	r3, [pc, #144]	; (800bd48 <__d2b+0xb0>)
 800bcb6:	4825      	ldr	r0, [pc, #148]	; (800bd4c <__d2b+0xb4>)
 800bcb8:	f000 fcd8 	bl	800c66c <__assert_func>
 800bcbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bcc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bcc4:	bb2d      	cbnz	r5, 800bd12 <__d2b+0x7a>
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	f1b8 0300 	subs.w	r3, r8, #0
 800bccc:	d026      	beq.n	800bd1c <__d2b+0x84>
 800bcce:	4668      	mov	r0, sp
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	f7ff fd87 	bl	800b7e4 <__lo0bits>
 800bcd6:	9900      	ldr	r1, [sp, #0]
 800bcd8:	b1f0      	cbz	r0, 800bd18 <__d2b+0x80>
 800bcda:	9a01      	ldr	r2, [sp, #4]
 800bcdc:	f1c0 0320 	rsb	r3, r0, #32
 800bce0:	fa02 f303 	lsl.w	r3, r2, r3
 800bce4:	430b      	orrs	r3, r1
 800bce6:	40c2      	lsrs	r2, r0
 800bce8:	6163      	str	r3, [r4, #20]
 800bcea:	9201      	str	r2, [sp, #4]
 800bcec:	9b01      	ldr	r3, [sp, #4]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	bf14      	ite	ne
 800bcf2:	2102      	movne	r1, #2
 800bcf4:	2101      	moveq	r1, #1
 800bcf6:	61a3      	str	r3, [r4, #24]
 800bcf8:	6121      	str	r1, [r4, #16]
 800bcfa:	b1c5      	cbz	r5, 800bd2e <__d2b+0x96>
 800bcfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd00:	4405      	add	r5, r0
 800bd02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd06:	603d      	str	r5, [r7, #0]
 800bd08:	6030      	str	r0, [r6, #0]
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	b002      	add	sp, #8
 800bd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd16:	e7d6      	b.n	800bcc6 <__d2b+0x2e>
 800bd18:	6161      	str	r1, [r4, #20]
 800bd1a:	e7e7      	b.n	800bcec <__d2b+0x54>
 800bd1c:	a801      	add	r0, sp, #4
 800bd1e:	f7ff fd61 	bl	800b7e4 <__lo0bits>
 800bd22:	2101      	movs	r1, #1
 800bd24:	9b01      	ldr	r3, [sp, #4]
 800bd26:	6121      	str	r1, [r4, #16]
 800bd28:	6163      	str	r3, [r4, #20]
 800bd2a:	3020      	adds	r0, #32
 800bd2c:	e7e5      	b.n	800bcfa <__d2b+0x62>
 800bd2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bd32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd36:	6038      	str	r0, [r7, #0]
 800bd38:	6918      	ldr	r0, [r3, #16]
 800bd3a:	f7ff fd33 	bl	800b7a4 <__hi0bits>
 800bd3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bd42:	6031      	str	r1, [r6, #0]
 800bd44:	e7e1      	b.n	800bd0a <__d2b+0x72>
 800bd46:	bf00      	nop
 800bd48:	0800e8ef 	.word	0x0800e8ef
 800bd4c:	0800e960 	.word	0x0800e960

0800bd50 <_calloc_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	fb02 f501 	mul.w	r5, r2, r1
 800bd56:	4629      	mov	r1, r5
 800bd58:	f000 f854 	bl	800be04 <_malloc_r>
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	b118      	cbz	r0, 800bd68 <_calloc_r+0x18>
 800bd60:	462a      	mov	r2, r5
 800bd62:	2100      	movs	r1, #0
 800bd64:	f7fe f83a 	bl	8009ddc <memset>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}

0800bd6c <_free_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4605      	mov	r5, r0
 800bd70:	2900      	cmp	r1, #0
 800bd72:	d043      	beq.n	800bdfc <_free_r+0x90>
 800bd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd78:	1f0c      	subs	r4, r1, #4
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bfb8      	it	lt
 800bd7e:	18e4      	addlt	r4, r4, r3
 800bd80:	f000 fe18 	bl	800c9b4 <__malloc_lock>
 800bd84:	4a1e      	ldr	r2, [pc, #120]	; (800be00 <_free_r+0x94>)
 800bd86:	6813      	ldr	r3, [r2, #0]
 800bd88:	4610      	mov	r0, r2
 800bd8a:	b933      	cbnz	r3, 800bd9a <_free_r+0x2e>
 800bd8c:	6063      	str	r3, [r4, #4]
 800bd8e:	6014      	str	r4, [r2, #0]
 800bd90:	4628      	mov	r0, r5
 800bd92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd96:	f000 be13 	b.w	800c9c0 <__malloc_unlock>
 800bd9a:	42a3      	cmp	r3, r4
 800bd9c:	d90a      	bls.n	800bdb4 <_free_r+0x48>
 800bd9e:	6821      	ldr	r1, [r4, #0]
 800bda0:	1862      	adds	r2, r4, r1
 800bda2:	4293      	cmp	r3, r2
 800bda4:	bf01      	itttt	eq
 800bda6:	681a      	ldreq	r2, [r3, #0]
 800bda8:	685b      	ldreq	r3, [r3, #4]
 800bdaa:	1852      	addeq	r2, r2, r1
 800bdac:	6022      	streq	r2, [r4, #0]
 800bdae:	6063      	str	r3, [r4, #4]
 800bdb0:	6004      	str	r4, [r0, #0]
 800bdb2:	e7ed      	b.n	800bd90 <_free_r+0x24>
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	b10b      	cbz	r3, 800bdbe <_free_r+0x52>
 800bdba:	42a3      	cmp	r3, r4
 800bdbc:	d9fa      	bls.n	800bdb4 <_free_r+0x48>
 800bdbe:	6811      	ldr	r1, [r2, #0]
 800bdc0:	1850      	adds	r0, r2, r1
 800bdc2:	42a0      	cmp	r0, r4
 800bdc4:	d10b      	bne.n	800bdde <_free_r+0x72>
 800bdc6:	6820      	ldr	r0, [r4, #0]
 800bdc8:	4401      	add	r1, r0
 800bdca:	1850      	adds	r0, r2, r1
 800bdcc:	4283      	cmp	r3, r0
 800bdce:	6011      	str	r1, [r2, #0]
 800bdd0:	d1de      	bne.n	800bd90 <_free_r+0x24>
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	4401      	add	r1, r0
 800bdd8:	6011      	str	r1, [r2, #0]
 800bdda:	6053      	str	r3, [r2, #4]
 800bddc:	e7d8      	b.n	800bd90 <_free_r+0x24>
 800bdde:	d902      	bls.n	800bde6 <_free_r+0x7a>
 800bde0:	230c      	movs	r3, #12
 800bde2:	602b      	str	r3, [r5, #0]
 800bde4:	e7d4      	b.n	800bd90 <_free_r+0x24>
 800bde6:	6820      	ldr	r0, [r4, #0]
 800bde8:	1821      	adds	r1, r4, r0
 800bdea:	428b      	cmp	r3, r1
 800bdec:	bf01      	itttt	eq
 800bdee:	6819      	ldreq	r1, [r3, #0]
 800bdf0:	685b      	ldreq	r3, [r3, #4]
 800bdf2:	1809      	addeq	r1, r1, r0
 800bdf4:	6021      	streq	r1, [r4, #0]
 800bdf6:	6063      	str	r3, [r4, #4]
 800bdf8:	6054      	str	r4, [r2, #4]
 800bdfa:	e7c9      	b.n	800bd90 <_free_r+0x24>
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	20001b98 	.word	0x20001b98

0800be04 <_malloc_r>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	1ccd      	adds	r5, r1, #3
 800be08:	f025 0503 	bic.w	r5, r5, #3
 800be0c:	3508      	adds	r5, #8
 800be0e:	2d0c      	cmp	r5, #12
 800be10:	bf38      	it	cc
 800be12:	250c      	movcc	r5, #12
 800be14:	2d00      	cmp	r5, #0
 800be16:	4606      	mov	r6, r0
 800be18:	db01      	blt.n	800be1e <_malloc_r+0x1a>
 800be1a:	42a9      	cmp	r1, r5
 800be1c:	d903      	bls.n	800be26 <_malloc_r+0x22>
 800be1e:	230c      	movs	r3, #12
 800be20:	6033      	str	r3, [r6, #0]
 800be22:	2000      	movs	r0, #0
 800be24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be26:	f000 fdc5 	bl	800c9b4 <__malloc_lock>
 800be2a:	4921      	ldr	r1, [pc, #132]	; (800beb0 <_malloc_r+0xac>)
 800be2c:	680a      	ldr	r2, [r1, #0]
 800be2e:	4614      	mov	r4, r2
 800be30:	b99c      	cbnz	r4, 800be5a <_malloc_r+0x56>
 800be32:	4f20      	ldr	r7, [pc, #128]	; (800beb4 <_malloc_r+0xb0>)
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	b923      	cbnz	r3, 800be42 <_malloc_r+0x3e>
 800be38:	4621      	mov	r1, r4
 800be3a:	4630      	mov	r0, r6
 800be3c:	f000 faf0 	bl	800c420 <_sbrk_r>
 800be40:	6038      	str	r0, [r7, #0]
 800be42:	4629      	mov	r1, r5
 800be44:	4630      	mov	r0, r6
 800be46:	f000 faeb 	bl	800c420 <_sbrk_r>
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	d123      	bne.n	800be96 <_malloc_r+0x92>
 800be4e:	230c      	movs	r3, #12
 800be50:	4630      	mov	r0, r6
 800be52:	6033      	str	r3, [r6, #0]
 800be54:	f000 fdb4 	bl	800c9c0 <__malloc_unlock>
 800be58:	e7e3      	b.n	800be22 <_malloc_r+0x1e>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	1b5b      	subs	r3, r3, r5
 800be5e:	d417      	bmi.n	800be90 <_malloc_r+0x8c>
 800be60:	2b0b      	cmp	r3, #11
 800be62:	d903      	bls.n	800be6c <_malloc_r+0x68>
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	441c      	add	r4, r3
 800be68:	6025      	str	r5, [r4, #0]
 800be6a:	e004      	b.n	800be76 <_malloc_r+0x72>
 800be6c:	6863      	ldr	r3, [r4, #4]
 800be6e:	42a2      	cmp	r2, r4
 800be70:	bf0c      	ite	eq
 800be72:	600b      	streq	r3, [r1, #0]
 800be74:	6053      	strne	r3, [r2, #4]
 800be76:	4630      	mov	r0, r6
 800be78:	f000 fda2 	bl	800c9c0 <__malloc_unlock>
 800be7c:	f104 000b 	add.w	r0, r4, #11
 800be80:	1d23      	adds	r3, r4, #4
 800be82:	f020 0007 	bic.w	r0, r0, #7
 800be86:	1ac2      	subs	r2, r0, r3
 800be88:	d0cc      	beq.n	800be24 <_malloc_r+0x20>
 800be8a:	1a1b      	subs	r3, r3, r0
 800be8c:	50a3      	str	r3, [r4, r2]
 800be8e:	e7c9      	b.n	800be24 <_malloc_r+0x20>
 800be90:	4622      	mov	r2, r4
 800be92:	6864      	ldr	r4, [r4, #4]
 800be94:	e7cc      	b.n	800be30 <_malloc_r+0x2c>
 800be96:	1cc4      	adds	r4, r0, #3
 800be98:	f024 0403 	bic.w	r4, r4, #3
 800be9c:	42a0      	cmp	r0, r4
 800be9e:	d0e3      	beq.n	800be68 <_malloc_r+0x64>
 800bea0:	1a21      	subs	r1, r4, r0
 800bea2:	4630      	mov	r0, r6
 800bea4:	f000 fabc 	bl	800c420 <_sbrk_r>
 800bea8:	3001      	adds	r0, #1
 800beaa:	d1dd      	bne.n	800be68 <_malloc_r+0x64>
 800beac:	e7cf      	b.n	800be4e <_malloc_r+0x4a>
 800beae:	bf00      	nop
 800beb0:	20001b98 	.word	0x20001b98
 800beb4:	20001b9c 	.word	0x20001b9c

0800beb8 <__ssputs_r>:
 800beb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bebc:	688e      	ldr	r6, [r1, #8]
 800bebe:	4682      	mov	sl, r0
 800bec0:	429e      	cmp	r6, r3
 800bec2:	460c      	mov	r4, r1
 800bec4:	4690      	mov	r8, r2
 800bec6:	461f      	mov	r7, r3
 800bec8:	d838      	bhi.n	800bf3c <__ssputs_r+0x84>
 800beca:	898a      	ldrh	r2, [r1, #12]
 800becc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bed0:	d032      	beq.n	800bf38 <__ssputs_r+0x80>
 800bed2:	6825      	ldr	r5, [r4, #0]
 800bed4:	6909      	ldr	r1, [r1, #16]
 800bed6:	3301      	adds	r3, #1
 800bed8:	eba5 0901 	sub.w	r9, r5, r1
 800bedc:	6965      	ldr	r5, [r4, #20]
 800bede:	444b      	add	r3, r9
 800bee0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bee8:	106d      	asrs	r5, r5, #1
 800beea:	429d      	cmp	r5, r3
 800beec:	bf38      	it	cc
 800beee:	461d      	movcc	r5, r3
 800bef0:	0553      	lsls	r3, r2, #21
 800bef2:	d531      	bpl.n	800bf58 <__ssputs_r+0xa0>
 800bef4:	4629      	mov	r1, r5
 800bef6:	f7ff ff85 	bl	800be04 <_malloc_r>
 800befa:	4606      	mov	r6, r0
 800befc:	b950      	cbnz	r0, 800bf14 <__ssputs_r+0x5c>
 800befe:	230c      	movs	r3, #12
 800bf00:	f04f 30ff 	mov.w	r0, #4294967295
 800bf04:	f8ca 3000 	str.w	r3, [sl]
 800bf08:	89a3      	ldrh	r3, [r4, #12]
 800bf0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf14:	464a      	mov	r2, r9
 800bf16:	6921      	ldr	r1, [r4, #16]
 800bf18:	f7fd ff52 	bl	8009dc0 <memcpy>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bf22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	6126      	str	r6, [r4, #16]
 800bf2a:	444e      	add	r6, r9
 800bf2c:	6026      	str	r6, [r4, #0]
 800bf2e:	463e      	mov	r6, r7
 800bf30:	6165      	str	r5, [r4, #20]
 800bf32:	eba5 0509 	sub.w	r5, r5, r9
 800bf36:	60a5      	str	r5, [r4, #8]
 800bf38:	42be      	cmp	r6, r7
 800bf3a:	d900      	bls.n	800bf3e <__ssputs_r+0x86>
 800bf3c:	463e      	mov	r6, r7
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4641      	mov	r1, r8
 800bf42:	6820      	ldr	r0, [r4, #0]
 800bf44:	f000 fd1c 	bl	800c980 <memmove>
 800bf48:	68a3      	ldr	r3, [r4, #8]
 800bf4a:	6822      	ldr	r2, [r4, #0]
 800bf4c:	1b9b      	subs	r3, r3, r6
 800bf4e:	4432      	add	r2, r6
 800bf50:	2000      	movs	r0, #0
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	6022      	str	r2, [r4, #0]
 800bf56:	e7db      	b.n	800bf10 <__ssputs_r+0x58>
 800bf58:	462a      	mov	r2, r5
 800bf5a:	f000 fd37 	bl	800c9cc <_realloc_r>
 800bf5e:	4606      	mov	r6, r0
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d1e1      	bne.n	800bf28 <__ssputs_r+0x70>
 800bf64:	4650      	mov	r0, sl
 800bf66:	6921      	ldr	r1, [r4, #16]
 800bf68:	f7ff ff00 	bl	800bd6c <_free_r>
 800bf6c:	e7c7      	b.n	800befe <__ssputs_r+0x46>
	...

0800bf70 <_svfiprintf_r>:
 800bf70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf74:	4698      	mov	r8, r3
 800bf76:	898b      	ldrh	r3, [r1, #12]
 800bf78:	4607      	mov	r7, r0
 800bf7a:	061b      	lsls	r3, r3, #24
 800bf7c:	460d      	mov	r5, r1
 800bf7e:	4614      	mov	r4, r2
 800bf80:	b09d      	sub	sp, #116	; 0x74
 800bf82:	d50e      	bpl.n	800bfa2 <_svfiprintf_r+0x32>
 800bf84:	690b      	ldr	r3, [r1, #16]
 800bf86:	b963      	cbnz	r3, 800bfa2 <_svfiprintf_r+0x32>
 800bf88:	2140      	movs	r1, #64	; 0x40
 800bf8a:	f7ff ff3b 	bl	800be04 <_malloc_r>
 800bf8e:	6028      	str	r0, [r5, #0]
 800bf90:	6128      	str	r0, [r5, #16]
 800bf92:	b920      	cbnz	r0, 800bf9e <_svfiprintf_r+0x2e>
 800bf94:	230c      	movs	r3, #12
 800bf96:	603b      	str	r3, [r7, #0]
 800bf98:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9c:	e0d1      	b.n	800c142 <_svfiprintf_r+0x1d2>
 800bf9e:	2340      	movs	r3, #64	; 0x40
 800bfa0:	616b      	str	r3, [r5, #20]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	2320      	movs	r3, #32
 800bfa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfac:	2330      	movs	r3, #48	; 0x30
 800bfae:	f04f 0901 	mov.w	r9, #1
 800bfb2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfb6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c15c <_svfiprintf_r+0x1ec>
 800bfba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfbe:	4623      	mov	r3, r4
 800bfc0:	469a      	mov	sl, r3
 800bfc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfc6:	b10a      	cbz	r2, 800bfcc <_svfiprintf_r+0x5c>
 800bfc8:	2a25      	cmp	r2, #37	; 0x25
 800bfca:	d1f9      	bne.n	800bfc0 <_svfiprintf_r+0x50>
 800bfcc:	ebba 0b04 	subs.w	fp, sl, r4
 800bfd0:	d00b      	beq.n	800bfea <_svfiprintf_r+0x7a>
 800bfd2:	465b      	mov	r3, fp
 800bfd4:	4622      	mov	r2, r4
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f7ff ff6d 	bl	800beb8 <__ssputs_r>
 800bfde:	3001      	adds	r0, #1
 800bfe0:	f000 80aa 	beq.w	800c138 <_svfiprintf_r+0x1c8>
 800bfe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe6:	445a      	add	r2, fp
 800bfe8:	9209      	str	r2, [sp, #36]	; 0x24
 800bfea:	f89a 3000 	ldrb.w	r3, [sl]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 80a2 	beq.w	800c138 <_svfiprintf_r+0x1c8>
 800bff4:	2300      	movs	r3, #0
 800bff6:	f04f 32ff 	mov.w	r2, #4294967295
 800bffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bffe:	f10a 0a01 	add.w	sl, sl, #1
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	9307      	str	r3, [sp, #28]
 800c006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c00a:	931a      	str	r3, [sp, #104]	; 0x68
 800c00c:	4654      	mov	r4, sl
 800c00e:	2205      	movs	r2, #5
 800c010:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c014:	4851      	ldr	r0, [pc, #324]	; (800c15c <_svfiprintf_r+0x1ec>)
 800c016:	f7ff fb0b 	bl	800b630 <memchr>
 800c01a:	9a04      	ldr	r2, [sp, #16]
 800c01c:	b9d8      	cbnz	r0, 800c056 <_svfiprintf_r+0xe6>
 800c01e:	06d0      	lsls	r0, r2, #27
 800c020:	bf44      	itt	mi
 800c022:	2320      	movmi	r3, #32
 800c024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c028:	0711      	lsls	r1, r2, #28
 800c02a:	bf44      	itt	mi
 800c02c:	232b      	movmi	r3, #43	; 0x2b
 800c02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c032:	f89a 3000 	ldrb.w	r3, [sl]
 800c036:	2b2a      	cmp	r3, #42	; 0x2a
 800c038:	d015      	beq.n	800c066 <_svfiprintf_r+0xf6>
 800c03a:	4654      	mov	r4, sl
 800c03c:	2000      	movs	r0, #0
 800c03e:	f04f 0c0a 	mov.w	ip, #10
 800c042:	9a07      	ldr	r2, [sp, #28]
 800c044:	4621      	mov	r1, r4
 800c046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c04a:	3b30      	subs	r3, #48	; 0x30
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d94e      	bls.n	800c0ee <_svfiprintf_r+0x17e>
 800c050:	b1b0      	cbz	r0, 800c080 <_svfiprintf_r+0x110>
 800c052:	9207      	str	r2, [sp, #28]
 800c054:	e014      	b.n	800c080 <_svfiprintf_r+0x110>
 800c056:	eba0 0308 	sub.w	r3, r0, r8
 800c05a:	fa09 f303 	lsl.w	r3, r9, r3
 800c05e:	4313      	orrs	r3, r2
 800c060:	46a2      	mov	sl, r4
 800c062:	9304      	str	r3, [sp, #16]
 800c064:	e7d2      	b.n	800c00c <_svfiprintf_r+0x9c>
 800c066:	9b03      	ldr	r3, [sp, #12]
 800c068:	1d19      	adds	r1, r3, #4
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	9103      	str	r1, [sp, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	bfbb      	ittet	lt
 800c072:	425b      	neglt	r3, r3
 800c074:	f042 0202 	orrlt.w	r2, r2, #2
 800c078:	9307      	strge	r3, [sp, #28]
 800c07a:	9307      	strlt	r3, [sp, #28]
 800c07c:	bfb8      	it	lt
 800c07e:	9204      	strlt	r2, [sp, #16]
 800c080:	7823      	ldrb	r3, [r4, #0]
 800c082:	2b2e      	cmp	r3, #46	; 0x2e
 800c084:	d10c      	bne.n	800c0a0 <_svfiprintf_r+0x130>
 800c086:	7863      	ldrb	r3, [r4, #1]
 800c088:	2b2a      	cmp	r3, #42	; 0x2a
 800c08a:	d135      	bne.n	800c0f8 <_svfiprintf_r+0x188>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	3402      	adds	r4, #2
 800c090:	1d1a      	adds	r2, r3, #4
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	9203      	str	r2, [sp, #12]
 800c096:	2b00      	cmp	r3, #0
 800c098:	bfb8      	it	lt
 800c09a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c09e:	9305      	str	r3, [sp, #20]
 800c0a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c16c <_svfiprintf_r+0x1fc>
 800c0a4:	2203      	movs	r2, #3
 800c0a6:	4650      	mov	r0, sl
 800c0a8:	7821      	ldrb	r1, [r4, #0]
 800c0aa:	f7ff fac1 	bl	800b630 <memchr>
 800c0ae:	b140      	cbz	r0, 800c0c2 <_svfiprintf_r+0x152>
 800c0b0:	2340      	movs	r3, #64	; 0x40
 800c0b2:	eba0 000a 	sub.w	r0, r0, sl
 800c0b6:	fa03 f000 	lsl.w	r0, r3, r0
 800c0ba:	9b04      	ldr	r3, [sp, #16]
 800c0bc:	3401      	adds	r4, #1
 800c0be:	4303      	orrs	r3, r0
 800c0c0:	9304      	str	r3, [sp, #16]
 800c0c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0c6:	2206      	movs	r2, #6
 800c0c8:	4825      	ldr	r0, [pc, #148]	; (800c160 <_svfiprintf_r+0x1f0>)
 800c0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0ce:	f7ff faaf 	bl	800b630 <memchr>
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d038      	beq.n	800c148 <_svfiprintf_r+0x1d8>
 800c0d6:	4b23      	ldr	r3, [pc, #140]	; (800c164 <_svfiprintf_r+0x1f4>)
 800c0d8:	bb1b      	cbnz	r3, 800c122 <_svfiprintf_r+0x1b2>
 800c0da:	9b03      	ldr	r3, [sp, #12]
 800c0dc:	3307      	adds	r3, #7
 800c0de:	f023 0307 	bic.w	r3, r3, #7
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	9303      	str	r3, [sp, #12]
 800c0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e8:	4433      	add	r3, r6
 800c0ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ec:	e767      	b.n	800bfbe <_svfiprintf_r+0x4e>
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	2001      	movs	r0, #1
 800c0f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0f6:	e7a5      	b.n	800c044 <_svfiprintf_r+0xd4>
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f04f 0c0a 	mov.w	ip, #10
 800c0fe:	4619      	mov	r1, r3
 800c100:	3401      	adds	r4, #1
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	4620      	mov	r0, r4
 800c106:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c10a:	3a30      	subs	r2, #48	; 0x30
 800c10c:	2a09      	cmp	r2, #9
 800c10e:	d903      	bls.n	800c118 <_svfiprintf_r+0x1a8>
 800c110:	2b00      	cmp	r3, #0
 800c112:	d0c5      	beq.n	800c0a0 <_svfiprintf_r+0x130>
 800c114:	9105      	str	r1, [sp, #20]
 800c116:	e7c3      	b.n	800c0a0 <_svfiprintf_r+0x130>
 800c118:	4604      	mov	r4, r0
 800c11a:	2301      	movs	r3, #1
 800c11c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c120:	e7f0      	b.n	800c104 <_svfiprintf_r+0x194>
 800c122:	ab03      	add	r3, sp, #12
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	462a      	mov	r2, r5
 800c128:	4638      	mov	r0, r7
 800c12a:	4b0f      	ldr	r3, [pc, #60]	; (800c168 <_svfiprintf_r+0x1f8>)
 800c12c:	a904      	add	r1, sp, #16
 800c12e:	f7fd fefb 	bl	8009f28 <_printf_float>
 800c132:	1c42      	adds	r2, r0, #1
 800c134:	4606      	mov	r6, r0
 800c136:	d1d6      	bne.n	800c0e6 <_svfiprintf_r+0x176>
 800c138:	89ab      	ldrh	r3, [r5, #12]
 800c13a:	065b      	lsls	r3, r3, #25
 800c13c:	f53f af2c 	bmi.w	800bf98 <_svfiprintf_r+0x28>
 800c140:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c142:	b01d      	add	sp, #116	; 0x74
 800c144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c148:	ab03      	add	r3, sp, #12
 800c14a:	9300      	str	r3, [sp, #0]
 800c14c:	462a      	mov	r2, r5
 800c14e:	4638      	mov	r0, r7
 800c150:	4b05      	ldr	r3, [pc, #20]	; (800c168 <_svfiprintf_r+0x1f8>)
 800c152:	a904      	add	r1, sp, #16
 800c154:	f7fe f984 	bl	800a460 <_printf_i>
 800c158:	e7eb      	b.n	800c132 <_svfiprintf_r+0x1c2>
 800c15a:	bf00      	nop
 800c15c:	0800eabc 	.word	0x0800eabc
 800c160:	0800eac6 	.word	0x0800eac6
 800c164:	08009f29 	.word	0x08009f29
 800c168:	0800beb9 	.word	0x0800beb9
 800c16c:	0800eac2 	.word	0x0800eac2

0800c170 <__sfputc_r>:
 800c170:	6893      	ldr	r3, [r2, #8]
 800c172:	b410      	push	{r4}
 800c174:	3b01      	subs	r3, #1
 800c176:	2b00      	cmp	r3, #0
 800c178:	6093      	str	r3, [r2, #8]
 800c17a:	da07      	bge.n	800c18c <__sfputc_r+0x1c>
 800c17c:	6994      	ldr	r4, [r2, #24]
 800c17e:	42a3      	cmp	r3, r4
 800c180:	db01      	blt.n	800c186 <__sfputc_r+0x16>
 800c182:	290a      	cmp	r1, #10
 800c184:	d102      	bne.n	800c18c <__sfputc_r+0x1c>
 800c186:	bc10      	pop	{r4}
 800c188:	f000 b99e 	b.w	800c4c8 <__swbuf_r>
 800c18c:	6813      	ldr	r3, [r2, #0]
 800c18e:	1c58      	adds	r0, r3, #1
 800c190:	6010      	str	r0, [r2, #0]
 800c192:	7019      	strb	r1, [r3, #0]
 800c194:	4608      	mov	r0, r1
 800c196:	bc10      	pop	{r4}
 800c198:	4770      	bx	lr

0800c19a <__sfputs_r>:
 800c19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c19c:	4606      	mov	r6, r0
 800c19e:	460f      	mov	r7, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	18d5      	adds	r5, r2, r3
 800c1a4:	42ac      	cmp	r4, r5
 800c1a6:	d101      	bne.n	800c1ac <__sfputs_r+0x12>
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e007      	b.n	800c1bc <__sfputs_r+0x22>
 800c1ac:	463a      	mov	r2, r7
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1b4:	f7ff ffdc 	bl	800c170 <__sfputc_r>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d1f3      	bne.n	800c1a4 <__sfputs_r+0xa>
 800c1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1c0 <_vfiprintf_r>:
 800c1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c4:	460d      	mov	r5, r1
 800c1c6:	4614      	mov	r4, r2
 800c1c8:	4698      	mov	r8, r3
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	b09d      	sub	sp, #116	; 0x74
 800c1ce:	b118      	cbz	r0, 800c1d8 <_vfiprintf_r+0x18>
 800c1d0:	6983      	ldr	r3, [r0, #24]
 800c1d2:	b90b      	cbnz	r3, 800c1d8 <_vfiprintf_r+0x18>
 800c1d4:	f7ff f97e 	bl	800b4d4 <__sinit>
 800c1d8:	4b89      	ldr	r3, [pc, #548]	; (800c400 <_vfiprintf_r+0x240>)
 800c1da:	429d      	cmp	r5, r3
 800c1dc:	d11b      	bne.n	800c216 <_vfiprintf_r+0x56>
 800c1de:	6875      	ldr	r5, [r6, #4]
 800c1e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1e2:	07d9      	lsls	r1, r3, #31
 800c1e4:	d405      	bmi.n	800c1f2 <_vfiprintf_r+0x32>
 800c1e6:	89ab      	ldrh	r3, [r5, #12]
 800c1e8:	059a      	lsls	r2, r3, #22
 800c1ea:	d402      	bmi.n	800c1f2 <_vfiprintf_r+0x32>
 800c1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1ee:	f7ff fa14 	bl	800b61a <__retarget_lock_acquire_recursive>
 800c1f2:	89ab      	ldrh	r3, [r5, #12]
 800c1f4:	071b      	lsls	r3, r3, #28
 800c1f6:	d501      	bpl.n	800c1fc <_vfiprintf_r+0x3c>
 800c1f8:	692b      	ldr	r3, [r5, #16]
 800c1fa:	b9eb      	cbnz	r3, 800c238 <_vfiprintf_r+0x78>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4630      	mov	r0, r6
 800c200:	f000 f9c6 	bl	800c590 <__swsetup_r>
 800c204:	b1c0      	cbz	r0, 800c238 <_vfiprintf_r+0x78>
 800c206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c208:	07dc      	lsls	r4, r3, #31
 800c20a:	d50e      	bpl.n	800c22a <_vfiprintf_r+0x6a>
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	b01d      	add	sp, #116	; 0x74
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	4b7b      	ldr	r3, [pc, #492]	; (800c404 <_vfiprintf_r+0x244>)
 800c218:	429d      	cmp	r5, r3
 800c21a:	d101      	bne.n	800c220 <_vfiprintf_r+0x60>
 800c21c:	68b5      	ldr	r5, [r6, #8]
 800c21e:	e7df      	b.n	800c1e0 <_vfiprintf_r+0x20>
 800c220:	4b79      	ldr	r3, [pc, #484]	; (800c408 <_vfiprintf_r+0x248>)
 800c222:	429d      	cmp	r5, r3
 800c224:	bf08      	it	eq
 800c226:	68f5      	ldreq	r5, [r6, #12]
 800c228:	e7da      	b.n	800c1e0 <_vfiprintf_r+0x20>
 800c22a:	89ab      	ldrh	r3, [r5, #12]
 800c22c:	0598      	lsls	r0, r3, #22
 800c22e:	d4ed      	bmi.n	800c20c <_vfiprintf_r+0x4c>
 800c230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c232:	f7ff f9f3 	bl	800b61c <__retarget_lock_release_recursive>
 800c236:	e7e9      	b.n	800c20c <_vfiprintf_r+0x4c>
 800c238:	2300      	movs	r3, #0
 800c23a:	9309      	str	r3, [sp, #36]	; 0x24
 800c23c:	2320      	movs	r3, #32
 800c23e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c242:	2330      	movs	r3, #48	; 0x30
 800c244:	f04f 0901 	mov.w	r9, #1
 800c248:	f8cd 800c 	str.w	r8, [sp, #12]
 800c24c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c40c <_vfiprintf_r+0x24c>
 800c250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c254:	4623      	mov	r3, r4
 800c256:	469a      	mov	sl, r3
 800c258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25c:	b10a      	cbz	r2, 800c262 <_vfiprintf_r+0xa2>
 800c25e:	2a25      	cmp	r2, #37	; 0x25
 800c260:	d1f9      	bne.n	800c256 <_vfiprintf_r+0x96>
 800c262:	ebba 0b04 	subs.w	fp, sl, r4
 800c266:	d00b      	beq.n	800c280 <_vfiprintf_r+0xc0>
 800c268:	465b      	mov	r3, fp
 800c26a:	4622      	mov	r2, r4
 800c26c:	4629      	mov	r1, r5
 800c26e:	4630      	mov	r0, r6
 800c270:	f7ff ff93 	bl	800c19a <__sfputs_r>
 800c274:	3001      	adds	r0, #1
 800c276:	f000 80aa 	beq.w	800c3ce <_vfiprintf_r+0x20e>
 800c27a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c27c:	445a      	add	r2, fp
 800c27e:	9209      	str	r2, [sp, #36]	; 0x24
 800c280:	f89a 3000 	ldrb.w	r3, [sl]
 800c284:	2b00      	cmp	r3, #0
 800c286:	f000 80a2 	beq.w	800c3ce <_vfiprintf_r+0x20e>
 800c28a:	2300      	movs	r3, #0
 800c28c:	f04f 32ff 	mov.w	r2, #4294967295
 800c290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c294:	f10a 0a01 	add.w	sl, sl, #1
 800c298:	9304      	str	r3, [sp, #16]
 800c29a:	9307      	str	r3, [sp, #28]
 800c29c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2a0:	931a      	str	r3, [sp, #104]	; 0x68
 800c2a2:	4654      	mov	r4, sl
 800c2a4:	2205      	movs	r2, #5
 800c2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2aa:	4858      	ldr	r0, [pc, #352]	; (800c40c <_vfiprintf_r+0x24c>)
 800c2ac:	f7ff f9c0 	bl	800b630 <memchr>
 800c2b0:	9a04      	ldr	r2, [sp, #16]
 800c2b2:	b9d8      	cbnz	r0, 800c2ec <_vfiprintf_r+0x12c>
 800c2b4:	06d1      	lsls	r1, r2, #27
 800c2b6:	bf44      	itt	mi
 800c2b8:	2320      	movmi	r3, #32
 800c2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2be:	0713      	lsls	r3, r2, #28
 800c2c0:	bf44      	itt	mi
 800c2c2:	232b      	movmi	r3, #43	; 0x2b
 800c2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c2ce:	d015      	beq.n	800c2fc <_vfiprintf_r+0x13c>
 800c2d0:	4654      	mov	r4, sl
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	f04f 0c0a 	mov.w	ip, #10
 800c2d8:	9a07      	ldr	r2, [sp, #28]
 800c2da:	4621      	mov	r1, r4
 800c2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e0:	3b30      	subs	r3, #48	; 0x30
 800c2e2:	2b09      	cmp	r3, #9
 800c2e4:	d94e      	bls.n	800c384 <_vfiprintf_r+0x1c4>
 800c2e6:	b1b0      	cbz	r0, 800c316 <_vfiprintf_r+0x156>
 800c2e8:	9207      	str	r2, [sp, #28]
 800c2ea:	e014      	b.n	800c316 <_vfiprintf_r+0x156>
 800c2ec:	eba0 0308 	sub.w	r3, r0, r8
 800c2f0:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	46a2      	mov	sl, r4
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	e7d2      	b.n	800c2a2 <_vfiprintf_r+0xe2>
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	1d19      	adds	r1, r3, #4
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	9103      	str	r1, [sp, #12]
 800c304:	2b00      	cmp	r3, #0
 800c306:	bfbb      	ittet	lt
 800c308:	425b      	neglt	r3, r3
 800c30a:	f042 0202 	orrlt.w	r2, r2, #2
 800c30e:	9307      	strge	r3, [sp, #28]
 800c310:	9307      	strlt	r3, [sp, #28]
 800c312:	bfb8      	it	lt
 800c314:	9204      	strlt	r2, [sp, #16]
 800c316:	7823      	ldrb	r3, [r4, #0]
 800c318:	2b2e      	cmp	r3, #46	; 0x2e
 800c31a:	d10c      	bne.n	800c336 <_vfiprintf_r+0x176>
 800c31c:	7863      	ldrb	r3, [r4, #1]
 800c31e:	2b2a      	cmp	r3, #42	; 0x2a
 800c320:	d135      	bne.n	800c38e <_vfiprintf_r+0x1ce>
 800c322:	9b03      	ldr	r3, [sp, #12]
 800c324:	3402      	adds	r4, #2
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	9203      	str	r2, [sp, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfb8      	it	lt
 800c330:	f04f 33ff 	movlt.w	r3, #4294967295
 800c334:	9305      	str	r3, [sp, #20]
 800c336:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c41c <_vfiprintf_r+0x25c>
 800c33a:	2203      	movs	r2, #3
 800c33c:	4650      	mov	r0, sl
 800c33e:	7821      	ldrb	r1, [r4, #0]
 800c340:	f7ff f976 	bl	800b630 <memchr>
 800c344:	b140      	cbz	r0, 800c358 <_vfiprintf_r+0x198>
 800c346:	2340      	movs	r3, #64	; 0x40
 800c348:	eba0 000a 	sub.w	r0, r0, sl
 800c34c:	fa03 f000 	lsl.w	r0, r3, r0
 800c350:	9b04      	ldr	r3, [sp, #16]
 800c352:	3401      	adds	r4, #1
 800c354:	4303      	orrs	r3, r0
 800c356:	9304      	str	r3, [sp, #16]
 800c358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35c:	2206      	movs	r2, #6
 800c35e:	482c      	ldr	r0, [pc, #176]	; (800c410 <_vfiprintf_r+0x250>)
 800c360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c364:	f7ff f964 	bl	800b630 <memchr>
 800c368:	2800      	cmp	r0, #0
 800c36a:	d03f      	beq.n	800c3ec <_vfiprintf_r+0x22c>
 800c36c:	4b29      	ldr	r3, [pc, #164]	; (800c414 <_vfiprintf_r+0x254>)
 800c36e:	bb1b      	cbnz	r3, 800c3b8 <_vfiprintf_r+0x1f8>
 800c370:	9b03      	ldr	r3, [sp, #12]
 800c372:	3307      	adds	r3, #7
 800c374:	f023 0307 	bic.w	r3, r3, #7
 800c378:	3308      	adds	r3, #8
 800c37a:	9303      	str	r3, [sp, #12]
 800c37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37e:	443b      	add	r3, r7
 800c380:	9309      	str	r3, [sp, #36]	; 0x24
 800c382:	e767      	b.n	800c254 <_vfiprintf_r+0x94>
 800c384:	460c      	mov	r4, r1
 800c386:	2001      	movs	r0, #1
 800c388:	fb0c 3202 	mla	r2, ip, r2, r3
 800c38c:	e7a5      	b.n	800c2da <_vfiprintf_r+0x11a>
 800c38e:	2300      	movs	r3, #0
 800c390:	f04f 0c0a 	mov.w	ip, #10
 800c394:	4619      	mov	r1, r3
 800c396:	3401      	adds	r4, #1
 800c398:	9305      	str	r3, [sp, #20]
 800c39a:	4620      	mov	r0, r4
 800c39c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a0:	3a30      	subs	r2, #48	; 0x30
 800c3a2:	2a09      	cmp	r2, #9
 800c3a4:	d903      	bls.n	800c3ae <_vfiprintf_r+0x1ee>
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d0c5      	beq.n	800c336 <_vfiprintf_r+0x176>
 800c3aa:	9105      	str	r1, [sp, #20]
 800c3ac:	e7c3      	b.n	800c336 <_vfiprintf_r+0x176>
 800c3ae:	4604      	mov	r4, r0
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3b6:	e7f0      	b.n	800c39a <_vfiprintf_r+0x1da>
 800c3b8:	ab03      	add	r3, sp, #12
 800c3ba:	9300      	str	r3, [sp, #0]
 800c3bc:	462a      	mov	r2, r5
 800c3be:	4630      	mov	r0, r6
 800c3c0:	4b15      	ldr	r3, [pc, #84]	; (800c418 <_vfiprintf_r+0x258>)
 800c3c2:	a904      	add	r1, sp, #16
 800c3c4:	f7fd fdb0 	bl	8009f28 <_printf_float>
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	1c78      	adds	r0, r7, #1
 800c3cc:	d1d6      	bne.n	800c37c <_vfiprintf_r+0x1bc>
 800c3ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c3d0:	07d9      	lsls	r1, r3, #31
 800c3d2:	d405      	bmi.n	800c3e0 <_vfiprintf_r+0x220>
 800c3d4:	89ab      	ldrh	r3, [r5, #12]
 800c3d6:	059a      	lsls	r2, r3, #22
 800c3d8:	d402      	bmi.n	800c3e0 <_vfiprintf_r+0x220>
 800c3da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3dc:	f7ff f91e 	bl	800b61c <__retarget_lock_release_recursive>
 800c3e0:	89ab      	ldrh	r3, [r5, #12]
 800c3e2:	065b      	lsls	r3, r3, #25
 800c3e4:	f53f af12 	bmi.w	800c20c <_vfiprintf_r+0x4c>
 800c3e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ea:	e711      	b.n	800c210 <_vfiprintf_r+0x50>
 800c3ec:	ab03      	add	r3, sp, #12
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	462a      	mov	r2, r5
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	4b08      	ldr	r3, [pc, #32]	; (800c418 <_vfiprintf_r+0x258>)
 800c3f6:	a904      	add	r1, sp, #16
 800c3f8:	f7fe f832 	bl	800a460 <_printf_i>
 800c3fc:	e7e4      	b.n	800c3c8 <_vfiprintf_r+0x208>
 800c3fe:	bf00      	nop
 800c400:	0800e920 	.word	0x0800e920
 800c404:	0800e940 	.word	0x0800e940
 800c408:	0800e900 	.word	0x0800e900
 800c40c:	0800eabc 	.word	0x0800eabc
 800c410:	0800eac6 	.word	0x0800eac6
 800c414:	08009f29 	.word	0x08009f29
 800c418:	0800c19b 	.word	0x0800c19b
 800c41c:	0800eac2 	.word	0x0800eac2

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	2300      	movs	r3, #0
 800c424:	4d05      	ldr	r5, [pc, #20]	; (800c43c <_sbrk_r+0x1c>)
 800c426:	4604      	mov	r4, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	602b      	str	r3, [r5, #0]
 800c42c:	f7f5 fec0 	bl	80021b0 <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	200033fc 	.word	0x200033fc

0800c440 <__sread>:
 800c440:	b510      	push	{r4, lr}
 800c442:	460c      	mov	r4, r1
 800c444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c448:	f000 fae6 	bl	800ca18 <_read_r>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	bfab      	itete	ge
 800c450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c452:	89a3      	ldrhlt	r3, [r4, #12]
 800c454:	181b      	addge	r3, r3, r0
 800c456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c45a:	bfac      	ite	ge
 800c45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c45e:	81a3      	strhlt	r3, [r4, #12]
 800c460:	bd10      	pop	{r4, pc}

0800c462 <__swrite>:
 800c462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c466:	461f      	mov	r7, r3
 800c468:	898b      	ldrh	r3, [r1, #12]
 800c46a:	4605      	mov	r5, r0
 800c46c:	05db      	lsls	r3, r3, #23
 800c46e:	460c      	mov	r4, r1
 800c470:	4616      	mov	r6, r2
 800c472:	d505      	bpl.n	800c480 <__swrite+0x1e>
 800c474:	2302      	movs	r3, #2
 800c476:	2200      	movs	r2, #0
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	f000 f9f8 	bl	800c870 <_lseek_r>
 800c480:	89a3      	ldrh	r3, [r4, #12]
 800c482:	4632      	mov	r2, r6
 800c484:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	4628      	mov	r0, r5
 800c48c:	463b      	mov	r3, r7
 800c48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c496:	f000 b869 	b.w	800c56c <_write_r>

0800c49a <__sseek>:
 800c49a:	b510      	push	{r4, lr}
 800c49c:	460c      	mov	r4, r1
 800c49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a2:	f000 f9e5 	bl	800c870 <_lseek_r>
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	bf15      	itete	ne
 800c4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4b6:	81a3      	strheq	r3, [r4, #12]
 800c4b8:	bf18      	it	ne
 800c4ba:	81a3      	strhne	r3, [r4, #12]
 800c4bc:	bd10      	pop	{r4, pc}

0800c4be <__sclose>:
 800c4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c2:	f000 b8f1 	b.w	800c6a8 <_close_r>
	...

0800c4c8 <__swbuf_r>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	460e      	mov	r6, r1
 800c4cc:	4614      	mov	r4, r2
 800c4ce:	4605      	mov	r5, r0
 800c4d0:	b118      	cbz	r0, 800c4da <__swbuf_r+0x12>
 800c4d2:	6983      	ldr	r3, [r0, #24]
 800c4d4:	b90b      	cbnz	r3, 800c4da <__swbuf_r+0x12>
 800c4d6:	f7fe fffd 	bl	800b4d4 <__sinit>
 800c4da:	4b21      	ldr	r3, [pc, #132]	; (800c560 <__swbuf_r+0x98>)
 800c4dc:	429c      	cmp	r4, r3
 800c4de:	d12b      	bne.n	800c538 <__swbuf_r+0x70>
 800c4e0:	686c      	ldr	r4, [r5, #4]
 800c4e2:	69a3      	ldr	r3, [r4, #24]
 800c4e4:	60a3      	str	r3, [r4, #8]
 800c4e6:	89a3      	ldrh	r3, [r4, #12]
 800c4e8:	071a      	lsls	r2, r3, #28
 800c4ea:	d52f      	bpl.n	800c54c <__swbuf_r+0x84>
 800c4ec:	6923      	ldr	r3, [r4, #16]
 800c4ee:	b36b      	cbz	r3, 800c54c <__swbuf_r+0x84>
 800c4f0:	6923      	ldr	r3, [r4, #16]
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	b2f6      	uxtb	r6, r6
 800c4f6:	1ac0      	subs	r0, r0, r3
 800c4f8:	6963      	ldr	r3, [r4, #20]
 800c4fa:	4637      	mov	r7, r6
 800c4fc:	4283      	cmp	r3, r0
 800c4fe:	dc04      	bgt.n	800c50a <__swbuf_r+0x42>
 800c500:	4621      	mov	r1, r4
 800c502:	4628      	mov	r0, r5
 800c504:	f000 f966 	bl	800c7d4 <_fflush_r>
 800c508:	bb30      	cbnz	r0, 800c558 <__swbuf_r+0x90>
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	3001      	adds	r0, #1
 800c50e:	3b01      	subs	r3, #1
 800c510:	60a3      	str	r3, [r4, #8]
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	6022      	str	r2, [r4, #0]
 800c518:	701e      	strb	r6, [r3, #0]
 800c51a:	6963      	ldr	r3, [r4, #20]
 800c51c:	4283      	cmp	r3, r0
 800c51e:	d004      	beq.n	800c52a <__swbuf_r+0x62>
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	07db      	lsls	r3, r3, #31
 800c524:	d506      	bpl.n	800c534 <__swbuf_r+0x6c>
 800c526:	2e0a      	cmp	r6, #10
 800c528:	d104      	bne.n	800c534 <__swbuf_r+0x6c>
 800c52a:	4621      	mov	r1, r4
 800c52c:	4628      	mov	r0, r5
 800c52e:	f000 f951 	bl	800c7d4 <_fflush_r>
 800c532:	b988      	cbnz	r0, 800c558 <__swbuf_r+0x90>
 800c534:	4638      	mov	r0, r7
 800c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c538:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <__swbuf_r+0x9c>)
 800c53a:	429c      	cmp	r4, r3
 800c53c:	d101      	bne.n	800c542 <__swbuf_r+0x7a>
 800c53e:	68ac      	ldr	r4, [r5, #8]
 800c540:	e7cf      	b.n	800c4e2 <__swbuf_r+0x1a>
 800c542:	4b09      	ldr	r3, [pc, #36]	; (800c568 <__swbuf_r+0xa0>)
 800c544:	429c      	cmp	r4, r3
 800c546:	bf08      	it	eq
 800c548:	68ec      	ldreq	r4, [r5, #12]
 800c54a:	e7ca      	b.n	800c4e2 <__swbuf_r+0x1a>
 800c54c:	4621      	mov	r1, r4
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f81e 	bl	800c590 <__swsetup_r>
 800c554:	2800      	cmp	r0, #0
 800c556:	d0cb      	beq.n	800c4f0 <__swbuf_r+0x28>
 800c558:	f04f 37ff 	mov.w	r7, #4294967295
 800c55c:	e7ea      	b.n	800c534 <__swbuf_r+0x6c>
 800c55e:	bf00      	nop
 800c560:	0800e920 	.word	0x0800e920
 800c564:	0800e940 	.word	0x0800e940
 800c568:	0800e900 	.word	0x0800e900

0800c56c <_write_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	4611      	mov	r1, r2
 800c574:	2200      	movs	r2, #0
 800c576:	4d05      	ldr	r5, [pc, #20]	; (800c58c <_write_r+0x20>)
 800c578:	602a      	str	r2, [r5, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	f7f4 ff2e 	bl	80013dc <_write>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_write_r+0x1e>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_write_r+0x1e>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	200033fc 	.word	0x200033fc

0800c590 <__swsetup_r>:
 800c590:	4b32      	ldr	r3, [pc, #200]	; (800c65c <__swsetup_r+0xcc>)
 800c592:	b570      	push	{r4, r5, r6, lr}
 800c594:	681d      	ldr	r5, [r3, #0]
 800c596:	4606      	mov	r6, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	b125      	cbz	r5, 800c5a6 <__swsetup_r+0x16>
 800c59c:	69ab      	ldr	r3, [r5, #24]
 800c59e:	b913      	cbnz	r3, 800c5a6 <__swsetup_r+0x16>
 800c5a0:	4628      	mov	r0, r5
 800c5a2:	f7fe ff97 	bl	800b4d4 <__sinit>
 800c5a6:	4b2e      	ldr	r3, [pc, #184]	; (800c660 <__swsetup_r+0xd0>)
 800c5a8:	429c      	cmp	r4, r3
 800c5aa:	d10f      	bne.n	800c5cc <__swsetup_r+0x3c>
 800c5ac:	686c      	ldr	r4, [r5, #4]
 800c5ae:	89a3      	ldrh	r3, [r4, #12]
 800c5b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5b4:	0719      	lsls	r1, r3, #28
 800c5b6:	d42c      	bmi.n	800c612 <__swsetup_r+0x82>
 800c5b8:	06dd      	lsls	r5, r3, #27
 800c5ba:	d411      	bmi.n	800c5e0 <__swsetup_r+0x50>
 800c5bc:	2309      	movs	r3, #9
 800c5be:	6033      	str	r3, [r6, #0]
 800c5c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c8:	81a3      	strh	r3, [r4, #12]
 800c5ca:	e03e      	b.n	800c64a <__swsetup_r+0xba>
 800c5cc:	4b25      	ldr	r3, [pc, #148]	; (800c664 <__swsetup_r+0xd4>)
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d101      	bne.n	800c5d6 <__swsetup_r+0x46>
 800c5d2:	68ac      	ldr	r4, [r5, #8]
 800c5d4:	e7eb      	b.n	800c5ae <__swsetup_r+0x1e>
 800c5d6:	4b24      	ldr	r3, [pc, #144]	; (800c668 <__swsetup_r+0xd8>)
 800c5d8:	429c      	cmp	r4, r3
 800c5da:	bf08      	it	eq
 800c5dc:	68ec      	ldreq	r4, [r5, #12]
 800c5de:	e7e6      	b.n	800c5ae <__swsetup_r+0x1e>
 800c5e0:	0758      	lsls	r0, r3, #29
 800c5e2:	d512      	bpl.n	800c60a <__swsetup_r+0x7a>
 800c5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5e6:	b141      	cbz	r1, 800c5fa <__swsetup_r+0x6a>
 800c5e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5ec:	4299      	cmp	r1, r3
 800c5ee:	d002      	beq.n	800c5f6 <__swsetup_r+0x66>
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7ff fbbb 	bl	800bd6c <_free_r>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c600:	81a3      	strh	r3, [r4, #12]
 800c602:	2300      	movs	r3, #0
 800c604:	6063      	str	r3, [r4, #4]
 800c606:	6923      	ldr	r3, [r4, #16]
 800c608:	6023      	str	r3, [r4, #0]
 800c60a:	89a3      	ldrh	r3, [r4, #12]
 800c60c:	f043 0308 	orr.w	r3, r3, #8
 800c610:	81a3      	strh	r3, [r4, #12]
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	b94b      	cbnz	r3, 800c62a <__swsetup_r+0x9a>
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c620:	d003      	beq.n	800c62a <__swsetup_r+0x9a>
 800c622:	4621      	mov	r1, r4
 800c624:	4630      	mov	r0, r6
 800c626:	f000 f959 	bl	800c8dc <__smakebuf_r>
 800c62a:	89a0      	ldrh	r0, [r4, #12]
 800c62c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c630:	f010 0301 	ands.w	r3, r0, #1
 800c634:	d00a      	beq.n	800c64c <__swsetup_r+0xbc>
 800c636:	2300      	movs	r3, #0
 800c638:	60a3      	str	r3, [r4, #8]
 800c63a:	6963      	ldr	r3, [r4, #20]
 800c63c:	425b      	negs	r3, r3
 800c63e:	61a3      	str	r3, [r4, #24]
 800c640:	6923      	ldr	r3, [r4, #16]
 800c642:	b943      	cbnz	r3, 800c656 <__swsetup_r+0xc6>
 800c644:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c648:	d1ba      	bne.n	800c5c0 <__swsetup_r+0x30>
 800c64a:	bd70      	pop	{r4, r5, r6, pc}
 800c64c:	0781      	lsls	r1, r0, #30
 800c64e:	bf58      	it	pl
 800c650:	6963      	ldrpl	r3, [r4, #20]
 800c652:	60a3      	str	r3, [r4, #8]
 800c654:	e7f4      	b.n	800c640 <__swsetup_r+0xb0>
 800c656:	2000      	movs	r0, #0
 800c658:	e7f7      	b.n	800c64a <__swsetup_r+0xba>
 800c65a:	bf00      	nop
 800c65c:	20000180 	.word	0x20000180
 800c660:	0800e920 	.word	0x0800e920
 800c664:	0800e940 	.word	0x0800e940
 800c668:	0800e900 	.word	0x0800e900

0800c66c <__assert_func>:
 800c66c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c66e:	4614      	mov	r4, r2
 800c670:	461a      	mov	r2, r3
 800c672:	4b09      	ldr	r3, [pc, #36]	; (800c698 <__assert_func+0x2c>)
 800c674:	4605      	mov	r5, r0
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68d8      	ldr	r0, [r3, #12]
 800c67a:	b14c      	cbz	r4, 800c690 <__assert_func+0x24>
 800c67c:	4b07      	ldr	r3, [pc, #28]	; (800c69c <__assert_func+0x30>)
 800c67e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c682:	9100      	str	r1, [sp, #0]
 800c684:	462b      	mov	r3, r5
 800c686:	4906      	ldr	r1, [pc, #24]	; (800c6a0 <__assert_func+0x34>)
 800c688:	f000 f8e0 	bl	800c84c <fiprintf>
 800c68c:	f000 f9e3 	bl	800ca56 <abort>
 800c690:	4b04      	ldr	r3, [pc, #16]	; (800c6a4 <__assert_func+0x38>)
 800c692:	461c      	mov	r4, r3
 800c694:	e7f3      	b.n	800c67e <__assert_func+0x12>
 800c696:	bf00      	nop
 800c698:	20000180 	.word	0x20000180
 800c69c:	0800eacd 	.word	0x0800eacd
 800c6a0:	0800eada 	.word	0x0800eada
 800c6a4:	0800cd14 	.word	0x0800cd14

0800c6a8 <_close_r>:
 800c6a8:	b538      	push	{r3, r4, r5, lr}
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	4d05      	ldr	r5, [pc, #20]	; (800c6c4 <_close_r+0x1c>)
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	4608      	mov	r0, r1
 800c6b2:	602b      	str	r3, [r5, #0]
 800c6b4:	f7f5 fd70 	bl	8002198 <_close>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_close_r+0x1a>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_close_r+0x1a>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200033fc 	.word	0x200033fc

0800c6c8 <__sflush_r>:
 800c6c8:	898a      	ldrh	r2, [r1, #12]
 800c6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ce:	4605      	mov	r5, r0
 800c6d0:	0710      	lsls	r0, r2, #28
 800c6d2:	460c      	mov	r4, r1
 800c6d4:	d458      	bmi.n	800c788 <__sflush_r+0xc0>
 800c6d6:	684b      	ldr	r3, [r1, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dc05      	bgt.n	800c6e8 <__sflush_r+0x20>
 800c6dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	dc02      	bgt.n	800c6e8 <__sflush_r+0x20>
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	d0f9      	beq.n	800c6e2 <__sflush_r+0x1a>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6f4:	682f      	ldr	r7, [r5, #0]
 800c6f6:	602b      	str	r3, [r5, #0]
 800c6f8:	d032      	beq.n	800c760 <__sflush_r+0x98>
 800c6fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6fc:	89a3      	ldrh	r3, [r4, #12]
 800c6fe:	075a      	lsls	r2, r3, #29
 800c700:	d505      	bpl.n	800c70e <__sflush_r+0x46>
 800c702:	6863      	ldr	r3, [r4, #4]
 800c704:	1ac0      	subs	r0, r0, r3
 800c706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c708:	b10b      	cbz	r3, 800c70e <__sflush_r+0x46>
 800c70a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c70c:	1ac0      	subs	r0, r0, r3
 800c70e:	2300      	movs	r3, #0
 800c710:	4602      	mov	r2, r0
 800c712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c714:	4628      	mov	r0, r5
 800c716:	6a21      	ldr	r1, [r4, #32]
 800c718:	47b0      	blx	r6
 800c71a:	1c43      	adds	r3, r0, #1
 800c71c:	89a3      	ldrh	r3, [r4, #12]
 800c71e:	d106      	bne.n	800c72e <__sflush_r+0x66>
 800c720:	6829      	ldr	r1, [r5, #0]
 800c722:	291d      	cmp	r1, #29
 800c724:	d82c      	bhi.n	800c780 <__sflush_r+0xb8>
 800c726:	4a2a      	ldr	r2, [pc, #168]	; (800c7d0 <__sflush_r+0x108>)
 800c728:	40ca      	lsrs	r2, r1
 800c72a:	07d6      	lsls	r6, r2, #31
 800c72c:	d528      	bpl.n	800c780 <__sflush_r+0xb8>
 800c72e:	2200      	movs	r2, #0
 800c730:	6062      	str	r2, [r4, #4]
 800c732:	6922      	ldr	r2, [r4, #16]
 800c734:	04d9      	lsls	r1, r3, #19
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	d504      	bpl.n	800c744 <__sflush_r+0x7c>
 800c73a:	1c42      	adds	r2, r0, #1
 800c73c:	d101      	bne.n	800c742 <__sflush_r+0x7a>
 800c73e:	682b      	ldr	r3, [r5, #0]
 800c740:	b903      	cbnz	r3, 800c744 <__sflush_r+0x7c>
 800c742:	6560      	str	r0, [r4, #84]	; 0x54
 800c744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c746:	602f      	str	r7, [r5, #0]
 800c748:	2900      	cmp	r1, #0
 800c74a:	d0ca      	beq.n	800c6e2 <__sflush_r+0x1a>
 800c74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c750:	4299      	cmp	r1, r3
 800c752:	d002      	beq.n	800c75a <__sflush_r+0x92>
 800c754:	4628      	mov	r0, r5
 800c756:	f7ff fb09 	bl	800bd6c <_free_r>
 800c75a:	2000      	movs	r0, #0
 800c75c:	6360      	str	r0, [r4, #52]	; 0x34
 800c75e:	e7c1      	b.n	800c6e4 <__sflush_r+0x1c>
 800c760:	6a21      	ldr	r1, [r4, #32]
 800c762:	2301      	movs	r3, #1
 800c764:	4628      	mov	r0, r5
 800c766:	47b0      	blx	r6
 800c768:	1c41      	adds	r1, r0, #1
 800c76a:	d1c7      	bne.n	800c6fc <__sflush_r+0x34>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d0c4      	beq.n	800c6fc <__sflush_r+0x34>
 800c772:	2b1d      	cmp	r3, #29
 800c774:	d001      	beq.n	800c77a <__sflush_r+0xb2>
 800c776:	2b16      	cmp	r3, #22
 800c778:	d101      	bne.n	800c77e <__sflush_r+0xb6>
 800c77a:	602f      	str	r7, [r5, #0]
 800c77c:	e7b1      	b.n	800c6e2 <__sflush_r+0x1a>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	e7ad      	b.n	800c6e4 <__sflush_r+0x1c>
 800c788:	690f      	ldr	r7, [r1, #16]
 800c78a:	2f00      	cmp	r7, #0
 800c78c:	d0a9      	beq.n	800c6e2 <__sflush_r+0x1a>
 800c78e:	0793      	lsls	r3, r2, #30
 800c790:	bf18      	it	ne
 800c792:	2300      	movne	r3, #0
 800c794:	680e      	ldr	r6, [r1, #0]
 800c796:	bf08      	it	eq
 800c798:	694b      	ldreq	r3, [r1, #20]
 800c79a:	eba6 0807 	sub.w	r8, r6, r7
 800c79e:	600f      	str	r7, [r1, #0]
 800c7a0:	608b      	str	r3, [r1, #8]
 800c7a2:	f1b8 0f00 	cmp.w	r8, #0
 800c7a6:	dd9c      	ble.n	800c6e2 <__sflush_r+0x1a>
 800c7a8:	4643      	mov	r3, r8
 800c7aa:	463a      	mov	r2, r7
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	6a21      	ldr	r1, [r4, #32]
 800c7b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7b2:	47b0      	blx	r6
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	dc06      	bgt.n	800c7c6 <__sflush_r+0xfe>
 800c7b8:	89a3      	ldrh	r3, [r4, #12]
 800c7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c2:	81a3      	strh	r3, [r4, #12]
 800c7c4:	e78e      	b.n	800c6e4 <__sflush_r+0x1c>
 800c7c6:	4407      	add	r7, r0
 800c7c8:	eba8 0800 	sub.w	r8, r8, r0
 800c7cc:	e7e9      	b.n	800c7a2 <__sflush_r+0xda>
 800c7ce:	bf00      	nop
 800c7d0:	20400001 	.word	0x20400001

0800c7d4 <_fflush_r>:
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	690b      	ldr	r3, [r1, #16]
 800c7d8:	4605      	mov	r5, r0
 800c7da:	460c      	mov	r4, r1
 800c7dc:	b913      	cbnz	r3, 800c7e4 <_fflush_r+0x10>
 800c7de:	2500      	movs	r5, #0
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	bd38      	pop	{r3, r4, r5, pc}
 800c7e4:	b118      	cbz	r0, 800c7ee <_fflush_r+0x1a>
 800c7e6:	6983      	ldr	r3, [r0, #24]
 800c7e8:	b90b      	cbnz	r3, 800c7ee <_fflush_r+0x1a>
 800c7ea:	f7fe fe73 	bl	800b4d4 <__sinit>
 800c7ee:	4b14      	ldr	r3, [pc, #80]	; (800c840 <_fflush_r+0x6c>)
 800c7f0:	429c      	cmp	r4, r3
 800c7f2:	d11b      	bne.n	800c82c <_fflush_r+0x58>
 800c7f4:	686c      	ldr	r4, [r5, #4]
 800c7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0ef      	beq.n	800c7de <_fflush_r+0xa>
 800c7fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c800:	07d0      	lsls	r0, r2, #31
 800c802:	d404      	bmi.n	800c80e <_fflush_r+0x3a>
 800c804:	0599      	lsls	r1, r3, #22
 800c806:	d402      	bmi.n	800c80e <_fflush_r+0x3a>
 800c808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c80a:	f7fe ff06 	bl	800b61a <__retarget_lock_acquire_recursive>
 800c80e:	4628      	mov	r0, r5
 800c810:	4621      	mov	r1, r4
 800c812:	f7ff ff59 	bl	800c6c8 <__sflush_r>
 800c816:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c818:	4605      	mov	r5, r0
 800c81a:	07da      	lsls	r2, r3, #31
 800c81c:	d4e0      	bmi.n	800c7e0 <_fflush_r+0xc>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	059b      	lsls	r3, r3, #22
 800c822:	d4dd      	bmi.n	800c7e0 <_fflush_r+0xc>
 800c824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c826:	f7fe fef9 	bl	800b61c <__retarget_lock_release_recursive>
 800c82a:	e7d9      	b.n	800c7e0 <_fflush_r+0xc>
 800c82c:	4b05      	ldr	r3, [pc, #20]	; (800c844 <_fflush_r+0x70>)
 800c82e:	429c      	cmp	r4, r3
 800c830:	d101      	bne.n	800c836 <_fflush_r+0x62>
 800c832:	68ac      	ldr	r4, [r5, #8]
 800c834:	e7df      	b.n	800c7f6 <_fflush_r+0x22>
 800c836:	4b04      	ldr	r3, [pc, #16]	; (800c848 <_fflush_r+0x74>)
 800c838:	429c      	cmp	r4, r3
 800c83a:	bf08      	it	eq
 800c83c:	68ec      	ldreq	r4, [r5, #12]
 800c83e:	e7da      	b.n	800c7f6 <_fflush_r+0x22>
 800c840:	0800e920 	.word	0x0800e920
 800c844:	0800e940 	.word	0x0800e940
 800c848:	0800e900 	.word	0x0800e900

0800c84c <fiprintf>:
 800c84c:	b40e      	push	{r1, r2, r3}
 800c84e:	b503      	push	{r0, r1, lr}
 800c850:	4601      	mov	r1, r0
 800c852:	ab03      	add	r3, sp, #12
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <fiprintf+0x20>)
 800c856:	f853 2b04 	ldr.w	r2, [r3], #4
 800c85a:	6800      	ldr	r0, [r0, #0]
 800c85c:	9301      	str	r3, [sp, #4]
 800c85e:	f7ff fcaf 	bl	800c1c0 <_vfiprintf_r>
 800c862:	b002      	add	sp, #8
 800c864:	f85d eb04 	ldr.w	lr, [sp], #4
 800c868:	b003      	add	sp, #12
 800c86a:	4770      	bx	lr
 800c86c:	20000180 	.word	0x20000180

0800c870 <_lseek_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	4611      	mov	r1, r2
 800c878:	2200      	movs	r2, #0
 800c87a:	4d05      	ldr	r5, [pc, #20]	; (800c890 <_lseek_r+0x20>)
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f5 fc94 	bl	80021ac <_lseek>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_lseek_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_lseek_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	200033fc 	.word	0x200033fc

0800c894 <__swhatbuf_r>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	460e      	mov	r6, r1
 800c898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c89c:	4614      	mov	r4, r2
 800c89e:	2900      	cmp	r1, #0
 800c8a0:	461d      	mov	r5, r3
 800c8a2:	b096      	sub	sp, #88	; 0x58
 800c8a4:	da07      	bge.n	800c8b6 <__swhatbuf_r+0x22>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	602b      	str	r3, [r5, #0]
 800c8aa:	89b3      	ldrh	r3, [r6, #12]
 800c8ac:	061a      	lsls	r2, r3, #24
 800c8ae:	d410      	bmi.n	800c8d2 <__swhatbuf_r+0x3e>
 800c8b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8b4:	e00e      	b.n	800c8d4 <__swhatbuf_r+0x40>
 800c8b6:	466a      	mov	r2, sp
 800c8b8:	f000 f8d4 	bl	800ca64 <_fstat_r>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	dbf2      	blt.n	800c8a6 <__swhatbuf_r+0x12>
 800c8c0:	9a01      	ldr	r2, [sp, #4]
 800c8c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c8c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c8ca:	425a      	negs	r2, r3
 800c8cc:	415a      	adcs	r2, r3
 800c8ce:	602a      	str	r2, [r5, #0]
 800c8d0:	e7ee      	b.n	800c8b0 <__swhatbuf_r+0x1c>
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	6023      	str	r3, [r4, #0]
 800c8d8:	b016      	add	sp, #88	; 0x58
 800c8da:	bd70      	pop	{r4, r5, r6, pc}

0800c8dc <__smakebuf_r>:
 800c8dc:	898b      	ldrh	r3, [r1, #12]
 800c8de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c8e0:	079d      	lsls	r5, r3, #30
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	460c      	mov	r4, r1
 800c8e6:	d507      	bpl.n	800c8f8 <__smakebuf_r+0x1c>
 800c8e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	6123      	str	r3, [r4, #16]
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	6163      	str	r3, [r4, #20]
 800c8f4:	b002      	add	sp, #8
 800c8f6:	bd70      	pop	{r4, r5, r6, pc}
 800c8f8:	466a      	mov	r2, sp
 800c8fa:	ab01      	add	r3, sp, #4
 800c8fc:	f7ff ffca 	bl	800c894 <__swhatbuf_r>
 800c900:	9900      	ldr	r1, [sp, #0]
 800c902:	4605      	mov	r5, r0
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff fa7d 	bl	800be04 <_malloc_r>
 800c90a:	b948      	cbnz	r0, 800c920 <__smakebuf_r+0x44>
 800c90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d4ef      	bmi.n	800c8f4 <__smakebuf_r+0x18>
 800c914:	f023 0303 	bic.w	r3, r3, #3
 800c918:	f043 0302 	orr.w	r3, r3, #2
 800c91c:	81a3      	strh	r3, [r4, #12]
 800c91e:	e7e3      	b.n	800c8e8 <__smakebuf_r+0xc>
 800c920:	4b0d      	ldr	r3, [pc, #52]	; (800c958 <__smakebuf_r+0x7c>)
 800c922:	62b3      	str	r3, [r6, #40]	; 0x28
 800c924:	89a3      	ldrh	r3, [r4, #12]
 800c926:	6020      	str	r0, [r4, #0]
 800c928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c92c:	81a3      	strh	r3, [r4, #12]
 800c92e:	9b00      	ldr	r3, [sp, #0]
 800c930:	6120      	str	r0, [r4, #16]
 800c932:	6163      	str	r3, [r4, #20]
 800c934:	9b01      	ldr	r3, [sp, #4]
 800c936:	b15b      	cbz	r3, 800c950 <__smakebuf_r+0x74>
 800c938:	4630      	mov	r0, r6
 800c93a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c93e:	f000 f8a3 	bl	800ca88 <_isatty_r>
 800c942:	b128      	cbz	r0, 800c950 <__smakebuf_r+0x74>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	f023 0303 	bic.w	r3, r3, #3
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	89a0      	ldrh	r0, [r4, #12]
 800c952:	4305      	orrs	r5, r0
 800c954:	81a5      	strh	r5, [r4, #12]
 800c956:	e7cd      	b.n	800c8f4 <__smakebuf_r+0x18>
 800c958:	0800b46d 	.word	0x0800b46d

0800c95c <__ascii_mbtowc>:
 800c95c:	b082      	sub	sp, #8
 800c95e:	b901      	cbnz	r1, 800c962 <__ascii_mbtowc+0x6>
 800c960:	a901      	add	r1, sp, #4
 800c962:	b142      	cbz	r2, 800c976 <__ascii_mbtowc+0x1a>
 800c964:	b14b      	cbz	r3, 800c97a <__ascii_mbtowc+0x1e>
 800c966:	7813      	ldrb	r3, [r2, #0]
 800c968:	600b      	str	r3, [r1, #0]
 800c96a:	7812      	ldrb	r2, [r2, #0]
 800c96c:	1e10      	subs	r0, r2, #0
 800c96e:	bf18      	it	ne
 800c970:	2001      	movne	r0, #1
 800c972:	b002      	add	sp, #8
 800c974:	4770      	bx	lr
 800c976:	4610      	mov	r0, r2
 800c978:	e7fb      	b.n	800c972 <__ascii_mbtowc+0x16>
 800c97a:	f06f 0001 	mvn.w	r0, #1
 800c97e:	e7f8      	b.n	800c972 <__ascii_mbtowc+0x16>

0800c980 <memmove>:
 800c980:	4288      	cmp	r0, r1
 800c982:	b510      	push	{r4, lr}
 800c984:	eb01 0402 	add.w	r4, r1, r2
 800c988:	d902      	bls.n	800c990 <memmove+0x10>
 800c98a:	4284      	cmp	r4, r0
 800c98c:	4623      	mov	r3, r4
 800c98e:	d807      	bhi.n	800c9a0 <memmove+0x20>
 800c990:	1e43      	subs	r3, r0, #1
 800c992:	42a1      	cmp	r1, r4
 800c994:	d008      	beq.n	800c9a8 <memmove+0x28>
 800c996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c99a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c99e:	e7f8      	b.n	800c992 <memmove+0x12>
 800c9a0:	4601      	mov	r1, r0
 800c9a2:	4402      	add	r2, r0
 800c9a4:	428a      	cmp	r2, r1
 800c9a6:	d100      	bne.n	800c9aa <memmove+0x2a>
 800c9a8:	bd10      	pop	{r4, pc}
 800c9aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9b2:	e7f7      	b.n	800c9a4 <memmove+0x24>

0800c9b4 <__malloc_lock>:
 800c9b4:	4801      	ldr	r0, [pc, #4]	; (800c9bc <__malloc_lock+0x8>)
 800c9b6:	f7fe be30 	b.w	800b61a <__retarget_lock_acquire_recursive>
 800c9ba:	bf00      	nop
 800c9bc:	200033f0 	.word	0x200033f0

0800c9c0 <__malloc_unlock>:
 800c9c0:	4801      	ldr	r0, [pc, #4]	; (800c9c8 <__malloc_unlock+0x8>)
 800c9c2:	f7fe be2b 	b.w	800b61c <__retarget_lock_release_recursive>
 800c9c6:	bf00      	nop
 800c9c8:	200033f0 	.word	0x200033f0

0800c9cc <_realloc_r>:
 800c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ce:	4607      	mov	r7, r0
 800c9d0:	4614      	mov	r4, r2
 800c9d2:	460e      	mov	r6, r1
 800c9d4:	b921      	cbnz	r1, 800c9e0 <_realloc_r+0x14>
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c9dc:	f7ff ba12 	b.w	800be04 <_malloc_r>
 800c9e0:	b922      	cbnz	r2, 800c9ec <_realloc_r+0x20>
 800c9e2:	f7ff f9c3 	bl	800bd6c <_free_r>
 800c9e6:	4625      	mov	r5, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ec:	f000 f85c 	bl	800caa8 <_malloc_usable_size_r>
 800c9f0:	42a0      	cmp	r0, r4
 800c9f2:	d20f      	bcs.n	800ca14 <_realloc_r+0x48>
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4638      	mov	r0, r7
 800c9f8:	f7ff fa04 	bl	800be04 <_malloc_r>
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d0f2      	beq.n	800c9e8 <_realloc_r+0x1c>
 800ca02:	4631      	mov	r1, r6
 800ca04:	4622      	mov	r2, r4
 800ca06:	f7fd f9db 	bl	8009dc0 <memcpy>
 800ca0a:	4631      	mov	r1, r6
 800ca0c:	4638      	mov	r0, r7
 800ca0e:	f7ff f9ad 	bl	800bd6c <_free_r>
 800ca12:	e7e9      	b.n	800c9e8 <_realloc_r+0x1c>
 800ca14:	4635      	mov	r5, r6
 800ca16:	e7e7      	b.n	800c9e8 <_realloc_r+0x1c>

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4608      	mov	r0, r1
 800ca1e:	4611      	mov	r1, r2
 800ca20:	2200      	movs	r2, #0
 800ca22:	4d05      	ldr	r5, [pc, #20]	; (800ca38 <_read_r+0x20>)
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f5 fba9 	bl	800217e <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	200033fc 	.word	0x200033fc

0800ca3c <__ascii_wctomb>:
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	4608      	mov	r0, r1
 800ca40:	b141      	cbz	r1, 800ca54 <__ascii_wctomb+0x18>
 800ca42:	2aff      	cmp	r2, #255	; 0xff
 800ca44:	d904      	bls.n	800ca50 <__ascii_wctomb+0x14>
 800ca46:	228a      	movs	r2, #138	; 0x8a
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	4770      	bx	lr
 800ca50:	2001      	movs	r0, #1
 800ca52:	700a      	strb	r2, [r1, #0]
 800ca54:	4770      	bx	lr

0800ca56 <abort>:
 800ca56:	2006      	movs	r0, #6
 800ca58:	b508      	push	{r3, lr}
 800ca5a:	f000 f855 	bl	800cb08 <raise>
 800ca5e:	2001      	movs	r0, #1
 800ca60:	f7f5 fb87 	bl	8002172 <_exit>

0800ca64 <_fstat_r>:
 800ca64:	b538      	push	{r3, r4, r5, lr}
 800ca66:	2300      	movs	r3, #0
 800ca68:	4d06      	ldr	r5, [pc, #24]	; (800ca84 <_fstat_r+0x20>)
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4608      	mov	r0, r1
 800ca6e:	4611      	mov	r1, r2
 800ca70:	602b      	str	r3, [r5, #0]
 800ca72:	f7f5 fb94 	bl	800219e <_fstat>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d102      	bne.n	800ca80 <_fstat_r+0x1c>
 800ca7a:	682b      	ldr	r3, [r5, #0]
 800ca7c:	b103      	cbz	r3, 800ca80 <_fstat_r+0x1c>
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	bf00      	nop
 800ca84:	200033fc 	.word	0x200033fc

0800ca88 <_isatty_r>:
 800ca88:	b538      	push	{r3, r4, r5, lr}
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	4d05      	ldr	r5, [pc, #20]	; (800caa4 <_isatty_r+0x1c>)
 800ca8e:	4604      	mov	r4, r0
 800ca90:	4608      	mov	r0, r1
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	f7f5 fb88 	bl	80021a8 <_isatty>
 800ca98:	1c43      	adds	r3, r0, #1
 800ca9a:	d102      	bne.n	800caa2 <_isatty_r+0x1a>
 800ca9c:	682b      	ldr	r3, [r5, #0]
 800ca9e:	b103      	cbz	r3, 800caa2 <_isatty_r+0x1a>
 800caa0:	6023      	str	r3, [r4, #0]
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	200033fc 	.word	0x200033fc

0800caa8 <_malloc_usable_size_r>:
 800caa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caac:	1f18      	subs	r0, r3, #4
 800caae:	2b00      	cmp	r3, #0
 800cab0:	bfbc      	itt	lt
 800cab2:	580b      	ldrlt	r3, [r1, r0]
 800cab4:	18c0      	addlt	r0, r0, r3
 800cab6:	4770      	bx	lr

0800cab8 <_raise_r>:
 800cab8:	291f      	cmp	r1, #31
 800caba:	b538      	push	{r3, r4, r5, lr}
 800cabc:	4604      	mov	r4, r0
 800cabe:	460d      	mov	r5, r1
 800cac0:	d904      	bls.n	800cacc <_raise_r+0x14>
 800cac2:	2316      	movs	r3, #22
 800cac4:	6003      	str	r3, [r0, #0]
 800cac6:	f04f 30ff 	mov.w	r0, #4294967295
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cace:	b112      	cbz	r2, 800cad6 <_raise_r+0x1e>
 800cad0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cad4:	b94b      	cbnz	r3, 800caea <_raise_r+0x32>
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 f830 	bl	800cb3c <_getpid_r>
 800cadc:	462a      	mov	r2, r5
 800cade:	4601      	mov	r1, r0
 800cae0:	4620      	mov	r0, r4
 800cae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cae6:	f000 b817 	b.w	800cb18 <_kill_r>
 800caea:	2b01      	cmp	r3, #1
 800caec:	d00a      	beq.n	800cb04 <_raise_r+0x4c>
 800caee:	1c59      	adds	r1, r3, #1
 800caf0:	d103      	bne.n	800cafa <_raise_r+0x42>
 800caf2:	2316      	movs	r3, #22
 800caf4:	6003      	str	r3, [r0, #0]
 800caf6:	2001      	movs	r0, #1
 800caf8:	e7e7      	b.n	800caca <_raise_r+0x12>
 800cafa:	2400      	movs	r4, #0
 800cafc:	4628      	mov	r0, r5
 800cafe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb02:	4798      	blx	r3
 800cb04:	2000      	movs	r0, #0
 800cb06:	e7e0      	b.n	800caca <_raise_r+0x12>

0800cb08 <raise>:
 800cb08:	4b02      	ldr	r3, [pc, #8]	; (800cb14 <raise+0xc>)
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	6818      	ldr	r0, [r3, #0]
 800cb0e:	f7ff bfd3 	b.w	800cab8 <_raise_r>
 800cb12:	bf00      	nop
 800cb14:	20000180 	.word	0x20000180

0800cb18 <_kill_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	4d06      	ldr	r5, [pc, #24]	; (800cb38 <_kill_r+0x20>)
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	4611      	mov	r1, r2
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	f7f5 fb1c 	bl	8002162 <_kill>
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	d102      	bne.n	800cb34 <_kill_r+0x1c>
 800cb2e:	682b      	ldr	r3, [r5, #0]
 800cb30:	b103      	cbz	r3, 800cb34 <_kill_r+0x1c>
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	bd38      	pop	{r3, r4, r5, pc}
 800cb36:	bf00      	nop
 800cb38:	200033fc 	.word	0x200033fc

0800cb3c <_getpid_r>:
 800cb3c:	f7f5 bb0f 	b.w	800215e <_getpid>

0800cb40 <_init>:
 800cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb42:	bf00      	nop
 800cb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb46:	bc08      	pop	{r3}
 800cb48:	469e      	mov	lr, r3
 800cb4a:	4770      	bx	lr

0800cb4c <_fini>:
 800cb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4e:	bf00      	nop
 800cb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb52:	bc08      	pop	{r3}
 800cb54:	469e      	mov	lr, r3
 800cb56:	4770      	bx	lr
