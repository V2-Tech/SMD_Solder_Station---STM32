
SMD_Solder_Station---STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c678  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019dc  0800c788  0800c788  0001c788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e164  0800e164  00020350  2**0
                  CONTENTS
  4 .ARM          00000000  0800e164  0800e164  00020350  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e164  0800e164  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e164  0800e164  0001e164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e168  0800e168  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800e16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fac  20000350  0800e4bc  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200032fc  0800e4bc  000232fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b7a6c  00000000  00000000  00020379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a31a  00000000  00000000  000d7de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000034f8  00000000  00000000  000e2100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021152  00000000  00000000  000e55f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000494be  00000000  00000000  0010674a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000afb9d  00000000  00000000  0014fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001ff7a5  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00004be0  00000000  00000000  001ff7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000bc14  00000000  00000000  002043d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00040346  00000000  00000000  0020ffec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000350 	.word	0x20000350
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c770 	.word	0x0800c770

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000354 	.word	0x20000354
 800014c:	0800c770 	.word	0x0800c770

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <vApplicationGetIdleTaskMemory+0x10>)
 8001072:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <vApplicationGetIdleTaskMemory+0x14>)
 8001076:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000056c 	.word	0x2000056c
 8001084:	2000036c 	.word	0x2000036c

08001088 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <vApplicationGetTimerTaskMemory+0x10>)
 800108a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <vApplicationGetTimerTaskMemory+0x14>)
 800108e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001094:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001096:	4770      	bx	lr
 8001098:	200009b8 	.word	0x200009b8
 800109c:	200005b8 	.word	0x200005b8

080010a0 <BlinkTimerCallback>:
	Interface->SignedEncActValue = (int16_t) EncActValue;
}

void BlinkTimerCallback(void const * argument)
{
	BlinkVar = !BlinkVar;
 80010a0:	4a02      	ldr	r2, [pc, #8]	; (80010ac <BlinkTimerCallback+0xc>)
 80010a2:	7813      	ldrb	r3, [r2, #0]
 80010a4:	f083 0301 	eor.w	r3, r3, #1
 80010a8:	7013      	strb	r3, [r2, #0]
}
 80010aa:	4770      	bx	lr
 80010ac:	20000a05 	.word	0x20000a05

080010b0 <MainPage>:
	}
	u8g2_SendBuffer(&u8g2);
}

void MainPage(VisualInterface* Interface, LPFilter *filter)
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
	//*********************************
	//************* ICONS *************
	//*********************************

	// Draw target temperature icon
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010b2:	260e      	movs	r6, #14
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MainPage+0x98>)
{
 80010b6:	b086      	sub	sp, #24
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010b8:	2200      	movs	r2, #0
 80010ba:	9301      	str	r3, [sp, #4]
{
 80010bc:	4604      	mov	r4, r0
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010be:	2316      	movs	r3, #22
 80010c0:	4822      	ldr	r0, [pc, #136]	; (800114c <MainPage+0x9c>)
{
 80010c2:	460d      	mov	r5, r1
	u8g2_DrawXBMP(&u8g2, 2, 0, 22, 14, temperature_target_22x14);
 80010c4:	9600      	str	r6, [sp, #0]
 80010c6:	2102      	movs	r1, #2
 80010c8:	f000 ffd3 	bl	8002072 <u8g2_DrawXBMP>

	// Draw actual temperature icon
	u8g2_DrawXBMP(&u8g2, 1, 20, 23, 39, temperature_23x39);
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <MainPage+0xa0>)
 80010ce:	2214      	movs	r2, #20
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	2327      	movs	r3, #39	; 0x27
 80010d4:	2101      	movs	r1, #1
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	481c      	ldr	r0, [pc, #112]	; (800114c <MainPage+0x9c>)
 80010da:	2317      	movs	r3, #23
 80010dc:	f000 ffc9 	bl	8002072 <u8g2_DrawXBMP>

	// Draw alarm icon
	if (AlarmVar)
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MainPage+0xa4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b143      	cbz	r3, 80010f8 <MainPage+0x48>
	{
		u8g2_DrawXBMP(&u8g2, 110, 0, 14, 14, alarm_14x14);
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MainPage+0xa8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	e9cd 6300 	strd	r6, r3, [sp]
 80010ee:	216e      	movs	r1, #110	; 0x6e
 80010f0:	4633      	mov	r3, r6
 80010f2:	4816      	ldr	r0, [pc, #88]	; (800114c <MainPage+0x9c>)
 80010f4:	f000 ffbd 	bl	8002072 <u8g2_DrawXBMP>
	}

	// Draw heat icon
	if ((Interface->_ActualHeatState == HeatStatyState) ||
 80010f8:	7963      	ldrb	r3, [r4, #5]
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d002      	beq.n	8001104 <MainPage+0x54>
			((Interface->_ActualHeatState == Heating || 1) && (BlinkVar == 1)))
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MainPage+0xac>)
	if ((Interface->_ActualHeatState == HeatStatyState) ||
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b14b      	cbz	r3, 8001118 <MainPage+0x68>
	{
		u8g2_DrawXBMP(&u8g2, 96, 26, 30, 28, Heater_30x28);
 8001104:	4b16      	ldr	r3, [pc, #88]	; (8001160 <MainPage+0xb0>)
 8001106:	221a      	movs	r2, #26
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	231c      	movs	r3, #28
 800110c:	2160      	movs	r1, #96	; 0x60
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	480e      	ldr	r0, [pc, #56]	; (800114c <MainPage+0x9c>)
 8001112:	231e      	movs	r3, #30
 8001114:	f000 ffad 	bl	8002072 <u8g2_DrawXBMP>
	//*********************************
	//************ VALUES *************
	//*********************************

	// Actual temperature value
	u8g2_SetFont(&u8g2, u8g2_font_helvR18_tf);
 8001118:	4912      	ldr	r1, [pc, #72]	; (8001164 <MainPage+0xb4>)
 800111a:	480c      	ldr	r0, [pc, #48]	; (800114c <MainPage+0x9c>)
 800111c:	f001 fabe 	bl	800269c <u8g2_SetFont>
	sprintf((uint8_t *)ScreenString[0], "%3.0f C",filter->FilteredValue);
 8001120:	6968      	ldr	r0, [r5, #20]
 8001122:	f7ff f981 	bl	8000428 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	a802      	add	r0, sp, #8
 800112c:	490e      	ldr	r1, [pc, #56]	; (8001168 <MainPage+0xb8>)
 800112e:	f009 f8f5 	bl	800a31c <siprintf>
	u8g2_DrawStr(&u8g2, 32, 24, ScreenString[0]);
 8001132:	ab02      	add	r3, sp, #8
 8001134:	2218      	movs	r2, #24
 8001136:	2120      	movs	r1, #32
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MainPage+0x9c>)
 800113a:	f001 fa6f 	bl	800261c <u8g2_DrawStr>

	// Setpoint value

	Interface->_ActualPage = PageMain;
 800113e:	2300      	movs	r3, #0
 8001140:	70e3      	strb	r3, [r4, #3]
}
 8001142:	b006      	add	sp, #24
 8001144:	bd70      	pop	{r4, r5, r6, pc}
 8001146:	bf00      	nop
 8001148:	0800c8dd 	.word	0x0800c8dd
 800114c:	20001e9c 	.word	0x20001e9c
 8001150:	0800c868 	.word	0x0800c868
 8001154:	20000a04 	.word	0x20000a04
 8001158:	0800c84c 	.word	0x0800c84c
 800115c:	20000a05 	.word	0x20000a05
 8001160:	0800c7dc 	.word	0x0800c7dc
 8001164:	0800c97c 	.word	0x0800c97c
 8001168:	0800c907 	.word	0x0800c907

0800116c <Graphic>:
{
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4604      	mov	r4, r0
	u8g2_ClearBuffer(&u8g2);
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <Graphic+0x24>)
{
 8001172:	460d      	mov	r5, r1
	u8g2_ClearBuffer(&u8g2);
 8001174:	f000 ffac 	bl	80020d0 <u8g2_ClearBuffer>
	switch(Interface->_ActualPage)
 8001178:	78e3      	ldrb	r3, [r4, #3]
 800117a:	b91b      	cbnz	r3, 8001184 <Graphic+0x18>
			MainPage(Interface, filter);
 800117c:	4629      	mov	r1, r5
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff ff96 	bl	80010b0 <MainPage>
}
 8001184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	u8g2_SendBuffer(&u8g2);
 8001188:	4801      	ldr	r0, [pc, #4]	; (8001190 <Graphic+0x24>)
 800118a:	f000 bfab 	b.w	80020e4 <u8g2_SendBuffer>
 800118e:	bf00      	nop
 8001190:	20001e9c 	.word	0x20001e9c

08001194 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void const * argument)
{
 8001194:	b508      	push	{r3, lr}
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001196:	f008 fa11 	bl	80095bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f006 fd90 	bl	8007cc0 <osDelay>
  for(;;)
 80011a0:	e7fb      	b.n	800119a <StartMainTask+0x6>
	...

080011a4 <StartGraphicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGraphicTask */
void StartGraphicTask(void const * argument)
{
 80011a4:	b508      	push	{r3, lr}
		  u8g2_DrawStr(&u8g2, 1, tempHeigth, ScreenString[0]);
		  u8g2_DrawStr(&u8g2, 1, tempHeigth*3 + LINESPACE, ScreenString[2]);
	  }
	  u8g2_SendBuffer(&u8g2);
	  */
	  Graphic(&GraphicVar, &TempFilter);
 80011a6:	4d05      	ldr	r5, [pc, #20]	; (80011bc <StartGraphicTask+0x18>)
 80011a8:	4c05      	ldr	r4, [pc, #20]	; (80011c0 <StartGraphicTask+0x1c>)
 80011aa:	4620      	mov	r0, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	f7ff ffdd 	bl	800116c <Graphic>
	  osDelay(20);
 80011b2:	2014      	movs	r0, #20
 80011b4:	f006 fd84 	bl	8007cc0 <osDelay>
  for(;;)
 80011b8:	e7f7      	b.n	80011aa <StartGraphicTask+0x6>
 80011ba:	bf00      	nop
 80011bc:	20001f80 	.word	0x20001f80
 80011c0:	200021a4 	.word	0x200021a4

080011c4 <StartPID>:
{
  /* USER CODE BEGIN StartPID */
  /* Infinite loop */
  for(;;)
  {
	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 80011c4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
{
 80011c8:	b508      	push	{r3, lr}
	  TIM2->CCR2 = PIDUpdate(&TempPID, FilteredTemperature);
 80011ca:	4e06      	ldr	r6, [pc, #24]	; (80011e4 <StartPID+0x20>)
 80011cc:	4d06      	ldr	r5, [pc, #24]	; (80011e8 <StartPID+0x24>)
 80011ce:	4628      	mov	r0, r5
 80011d0:	6831      	ldr	r1, [r6, #0]
 80011d2:	f000 fb2d 	bl	8001830 <PIDUpdate>
 80011d6:	63a0      	str	r0, [r4, #56]	; 0x38
	  osDelay(1000/PID_LOOP_FREQUENCY_HZ);
 80011d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011dc:	f006 fd70 	bl	8007cc0 <osDelay>
  for(;;)
 80011e0:	e7f5      	b.n	80011ce <StartPID+0xa>
 80011e2:	bf00      	nop
 80011e4:	20001f24 	.word	0x20001f24
 80011e8:	20001ff4 	.word	0x20001ff4

080011ec <ReadTempTimerCallback>:
  /* USER CODE END StartPID */
}

/* ReadTempTimerCallback function */
void ReadTempTimerCallback(void const * argument)
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN ReadTempTimerCallback */
	Max6675_Read_TempValue(&ActTemperature);
 80011ee:	4c16      	ldr	r4, [pc, #88]	; (8001248 <ReadTempTimerCallback+0x5c>)
{
 80011f0:	b085      	sub	sp, #20
	Max6675_Read_TempValue(&ActTemperature);
 80011f2:	4620      	mov	r0, r4
 80011f4:	f001 fe1e 	bl	8002e34 <Max6675_Read_TempValue>
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 80011f8:	6821      	ldr	r1, [r4, #0]
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <ReadTempTimerCallback+0x60>)
 80011fc:	f000 fad4 	bl	80017a8 <LPFilterUpdate>
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	*/

	// Graph 2
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
					  TempPID.PID_P, TempPID.PID_I, TempPID.PID_D);
 8001200:	4d13      	ldr	r5, [pc, #76]	; (8001250 <ReadTempTimerCallback+0x64>)
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <ReadTempTimerCallback+0x68>)
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 8001204:	4c14      	ldr	r4, [pc, #80]	; (8001258 <ReadTempTimerCallback+0x6c>)
	FilteredTemperature = LPFilterUpdate(&TempFilter, ActTemperature);
 8001206:	6018      	str	r0, [r3, #0]
	sprintf((uint8_t *) logBuf, "PID_P: %.1f, PID_I: %.1f, PID_D: %.1f\r\n",
 8001208:	68a8      	ldr	r0, [r5, #8]
 800120a:	f7ff f90d 	bl	8000428 <__aeabi_f2d>
 800120e:	4606      	mov	r6, r0
 8001210:	6928      	ldr	r0, [r5, #16]
 8001212:	460f      	mov	r7, r1
 8001214:	f7ff f908 	bl	8000428 <__aeabi_f2d>
 8001218:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800121c:	68e8      	ldr	r0, [r5, #12]
 800121e:	f7ff f903 	bl	8000428 <__aeabi_f2d>
 8001222:	4632      	mov	r2, r6
 8001224:	e9cd 0100 	strd	r0, r1, [sp]
 8001228:	463b      	mov	r3, r7
 800122a:	490c      	ldr	r1, [pc, #48]	; (800125c <ReadTempTimerCallback+0x70>)
 800122c:	4620      	mov	r0, r4
 800122e:	f009 f875 	bl	800a31c <siprintf>
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001232:	4620      	mov	r0, r4
 8001234:	f7fe ff8c 	bl	8000150 <strlen>
 8001238:	b281      	uxth	r1, r0
 800123a:	4620      	mov	r0, r4
	sprintf((uint8_t *) logBuf, "Actual Temp: %.1f, Actual PWM: %d, PID_D: %.1f\r\n",
					  FilteredTemperature, TIM2->CCR2, TempPID.PID_D);
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
	 */
  /* USER CODE END ReadTempTimerCallback */
}
 800123c:	b005      	add	sp, #20
 800123e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	CDC_Transmit_FS((uint8_t *) logBuf, strlen(logBuf));
 8001242:	f008 ba09 	b.w	8009658 <CDC_Transmit_FS>
 8001246:	bf00      	nop
 8001248:	20002324 	.word	0x20002324
 800124c:	20001f80 	.word	0x20001f80
 8001250:	20001ff4 	.word	0x20001ff4
 8001254:	20001f24 	.word	0x20001f24
 8001258:	200020e1 	.word	0x200020e1
 800125c:	0800c92c 	.word	0x0800c92c

08001260 <SystemClock_Config>:
{
 8001260:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	2410      	movs	r4, #16
{
 8001264:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	4622      	mov	r2, r4
 8001268:	2100      	movs	r1, #0
 800126a:	a80d      	add	r0, sp, #52	; 0x34
 800126c:	f008 fbee 	bl	8009a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	2214      	movs	r2, #20
 8001272:	2100      	movs	r1, #0
 8001274:	eb0d 0002 	add.w	r0, sp, r2
 8001278:	f008 fbe8 	bl	8009a4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	4622      	mov	r2, r4
 800127e:	2100      	movs	r1, #0
 8001280:	a801      	add	r0, sp, #4
 8001282:	f008 fbe3 	bl	8009a4c <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001286:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800128e:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001290:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001294:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800129e:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012a2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f003 ff04 	bl	80050b0 <HAL_RCC_OscConfig>
 80012a8:	b108      	cbz	r0, 80012ae <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012aa:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ba:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012be:	4629      	mov	r1, r5
 80012c0:	a805      	add	r0, sp, #20
 80012c2:	f004 f8cb 	bl	800545c <HAL_RCC_ClockConfig>
 80012c6:	b108      	cbz	r0, 80012cc <SystemClock_Config+0x6c>
 80012c8:	b672      	cpsid	i
  while (1)
 80012ca:	e7fe      	b.n	80012ca <SystemClock_Config+0x6a>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80012cc:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012d0:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d2:	f004 f99d 	bl	8005610 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	b108      	cbz	r0, 80012dc <SystemClock_Config+0x7c>
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <SystemClock_Config+0x7a>
}
 80012dc:	b015      	add	sp, #84	; 0x54
 80012de:	bd30      	pop	{r4, r5, pc}

080012e0 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f04f 0810 	mov.w	r8, #16
{
 80012e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2501      	movs	r5, #1
 80012ea:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2602      	movs	r6, #2
{
 80012ee:	b0a7      	sub	sp, #156	; 0x9c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f0:	4cae      	ldr	r4, [pc, #696]	; (80015ac <main+0x2cc>)
  HAL_Init();
 80012f2:	f001 fdcd 	bl	8002e90 <HAL_Init>
  SystemClock_Config();
 80012f6:	f7ff ffb3 	bl	8001260 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fa:	4642      	mov	r2, r8
 80012fc:	2100      	movs	r1, #0
 80012fe:	a81d      	add	r0, sp, #116	; 0x74
 8001300:	f008 fba4 	bl	8009a4c <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001308:	f043 0320 	orr.w	r3, r3, #32
 800130c:	61a3      	str	r3, [r4, #24]
 800130e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 8001310:	4641      	mov	r1, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	9308      	str	r3, [sp, #32]
 8001318:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 800131c:	48a4      	ldr	r0, [pc, #656]	; (80015b0 <main+0x2d0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	61a3      	str	r3, [r4, #24]
 8001324:	69a3      	ldr	r3, [r4, #24]
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	9309      	str	r3, [sp, #36]	; 0x24
 800132c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	69a3      	ldr	r3, [r4, #24]
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	61a3      	str	r3, [r4, #24]
 8001336:	69a3      	ldr	r3, [r4, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	930a      	str	r3, [sp, #40]	; 0x28
 800133e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port, MAX6675_NSS_Pin, GPIO_PIN_RESET);
 8001340:	f002 f814 	bl	800336c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	489a      	ldr	r0, [pc, #616]	; (80015b4 <main+0x2d4>)
 800134a:	f002 f80f 	bl	800336c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 800134e:	4898      	ldr	r0, [pc, #608]	; (80015b0 <main+0x2d0>)
 8001350:	a91d      	add	r1, sp, #116	; 0x74
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	e9cd 571e 	strd	r5, r7, [sp, #120]	; 0x78
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	9620      	str	r6, [sp, #128]	; 0x80
  GPIO_InitStruct.Pin = MAX6675_NSS_Pin;
 8001358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 800135c:	f001 ff2a 	bl	80031b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 761f 	strd	r7, r6, [sp, #124]	; 0x7c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	e9cd 651d 	strd	r6, r5, [sp, #116]	; 0x74
  GPIO_InitStruct.Pin = ENC_PULS_Pin;
 8001368:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800136a:	4892      	ldr	r0, [pc, #584]	; (80015b4 <main+0x2d4>)
 800136c:	a91d      	add	r1, sp, #116	; 0x74
 800136e:	f001 ff21 	bl	80031b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(ENC_PULS_GPIO_Port, &GPIO_InitStruct);
 8001372:	4890      	ldr	r0, [pc, #576]	; (80015b4 <main+0x2d4>)
 8001374:	a91d      	add	r1, sp, #116	; 0x74
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001376:	e9cd 671d 	strd	r6, r7, [sp, #116]	; 0x74
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	951f      	str	r5, [sp, #124]	; 0x7c
  HAL_GPIO_Init(ENC_PULS_GPIO_Port, &GPIO_InitStruct);
 800137c:	f001 ff1a 	bl	80031b4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001380:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001382:	463a      	mov	r2, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001384:	432b      	orrs	r3, r5
 8001386:	6163      	str	r3, [r4, #20]
 8001388:	6963      	ldr	r3, [r4, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800138a:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138c:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800138e:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001390:	9307      	str	r3, [sp, #28]
 8001392:	9b07      	ldr	r3, [sp, #28]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001394:	f001 fdc4 	bl	8002f20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001398:	200e      	movs	r0, #14
 800139a:	f001 fdf3 	bl	8002f84 <HAL_NVIC_EnableIRQ>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800139e:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80013a2:	4885      	ldr	r0, [pc, #532]	; (80015b8 <main+0x2d8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013a4:	f8df c248 	ldr.w	ip, [pc, #584]	; 80015f0 <main+0x310>
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80013a8:	f44f 6e80 	mov.w	lr, #1024	; 0x400
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ac:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80013b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b4:	e9c0 7704 	strd	r7, r7, [r0, #16]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80013b8:	e9c0 e302 	strd	lr, r3, [r0, #8]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013bc:	e9c0 7708 	strd	r7, r7, [r0, #32]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013c4:	6287      	str	r7, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013c6:	270a      	movs	r7, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013c8:	e9c0 3806 	strd	r3, r8, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80013cc:	62c7      	str	r7, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013ce:	f004 fa22 	bl	8005816 <HAL_SPI_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b108      	cbz	r0, 80013da <main+0xfa>
 80013d6:	b672      	cpsid	i
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <main+0xf8>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013da:	f44f 4980 	mov.w	r9, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 80013de:	4877      	ldr	r0, [pc, #476]	; (80015bc <main+0x2dc>)
  hi2c1.Init.ClockSpeed = 400000;
 80013e0:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <main+0x2e0>)
 80013e2:	f8df a210 	ldr.w	sl, [pc, #528]	; 80015f4 <main+0x314>
  hi2c1.Init.OwnAddress1 = 0;
 80013e6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ea:	e9c0 9304 	strd	r9, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013f2:	6203      	str	r3, [r0, #32]
  hi2c1.Init.ClockSpeed = 400000;
 80013f4:	e9c0 2a00 	strd	r2, sl, [r0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f8:	f002 f890 	bl	800351c <HAL_I2C_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b108      	cbz	r0, 8001404 <main+0x124>
 8001400:	b672      	cpsid	i
  while (1)
 8001402:	e7fe      	b.n	8001402 <main+0x122>
  huart2.Init.BaudRate = 115200;
 8001404:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001408:	486e      	ldr	r0, [pc, #440]	; (80015c4 <main+0x2e4>)
  huart2.Init.BaudRate = 115200;
 800140a:	4c6f      	ldr	r4, [pc, #444]	; (80015c8 <main+0x2e8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 800140c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8001410:	e9c0 4200 	strd	r4, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001414:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 8001416:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001418:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800141c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800141e:	f005 f8f5 	bl	800660c <HAL_UART_Init>
 8001422:	4683      	mov	fp, r0
 8001424:	b108      	cbz	r0, 800142a <main+0x14a>
 8001426:	b672      	cpsid	i
  while (1)
 8001428:	e7fe      	b.n	8001428 <main+0x148>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	4601      	mov	r1, r0
 800142c:	4642      	mov	r2, r8
 800142e:	a816      	add	r0, sp, #88	; 0x58
 8001430:	f008 fb0c 	bl	8009a4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001434:	221c      	movs	r2, #28
 8001436:	4659      	mov	r1, fp
 8001438:	a81d      	add	r0, sp, #116	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143a:	e9cd bb0f 	strd	fp, fp, [sp, #60]	; 0x3c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800143e:	f008 fb05 	bl	8009a4c <memset>
  htim2.Instance = TIM2;
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	4c61      	ldr	r4, [pc, #388]	; (80015cc <main+0x2ec>)
  htim2.Init.Prescaler = 0;
 8001448:	e9c4 3b00 	strd	r3, fp, [r4]
  htim2.Init.Period = 1024-1;
 800144c:	f240 33ff 	movw	r3, #1023	; 0x3ff
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001450:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	e9c4 3b03 	strd	r3, fp, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	f8c4 b008 	str.w	fp, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800145a:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145c:	f004 fe3a 	bl	80060d4 <HAL_TIM_Base_Init>
 8001460:	b108      	cbz	r0, 8001466 <main+0x186>
 8001462:	b672      	cpsid	i
  while (1)
 8001464:	e7fe      	b.n	8001464 <main+0x184>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146a:	4620      	mov	r0, r4
 800146c:	a916      	add	r1, sp, #88	; 0x58
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001470:	f004 ff6f 	bl	8006352 <HAL_TIM_ConfigClockSource>
 8001474:	b108      	cbz	r0, 800147a <main+0x19a>
 8001476:	b672      	cpsid	i
  while (1)
 8001478:	e7fe      	b.n	8001478 <main+0x198>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800147a:	4620      	mov	r0, r4
 800147c:	f004 fe56 	bl	800612c <HAL_TIM_PWM_Init>
 8001480:	b108      	cbz	r0, 8001486 <main+0x1a6>
 8001482:	b672      	cpsid	i
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x1a4>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148a:	a90f      	add	r1, sp, #60	; 0x3c
 800148c:	4620      	mov	r0, r4
 800148e:	f005 f853 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	b108      	cbz	r0, 8001498 <main+0x1b8>
 8001494:	b672      	cpsid	i
  while (1)
 8001496:	e7fe      	b.n	8001496 <main+0x1b6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149a:	901f      	str	r0, [sp, #124]	; 0x7c
  sConfigOC.Pulse = 0;
 800149c:	e9cd 301d 	strd	r3, r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a0:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a2:	2204      	movs	r2, #4
 80014a4:	4620      	mov	r0, r4
 80014a6:	a91d      	add	r1, sp, #116	; 0x74
 80014a8:	f004 feee 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 80014ac:	4680      	mov	r8, r0
 80014ae:	b108      	cbz	r0, 80014b4 <main+0x1d4>
 80014b0:	b672      	cpsid	i
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <main+0x1d2>
  HAL_TIM_MspPostInit(&htim2);
 80014b4:	4620      	mov	r0, r4
 80014b6:	f000 fbdf 	bl	8001c78 <HAL_TIM_MspPostInit>
  hi2c2.Instance = I2C2;
 80014ba:	4845      	ldr	r0, [pc, #276]	; (80015d0 <main+0x2f0>)
 80014bc:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <main+0x2f4>)
  hi2c2.Init.OwnAddress1 = 0;
 80014be:	e9c0 8802 	strd	r8, r8, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 80014c2:	e9c0 3a00 	strd	r3, sl, [r0]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c6:	e9c0 9804 	strd	r9, r8, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ca:	e9c0 8806 	strd	r8, r8, [r0, #24]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	f8c0 8020 	str.w	r8, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d2:	f002 f823 	bl	800351c <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b108      	cbz	r0, 80014de <main+0x1fe>
 80014da:	b672      	cpsid	i
  while (1)
 80014dc:	e7fe      	b.n	80014dc <main+0x1fc>
  htim3.Instance = TIM3;
 80014de:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <main+0x2f8>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  htim3.Instance = TIM3;
 80014e4:	483d      	ldr	r0, [pc, #244]	; (80015dc <main+0x2fc>)
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014e6:	a91d      	add	r1, sp, #116	; 0x74
  htim3.Init.Prescaler = 0;
 80014e8:	e9c0 2300 	strd	r2, r3, [r0]
  htim3.Init.Period = 65535;
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	e9c0 2303 	strd	r2, r3, [r0, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2203      	movs	r2, #3
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f6:	e9cd 531f 	strd	r5, r3, [sp, #124]	; 0x7c
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fa:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014fe:	e9cd 7321 	strd	r7, r3, [sp, #132]	; 0x84
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001502:	e9cd 5323 	strd	r5, r3, [sp, #140]	; 0x8c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001508:	6186      	str	r6, [r0, #24]
  sConfig.IC2Filter = 10;
 800150a:	9725      	str	r7, [sp, #148]	; 0x94
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800150c:	f004 fe3a 	bl	8006184 <HAL_TIM_Encoder_Init>
 8001510:	b108      	cbz	r0, 8001516 <main+0x236>
 8001512:	b672      	cpsid	i
  while (1)
 8001514:	e7fe      	b.n	8001514 <main+0x234>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001518:	4830      	ldr	r0, [pc, #192]	; (80015dc <main+0x2fc>)
 800151a:	a916      	add	r1, sp, #88	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001520:	f005 f80a 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	b108      	cbz	r0, 800152c <main+0x24c>
 8001528:	b672      	cpsid	i
  while (1)
 800152a:	e7fe      	b.n	800152a <main+0x24a>
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800152c:	f44f 7282 	mov.w	r2, #260	; 0x104
  hspi2.Instance = SPI2;
 8001530:	482b      	ldr	r0, [pc, #172]	; (80015e0 <main+0x300>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001532:	492c      	ldr	r1, [pc, #176]	; (80015e4 <main+0x304>)
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001534:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001538:	e9c0 1200 	strd	r1, r2, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001540:	6083      	str	r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001542:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001546:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800154e:	2410      	movs	r4, #16
  hspi2.Init.CRCPolynomial = 10;
 8001550:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001552:	e9c0 2406 	strd	r2, r4, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001556:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001558:	f004 f95d 	bl	8005816 <HAL_SPI_Init>
 800155c:	4605      	mov	r5, r0
 800155e:	b108      	cbz	r0, 8001564 <main+0x284>
 8001560:	b672      	cpsid	i
  while (1)
 8001562:	e7fe      	b.n	8001562 <main+0x282>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001564:	4622      	mov	r2, r4
 8001566:	4601      	mov	r1, r0
 8001568:	a81d      	add	r0, sp, #116	; 0x74
 800156a:	f008 fa6f 	bl	8009a4c <memset>
  htim4.Init.Prescaler = 1000-1;
 800156e:	f240 33e7 	movw	r3, #999	; 0x3e7
  htim4.Instance = TIM4;
 8001572:	4c1d      	ldr	r4, [pc, #116]	; (80015e8 <main+0x308>)
  htim4.Init.Prescaler = 1000-1;
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <main+0x30c>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001576:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 1000-1;
 8001578:	e9c4 2300 	strd	r2, r3, [r4]
  htim4.Init.Period = 18000-1;
 800157c:	f244 634f 	movw	r3, #17999	; 0x464f
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001580:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001584:	2380      	movs	r3, #128	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001586:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	60a5      	str	r5, [r4, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800158c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800158e:	f004 fda1 	bl	80060d4 <HAL_TIM_Base_Init>
 8001592:	b108      	cbz	r0, 8001598 <main+0x2b8>
 8001594:	b672      	cpsid	i
  while (1)
 8001596:	e7fe      	b.n	8001596 <main+0x2b6>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800159c:	4620      	mov	r0, r4
 800159e:	a91d      	add	r1, sp, #116	; 0x74
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a0:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015a2:	f004 fed6 	bl	8006352 <HAL_TIM_ConfigClockSource>
 80015a6:	b338      	cbz	r0, 80015f8 <main+0x318>
 80015a8:	b672      	cpsid	i
  while (1)
 80015aa:	e7fe      	b.n	80015aa <main+0x2ca>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	20001f98 	.word	0x20001f98
 80015bc:	2000208c 	.word	0x2000208c
 80015c0:	40005400 	.word	0x40005400
 80015c4:	20002164 	.word	0x20002164
 80015c8:	40004400 	.word	0x40004400
 80015cc:	20002244 	.word	0x20002244
 80015d0:	20002038 	.word	0x20002038
 80015d4:	40005800 	.word	0x40005800
 80015d8:	40000400 	.word	0x40000400
 80015dc:	2000228c 	.word	0x2000228c
 80015e0:	20001f28 	.word	0x20001f28
 80015e4:	40003800 	.word	0x40003800
 80015e8:	200021f8 	.word	0x200021f8
 80015ec:	40000800 	.word	0x40000800
 80015f0:	40013000 	.word	0x40013000
 80015f4:	00061a80 	.word	0x00061a80
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015fc:	a916      	add	r1, sp, #88	; 0x58
 80015fe:	4620      	mov	r0, r4
 8001600:	f004 ff9a 	bl	8006538 <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4605      	mov	r5, r0
 8001606:	b108      	cbz	r0, 800160c <main+0x32c>
 8001608:	b672      	cpsid	i
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0x32a>
  HAL_TIM_Base_Start(&htim2);
 800160c:	4845      	ldr	r0, [pc, #276]	; (8001724 <main+0x444>)
 800160e:	f004 fbd7 	bl	8005dc0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001612:	2104      	movs	r1, #4
 8001614:	4843      	ldr	r0, [pc, #268]	; (8001724 <main+0x444>)
 8001616:	f004 ff8d 	bl	8006534 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800161a:	213c      	movs	r1, #60	; 0x3c
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <main+0x448>)
 800161e:	f004 fc20 	bl	8005e62 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 8001622:	4620      	mov	r0, r4
 8001624:	f004 fbf2 	bl	8005e0c <HAL_TIM_Base_Start_IT>
  u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2,
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <main+0x44c>)
 800162a:	4a41      	ldr	r2, [pc, #260]	; (8001730 <main+0x450>)
 800162c:	4941      	ldr	r1, [pc, #260]	; (8001734 <main+0x454>)
 800162e:	4842      	ldr	r0, [pc, #264]	; (8001738 <main+0x458>)
 8001630:	f000 fdb0 	bl	8002194 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
  u8g2_InitDisplay(&u8g2);
 8001634:	4840      	ldr	r0, [pc, #256]	; (8001738 <main+0x458>)
 8001636:	f001 fb94 	bl	8002d62 <u8x8_InitDisplay>
  u8g2_SetPowerSave(&u8g2, 0);
 800163a:	4629      	mov	r1, r5
 800163c:	483e      	ldr	r0, [pc, #248]	; (8001738 <main+0x458>)
 800163e:	f001 fb98 	bl	8002d72 <u8x8_SetPowerSave>
  u8g2_ClearDisplay(&u8g2);
 8001642:	483d      	ldr	r0, [pc, #244]	; (8001738 <main+0x458>)
 8001644:	f000 fd90 	bl	8002168 <u8g2_ClearDisplay>
  u8g2_SetFont(&u8g2, u8g2_font_helvR18_tf);
 8001648:	493c      	ldr	r1, [pc, #240]	; (800173c <main+0x45c>)
 800164a:	483b      	ldr	r0, [pc, #236]	; (8001738 <main+0x458>)
 800164c:	f001 f826 	bl	800269c <u8g2_SetFont>
  u8g2_SetFontPosTop(&u8g2);
 8001650:	4839      	ldr	r0, [pc, #228]	; (8001738 <main+0x458>)
 8001652:	f001 f81d 	bl	8002690 <u8g2_SetFontPosTop>
  LPFilterInit(&TempFilter);
 8001656:	483a      	ldr	r0, [pc, #232]	; (8001740 <main+0x460>)
 8001658:	f000 f89c 	bl	8001794 <LPFilterInit>
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 200, 60, 100, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 800165c:	4b39      	ldr	r3, [pc, #228]	; (8001744 <main+0x464>)
 800165e:	f04f 4289 	mov.w	r2, #1149239296	; 0x44800000
 8001662:	9305      	str	r3, [sp, #20]
 8001664:	f04f 4344 	mov.w	r3, #3288334336	; 0xc4000000
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800166e:	9303      	str	r3, [sp, #12]
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <main+0x468>)
 8001672:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <main+0x46c>)
 800167a:	4835      	ldr	r0, [pc, #212]	; (8001750 <main+0x470>)
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	4b35      	ldr	r3, [pc, #212]	; (8001754 <main+0x474>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001680:	4e35      	ldr	r6, [pc, #212]	; (8001758 <main+0x478>)
  PIDInit(&TempPID, TEMPERATURE_SAMPLE_TIME, MAXPWMOUTPUT, 0, 200, 60, 100, MAXPWMOUTPUT/2, -(MAXPWMOUTPUT/2), DERIVATIVE_TIME_CONSTANT);
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	f000 f8bb 	bl	8001800 <PIDInit>
  PIDNewSetpoint(&TempPID, 120);
 800168a:	4934      	ldr	r1, [pc, #208]	; (800175c <main+0x47c>)
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <main+0x470>)
 800168e:	f000 f8cd 	bl	800182c <PIDNewSetpoint>
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 8001692:	4b33      	ldr	r3, [pc, #204]	; (8001760 <main+0x480>)
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 8001694:	462a      	mov	r2, r5
 8001696:	2101      	movs	r1, #1
 8001698:	a80b      	add	r0, sp, #44	; 0x2c
  osTimerDef(ReadTempTimer, ReadTempTimerCallback);
 800169a:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 800169e:	f006 fb17 	bl	8007cd0 <osTimerCreate>
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 80016a2:	4b30      	ldr	r3, [pc, #192]	; (8001764 <main+0x484>)
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80016a4:	462a      	mov	r2, r5
  ReadTempTimerHandle = osTimerCreate(osTimer(ReadTempTimer), osTimerPeriodic, NULL);
 80016a6:	6030      	str	r0, [r6, #0]
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80016a8:	2101      	movs	r1, #1
 80016aa:	a80d      	add	r0, sp, #52	; 0x34
  osTimerDef(BlinkTimer, BlinkTimerCallback);
 80016ac:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80016b0:	f006 fb0e 	bl	8007cd0 <osTimerCreate>
 80016b4:	4c2c      	ldr	r4, [pc, #176]	; (8001768 <main+0x488>)
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 80016b6:	21fa      	movs	r1, #250	; 0xfa
  BlinkTimerHandle = osTimerCreate(osTimer(BlinkTimer), osTimerPeriodic, NULL);
 80016b8:	6020      	str	r0, [r4, #0]
  osTimerStart(ReadTempTimerHandle, MAX6675_READ_DELAY_MS/portTICK_PERIOD_MS);
 80016ba:	6830      	ldr	r0, [r6, #0]
 80016bc:	f006 fb20 	bl	8007d00 <osTimerStart>
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 80016c0:	6820      	ldr	r0, [r4, #0]
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 80016c2:	4c2a      	ldr	r4, [pc, #168]	; (800176c <main+0x48c>)
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 80016c4:	21fa      	movs	r1, #250	; 0xfa
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 80016c6:	ae0f      	add	r6, sp, #60	; 0x3c
  osTimerStart(BlinkTimerHandle, BLINK_DELAY_MS/portTICK_PERIOD_MS);
 80016c8:	f006 fb1a 	bl	8007d00 <osTimerStart>
  osThreadDef(MainTask, StartMainTask, osPriorityNormal, 0, 256);
 80016cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016d0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016d4:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 80016d8:	4629      	mov	r1, r5
 80016da:	a80f      	add	r0, sp, #60	; 0x3c
 80016dc:	f006 fac8 	bl	8007c70 <osThreadCreate>
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <main+0x490>)
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 80016e2:	f104 070c 	add.w	r7, r4, #12
 80016e6:	ae16      	add	r6, sp, #88	; 0x58
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 80016e8:	6018      	str	r0, [r3, #0]
  osThreadDef(GraphicTask, StartGraphicTask, osPriorityLow, 0, 256);
 80016ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80016ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80016ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80016f2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  GraphicTaskHandle = osThreadCreate(osThread(GraphicTask), NULL);
 80016f6:	4629      	mov	r1, r5
 80016f8:	a816      	add	r0, sp, #88	; 0x58
 80016fa:	f006 fab9 	bl	8007c70 <osThreadCreate>
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <main+0x494>)
  osThreadDef(PIDTask, StartPID, osPriorityNormal, 0, 128);
 8001700:	ae1d      	add	r6, sp, #116	; 0x74
 8001702:	3428      	adds	r4, #40	; 0x28
  GraphicTaskHandle = osThreadCreate(osThread(GraphicTask), NULL);
 8001704:	6018      	str	r0, [r3, #0]
  osThreadDef(PIDTask, StartPID, osPriorityNormal, 0, 128);
 8001706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001708:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800170a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800170e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  PIDTaskHandle = osThreadCreate(osThread(PIDTask), NULL);
 8001712:	4629      	mov	r1, r5
 8001714:	a81d      	add	r0, sp, #116	; 0x74
 8001716:	f006 faab 	bl	8007c70 <osThreadCreate>
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <main+0x498>)
 800171c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800171e:	f006 faa2 	bl	8007c66 <osKernelStart>
  while (1)
 8001722:	e7fe      	b.n	8001722 <main+0x442>
 8001724:	20002244 	.word	0x20002244
 8001728:	2000228c 	.word	0x2000228c
 800172c:	08001f55 	.word	0x08001f55
 8001730:	08001ee1 	.word	0x08001ee1
 8001734:	0800dca4 	.word	0x0800dca4
 8001738:	20001e9c 	.word	0x20001e9c
 800173c:	0800c97c 	.word	0x0800c97c
 8001740:	20001f80 	.word	0x20001f80
 8001744:	3ca3d70a 	.word	0x3ca3d70a
 8001748:	42c80000 	.word	0x42c80000
 800174c:	42700000 	.word	0x42700000
 8001750:	20001ff4 	.word	0x20001ff4
 8001754:	43480000 	.word	0x43480000
 8001758:	200021b0 	.word	0x200021b0
 800175c:	42f00000 	.word	0x42f00000
 8001760:	080011ed 	.word	0x080011ed
 8001764:	080010a1 	.word	0x080010a1
 8001768:	20002240 	.word	0x20002240
 800176c:	0800c788 	.word	0x0800c788
 8001770:	200021ac 	.word	0x200021ac
 8001774:	20001ff0 	.word	0x20001ff0
 8001778:	200022d4 	.word	0x200022d4

0800177c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM1) {
 800177c:	6802      	ldr	r2, [r0, #0]
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001780:	429a      	cmp	r2, r3
 8001782:	d101      	bne.n	8001788 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001784:	f001 bb96 	b.w	8002eb4 <HAL_IncTick>
}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40012c00 	.word	0x40012c00

08001790 <Error_Handler>:
 8001790:	b672      	cpsid	i
  while (1)
 8001792:	e7fe      	b.n	8001792 <Error_Handler+0x2>

08001794 <LPFilterInit>:
void LPFilterInit(LPFilter *filter)
{
	/* Clear buffer */
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		filter->buffer[n] = 0;
 8001794:	2300      	movs	r3, #0
	}

	/* Reset index */
	filter->bufferIndex = 0;
 8001796:	2200      	movs	r2, #0
		filter->buffer[n] = 0;
 8001798:	6003      	str	r3, [r0, #0]
 800179a:	6043      	str	r3, [r0, #4]
 800179c:	6083      	str	r3, [r0, #8]
 800179e:	60c3      	str	r3, [r0, #12]
	filter->bufferIndex = 0;
 80017a0:	7402      	strb	r2, [r0, #16]

	/* Reset Output value */
	filter->FilteredValue = 0;
 80017a2:	6143      	str	r3, [r0, #20]
}
 80017a4:	4770      	bx	lr
	...

080017a8 <LPFilterUpdate>:

float LPFilterUpdate(LPFilter *filter, float InValue)
{
 80017a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Store last input value into the buffer */
	filter->buffer[filter->bufferIndex] = InValue;
 80017ac:	7c03      	ldrb	r3, [r0, #16]
	{
		filter->bufferIndex = 0;
	}

	/* Compute output */
	filter->FilteredValue = 0;
 80017ae:	2500      	movs	r5, #0
	filter->buffer[filter->bufferIndex] = InValue;
 80017b0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	filter->bufferIndex++;
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2db      	uxtb	r3, r3
	if (filter->bufferIndex>=FILTER_LENGTH)
 80017b8:	2b03      	cmp	r3, #3
		filter->bufferIndex = 0;
 80017ba:	bf88      	it	hi
 80017bc:	2300      	movhi	r3, #0
{
 80017be:	4604      	mov	r4, r0

	uint8_t ConvolvIndex = filter->bufferIndex;
 80017c0:	2704      	movs	r7, #4
		filter->bufferIndex = 0;
 80017c2:	7403      	strb	r3, [r0, #16]
	uint8_t ConvolvIndex = filter->bufferIndex;
 80017c4:	7c06      	ldrb	r6, [r0, #16]
 80017c6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80017fc <LPFilterUpdate+0x54>
	filter->FilteredValue = 0;
 80017ca:	6145      	str	r5, [r0, #20]

	for (int8_t n = 0; n<FILTER_LENGTH; n++)
	{
		/* Shift the index (formula require [n-k] value ) */
		if (ConvolvIndex>0)
 80017cc:	b19e      	cbz	r6, 80017f6 <LPFilterUpdate+0x4e>
		{
			ConvolvIndex--;
 80017ce:	3e01      	subs	r6, #1
 80017d0:	b2f6      	uxtb	r6, r6
		else
		{
			ConvolvIndex = FILTER_LENGTH - 1;
		}
		/* Do the Convolution */
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 80017d2:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 80017d6:	f858 0b04 	ldr.w	r0, [r8], #4
 80017da:	f7ff fa63 	bl	8000ca4 <__aeabi_fmul>
 80017de:	4601      	mov	r1, r0
 80017e0:	4628      	mov	r0, r5
 80017e2:	f7ff f957 	bl	8000a94 <__addsf3>
 80017e6:	3f01      	subs	r7, #1
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 80017e8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
		filter->FilteredValue += LPFILTER_COEFFICIENTS[n] * filter->buffer[ConvolvIndex];
 80017ec:	4605      	mov	r5, r0
	for (int8_t n = 0; n<FILTER_LENGTH; n++)
 80017ee:	d1ed      	bne.n	80017cc <LPFilterUpdate+0x24>
 80017f0:	6160      	str	r0, [r4, #20]
	}

	/* Return the actual filtered value output */

	return filter->FilteredValue;
}
 80017f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ConvolvIndex = FILTER_LENGTH - 1;
 80017f6:	2603      	movs	r6, #3
 80017f8:	e7eb      	b.n	80017d2 <LPFilterUpdate+0x2a>
 80017fa:	bf00      	nop
 80017fc:	0800c954 	.word	0x0800c954

08001800 <PIDInit>:
{
	/* Assign the value to the struct variable */
	PID->SampleTime = SampleTime;

	PID->MaxOutputVal = MaxOuputValue;
	PID->MinOutputVal = MinOutputVal;
 8001800:	6283      	str	r3, [r0, #40]	; 0x28

	PID->Kp = Kp;
 8001802:	9b00      	ldr	r3, [sp, #0]
	PID->SampleTime = SampleTime;
 8001804:	6341      	str	r1, [r0, #52]	; 0x34
	PID->Kp = Kp;
 8001806:	6143      	str	r3, [r0, #20]
	PID->Ki = Ki;
 8001808:	9b01      	ldr	r3, [sp, #4]
	PID->MaxOutputVal = MaxOuputValue;
 800180a:	6242      	str	r2, [r0, #36]	; 0x24
	PID->Ki = Ki;
 800180c:	6183      	str	r3, [r0, #24]
	PID->Kd = Kd;
 800180e:	9b02      	ldr	r3, [sp, #8]
 8001810:	61c3      	str	r3, [r0, #28]

	PID->PID_I_Max = PID_I_Max;
 8001812:	9b03      	ldr	r3, [sp, #12]
 8001814:	62c3      	str	r3, [r0, #44]	; 0x2c
	PID->PID_I_Min = PID_I_Min;
 8001816:	9b04      	ldr	r3, [sp, #16]
 8001818:	6303      	str	r3, [r0, #48]	; 0x30

	PID->PID_D_Tau = PID_D_Tau;
 800181a:	9b05      	ldr	r3, [sp, #20]
 800181c:	6203      	str	r3, [r0, #32]

	/* Reset the memory */
	PID->Setpoint = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	6003      	str	r3, [r0, #0]
	PID->OutputVal = 0;
 8001822:	6043      	str	r3, [r0, #4]
	PID->lastError = 0;
 8001824:	6383      	str	r3, [r0, #56]	; 0x38
	PID->lastInValue = 0;
 8001826:	63c3      	str	r3, [r0, #60]	; 0x3c
	PID->PID_Error = 0;
 8001828:	6403      	str	r3, [r0, #64]	; 0x40
}
 800182a:	4770      	bx	lr

0800182c <PIDNewSetpoint>:

void PIDNewSetpoint(PID *PID, float Setpoint)
{
	PID->Setpoint = Setpoint;
 800182c:	6001      	str	r1, [r0, #0]
}
 800182e:	4770      	bx	lr

08001830 <PIDUpdate>:
	PID->lastError = 0;
	PID->lastInValue = 0;
}

uint32_t PIDUpdate(PID *PID, float ActValue)
{
 8001830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001834:	4604      	mov	r4, r0
	/* Calculation of the actual error */
	PID->PID_Error = PID->Setpoint - ActValue;
 8001836:	6800      	ldr	r0, [r0, #0]
{
 8001838:	460e      	mov	r6, r1
	PID->PID_Error = PID->Setpoint - ActValue;
 800183a:	f7ff f929 	bl	8000a90 <__aeabi_fsub>

	/* Calculate the PROPORTIONAL part */
	PID->PID_P = PID->Kp * PID->PID_Error;
 800183e:	6961      	ldr	r1, [r4, #20]
	PID->PID_Error = PID->Setpoint - ActValue;
 8001840:	6420      	str	r0, [r4, #64]	; 0x40
 8001842:	4605      	mov	r5, r0
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001844:	f7ff fa2e 	bl	8000ca4 <__aeabi_fmul>

	/* Calculate the INTEGRATIVE part */
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001848:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 800184c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
	PID->PID_P = PID->Kp * PID->PID_Error;
 8001850:	60a0      	str	r0, [r4, #8]
 8001852:	4680      	mov	r8, r0
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001854:	69a0      	ldr	r0, [r4, #24]
 8001856:	f7ff fa25 	bl	8000ca4 <__aeabi_fmul>
 800185a:	4649      	mov	r1, r9
 800185c:	f7ff fa22 	bl	8000ca4 <__aeabi_fmul>
 8001860:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001862:	4607      	mov	r7, r0
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff f913 	bl	8000a90 <__aeabi_fsub>
 800186a:	4601      	mov	r1, r0
 800186c:	4638      	mov	r0, r7
 800186e:	f7ff fa19 	bl	8000ca4 <__aeabi_fmul>
 8001872:	68e1      	ldr	r1, [r4, #12]
 8001874:	f7ff f90e 	bl	8000a94 <__addsf3>

	//Anti-wind-up via integrator clamping
	if (PID->PID_I>PID->PID_I_Max)
 8001878:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 800187c:	60e0      	str	r0, [r4, #12]
	if (PID->PID_I>PID->PID_I_Max)
 800187e:	4651      	mov	r1, sl
	PID->PID_I = PID->PID_I + (0.5f * PID->Ki * PID->SampleTime * (PID->PID_Error - PID->lastError));
 8001880:	4607      	mov	r7, r0
	if (PID->PID_I>PID->PID_I_Max)
 8001882:	f7ff fbcb 	bl	800101c <__aeabi_fcmpgt>
 8001886:	b110      	cbz	r0, 800188e <PIDUpdate+0x5e>
	{
		PID->PID_I = PID->PID_I_Max;
	}
	else if (PID->PID_I<PID->PID_I_Min)
	{
		PID->PID_I = PID->PID_I_Min;
 8001888:	f8c4 a00c 	str.w	sl, [r4, #12]
 800188c:	e007      	b.n	800189e <PIDUpdate+0x6e>
	else if (PID->PID_I<PID->PID_I_Min)
 800188e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8001892:	4638      	mov	r0, r7
 8001894:	4651      	mov	r1, sl
 8001896:	f7ff fba3 	bl	8000fe0 <__aeabi_fcmplt>
 800189a:	2800      	cmp	r0, #0
 800189c:	d1f4      	bne.n	8001888 <PIDUpdate+0x58>
	}

	/* Calculate the DERIVATIVE part (band limited and measurement dependent) */
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 800189e:	6a21      	ldr	r1, [r4, #32]
 80018a0:	4608      	mov	r0, r1
 80018a2:	f7ff f8f7 	bl	8000a94 <__addsf3>
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018a6:	69e1      	ldr	r1, [r4, #28]
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 80018a8:	4607      	mov	r7, r0
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018aa:	4608      	mov	r0, r1
 80018ac:	f7ff f8f2 	bl	8000a94 <__addsf3>
 80018b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80018b2:	4682      	mov	sl, r0
 80018b4:	4630      	mov	r0, r6
 80018b6:	f7ff f8eb 	bl	8000a90 <__aeabi_fsub>
 80018ba:	4601      	mov	r1, r0
 80018bc:	4650      	mov	r0, sl
 80018be:	f7ff f9f1 	bl	8000ca4 <__aeabi_fmul>
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 80018c2:	4649      	mov	r1, r9
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018c4:	4682      	mov	sl, r0
				+ (2.0f * PID->PID_D_Tau - PID->SampleTime) * PID->PID_D)
 80018c6:	4638      	mov	r0, r7
 80018c8:	f7ff f8e2 	bl	8000a90 <__aeabi_fsub>
 80018cc:	6921      	ldr	r1, [r4, #16]
 80018ce:	f7ff f9e9 	bl	8000ca4 <__aeabi_fmul>
 80018d2:	4601      	mov	r1, r0
 80018d4:	4650      	mov	r0, sl
 80018d6:	f7ff f8dd 	bl	8000a94 <__addsf3>
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 80018da:	4639      	mov	r1, r7
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018dc:	f100 4a00 	add.w	sl, r0, #2147483648	; 0x80000000
				/ (2.0f * PID->PID_D_Tau + PID->SampleTime);
 80018e0:	4648      	mov	r0, r9
 80018e2:	f7ff f8d7 	bl	8000a94 <__addsf3>
 80018e6:	4601      	mov	r1, r0
 80018e8:	4650      	mov	r0, sl
 80018ea:	f7ff fa8f 	bl	8000e0c <__aeabi_fdiv>
 80018ee:	4607      	mov	r7, r0

	/* Calculate the total PID value and check the upper/lower output limits*/
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018f0:	68e1      	ldr	r1, [r4, #12]
	PID->PID_D = -(2.0f * PID->Kd * (ActValue - PID->lastInValue)
 80018f2:	6120      	str	r0, [r4, #16]
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 80018f4:	4640      	mov	r0, r8
 80018f6:	f7ff f8cd 	bl	8000a94 <__addsf3>
 80018fa:	4639      	mov	r1, r7
 80018fc:	f7ff f8ca 	bl	8000a94 <__addsf3>

	if (PID->OutputVal>PID->MaxOutputVal)
 8001900:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001904:	6060      	str	r0, [r4, #4]
	if (PID->OutputVal>PID->MaxOutputVal)
 8001906:	4641      	mov	r1, r8
	PID->OutputVal = PID->PID_P + PID->PID_I + PID->PID_D;
 8001908:	4607      	mov	r7, r0
	if (PID->OutputVal>PID->MaxOutputVal)
 800190a:	f7ff fb87 	bl	800101c <__aeabi_fcmpgt>
 800190e:	b110      	cbz	r0, 8001916 <PIDUpdate+0xe6>
	{
		PID->OutputVal = PID->MaxOutputVal;
	}
	else if (PID->OutputVal<PID->MinOutputVal)
	{
		PID->OutputVal = PID->MinOutputVal;
 8001910:	f8c4 8004 	str.w	r8, [r4, #4]
 8001914:	e007      	b.n	8001926 <PIDUpdate+0xf6>
	else if (PID->OutputVal<PID->MinOutputVal)
 8001916:	f8d4 8028 	ldr.w	r8, [r4, #40]	; 0x28
 800191a:	4638      	mov	r0, r7
 800191c:	4641      	mov	r1, r8
 800191e:	f7ff fb5f 	bl	8000fe0 <__aeabi_fcmplt>
 8001922:	2800      	cmp	r0, #0
 8001924:	d1f4      	bne.n	8001910 <PIDUpdate+0xe0>
	/* Update the last values*/
	PID->lastError = PID->PID_Error;
	PID->lastInValue = ActValue;

	/* Return the actual PID output value */
	return (uint32_t)PID->OutputVal;
 8001926:	6860      	ldr	r0, [r4, #4]
	PID->lastError = PID->PID_Error;
 8001928:	63a5      	str	r5, [r4, #56]	; 0x38
	PID->lastInValue = ActValue;
 800192a:	63e6      	str	r6, [r4, #60]	; 0x3c
	return (uint32_t)PID->OutputVal;
 800192c:	f7ff fb80 	bl	8001030 <__aeabi_f2uiz>
}
 8001930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001934 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <HAL_MspInit+0x48>)
{
 8001936:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800193a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	619a      	str	r2, [r3, #24]
 8001942:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001944:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001948:	f002 0201 	and.w	r2, r2, #1
 800194c:	9200      	str	r2, [sp, #0]
 800194e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001950:	69da      	ldr	r2, [r3, #28]
 8001952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001956:	61da      	str	r2, [r3, #28]
 8001958:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800195a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001964:	f001 fadc 	bl	8002f20 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_MspInit+0x4c>)
 800196a:	6853      	ldr	r3, [r2, #4]
 800196c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001974:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	b003      	add	sp, #12
 8001978:	f85d fb04 	ldr.w	pc, [sp], #4
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001986:	2610      	movs	r6, #16
{
 8001988:	4605      	mov	r5, r0
 800198a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	4632      	mov	r2, r6
 800198e:	2100      	movs	r1, #0
 8001990:	eb0d 0006 	add.w	r0, sp, r6
 8001994:	f008 f85a 	bl	8009a4c <memset>
  if(hi2c->Instance==I2C1)
 8001998:	682b      	ldr	r3, [r5, #0]
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <HAL_I2C_MspInit+0x104>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d137      	bne.n	8001a10 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a0:	4c3a      	ldr	r4, [pc, #232]	; (8001a8c <HAL_I2C_MspInit+0x108>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a2:	f44f 7140 	mov.w	r1, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	4839      	ldr	r0, [pc, #228]	; (8001a90 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	f043 0308 	orr.w	r3, r3, #8
 80019ae:	61a3      	str	r3, [r4, #24]
 80019b0:	69a3      	ldr	r3, [r4, #24]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ba:	2312      	movs	r3, #18
 80019bc:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	eb0d 0106 	add.w	r1, sp, r6
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f001 fbf4 	bl	80031b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019cc:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <HAL_I2C_MspInit+0x110>)

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019ce:	2105      	movs	r1, #5
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019d0:	6853      	ldr	r3, [r2, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019d2:	201f      	movs	r0, #31
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80019d4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019de:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019e0:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e6:	61e3      	str	r3, [r4, #28]
 80019e8:	69e3      	ldr	r3, [r4, #28]
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80019f2:	f001 fa95 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019f6:	201f      	movs	r0, #31
 80019f8:	f001 fac4 	bl	8002f84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80019fc:	2020      	movs	r0, #32
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	f001 fa8d 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a06:	2020      	movs	r0, #32

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a08:	f001 fabc 	bl	8002f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a0c:	b008      	add	sp, #32
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
  else if(hi2c->Instance==I2C2)
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <HAL_I2C_MspInit+0x114>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d1fa      	bne.n	8001a0c <HAL_I2C_MspInit+0x88>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	4c1d      	ldr	r4, [pc, #116]	; (8001a8c <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1e:	481c      	ldr	r0, [pc, #112]	; (8001a90 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	61a3      	str	r3, [r4, #24]
 8001a26:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	9302      	str	r3, [sp, #8]
 8001a30:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f001 fbba 	bl	80031b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a40:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a48:	61e3      	str	r3, [r4, #28]
 8001a4a:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001a4c:	4c13      	ldr	r4, [pc, #76]	; (8001a9c <HAL_I2C_MspInit+0x118>)
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	9b03      	ldr	r3, [sp, #12]
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_I2C_MspInit+0x11c>)
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a58:	4620      	mov	r0, r4
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a5a:	e9c4 3600 	strd	r3, r6, [r4]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a64:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a68:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001a6c:	f001 fa98 	bl	8002fa0 <HAL_DMA_Init>
 8001a70:	b108      	cbz	r0, 8001a76 <HAL_I2C_MspInit+0xf2>
      Error_Handler();
 8001a72:	f7ff fe8d 	bl	8001790 <Error_Handler>
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a76:	2021      	movs	r0, #33	; 0x21
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2105      	movs	r1, #5
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001a7c:	636c      	str	r4, [r5, #52]	; 0x34
 8001a7e:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001a80:	f001 fa4e 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a84:	2021      	movs	r0, #33	; 0x21
 8001a86:	e7bf      	b.n	8001a08 <HAL_I2C_MspInit+0x84>
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010c00 	.word	0x40010c00
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40005800 	.word	0x40005800
 8001a9c:	200021b4 	.word	0x200021b4
 8001aa0:	40020044 	.word	0x40020044

08001aa4 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	2210      	movs	r2, #16
{
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	eb0d 0002 	add.w	r0, sp, r2
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	f007 ffcb 	bl	8009a4c <memset>
  if(hspi->Instance==SPI1)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	4a32      	ldr	r2, [pc, #200]	; (8001b84 <HAL_SPI_MspInit+0xe0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d12f      	bne.n	8001b1e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001abe:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_SPI_MspInit+0xe4>)
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2120      	movs	r1, #32
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	4831      	ldr	r0, [pc, #196]	; (8001b8c <HAL_SPI_MspInit+0xe8>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001aca:	619a      	str	r2, [r3, #24]
 8001acc:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ad4:	9200      	str	r2, [sp, #0]
 8001ad6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad8:	699a      	ldr	r2, [r3, #24]
 8001ada:	f042 0204 	orr.w	r2, r2, #4
 8001ade:	619a      	str	r2, [r3, #24]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f001 fb5d 	bl	80031b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	4823      	ldr	r0, [pc, #140]	; (8001b8c <HAL_SPI_MspInit+0xe8>)
 8001afe:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f001 fb55 	bl	80031b4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001b0a:	2023      	movs	r0, #35	; 0x23
 8001b0c:	4622      	mov	r2, r4
 8001b0e:	2105      	movs	r1, #5
 8001b10:	f001 fa06 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b14:	2023      	movs	r0, #35	; 0x23
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b16:	f001 fa35 	bl	8002f84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b1a:	b008      	add	sp, #32
 8001b1c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001b1e:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <HAL_SPI_MspInit+0xec>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d1fa      	bne.n	8001b1a <HAL_SPI_MspInit+0x76>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b24:	4b18      	ldr	r3, [pc, #96]	; (8001b88 <HAL_SPI_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	481b      	ldr	r0, [pc, #108]	; (8001b94 <HAL_SPI_MspInit+0xf0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b28:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b30:	61da      	str	r2, [r3, #28]
 8001b32:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b34:	2400      	movs	r4, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b3a:	9202      	str	r2, [sp, #8]
 8001b3c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	699a      	ldr	r2, [r3, #24]
 8001b40:	f042 0208 	orr.w	r2, r2, #8
 8001b44:	619a      	str	r2, [r3, #24]
 8001b46:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	9303      	str	r3, [sp, #12]
 8001b52:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f001 fb29 	bl	80031b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	480b      	ldr	r0, [pc, #44]	; (8001b94 <HAL_SPI_MspInit+0xf0>)
 8001b68:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f001 fb20 	bl	80031b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b74:	2024      	movs	r0, #36	; 0x24
 8001b76:	4622      	mov	r2, r4
 8001b78:	2105      	movs	r1, #5
 8001b7a:	f001 f9d1 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b7e:	2024      	movs	r0, #36	; 0x24
 8001b80:	e7c9      	b.n	8001b16 <HAL_SPI_MspInit+0x72>
 8001b82:	bf00      	nop
 8001b84:	40013000 	.word	0x40013000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010800 	.word	0x40010800
 8001b90:	40003800 	.word	0x40003800
 8001b94:	40010c00 	.word	0x40010c00

08001b98 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001b98:	6803      	ldr	r3, [r0, #0]
{
 8001b9a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba0:	d115      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ba6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001ba8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	61da      	str	r2, [r3, #28]
 8001bb0:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001bb2:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001bba:	2105      	movs	r1, #5
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bbc:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001bbe:	f001 f9af 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bc2:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bc4:	b003      	add	sp, #12
 8001bc6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bca:	f001 b9db 	b.w	8002f84 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM4)
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_TIM_Base_MspInit+0x64>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d110      	bne.n	8001bf6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001bd6:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd8:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001bda:	2105      	movs	r1, #5
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bdc:	f042 0204 	orr.w	r2, r2, #4
 8001be0:	61da      	str	r2, [r3, #28]
 8001be2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001be4:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001bee:	f001 f997 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bf2:	201e      	movs	r0, #30
 8001bf4:	e7e6      	b.n	8001bc4 <HAL_TIM_Base_MspInit+0x2c>
}
 8001bf6:	b003      	add	sp, #12
 8001bf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bfc:	40000800 	.word	0x40000800
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c04:	b510      	push	{r4, lr}
 8001c06:	4604      	mov	r4, r0
 8001c08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	a802      	add	r0, sp, #8
 8001c10:	f007 ff1c 	bl	8009a4c <memset>
  if(htim_encoder->Instance==TIM3)
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_TIM_Encoder_MspInit+0x68>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d125      	bne.n	8001c68 <HAL_TIM_Encoder_MspInit+0x64>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1c:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001c20:	69da      	ldr	r2, [r3, #28]
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	4813      	ldr	r0, [pc, #76]	; (8001c70 <HAL_TIM_Encoder_MspInit+0x6c>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c24:	f042 0202 	orr.w	r2, r2, #2
 8001c28:	61da      	str	r2, [r3, #28]
 8001c2a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	a902      	add	r1, sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c2e:	f002 0202 	and.w	r2, r2, #2
 8001c32:	9200      	str	r2, [sp, #0]
 8001c34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	699a      	ldr	r2, [r3, #24]
 8001c38:	f042 0208 	orr.w	r2, r2, #8
 8001c3c:	619a      	str	r2, [r3, #24]
 8001c3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	2230      	movs	r2, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f001 faaf 	bl	80031b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001c56:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c58:	6853      	ldr	r3, [r2, #4]
 8001c5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001c5e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001c62:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c66:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd10      	pop	{r4, pc}
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40010c00 	.word	0x40010c00
 8001c74:	40010000 	.word	0x40010000

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b510      	push	{r4, lr}
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7e:	2210      	movs	r2, #16
 8001c80:	2100      	movs	r1, #0
 8001c82:	a802      	add	r0, sp, #8
 8001c84:	f007 fee2 	bl	8009a4c <memset>
  if(htim->Instance==TIM2)
 8001c88:	6823      	ldr	r3, [r4, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c8e:	d112      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c94:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c96:	4809      	ldr	r0, [pc, #36]	; (8001cbc <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	f042 0204 	orr.w	r2, r2, #4
 8001c9c:	619a      	str	r2, [r3, #24]
 8001c9e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = HEATER_PWM_Pin;
 8001caa:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(HEATER_PWM_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f001 fa7f 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001cb6:	b006      	add	sp, #24
 8001cb8:	bd10      	pop	{r4, pc}
 8001cba:	bf00      	nop
 8001cbc:	40010800 	.word	0x40010800

08001cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4604      	mov	r4, r0
 8001cc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc6:	2210      	movs	r2, #16
 8001cc8:	2100      	movs	r1, #0
 8001cca:	a802      	add	r0, sp, #8
 8001ccc:	f007 febe 	bl	8009a4c <memset>
  if(huart->Instance==USART2)
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_UART_MspInit+0x6c>)
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d126      	bne.n	8001d26 <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cd8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001cdc:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ce4:	61da      	str	r2, [r3, #28]
 8001ce6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cea:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001cee:	9200      	str	r2, [sp, #0]
 8001cf0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	f042 0204 	orr.w	r2, r2, #4
 8001cf8:	619a      	str	r2, [r3, #24]
 8001cfa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f001 fa50 	bl	80031b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2108      	movs	r1, #8
 8001d16:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	4805      	ldr	r0, [pc, #20]	; (8001d30 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1a:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f001 fa47 	bl	80031b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d26:	b006      	add	sp, #24
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40010800 	.word	0x40010800

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b510      	push	{r4, lr}
 8001d36:	4601      	mov	r1, r0
 8001d38:	b088      	sub	sp, #32
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2019      	movs	r0, #25
 8001d3e:	f001 f8ef 	bl	8002f20 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d42:	2019      	movs	r0, #25
 8001d44:	f001 f91e 	bl	8002f84 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_InitTick+0x68>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d4a:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4c:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d4e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d54:	619a      	str	r2, [r3, #24]
 8001d56:	699b      	ldr	r3, [r3, #24]
  uwTimclock = HAL_RCC_GetPCLK2Freq();
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d58:	4c11      	ldr	r4, [pc, #68]	; (8001da0 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	9302      	str	r3, [sp, #8]
 8001d60:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d62:	f003 fc37 	bl	80055d4 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d66:	f003 fc25 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <HAL_InitTick+0x70>)
 8001d6c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d6e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001d72:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_InitTick+0x74>)
 8001d76:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001d7a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d7c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d7e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d80:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001d82:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d86:	f004 f9a5 	bl	80060d4 <HAL_TIM_Base_Init>
 8001d8a:	b920      	cbnz	r0, 8001d96 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d8c:	4620      	mov	r0, r4
 8001d8e:	f004 f83d 	bl	8005e0c <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001d92:	b008      	add	sp, #32
 8001d94:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001d96:	2001      	movs	r0, #1
 8001d98:	e7fb      	b.n	8001d92 <HAL_InitTick+0x5e>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	200022d8 	.word	0x200022d8
 8001da4:	40012c00 	.word	0x40012c00
 8001da8:	000f4240 	.word	0x000f4240

08001dac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <NMI_Handler>

08001dae <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler>

08001db0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler>

08001db2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db2:	e7fe      	b.n	8001db2 <BusFault_Handler>

08001db4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <UsageFault_Handler>

08001db6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db6:	4770      	bx	lr

08001db8 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001db8:	4801      	ldr	r0, [pc, #4]	; (8001dc0 <DMA1_Channel4_IRQHandler+0x8>)
 8001dba:	f001 b965 	b.w	8003088 <HAL_DMA_IRQHandler>
 8001dbe:	bf00      	nop
 8001dc0:	200021b4 	.word	0x200021b4

08001dc4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001dc4:	4801      	ldr	r0, [pc, #4]	; (8001dcc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8001dc6:	f002 bc21 	b.w	800460c <HAL_PCD_IRQHandler>
 8001dca:	bf00      	nop
 8001dcc:	20003000 	.word	0x20003000

08001dd0 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dd0:	4801      	ldr	r0, [pc, #4]	; (8001dd8 <TIM1_UP_IRQHandler+0x8>)
 8001dd2:	f004 b8a5 	b.w	8005f20 <HAL_TIM_IRQHandler>
 8001dd6:	bf00      	nop
 8001dd8:	200022d8 	.word	0x200022d8

08001ddc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ddc:	4801      	ldr	r0, [pc, #4]	; (8001de4 <TIM2_IRQHandler+0x8>)
 8001dde:	f004 b89f 	b.w	8005f20 <HAL_TIM_IRQHandler>
 8001de2:	bf00      	nop
 8001de4:	20002244 	.word	0x20002244

08001de8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001de8:	4801      	ldr	r0, [pc, #4]	; (8001df0 <TIM4_IRQHandler+0x8>)
 8001dea:	f004 b899 	b.w	8005f20 <HAL_TIM_IRQHandler>
 8001dee:	bf00      	nop
 8001df0:	200021f8 	.word	0x200021f8

08001df4 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001df4:	4801      	ldr	r0, [pc, #4]	; (8001dfc <I2C1_EV_IRQHandler+0x8>)
 8001df6:	f001 be75 	b.w	8003ae4 <HAL_I2C_EV_IRQHandler>
 8001dfa:	bf00      	nop
 8001dfc:	2000208c 	.word	0x2000208c

08001e00 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e00:	4801      	ldr	r0, [pc, #4]	; (8001e08 <I2C1_ER_IRQHandler+0x8>)
 8001e02:	f002 babf 	b.w	8004384 <HAL_I2C_ER_IRQHandler>
 8001e06:	bf00      	nop
 8001e08:	2000208c 	.word	0x2000208c

08001e0c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e0c:	4801      	ldr	r0, [pc, #4]	; (8001e14 <I2C2_EV_IRQHandler+0x8>)
 8001e0e:	f001 be69 	b.w	8003ae4 <HAL_I2C_EV_IRQHandler>
 8001e12:	bf00      	nop
 8001e14:	20002038 	.word	0x20002038

08001e18 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e18:	4801      	ldr	r0, [pc, #4]	; (8001e20 <SPI1_IRQHandler+0x8>)
 8001e1a:	f003 bedf 	b.w	8005bdc <HAL_SPI_IRQHandler>
 8001e1e:	bf00      	nop
 8001e20:	20001f98 	.word	0x20001f98

08001e24 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e24:	4801      	ldr	r0, [pc, #4]	; (8001e2c <SPI2_IRQHandler+0x8>)
 8001e26:	f003 bed9 	b.w	8005bdc <HAL_SPI_IRQHandler>
 8001e2a:	bf00      	nop
 8001e2c:	20001f28 	.word	0x20001f28

08001e30 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001e30:	2001      	movs	r0, #1
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e36:	f007 fdd1 	bl	80099dc <__errno>
 8001e3a:	2316      	movs	r3, #22
 8001e3c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e42:	bd08      	pop	{r3, pc}

08001e44 <_exit>:

void _exit (int status)
{
 8001e44:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001e46:	f007 fdc9 	bl	80099dc <__errno>
 8001e4a:	2316      	movs	r3, #22
 8001e4c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001e4e:	e7fe      	b.n	8001e4e <_exit+0xa>

08001e50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	460e      	mov	r6, r1
 8001e54:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	2500      	movs	r5, #0
 8001e58:	42a5      	cmp	r5, r4
 8001e5a:	db01      	blt.n	8001e60 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001e60:	f3af 8000 	nop.w
 8001e64:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	3501      	adds	r5, #1
 8001e68:	e7f6      	b.n	8001e58 <_read+0x8>

08001e6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6a:	b570      	push	{r4, r5, r6, lr}
 8001e6c:	460e      	mov	r6, r1
 8001e6e:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e70:	2500      	movs	r5, #0
 8001e72:	42a5      	cmp	r5, r4
 8001e74:	db01      	blt.n	8001e7a <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001e76:	4620      	mov	r0, r4
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001e7a:	5d70      	ldrb	r0, [r6, r5]
 8001e7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	3501      	adds	r5, #1
 8001e82:	e7f6      	b.n	8001e72 <_write+0x8>

08001e84 <_close>:

int _close(int file)
{
	return -1;
}
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001e8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001e8e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001e90:	604b      	str	r3, [r1, #4]
}
 8001e92:	4770      	bx	lr

08001e94 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001e94:	2001      	movs	r0, #1
 8001e96:	4770      	bx	lr

08001e98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001e98:	2000      	movs	r0, #0
 8001e9a:	4770      	bx	lr

08001e9c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <_sbrk+0x30>)
{
 8001e9e:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001ea0:	6819      	ldr	r1, [r3, #0]
{
 8001ea2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001ea4:	b909      	cbnz	r1, 8001eaa <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <_sbrk+0x34>)
 8001ea8:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	4909      	ldr	r1, [pc, #36]	; (8001ed4 <_sbrk+0x38>)
 8001eae:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <_sbrk+0x3c>)
 8001eb0:	4402      	add	r2, r0
 8001eb2:	1b09      	subs	r1, r1, r4
 8001eb4:	428a      	cmp	r2, r1
 8001eb6:	d906      	bls.n	8001ec6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001eb8:	f007 fd90 	bl	80099dc <__errno>
 8001ebc:	230c      	movs	r3, #12
 8001ebe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001ec4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001ec6:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001ec8:	e7fc      	b.n	8001ec4 <_sbrk+0x28>
 8001eca:	bf00      	nop
 8001ecc:	20000a08 	.word	0x20000a08
 8001ed0:	20003300 	.word	0x20003300
 8001ed4:	20005000 	.word	0x20005000
 8001ed8:	00000400 	.word	0x00000400

08001edc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	4770      	bx	lr
	...

08001ee0 <u8x8_byte_stm32_hw_i2c>:

extern SPI_HandleTypeDef hspi2;
extern I2C_HandleTypeDef hi2c2;

uint8_t u8x8_byte_stm32_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8001ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ee2:	3914      	subs	r1, #20
 8001ee4:	290c      	cmp	r1, #12
 8001ee6:	d82d      	bhi.n	8001f44 <u8x8_byte_stm32_hw_i2c+0x64>
 8001ee8:	e8df f001 	tbb	[pc, r1]
 8001eec:	072c2c11 	.word	0x072c2c11
 8001ef0:	2c2c1f1b 	.word	0x2c2c1f1b
 8001ef4:	2c2c2c2c 	.word	0x2c2c2c2c
 8001ef8:	11          	.byte	0x11
 8001ef9:	00          	.byte	0x00
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
		while( arg_int > 0 )
		{
			buffer[buf_idx++] = *data;
			data++;
 8001efa:	2400      	movs	r4, #0
 8001efc:	4812      	ldr	r0, [pc, #72]	; (8001f48 <u8x8_byte_stm32_hw_i2c+0x68>)
			buffer[buf_idx++] = *data;
 8001efe:	4d13      	ldr	r5, [pc, #76]	; (8001f4c <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001f00:	7801      	ldrb	r1, [r0, #0]
 8001f02:	440a      	add	r2, r1
 8001f04:	b2d2      	uxtb	r2, r2
		while( arg_int > 0 )
 8001f06:	4291      	cmp	r1, r2
 8001f08:	d104      	bne.n	8001f14 <u8x8_byte_stm32_hw_i2c+0x34>
 8001f0a:	b104      	cbz	r4, 8001f0e <u8x8_byte_stm32_hw_i2c+0x2e>
 8001f0c:	7001      	strb	r1, [r0, #0]
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
		break;
	default:
		return 0;
	}
	return 1;
 8001f0e:	2001      	movs	r0, #1
}
 8001f10:	b002      	add	sp, #8
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
			buffer[buf_idx++] = *data;
 8001f14:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001f18:	1c4c      	adds	r4, r1, #1
 8001f1a:	546e      	strb	r6, [r5, r1]
 8001f1c:	b2e1      	uxtb	r1, r4
			data++;
 8001f1e:	2401      	movs	r4, #1
 8001f20:	e7f1      	b.n	8001f06 <u8x8_byte_stm32_hw_i2c+0x26>
		buf_idx = 0;
 8001f22:	2200      	movs	r2, #0
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <u8x8_byte_stm32_hw_i2c+0x68>)
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e7f1      	b.n	8001f0e <u8x8_byte_stm32_hw_i2c+0x2e>
		if(HAL_I2C_Master_Transmit(&hi2c2, (DEVICE_ADDRESS << 1), buffer, buf_idx, TX_TIMEOUT) != HAL_OK) return 0;
 8001f2a:	2364      	movs	r3, #100	; 0x64
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <u8x8_byte_stm32_hw_i2c+0x68>)
 8001f30:	2178      	movs	r1, #120	; 0x78
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <u8x8_byte_stm32_hw_i2c+0x6c>)
 8001f36:	4806      	ldr	r0, [pc, #24]	; (8001f50 <u8x8_byte_stm32_hw_i2c+0x70>)
 8001f38:	f001 fb98 	bl	800366c <HAL_I2C_Master_Transmit>
 8001f3c:	fab0 f080 	clz	r0, r0
 8001f40:	0940      	lsrs	r0, r0, #5
 8001f42:	e7e5      	b.n	8001f10 <u8x8_byte_stm32_hw_i2c+0x30>
		return 0;
 8001f44:	2000      	movs	r0, #0
 8001f46:	e7e3      	b.n	8001f10 <u8x8_byte_stm32_hw_i2c+0x30>
 8001f48:	20000a0c 	.word	0x20000a0c
 8001f4c:	20000a0d 	.word	0x20000a0d
 8001f50:	20002038 	.word	0x20002038

08001f54 <psoc_gpio_and_delay_cb>:

uint8_t psoc_gpio_and_delay_cb(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
 8001f54:	292d      	cmp	r1, #45	; 0x2d
{
 8001f56:	4603      	mov	r3, r0
 8001f58:	b507      	push	{r0, r1, r2, lr}
 8001f5a:	4610      	mov	r0, r2
  switch(msg)
 8001f5c:	d808      	bhi.n	8001f70 <psoc_gpio_and_delay_cb+0x1c>
 8001f5e:	2927      	cmp	r1, #39	; 0x27
 8001f60:	d91a      	bls.n	8001f98 <psoc_gpio_and_delay_cb+0x44>
 8001f62:	3929      	subs	r1, #41	; 0x29
 8001f64:	2903      	cmp	r1, #3
 8001f66:	d805      	bhi.n	8001f74 <psoc_gpio_and_delay_cb+0x20>
 8001f68:	e8df f001 	tbb	[pc, r1]
 8001f6c:	08040413 	.word	0x08040413
 8001f70:	294c      	cmp	r1, #76	; 0x4c
 8001f72:	d111      	bne.n	8001f98 <psoc_gpio_and_delay_cb+0x44>
    default:
      u8x8_SetGPIOResult(u8x8, 1);
      break;
  }
  return 1;
}
 8001f74:	2001      	movs	r0, #1
 8001f76:	b003      	add	sp, #12
 8001f78:	f85d fb04 	ldr.w	pc, [sp], #4
		for (i = 1; i <= arg_int*10; i++);
 8001f7c:	220a      	movs	r2, #10
 8001f7e:	2301      	movs	r3, #1
 8001f80:	4350      	muls	r0, r2
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d3f4      	bcc.n	8001f74 <psoc_gpio_and_delay_cb+0x20>
 8001f8a:	9b01      	ldr	r3, [sp, #4]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	e7f8      	b.n	8001f84 <psoc_gpio_and_delay_cb+0x30>
      HAL_Delay(arg_int);
 8001f92:	f000 ffa1 	bl	8002ed8 <HAL_Delay>
      break;
 8001f96:	e7ed      	b.n	8001f74 <psoc_gpio_and_delay_cb+0x20>
      u8x8_SetGPIOResult(u8x8, 1);
 8001f98:	2201      	movs	r2, #1
 8001f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      break;
 8001f9e:	e7e9      	b.n	8001f74 <psoc_gpio_and_delay_cb+0x20>

08001fa0 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001fa4:	18cf      	adds	r7, r1, r3
 8001fa6:	1c53      	adds	r3, r2, #1
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	b2ff      	uxtb	r7, r7
  uint8_t color = u8g2->draw_color;
 8001fac:	f890 9086 	ldrb.w	r9, [r0, #134]	; 0x86
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	463b      	mov	r3, r7
{
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	460c      	mov	r4, r1
 8001fb8:	4690      	mov	r8, r2
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001fba:	f000 fc01 	bl	80027c0 <u8g2_IsIntersection>
 8001fbe:	b150      	cbz	r0, 8001fd6 <u8g2_DrawHXBM+0x36>
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001fc0:	fab9 fa89 	clz	sl, r9
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001fc4:	2601      	movs	r6, #1
  while(len > 0) {
    if ( *b & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001fc6:	f04f 0b00 	mov.w	fp, #0
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001fca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  while(len > 0) {
 8001fce:	42a7      	cmp	r7, r4
 8001fd0:	d104      	bne.n	8001fdc <u8g2_DrawHXBM+0x3c>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
 8001fd2:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( *b & mask ) {
 8001fdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	421e      	tst	r6, r3
 8001fe2:	d017      	beq.n	8002014 <u8g2_DrawHXBM+0x74>
      u8g2->draw_color = color;
 8001fe4:	f885 9086 	strb.w	r9, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001fe8:	f8cd b000 	str.w	fp, [sp]
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001fec:	2301      	movs	r3, #1
 8001fee:	4642      	mov	r2, r8
 8001ff0:	4621      	mov	r1, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	f000 fb6d 	bl	80026d2 <u8g2_DrawHVLine>
    mask <<= 1;
 8001ff8:	0076      	lsls	r6, r6, #1
    if ( mask == 0 )
 8001ffa:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
      b++;
 8001ffe:	bf08      	it	eq
 8002000:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
    x++;
 8002002:	f104 0401 	add.w	r4, r4, #1
      b++;
 8002006:	bf04      	itt	eq
 8002008:	3301      	addeq	r3, #1
      mask = 1;
 800200a:	2601      	moveq	r6, #1
    x++;
 800200c:	b2e4      	uxtb	r4, r4
      b++;
 800200e:	bf08      	it	eq
 8002010:	930c      	streq	r3, [sp, #48]	; 0x30
    len--;
 8002012:	e7dc      	b.n	8001fce <u8g2_DrawHXBM+0x2e>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8002014:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ed      	bne.n	8001ff8 <u8g2_DrawHXBM+0x58>
      u8g2->draw_color = ncolor;
 800201c:	f885 a086 	strb.w	sl, [r5, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	e7e3      	b.n	8001fec <u8g2_DrawHXBM+0x4c>

08002024 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8002024:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002028:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
{
 800202c:	461e      	mov	r6, r3
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800202e:	4415      	add	r5, r2
 8002030:	b2ed      	uxtb	r5, r5
 8002032:	440b      	add	r3, r1
 8002034:	9500      	str	r5, [sp, #0]
 8002036:	b2db      	uxtb	r3, r3
{
 8002038:	4681      	mov	r9, r0
 800203a:	460f      	mov	r7, r1
 800203c:	4614      	mov	r4, r2
 800203e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8002042:	f000 fbbd 	bl	80027c0 <u8g2_IsIntersection>
 8002046:	b128      	cbz	r0, 8002054 <u8g2_DrawXBM+0x30>
  blen += 7;
 8002048:	f106 0807 	add.w	r8, r6, #7
  blen >>= 3;
 800204c:	f3c8 08c4 	ubfx	r8, r8, #3, #5
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8002050:	42a5      	cmp	r5, r4
 8002052:	d102      	bne.n	800205a <u8g2_DrawXBM+0x36>
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
    bitmap += blen;
    y++;
    h--;
  }
}
 8002054:	b002      	add	sp, #8
 8002056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800205a:	4622      	mov	r2, r4
 800205c:	f8cd a000 	str.w	sl, [sp]
 8002060:	4633      	mov	r3, r6
 8002062:	4639      	mov	r1, r7
 8002064:	4648      	mov	r0, r9
    y++;
 8002066:	3401      	adds	r4, #1
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8002068:	f7ff ff9a 	bl	8001fa0 <u8g2_DrawHXBM>
    bitmap += blen;
 800206c:	44c2      	add	sl, r8
    y++;
 800206e:	b2e4      	uxtb	r4, r4
    h--;
 8002070:	e7ee      	b.n	8002050 <u8g2_DrawXBM+0x2c>

08002072 <u8g2_DrawXBMP>:
 8002072:	b410      	push	{r4}
 8002074:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8002078:	9401      	str	r4, [sp, #4]
 800207a:	bc10      	pop	{r4}
 800207c:	f7ff bfd2 	b.w	8002024 <u8g2_DrawXBM>

08002080 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8002080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002084:	4604      	mov	r4, r0
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002086:	2600      	movs	r6, #0
 8002088:	6803      	ldr	r3, [r0, #0]
  src_max = u8g2->tile_buf_height;
 800208a:	f890 903c 	ldrb.w	r9, [r0, #60]	; 0x3c
  dest_row = u8g2->tile_curr_row;
 800208e:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8002092:	f893 8011 	ldrb.w	r8, [r3, #17]
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002096:	6823      	ldr	r3, [r4, #0]
  ptr = u8g2->tile_buf_ptr;
 8002098:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800209a:	7c1b      	ldrb	r3, [r3, #16]
 800209c:	b2f5      	uxtb	r5, r6
  offset *= 8;
 800209e:	fb06 f103 	mul.w	r1, r6, r3
 80020a2:	b289      	uxth	r1, r1
 80020a4:	00c9      	lsls	r1, r1, #3
  ptr += offset;
 80020a6:	b289      	uxth	r1, r1
 80020a8:	4401      	add	r1, r0
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80020aa:	197a      	adds	r2, r7, r5
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
 80020ac:	3501      	adds	r5, #1
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80020ae:	9100      	str	r1, [sp, #0]
 80020b0:	4620      	mov	r0, r4
 80020b2:	2100      	movs	r1, #0
 80020b4:	b2d2      	uxtb	r2, r2
  } while( src_row < src_max && dest_row < dest_max );
 80020b6:	b2ed      	uxtb	r5, r5
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80020b8:	f000 fe3b 	bl	8002d32 <u8x8_DrawTile>
  } while( src_row < src_max && dest_row < dest_max );
 80020bc:	45a9      	cmp	r9, r5
 80020be:	d904      	bls.n	80020ca <u8g2_send_buffer+0x4a>
 80020c0:	3601      	adds	r6, #1
 80020c2:	19bb      	adds	r3, r7, r6
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	4598      	cmp	r8, r3
 80020c8:	d8e5      	bhi.n	8002096 <u8g2_send_buffer+0x16>
}
 80020ca:	b003      	add	sp, #12
 80020cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080020d0 <u8g2_ClearBuffer>:
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80020d0:	6803      	ldr	r3, [r0, #0]
  cnt *= u8g2->tile_buf_height;
 80020d2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80020d6:	7c1b      	ldrb	r3, [r3, #16]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80020d8:	2100      	movs	r1, #0
 80020da:	435a      	muls	r2, r3
 80020dc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80020de:	00d2      	lsls	r2, r2, #3
 80020e0:	f007 bcb4 	b.w	8009a4c <memset>

080020e4 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
 80020e8:	f7ff ffca 	bl	8002080 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80020ec:	4620      	mov	r0, r4
}
 80020ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80020f2:	f000 be46 	b.w	8002d82 <u8x8_RefreshDisplay>

080020f6 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80020f6:	b510      	push	{r4, lr}
 80020f8:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
 80020fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->tile_curr_row = row;
 80020fc:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8002104:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002106:	4620      	mov	r0, r4
}
 8002108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2->cb->update_page_win(u8g2);
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4718      	bx	r3

08002110 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8002110:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
 8002112:	f890 3087 	ldrb.w	r3, [r0, #135]	; 0x87
{
 8002116:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
 8002118:	b10b      	cbz	r3, 800211e <u8g2_FirstPage+0xe>
  {
    u8g2_ClearBuffer(u8g2);
 800211a:	f7ff ffd9 	bl	80020d0 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800211e:	4620      	mov	r0, r4
}
 8002120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8002124:	2100      	movs	r1, #0
 8002126:	f7ff bfe6 	b.w	80020f6 <u8g2_SetBufferCurrTileRow>

0800212a <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800212a:	b538      	push	{r3, r4, r5, lr}
 800212c:	4604      	mov	r4, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800212e:	f7ff ffa7 	bl	8002080 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8002132:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  row += u8g2->tile_buf_height;
 8002136:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800213a:	6823      	ldr	r3, [r4, #0]
  row += u8g2->tile_buf_height;
 800213c:	440d      	add	r5, r1
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800213e:	7c5b      	ldrb	r3, [r3, #17]
  row += u8g2->tile_buf_height;
 8002140:	b2ed      	uxtb	r5, r5
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8002142:	42ab      	cmp	r3, r5
 8002144:	d804      	bhi.n	8002150 <u8g2_NextPage+0x26>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8002146:	4620      	mov	r0, r4
 8002148:	f000 fe1b 	bl	8002d82 <u8x8_RefreshDisplay>
    return 0;
 800214c:	2000      	movs	r0, #0
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
 800214e:	bd38      	pop	{r3, r4, r5, pc}
  if ( u8g2->is_auto_page_clear )
 8002150:	f894 3087 	ldrb.w	r3, [r4, #135]	; 0x87
 8002154:	b113      	cbz	r3, 800215c <u8g2_NextPage+0x32>
    u8g2_ClearBuffer(u8g2);
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff ffba 	bl	80020d0 <u8g2_ClearBuffer>
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800215c:	4620      	mov	r0, r4
 800215e:	4629      	mov	r1, r5
 8002160:	f7ff ffc9 	bl	80020f6 <u8g2_SetBufferCurrTileRow>
  return 1;
 8002164:	2001      	movs	r0, #1
 8002166:	e7f2      	b.n	800214e <u8g2_NextPage+0x24>

08002168 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8002168:	b510      	push	{r4, lr}
 800216a:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
 800216c:	f7ff ffd0 	bl	8002110 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff ffda 	bl	800212a <u8g2_NextPage>
 8002176:	4601      	mov	r1, r0
 8002178:	2800      	cmp	r0, #0
 800217a:	d1f9      	bne.n	8002170 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800217c:	4620      	mov	r0, r4
}
 800217e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8002182:	f7ff bfb8 	b.w	80020f6 <u8g2_SetBufferCurrTileRow>
	...

08002188 <u8g2_m_16_8_f>:
  return buf;
}
uint8_t *u8g2_m_16_8_f(uint8_t *page_cnt)
{
  static uint8_t buf[1024];
  *page_cnt = 8;
 8002188:	2308      	movs	r3, #8
 800218a:	7003      	strb	r3, [r0, #0]
  return buf;
}
 800218c:	4800      	ldr	r0, [pc, #0]	; (8002190 <u8g2_m_16_8_f+0x8>)
 800218e:	4770      	bx	lr
 8002190:	20000a2d 	.word	0x20000a2d

08002194 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002194:	b530      	push	{r4, r5, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	4909      	ldr	r1, [pc, #36]	; (80021c4 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
 800219e:	4613      	mov	r3, r2
 80021a0:	4a09      	ldr	r2, [pc, #36]	; (80021c8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
{
 80021a2:	4604      	mov	r4, r0
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 80021a4:	f000 fe12 	bl	8002dcc <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80021a8:	f10d 000f 	add.w	r0, sp, #15
 80021ac:	f7ff ffec 	bl	8002188 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
  buf = u8g2_m_16_8_f(&tile_buf_height);
 80021b2:	4601      	mov	r1, r0
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80021b4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80021b8:	4620      	mov	r0, r4
 80021ba:	9500      	str	r5, [sp, #0]
 80021bc:	f000 fbe8 	bl	8002990 <u8g2_SetupBuffer>
}
 80021c0:	b005      	add	sp, #20
 80021c2:	bd30      	pop	{r4, r5, pc}
 80021c4:	08002c91 	.word	0x08002c91
 80021c8:	08002b09 	.word	0x08002b09
 80021cc:	080027f1 	.word	0x080027f1

080021d0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
 80021d0:	1842      	adds	r2, r0, r1
    pos = u8x8_pgm_read( font );
 80021d2:	5c43      	ldrb	r3, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
 80021d4:	7850      	ldrb	r0, [r2, #1]
 80021d6:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return pos;
}
 80021da:	b280      	uxth	r0, r0
 80021dc:	4770      	bx	lr

080021de <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <u8g2_add_vector_y+0x10>
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d005      	beq.n	80021f2 <u8g2_add_vector_y+0x14>
 80021e6:	b933      	cbnz	r3, 80021f6 <u8g2_add_vector_y+0x18>
  {
    case 0:
      dy += y;
 80021e8:	4410      	add	r0, r2
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
 80021ea:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dy;
}
 80021ec:	4770      	bx	lr
      dy += x;
 80021ee:	4408      	add	r0, r1
 80021f0:	e7fb      	b.n	80021ea <u8g2_add_vector_y+0xc>
      dy -= y;
 80021f2:	1a80      	subs	r0, r0, r2
 80021f4:	e7f9      	b.n	80021ea <u8g2_add_vector_y+0xc>
      dy -= x;
 80021f6:	1a40      	subs	r0, r0, r1
 80021f8:	e7f7      	b.n	80021ea <u8g2_add_vector_y+0xc>

080021fa <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <u8g2_add_vector_x+0x10>
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d005      	beq.n	800220e <u8g2_add_vector_x+0x14>
 8002202:	b933      	cbnz	r3, 8002212 <u8g2_add_vector_x+0x18>
  {
    case 0:
      dx += x;
 8002204:	4408      	add	r0, r1
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
 8002206:	b2c0      	uxtb	r0, r0
      break;      
  }
  return dx;
}
 8002208:	4770      	bx	lr
      dx -= y;
 800220a:	1a80      	subs	r0, r0, r2
 800220c:	e7fb      	b.n	8002206 <u8g2_add_vector_x+0xc>
      dx -= x;
 800220e:	1a40      	subs	r0, r0, r1
 8002210:	e7f9      	b.n	8002206 <u8g2_add_vector_x+0xc>
      dx += y;
 8002212:	4410      	add	r0, r2
 8002214:	e7f7      	b.n	8002206 <u8g2_add_vector_x+0xc>

08002216 <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
 8002216:	2000      	movs	r0, #0
 8002218:	4770      	bx	lr

0800221a <u8g2_font_calc_vref_top>:

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
 800221a:	f890 0082 	ldrb.w	r0, [r0, #130]	; 0x82
  tmp++;
 800221e:	3001      	adds	r0, #1
  return tmp;
}
 8002220:	b2c0      	uxtb	r0, r0
 8002222:	4770      	bx	lr

08002224 <u8g2_read_font_info>:
{
 8002224:	b538      	push	{r3, r4, r5, lr}
  return u8x8_pgm_read( font );  
 8002226:	780b      	ldrb	r3, [r1, #0]
{
 8002228:	460d      	mov	r5, r1
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800222a:	7003      	strb	r3, [r0, #0]
  return u8x8_pgm_read( font );  
 800222c:	784b      	ldrb	r3, [r1, #1]
{
 800222e:	4604      	mov	r4, r0
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8002230:	7043      	strb	r3, [r0, #1]
  return u8x8_pgm_read( font );  
 8002232:	788b      	ldrb	r3, [r1, #2]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8002234:	7083      	strb	r3, [r0, #2]
  return u8x8_pgm_read( font );  
 8002236:	78cb      	ldrb	r3, [r1, #3]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8002238:	70c3      	strb	r3, [r0, #3]
  return u8x8_pgm_read( font );  
 800223a:	790b      	ldrb	r3, [r1, #4]
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800223c:	7103      	strb	r3, [r0, #4]
  return u8x8_pgm_read( font );  
 800223e:	794b      	ldrb	r3, [r1, #5]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8002240:	7143      	strb	r3, [r0, #5]
  return u8x8_pgm_read( font );  
 8002242:	798b      	ldrb	r3, [r1, #6]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8002244:	7183      	strb	r3, [r0, #6]
  return u8x8_pgm_read( font );  
 8002246:	79cb      	ldrb	r3, [r1, #7]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8002248:	71c3      	strb	r3, [r0, #7]
  return u8x8_pgm_read( font );  
 800224a:	7a0b      	ldrb	r3, [r1, #8]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800224c:	7203      	strb	r3, [r0, #8]
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800224e:	7a4b      	ldrb	r3, [r1, #9]
 8002250:	7243      	strb	r3, [r0, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8002252:	7a8b      	ldrb	r3, [r1, #10]
 8002254:	7283      	strb	r3, [r0, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8002256:	7acb      	ldrb	r3, [r1, #11]
 8002258:	72c3      	strb	r3, [r0, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800225a:	7b0b      	ldrb	r3, [r1, #12]
 800225c:	7303      	strb	r3, [r0, #12]
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800225e:	7b4b      	ldrb	r3, [r1, #13]
 8002260:	7343      	strb	r3, [r0, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8002262:	7b8b      	ldrb	r3, [r1, #14]
 8002264:	7383      	strb	r3, [r0, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8002266:	7bcb      	ldrb	r3, [r1, #15]
 8002268:	73c3      	strb	r3, [r0, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800226a:	7c0b      	ldrb	r3, [r1, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800226c:	2111      	movs	r1, #17
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800226e:	7403      	strb	r3, [r0, #16]
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002270:	4628      	mov	r0, r5
 8002272:	f7ff ffad 	bl	80021d0 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002276:	2113      	movs	r1, #19
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8002278:	8260      	strh	r0, [r4, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800227a:	4628      	mov	r0, r5
 800227c:	f7ff ffa8 	bl	80021d0 <u8g2_font_get_word>
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002280:	2115      	movs	r1, #21
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 8002282:	82a0      	strh	r0, [r4, #20]
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 8002284:	4628      	mov	r0, r5
 8002286:	f7ff ffa3 	bl	80021d0 <u8g2_font_get_word>
 800228a:	82e0      	strh	r0, [r4, #22]
}
 800228c:	bd38      	pop	{r3, r4, r5, pc}

0800228e <u8g2_font_decode_get_unsigned_bits>:
{
 800228e:	b570      	push	{r4, r5, r6, lr}
  uint8_t bit_pos = f->decode_bit_pos;
 8002290:	7a84      	ldrb	r4, [r0, #10]
  val = u8x8_pgm_read( f->decode_ptr );  
 8002292:	6806      	ldr	r6, [r0, #0]
  bit_pos_plus_cnt += cnt;
 8002294:	1862      	adds	r2, r4, r1
  val >>= bit_pos;
 8002296:	7833      	ldrb	r3, [r6, #0]
  bit_pos_plus_cnt += cnt;
 8002298:	b2d2      	uxtb	r2, r2
  if ( bit_pos_plus_cnt >= 8 )
 800229a:	2a07      	cmp	r2, #7
  val >>= bit_pos;
 800229c:	fa43 f504 	asr.w	r5, r3, r4
  if ( bit_pos_plus_cnt >= 8 )
 80022a0:	d807      	bhi.n	80022b2 <u8g2_font_decode_get_unsigned_bits+0x24>
  val >>= bit_pos;
 80022a2:	b2eb      	uxtb	r3, r5
  f->decode_bit_pos = bit_pos_plus_cnt;
 80022a4:	7282      	strb	r2, [r0, #10]
  val &= (1U<<cnt)-1;
 80022a6:	f04f 30ff 	mov.w	r0, #4294967295
 80022aa:	4088      	lsls	r0, r1
}
 80022ac:	ea23 0000 	bic.w	r0, r3, r0
 80022b0:	bd70      	pop	{r4, r5, r6, pc}
    f->decode_ptr++;
 80022b2:	1c73      	adds	r3, r6, #1
 80022b4:	6003      	str	r3, [r0, #0]
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80022b6:	7873      	ldrb	r3, [r6, #1]
    s -= bit_pos;
 80022b8:	f1c4 0408 	rsb	r4, r4, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80022bc:	b2e4      	uxtb	r4, r4
 80022be:	40a3      	lsls	r3, r4
 80022c0:	432b      	orrs	r3, r5
    bit_pos_plus_cnt -= 8;
 80022c2:	3a08      	subs	r2, #8
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80022c4:	b2db      	uxtb	r3, r3
    bit_pos_plus_cnt -= 8;
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	e7ec      	b.n	80022a4 <u8g2_font_decode_get_unsigned_bits+0x16>

080022ca <u8g2_font_setup_decode>:
{
 80022ca:	b538      	push	{r3, r4, r5, lr}
  decode->decode_bit_pos = 0;
 80022cc:	2300      	movs	r3, #0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80022ce:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
 80022d2:	4604      	mov	r4, r0
  decode->decode_bit_pos = 0;
 80022d4:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
  decode->decode_ptr = glyph_data;
 80022d8:	6581      	str	r1, [r0, #88]	; 0x58
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80022da:	f890 106c 	ldrb.w	r1, [r0, #108]	; 0x6c
 80022de:	4628      	mov	r0, r5
 80022e0:	f7ff ffd5 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80022e4:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80022e8:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80022ec:	4628      	mov	r0, r5
 80022ee:	f7ff ffce 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
  decode->fg_color = u8g2->draw_color;
 80022f2:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80022f6:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  decode->fg_color = u8g2->draw_color;
 80022fa:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8002308:	bd38      	pop	{r3, r4, r5, pc}

0800230a <u8g2_font_decode_get_signed_bits>:
{
 800230a:	b510      	push	{r4, lr}
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800230c:	f7ff ffbf 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
  d <<= cnt;
 8002310:	2301      	movs	r3, #1
  cnt--;
 8002312:	1e4c      	subs	r4, r1, #1
  d <<= cnt;
 8002314:	b2e4      	uxtb	r4, r4
 8002316:	fa03 f404 	lsl.w	r4, r3, r4
  v -= d;
 800231a:	1b00      	subs	r0, r0, r4
}
 800231c:	b240      	sxtb	r0, r0
 800231e:	bd10      	pop	{r4, pc}

08002320 <u8g2_font_decode_len>:
{
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	4604      	mov	r4, r0
 8002326:	460e      	mov	r6, r1
 8002328:	b087      	sub	sp, #28
  lx = decode->x;
 800232a:	f890 505e 	ldrb.w	r5, [r0, #94]	; 0x5e
  ly = decode->y;
 800232e:	f890 705f 	ldrb.w	r7, [r0, #95]	; 0x5f
{
 8002332:	9205      	str	r2, [sp, #20]
    rem = decode->glyph_width;
 8002334:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002338:	fa4f f987 	sxtb.w	r9, r7
    rem -= lx;
 800233c:	ebab 0305 	sub.w	r3, fp, r5
 8002340:	b2db      	uxtb	r3, r3
 8002342:	42b3      	cmp	r3, r6
 8002344:	9303      	str	r3, [sp, #12]
    if ( cnt < rem )
 8002346:	bf28      	it	cs
 8002348:	4633      	movcs	r3, r6
 800234a:	469a      	mov	sl, r3
    y = decode->target_y;
 800234c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002350:	464a      	mov	r2, r9
 8002352:	b269      	sxtb	r1, r5
    y = decode->target_y;
 8002354:	9304      	str	r3, [sp, #16]
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002356:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800235a:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800235e:	f7ff ff4c 	bl	80021fa <u8g2_add_vector_x>
 8002362:	4680      	mov	r8, r0
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002364:	9804      	ldr	r0, [sp, #16]
 8002366:	f7ff ff3a 	bl	80021de <u8g2_add_vector_y>
    if ( is_foreground )
 800236a:	9905      	ldr	r1, [sp, #20]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800236c:	4602      	mov	r2, r0
    if ( is_foreground )
 800236e:	b1a9      	cbz	r1, 800239c <u8g2_font_decode_len+0x7c>
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8002370:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8002374:	f884 1086 	strb.w	r1, [r4, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4641      	mov	r1, r8
 800237c:	4653      	mov	r3, sl
 800237e:	4620      	mov	r0, r4
 8002380:	f000 f9a7 	bl	80026d2 <u8g2_DrawHVLine>
    if ( cnt < rem )
 8002384:	9b03      	ldr	r3, [sp, #12]
 8002386:	4435      	add	r5, r6
 8002388:	429e      	cmp	r6, r3
 800238a:	b2ed      	uxtb	r5, r5
 800238c:	d30d      	bcc.n	80023aa <u8g2_font_decode_len+0x8a>
    cnt -= rem;
 800238e:	eba5 060b 	sub.w	r6, r5, fp
    ly++;
 8002392:	3701      	adds	r7, #1
    lx = 0;
 8002394:	2500      	movs	r5, #0
    cnt -= rem;
 8002396:	b2f6      	uxtb	r6, r6
    ly++;
 8002398:	b2ff      	uxtb	r7, r7
    rem = decode->glyph_width;
 800239a:	e7cb      	b.n	8002334 <u8g2_font_decode_len+0x14>
    else if ( decode->is_transparent == 0 )    
 800239c:	f894 1063 	ldrb.w	r1, [r4, #99]	; 0x63
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d1ef      	bne.n	8002384 <u8g2_font_decode_len+0x64>
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80023a4:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
 80023a8:	e7e4      	b.n	8002374 <u8g2_font_decode_len+0x54>
  decode->x = lx;
 80023aa:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
  decode->y = ly;
 80023ae:	f884 905f 	strb.w	r9, [r4, #95]	; 0x5f
}
 80023b2:	b007      	add	sp, #28
 80023b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080023b8 <u8g2_font_decode_glyph>:
{
 80023b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023bc:	4604      	mov	r4, r0
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80023be:	f100 0758 	add.w	r7, r0, #88	; 0x58
  u8g2_font_setup_decode(u8g2, glyph_data);
 80023c2:	f7ff ff82 	bl	80022ca <u8g2_font_setup_decode>
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80023c6:	f894 106e 	ldrb.w	r1, [r4, #110]	; 0x6e
 80023ca:	4638      	mov	r0, r7
  h = u8g2->font_decode.glyph_height;
 80023cc:	f994 9061 	ldrsb.w	r9, [r4, #97]	; 0x61
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80023d0:	f7ff ff9b 	bl	800230a <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80023d4:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80023d8:	4683      	mov	fp, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80023da:	4638      	mov	r0, r7
 80023dc:	f7ff ff95 	bl	800230a <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80023e0:	f894 1070 	ldrb.w	r1, [r4, #112]	; 0x70
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80023e4:	4606      	mov	r6, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80023e6:	4638      	mov	r0, r7
 80023e8:	f7ff ff8f 	bl	800230a <u8g2_font_decode_get_signed_bits>
  if ( decode->glyph_width > 0 )
 80023ec:	f994 a060 	ldrsb.w	sl, [r4, #96]	; 0x60
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80023f0:	4680      	mov	r8, r0
  if ( decode->glyph_width > 0 )
 80023f2:	f1ba 0f00 	cmp.w	sl, #0
 80023f6:	dd4d      	ble.n	8002494 <u8g2_font_decode_glyph+0xdc>
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80023f8:	fa5f f589 	uxtb.w	r5, r9
 80023fc:	19aa      	adds	r2, r5, r6
 80023fe:	4252      	negs	r2, r2
 8002400:	b252      	sxtb	r2, r2
 8002402:	4659      	mov	r1, fp
 8002404:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8002408:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
 800240c:	f7ff fef5 	bl	80021fa <u8g2_add_vector_x>
 8002410:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
 8002414:	4606      	mov	r6, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8002416:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 800241a:	f7ff fee0 	bl	80021de <u8g2_add_vector_y>
 800241e:	4602      	mov	r2, r0
 8002420:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
      switch(decode->dir)
 8002424:	2b03      	cmp	r3, #3
 8002426:	d85c      	bhi.n	80024e2 <u8g2_font_decode_glyph+0x12a>
 8002428:	e8df f003 	tbb	[pc, r3]
 800242c:	51443802 	.word	0x51443802
	    x1 += decode->glyph_width;
 8002430:	eb06 010a 	add.w	r1, r6, sl
	    y1 += h;
 8002434:	4405      	add	r5, r0
	    x1 += decode->glyph_width;
 8002436:	b2cb      	uxtb	r3, r1
	    y1 += h;
 8002438:	b2e9      	uxtb	r1, r5
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800243a:	9100      	str	r1, [sp, #0]
 800243c:	4620      	mov	r0, r4
 800243e:	4631      	mov	r1, r6
 8002440:	f000 f9be 	bl	80027c0 <u8g2_IsIntersection>
 8002444:	b330      	cbz	r0, 8002494 <u8g2_font_decode_glyph+0xdc>
    decode->x = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800244c:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
 8002450:	4638      	mov	r0, r7
 8002452:	f7ff ff1c 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8002456:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800245a:	4606      	mov	r6, r0
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 800245c:	4638      	mov	r0, r7
 800245e:	f7ff ff16 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
 8002462:	4605      	mov	r5, r0
	u8g2_font_decode_len(u8g2, a, 0);
 8002464:	2200      	movs	r2, #0
 8002466:	4631      	mov	r1, r6
 8002468:	4620      	mov	r0, r4
 800246a:	f7ff ff59 	bl	8002320 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800246e:	4629      	mov	r1, r5
 8002470:	4620      	mov	r0, r4
 8002472:	2201      	movs	r2, #1
 8002474:	f7ff ff54 	bl	8002320 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8002478:	2101      	movs	r1, #1
 800247a:	4638      	mov	r0, r7
 800247c:	f7ff ff07 	bl	800228e <u8g2_font_decode_get_unsigned_bits>
 8002480:	2800      	cmp	r0, #0
 8002482:	d1ef      	bne.n	8002464 <u8g2_font_decode_glyph+0xac>
      if ( decode->y >= h )
 8002484:	f994 305f 	ldrsb.w	r3, [r4, #95]	; 0x5f
 8002488:	454b      	cmp	r3, r9
 800248a:	dbdf      	blt.n	800244c <u8g2_font_decode_glyph+0x94>
    u8g2->draw_color = decode->fg_color;
 800248c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8002490:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
}
 8002494:	4640      	mov	r0, r8
 8002496:	b003      	add	sp, #12
 8002498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800249c:	f1c5 0501 	rsb	r5, r5, #1
 80024a0:	eb06 0c05 	add.w	ip, r6, r5
	    y1 += decode->glyph_width;
 80024a4:	eb00 010a 	add.w	r1, r0, sl
	    x1++;
 80024a8:	3601      	adds	r6, #1
 80024aa:	b2f3      	uxtb	r3, r6
	    y1 += decode->glyph_width;
 80024ac:	b2c9      	uxtb	r1, r1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024ae:	fa5f f68c 	uxtb.w	r6, ip
	    break;	  
 80024b2:	e7c2      	b.n	800243a <u8g2_font_decode_glyph+0x82>
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024b4:	f1ca 0101 	rsb	r1, sl, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024b8:	f1c5 0501 	rsb	r5, r5, #1
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024bc:	eb06 0c01 	add.w	ip, r6, r1
	    y1++;
 80024c0:	3201      	adds	r2, #1
	    x1++;
 80024c2:	3601      	adds	r6, #1
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024c4:	4405      	add	r5, r0
	    y1++;
 80024c6:	b2d1      	uxtb	r1, r2
	    x1++;
 80024c8:	b2f3      	uxtb	r3, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024ca:	b2ea      	uxtb	r2, r5
 80024cc:	e7ef      	b.n	80024ae <u8g2_font_decode_glyph+0xf6>
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024ce:	f1ca 0a01 	rsb	sl, sl, #1
	    y1++;
 80024d2:	3201      	adds	r2, #1
	    x1 += h;
 80024d4:	19ab      	adds	r3, r5, r6
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024d6:	4482      	add	sl, r0
	    y1++;
 80024d8:	b2d1      	uxtb	r1, r2
	    x1 += h;
 80024da:	b2db      	uxtb	r3, r3
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80024dc:	fa5f f28a 	uxtb.w	r2, sl
	    break;	  
 80024e0:	e7ab      	b.n	800243a <u8g2_font_decode_glyph+0x82>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80024e2:	4601      	mov	r1, r0
 80024e4:	4633      	mov	r3, r6
 80024e6:	e7a8      	b.n	800243a <u8g2_font_decode_glyph+0x82>

080024e8 <u8g2_font_get_glyph_data>:
  const uint8_t *font = u8g2->font;
 80024e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
  if ( encoding <= 255 )
 80024ea:	29ff      	cmp	r1, #255	; 0xff
{
 80024ec:	b570      	push	{r4, r5, r6, lr}
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80024ee:	f103 0317 	add.w	r3, r3, #23
{
 80024f2:	460d      	mov	r5, r1
  if ( encoding <= 255 )
 80024f4:	d812      	bhi.n	800251c <u8g2_font_get_glyph_data+0x34>
    if ( encoding >= 'a' )
 80024f6:	2960      	cmp	r1, #96	; 0x60
 80024f8:	d909      	bls.n	800250e <u8g2_font_get_glyph_data+0x26>
      font += u8g2->font_info.start_pos_lower_a;
 80024fa:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
      font += u8g2->font_info.start_pos_upper_A;
 80024fe:	4413      	add	r3, r2
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8002500:	7858      	ldrb	r0, [r3, #1]
 8002502:	b118      	cbz	r0, 800250c <u8g2_font_get_glyph_data+0x24>
      if ( u8x8_pgm_read( font ) == encoding )
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	42aa      	cmp	r2, r5
 8002508:	d106      	bne.n	8002518 <u8g2_font_get_glyph_data+0x30>
	return font+2;	/* skip encoding and glyph size */
 800250a:	1c98      	adds	r0, r3, #2
}
 800250c:	bd70      	pop	{r4, r5, r6, pc}
    else if ( encoding >= 'A' )
 800250e:	2940      	cmp	r1, #64	; 0x40
 8002510:	d9f6      	bls.n	8002500 <u8g2_font_get_glyph_data+0x18>
      font += u8g2->font_info.start_pos_upper_A;
 8002512:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 8002516:	e7f2      	b.n	80024fe <u8g2_font_get_glyph_data+0x16>
      font += u8x8_pgm_read( font + 1 );
 8002518:	4403      	add	r3, r0
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800251a:	e7f1      	b.n	8002500 <u8g2_font_get_glyph_data+0x18>
    font += u8g2->font_info.start_pos_unicode;
 800251c:	f8b0 407e 	ldrh.w	r4, [r0, #126]	; 0x7e
 8002520:	441c      	add	r4, r3
    unicode_lookup_table = font; 
 8002522:	4626      	mov	r6, r4
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002524:	2100      	movs	r1, #0
 8002526:	4630      	mov	r0, r6
 8002528:	f7ff fe52 	bl	80021d0 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800252c:	2102      	movs	r1, #2
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800252e:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002530:	4630      	mov	r0, r6
 8002532:	f7ff fe4d 	bl	80021d0 <u8g2_font_get_word>
    } while( e < encoding );
 8002536:	4285      	cmp	r5, r0
      unicode_lookup_table+=4;
 8002538:	f106 0604 	add.w	r6, r6, #4
    } while( e < encoding );
 800253c:	d8f2      	bhi.n	8002524 <u8g2_font_get_glyph_data+0x3c>
      e |= u8x8_pgm_read( font + 1 );
 800253e:	8820      	ldrh	r0, [r4, #0]
 8002540:	ba40      	rev16	r0, r0
 8002542:	b280      	uxth	r0, r0
      if ( e == 0 )
 8002544:	2800      	cmp	r0, #0
 8002546:	d0e1      	beq.n	800250c <u8g2_font_get_glyph_data+0x24>
      if ( e == encoding )
 8002548:	4285      	cmp	r5, r0
 800254a:	d101      	bne.n	8002550 <u8g2_font_get_glyph_data+0x68>
	return font+3;	/* skip encoding and glyph size */
 800254c:	1ce0      	adds	r0, r4, #3
 800254e:	e7dd      	b.n	800250c <u8g2_font_get_glyph_data+0x24>
      font += u8x8_pgm_read( font + 2 );
 8002550:	78a3      	ldrb	r3, [r4, #2]
 8002552:	441c      	add	r4, r3
      e = u8x8_pgm_read( font );
 8002554:	e7f3      	b.n	800253e <u8g2_font_get_glyph_data+0x56>

08002556 <u8g2_DrawGlyph>:
{
 8002556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002558:	461f      	mov	r7, r3
 800255a:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 800255e:	4604      	mov	r4, r0
 8002560:	460e      	mov	r6, r1
 8002562:	4615      	mov	r5, r2
 8002564:	2b03      	cmp	r3, #3
 8002566:	d807      	bhi.n	8002578 <u8g2_DrawGlyph+0x22>
 8002568:	e8df f003 	tbb	[pc, r3]
 800256c:	1e1a1502 	.word	0x1e1a1502
      y += u8g2->font_calc_vref(u8g2);
 8002570:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002572:	4798      	blx	r3
 8002574:	4405      	add	r5, r0
      y -= u8g2->font_calc_vref(u8g2);
 8002576:	b2ed      	uxtb	r5, r5
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002578:	4639      	mov	r1, r7
 800257a:	4620      	mov	r0, r4
  u8g2->font_decode.target_x = x;
 800257c:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8002580:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8002584:	f7ff ffb0 	bl	80024e8 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
 8002588:	4601      	mov	r1, r0
 800258a:	b118      	cbz	r0, 8002594 <u8g2_DrawGlyph+0x3e>
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 800258c:	4620      	mov	r0, r4
 800258e:	f7ff ff13 	bl	80023b8 <u8g2_font_decode_glyph>
 8002592:	b2c0      	uxtb	r0, r0
}
 8002594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      x -= u8g2->font_calc_vref(u8g2);
 8002596:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002598:	4798      	blx	r3
 800259a:	1a36      	subs	r6, r6, r0
      x += u8g2->font_calc_vref(u8g2);
 800259c:	b2f6      	uxtb	r6, r6
      break;
 800259e:	e7eb      	b.n	8002578 <u8g2_DrawGlyph+0x22>
      y -= u8g2->font_calc_vref(u8g2);
 80025a0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025a2:	4798      	blx	r3
 80025a4:	1a2d      	subs	r5, r5, r0
 80025a6:	e7e6      	b.n	8002576 <u8g2_DrawGlyph+0x20>
      x += u8g2->font_calc_vref(u8g2);
 80025a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025aa:	4798      	blx	r3
 80025ac:	4406      	add	r6, r0
 80025ae:	e7f5      	b.n	800259c <u8g2_DrawGlyph+0x46>

080025b0 <u8g2_draw_string>:
{
 80025b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025b4:	461e      	mov	r6, r3
 80025b6:	4607      	mov	r7, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	4615      	mov	r5, r2
  sum = 0;
 80025bc:	f04f 0a00 	mov.w	sl, #0
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80025c0:	f000 fa0d 	bl	80029de <u8x8_utf8_init>
    if ( e == 0x0ffff )
 80025c4:	f64f 78ff 	movw	r8, #65535	; 0xffff
    if ( e != 0x0fffe )
 80025c8:	f64f 79fe 	movw	r9, #65534	; 0xfffe
 80025cc:	3e01      	subs	r6, #1
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4638      	mov	r0, r7
 80025d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025d6:	4798      	blx	r3
    if ( e == 0x0ffff )
 80025d8:	4540      	cmp	r0, r8
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80025da:	4603      	mov	r3, r0
    if ( e == 0x0ffff )
 80025dc:	d01b      	beq.n	8002616 <u8g2_draw_string+0x66>
    if ( e != 0x0fffe )
 80025de:	4548      	cmp	r0, r9
 80025e0:	d0f5      	beq.n	80025ce <u8g2_draw_string+0x1e>
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80025e2:	462a      	mov	r2, r5
 80025e4:	4621      	mov	r1, r4
 80025e6:	4638      	mov	r0, r7
 80025e8:	f7ff ffb5 	bl	8002556 <u8g2_DrawGlyph>
      switch(u8g2->font_decode.dir)
 80025ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d805      	bhi.n	8002600 <u8g2_draw_string+0x50>
 80025f4:	e8df f003 	tbb	[pc, r3]
 80025f8:	0d0b0802 	.word	0x0d0b0802
	  x += delta;
 80025fc:	4404      	add	r4, r0
	  x -= delta;
 80025fe:	b2e4      	uxtb	r4, r4
      sum += delta;    
 8002600:	4450      	add	r0, sl
 8002602:	fa5f fa80 	uxtb.w	sl, r0
 8002606:	e7e2      	b.n	80025ce <u8g2_draw_string+0x1e>
	  y += delta;
 8002608:	4405      	add	r5, r0
	  y -= delta;
 800260a:	b2ed      	uxtb	r5, r5
	  break;
 800260c:	e7f8      	b.n	8002600 <u8g2_draw_string+0x50>
	  x -= delta;
 800260e:	1a24      	subs	r4, r4, r0
 8002610:	e7f5      	b.n	80025fe <u8g2_draw_string+0x4e>
	  y -= delta;
 8002612:	1a2d      	subs	r5, r5, r0
 8002614:	e7f9      	b.n	800260a <u8g2_draw_string+0x5a>
}
 8002616:	4650      	mov	r0, sl
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800261c <u8g2_DrawStr>:
{
 800261c:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800261e:	4c02      	ldr	r4, [pc, #8]	; (8002628 <u8g2_DrawStr+0xc>)
 8002620:	6044      	str	r4, [r0, #4]
}
 8002622:	bc10      	pop	{r4}
  return u8g2_draw_string(u8g2, x, y, str);
 8002624:	f7ff bfc4 	b.w	80025b0 <u8g2_draw_string>
 8002628:	080029cf 	.word	0x080029cf

0800262c <u8g2_UpdateRefHeight>:
  if ( u8g2->font == NULL )
 800262c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 800262e:	b510      	push	{r4, lr}
  if ( u8g2->font == NULL )
 8002630:	b1c3      	cbz	r3, 8002664 <u8g2_UpdateRefHeight+0x38>
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002632:	f990 4075 	ldrsb.w	r4, [r0, #117]	; 0x75
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002636:	f990 1076 	ldrsb.w	r1, [r0, #118]	; 0x76
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 800263a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800263e:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002642:	f880 1083 	strb.w	r1, [r0, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002646:	b16b      	cbz	r3, 8002664 <u8g2_UpdateRefHeight+0x38>
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10c      	bne.n	8002666 <u8g2_UpdateRefHeight+0x3a>
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800264c:	f990 3077 	ldrsb.w	r3, [r0, #119]	; 0x77
 8002650:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002652:	bfb8      	it	lt
 8002654:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002658:	f990 3078 	ldrsb.w	r3, [r0, #120]	; 0x78
 800265c:	4299      	cmp	r1, r3
 800265e:	dd01      	ble.n	8002664 <u8g2_UpdateRefHeight+0x38>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002660:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
}
 8002664:	bd10      	pop	{r4, pc}
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002666:	f990 2074 	ldrsb.w	r2, [r0, #116]	; 0x74
 800266a:	f990 3072 	ldrsb.w	r3, [r0, #114]	; 0x72
 800266e:	4413      	add	r3, r2
 8002670:	429c      	cmp	r4, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002672:	bfb8      	it	lt
 8002674:	f880 3082 	strblt.w	r3, [r0, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8002678:	4291      	cmp	r1, r2
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800267a:	bfc8      	it	gt
 800267c:	f880 2083 	strbgt.w	r2, [r0, #131]	; 0x83
 8002680:	e7f0      	b.n	8002664 <u8g2_UpdateRefHeight+0x38>
	...

08002684 <u8g2_SetFontPosBaseline>:
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <u8g2_SetFontPosBaseline+0x8>)
 8002686:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	08002217 	.word	0x08002217

08002690 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002690:	4b01      	ldr	r3, [pc, #4]	; (8002698 <u8g2_SetFontPosTop+0x8>)
 8002692:	6543      	str	r3, [r0, #84]	; 0x54
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	0800221b 	.word	0x0800221b

0800269c <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
 800269c:	6d02      	ldr	r2, [r0, #80]	; 0x50
{
 800269e:	b510      	push	{r4, lr}
  if ( u8g2->font != font )
 80026a0:	428a      	cmp	r2, r1
{
 80026a2:	4604      	mov	r4, r0
  if ( u8g2->font != font )
 80026a4:	d008      	beq.n	80026b8 <u8g2_SetFont+0x1c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80026a6:	6501      	str	r1, [r0, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80026a8:	3068      	adds	r0, #104	; 0x68
 80026aa:	f7ff fdbb 	bl	8002224 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80026ae:	4620      	mov	r0, r4
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80026b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    u8g2_UpdateRefHeight(u8g2);
 80026b4:	f7ff bfba 	b.w	800262c <u8g2_UpdateRefHeight>
}
 80026b8:	bd10      	pop	{r4, pc}

080026ba <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026ba:	b470      	push	{r4, r5, r6}

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 80026bc:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
{
 80026c0:	f89d 500c 	ldrb.w	r5, [sp, #12]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80026c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
  y -= u8g2->pixel_curr_row;
 80026c6:	1b92      	subs	r2, r2, r6
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80026c8:	46a4      	mov	ip, r4
 80026ca:	9503      	str	r5, [sp, #12]
 80026cc:	b2d2      	uxtb	r2, r2
}
 80026ce:	bc70      	pop	{r4, r5, r6}
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 80026d0:	4760      	bx	ip

080026d2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80026d2:	b470      	push	{r4, r5, r6}
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80026d4:	f890 4080 	ldrb.w	r4, [r0, #128]	; 0x80
{
 80026d8:	f89d 500c 	ldrb.w	r5, [sp, #12]
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80026dc:	2c00      	cmp	r4, #0
 80026de:	d03a      	beq.n	8002756 <u8g2_DrawHVLine+0x84>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d038      	beq.n	8002756 <u8g2_DrawHVLine+0x84>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d904      	bls.n	80026f2 <u8g2_DrawHVLine+0x20>
      {
	if ( dir == 2 )
 80026e8:	2d02      	cmp	r5, #2
 80026ea:	d12b      	bne.n	8002744 <u8g2_DrawHVLine+0x72>
	{
	  x -= len;
	  x++;
 80026ec:	3101      	adds	r1, #1
 80026ee:	1ac9      	subs	r1, r1, r3
 80026f0:	b2c9      	uxtb	r1, r1
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
 80026f2:	f015 0501 	ands.w	r5, r5, #1
 80026f6:	d130      	bne.n	800275a <u8g2_DrawHVLine+0x88>
      {
	if ( y < u8g2->user_y0 )
 80026f8:	f890 4047 	ldrb.w	r4, [r0, #71]	; 0x47
 80026fc:	4294      	cmp	r4, r2
 80026fe:	d82a      	bhi.n	8002756 <u8g2_DrawHVLine+0x84>
	  return;
	if ( y >= u8g2->user_y1 )
 8002700:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
 8002704:	4294      	cmp	r4, r2
 8002706:	d926      	bls.n	8002756 <u8g2_DrawHVLine+0x84>
  b += *len;
 8002708:	440b      	add	r3, r1
 800270a:	b2db      	uxtb	r3, r3
  if ( a > b )
 800270c:	428b      	cmp	r3, r1
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 800270e:	f890 6045 	ldrb.w	r6, [r0, #69]	; 0x45
 8002712:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
  if ( a > b )
 8002716:	d21c      	bcs.n	8002752 <u8g2_DrawHVLine+0x80>
    if ( a < d )
 8002718:	428c      	cmp	r4, r1
 800271a:	d919      	bls.n	8002750 <u8g2_DrawHVLine+0x7e>
      b--;
 800271c:	1e63      	subs	r3, r4, #1
 800271e:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8002720:	429e      	cmp	r6, r3
 8002722:	d218      	bcs.n	8002756 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 8002724:	42b1      	cmp	r1, r6
 8002726:	bf38      	it	cc
 8002728:	4631      	movcc	r1, r6
  b -= a;
 800272a:	429c      	cmp	r4, r3
 800272c:	bf94      	ite	ls
 800272e:	ebc1 0404 	rsbls	r4, r1, r4
 8002732:	ebc1 0403 	rsbhi	r4, r1, r3
 8002736:	b2e3      	uxtb	r3, r4
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002738:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800273a:	9503      	str	r5, [sp, #12]
 800273c:	68a4      	ldr	r4, [r4, #8]
 800273e:	46a4      	mov	ip, r4
    }
}
 8002740:	bc70      	pop	{r4, r5, r6}
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002742:	4760      	bx	ip
	else if ( dir == 3 )
 8002744:	2d03      	cmp	r5, #3
	  y++;
 8002746:	bf02      	ittt	eq
 8002748:	3201      	addeq	r2, #1
 800274a:	1ad2      	subeq	r2, r2, r3
 800274c:	b2d2      	uxtbeq	r2, r2
 800274e:	e7d0      	b.n	80026f2 <u8g2_DrawHVLine+0x20>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002750:	4631      	mov	r1, r6
  if ( a >= d )
 8002752:	428c      	cmp	r4, r1
 8002754:	d8e4      	bhi.n	8002720 <u8g2_DrawHVLine+0x4e>
}
 8002756:	bc70      	pop	{r4, r5, r6}
 8002758:	4770      	bx	lr
	if ( x < u8g2->user_x0 )
 800275a:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800275e:	428c      	cmp	r4, r1
 8002760:	d8f9      	bhi.n	8002756 <u8g2_DrawHVLine+0x84>
	if ( x >= u8g2->user_x1 )
 8002762:	f890 4046 	ldrb.w	r4, [r0, #70]	; 0x46
 8002766:	428c      	cmp	r4, r1
 8002768:	d9f5      	bls.n	8002756 <u8g2_DrawHVLine+0x84>
  b += *len;
 800276a:	4413      	add	r3, r2
 800276c:	b2db      	uxtb	r3, r3
  if ( a > b )
 800276e:	4293      	cmp	r3, r2
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002770:	f890 6047 	ldrb.w	r6, [r0, #71]	; 0x47
 8002774:	f890 4048 	ldrb.w	r4, [r0, #72]	; 0x48
  if ( a > b )
 8002778:	d210      	bcs.n	800279c <u8g2_DrawHVLine+0xca>
    if ( a < d )
 800277a:	4294      	cmp	r4, r2
 800277c:	d90d      	bls.n	800279a <u8g2_DrawHVLine+0xc8>
      b--;
 800277e:	1e63      	subs	r3, r4, #1
 8002780:	b2db      	uxtb	r3, r3
  if ( b <= c )
 8002782:	429e      	cmp	r6, r3
 8002784:	d2e7      	bcs.n	8002756 <u8g2_DrawHVLine+0x84>
  if ( a < c )		
 8002786:	42b2      	cmp	r2, r6
 8002788:	bf38      	it	cc
 800278a:	4632      	movcc	r2, r6
  b -= a;
 800278c:	429c      	cmp	r4, r3
 800278e:	bf94      	ite	ls
 8002790:	ebc2 0404 	rsbls	r4, r2, r4
 8002794:	ebc2 0403 	rsbhi	r4, r2, r3
 8002798:	e7cd      	b.n	8002736 <u8g2_DrawHVLine+0x64>
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800279a:	4632      	mov	r2, r6
  if ( a >= d )
 800279c:	4294      	cmp	r4, r2
 800279e:	d8f0      	bhi.n	8002782 <u8g2_DrawHVLine+0xb0>
 80027a0:	e7d9      	b.n	8002756 <u8g2_DrawHVLine+0x84>

080027a2 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
 80027a2:	428a      	cmp	r2, r1
 80027a4:	d206      	bcs.n	80027b4 <u8g2_is_intersection_decision_tree+0x12>
  {
    if ( v1 > a0 )	// v1 >= a0
 80027a6:	4283      	cmp	r3, r0
 80027a8:	d808      	bhi.n	80027bc <u8g2_is_intersection_decision_tree+0x1a>
    {
      return 1;
 80027aa:	429a      	cmp	r2, r3
 80027ac:	bf94      	ite	ls
 80027ae:	2000      	movls	r0, #0
 80027b0:	2001      	movhi	r0, #1
 80027b2:	4770      	bx	lr
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80027b4:	4283      	cmp	r3, r0
 80027b6:	d8f8      	bhi.n	80027aa <u8g2_is_intersection_decision_tree+0x8>
	return 0;
      }
    }
    else
    {
      return 0;
 80027b8:	2000      	movs	r0, #0
 80027ba:	4770      	bx	lr
      return 1;
 80027bc:	2001      	movs	r0, #1
    }
  }
}
 80027be:	4770      	bx	lr

080027c0 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	461e      	mov	r6, r3
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80027c8:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
 80027cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80027d0:	f890 0047 	ldrb.w	r0, [r0, #71]	; 0x47
 80027d4:	f7ff ffe5 	bl	80027a2 <u8g2_is_intersection_decision_tree>
 80027d8:	b148      	cbz	r0, 80027ee <u8g2_IsIntersection+0x2e>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80027da:	4633      	mov	r3, r6
 80027dc:	462a      	mov	r2, r5
 80027de:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80027e2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
}
 80027e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80027ea:	f7ff bfda 	b.w	80027a2 <u8g2_is_intersection_decision_tree>
}
 80027ee:	bd70      	pop	{r4, r5, r6, pc}

080027f0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
 80027f2:	2401      	movs	r4, #1

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
 80027f4:	f890 5086 	ldrb.w	r5, [r0, #134]	; 0x86
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80027f8:	f002 0607 	and.w	r6, r2, #7
  mask <<= bit_pos;
 80027fc:	40b4      	lsls	r4, r6
  if ( u8g2->draw_color <= 1 )
 80027fe:	2d01      	cmp	r5, #1
{
 8002800:	f89d 7014 	ldrb.w	r7, [sp, #20]
  mask <<= bit_pos;
 8002804:	b2e4      	uxtb	r4, r4
  if ( u8g2->draw_color <= 1 )
 8002806:	d815      	bhi.n	8002834 <u8g2_ll_hvline_vertical_top_lsb+0x44>
    or_mask  = mask;
 8002808:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
 800280a:	d015      	beq.n	8002838 <u8g2_ll_hvline_vertical_top_lsb+0x48>
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
 800280c:	f002 0cf8 	and.w	ip, r2, #248	; 0xf8
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002810:	6802      	ldr	r2, [r0, #0]
 8002812:	f892 e010 	ldrb.w	lr, [r2, #16]
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
 8002816:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002818:	fb0e 110c 	mla	r1, lr, ip, r1
 800281c:	4411      	add	r1, r2
  
  if ( dir == 0 )
 800281e:	b96f      	cbnz	r7, 800283c <u8g2_ll_hvline_vertical_top_lsb+0x4c>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002820:	780a      	ldrb	r2, [r1, #0]
	*ptr ^= xor_mask;
	ptr++;
	len--;
 8002822:	3b01      	subs	r3, #1
	*ptr |= or_mask;
 8002824:	432a      	orrs	r2, r5
	*ptr ^= xor_mask;
 8002826:	4062      	eors	r2, r4
      } while( len != 0 );
 8002828:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
	*ptr ^= xor_mask;
 800282c:	f801 2b01 	strb.w	r2, [r1], #1
      } while( len != 0 );
 8002830:	d1f6      	bne.n	8002820 <u8g2_ll_hvline_vertical_top_lsb+0x30>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002832:	bdf0      	pop	{r4, r5, r6, r7, pc}
  or_mask = 0;
 8002834:	2500      	movs	r5, #0
 8002836:	e7e9      	b.n	800280c <u8g2_ll_hvline_vertical_top_lsb+0x1c>
  xor_mask = 0;
 8002838:	2400      	movs	r4, #0
 800283a:	e7e7      	b.n	800280c <u8g2_ll_hvline_vertical_top_lsb+0x1c>
      *ptr |= or_mask;
 800283c:	780a      	ldrb	r2, [r1, #0]
      bit_pos++;
 800283e:	3601      	adds	r6, #1
      *ptr |= or_mask;
 8002840:	432a      	orrs	r2, r5
      *ptr ^= xor_mask;
 8002842:	4062      	eors	r2, r4
      len--;
 8002844:	3b01      	subs	r3, #1
      if ( bit_pos == 0 )
 8002846:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
 800284a:	700a      	strb	r2, [r1, #0]
      len--;
 800284c:	b2db      	uxtb	r3, r3
      if ( bit_pos == 0 )
 800284e:	d10c      	bne.n	800286a <u8g2_ll_hvline_vertical_top_lsb+0x7a>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002850:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8002854:	4411      	add	r1, r2
	if ( u8g2->draw_color <= 1 )
 8002856:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
 800285a:	2a01      	cmp	r2, #1
 800285c:	d80a      	bhi.n	8002874 <u8g2_ll_hvline_vertical_top_lsb+0x84>
	if ( u8g2->draw_color != 1 )
 800285e:	d00b      	beq.n	8002878 <u8g2_ll_hvline_vertical_top_lsb+0x88>
	  xor_mask = 1;
 8002860:	2401      	movs	r4, #1
	  or_mask  = 1;
 8002862:	4625      	mov	r5, r4
    } while( len != 0 );
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e9      	bne.n	800283c <u8g2_ll_hvline_vertical_top_lsb+0x4c>
 8002868:	e7e3      	b.n	8002832 <u8g2_ll_hvline_vertical_top_lsb+0x42>
	or_mask <<= 1;
 800286a:	006d      	lsls	r5, r5, #1
	xor_mask <<= 1;
 800286c:	0064      	lsls	r4, r4, #1
	or_mask <<= 1;
 800286e:	b2ed      	uxtb	r5, r5
	xor_mask <<= 1;
 8002870:	b2e4      	uxtb	r4, r4
 8002872:	e7f7      	b.n	8002864 <u8g2_ll_hvline_vertical_top_lsb+0x74>
	  xor_mask = 1;
 8002874:	2401      	movs	r4, #1
 8002876:	e7f5      	b.n	8002864 <u8g2_ll_hvline_vertical_top_lsb+0x74>
	  or_mask  = 1;
 8002878:	4615      	mov	r5, r2
 800287a:	e7f3      	b.n	8002864 <u8g2_ll_hvline_vertical_top_lsb+0x74>

0800287c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800287c:	b570      	push	{r4, r5, r6, lr}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800287e:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002882:	6801      	ldr	r1, [r0, #0]
  t *= 8;
 8002884:	00e3      	lsls	r3, r4, #3
  u8g2->pixel_buf_height = t;
 8002886:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
  
  t = display_info->tile_width;
 800288a:	7c0a      	ldrb	r2, [r1, #16]
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
 800288c:	f890 503d 	ldrb.w	r5, [r0, #61]	; 0x3d
 8002890:	2a1f      	cmp	r2, #31
 8002892:	bf28      	it	cs
 8002894:	221f      	movcs	r2, #31
  t *= 8;
 8002896:	00eb      	lsls	r3, r5, #3
 8002898:	b2db      	uxtb	r3, r3
  t *= 8;
 800289a:	00d2      	lsls	r2, r2, #3
  u8g2->pixel_curr_row = t;
 800289c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  u8g2->pixel_buf_width = t;
 80028a0:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80028a4:	7c4a      	ldrb	r2, [r1, #17]
 80028a6:	1966      	adds	r6, r4, r5
 80028a8:	4296      	cmp	r6, r2
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028aa:	bfc8      	it	gt
 80028ac:	1b54      	subgt	r4, r2, r5
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80028ae:	f04f 02f0 	mov.w	r2, #240	; 0xf0
    t = display_info->tile_height - u8g2->tile_curr_row;
 80028b2:	bfc8      	it	gt
 80028b4:	b2e4      	uxtbgt	r4, r4
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80028b6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  u8g2->buf_y1 += t;
 80028ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
  u8g2->width = 240;
 80028be:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
  u8g2->buf_y1 += t;
 80028c2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if ( display_info->pixel_width <= 240 )
 80028c6:	8a8b      	ldrh	r3, [r1, #20]
    u8g2->width = display_info->pixel_width;
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf88      	it	hi
 80028cc:	4613      	movhi	r3, r2
 80028ce:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80028d2:	8acb      	ldrh	r3, [r1, #22]
 80028d4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
#endif

}
 80028d8:	bd70      	pop	{r4, r5, r6, pc}

080028da <u8g2_update_dimension_r0>:
/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
 80028da:	f7ff bfcf 	b.w	800287c <u8g2_update_dimension_common>

080028de <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80028de:	b410      	push	{r4}
 80028e0:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80028e4:	9401      	str	r4, [sp, #4]
}
 80028e6:	bc10      	pop	{r4}
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80028e8:	f7ff bee7 	b.w	80026ba <u8g2_draw_hv_line_2dir>

080028ec <u8g2_apply_clip_window>:
{
 80028ec:	b513      	push	{r0, r1, r4, lr}
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028ee:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
{
 80028f2:	4604      	mov	r4, r0
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
 80028fa:	f890 204b 	ldrb.w	r2, [r0, #75]	; 0x4b
 80028fe:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 8002902:	f7ff ff5d 	bl	80027c0 <u8g2_IsIntersection>
 8002906:	b918      	cbnz	r0, 8002910 <u8g2_apply_clip_window+0x24>
    u8g2->is_page_clip_window_intersection = 0;
 8002908:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 800290c:	b002      	add	sp, #8
 800290e:	bd10      	pop	{r4, pc}
    u8g2->is_page_clip_window_intersection = 1;
 8002910:	2301      	movs	r3, #1
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002912:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
    u8g2->is_page_clip_window_intersection = 1;
 8002916:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800291a:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 800291e:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
 8002920:	bf38      	it	cc
 8002922:	f884 3045 	strbcc.w	r3, [r4, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002926:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800292a:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800292e:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
 8002930:	bf88      	it	hi
 8002932:	f884 3046 	strbhi.w	r3, [r4, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002936:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 800293a:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 800293e:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
 8002940:	bf38      	it	cc
 8002942:	f884 3047 	strbcc.w	r3, [r4, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002946:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800294a:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800294e:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
 8002950:	bf88      	it	hi
 8002952:	f884 3048 	strbhi.w	r3, [r4, #72]	; 0x48
}
 8002956:	e7d9      	b.n	800290c <u8g2_apply_clip_window+0x20>

08002958 <u8g2_update_page_win_r0>:
  u8g2->user_x0 = 0;
 8002958:	2200      	movs	r2, #0
 800295a:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800295e:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8002962:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
  u8g2->user_y0 = u8g2->buf_y0;
 8002966:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800296a:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 800296e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
 8002972:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
  u8g2_apply_clip_window(u8g2);
 8002976:	f7ff bfb9 	b.w	80028ec <u8g2_apply_clip_window>

0800297a <u8g2_SetMaxClipWindow>:
  u8g2->clip_x0 = 0;
 800297a:	2200      	movs	r2, #0
 800297c:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002980:	22ff      	movs	r2, #255	; 0xff
  u8g2->cb->update_page_win(u8g2);
 8002982:	6b43      	ldr	r3, [r0, #52]	; 0x34
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002984:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002988:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
  u8g2->cb->update_page_win(u8g2);
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	4718      	bx	r3

08002990 <u8g2_SetupBuffer>:
{
 8002990:	b570      	push	{r4, r5, r6, lr}
  u8g2->font = NULL;
 8002992:	2500      	movs	r5, #0
  u8g2->ll_hvline = ll_hvline_cb;
 8002994:	6303      	str	r3, [r0, #48]	; 0x30
  u8g2->draw_color = 1;
 8002996:	f240 1301 	movw	r3, #257	; 0x101
{
 800299a:	4604      	mov	r4, r0
 800299c:	9e04      	ldr	r6, [sp, #16]
  u8g2->tile_buf_height = tile_buf_height;
 800299e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  u8g2->tile_curr_row = 0;
 80029a2:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80029a6:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 80029aa:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
  u8g2->draw_color = 1;
 80029ae:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
  u8g2->tile_buf_ptr = buf;
 80029b2:	6381      	str	r1, [r0, #56]	; 0x38
  u8g2->cb->update_dimension(u8g2);
 80029b4:	6833      	ldr	r3, [r6, #0]
  u8g2->font = NULL;
 80029b6:	6505      	str	r5, [r0, #80]	; 0x50
  u8g2->cb = u8g2_cb;
 80029b8:	6346      	str	r6, [r0, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80029ba:	4798      	blx	r3
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff ffdc 	bl	800297a <u8g2_SetMaxClipWindow>
  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80029c2:	4620      	mov	r0, r4
 80029c4:	f7ff fe5e 	bl	8002684 <u8g2_SetFontPosBaseline>
  u8g2->font_decode.dir = 0;
 80029c8:	f884 5066 	strb.w	r5, [r4, #102]	; 0x66
}
 80029cc:	bd70      	pop	{r4, r5, r6, pc}

080029ce <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80029ce:	b119      	cbz	r1, 80029d8 <u8x8_ascii_next+0xa>
 80029d0:	290a      	cmp	r1, #10
 80029d2:	d001      	beq.n	80029d8 <u8x8_ascii_next+0xa>
    return 0x0ffff;	/* end of string detected*/
  return b;
 80029d4:	b288      	uxth	r0, r1
 80029d6:	4770      	bx	lr
    return 0x0ffff;	/* end of string detected*/
 80029d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80029dc:	4770      	bx	lr

080029de <u8x8_utf8_init>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80029de:	2300      	movs	r3, #0
 80029e0:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
}
 80029e4:	4770      	bx	lr

080029e6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80029e6:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80029e8:	6904      	ldr	r4, [r0, #16]
{
 80029ea:	4613      	mov	r3, r2
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80029ec:	46a4      	mov	ip, r4
 80029ee:	460a      	mov	r2, r1
}
 80029f0:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80029f2:	2117      	movs	r1, #23
 80029f4:	4760      	bx	ip

080029f6 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80029f6:	b507      	push	{r0, r1, r2, lr}
 80029f8:	f88d 1007 	strb.w	r1, [sp, #7]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80029fc:	f10d 0207 	add.w	r2, sp, #7
 8002a00:	2101      	movs	r1, #1
 8002a02:	f7ff fff0 	bl	80029e6 <u8x8_byte_SendBytes>
}
 8002a06:	b003      	add	sp, #12
 8002a08:	f85d fb04 	ldr.w	pc, [sp], #4

08002a0c <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a0c:	2300      	movs	r3, #0
{
 8002a0e:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a10:	6904      	ldr	r4, [r0, #16]
 8002a12:	461a      	mov	r2, r3
 8002a14:	46a4      	mov	ip, r4
 8002a16:	2118      	movs	r1, #24
}
 8002a18:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002a1a:	4760      	bx	ip

08002a1c <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a1c:	2300      	movs	r3, #0
{
 8002a1e:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a20:	6904      	ldr	r4, [r0, #16]
 8002a22:	461a      	mov	r2, r3
 8002a24:	46a4      	mov	ip, r4
 8002a26:	2119      	movs	r1, #25
}
 8002a28:	bc10      	pop	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002a2a:	4760      	bx	ip

08002a2c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4616      	mov	r6, r2
 8002a32:	460d      	mov	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
 8002a34:	f7ff ffea 	bl	8002a0c <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002a38:	2140      	movs	r1, #64	; 0x40
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7ff ffdb 	bl	80029f6 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002a40:	4633      	mov	r3, r6
 8002a42:	462a      	mov	r2, r5
 8002a44:	4620      	mov	r0, r4
 8002a46:	6927      	ldr	r7, [r4, #16]
 8002a48:	2117      	movs	r1, #23
 8002a4a:	47b8      	blx	r7
    u8x8_byte_EndTransfer(u8x8);
 8002a4c:	4620      	mov	r0, r4
}
 8002a4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    u8x8_byte_EndTransfer(u8x8);
 8002a52:	f7ff bfe3 	b.w	8002a1c <u8x8_byte_EndTransfer>

08002a56 <u8x8_cad_SendCmd>:
{
 8002a56:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002a58:	68c4      	ldr	r4, [r0, #12]
{
 8002a5a:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002a5c:	46a4      	mov	ip, r4
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2115      	movs	r1, #21
}
 8002a62:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002a64:	4760      	bx	ip

08002a66 <u8x8_cad_SendArg>:
{
 8002a66:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002a68:	68c4      	ldr	r4, [r0, #12]
{
 8002a6a:	460a      	mov	r2, r1
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2116      	movs	r1, #22
}
 8002a72:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002a74:	4760      	bx	ip

08002a76 <u8x8_cad_SendData>:
{
 8002a76:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002a78:	68c4      	ldr	r4, [r0, #12]
{
 8002a7a:	4613      	mov	r3, r2
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002a7c:	46a4      	mov	ip, r4
 8002a7e:	460a      	mov	r2, r1
}
 8002a80:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002a82:	2117      	movs	r1, #23
 8002a84:	4760      	bx	ip

08002a86 <u8x8_cad_StartTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002a86:	2300      	movs	r3, #0
{
 8002a88:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002a8a:	68c4      	ldr	r4, [r0, #12]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	46a4      	mov	ip, r4
 8002a90:	2118      	movs	r1, #24
}
 8002a92:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002a94:	4760      	bx	ip

08002a96 <u8x8_cad_EndTransfer>:
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002a96:	2300      	movs	r3, #0
{
 8002a98:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002a9a:	68c4      	ldr	r4, [r0, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	46a4      	mov	ip, r4
 8002aa0:	2119      	movs	r1, #25
}
 8002aa2:	bc10      	pop	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002aa4:	4760      	bx	ip

08002aa6 <u8x8_cad_SendSequence>:
{
 8002aa6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	460c      	mov	r4, r1
    cmd = *data;
 8002aac:	7821      	ldrb	r1, [r4, #0]
    switch( cmd )
 8002aae:	2919      	cmp	r1, #25
 8002ab0:	d80d      	bhi.n	8002ace <u8x8_cad_SendSequence+0x28>
 8002ab2:	2917      	cmp	r1, #23
 8002ab4:	d819      	bhi.n	8002aea <u8x8_cad_SendSequence+0x44>
 8002ab6:	d00e      	beq.n	8002ad6 <u8x8_cad_SendSequence+0x30>
 8002ab8:	2914      	cmp	r1, #20
 8002aba:	d90a      	bls.n	8002ad2 <u8x8_cad_SendSequence+0x2c>
	  v = *data;
 8002abc:	7862      	ldrb	r2, [r4, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	68ee      	ldr	r6, [r5, #12]
	  v = *data;
 8002ac4:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002ac8:	47b0      	blx	r6
	  data++;
 8002aca:	3402      	adds	r4, #2
	  break;
 8002acc:	e7ee      	b.n	8002aac <u8x8_cad_SendSequence+0x6>
    switch( cmd )
 8002ace:	29fe      	cmp	r1, #254	; 0xfe
 8002ad0:	d012      	beq.n	8002af8 <u8x8_cad_SendSequence+0x52>
}
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd70      	pop	{r4, r5, r6, pc}
	  v = *data;
 8002ad6:	7863      	ldrb	r3, [r4, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4628      	mov	r0, r5
 8002adc:	f10d 0207 	add.w	r2, sp, #7
	  v = *data;
 8002ae0:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002ae4:	f7ff ffc7 	bl	8002a76 <u8x8_cad_SendData>
	  data++;
 8002ae8:	e7ef      	b.n	8002aca <u8x8_cad_SendSequence+0x24>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002aea:	2300      	movs	r3, #0
 8002aec:	4628      	mov	r0, r5
 8002aee:	461a      	mov	r2, r3
 8002af0:	68ee      	ldr	r6, [r5, #12]
    data++;
 8002af2:	3401      	adds	r4, #1
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002af4:	47b0      	blx	r6
	  break;
 8002af6:	e7d9      	b.n	8002aac <u8x8_cad_SendSequence+0x6>
	  v = *data;
 8002af8:	7862      	ldrb	r2, [r4, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002afa:	2129      	movs	r1, #41	; 0x29
 8002afc:	4628      	mov	r0, r5
	  v = *data;
 8002afe:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002b02:	f000 f946 	bl	8002d92 <u8x8_gpio_call>
 8002b06:	e7e0      	b.n	8002aca <u8x8_cad_SendSequence+0x24>

08002b08 <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 8002b08:	3914      	subs	r1, #20
{
 8002b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	4615      	mov	r5, r2
 8002b12:	461e      	mov	r6, r3
 8002b14:	2905      	cmp	r1, #5
 8002b16:	d84e      	bhi.n	8002bb6 <u8x8_cad_ssd13xx_fast_i2c+0xae>
 8002b18:	e8df f001 	tbb	[pc, r1]
 8002b1c:	1c170333 	.word	0x1c170333
 8002b20:	4541      	.short	0x4541
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8002b22:	4e26      	ldr	r6, [pc, #152]	; (8002bbc <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002b24:	7832      	ldrb	r2, [r6, #0]
 8002b26:	b10a      	cbz	r2, 8002b2c <u8x8_cad_ssd13xx_fast_i2c+0x24>
	 u8x8_byte_EndTransfer(u8x8); 
 8002b28:	f7ff ff78 	bl	8002a1c <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff ff6d 	bl	8002a0c <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8002b32:	2100      	movs	r1, #0
 8002b34:	4620      	mov	r0, r4
 8002b36:	f7ff ff5e 	bl	80029f6 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff ff5a 	bl	80029f6 <u8x8_byte_SendByte>
      in_transfer = 1;
 8002b42:	2001      	movs	r0, #1
 8002b44:	7030      	strb	r0, [r6, #0]
      break;
    default:
      return 0;
  }
  return 1;
}
 8002b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_byte_SendByte(u8x8, arg_int);
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	f7ff ff53 	bl	80029f6 <u8x8_byte_SendByte>
  return 1;
 8002b50:	2001      	movs	r0, #1
      break;
 8002b52:	e7f8      	b.n	8002b46 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
      if ( in_transfer != 0 )
 8002b54:	4f19      	ldr	r7, [pc, #100]	; (8002bbc <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002b56:	783a      	ldrb	r2, [r7, #0]
 8002b58:	b10a      	cbz	r2, 8002b5e <u8x8_cad_ssd13xx_fast_i2c+0x56>
	u8x8_byte_EndTransfer(u8x8); 
 8002b5a:	f7ff ff5f 	bl	8002a1c <u8x8_byte_EndTransfer>
       while( arg_int > 24 )
 8002b5e:	2d18      	cmp	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002b60:	4632      	mov	r2, r6
       while( arg_int > 24 )
 8002b62:	d806      	bhi.n	8002b72 <u8x8_cad_ssd13xx_fast_i2c+0x6a>
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002b64:	4629      	mov	r1, r5
 8002b66:	4620      	mov	r0, r4
 8002b68:	f7ff ff60 	bl	8002a2c <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	703b      	strb	r3, [r7, #0]
      break;
 8002b70:	e7ee      	b.n	8002b50 <u8x8_cad_ssd13xx_fast_i2c+0x48>
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002b72:	2118      	movs	r1, #24
 8002b74:	4620      	mov	r0, r4
	arg_int-=24;
 8002b76:	3d18      	subs	r5, #24
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002b78:	f7ff ff58 	bl	8002a2c <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002b7c:	b2ed      	uxtb	r5, r5
	p+=24;
 8002b7e:	3618      	adds	r6, #24
 8002b80:	e7ed      	b.n	8002b5e <u8x8_cad_ssd13xx_fast_i2c+0x56>
      if ( u8x8->i2c_address == 255 )
 8002b82:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b86:	6907      	ldr	r7, [r0, #16]
      if ( u8x8->i2c_address == 255 )
 8002b88:	2bff      	cmp	r3, #255	; 0xff
	u8x8->i2c_address = 0x078;
 8002b8a:	bf04      	itt	eq
 8002b8c:	2378      	moveq	r3, #120	; 0x78
 8002b8e:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b92:	46bc      	mov	ip, r7
 8002b94:	4633      	mov	r3, r6
}
 8002b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002b9a:	2114      	movs	r1, #20
 8002b9c:	4760      	bx	ip
      in_transfer = 0;
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e7d4      	b.n	8002b50 <u8x8_cad_ssd13xx_fast_i2c+0x48>
      if ( in_transfer != 0 )
 8002ba6:	4d05      	ldr	r5, [pc, #20]	; (8002bbc <u8x8_cad_ssd13xx_fast_i2c+0xb4>)
 8002ba8:	782a      	ldrb	r2, [r5, #0]
 8002baa:	b10a      	cbz	r2, 8002bb0 <u8x8_cad_ssd13xx_fast_i2c+0xa8>
	u8x8_byte_EndTransfer(u8x8); 
 8002bac:	f7ff ff36 	bl	8002a1c <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	702b      	strb	r3, [r5, #0]
      break;
 8002bb4:	e7cc      	b.n	8002b50 <u8x8_cad_ssd13xx_fast_i2c+0x48>
  return 1;
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	e7c5      	b.n	8002b46 <u8x8_cad_ssd13xx_fast_i2c+0x3e>
 8002bba:	bf00      	nop
 8002bbc:	20000e2d 	.word	0x20000e2d

08002bc0 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002bc0:	390b      	subs	r1, #11
{
 8002bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc4:	4604      	mov	r4, r0
 8002bc6:	4615      	mov	r5, r2
 8002bc8:	461e      	mov	r6, r3
 8002bca:	2904      	cmp	r1, #4
 8002bcc:	d855      	bhi.n	8002c7a <u8x8_d_ssd1306_sh1106_generic+0xba>
 8002bce:	e8df f001 	tbb	[pc, r1]
 8002bd2:	5403      	.short	0x5403
 8002bd4:	1b0c      	.short	0x1b0c
 8002bd6:	29          	.byte	0x29
 8002bd7:	00          	.byte	0x00
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002bd8:	b92a      	cbnz	r2, 8002be6 <u8x8_d_ssd1306_sh1106_generic+0x26>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
 8002bda:	4929      	ldr	r1, [pc, #164]	; (8002c80 <u8x8_d_ssd1306_sh1106_generic+0xc0>)
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ff62 	bl	8002aa6 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
 8002be2:	2001      	movs	r0, #1
}
 8002be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
 8002be6:	4927      	ldr	r1, [pc, #156]	; (8002c84 <u8x8_d_ssd1306_sh1106_generic+0xc4>)
 8002be8:	e7f8      	b.n	8002bdc <u8x8_d_ssd1306_sh1106_generic+0x1c>
      if ( arg_int == 0 )
 8002bea:	b93a      	cbnz	r2, 8002bfc <u8x8_d_ssd1306_sh1106_generic+0x3c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
 8002bec:	4926      	ldr	r1, [pc, #152]	; (8002c88 <u8x8_d_ssd1306_sh1106_generic+0xc8>)
 8002bee:	f7ff ff5a 	bl	8002aa6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	7c9b      	ldrb	r3, [r3, #18]
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002bf6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8002bfa:	e7f2      	b.n	8002be2 <u8x8_d_ssd1306_sh1106_generic+0x22>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
 8002bfc:	4923      	ldr	r1, [pc, #140]	; (8002c8c <u8x8_d_ssd1306_sh1106_generic+0xcc>)
 8002bfe:	f7ff ff52 	bl	8002aa6 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	7cdb      	ldrb	r3, [r3, #19]
 8002c06:	e7f6      	b.n	8002bf6 <u8x8_d_ssd1306_sh1106_generic+0x36>
      u8x8_cad_StartTransfer(u8x8);
 8002c08:	f7ff ff3d 	bl	8002a86 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002c0c:	2181      	movs	r1, #129	; 0x81
 8002c0e:	4620      	mov	r0, r4
 8002c10:	f7ff ff21 	bl	8002a56 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8002c14:	4629      	mov	r1, r5
 8002c16:	4620      	mov	r0, r4
 8002c18:	f7ff ff25 	bl	8002a66 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff3a 	bl	8002a96 <u8x8_cad_EndTransfer>
 8002c22:	e7de      	b.n	8002be2 <u8x8_d_ssd1306_sh1106_generic+0x22>
      u8x8_cad_StartTransfer(u8x8);
 8002c24:	f7ff ff2f 	bl	8002a86 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002c28:	7973      	ldrb	r3, [r6, #5]
      x += u8x8->x_offset;
 8002c2a:	f894 7022 	ldrb.w	r7, [r4, #34]	; 0x22
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002c2e:	2140      	movs	r1, #64	; 0x40
      x += u8x8->x_offset;
 8002c30:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8002c34:	f007 07ff 	and.w	r7, r7, #255	; 0xff
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7ff ff0c 	bl	8002a56 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002c3e:	0939      	lsrs	r1, r7, #4
 8002c40:	f041 0110 	orr.w	r1, r1, #16
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff ff06 	bl	8002a56 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
 8002c4a:	f007 010f 	and.w	r1, r7, #15
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7ff ff09 	bl	8002a66 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
 8002c54:	79b1      	ldrb	r1, [r6, #6]
 8002c56:	4620      	mov	r0, r4
 8002c58:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
 8002c5c:	f7ff ff03 	bl	8002a66 <u8x8_cad_SendArg>
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002c60:	7931      	ldrb	r1, [r6, #4]
 8002c62:	4620      	mov	r0, r4
 8002c64:	00c9      	lsls	r1, r1, #3
 8002c66:	6832      	ldr	r2, [r6, #0]
 8002c68:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
	arg_int--;
 8002c6c:	3d01      	subs	r5, #1
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002c6e:	f7ff ff02 	bl	8002a76 <u8x8_cad_SendData>
      } while( arg_int > 0 );
 8002c72:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8002c76:	d1f3      	bne.n	8002c60 <u8x8_d_ssd1306_sh1106_generic+0xa0>
 8002c78:	e7d0      	b.n	8002c1c <u8x8_d_ssd1306_sh1106_generic+0x5c>
  return 1;
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e7b2      	b.n	8002be4 <u8x8_d_ssd1306_sh1106_generic+0x24>
 8002c7e:	bf00      	nop
 8002c80:	0800dcf3 	.word	0x0800dcf3
 8002c84:	0800dcf8 	.word	0x0800dcf8
 8002c88:	0800dcb0 	.word	0x0800dcb0
 8002c8c:	0800dcb7 	.word	0x0800dcb7

08002c90 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
 8002c94:	460d      	mov	r5, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002c96:	f7ff ff93 	bl	8002bc0 <u8x8_d_ssd1306_sh1106_generic>
 8002c9a:	b950      	cbnz	r0, 8002cb2 <u8x8_d_ssd1306_128x64_noname+0x22>
    return 1;
  
  switch(msg)
 8002c9c:	2d09      	cmp	r5, #9
 8002c9e:	d00a      	beq.n	8002cb6 <u8x8_d_ssd1306_128x64_noname+0x26>
 8002ca0:	2d0a      	cmp	r5, #10
 8002ca2:	d107      	bne.n	8002cb4 <u8x8_d_ssd1306_128x64_noname+0x24>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 f814 	bl	8002cd2 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
 8002caa:	4620      	mov	r0, r4
 8002cac:	4904      	ldr	r1, [pc, #16]	; (8002cc0 <u8x8_d_ssd1306_128x64_noname+0x30>)
 8002cae:	f7ff fefa 	bl	8002aa6 <u8x8_cad_SendSequence>
    return 1;
 8002cb2:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
 8002cb4:	bd38      	pop	{r3, r4, r5, pc}
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	4902      	ldr	r1, [pc, #8]	; (8002cc4 <u8x8_d_ssd1306_128x64_noname+0x34>)
 8002cba:	f000 f805 	bl	8002cc8 <u8x8_d_helper_display_setup_memory>
      break;
 8002cbe:	e7f8      	b.n	8002cb2 <u8x8_d_ssd1306_128x64_noname+0x22>
 8002cc0:	0800dcbe 	.word	0x0800dcbe
 8002cc4:	0800dd00 	.word	0x0800dd00

08002cc8 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002cc8:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002cca:	7c8b      	ldrb	r3, [r1, #18]
 8002ccc:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8002cd0:	4770      	bx	lr

08002cd2 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002cd2:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2128      	movs	r1, #40	; 0x28
 8002cd8:	461a      	mov	r2, r3
 8002cda:	6945      	ldr	r5, [r0, #20]
{
 8002cdc:	4604      	mov	r4, r0
      u8x8_gpio_Init(u8x8);
 8002cde:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2114      	movs	r1, #20
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	68e5      	ldr	r5, [r4, #12]
 8002cea:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002cec:	4620      	mov	r0, r4
 8002cee:	2201      	movs	r2, #1
 8002cf0:	214b      	movs	r1, #75	; 0x4b
 8002cf2:	f000 f84e 	bl	8002d92 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	791a      	ldrb	r2, [r3, #4]
 8002cfc:	2129      	movs	r1, #41	; 0x29
 8002cfe:	f000 f848 	bl	8002d92 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002d02:	4620      	mov	r0, r4
 8002d04:	2200      	movs	r2, #0
 8002d06:	214b      	movs	r1, #75	; 0x4b
 8002d08:	f000 f843 	bl	8002d92 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	4620      	mov	r0, r4
 8002d10:	791a      	ldrb	r2, [r3, #4]
 8002d12:	2129      	movs	r1, #41	; 0x29
 8002d14:	f000 f83d 	bl	8002d92 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002d18:	4620      	mov	r0, r4
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	214b      	movs	r1, #75	; 0x4b
 8002d1e:	f000 f838 	bl	8002d92 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	4620      	mov	r0, r4
 8002d26:	795a      	ldrb	r2, [r3, #5]
 8002d28:	2129      	movs	r1, #41	; 0x29
}    
 8002d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002d2e:	f000 b830 	b.w	8002d92 <u8x8_gpio_call>

08002d32 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002d32:	b513      	push	{r0, r1, r4, lr}
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
 8002d34:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
 8002d38:	9b04      	ldr	r3, [sp, #16]
  tile.x_pos = x;
 8002d3a:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
 8002d3e:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.tile_ptr = tile_ptr;
 8002d42:	9300      	str	r3, [sp, #0]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002d44:	2201      	movs	r2, #1
 8002d46:	466b      	mov	r3, sp
 8002d48:	210f      	movs	r1, #15
 8002d4a:	6884      	ldr	r4, [r0, #8]
 8002d4c:	47a0      	blx	r4
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	bd10      	pop	{r4, pc}

08002d52 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002d52:	2300      	movs	r3, #0
{
 8002d54:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002d56:	6884      	ldr	r4, [r0, #8]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	46a4      	mov	ip, r4
 8002d5c:	2109      	movs	r1, #9
}
 8002d5e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002d60:	4760      	bx	ip

08002d62 <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002d62:	2300      	movs	r3, #0
{
 8002d64:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002d66:	6884      	ldr	r4, [r0, #8]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	46a4      	mov	ip, r4
 8002d6c:	210a      	movs	r1, #10
}
 8002d6e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8002d70:	4760      	bx	ip

08002d72 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002d72:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002d74:	6884      	ldr	r4, [r0, #8]
{
 8002d76:	460a      	mov	r2, r1
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002d78:	46a4      	mov	ip, r4
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	210b      	movs	r1, #11
}
 8002d7e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8002d80:	4760      	bx	ip

08002d82 <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002d82:	2300      	movs	r3, #0
{
 8002d84:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002d86:	6884      	ldr	r4, [r0, #8]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	46a4      	mov	ip, r4
 8002d8c:	2110      	movs	r1, #16
}
 8002d8e:	bc10      	pop	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8002d90:	4760      	bx	ip

08002d92 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002d92:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002d94:	6944      	ldr	r4, [r0, #20]
 8002d96:	2300      	movs	r3, #0
 8002d98:	46a4      	mov	ip, r4
}
 8002d9a:	bc10      	pop	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002d9c:	4760      	bx	ip

08002d9e <u8x8_dummy_cb>:
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
 8002d9e:	2000      	movs	r0, #0
 8002da0:	4770      	bx	lr
	...

08002da4 <u8x8_SetupDefaults>:
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	6003      	str	r3, [r0, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
 8002da8:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    u8x8->device_address = 0;
 8002dac:	84c3      	strh	r3, [r0, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
 8002dae:	6183      	str	r3, [r0, #24]
    u8x8->i2c_address = 255;
 8002db0:	23ff      	movs	r3, #255	; 0xff
    u8x8->display_cb = u8x8_dummy_cb;
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <u8x8_SetupDefaults+0x24>)
    u8x8->i2c_address = 255;
 8002db4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    u8x8->cad_cb = u8x8_dummy_cb;
 8002db8:	e9c0 2202 	strd	r2, r2, [r0, #8]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002dbc:	e9c0 2204 	strd	r2, r2, [r0, #16]
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002dc0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	08002d9f 	.word	0x08002d9f

08002dcc <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	9f06      	ldr	r7, [sp, #24]
 8002dd0:	4616      	mov	r6, r2
 8002dd2:	461d      	mov	r5, r3
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002dd4:	f7ff ffe6 	bl	8002da4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
 8002dd8:	e9c0 1602 	strd	r1, r6, [r0, #8]
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002ddc:	e9c0 5704 	strd	r5, r7, [r0, #16]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
 8002de0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  u8x8_SetupMemory(u8x8);
 8002de4:	f7ff bfb5 	b.w	8002d52 <u8x8_SetupMemory>

08002de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002de8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002dea:	e003      	b.n	8002df4 <LoopCopyDataInit>

08002dec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002dee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002df0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002df2:	3104      	adds	r1, #4

08002df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002df8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002dfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002dfc:	d3f6      	bcc.n	8002dec <CopyDataInit>
  ldr r2, =_sbss
 8002dfe:	4a0a      	ldr	r2, [pc, #40]	; (8002e28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002e00:	e002      	b.n	8002e08 <LoopFillZerobss>

08002e02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002e02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002e04:	f842 3b04 	str.w	r3, [r2], #4

08002e08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002e0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002e0c:	d3f9      	bcc.n	8002e02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e0e:	f7ff f865 	bl	8001edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e12:	f006 fde9 	bl	80099e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e16:	f7fe fa63 	bl	80012e0 <main>
  bx lr
 8002e1a:	4770      	bx	lr
  ldr r3, =_sidata
 8002e1c:	0800e16c 	.word	0x0800e16c
  ldr r0, =_sdata
 8002e20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002e24:	20000350 	.word	0x20000350
  ldr r2, =_sbss
 8002e28:	20000350 	.word	0x20000350
  ldr r3, = _ebss
 8002e2c:	200032fc 	.word	0x200032fc

08002e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e30:	e7fe      	b.n	8002e30 <ADC1_2_IRQHandler>
	...

08002e34 <Max6675_Read_TempValue>:
	Temp*=0.25;                                           // Data to Centigrade Conversation
	*tempartureVariable = Temp;
}

int8_t Max6675_Read_TempValue(float* tempartureVariable)
{
 8002e34:	b570      	push	{r4, r5, r6, lr}
	float Temp=0;                                  // Temperature Variable
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 8002e36:	4e11      	ldr	r6, [pc, #68]	; (8002e7c <Max6675_Read_TempValue+0x48>)
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 8002e38:	4d11      	ldr	r5, [pc, #68]	; (8002e80 <Max6675_Read_TempValue+0x4c>)
{
 8002e3a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_RESET);       // Low State for SPI Communication
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	4630      	mov	r0, r6
 8002e40:	2110      	movs	r1, #16
 8002e42:	f000 fa93 	bl	800336c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, DATARX, 1, 50);  // DATA Transfer
 8002e46:	2332      	movs	r3, #50	; 0x32
 8002e48:	4629      	mov	r1, r5
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <Max6675_Read_TempValue+0x50>)
 8002e4e:	f002 fe29 	bl	8005aa4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(MAX6675_NSS_GPIO_Port,MAX6675_NSS_Pin,GPIO_PIN_SET);         // High State for SPI Communication
 8002e52:	2201      	movs	r2, #1
 8002e54:	2110      	movs	r1, #16
 8002e56:	4630      	mov	r0, r6
 8002e58:	f000 fa88 	bl	800336c <HAL_GPIO_WritePin>
	TCF=(((DATARX[0]|(DATARX[1]<<8))>>2)& 0x0001);        // State of Connecting
 8002e5c:	8828      	ldrh	r0, [r5, #0]
 8002e5e:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <Max6675_Read_TempValue+0x54>)
 8002e60:	f3c0 0580 	ubfx	r5, r0, #2, #1
 8002e64:	701d      	strb	r5, [r3, #0]
	Temp=((((DATARX[0]|DATARX[1]<<8)))>>3);               // Temperature Data Extraction
 8002e66:	08c0      	lsrs	r0, r0, #3
 8002e68:	f7fd fec8 	bl	8000bfc <__aeabi_i2f>
	Temp*=0.25;                                           // Data to Centigrade Conversation
 8002e6c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8002e70:	f7fd ff18 	bl	8000ca4 <__aeabi_fmul>
	*tempartureVariable = Temp;
	AlarmVar = TCF;
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <Max6675_Read_TempValue+0x58>)
	*tempartureVariable = Temp;
 8002e76:	6020      	str	r0, [r4, #0]
	AlarmVar = TCF;
 8002e78:	701d      	strb	r5, [r3, #0]
}
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	40010800 	.word	0x40010800
 8002e80:	20002320 	.word	0x20002320
 8002e84:	20001f98 	.word	0x20001f98
 8002e88:	20000e2e 	.word	0x20000e2e
 8002e8c:	20000a04 	.word	0x20000a04

08002e90 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e90:	4a07      	ldr	r2, [pc, #28]	; (8002eb0 <HAL_Init+0x20>)
{
 8002e92:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e94:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e96:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e98:	f043 0310 	orr.w	r3, r3, #16
 8002e9c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e9e:	f000 f82d 	bl	8002efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe ff46 	bl	8001d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea8:	f7fe fd44 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002eac:	2000      	movs	r0, #0
 8002eae:	bd08      	pop	{r3, pc}
 8002eb0:	40022000 	.word	0x40022000

08002eb4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_IncTick+0x10>)
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_IncTick+0x14>)
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	440b      	add	r3, r1
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20002328 	.word	0x20002328
 8002ec8:	20000004 	.word	0x20000004

08002ecc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ecc:	4b01      	ldr	r3, [pc, #4]	; (8002ed4 <HAL_GetTick+0x8>)
 8002ece:	6818      	ldr	r0, [r3, #0]
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20002328 	.word	0x20002328

08002ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002edc:	f7ff fff6 	bl	8002ecc <HAL_GetTick>
 8002ee0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ee2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002ee4:	bf1e      	ittt	ne
 8002ee6:	4b04      	ldrne	r3, [pc, #16]	; (8002ef8 <HAL_Delay+0x20>)
 8002ee8:	781b      	ldrbne	r3, [r3, #0]
 8002eea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eec:	f7ff ffee 	bl	8002ecc <HAL_GetTick>
 8002ef0:	1b43      	subs	r3, r0, r5
 8002ef2:	42a3      	cmp	r3, r4
 8002ef4:	d3fa      	bcc.n	8002eec <HAL_Delay+0x14>
  {
  }
}
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002efe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f0a:	0412      	lsls	r2, r2, #16
 8002f0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f22:	b530      	push	{r4, r5, lr}
 8002f24:	68dc      	ldr	r4, [r3, #12]
 8002f26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	bf28      	it	cs
 8002f34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f36:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f3c:	bf98      	it	ls
 8002f3e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f44:	bf88      	it	hi
 8002f46:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f48:	ea21 0303 	bic.w	r3, r1, r3
 8002f4c:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4e:	fa05 f404 	lsl.w	r4, r5, r4
 8002f52:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8002f56:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	bfac      	ite	ge
 8002f5e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	4a07      	ldrlt	r2, [pc, #28]	; (8002f80 <HAL_NVIC_SetPriority+0x60>)
 8002f64:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f68:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6a:	bfab      	itete	ge
 8002f6c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f7a:	bd30      	pop	{r4, r5, pc}
 8002f7c:	e000ed00 	.word	0xe000ed00
 8002f80:	e000ed14 	.word	0xe000ed14

08002f84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f84:	2800      	cmp	r0, #0
 8002f86:	db08      	blt.n	8002f9a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f88:	2301      	movs	r3, #1
 8002f8a:	0942      	lsrs	r2, r0, #5
 8002f8c:	f000 001f 	and.w	r0, r0, #31
 8002f90:	fa03 f000 	lsl.w	r0, r3, r0
 8002f94:	4b01      	ldr	r3, [pc, #4]	; (8002f9c <HAL_NVIC_EnableIRQ+0x18>)
 8002f96:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f9a:	4770      	bx	lr
 8002f9c:	e000e100 	.word	0xe000e100

08002fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fa2:	b320      	cbz	r0, 8002fee <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fa4:	2214      	movs	r2, #20
 8002fa6:	6801      	ldr	r1, [r0, #0]
 8002fa8:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_DMA_Init+0x54>)
 8002faa:	440b      	add	r3, r1
 8002fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fb6:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8002fb8:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fba:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8002fbe:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc0:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fc2:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fca:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd0:	6944      	ldr	r4, [r0, #20]
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	6984      	ldr	r4, [r0, #24]
 8002fd6:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fd8:	69c4      	ldr	r4, [r0, #28]
 8002fda:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8002fdc:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fde:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe4:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8002fe6:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe8:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002fea:	4618      	mov	r0, r3
}
 8002fec:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002fee:	2001      	movs	r0, #1
 8002ff0:	e7fc      	b.n	8002fec <HAL_DMA_Init+0x4c>
 8002ff2:	bf00      	nop
 8002ff4:	bffdfff8 	.word	0xbffdfff8
 8002ff8:	40020000 	.word	0x40020000

08002ffc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ffc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ffe:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003002:	2b02      	cmp	r3, #2
 8003004:	d003      	beq.n	800300e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003006:	2304      	movs	r3, #4
 8003008:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800300a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800300c:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300e:	6803      	ldr	r3, [r0, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f022 020e 	bic.w	r2, r2, #14
 8003016:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003020:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_DMA_Abort_IT+0x84>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d01c      	beq.n	8003060 <HAL_DMA_Abort_IT+0x64>
 8003026:	3214      	adds	r2, #20
 8003028:	4293      	cmp	r3, r2
 800302a:	d01b      	beq.n	8003064 <HAL_DMA_Abort_IT+0x68>
 800302c:	3214      	adds	r2, #20
 800302e:	4293      	cmp	r3, r2
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_Abort_IT+0x6c>
 8003032:	3214      	adds	r2, #20
 8003034:	4293      	cmp	r3, r2
 8003036:	d01a      	beq.n	800306e <HAL_DMA_Abort_IT+0x72>
 8003038:	3214      	adds	r2, #20
 800303a:	4293      	cmp	r3, r2
 800303c:	d01a      	beq.n	8003074 <HAL_DMA_Abort_IT+0x78>
 800303e:	3214      	adds	r2, #20
 8003040:	4293      	cmp	r3, r2
 8003042:	bf0c      	ite	eq
 8003044:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8003048:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800304c:	4a0d      	ldr	r2, [pc, #52]	; (8003084 <HAL_DMA_Abort_IT+0x88>)
 800304e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003054:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003056:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003058:	b17b      	cbz	r3, 800307a <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 800305a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800305c:	2000      	movs	r0, #0
 800305e:	e7d5      	b.n	800300c <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003060:	2301      	movs	r3, #1
 8003062:	e7f3      	b.n	800304c <HAL_DMA_Abort_IT+0x50>
 8003064:	2310      	movs	r3, #16
 8003066:	e7f1      	b.n	800304c <HAL_DMA_Abort_IT+0x50>
 8003068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800306c:	e7ee      	b.n	800304c <HAL_DMA_Abort_IT+0x50>
 800306e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003072:	e7eb      	b.n	800304c <HAL_DMA_Abort_IT+0x50>
 8003074:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003078:	e7e8      	b.n	800304c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800307a:	4618      	mov	r0, r3
 800307c:	e7c6      	b.n	800300c <HAL_DMA_Abort_IT+0x10>
 800307e:	bf00      	nop
 8003080:	40020008 	.word	0x40020008
 8003084:	40020000 	.word	0x40020000

08003088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003088:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800308a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800308c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800308e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003090:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003092:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003094:	4095      	lsls	r5, r2
 8003096:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8003098:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800309a:	d032      	beq.n	8003102 <HAL_DMA_IRQHandler+0x7a>
 800309c:	074d      	lsls	r5, r1, #29
 800309e:	d530      	bpl.n	8003102 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030a4:	bf5e      	ittt	pl
 80030a6:	681a      	ldrpl	r2, [r3, #0]
 80030a8:	f022 0204 	bicpl.w	r2, r2, #4
 80030ac:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030ae:	4a3d      	ldr	r2, [pc, #244]	; (80031a4 <HAL_DMA_IRQHandler+0x11c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d019      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x60>
 80030b4:	3214      	adds	r2, #20
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d018      	beq.n	80030ec <HAL_DMA_IRQHandler+0x64>
 80030ba:	3214      	adds	r2, #20
 80030bc:	4293      	cmp	r3, r2
 80030be:	d017      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x68>
 80030c0:	3214      	adds	r2, #20
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d017      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x6e>
 80030c6:	3214      	adds	r2, #20
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d017      	beq.n	80030fc <HAL_DMA_IRQHandler+0x74>
 80030cc:	3214      	adds	r2, #20
 80030ce:	4293      	cmp	r3, r2
 80030d0:	bf0c      	ite	eq
 80030d2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80030d6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80030da:	4a33      	ldr	r2, [pc, #204]	; (80031a8 <HAL_DMA_IRQHandler+0x120>)
 80030dc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80030de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d05c      	beq.n	800319e <HAL_DMA_IRQHandler+0x116>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 80030e4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80030e6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030e8:	2304      	movs	r3, #4
 80030ea:	e7f6      	b.n	80030da <HAL_DMA_IRQHandler+0x52>
 80030ec:	2340      	movs	r3, #64	; 0x40
 80030ee:	e7f4      	b.n	80030da <HAL_DMA_IRQHandler+0x52>
 80030f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f4:	e7f1      	b.n	80030da <HAL_DMA_IRQHandler+0x52>
 80030f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030fa:	e7ee      	b.n	80030da <HAL_DMA_IRQHandler+0x52>
 80030fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003100:	e7eb      	b.n	80030da <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003102:	2502      	movs	r5, #2
 8003104:	4095      	lsls	r5, r2
 8003106:	4225      	tst	r5, r4
 8003108:	d035      	beq.n	8003176 <HAL_DMA_IRQHandler+0xee>
 800310a:	078d      	lsls	r5, r1, #30
 800310c:	d533      	bpl.n	8003176 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	0694      	lsls	r4, r2, #26
 8003112:	d406      	bmi.n	8003122 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	f022 020a 	bic.w	r2, r2, #10
 800311a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800311c:	2201      	movs	r2, #1
 800311e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003122:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_DMA_IRQHandler+0x11c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d019      	beq.n	800315c <HAL_DMA_IRQHandler+0xd4>
 8003128:	3214      	adds	r2, #20
 800312a:	4293      	cmp	r3, r2
 800312c:	d018      	beq.n	8003160 <HAL_DMA_IRQHandler+0xd8>
 800312e:	3214      	adds	r2, #20
 8003130:	4293      	cmp	r3, r2
 8003132:	d017      	beq.n	8003164 <HAL_DMA_IRQHandler+0xdc>
 8003134:	3214      	adds	r2, #20
 8003136:	4293      	cmp	r3, r2
 8003138:	d017      	beq.n	800316a <HAL_DMA_IRQHandler+0xe2>
 800313a:	3214      	adds	r2, #20
 800313c:	4293      	cmp	r3, r2
 800313e:	d017      	beq.n	8003170 <HAL_DMA_IRQHandler+0xe8>
 8003140:	3214      	adds	r2, #20
 8003142:	4293      	cmp	r3, r2
 8003144:	bf0c      	ite	eq
 8003146:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800314a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800314e:	4a16      	ldr	r2, [pc, #88]	; (80031a8 <HAL_DMA_IRQHandler+0x120>)
 8003150:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8003152:	2300      	movs	r3, #0
 8003154:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8003158:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800315a:	e7c1      	b.n	80030e0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800315c:	2302      	movs	r3, #2
 800315e:	e7f6      	b.n	800314e <HAL_DMA_IRQHandler+0xc6>
 8003160:	2320      	movs	r3, #32
 8003162:	e7f4      	b.n	800314e <HAL_DMA_IRQHandler+0xc6>
 8003164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003168:	e7f1      	b.n	800314e <HAL_DMA_IRQHandler+0xc6>
 800316a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800316e:	e7ee      	b.n	800314e <HAL_DMA_IRQHandler+0xc6>
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	e7eb      	b.n	800314e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003176:	2508      	movs	r5, #8
 8003178:	4095      	lsls	r5, r2
 800317a:	4225      	tst	r5, r4
 800317c:	d00f      	beq.n	800319e <HAL_DMA_IRQHandler+0x116>
 800317e:	0709      	lsls	r1, r1, #28
 8003180:	d50d      	bpl.n	800319e <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	f021 010e 	bic.w	r1, r1, #14
 8003188:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800318a:	2301      	movs	r3, #1
 800318c:	fa03 f202 	lsl.w	r2, r3, r2
 8003190:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003192:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8003194:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003198:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800319a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800319c:	e7a0      	b.n	80030e0 <HAL_DMA_IRQHandler+0x58>
}
 800319e:	bc70      	pop	{r4, r5, r6}
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40020008 	.word	0x40020008
 80031a8:	40020000 	.word	0x40020000

080031ac <HAL_DMA_GetState>:
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
}
 80031ac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031b8:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80031ba:	4616      	mov	r6, r2
 80031bc:	4b64      	ldr	r3, [pc, #400]	; (8003350 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031be:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8003360 <HAL_GPIO_Init+0x1ac>
 80031c2:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8003364 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031c6:	680d      	ldr	r5, [r1, #0]
 80031c8:	fa35 f406 	lsrs.w	r4, r5, r6
 80031cc:	d102      	bne.n	80031d4 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80031ce:	b003      	add	sp, #12
 80031d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80031d4:	f04f 0801 	mov.w	r8, #1
 80031d8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031dc:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80031e0:	ea38 0505 	bics.w	r5, r8, r5
 80031e4:	d17c      	bne.n	80032e0 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 80031e6:	684d      	ldr	r5, [r1, #4]
 80031e8:	2d03      	cmp	r5, #3
 80031ea:	d807      	bhi.n	80031fc <HAL_GPIO_Init+0x48>
 80031ec:	3d01      	subs	r5, #1
 80031ee:	2d02      	cmp	r5, #2
 80031f0:	f200 8088 	bhi.w	8003304 <HAL_GPIO_Init+0x150>
 80031f4:	e8df f005 	tbb	[pc, r5]
 80031f8:	9b96      	.short	0x9b96
 80031fa:	a1          	.byte	0xa1
 80031fb:	00          	.byte	0x00
 80031fc:	2d12      	cmp	r5, #18
 80031fe:	f000 8099 	beq.w	8003334 <HAL_GPIO_Init+0x180>
 8003202:	d86f      	bhi.n	80032e4 <HAL_GPIO_Init+0x130>
 8003204:	2d11      	cmp	r5, #17
 8003206:	f000 808f 	beq.w	8003328 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800320a:	2cff      	cmp	r4, #255	; 0xff
 800320c:	bf98      	it	ls
 800320e:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003210:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003214:	bf88      	it	hi
 8003216:	f100 0a04 	addhi.w	sl, r0, #4
 800321a:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800321e:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003222:	bf88      	it	hi
 8003224:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003226:	fa09 fb05 	lsl.w	fp, r9, r5
 800322a:	ea28 080b 	bic.w	r8, r8, fp
 800322e:	fa02 f505 	lsl.w	r5, r2, r5
 8003232:	ea48 0505 	orr.w	r5, r8, r5
 8003236:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800323a:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800323e:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8003242:	d04d      	beq.n	80032e0 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003244:	4f43      	ldr	r7, [pc, #268]	; (8003354 <HAL_GPIO_Init+0x1a0>)
 8003246:	f026 0803 	bic.w	r8, r6, #3
 800324a:	69bd      	ldr	r5, [r7, #24]
 800324c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003250:	f045 0501 	orr.w	r5, r5, #1
 8003254:	61bd      	str	r5, [r7, #24]
 8003256:	69bd      	ldr	r5, [r7, #24]
 8003258:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800325c:	f005 0501 	and.w	r5, r5, #1
 8003260:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003262:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003266:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003268:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800326c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003270:	fa09 f90b 	lsl.w	r9, r9, fp
 8003274:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003278:	4d37      	ldr	r5, [pc, #220]	; (8003358 <HAL_GPIO_Init+0x1a4>)
 800327a:	42a8      	cmp	r0, r5
 800327c:	d061      	beq.n	8003342 <HAL_GPIO_Init+0x18e>
 800327e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003282:	42a8      	cmp	r0, r5
 8003284:	d05f      	beq.n	8003346 <HAL_GPIO_Init+0x192>
 8003286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800328a:	42a8      	cmp	r0, r5
 800328c:	d05d      	beq.n	800334a <HAL_GPIO_Init+0x196>
 800328e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003292:	42a8      	cmp	r0, r5
 8003294:	bf0c      	ite	eq
 8003296:	2503      	moveq	r5, #3
 8003298:	2504      	movne	r5, #4
 800329a:	fa05 f50b 	lsl.w	r5, r5, fp
 800329e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80032a2:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80032a6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032a8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80032ac:	bf14      	ite	ne
 80032ae:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032b0:	43a5      	biceq	r5, r4
 80032b2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80032b4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80032ba:	bf14      	ite	ne
 80032bc:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032be:	43a5      	biceq	r5, r4
 80032c0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80032c2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80032c8:	bf14      	ite	ne
 80032ca:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032cc:	43a5      	biceq	r5, r4
 80032ce:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80032d0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80032d6:	bf14      	ite	ne
 80032d8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032da:	ea25 0404 	biceq.w	r4, r5, r4
 80032de:	60dc      	str	r4, [r3, #12]
	position++;
 80032e0:	3601      	adds	r6, #1
 80032e2:	e770      	b.n	80031c6 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 80032e4:	4f1d      	ldr	r7, [pc, #116]	; (800335c <HAL_GPIO_Init+0x1a8>)
 80032e6:	42bd      	cmp	r5, r7
 80032e8:	d00c      	beq.n	8003304 <HAL_GPIO_Init+0x150>
 80032ea:	d817      	bhi.n	800331c <HAL_GPIO_Init+0x168>
 80032ec:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003368 <HAL_GPIO_Init+0x1b4>
 80032f0:	454d      	cmp	r5, r9
 80032f2:	d007      	beq.n	8003304 <HAL_GPIO_Init+0x150>
 80032f4:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80032f8:	454d      	cmp	r5, r9
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x150>
 80032fc:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8003300:	454d      	cmp	r5, r9
 8003302:	d182      	bne.n	800320a <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003304:	688a      	ldr	r2, [r1, #8]
 8003306:	b1d2      	cbz	r2, 800333e <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003308:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800330a:	bf08      	it	eq
 800330c:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003310:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8003314:	bf18      	it	ne
 8003316:	f8c0 8014 	strne.w	r8, [r0, #20]
 800331a:	e776      	b.n	800320a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800331c:	4565      	cmp	r5, ip
 800331e:	d0f1      	beq.n	8003304 <HAL_GPIO_Init+0x150>
 8003320:	4575      	cmp	r5, lr
 8003322:	e7ee      	b.n	8003302 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003324:	68ca      	ldr	r2, [r1, #12]
          break;
 8003326:	e770      	b.n	800320a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003328:	68ca      	ldr	r2, [r1, #12]
 800332a:	3204      	adds	r2, #4
          break;
 800332c:	e76d      	b.n	800320a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800332e:	68ca      	ldr	r2, [r1, #12]
 8003330:	3208      	adds	r2, #8
          break;
 8003332:	e76a      	b.n	800320a <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003334:	68ca      	ldr	r2, [r1, #12]
 8003336:	320c      	adds	r2, #12
          break;
 8003338:	e767      	b.n	800320a <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800333a:	2200      	movs	r2, #0
 800333c:	e765      	b.n	800320a <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800333e:	2204      	movs	r2, #4
 8003340:	e763      	b.n	800320a <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003342:	2500      	movs	r5, #0
 8003344:	e7a9      	b.n	800329a <HAL_GPIO_Init+0xe6>
 8003346:	2501      	movs	r5, #1
 8003348:	e7a7      	b.n	800329a <HAL_GPIO_Init+0xe6>
 800334a:	2502      	movs	r5, #2
 800334c:	e7a5      	b.n	800329a <HAL_GPIO_Init+0xe6>
 800334e:	bf00      	nop
 8003350:	40010400 	.word	0x40010400
 8003354:	40021000 	.word	0x40021000
 8003358:	40010800 	.word	0x40010800
 800335c:	10220000 	.word	0x10220000
 8003360:	10310000 	.word	0x10310000
 8003364:	10320000 	.word	0x10320000
 8003368:	10120000 	.word	0x10120000

0800336c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800336c:	b10a      	cbz	r2, 8003372 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800336e:	6101      	str	r1, [r0, #16]
  }
}
 8003370:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003372:	0409      	lsls	r1, r1, #16
 8003374:	e7fb      	b.n	800336e <HAL_GPIO_WritePin+0x2>

08003376 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003376:	6801      	ldr	r1, [r0, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	694b      	ldr	r3, [r1, #20]
 800337c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003380:	d010      	beq.n	80033a4 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003382:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003386:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003388:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800338a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800338c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003390:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003394:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003396:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
 80033a2:	4770      	bx	lr
  }
  return HAL_OK;
 80033a4:	4618      	mov	r0, r3
}
 80033a6:	4770      	bx	lr

080033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80033a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ac:	4604      	mov	r4, r0
 80033ae:	460f      	mov	r7, r1
 80033b0:	4616      	mov	r6, r2
 80033b2:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033b4:	6825      	ldr	r5, [r4, #0]
 80033b6:	6968      	ldr	r0, [r5, #20]
 80033b8:	ea27 0000 	bic.w	r0, r7, r0
 80033bc:	b280      	uxth	r0, r0
 80033be:	b1b8      	cbz	r0, 80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033c0:	696b      	ldr	r3, [r5, #20]
 80033c2:	055a      	lsls	r2, r3, #21
 80033c4:	d516      	bpl.n	80033f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c8:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ce:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80033d4:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80033e4:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80033ec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80033f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80033f4:	1c73      	adds	r3, r6, #1
 80033f6:	d0de      	beq.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7ff fd68 	bl	8002ecc <HAL_GetTick>
 80033fc:	eba0 0008 	sub.w	r0, r0, r8
 8003400:	42b0      	cmp	r0, r6
 8003402:	d801      	bhi.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003404:	2e00      	cmp	r6, #0
 8003406:	d1d5      	bne.n	80033b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800340a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800340c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003412:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003416:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	e7e4      	b.n	80033e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800341e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800341e:	b570      	push	{r4, r5, r6, lr}
 8003420:	4604      	mov	r4, r0
 8003422:	460d      	mov	r5, r1
 8003424:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	075b      	lsls	r3, r3, #29
 800342c:	d501      	bpl.n	8003432 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800342e:	2000      	movs	r0, #0
}
 8003430:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003432:	4620      	mov	r0, r4
 8003434:	f7ff ff9f 	bl	8003376 <I2C_IsAcknowledgeFailed>
 8003438:	b9a8      	cbnz	r0, 8003466 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800343a:	1c6a      	adds	r2, r5, #1
 800343c:	d0f3      	beq.n	8003426 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343e:	f7ff fd45 	bl	8002ecc <HAL_GetTick>
 8003442:	1b80      	subs	r0, r0, r6
 8003444:	42a8      	cmp	r0, r5
 8003446:	d801      	bhi.n	800344c <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d1ec      	bne.n	8003426 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800344c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800344e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003450:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003452:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003456:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800345a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800345c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	f042 0220 	orr.w	r2, r2, #32
 8003464:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
 8003468:	e7e2      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800346a <I2C_WaitOnFlagUntilTimeout>:
{
 800346a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800346e:	4606      	mov	r6, r0
 8003470:	460f      	mov	r7, r1
 8003472:	4691      	mov	r9, r2
 8003474:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003476:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800347a:	6833      	ldr	r3, [r6, #0]
 800347c:	f1ba 0f01 	cmp.w	sl, #1
 8003480:	bf0c      	ite	eq
 8003482:	695c      	ldreq	r4, [r3, #20]
 8003484:	699c      	ldrne	r4, [r3, #24]
 8003486:	ea27 0404 	bic.w	r4, r7, r4
 800348a:	b2a4      	uxth	r4, r4
 800348c:	fab4 f484 	clz	r4, r4
 8003490:	0964      	lsrs	r4, r4, #5
 8003492:	45a1      	cmp	r9, r4
 8003494:	d001      	beq.n	800349a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003496:	2000      	movs	r0, #0
 8003498:	e017      	b.n	80034ca <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800349a:	1c6a      	adds	r2, r5, #1
 800349c:	d0ee      	beq.n	800347c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7ff fd15 	bl	8002ecc <HAL_GetTick>
 80034a2:	9b08      	ldr	r3, [sp, #32]
 80034a4:	1ac0      	subs	r0, r0, r3
 80034a6:	42a8      	cmp	r0, r5
 80034a8:	d801      	bhi.n	80034ae <I2C_WaitOnFlagUntilTimeout+0x44>
 80034aa:	2d00      	cmp	r5, #0
 80034ac:	d1e5      	bne.n	800347a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034ae:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80034b0:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 80034b2:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b4:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034b6:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ba:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034c0:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	f042 0220 	orr.w	r2, r2, #32
 80034c8:	6432      	str	r2, [r6, #64]	; 0x40
}
 80034ca:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080034ce <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80034ce:	b570      	push	{r4, r5, r6, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	460d      	mov	r5, r1
 80034d4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	061b      	lsls	r3, r3, #24
 80034dc:	d501      	bpl.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80034de:	2000      	movs	r0, #0
}
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e2:	4620      	mov	r0, r4
 80034e4:	f7ff ff47 	bl	8003376 <I2C_IsAcknowledgeFailed>
 80034e8:	b9a8      	cbnz	r0, 8003516 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80034ea:	1c6a      	adds	r2, r5, #1
 80034ec:	d0f3      	beq.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff fced 	bl	8002ecc <HAL_GetTick>
 80034f2:	1b80      	subs	r0, r0, r6
 80034f4:	42a8      	cmp	r0, r5
 80034f6:	d801      	bhi.n	80034fc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80034f8:	2d00      	cmp	r5, #0
 80034fa:	d1ec      	bne.n	80034d6 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034fc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80034fe:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003500:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003502:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003506:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800350a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800350c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	f042 0220 	orr.w	r2, r2, #32
 8003514:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003516:	2001      	movs	r0, #1
 8003518:	e7e2      	b.n	80034e0 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

0800351c <HAL_I2C_Init>:
{
 800351c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800351e:	4604      	mov	r4, r0
 8003520:	b908      	cbnz	r0, 8003526 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003522:	2001      	movs	r0, #1
}
 8003524:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003526:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800352a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800352e:	b91b      	cbnz	r3, 8003538 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003530:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003534:	f7fe fa26 	bl	8001984 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003538:	2324      	movs	r3, #36	; 0x24
 800353a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800354e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003556:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003558:	f002 f81c 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800355c:	4a3f      	ldr	r2, [pc, #252]	; (800365c <HAL_I2C_Init+0x140>)
 800355e:	6863      	ldr	r3, [r4, #4]
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	4a3e      	ldrls	r2, [pc, #248]	; (8003660 <HAL_I2C_Init+0x144>)
 8003566:	4a3f      	ldrhi	r2, [pc, #252]	; (8003664 <HAL_I2C_Init+0x148>)
 8003568:	4290      	cmp	r0, r2
 800356a:	bf8c      	ite	hi
 800356c:	2200      	movhi	r2, #0
 800356e:	2201      	movls	r2, #1
 8003570:	2a00      	cmp	r2, #0
 8003572:	d1d6      	bne.n	8003522 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8003574:	4e3c      	ldr	r6, [pc, #240]	; (8003668 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003576:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003578:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357c:	6851      	ldr	r1, [r2, #4]
 800357e:	3801      	subs	r0, #1
 8003580:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003584:	4331      	orrs	r1, r6
 8003586:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003588:	4934      	ldr	r1, [pc, #208]	; (800365c <HAL_I2C_Init+0x140>)
 800358a:	6a15      	ldr	r5, [r2, #32]
 800358c:	428b      	cmp	r3, r1
 800358e:	bf81      	itttt	hi
 8003590:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8003594:	4371      	mulhi	r1, r6
 8003596:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 800359a:	fbb1 f1f6 	udivhi	r1, r1, r6
 800359e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80035a2:	bf94      	ite	ls
 80035a4:	1c71      	addls	r1, r6, #1
 80035a6:	3101      	addhi	r1, #1
 80035a8:	4329      	orrs	r1, r5
 80035aa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035ac:	69d1      	ldr	r1, [r2, #28]
 80035ae:	4d2b      	ldr	r5, [pc, #172]	; (800365c <HAL_I2C_Init+0x140>)
 80035b0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80035b4:	42ab      	cmp	r3, r5
 80035b6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035ba:	d832      	bhi.n	8003622 <HAL_I2C_Init+0x106>
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	fbb0 f0f3 	udiv	r0, r0, r3
 80035c2:	1c43      	adds	r3, r0, #1
 80035c4:	f640 70fc 	movw	r0, #4092	; 0xffc
 80035c8:	4203      	tst	r3, r0
 80035ca:	d042      	beq.n	8003652 <HAL_I2C_Init+0x136>
 80035cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d0:	430b      	orrs	r3, r1
 80035d2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d4:	6811      	ldr	r1, [r2, #0]
 80035d6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80035da:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80035de:	4303      	orrs	r3, r0
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035e4:	6891      	ldr	r1, [r2, #8]
 80035e6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80035ea:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80035ee:	4303      	orrs	r3, r0
 80035f0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035f8:	68d1      	ldr	r1, [r2, #12]
 80035fa:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80035fe:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003602:	4303      	orrs	r3, r0
 8003604:	430b      	orrs	r3, r1
 8003606:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003608:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800360a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003612:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003614:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003616:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800361a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003620:	e780      	b.n	8003524 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003622:	68a5      	ldr	r5, [r4, #8]
 8003624:	b955      	cbnz	r5, 800363c <HAL_I2C_Init+0x120>
 8003626:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	b17b      	cbz	r3, 8003656 <HAL_I2C_Init+0x13a>
 8003636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363a:	e7c9      	b.n	80035d0 <HAL_I2C_Init+0xb4>
 800363c:	2519      	movs	r5, #25
 800363e:	436b      	muls	r3, r5
 8003640:	fbb0 f3f3 	udiv	r3, r0, r3
 8003644:	3301      	adds	r3, #1
 8003646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364a:	b123      	cbz	r3, 8003656 <HAL_I2C_Init+0x13a>
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	e7be      	b.n	80035d0 <HAL_I2C_Init+0xb4>
 8003652:	2304      	movs	r3, #4
 8003654:	e7bc      	b.n	80035d0 <HAL_I2C_Init+0xb4>
 8003656:	2301      	movs	r3, #1
 8003658:	e7ba      	b.n	80035d0 <HAL_I2C_Init+0xb4>
 800365a:	bf00      	nop
 800365c:	000186a0 	.word	0x000186a0
 8003660:	001e847f 	.word	0x001e847f
 8003664:	003d08ff 	.word	0x003d08ff
 8003668:	000f4240 	.word	0x000f4240

0800366c <HAL_I2C_Master_Transmit>:
{
 800366c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	b085      	sub	sp, #20
 8003674:	4698      	mov	r8, r3
 8003676:	460d      	mov	r5, r1
 8003678:	4691      	mov	r9, r2
 800367a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800367c:	f7ff fc26 	bl	8002ecc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003680:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003684:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003686:	2b20      	cmp	r3, #32
 8003688:	d004      	beq.n	8003694 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800368a:	2502      	movs	r5, #2
}
 800368c:	4628      	mov	r0, r5
 800368e:	b005      	add	sp, #20
 8003690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003694:	9000      	str	r0, [sp, #0]
 8003696:	2319      	movs	r3, #25
 8003698:	2201      	movs	r2, #1
 800369a:	4620      	mov	r0, r4
 800369c:	495b      	ldr	r1, [pc, #364]	; (800380c <HAL_I2C_Master_Transmit+0x1a0>)
 800369e:	f7ff fee4 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 80036a2:	2800      	cmp	r0, #0
 80036a4:	d1f1      	bne.n	800368a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80036a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d0ed      	beq.n	800368a <HAL_I2C_Master_Transmit+0x1e>
 80036ae:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b0:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80036b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036b6:	680b      	ldr	r3, [r1, #0]
 80036b8:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80036ba:	bf5e      	ittt	pl
 80036bc:	680b      	ldrpl	r3, [r1, #0]
 80036be:	f043 0301 	orrpl.w	r3, r3, #1
 80036c2:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c4:	680b      	ldr	r3, [r1, #0]
 80036c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ca:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036cc:	2321      	movs	r3, #33	; 0x21
 80036ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036d2:	2310      	movs	r3, #16
 80036d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036d8:	2300      	movs	r3, #0
 80036da:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80036dc:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80036e2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80036e6:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036e8:	4b49      	ldr	r3, [pc, #292]	; (8003810 <HAL_I2C_Master_Transmit+0x1a4>)
 80036ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d004      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x90>
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d002      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x90>
 80036f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036fa:	d104      	bne.n	8003706 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fc:	680b      	ldr	r3, [r1, #0]
 80036fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003702:	600b      	str	r3, [r1, #0]
 8003704:	e002      	b.n	800370c <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003706:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003708:	2b12      	cmp	r3, #18
 800370a:	d0f7      	beq.n	80036fc <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800370c:	2200      	movs	r2, #0
 800370e:	463b      	mov	r3, r7
 8003710:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003714:	4620      	mov	r0, r4
 8003716:	9600      	str	r6, [sp, #0]
 8003718:	f7ff fea7 	bl	800346a <I2C_WaitOnFlagUntilTimeout>
 800371c:	6822      	ldr	r2, [r4, #0]
 800371e:	b138      	cbz	r0, 8003730 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003720:	6813      	ldr	r3, [r2, #0]
 8003722:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003724:	bf44      	itt	mi
 8003726:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800372a:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800372c:	2501      	movs	r5, #1
 800372e:	e7ad      	b.n	800368c <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003736:	d121      	bne.n	800377c <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003738:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800373c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800373e:	4633      	mov	r3, r6
 8003740:	463a      	mov	r2, r7
 8003742:	4620      	mov	r0, r4
 8003744:	4933      	ldr	r1, [pc, #204]	; (8003814 <HAL_I2C_Master_Transmit+0x1a8>)
 8003746:	f7ff fe2f 	bl	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800374a:	4605      	mov	r5, r0
 800374c:	2800      	cmp	r0, #0
 800374e:	d1ed      	bne.n	800372c <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	9003      	str	r0, [sp, #12]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	9203      	str	r2, [sp, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800375e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003760:	b9f3      	cbnz	r3, 80037a0 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	6821      	ldr	r1, [r4, #0]
 8003764:	680a      	ldr	r2, [r1, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800376e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003772:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003776:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800377a:	e787      	b.n	800368c <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800377c:	11eb      	asrs	r3, r5, #7
 800377e:	f003 0306 	and.w	r3, r3, #6
 8003782:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003786:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003788:	4620      	mov	r0, r4
 800378a:	4633      	mov	r3, r6
 800378c:	463a      	mov	r2, r7
 800378e:	4922      	ldr	r1, [pc, #136]	; (8003818 <HAL_I2C_Master_Transmit+0x1ac>)
 8003790:	f7ff fe0a 	bl	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003794:	2800      	cmp	r0, #0
 8003796:	d1c9      	bne.n	800372c <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	b2ed      	uxtb	r5, r5
 800379c:	611d      	str	r5, [r3, #16]
 800379e:	e7ce      	b.n	800373e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a0:	4632      	mov	r2, r6
 80037a2:	4639      	mov	r1, r7
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff fe92 	bl	80034ce <I2C_WaitOnTXEFlagUntilTimeout>
 80037aa:	b140      	cbz	r0, 80037be <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d1bc      	bne.n	800372c <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e7b6      	b.n	800372c <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c0:	6820      	ldr	r0, [r4, #0]
 80037c2:	461a      	mov	r2, r3
 80037c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80037c8:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80037ca:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80037ce:	3a01      	subs	r2, #1
 80037d0:	b292      	uxth	r2, r2
 80037d2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037d4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037d6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80037da:	1e51      	subs	r1, r2, #1
 80037dc:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037de:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80037e2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037e4:	d00a      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x190>
 80037e6:	b149      	cbz	r1, 80037fc <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037e8:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80037ea:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037ec:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80037ee:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80037f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80037f2:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80037fa:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037fc:	4632      	mov	r2, r6
 80037fe:	4639      	mov	r1, r7
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff fe0c 	bl	800341e <I2C_WaitOnBTFFlagUntilTimeout>
 8003806:	2800      	cmp	r0, #0
 8003808:	d0a9      	beq.n	800375e <HAL_I2C_Master_Transmit+0xf2>
 800380a:	e7cf      	b.n	80037ac <HAL_I2C_Master_Transmit+0x140>
 800380c:	00100002 	.word	0x00100002
 8003810:	ffff0000 	.word	0xffff0000
 8003814:	00010002 	.word	0x00010002
 8003818:	00010008 	.word	0x00010008

0800381c <HAL_I2C_MasterTxCpltCallback>:
 800381c:	4770      	bx	lr

0800381e <HAL_I2C_MasterRxCpltCallback>:
 800381e:	4770      	bx	lr

08003820 <HAL_I2C_SlaveTxCpltCallback>:
 8003820:	4770      	bx	lr

08003822 <HAL_I2C_SlaveRxCpltCallback>:
 8003822:	4770      	bx	lr

08003824 <HAL_I2C_AddrCallback>:
}
 8003824:	4770      	bx	lr

08003826 <HAL_I2C_ListenCpltCallback>:
 8003826:	4770      	bx	lr

08003828 <HAL_I2C_MemTxCpltCallback>:
 8003828:	4770      	bx	lr

0800382a <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800382a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 800382e:	b508      	push	{r3, lr}
  if (hi2c->EventCount == 0U)
 8003830:	6d03      	ldr	r3, [r0, #80]	; 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003832:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8003834:	b983      	cbnz	r3, 8003858 <I2C_MemoryTransmit_TXE_BTF+0x2e>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003836:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003838:	6802      	ldr	r2, [r0, #0]
 800383a:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800383c:	6c83      	ldr	r3, [r0, #72]	; 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800383e:	d105      	bne.n	800384c <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003840:	b2db      	uxtb	r3, r3
 8003842:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003844:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003846:	3302      	adds	r3, #2
      hi2c->EventCount++;
 8003848:	6503      	str	r3, [r0, #80]	; 0x50
}
 800384a:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800384c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003850:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003852:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003854:	3301      	adds	r3, #1
 8003856:	e7f7      	b.n	8003848 <I2C_MemoryTransmit_TXE_BTF+0x1e>
  else if (hi2c->EventCount == 1U)
 8003858:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800385a:	2b01      	cmp	r3, #1
 800385c:	d103      	bne.n	8003866 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800385e:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003860:	6802      	ldr	r2, [r0, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	e7f4      	b.n	8003850 <I2C_MemoryTransmit_TXE_BTF+0x26>
  else if (hi2c->EventCount == 2U)
 8003866:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8003868:	2b02      	cmp	r3, #2
 800386a:	d1ee      	bne.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800386c:	2a22      	cmp	r2, #34	; 0x22
 800386e:	d105      	bne.n	800387c <I2C_MemoryTransmit_TXE_BTF+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003870:	6802      	ldr	r2, [r0, #0]
 8003872:	6813      	ldr	r3, [r2, #0]
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	e7e6      	b.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800387c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	b163      	cbz	r3, 800389c <I2C_MemoryTransmit_TXE_BTF+0x72>
 8003882:	2a21      	cmp	r2, #33	; 0x21
 8003884:	d10a      	bne.n	800389c <I2C_MemoryTransmit_TXE_BTF+0x72>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003886:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003888:	6802      	ldr	r2, [r0, #0]
 800388a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800388e:	6111      	str	r1, [r2, #16]
      hi2c->pBuffPtr++;
 8003890:	6243      	str	r3, [r0, #36]	; 0x24
      hi2c->XferCount--;
 8003892:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003894:	3b01      	subs	r3, #1
 8003896:	b29b      	uxth	r3, r3
 8003898:	8543      	strh	r3, [r0, #42]	; 0x2a
 800389a:	e7d6      	b.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800389c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1d2      	bne.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>
 80038a4:	2a21      	cmp	r2, #33	; 0x21
 80038a6:	d1d0      	bne.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	6851      	ldr	r1, [r2, #4]
 80038ac:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80038b0:	6051      	str	r1, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b2:	6811      	ldr	r1, [r2, #0]
 80038b4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80038b8:	6011      	str	r1, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80038bc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80038be:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038c6:	f7ff ffaf 	bl	8003828 <HAL_I2C_MemTxCpltCallback>
}
 80038ca:	e7be      	b.n	800384a <I2C_MemoryTransmit_TXE_BTF+0x20>

080038cc <HAL_I2C_MemRxCpltCallback>:
 80038cc:	4770      	bx	lr

080038ce <HAL_I2C_ErrorCallback>:
 80038ce:	4770      	bx	lr

080038d0 <HAL_I2C_AbortCpltCallback>:
 80038d0:	4770      	bx	lr
	...

080038d4 <I2C_DMAAbort>:
  __IO uint32_t count = 0U;
 80038d4:	2300      	movs	r3, #0
{
 80038d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  __IO uint32_t count = 0U;
 80038da:	9301      	str	r3, [sp, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038dc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038e0:	4b2b      	ldr	r3, [pc, #172]	; (8003990 <I2C_DMAAbort+0xbc>)
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e2:	b2d1      	uxtb	r1, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038e4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80038ee:	2323      	movs	r3, #35	; 0x23
 80038f0:	4353      	muls	r3, r2
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	6803      	ldr	r3, [r0, #0]
    if (count == 0U)
 80038f6:	9a01      	ldr	r2, [sp, #4]
 80038f8:	bb42      	cbnz	r2, 800394c <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038fa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80038fc:	f042 0220 	orr.w	r2, r2, #32
 8003900:	6402      	str	r2, [r0, #64]	; 0x40
  if (hi2c->hdmatx != NULL)
 8003902:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8003904:	b10d      	cbz	r5, 800390a <I2C_DMAAbort+0x36>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003906:	2200      	movs	r2, #0
 8003908:	62aa      	str	r2, [r5, #40]	; 0x28
  if (hi2c->hdmarx != NULL)
 800390a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800390c:	b10c      	cbz	r4, 8003912 <I2C_DMAAbort+0x3e>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800390e:	2200      	movs	r2, #0
 8003910:	62a2      	str	r2, [r4, #40]	; 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003918:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 800391a:	2200      	movs	r2, #0
 800391c:	8542      	strh	r2, [r0, #42]	; 0x2a
  if (hi2c->hdmatx != NULL)
 800391e:	b105      	cbz	r5, 8003922 <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003920:	636a      	str	r2, [r5, #52]	; 0x34
  if (hi2c->hdmarx != NULL)
 8003922:	b104      	cbz	r4, 8003926 <I2C_DMAAbort+0x52>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003924:	6362      	str	r2, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800392e:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8003932:	2a60      	cmp	r2, #96	; 0x60
 8003934:	d111      	bne.n	800395a <I2C_DMAAbort+0x86>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003936:	2320      	movs	r3, #32
 8003938:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800393c:	2300      	movs	r3, #0
 800393e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003942:	6403      	str	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8003944:	f7ff ffc4 	bl	80038d0 <HAL_I2C_AbortCpltCallback>
}
 8003948:	b003      	add	sp, #12
 800394a:	bd30      	pop	{r4, r5, pc}
    count--;
 800394c:	9a01      	ldr	r2, [sp, #4]
 800394e:	3a01      	subs	r2, #1
 8003950:	9201      	str	r2, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	0592      	lsls	r2, r2, #22
 8003956:	d4ce      	bmi.n	80038f6 <I2C_DMAAbort+0x22>
 8003958:	e7d3      	b.n	8003902 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800395a:	f001 0228 	and.w	r2, r1, #40	; 0x28
 800395e:	2a28      	cmp	r2, #40	; 0x28
 8003960:	d10e      	bne.n	8003980 <I2C_DMAAbort+0xac>
      __HAL_I2C_ENABLE(hi2c);
 8003962:	6819      	ldr	r1, [r3, #0]
 8003964:	f041 0101 	orr.w	r1, r1, #1
 8003968:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003970:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003972:	2300      	movs	r3, #0
 8003974:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003976:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_I2C_ErrorCallback(hi2c);
 800397a:	f7ff ffa8 	bl	80038ce <HAL_I2C_ErrorCallback>
}
 800397e:	e7e3      	b.n	8003948 <I2C_DMAAbort+0x74>
      hi2c->State = HAL_I2C_STATE_READY;
 8003980:	2320      	movs	r3, #32
 8003982:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	2300      	movs	r3, #0
 8003988:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 800398c:	e7f5      	b.n	800397a <I2C_DMAAbort+0xa6>
 800398e:	bf00      	nop
 8003990:	20000000 	.word	0x20000000

08003994 <I2C_ITError>:
{
 8003994:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003996:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800399a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
{
 800399e:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039a0:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80039a2:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039a6:	6803      	ldr	r3, [r0, #0]
 80039a8:	d001      	beq.n	80039ae <I2C_ITError+0x1a>
 80039aa:	2940      	cmp	r1, #64	; 0x40
 80039ac:	d113      	bne.n	80039d6 <I2C_ITError+0x42>
 80039ae:	2a22      	cmp	r2, #34	; 0x22
 80039b0:	d111      	bne.n	80039d6 <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039b2:	6819      	ldr	r1, [r3, #0]
 80039b4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80039b8:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	f411 6100 	ands.w	r1, r1, #2048	; 0x800
 80039c0:	d106      	bne.n	80039d0 <I2C_ITError+0x3c>
 80039c2:	2a60      	cmp	r2, #96	; 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80039c4:	bf1e      	ittt	ne
 80039c6:	2220      	movne	r2, #32
 80039c8:	f884 203d 	strbne.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	f884 103e 	strbne.w	r1, [r4, #62]	; 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80039d0:	2200      	movs	r2, #0
 80039d2:	6322      	str	r2, [r4, #48]	; 0x30
 80039d4:	e007      	b.n	80039e6 <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d6:	f002 0128 	and.w	r1, r2, #40	; 0x28
 80039da:	2928      	cmp	r1, #40	; 0x28
 80039dc:	d1ed      	bne.n	80039ba <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039de:	2200      	movs	r2, #0
 80039e0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 80039ec:	d04f      	beq.n	8003a8e <I2C_ITError+0xfa>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039ee:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80039f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f6:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80039f8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	4b37      	ldr	r3, [pc, #220]	; (8003adc <I2C_ITError+0x148>)
 8003a00:	d02b      	beq.n	8003a5a <I2C_ITError+0xc6>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a02:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a04:	f7ff fafa 	bl	8002ffc <HAL_DMA_Abort_IT>
 8003a08:	b150      	cbz	r0, 8003a20 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 8003a0a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a0c:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f023 0301 	bic.w	r3, r3, #1
 8003a14:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003a16:	2320      	movs	r3, #32
 8003a18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003a1e:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8003a20:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003a22:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a24:	bf1f      	itttt	ne
 8003a26:	6822      	ldrne	r2, [r4, #0]
 8003a28:	6853      	ldrne	r3, [r2, #4]
 8003a2a:	f423 63e0 	bicne.w	r3, r3, #1792	; 0x700
 8003a2e:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003a30:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a34:	6c22      	ldr	r2, [r4, #64]	; 0x40
  CurrentState = hi2c->State;
 8003a36:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003a38:	0752      	lsls	r2, r2, #29
 8003a3a:	d50d      	bpl.n	8003a58 <I2C_ITError+0xc4>
 8003a3c:	2b28      	cmp	r3, #40	; 0x28
 8003a3e:	d10b      	bne.n	8003a58 <I2C_ITError+0xc4>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a42:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a44:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a46:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a48:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a4a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003a4c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a54:	f7ff fee7 	bl	8003826 <HAL_I2C_ListenCpltCallback>
}
 8003a58:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a5c:	6343      	str	r3, [r0, #52]	; 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a5e:	f7ff facd 	bl	8002ffc <HAL_DMA_Abort_IT>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d0dc      	beq.n	8003a20 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	0651      	lsls	r1, r2, #25
 8003a6c:	d505      	bpl.n	8003a7a <I2C_ITError+0xe6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a72:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a76:	3301      	adds	r3, #1
 8003a78:	6263      	str	r3, [r4, #36]	; 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003a7a:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a7c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003a7e:	6813      	ldr	r3, [r2, #0]
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003a86:	2320      	movs	r3, #32
 8003a88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a8c:	e7c6      	b.n	8003a1c <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003a8e:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8003a92:	2960      	cmp	r1, #96	; 0x60
 8003a94:	d115      	bne.n	8003ac2 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	2120      	movs	r1, #32
 8003a98:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	6422      	str	r2, [r4, #64]	; 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	0652      	lsls	r2, r2, #25
 8003aa2:	d505      	bpl.n	8003ab0 <I2C_ITError+0x11c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aa8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aac:	3301      	adds	r3, #1
 8003aae:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003ab0:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ab2:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003ab4:	6813      	ldr	r3, [r2, #0]
 8003ab6:	f023 0301 	bic.w	r3, r3, #1
 8003aba:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003abc:	f7ff ff08 	bl	80038d0 <HAL_I2C_AbortCpltCallback>
 8003ac0:	e7ae      	b.n	8003a20 <I2C_ITError+0x8c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	0650      	lsls	r0, r2, #25
 8003ac6:	d505      	bpl.n	8003ad4 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003acc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	6263      	str	r3, [r4, #36]	; 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fefa 	bl	80038ce <HAL_I2C_ErrorCallback>
 8003ada:	e7a1      	b.n	8003a20 <I2C_ITError+0x8c>
 8003adc:	080038d5 	.word	0x080038d5
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <HAL_I2C_EV_IRQHandler>:
{
 8003ae4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ae6:	6803      	ldr	r3, [r0, #0]
{
 8003ae8:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003aea:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aec:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003aee:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af2:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003af6:	2910      	cmp	r1, #16
{
 8003af8:	b08e      	sub	sp, #56	; 0x38
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003afa:	b2cd      	uxtb	r5, r1
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003afc:	b2c0      	uxtb	r0, r0
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003afe:	d002      	beq.n	8003b06 <HAL_I2C_EV_IRQHandler+0x22>
 8003b00:	2d40      	cmp	r5, #64	; 0x40
 8003b02:	f040 82e0 	bne.w	80040c6 <HAL_I2C_EV_IRQHandler+0x5e2>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b06:	6998      	ldr	r0, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b08:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b0a:	f011 0f01 	tst.w	r1, #1
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_EV_IRQHandler+0x3c>
 8003b10:	f5b6 0f2a 	cmp.w	r6, #11141120	; 0xaa0000
 8003b14:	d002      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8003b16:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8003b1a:	d150      	bne.n	8003bbe <HAL_I2C_EV_IRQHandler+0xda>
}
 8003b1c:	b00e      	add	sp, #56	; 0x38
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b20:	0596      	lsls	r6, r2, #22
 8003b22:	d54c      	bpl.n	8003bbe <HAL_I2C_EV_IRQHandler+0xda>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003b24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b26:	f5b2 0f2a 	cmp.w	r2, #11141120	; 0xaa0000
 8003b2a:	d10c      	bne.n	8003b46 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003b2c:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003b2e:	62e2      	str	r2, [r4, #44]	; 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b30:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003b34:	2a40      	cmp	r2, #64	; 0x40
 8003b36:	d111      	bne.n	8003b5c <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003b38:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003b3a:	b952      	cbnz	r2, 8003b52 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b3c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003b3e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b42:	611a      	str	r2, [r3, #16]
 8003b44:	e7ea      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b48:	f1b2 4f2a 	cmp.w	r2, #2852126720	; 0xaa000000
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003b4e:	2208      	movs	r2, #8
 8003b50:	e7ed      	b.n	8003b2e <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b52:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	e7f2      	b.n	8003b42 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b5c:	6922      	ldr	r2, [r4, #16]
 8003b5e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003b62:	d119      	bne.n	8003b98 <HAL_I2C_EV_IRQHandler+0xb4>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b64:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003b68:	2a21      	cmp	r2, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b6c:	bf16      	itet	ne
 8003b6e:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b72:	f002 02fe 	andeq.w	r2, r2, #254	; 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b76:	b2d2      	uxtbne	r2, r2
 8003b78:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b7c:	b10a      	cbz	r2, 8003b82 <HAL_I2C_EV_IRQHandler+0x9e>
 8003b7e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b80:	b92a      	cbnz	r2, 8003b8e <HAL_I2C_EV_IRQHandler+0xaa>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	d0c9      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003b88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b8a:	2a00      	cmp	r2, #0
 8003b8c:	d0c6      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003b8e:	685a      	ldr	r2, [r3, #4]
 8003b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	e7c1      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->EventCount == 0U)
 8003b98:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003b9a:	b932      	cbnz	r2, 8003baa <HAL_I2C_EV_IRQHandler+0xc6>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003b9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003b9e:	11d2      	asrs	r2, r2, #7
 8003ba0:	f002 0206 	and.w	r2, r2, #6
 8003ba4:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 8003ba8:	e7cb      	b.n	8003b42 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 8003baa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003bac:	2a01      	cmp	r2, #1
 8003bae:	d1b5      	bne.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003bb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003bb2:	11d2      	asrs	r2, r2, #7
 8003bb4:	f002 0206 	and.w	r2, r2, #6
 8003bb8:	f042 02f1 	orr.w	r2, r2, #241	; 0xf1
 8003bbc:	e7c1      	b.n	8003b42 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bbe:	070e      	lsls	r6, r1, #28
 8003bc0:	d50e      	bpl.n	8003be0 <HAL_I2C_EV_IRQHandler+0xfc>
 8003bc2:	0596      	lsls	r6, r2, #22
 8003bc4:	d50c      	bpl.n	8003be0 <HAL_I2C_EV_IRQHandler+0xfc>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003bc6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	611a      	str	r2, [r3, #16]
  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003bcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003bce:	b912      	cbnz	r2, 8003bd6 <HAL_I2C_EV_IRQHandler+0xf2>
 8003bd0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003bd2:	2900      	cmp	r1, #0
 8003bd4:	d0a2      	beq.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003bd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d1d8      	bne.n	8003b8e <HAL_I2C_EV_IRQHandler+0xaa>
 8003bdc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bde:	e7d3      	b.n	8003b88 <HAL_I2C_EV_IRQHandler+0xa4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be0:	078e      	lsls	r6, r1, #30
 8003be2:	f140 80e6 	bpl.w	8003db2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003be6:	0596      	lsls	r6, r2, #22
 8003be8:	f140 80e3 	bpl.w	8003db2 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bec:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003bf0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003bf2:	6b25      	ldr	r5, [r4, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bf4:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003bf8:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bfa:	2822      	cmp	r0, #34	; 0x22
 8003bfc:	f040 80d1 	bne.w	8003da2 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c00:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003c02:	b940      	cbnz	r0, 8003c16 <HAL_I2C_EV_IRQHandler+0x132>
 8003c04:	2940      	cmp	r1, #64	; 0x40
 8003c06:	d106      	bne.n	8003c16 <HAL_I2C_EV_IRQHandler+0x132>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c08:	9001      	str	r0, [sp, #4]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	9201      	str	r2, [sp, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	9b01      	ldr	r3, [sp, #4]
 8003c14:	e782      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003c16:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003c18:	b989      	cbnz	r1, 8003c3e <HAL_I2C_EV_IRQHandler+0x15a>
 8003c1a:	6920      	ldr	r0, [r4, #16]
 8003c1c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8003c20:	d10d      	bne.n	8003c3e <HAL_I2C_EV_IRQHandler+0x15a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	9102      	str	r1, [sp, #8]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	9202      	str	r2, [sp, #8]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	9202      	str	r2, [sp, #8]
 8003c2c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003c36:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c38:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 8003c3a:	6523      	str	r3, [r4, #80]	; 0x50
 8003c3c:	e76e      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 8003c3e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c40:	b289      	uxth	r1, r1
 8003c42:	b951      	cbnz	r1, 8003c5a <HAL_I2C_EV_IRQHandler+0x176>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c44:	9103      	str	r1, [sp, #12]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	9203      	str	r2, [sp, #12]
 8003c4a:	699a      	ldr	r2, [r3, #24]
 8003c4c:	9203      	str	r2, [sp, #12]
 8003c4e:	9a03      	ldr	r2, [sp, #12]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e019      	b.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
      else if (hi2c->XferCount == 1U)
 8003c5a:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003c5c:	b289      	uxth	r1, r1
 8003c5e:	2901      	cmp	r1, #1
 8003c60:	d149      	bne.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x212>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003c62:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003c66:	d11b      	bne.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x1bc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6e:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8003c76:	d00c      	beq.n	8003c92 <HAL_I2C_EV_IRQHandler+0x1ae>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c7e:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c80:	2200      	movs	r2, #0
 8003c82:	9204      	str	r2, [sp, #16]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	9204      	str	r2, [sp, #16]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	9304      	str	r3, [sp, #16]
 8003c8c:	9b04      	ldr	r3, [sp, #16]
      hi2c->EventCount = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e7d3      	b.n	8003c3a <HAL_I2C_EV_IRQHandler+0x156>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c92:	9205      	str	r2, [sp, #20]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	9205      	str	r2, [sp, #20]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	9205      	str	r2, [sp, #20]
 8003c9c:	9a05      	ldr	r2, [sp, #20]
 8003c9e:	e7d7      	b.n	8003c50 <HAL_I2C_EV_IRQHandler+0x16c>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003ca0:	2a08      	cmp	r2, #8
 8003ca2:	d01c      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x1fa>
 8003ca4:	2a20      	cmp	r2, #32
 8003ca6:	d01a      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x1fa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003ca8:	2d12      	cmp	r5, #18
 8003caa:	d10d      	bne.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x1e4>
 8003cac:	2a01      	cmp	r2, #1
 8003cae:	d116      	bne.n	8003cde <HAL_I2C_EV_IRQHandler+0x1fa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cb6:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	9206      	str	r2, [sp, #24]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	9206      	str	r2, [sp, #24]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	9306      	str	r3, [sp, #24]
 8003cc4:	9b06      	ldr	r3, [sp, #24]
 8003cc6:	e7e2      	b.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cc8:	2a10      	cmp	r2, #16
 8003cca:	d8f1      	bhi.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x1cc>
 8003ccc:	499c      	ldr	r1, [pc, #624]	; (8003f40 <HAL_I2C_EV_IRQHandler+0x45c>)
 8003cce:	fa21 f202 	lsr.w	r2, r1, r2
 8003cd2:	07d0      	lsls	r0, r2, #31
 8003cd4:	d5ec      	bpl.n	8003cb0 <HAL_I2C_EV_IRQHandler+0x1cc>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cdc:	e7eb      	b.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x1d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	9207      	str	r2, [sp, #28]
 8003cea:	695a      	ldr	r2, [r3, #20]
 8003cec:	9207      	str	r2, [sp, #28]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	9207      	str	r2, [sp, #28]
 8003cf2:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf4:	e7ac      	b.n	8003c50 <HAL_I2C_EV_IRQHandler+0x16c>
      else if (hi2c->XferCount == 2U)
 8003cf6:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 8003cf8:	b289      	uxth	r1, r1
 8003cfa:	2902      	cmp	r1, #2
 8003cfc:	d133      	bne.n	8003d66 <HAL_I2C_EV_IRQHandler+0x282>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003cfe:	2a10      	cmp	r2, #16
 8003d00:	d805      	bhi.n	8003d0e <HAL_I2C_EV_IRQHandler+0x22a>
 8003d02:	498f      	ldr	r1, [pc, #572]	; (8003f40 <HAL_I2C_EV_IRQHandler+0x45c>)
 8003d04:	40d1      	lsrs	r1, r2
 8003d06:	43c9      	mvns	r1, r1
 8003d08:	f011 0101 	ands.w	r1, r1, #1
 8003d0c:	d020      	beq.n	8003d50 <HAL_I2C_EV_IRQHandler+0x26c>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8003d14:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d16:	2100      	movs	r1, #0
 8003d18:	9108      	str	r1, [sp, #32]
 8003d1a:	6959      	ldr	r1, [r3, #20]
 8003d1c:	9108      	str	r1, [sp, #32]
 8003d1e:	6999      	ldr	r1, [r3, #24]
 8003d20:	9108      	str	r1, [sp, #32]
 8003d22:	9908      	ldr	r1, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003d2a:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	0509      	lsls	r1, r1, #20
 8003d30:	d5ad      	bpl.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
 8003d32:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003d36:	d006      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x262>
 8003d38:	1e51      	subs	r1, r2, #1
 8003d3a:	291f      	cmp	r1, #31
 8003d3c:	d8a7      	bhi.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
 8003d3e:	4a81      	ldr	r2, [pc, #516]	; (8003f44 <HAL_I2C_EV_IRQHandler+0x460>)
 8003d40:	40ca      	lsrs	r2, r1
 8003d42:	07d2      	lsls	r2, r2, #31
 8003d44:	d5a3      	bpl.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	e79e      	b.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 8003d56:	6018      	str	r0, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	9109      	str	r1, [sp, #36]	; 0x24
 8003d5a:	6959      	ldr	r1, [r3, #20]
 8003d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8003d5e:	6999      	ldr	r1, [r3, #24]
 8003d60:	9109      	str	r1, [sp, #36]	; 0x24
 8003d62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d64:	e7e2      	b.n	8003d2c <HAL_I2C_EV_IRQHandler+0x248>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003d6c:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	050e      	lsls	r6, r1, #20
 8003d72:	d50e      	bpl.n	8003d92 <HAL_I2C_EV_IRQHandler+0x2ae>
 8003d74:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003d78:	d007      	beq.n	8003d8a <HAL_I2C_EV_IRQHandler+0x2a6>
 8003d7a:	3a01      	subs	r2, #1
 8003d7c:	2a1f      	cmp	r2, #31
 8003d7e:	d808      	bhi.n	8003d92 <HAL_I2C_EV_IRQHandler+0x2ae>
 8003d80:	4970      	ldr	r1, [pc, #448]	; (8003f44 <HAL_I2C_EV_IRQHandler+0x460>)
 8003d82:	fa21 f202 	lsr.w	r2, r1, r2
 8003d86:	07d5      	lsls	r5, r2, #31
 8003d88:	d503      	bpl.n	8003d92 <HAL_I2C_EV_IRQHandler+0x2ae>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d90:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2200      	movs	r2, #0
 8003d94:	920a      	str	r2, [sp, #40]	; 0x28
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	920a      	str	r2, [sp, #40]	; 0x28
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	930a      	str	r3, [sp, #40]	; 0x28
 8003d9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003da0:	e775      	b.n	8003c8e <HAL_I2C_EV_IRQHandler+0x1aa>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da2:	2200      	movs	r2, #0
 8003da4:	920b      	str	r2, [sp, #44]	; 0x2c
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	930b      	str	r3, [sp, #44]	; 0x2c
 8003dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003db0:	e6b4      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003db2:	f010 0f04 	tst.w	r0, #4
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003db6:	6858      	ldr	r0, [r3, #4]
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003db8:	f000 8098 	beq.w	8003eec <HAL_I2C_EV_IRQHandler+0x408>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dbc:	0500      	lsls	r0, r0, #20
 8003dbe:	f53f aead 	bmi.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dc2:	060e      	lsls	r6, r1, #24
 8003dc4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003dc8:	d555      	bpl.n	8003e76 <HAL_I2C_EV_IRQHandler+0x392>
 8003dca:	0551      	lsls	r1, r2, #21
 8003dcc:	d553      	bpl.n	8003e76 <HAL_I2C_EV_IRQHandler+0x392>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	d154      	bne.n	8003e7c <HAL_I2C_EV_IRQHandler+0x398>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dd2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dd6:	8d25      	ldrh	r5, [r4, #40]	; 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003dd8:	f894 103e 	ldrb.w	r1, [r4, #62]	; 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ddc:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003dde:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003de0:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003de2:	bb7d      	cbnz	r5, 8003e44 <HAL_I2C_EV_IRQHandler+0x360>
 8003de4:	2a21      	cmp	r2, #33	; 0x21
 8003de6:	d12f      	bne.n	8003e48 <HAL_I2C_EV_IRQHandler+0x364>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003de8:	2808      	cmp	r0, #8
 8003dea:	d014      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x332>
 8003dec:	2820      	cmp	r0, #32
 8003dee:	d012      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x332>
 8003df0:	f510 3f80 	cmn.w	r0, #65536	; 0x10000
 8003df4:	d00f      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x332>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dfc:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dfe:	2311      	movs	r3, #17
 8003e00:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fd04 	bl	800381c <HAL_I2C_MasterTxCpltCallback>
 8003e14:	e682      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e16:	685a      	ldr	r2, [r3, #4]
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e18:	4620      	mov	r0, r4
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e1e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e28:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e2c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e2e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e3a:	2a40      	cmp	r2, #64	; 0x40
 8003e3c:	d1e8      	bne.n	8003e10 <HAL_I2C_EV_IRQHandler+0x32c>
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e3e:	f7ff fcf3 	bl	8003828 <HAL_I2C_MemTxCpltCallback>
 8003e42:	e66b      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e44:	2a21      	cmp	r2, #33	; 0x21
 8003e46:	d005      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x370>
 8003e48:	2940      	cmp	r1, #64	; 0x40
 8003e4a:	f47f ae67 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e4e:	2a22      	cmp	r2, #34	; 0x22
 8003e50:	f47f ae64 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 8003e54:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e56:	b292      	uxth	r2, r2
 8003e58:	b91a      	cbnz	r2, 8003e62 <HAL_I2C_EV_IRQHandler+0x37e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	e698      	b.n	8003b94 <HAL_I2C_EV_IRQHandler+0xb0>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e62:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8003e66:	2a40      	cmp	r2, #64	; 0x40
 8003e68:	d116      	bne.n	8003e98 <HAL_I2C_EV_IRQHandler+0x3b4>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e6a:	4620      	mov	r0, r4
}
 8003e6c:	b00e      	add	sp, #56	; 0x38
 8003e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e72:	f7ff bcda 	b.w	800382a <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e76:	2800      	cmp	r0, #0
 8003e78:	f43f ae50 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8003e7c:	0592      	lsls	r2, r2, #22
 8003e7e:	f57f ae4d 	bpl.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003e82:	2d10      	cmp	r5, #16
 8003e84:	d1f1      	bne.n	8003e6a <HAL_I2C_EV_IRQHandler+0x386>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e88:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003e8c:	2a21      	cmp	r2, #33	; 0x21
 8003e8e:	f47f ae45 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 8003e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e94:	b292      	uxth	r2, r2
 8003e96:	b14a      	cbz	r2, 8003eac <HAL_I2C_EV_IRQHandler+0x3c8>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e9a:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003e9e:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 8003ea0:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8003ea2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	8563      	strh	r3, [r4, #42]	; 0x2a
      }
 8003eaa:	e637      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003eac:	2908      	cmp	r1, #8
 8003eae:	d00d      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x3e8>
 8003eb0:	2920      	cmp	r1, #32
 8003eb2:	d00b      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x3e8>
 8003eb4:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8003eb8:	d008      	beq.n	8003ecc <HAL_I2C_EV_IRQHandler+0x3e8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003eba:	6859      	ldr	r1, [r3, #4]
 8003ebc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003ec0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ec2:	2311      	movs	r3, #17
 8003ec4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8003eca:	e79d      	b.n	8003e08 <HAL_I2C_EV_IRQHandler+0x324>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ed2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eda:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003edc:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003ede:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ee0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003eea:	e790      	b.n	8003e0e <HAL_I2C_EV_IRQHandler+0x32a>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003eec:	0506      	lsls	r6, r0, #20
 8003eee:	f53f ae15 	bmi.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ef2:	064d      	lsls	r5, r1, #25
 8003ef4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003ef8:	d57b      	bpl.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x50e>
 8003efa:	0551      	lsls	r1, r2, #21
 8003efc:	d579      	bpl.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x50e>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d17a      	bne.n	8003ff8 <HAL_I2C_EV_IRQHandler+0x514>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f02:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8003f06:	2a22      	cmp	r2, #34	; 0x22
 8003f08:	f47f ae08 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    tmp = hi2c->XferCount;
 8003f0c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003f0e:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003f10:	2a03      	cmp	r2, #3
 8003f12:	d919      	bls.n	8003f48 <HAL_I2C_EV_IRQHandler+0x464>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f18:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003f20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	8563      	strh	r3, [r4, #42]	; 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003f28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b03      	cmp	r3, #3
 8003f2e:	f47f adf5 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	6853      	ldr	r3, [r2, #4]
 8003f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3a:	6053      	str	r3, [r2, #4]
 8003f3c:	e5ee      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8003f3e:	bf00      	nop
 8003f40:	00010014 	.word	0x00010014
 8003f44:	80008081 	.word	0x80008081
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003f4a:	2902      	cmp	r1, #2
 8003f4c:	f43f ade6 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8003f50:	2a01      	cmp	r2, #1
 8003f52:	f63f ade3 	bhi.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f56:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8003f5a:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_I2C_EV_IRQHandler+0x640>)
  __IO uint32_t count = 0U;
 8003f5c:	900c      	str	r0, [sp, #48]	; 0x30
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	fbb2 f2f1 	udiv	r2, r2, r1
 8003f64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f68:	920c      	str	r2, [sp, #48]	; 0x30
    count--;
 8003f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	920c      	str	r2, [sp, #48]	; 0x30
    if (count == 0U)
 8003f70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f72:	b9d1      	cbnz	r1, 8003faa <HAL_I2C_EV_IRQHandler+0x4c6>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f74:	6c22      	ldr	r2, [r4, #64]	; 0x40
        HAL_I2C_ErrorCallback(hi2c);
 8003f76:	4620      	mov	r0, r4
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f78:	f042 0220 	orr.w	r2, r2, #32
 8003f7c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f84:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f86:	691a      	ldr	r2, [r3, #16]
 8003f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f8a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f8e:	3301      	adds	r3, #1
 8003f90:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	2320      	movs	r3, #32
 8003f9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003fa4:	f7ff fc93 	bl	80038ce <HAL_I2C_ErrorCallback>
 8003fa8:	e5b8      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8003fb0:	d1db      	bne.n	8003f6a <HAL_I2C_EV_IRQHandler+0x486>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb2:	6819      	ldr	r1, [r3, #0]
 8003fb4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003fb8:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fba:	6859      	ldr	r1, [r3, #4]
 8003fbc:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8003fc0:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc2:	6919      	ldr	r1, [r3, #16]
 8003fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fc6:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8003fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fca:	3301      	adds	r3, #1
 8003fcc:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003fce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fdc:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fe4:	2b40      	cmp	r3, #64	; 0x40
 8003fe6:	d168      	bne.n	80040ba <HAL_I2C_EV_IRQHandler+0x5d6>
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fe8:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fc6e 	bl	80038cc <HAL_I2C_MemRxCpltCallback>
 8003ff0:	e594      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	f43f ad92 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8003ff8:	0592      	lsls	r2, r2, #22
 8003ffa:	f57f ad8f 	bpl.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if (hi2c->XferCount == 4U)
 8004000:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004002:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004004:	b280      	uxth	r0, r0
 8004006:	2804      	cmp	r0, #4
 8004008:	d109      	bne.n	800401e <HAL_I2C_EV_IRQHandler+0x53a>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004010:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8004016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004018:	3301      	adds	r3, #1
 800401a:	6263      	str	r3, [r4, #36]	; 0x24
 800401c:	e741      	b.n	8003ea2 <HAL_I2C_EV_IRQHandler+0x3be>
  else if (hi2c->XferCount == 3U)
 800401e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004020:	b280      	uxth	r0, r0
 8004022:	2803      	cmp	r0, #3
 8004024:	d10c      	bne.n	8004040 <HAL_I2C_EV_IRQHandler+0x55c>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004026:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004028:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800402a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800402e:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004030:	d0ef      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x52e>
 8004032:	2a02      	cmp	r2, #2
 8004034:	d0ed      	beq.n	8004012 <HAL_I2C_EV_IRQHandler+0x52e>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800403c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403e:	e7e8      	b.n	8004012 <HAL_I2C_EV_IRQHandler+0x52e>
  else if (hi2c->XferCount == 2U)
 8004040:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8004042:	b280      	uxth	r0, r0
 8004044:	2802      	cmp	r0, #2
 8004046:	d1e4      	bne.n	8004012 <HAL_I2C_EV_IRQHandler+0x52e>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004048:	2a01      	cmp	r2, #1
 800404a:	d001      	beq.n	8004050 <HAL_I2C_EV_IRQHandler+0x56c>
 800404c:	2a10      	cmp	r2, #16
 800404e:	d128      	bne.n	80040a2 <HAL_I2C_EV_IRQHandler+0x5be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004056:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800405c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800405e:	1c53      	adds	r3, r2, #1
 8004060:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004062:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004064:	3b01      	subs	r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	8563      	strh	r3, [r4, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	7053      	strb	r3, [r2, #1]
    hi2c->pBuffPtr++;
 8004070:	6a63      	ldr	r3, [r4, #36]	; 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004072:	6822      	ldr	r2, [r4, #0]
    hi2c->pBuffPtr++;
 8004074:	3301      	adds	r3, #1
 8004076:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 8004078:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800407a:	3b01      	subs	r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	8563      	strh	r3, [r4, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004080:	6853      	ldr	r3, [r2, #4]
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004086:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004088:	2320      	movs	r3, #32
 800408a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800408e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8004092:	2b40      	cmp	r3, #64	; 0x40
 8004094:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004098:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800409c:	d10d      	bne.n	80040ba <HAL_I2C_EV_IRQHandler+0x5d6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	6323      	str	r3, [r4, #48]	; 0x30
 80040a0:	e7a3      	b.n	8003fea <HAL_I2C_EV_IRQHandler+0x506>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80040a2:	2a04      	cmp	r2, #4
 80040a4:	d001      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0x5c6>
 80040a6:	2a02      	cmp	r2, #2
 80040a8:	d103      	bne.n	80040b2 <HAL_I2C_EV_IRQHandler+0x5ce>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b0:	e7d1      	b.n	8004056 <HAL_I2C_EV_IRQHandler+0x572>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	e7cd      	b.n	8004056 <HAL_I2C_EV_IRQHandler+0x572>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040ba:	2312      	movs	r3, #18
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040bc:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80040be:	6323      	str	r3, [r4, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80040c0:	f7ff fbad 	bl	800381e <HAL_I2C_MasterRxCpltCallback>
 80040c4:	e52a      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80040c8:	b311      	cbz	r1, 8004110 <HAL_I2C_EV_IRQHandler+0x62c>
  uint32_t sr2itflags               = 0U;
 80040ca:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040cc:	6959      	ldr	r1, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040ce:	078e      	lsls	r6, r1, #30
 80040d0:	d52a      	bpl.n	8004128 <HAL_I2C_EV_IRQHandler+0x644>
 80040d2:	0596      	lsls	r6, r2, #22
 80040d4:	d528      	bpl.n	8004128 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040d8:	b102      	cbz	r2, 80040dc <HAL_I2C_EV_IRQHandler+0x5f8>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040da:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80040dc:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80040e0:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80040e4:	2a28      	cmp	r2, #40	; 0x28
 80040e6:	d116      	bne.n	8004116 <HAL_I2C_EV_IRQHandler+0x632>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040e8:	685a      	ldr	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80040ea:	ea6f 0195 	mvn.w	r1, r5, lsr #2
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80040ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f2:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80040f4:	062b      	lsls	r3, r5, #24
    __HAL_UNLOCK(hi2c);
 80040f6:	f04f 0300 	mov.w	r3, #0
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80040fa:	4620      	mov	r0, r4
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80040fc:	bf54      	ite	pl
 80040fe:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004100:	8b22      	ldrhmi	r2, [r4, #24]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004102:	f001 0101 	and.w	r1, r1, #1
    __HAL_UNLOCK(hi2c);
 8004106:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800410a:	f7ff fb8b 	bl	8003824 <HAL_I2C_AddrCallback>
 800410e:	e505      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004110:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004112:	6959      	ldr	r1, [r3, #20]
 8004114:	e7db      	b.n	80040ce <HAL_I2C_EV_IRQHandler+0x5ea>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004116:	f06f 0202 	mvn.w	r2, #2
 800411a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800411c:	2300      	movs	r3, #0
 800411e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004122:	e4fb      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8004124:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004128:	06ce      	lsls	r6, r1, #27
 800412a:	f140 80b1 	bpl.w	8004290 <HAL_I2C_EV_IRQHandler+0x7ac>
 800412e:	0595      	lsls	r5, r2, #22
 8004130:	f140 80ae 	bpl.w	8004290 <HAL_I2C_EV_IRQHandler+0x7ac>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004134:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004138:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413a:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800413c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004140:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004142:	2200      	movs	r2, #0
 8004144:	920d      	str	r2, [sp, #52]	; 0x34
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	920d      	str	r2, [sp, #52]	; 0x34
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800415a:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	0512      	lsls	r2, r2, #20
 8004160:	d520      	bpl.n	80041a4 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004162:	f005 02f7 	and.w	r2, r5, #247	; 0xf7
 8004166:	2a22      	cmp	r2, #34	; 0x22
 8004168:	d14a      	bne.n	8004200 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800416a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800416c:	6802      	ldr	r2, [r0, #0]
 800416e:	6852      	ldr	r2, [r2, #4]
 8004170:	b292      	uxth	r2, r2
 8004172:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 8004174:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004176:	b292      	uxth	r2, r2
 8004178:	b11a      	cbz	r2, 8004182 <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800417a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800417c:	f042 0204 	orr.w	r2, r2, #4
 8004180:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004188:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800418a:	f7ff f80f 	bl	80031ac <HAL_DMA_GetState>
 800418e:	2801      	cmp	r0, #1
 8004190:	d008      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004192:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004194:	4b79      	ldr	r3, [pc, #484]	; (800437c <HAL_I2C_EV_IRQHandler+0x898>)
 8004196:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004198:	f7fe ff30 	bl	8002ffc <HAL_DMA_Abort_IT>
 800419c:	b110      	cbz	r0, 80041a4 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800419e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80041a2:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80041a4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	b313      	cbz	r3, 80041f0 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	695a      	ldr	r2, [r3, #20]
 80041ae:	0756      	lsls	r6, r2, #29
 80041b0:	d509      	bpl.n	80041c6 <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041b6:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041ba:	3301      	adds	r3, #1
 80041bc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	0650      	lsls	r0, r2, #25
 80041cc:	d509      	bpl.n	80041e2 <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ce:	691a      	ldr	r2, [r3, #16]
 80041d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d2:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041d6:	3301      	adds	r3, #1
 80041d8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80041e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	b11b      	cbz	r3, 80041f0 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ea:	f043 0304 	orr.w	r3, r3, #4
 80041ee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f2:	b313      	cbz	r3, 800423a <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 80041f4:	4620      	mov	r0, r4
}
 80041f6:	b00e      	add	sp, #56	; 0x38
 80041f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 80041fc:	f7ff bbca 	b.w	8003994 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004200:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	6852      	ldr	r2, [r2, #4]
 8004206:	b292      	uxth	r2, r2
 8004208:	8562      	strh	r2, [r4, #42]	; 0x2a
      if (hi2c->XferCount != 0U)
 800420a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800420c:	b292      	uxth	r2, r2
 800420e:	b11a      	cbz	r2, 8004218 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004210:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004212:	f042 0204 	orr.w	r2, r2, #4
 8004216:	6422      	str	r2, [r4, #64]	; 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800421e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004220:	f7fe ffc4 	bl	80031ac <HAL_DMA_GetState>
 8004224:	2801      	cmp	r0, #1
 8004226:	d0bd      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004228:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800422a:	4b54      	ldr	r3, [pc, #336]	; (800437c <HAL_I2C_EV_IRQHandler+0x898>)
 800422c:	6343      	str	r3, [r0, #52]	; 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800422e:	f7fe fee5 	bl	8002ffc <HAL_DMA_Abort_IT>
 8004232:	2800      	cmp	r0, #0
 8004234:	d0b6      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004236:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004238:	e7b2      	b.n	80041a0 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800423a:	2d2a      	cmp	r5, #42	; 0x2a
 800423c:	d106      	bne.n	800424c <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004240:	2328      	movs	r3, #40	; 0x28
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004242:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004244:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004248:	f7ff faeb 	bl	8003822 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800424c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004250:	2b28      	cmp	r3, #40	; 0x28
 8004252:	d10c      	bne.n	800426e <HAL_I2C_EV_IRQHandler+0x78a>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004254:	4b4a      	ldr	r3, [pc, #296]	; (8004380 <HAL_I2C_EV_IRQHandler+0x89c>)
      hi2c->State = HAL_I2C_STATE_READY;
 8004256:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004258:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	2300      	movs	r3, #0
      HAL_I2C_ListenCpltCallback(hi2c);
 800425c:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 800425e:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004260:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004264:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004268:	f7ff fadd 	bl	8003826 <HAL_I2C_ListenCpltCallback>
 800426c:	e456      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800426e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004270:	2b22      	cmp	r3, #34	; 0x22
 8004272:	d002      	beq.n	800427a <HAL_I2C_EV_IRQHandler+0x796>
 8004274:	2d22      	cmp	r5, #34	; 0x22
 8004276:	f47f ac51 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800427c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004280:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004288:	4620      	mov	r0, r4
 800428a:	f7ff faca 	bl	8003822 <HAL_I2C_SlaveRxCpltCallback>
 800428e:	e445      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004290:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
 8004294:	2821      	cmp	r0, #33	; 0x21
 8004296:	f3c1 0580 	ubfx	r5, r1, #2, #1
 800429a:	d135      	bne.n	8004308 <HAL_I2C_EV_IRQHandler+0x824>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800429c:	0609      	lsls	r1, r1, #24
 800429e:	d527      	bpl.n	80042f0 <HAL_I2C_EV_IRQHandler+0x80c>
 80042a0:	0556      	lsls	r6, r2, #21
 80042a2:	d525      	bpl.n	80042f0 <HAL_I2C_EV_IRQHandler+0x80c>
 80042a4:	bb3d      	cbnz	r5, 80042f6 <HAL_I2C_EV_IRQHandler+0x812>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042a6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 80042aa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ac:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80042ae:	b292      	uxth	r2, r2
 80042b0:	2a00      	cmp	r2, #0
 80042b2:	f43f ac33 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80042bc:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 80042be:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount--;
 80042c0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042c2:	3a01      	subs	r2, #1
 80042c4:	b292      	uxth	r2, r2
 80042c6:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042ca:	b292      	uxth	r2, r2
 80042cc:	2a00      	cmp	r2, #0
 80042ce:	f47f ac25 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 80042d2:	2929      	cmp	r1, #41	; 0x29
 80042d4:	f47f ac22 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e0:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042e2:	6320      	str	r0, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042e4:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80042e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042ea:	f7ff fa99 	bl	8003820 <HAL_I2C_SlaveTxCpltCallback>
 80042ee:	e415      	b.n	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	f43f ac13 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 80042f6:	0595      	lsls	r5, r2, #22
 80042f8:	f57f ac10 	bpl.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80042fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80042fe:	b292      	uxth	r2, r2
 8004300:	2a00      	cmp	r2, #0
 8004302:	f43f ac0b 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8004306:	e5c7      	b.n	8003e98 <HAL_I2C_EV_IRQHandler+0x3b4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004308:	0648      	lsls	r0, r1, #25
 800430a:	d527      	bpl.n	800435c <HAL_I2C_EV_IRQHandler+0x878>
 800430c:	0551      	lsls	r1, r2, #21
 800430e:	d525      	bpl.n	800435c <HAL_I2C_EV_IRQHandler+0x878>
 8004310:	bb3d      	cbnz	r5, 8004362 <HAL_I2C_EV_IRQHandler+0x87e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004312:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  if (hi2c->XferCount != 0U)
 8004316:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004318:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800431a:	b289      	uxth	r1, r1
 800431c:	2900      	cmp	r1, #0
 800431e:	f43f abfd 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	6919      	ldr	r1, [r3, #16]
 8004324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004326:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8004328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800432a:	3301      	adds	r3, #1
 800432c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount--;
 800432e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004330:	3b01      	subs	r3, #1
 8004332:	b29b      	uxth	r3, r3
 8004334:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004336:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	f47f abee 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8004340:	2a2a      	cmp	r2, #42	; 0x2a
 8004342:	f47f abeb 	bne.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004346:	6822      	ldr	r2, [r4, #0]
 8004348:	6853      	ldr	r3, [r2, #4]
 800434a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004350:	2322      	movs	r3, #34	; 0x22
 8004352:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004354:	2328      	movs	r3, #40	; 0x28
 8004356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800435a:	e795      	b.n	8004288 <HAL_I2C_EV_IRQHandler+0x7a4>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435c:	2d00      	cmp	r5, #0
 800435e:	f43f abdd 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
 8004362:	0592      	lsls	r2, r2, #22
 8004364:	f57f abda 	bpl.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004368:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800436a:	b292      	uxth	r2, r2
 800436c:	2a00      	cmp	r2, #0
 800436e:	f43f abd5 	beq.w	8003b1c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e64d      	b.n	8004016 <HAL_I2C_EV_IRQHandler+0x532>
 800437a:	bf00      	nop
 800437c:	080038d5 	.word	0x080038d5
 8004380:	ffff0000 	.word	0xffff0000

08004384 <HAL_I2C_ER_IRQHandler>:
{
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004386:	6803      	ldr	r3, [r0, #0]
{
 8004388:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800438a:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800438c:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800438e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004392:	05f8      	lsls	r0, r7, #23
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004394:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004396:	f3c7 2500 	ubfx	r5, r7, #8, #1
 800439a:	d50b      	bpl.n	80043b4 <HAL_I2C_ER_IRQHandler+0x30>
 800439c:	05f1      	lsls	r1, r6, #23
 800439e:	f3c6 2500 	ubfx	r5, r6, #8, #1
 80043a2:	d507      	bpl.n	80043b4 <HAL_I2C_ER_IRQHandler+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043a4:	f46f 7180 	mvn.w	r1, #256	; 0x100
    error |= HAL_I2C_ERROR_BERR;
 80043a8:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043aa:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80043ac:	6819      	ldr	r1, [r3, #0]
 80043ae:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80043b2:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043b4:	05b8      	lsls	r0, r7, #22
 80043b6:	d506      	bpl.n	80043c6 <HAL_I2C_ER_IRQHandler+0x42>
 80043b8:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043ba:	bf42      	ittt	mi
 80043bc:	f46f 7100 	mvnmi.w	r1, #512	; 0x200
    error |= HAL_I2C_ERROR_ARLO;
 80043c0:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043c4:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043c6:	0578      	lsls	r0, r7, #21
 80043c8:	d536      	bpl.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
 80043ca:	05f1      	lsls	r1, r6, #23
 80043cc:	d534      	bpl.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
    tmp2 = hi2c->XferCount;
 80043ce:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 80043d0:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043d4:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 80043d6:	f8d4 c030 	ldr.w	ip, [r4, #48]	; 0x30
    tmp2 = hi2c->XferCount;
 80043da:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 80043dc:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80043de:	d15b      	bne.n	8004498 <HAL_I2C_ER_IRQHandler+0x114>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d159      	bne.n	8004498 <HAL_I2C_ER_IRQHandler+0x114>
 80043e4:	f001 00f7 	and.w	r0, r1, #247	; 0xf7
 80043e8:	2821      	cmp	r0, #33	; 0x21
 80043ea:	d004      	beq.n	80043f6 <HAL_I2C_ER_IRQHandler+0x72>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80043ec:	2928      	cmp	r1, #40	; 0x28
 80043ee:	d153      	bne.n	8004498 <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80043f0:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
 80043f4:	d150      	bne.n	8004498 <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f6:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043fc:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80043fe:	2908      	cmp	r1, #8
 8004400:	d001      	beq.n	8004406 <HAL_I2C_ER_IRQHandler+0x82>
 8004402:	2920      	cmp	r1, #32
 8004404:	d12a      	bne.n	800445c <HAL_I2C_ER_IRQHandler+0xd8>
 8004406:	2a28      	cmp	r2, #40	; 0x28
 8004408:	d128      	bne.n	800445c <HAL_I2C_ER_IRQHandler+0xd8>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440a:	4a2c      	ldr	r2, [pc, #176]	; (80044bc <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800440c:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800440e:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004416:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800441c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004424:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004426:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004428:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800442a:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800442c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004430:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8004434:	f7ff f9f7 	bl	8003826 <HAL_I2C_ListenCpltCallback>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004438:	053a      	lsls	r2, r7, #20
 800443a:	d53b      	bpl.n	80044b4 <HAL_I2C_ER_IRQHandler+0x130>
 800443c:	05f3      	lsls	r3, r6, #23
 800443e:	d539      	bpl.n	80044b4 <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004440:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004444:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 8004446:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800444a:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 800444c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    I2C_ITError(hi2c);
 800444e:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 8004450:	431d      	orrs	r5, r3
 8004452:	6425      	str	r5, [r4, #64]	; 0x40
}
 8004454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8004458:	f7ff ba9c 	b.w	8003994 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800445c:	2a21      	cmp	r2, #33	; 0x21
 800445e:	d117      	bne.n	8004490 <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004460:	4916      	ldr	r1, [pc, #88]	; (80044bc <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004462:	4620      	mov	r0, r4
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004464:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004466:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004468:	2220      	movs	r2, #32
 800446a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800446e:	2200      	movs	r2, #0
 8004470:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004480:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800448a:	f7ff f9c9 	bl	8003820 <HAL_I2C_SlaveTxCpltCallback>
 800448e:	e7d3      	b.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004494:	615a      	str	r2, [r3, #20]
 8004496:	e7cf      	b.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004498:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800449c:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449e:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 80044a0:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044a4:	d001      	beq.n	80044aa <HAL_I2C_ER_IRQHandler+0x126>
 80044a6:	2a40      	cmp	r2, #64	; 0x40
 80044a8:	d1c6      	bne.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e7c1      	b.n	8004438 <HAL_I2C_ER_IRQHandler+0xb4>
  if (error != HAL_I2C_ERROR_NONE)
 80044b4:	2d00      	cmp	r5, #0
 80044b6:	d1c9      	bne.n	800444c <HAL_I2C_ER_IRQHandler+0xc8>
}
 80044b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044ba:	bf00      	nop
 80044bc:	ffff0000 	.word	0xffff0000

080044c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044c2:	4604      	mov	r4, r0
{
 80044c4:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80044c6:	b310      	cbz	r0, 800450e <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044c8:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80044cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044d0:	b91b      	cbnz	r3, 80044da <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044d2:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044d6:	f005 f94f 	bl	8009778 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044da:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044dc:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044de:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 80044e0:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  __HAL_PCD_DISABLE(hpcd);
 80044e4:	f855 0b10 	ldr.w	r0, [r5], #16
 80044e8:	f002 f8ce 	bl	8006688 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80044f0:	682b      	ldr	r3, [r5, #0]
 80044f2:	1d27      	adds	r7, r4, #4
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	4626      	mov	r6, r4
 80044f8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80044fc:	f856 0b10 	ldr.w	r0, [r6], #16
 8004500:	f002 f8b2 	bl	8006668 <USB_CoreInit>
 8004504:	4605      	mov	r5, r0
 8004506:	b120      	cbz	r0, 8004512 <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004508:	2302      	movs	r3, #2
 800450a:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 800450e:	2501      	movs	r5, #1
 8004510:	e04c      	b.n	80045ac <HAL_PCD_Init+0xec>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004512:	4601      	mov	r1, r0
 8004514:	6820      	ldr	r0, [r4, #0]
 8004516:	f002 f8c1 	bl	800669c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451a:	4629      	mov	r1, r5
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800451c:	f04f 0e01 	mov.w	lr, #1
 8004520:	2528      	movs	r5, #40	; 0x28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004522:	4608      	mov	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004524:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8004528:	b2ca      	uxtb	r2, r1
 800452a:	4594      	cmp	ip, r2
 800452c:	f101 0101 	add.w	r1, r1, #1
 8004530:	d81b      	bhi.n	800456a <HAL_PCD_Init+0xaa>
 8004532:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004534:	2528      	movs	r5, #40	; 0x28
 8004536:	4619      	mov	r1, r3
 8004538:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453a:	4584      	cmp	ip, r0
 800453c:	f103 0301 	add.w	r3, r3, #1
 8004540:	d820      	bhi.n	8004584 <HAL_PCD_Init+0xc4>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004542:	46ec      	mov	ip, sp
 8004544:	4635      	mov	r5, r6
 8004546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004548:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	f8cc 3000 	str.w	r3, [ip]
 8004552:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	f002 f8a2 	bl	80066a0 <USB_DevInit>
 800455c:	2301      	movs	r3, #1
 800455e:	4605      	mov	r5, r0
 8004560:	b1e8      	cbz	r0, 800459e <HAL_PCD_Init+0xde>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004562:	2202      	movs	r2, #2
 8004564:	f884 22a9 	strb.w	r2, [r4, #681]	; 0x2a9
    return HAL_ERROR;
 8004568:	e7d1      	b.n	800450e <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 800456a:	fb05 4302 	mla	r3, r5, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 800456e:	e9c3 000e 	strd	r0, r0, [r3, #56]	; 0x38
    hpcd->IN_ep[i].is_in = 1U;
 8004572:	f883 e029 	strb.w	lr, [r3, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 8004576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 800457a:	86da      	strh	r2, [r3, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800457c:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
    hpcd->IN_ep[i].xfer_len = 0U;
 8004580:	6418      	str	r0, [r3, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004582:	e7d1      	b.n	8004528 <HAL_PCD_Init+0x68>
    hpcd->OUT_ep[i].is_in = 0U;
 8004584:	fb05 4200 	mla	r2, r5, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004588:	e9c2 115e 	strd	r1, r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].is_in = 0U;
 800458c:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8004590:	f882 0168 	strb.w	r0, [r2, #360]	; 0x168
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004594:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004598:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459c:	e7cc      	b.n	8004538 <HAL_PCD_Init+0x78>
  }

  hpcd->USB_Address = 0U;
 800459e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);
 80045a2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80045a4:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80045a8:	f002 fb38 	bl	8006c1c <USB_DevDisconnect>

  return HAL_OK;
}
 80045ac:	4628      	mov	r0, r5
 80045ae:	b007      	add	sp, #28
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045b2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 80045b4:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
{
 80045b8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d010      	beq.n	80045e0 <HAL_PCD_Start+0x2e>
 80045be:	2501      	movs	r5, #1
 80045c0:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80045c4:	6800      	ldr	r0, [r0, #0]
 80045c6:	f002 f856 	bl	8006676 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80045ca:	4629      	mov	r1, r5
 80045cc:	4620      	mov	r0, r4
 80045ce:	f005 fa04 	bl	80099da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	f002 fb20 	bl	8006c18 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045d8:	2000      	movs	r0, #0
 80045da:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80045de:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80045e0:	2002      	movs	r0, #2
 80045e2:	e7fc      	b.n	80045de <HAL_PCD_Start+0x2c>

080045e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045e4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80045e6:	f890 22a8 	ldrb.w	r2, [r0, #680]	; 0x2a8
{
 80045ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80045ec:	2a01      	cmp	r2, #1
 80045ee:	d00b      	beq.n	8004608 <HAL_PCD_SetAddress+0x24>
 80045f0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 80045f2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 80045f6:	f880 22a8 	strb.w	r2, [r0, #680]	; 0x2a8
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045fa:	6800      	ldr	r0, [r0, #0]
 80045fc:	f002 fb06 	bl	8006c0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004600:	2000      	movs	r0, #0
 8004602:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8004606:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004608:	2002      	movs	r0, #2
 800460a:	e7fc      	b.n	8004606 <HAL_PCD_SetAddress+0x22>

0800460c <HAL_PCD_IRQHandler>:
{
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	4604      	mov	r4, r0
 8004612:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004614:	6800      	ldr	r0, [r0, #0]
 8004616:	f002 fb03 	bl	8006c20 <USB_ReadInterrupts>
 800461a:	0402      	lsls	r2, r0, #16
 800461c:	d509      	bpl.n	8004632 <HAL_PCD_IRQHandler+0x26>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800461e:	f8df 9860 	ldr.w	r9, [pc, #2144]	; 8004e80 <HAL_PCD_IRQHandler+0x874>
 8004622:	f8df 8860 	ldr.w	r8, [pc, #2144]	; 8004e84 <HAL_PCD_IRQHandler+0x878>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004626:	6820      	ldr	r0, [r4, #0]
 8004628:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800462c:	041d      	lsls	r5, r3, #16
 800462e:	f100 80c1 	bmi.w	80047b4 <HAL_PCD_IRQHandler+0x1a8>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	f002 faf4 	bl	8006c20 <USB_ReadInterrupts>
 8004638:	0543      	lsls	r3, r0, #21
 800463a:	d50f      	bpl.n	800465c <HAL_PCD_IRQHandler+0x50>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800463c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800463e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004640:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004648:	041b      	lsls	r3, r3, #16
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8004650:	f005 f8cd 	bl	80097ee <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004654:	2100      	movs	r1, #0
 8004656:	4620      	mov	r0, r4
 8004658:	f7ff ffc4 	bl	80045e4 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	f002 fadf 	bl	8006c20 <USB_ReadInterrupts>
 8004662:	0441      	lsls	r1, r0, #17
 8004664:	d508      	bpl.n	8004678 <HAL_PCD_IRQHandler+0x6c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800466c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004670:	041b      	lsls	r3, r3, #16
 8004672:	0c1b      	lsrs	r3, r3, #16
 8004674:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	f002 fad1 	bl	8006c20 <USB_ReadInterrupts>
 800467e:	0482      	lsls	r2, r0, #18
 8004680:	d508      	bpl.n	8004694 <HAL_PCD_IRQHandler+0x88>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	f002 fac3 	bl	8006c20 <USB_ReadInterrupts>
 800469a:	04c3      	lsls	r3, r0, #19
 800469c:	d51c      	bpl.n	80046d8 <HAL_PCD_IRQHandler+0xcc>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800469e:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80046a0:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80046a2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80046a6:	f023 0304 	bic.w	r3, r3, #4
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	0c1b      	lsrs	r3, r3, #16
 80046ae:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80046b2:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80046b6:	f023 0308 	bic.w	r3, r3, #8
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80046c2:	f005 f8b7 	bl	8009834 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80046cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	f002 faa1 	bl	8006c20 <USB_ReadInterrupts>
 80046de:	0507      	lsls	r7, r0, #20
 80046e0:	d546      	bpl.n	8004770 <HAL_PCD_IRQHandler+0x164>
 80046e2:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80046e4:	6823      	ldr	r3, [r4, #0]
 80046e6:	4606      	mov	r6, r0
 80046e8:	4619      	mov	r1, r3
 80046ea:	461a      	mov	r2, r3
 80046ec:	f103 0520 	add.w	r5, r3, #32
 80046f0:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80046f4:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80046f6:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80046fa:	d1f9      	bne.n	80046f0 <HAL_PCD_IRQHandler+0xe4>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80046fc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004700:	b292      	uxth	r2, r2
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800470a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800470e:	f022 0201 	bic.w	r2, r2, #1
 8004712:	0412      	lsls	r2, r2, #16
 8004714:	0c12      	lsrs	r2, r2, #16
 8004716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800471a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800471e:	0556      	lsls	r6, r2, #21
 8004720:	d5fb      	bpl.n	800471a <HAL_PCD_IRQHandler+0x10e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004722:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	0412      	lsls	r2, r2, #16
 800472c:	0c12      	lsrs	r2, r2, #16
 800472e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004732:	f830 2b02 	ldrh.w	r2, [r0], #2
 8004736:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 800473a:	428d      	cmp	r5, r1
 800473c:	d1f9      	bne.n	8004732 <HAL_PCD_IRQHandler+0x126>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800473e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8004742:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004744:	b292      	uxth	r2, r2
 8004746:	f042 0208 	orr.w	r2, r2, #8
 800474a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800474e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8004752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004756:	0412      	lsls	r2, r2, #16
 8004758:	0c12      	lsrs	r2, r2, #16
 800475a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800475e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8004762:	b292      	uxth	r2, r2
 8004764:	f042 0204 	orr.w	r2, r2, #4
 8004768:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 800476c:	f005 f852 	bl	8009814 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	f002 fa55 	bl	8006c20 <USB_ReadInterrupts>
 8004776:	0582      	lsls	r2, r0, #22
 8004778:	d50b      	bpl.n	8004792 <HAL_PCD_IRQHandler+0x186>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800477a:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800477c:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800477e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8004782:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800478e:	f005 f82a 	bl	80097e6 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004792:	6820      	ldr	r0, [r4, #0]
 8004794:	f002 fa44 	bl	8006c20 <USB_ReadInterrupts>
 8004798:	05c3      	lsls	r3, r0, #23
 800479a:	d508      	bpl.n	80047ae <HAL_PCD_IRQHandler+0x1a2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80047a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80047ae:	b005      	add	sp, #20
 80047b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 80047b4:	f8b0 6044 	ldrh.w	r6, [r0, #68]	; 0x44
 80047b8:	b2b1      	uxth	r1, r6
    if (epindex == 0U)
 80047ba:	f016 060f 	ands.w	r6, r6, #15
 80047be:	f040 80b9 	bne.w	8004934 <HAL_PCD_IRQHandler+0x328>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047c2:	f011 0110 	ands.w	r1, r1, #16
 80047c6:	d12d      	bne.n	8004824 <HAL_PCD_IRQHandler+0x218>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047c8:	8803      	ldrh	r3, [r0, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	ea03 0309 	and.w	r3, r3, r9
 80047d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047d4:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047d6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80047da:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80047de:	b29b      	uxth	r3, r3
 80047e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047e4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80047e8:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80047ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80047f4:	4413      	add	r3, r2
 80047f6:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80047f8:	4620      	mov	r0, r4
 80047fa:	f004 ffec 	bl	80097d6 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80047fe:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	f43f af0f 	beq.w	8004626 <HAL_PCD_IRQHandler+0x1a>
 8004808:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800480a:	2a00      	cmp	r2, #0
 800480c:	f47f af0b 	bne.w	8004626 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004810:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004814:	6821      	ldr	r1, [r4, #0]
 8004816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800481a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800481e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8004822:	e700      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004824:	8805      	ldrh	r5, [r0, #0]
 8004826:	b2ab      	uxth	r3, r5
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004828:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
 800482c:	d021      	beq.n	8004872 <HAL_PCD_IRQHandler+0x266>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800482e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004832:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8004836:	b29b      	uxth	r3, r3
 8004838:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800483c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004840:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004844:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 8004848:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800484c:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004850:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004854:	f002 fcd8 	bl	8007208 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004858:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800485a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800485c:	8813      	ldrh	r3, [r2, #0]
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	051b      	lsls	r3, r3, #20
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800486a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800486c:	f004 ffa4 	bl	80097b8 <HAL_PCD_SetupStageCallback>
 8004870:	e6d9      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004872:	041f      	lsls	r7, r3, #16
 8004874:	f57f aed7 	bpl.w	8004626 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004878:	8803      	ldrh	r3, [r0, #0]
 800487a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487e:	051b      	lsls	r3, r3, #20
 8004880:	0d1b      	lsrs	r3, r3, #20
 8004882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004886:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004888:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800488c:	f894 2168 	ldrb.w	r2, [r4, #360]	; 0x168
 8004890:	b29b      	uxth	r3, r3
 8004892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004896:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800489a:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800489e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80048a6:	b18b      	cbz	r3, 80048cc <HAL_PCD_IRQHandler+0x2c0>
 80048a8:	f8d4 117c 	ldr.w	r1, [r4, #380]	; 0x17c
 80048ac:	b171      	cbz	r1, 80048cc <HAL_PCD_IRQHandler+0x2c0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80048ae:	f8b4 216e 	ldrh.w	r2, [r4, #366]	; 0x16e
 80048b2:	f002 fca9 	bl	8007208 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 80048b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048ba:	f8d4 2184 	ldr.w	r2, [r4, #388]	; 0x184
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048be:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 80048c0:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048c2:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 80048c4:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80048c8:	f004 ff7c 	bl	80097c4 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80048cc:	6821      	ldr	r1, [r4, #0]
 80048ce:	f8d4 5178 	ldr.w	r5, [r4, #376]	; 0x178
 80048d2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80048d6:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80048da:	b29b      	uxth	r3, r3
 80048dc:	b9cd      	cbnz	r5, 8004912 <HAL_PCD_IRQHandler+0x306>
 80048de:	5ac2      	ldrh	r2, [r0, r3]
 80048e0:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80048e4:	0412      	lsls	r2, r2, #16
 80048e6:	0c12      	lsrs	r2, r2, #16
 80048e8:	52c2      	strh	r2, [r0, r3]
 80048ea:	5ac2      	ldrh	r2, [r0, r3]
 80048ec:	b292      	uxth	r2, r2
 80048ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f2:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80048f4:	880b      	ldrh	r3, [r1, #0]
 80048f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800490e:	800b      	strh	r3, [r1, #0]
 8004910:	e689      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004912:	2d3e      	cmp	r5, #62	; 0x3e
 8004914:	d806      	bhi.n	8004924 <HAL_PCD_IRQHandler+0x318>
 8004916:	086a      	lsrs	r2, r5, #1
 8004918:	07ee      	lsls	r6, r5, #31
 800491a:	bf48      	it	mi
 800491c:	3201      	addmi	r2, #1
 800491e:	0292      	lsls	r2, r2, #10
 8004920:	b292      	uxth	r2, r2
 8004922:	e7e6      	b.n	80048f2 <HAL_PCD_IRQHandler+0x2e6>
 8004924:	096a      	lsrs	r2, r5, #5
 8004926:	06ed      	lsls	r5, r5, #27
 8004928:	bf08      	it	eq
 800492a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800492e:	ea48 2282 	orr.w	r2, r8, r2, lsl #10
 8004932:	e7f5      	b.n	8004920 <HAL_PCD_IRQHandler+0x314>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004934:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004938:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800493a:	b29f      	uxth	r7, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800493c:	f140 80f8 	bpl.w	8004b30 <HAL_PCD_IRQHandler+0x524>
        if (ep->doublebuffer == 0U)
 8004940:	2128      	movs	r1, #40	; 0x28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004942:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 8004946:	fb01 4106 	mla	r1, r1, r6, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	051b      	lsls	r3, r3, #20
 8004950:	0d1b      	lsrs	r3, r3, #20
 8004952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004956:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800495a:	f891 3174 	ldrb.w	r3, [r1, #372]	; 0x174
 800495e:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8004962:	b9b3      	cbnz	r3, 8004992 <HAL_PCD_IRQHandler+0x386>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004964:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004968:	f891 2168 	ldrb.w	r2, [r1, #360]	; 0x168
 800496c:	b29b      	uxth	r3, r3
 800496e:	3306      	adds	r3, #6
 8004970:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004974:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004978:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 800497c:	2d00      	cmp	r5, #0
 800497e:	f000 80bb 	beq.w	8004af8 <HAL_PCD_IRQHandler+0x4ec>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004982:	462b      	mov	r3, r5
 8004984:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004988:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 800498c:	f002 fc3c 	bl	8007208 <USB_ReadPMA>
 8004990:	e0b2      	b.n	8004af8 <HAL_PCD_IRQHandler+0x4ec>
          if (ep->type == EP_TYPE_BULK)
 8004992:	f891 316b 	ldrb.w	r3, [r1, #363]	; 0x16b
 8004996:	f891 c168 	ldrb.w	ip, [r1, #360]	; 0x168
 800499a:	2b02      	cmp	r3, #2
 800499c:	f040 808b 	bne.w	8004ab6 <HAL_PCD_IRQHandler+0x4aa>

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049a4:	f417 4a80 	ands.w	sl, r7, #16384	; 0x4000
 80049a8:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
 80049ac:	ea4f 0bcc 	mov.w	fp, ip, lsl #3
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	f007 0e40 	and.w	lr, r7, #64	; 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049b6:	d040      	beq.n	8004a3a <HAL_PCD_IRQHandler+0x42e>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b8:	449b      	add	fp, r3
 80049ba:	f10b 0b02 	add.w	fp, fp, #2
 80049be:	f835 501b 	ldrh.w	r5, [r5, fp, lsl #1]
 80049c2:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 80049c6:	4295      	cmp	r5, r2
 80049c8:	d913      	bls.n	80049f2 <HAL_PCD_IRQHandler+0x3e6>
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049d0:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 80049d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	0c1b      	lsrs	r3, r3, #16
 80049e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ec:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 80049f0:	e004      	b.n	80049fc <HAL_PCD_IRQHandler+0x3f0>
      ep->xfer_len -= count;
 80049f2:	1b52      	subs	r2, r2, r5
 80049f4:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 80049f8:	2a00      	cmp	r2, #0
 80049fa:	d0e9      	beq.n	80049d0 <HAL_PCD_IRQHandler+0x3c4>
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049fc:	f1be 0f00 	cmp.w	lr, #0
 8004a00:	d012      	beq.n	8004a28 <HAL_PCD_IRQHandler+0x41c>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a02:	2328      	movs	r3, #40	; 0x28
 8004a04:	fb03 4306 	mla	r3, r3, r6, r4
 8004a08:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8004a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004a28:	2d00      	cmp	r5, #0
 8004a2a:	d065      	beq.n	8004af8 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a2c:	2128      	movs	r1, #40	; 0x28
 8004a2e:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a32:	462b      	mov	r3, r5
 8004a34:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8004a38:	e7a6      	b.n	8004988 <HAL_PCD_IRQHandler+0x37c>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a3a:	445b      	add	r3, fp
 8004a3c:	3306      	adds	r3, #6
 8004a3e:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004a42:	f3c5 0509 	ubfx	r5, r5, #0, #10

    if (ep->xfer_len >= count)
 8004a46:	4295      	cmp	r5, r2
 8004a48:	d912      	bls.n	8004a70 <HAL_PCD_IRQHandler+0x464>
 8004a4a:	f8c1 a180 	str.w	sl, [r1, #384]	; 0x180
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004a4e:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a5a:	041b      	lsls	r3, r3, #16
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a6a:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
 8004a6e:	e004      	b.n	8004a7a <HAL_PCD_IRQHandler+0x46e>
      ep->xfer_len -= count;
 8004a70:	1b52      	subs	r2, r2, r5
 8004a72:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8004a76:	2a00      	cmp	r2, #0
 8004a78:	d0e9      	beq.n	8004a4e <HAL_PCD_IRQHandler+0x442>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004a7a:	f1be 0f00 	cmp.w	lr, #0
 8004a7e:	d112      	bne.n	8004aa6 <HAL_PCD_IRQHandler+0x49a>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004a80:	2328      	movs	r3, #40	; 0x28
 8004a82:	fb03 4306 	mla	r3, r3, r6, r4
 8004a86:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 8004a8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	041b      	lsls	r3, r3, #16
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004aa6:	b33d      	cbz	r5, 8004af8 <HAL_PCD_IRQHandler+0x4ec>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004aa8:	2128      	movs	r1, #40	; 0x28
 8004aaa:	fb01 4106 	mla	r1, r1, r6, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004aae:	462b      	mov	r3, r5
 8004ab0:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8004ab4:	e768      	b.n	8004988 <HAL_PCD_IRQHandler+0x37c>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004ab6:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8004aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	0c1b      	lsrs	r3, r3, #16
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ace:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ad2:	f891 3168 	ldrb.w	r3, [r1, #360]	; 0x168
 8004ad6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ae0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004ae4:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004ae6:	d056      	beq.n	8004b96 <HAL_PCD_IRQHandler+0x58a>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ae8:	3202      	adds	r2, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004af0:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004af4:	2d00      	cmp	r5, #0
 8004af6:	d19c      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x426>
        ep->xfer_count += count;
 8004af8:	2128      	movs	r1, #40	; 0x28
 8004afa:	4371      	muls	r1, r6
 8004afc:	1863      	adds	r3, r4, r1
 8004afe:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8004b02:	442a      	add	r2, r5
 8004b04:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8004b08:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8004b0c:	442a      	add	r2, r5
 8004b0e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004b12:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004b16:	b11a      	cbz	r2, 8004b20 <HAL_PCD_IRQHandler+0x514>
 8004b18:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004b1c:	429d      	cmp	r5, r3
 8004b1e:	d243      	bcs.n	8004ba8 <HAL_PCD_IRQHandler+0x59c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004b20:	2328      	movs	r3, #40	; 0x28
 8004b22:	fb03 4306 	mla	r3, r3, r6, r4
 8004b26:	4620      	mov	r0, r4
 8004b28:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8004b2c:	f004 fe4a 	bl	80097c4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004b30:	063a      	lsls	r2, r7, #24
 8004b32:	f57f ad78 	bpl.w	8004626 <HAL_PCD_IRQHandler+0x1a>
 8004b36:	2528      	movs	r5, #40	; 0x28
 8004b38:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004b3a:	fb05 4506 	mla	r5, r5, r6, r4
 8004b3e:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8004b42:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	ea03 0309 	and.w	r3, r3, r9
 8004b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b50:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if ((ep->type != EP_TYPE_BULK) ||
 8004b54:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
 8004b58:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d101      	bne.n	8004b64 <HAL_PCD_IRQHandler+0x558>
 8004b60:	05fb      	lsls	r3, r7, #23
 8004b62:	d439      	bmi.n	8004bd8 <HAL_PCD_IRQHandler+0x5cc>
          if (ep->xfer_len > TxByteNbre)
 8004b64:	2728      	movs	r7, #40	; 0x28
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b66:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
          if (ep->xfer_len > TxByteNbre)
 8004b6a:	fb07 4306 	mla	r3, r7, r6, r4
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	3202      	adds	r2, #2
 8004b72:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8004b76:	f83e e011 	ldrh.w	lr, [lr, r1, lsl #1]
          if (ep->xfer_len > TxByteNbre)
 8004b7a:	f8d3 c040 	ldr.w	ip, [r3, #64]	; 0x40
 8004b7e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004b82:	45f4      	cmp	ip, lr
 8004b84:	d817      	bhi.n	8004bb6 <HAL_PCD_IRQHandler+0x5aa>
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	; 0x40
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004b90:	f004 fe21 	bl	80097d6 <HAL_PCD_DataInStageCallback>
 8004b94:	e547      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b96:	3206      	adds	r2, #6
 8004b98:	4413      	add	r3, r2
 8004b9a:	f835 5013 	ldrh.w	r5, [r5, r3, lsl #1]
 8004b9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
              if (count != 0U)
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	d0a8      	beq.n	8004af8 <HAL_PCD_IRQHandler+0x4ec>
 8004ba6:	e782      	b.n	8004aae <HAL_PCD_IRQHandler+0x4a2>
        ep = &hpcd->OUT_ep[epindex];
 8004ba8:	f501 71b4 	add.w	r1, r1, #360	; 0x168
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	4421      	add	r1, r4
 8004bb0:	f002 f84c 	bl	8006c4c <USB_EPStartXfer>
 8004bb4:	e7bc      	b.n	8004b30 <HAL_PCD_IRQHandler+0x524>
            ep->xfer_len -= TxByteNbre;
 8004bb6:	ebac 020e 	sub.w	r2, ip, lr
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
          if (ep->xfer_len == 0U)
 8004bbc:	2a00      	cmp	r2, #0
 8004bbe:	d0e4      	beq.n	8004b8a <HAL_PCD_IRQHandler+0x57e>
        ep = &hpcd->IN_ep[epindex];
 8004bc0:	fb06 7707 	mla	r7, r6, r7, r7
            ep->xfer_buff += TxByteNbre;
 8004bc4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004bc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            ep->xfer_buff += TxByteNbre;
 8004bc8:	4471      	add	r1, lr
            ep->xfer_count += TxByteNbre;
 8004bca:	4472      	add	r2, lr
            ep->xfer_buff += TxByteNbre;
 8004bcc:	63d9      	str	r1, [r3, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bd0:	19e1      	adds	r1, r4, r7
 8004bd2:	f002 f83b 	bl	8006c4c <USB_EPStartXfer>
 8004bd6:	e526      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bd8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004bdc:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004be0:	b292      	uxth	r2, r2
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004be2:	f017 0c40 	ands.w	ip, r7, #64	; 0x40
 8004be6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004be8:	4452      	add	r2, sl
 8004bea:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bee:	f000 80a2 	beq.w	8004d36 <HAL_PCD_IRQHandler+0x72a>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bf2:	3202      	adds	r2, #2
 8004bf4:	f83e c012 	ldrh.w	ip, [lr, r2, lsl #1]
 8004bf8:	2228      	movs	r2, #40	; 0x28

    if (ep->xfer_len > TxByteNbre)
 8004bfa:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004bfe:	459c      	cmp	ip, r3
    {
      ep->xfer_len -= TxByteNbre;
    }
    else
    {
      ep->xfer_len = 0U;
 8004c00:	bf28      	it	cs
 8004c02:	2300      	movcs	r3, #0
 8004c04:	fb02 4206 	mla	r2, r2, r6, r4
      ep->xfer_len -= TxByteNbre;
 8004c08:	bf38      	it	cc
 8004c0a:	eba3 030c 	subcc.w	r3, r3, ip
 8004c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c10:	b2bf      	uxth	r7, r7
 8004c12:	b9bb      	cbnz	r3, 8004c44 <HAL_PCD_IRQHandler+0x638>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c14:	4620      	mov	r0, r4
 8004c16:	f004 fdde 	bl	80097d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c1a:	2f00      	cmp	r7, #0
 8004c1c:	f000 80a3 	beq.w	8004d66 <HAL_PCD_IRQHandler+0x75a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c20:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	041b      	lsls	r3, r3, #16
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8004c42:	e090      	b.n	8004d66 <HAL_PCD_IRQHandler+0x75a>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004c44:	b16f      	cbz	r7, 8004c62 <HAL_PCD_IRQHandler+0x656>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004c46:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	0c1b      	lsrs	r3, r3, #16
 8004c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004c62:	2328      	movs	r3, #40	; 0x28
 8004c64:	fb03 4306 	mla	r3, r3, r6, r4
 8004c68:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8004c6c:	2a01      	cmp	r2, #1
 8004c6e:	d17a      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004c72:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004c74:	4462      	add	r2, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c76:	6c9f      	ldr	r7, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004c78:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004c7c:	4461      	add	r1, ip
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c7e:	4297      	cmp	r7, r2
        ep->xfer_buff += TxByteNbre;
 8004c80:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004c82:	d327      	bcc.n	8004cd4 <HAL_PCD_IRQHandler+0x6c8>
          ep->xfer_len_db -= len;
 8004c84:	1abf      	subs	r7, r7, r2
 8004c86:	649f      	str	r7, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004c88:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
 8004c8c:	b293      	uxth	r3, r2
 8004c8e:	2f00      	cmp	r7, #0
 8004c90:	d143      	bne.n	8004d1a <HAL_PCD_IRQHandler+0x70e>
 8004c92:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004c96:	f895 c028 	ldrb.w	ip, [r5, #40]	; 0x28
 8004c9a:	b2bf      	uxth	r7, r7
 8004c9c:	f200 4e04 	addw	lr, r0, #1028	; 0x404
 8004ca0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8004ca4:	4477      	add	r7, lr
 8004ca6:	bb02      	cbnz	r2, 8004cea <HAL_PCD_IRQHandler+0x6de>
 8004ca8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8004cac:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004cb0:	0412      	lsls	r2, r2, #16
 8004cb2:	0c12      	lsrs	r2, r2, #16
 8004cb4:	f82c 2007 	strh.w	r2, [ip, r7]
 8004cb8:	f83c 2007 	ldrh.w	r2, [ip, r7]
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc2:	f82c 2007 	strh.w	r2, [ip, r7]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cc6:	2228      	movs	r2, #40	; 0x28
 8004cc8:	fb02 4606 	mla	r6, r2, r6, r4
 8004ccc:	8e32      	ldrh	r2, [r6, #48]	; 0x30

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004cce:	f001 ffad 	bl	8006c2c <USB_WritePMA>
 8004cd2:	e048      	b.n	8004d66 <HAL_PCD_IRQHandler+0x75a>
        else if (ep->xfer_len_db == 0U)
 8004cd4:	b91f      	cbnz	r7, 8004cde <HAL_PCD_IRQHandler+0x6d2>
    if (ep->xfer_len > TxByteNbre)
 8004cd6:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8004cd8:	f883 704c 	strb.w	r7, [r3, #76]	; 0x4c
 8004cdc:	e7d4      	b.n	8004c88 <HAL_PCD_IRQHandler+0x67c>
          ep->xfer_fill_db = 0U;
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8004ce4:	649a      	str	r2, [r3, #72]	; 0x48
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	e7ce      	b.n	8004c88 <HAL_PCD_IRQHandler+0x67c>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004cea:	2a3e      	cmp	r2, #62	; 0x3e
 8004cec:	d80c      	bhi.n	8004d08 <HAL_PCD_IRQHandler+0x6fc>
 8004cee:	ea4f 0e52 	mov.w	lr, r2, lsr #1
 8004cf2:	07d2      	lsls	r2, r2, #31
 8004cf4:	bf48      	it	mi
 8004cf6:	f10e 0e01 	addmi.w	lr, lr, #1
 8004cfa:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8004cfe:	fa1f fe8e 	uxth.w	lr, lr
 8004d02:	f82c e007 	strh.w	lr, [ip, r7]
 8004d06:	e7de      	b.n	8004cc6 <HAL_PCD_IRQHandler+0x6ba>
 8004d08:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 8004d0c:	06d2      	lsls	r2, r2, #27
 8004d0e:	bf08      	it	eq
 8004d10:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8004d14:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8004d18:	e7f1      	b.n	8004cfe <HAL_PCD_IRQHandler+0x6f2>
 8004d1a:	2f01      	cmp	r7, #1
 8004d1c:	d1d3      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x6ba>
 8004d1e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004d22:	f895 7028 	ldrb.w	r7, [r5, #40]	; 0x28
 8004d26:	fa1f fc82 	uxth.w	ip, r2
 8004d2a:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004d2e:	013f      	lsls	r7, r7, #4
 8004d30:	4462      	add	r2, ip
 8004d32:	52bb      	strh	r3, [r7, r2]
 8004d34:	e7c7      	b.n	8004cc6 <HAL_PCD_IRQHandler+0x6ba>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004d36:	3206      	adds	r2, #6
 8004d38:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 8004d3c:	b2bf      	uxth	r7, r7
    if (ep->xfer_len >= TxByteNbre)
 8004d3e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d42:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8004d44:	bf88      	it	hi
 8004d46:	4663      	movhi	r3, ip
 8004d48:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8004d4c:	fb0c 4c06 	mla	ip, ip, r6, r4
      ep->xfer_len -= TxByteNbre;
 8004d50:	bf98      	it	ls
 8004d52:	1a9b      	subls	r3, r3, r2
 8004d54:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8004d58:	b9c3      	cbnz	r3, 8004d8c <HAL_PCD_IRQHandler+0x780>
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f004 fd3b 	bl	80097d6 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f43f af5d 	beq.w	8004c20 <HAL_PCD_IRQHandler+0x614>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004d66:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8004d8a:	e44c      	b.n	8004626 <HAL_PCD_IRQHandler+0x1a>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d8c:	b96f      	cbnz	r7, 8004daa <HAL_PCD_IRQHandler+0x79e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004d8e:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d9a:	041b      	lsls	r3, r3, #16
 8004d9c:	0c1b      	lsrs	r3, r3, #16
 8004d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8004daa:	2328      	movs	r3, #40	; 0x28
 8004dac:	fb03 4306 	mla	r3, r3, r6, r4
 8004db0:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 8004db4:	2901      	cmp	r1, #1
 8004db6:	d1d6      	bne.n	8004d66 <HAL_PCD_IRQHandler+0x75a>
        ep->xfer_count += TxByteNbre;
 8004db8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8004dba:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8004dbc:	4417      	add	r7, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dbe:	f8d3 c048 	ldr.w	ip, [r3, #72]	; 0x48
        ep->xfer_count += TxByteNbre;
 8004dc2:	645f      	str	r7, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dc4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8004dc6:	4411      	add	r1, r2
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dc8:	45bc      	cmp	ip, r7
        ep->xfer_buff += TxByteNbre;
 8004dca:	63d9      	str	r1, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dcc:	d326      	bcc.n	8004e1c <HAL_PCD_IRQHandler+0x810>
          ep->xfer_len_db -= len;
 8004dce:	ebac 0207 	sub.w	r2, ip, r7
 8004dd2:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004dd4:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 8004dd8:	b2bb      	uxth	r3, r7
 8004dda:	2a00      	cmp	r2, #0
 8004ddc:	d143      	bne.n	8004e66 <HAL_PCD_IRQHandler+0x85a>
 8004dde:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8004de2:	fa1f f28c 	uxth.w	r2, ip
 8004de6:	f200 4c0c 	addw	ip, r0, #1036	; 0x40c
 8004dea:	4494      	add	ip, r2
 8004dec:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	bb07      	cbnz	r7, 8004e36 <HAL_PCD_IRQHandler+0x82a>
 8004df4:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8004df8:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8004dfc:	043f      	lsls	r7, r7, #16
 8004dfe:	0c3f      	lsrs	r7, r7, #16
 8004e00:	f82c 7002 	strh.w	r7, [ip, r2]
 8004e04:	f83c 7002 	ldrh.w	r7, [ip, r2]
 8004e08:	b2bf      	uxth	r7, r7
 8004e0a:	f447 4700 	orr.w	r7, r7, #32768	; 0x8000
 8004e0e:	f82c 7002 	strh.w	r7, [ip, r2]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e12:	2228      	movs	r2, #40	; 0x28
 8004e14:	fb02 4606 	mla	r6, r2, r6, r4
 8004e18:	8e72      	ldrh	r2, [r6, #50]	; 0x32
 8004e1a:	e758      	b.n	8004cce <HAL_PCD_IRQHandler+0x6c2>
        else if (ep->xfer_len_db == 0U)
 8004e1c:	f1bc 0f00 	cmp.w	ip, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_PCD_IRQHandler+0x81e>
    if (ep->xfer_len >= TxByteNbre)
 8004e22:	4617      	mov	r7, r2
          ep->xfer_fill_db = 0U;
 8004e24:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
 8004e28:	e7d4      	b.n	8004dd4 <HAL_PCD_IRQHandler+0x7c8>
          ep->xfer_len_db = 0U;
 8004e2a:	2200      	movs	r2, #0
          ep->xfer_fill_db = 0;
 8004e2c:	4667      	mov	r7, ip
          ep->xfer_len_db = 0U;
 8004e2e:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 8004e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004e34:	e7ce      	b.n	8004dd4 <HAL_PCD_IRQHandler+0x7c8>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e36:	2f3e      	cmp	r7, #62	; 0x3e
 8004e38:	d80c      	bhi.n	8004e54 <HAL_PCD_IRQHandler+0x848>
 8004e3a:	ea4f 0e57 	mov.w	lr, r7, lsr #1
 8004e3e:	07ff      	lsls	r7, r7, #31
 8004e40:	bf48      	it	mi
 8004e42:	f10e 0e01 	addmi.w	lr, lr, #1
 8004e46:	ea4f 2e8e 	mov.w	lr, lr, lsl #10
 8004e4a:	fa1f fe8e 	uxth.w	lr, lr
 8004e4e:	f82c e002 	strh.w	lr, [ip, r2]
 8004e52:	e7de      	b.n	8004e12 <HAL_PCD_IRQHandler+0x806>
 8004e54:	ea4f 1e57 	mov.w	lr, r7, lsr #5
 8004e58:	06ff      	lsls	r7, r7, #27
 8004e5a:	bf08      	it	eq
 8004e5c:	f10e 3eff 	addeq.w	lr, lr, #4294967295
 8004e60:	ea48 2e8e 	orr.w	lr, r8, lr, lsl #10
 8004e64:	e7f1      	b.n	8004e4a <HAL_PCD_IRQHandler+0x83e>
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	d1d3      	bne.n	8004e12 <HAL_PCD_IRQHandler+0x806>
 8004e6a:	f8b0 7050 	ldrh.w	r7, [r0, #80]	; 0x50
 8004e6e:	b2ba      	uxth	r2, r7
 8004e70:	f200 470c 	addw	r7, r0, #1036	; 0x40c
 8004e74:	4417      	add	r7, r2
 8004e76:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 8004e7a:	0112      	lsls	r2, r2, #4
 8004e7c:	52bb      	strh	r3, [r7, r2]
 8004e7e:	e7c8      	b.n	8004e12 <HAL_PCD_IRQHandler+0x806>
 8004e80:	ffff8f0f 	.word	0xffff8f0f
 8004e84:	ffff8000 	.word	0xffff8000

08004e88 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004e88:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4605      	mov	r5, r0
 8004e90:	f001 0007 	and.w	r0, r1, #7
 8004e94:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8004e98:	d01c      	beq.n	8004ed4 <HAL_PCD_EP_Open+0x4c>
    ep->is_in = 1U;
 8004e9a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e9c:	fb00 1101 	mla	r1, r0, r1, r1
 8004ea0:	4429      	add	r1, r5
    ep->is_in = 1U;
 8004ea2:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8004ea4:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8004ea6:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea8:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8004eaa:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8004eac:	b102      	cbz	r2, 8004eb0 <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 8004eae:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 8004eb0:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8004eb2:	bf04      	itt	eq
 8004eb4:	2300      	moveq	r3, #0
 8004eb6:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8004eb8:	f895 32a8 	ldrb.w	r3, [r5, #680]	; 0x2a8
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d013      	beq.n	8004ee8 <HAL_PCD_EP_Open+0x60>
 8004ec0:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ec2:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8004ec4:	f885 32a8 	strb.w	r3, [r5, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004ec8:	f001 fbfe 	bl	80066c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f885 02a8 	strb.w	r0, [r5, #680]	; 0x2a8
}
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8004ed4:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed6:	fb01 f400 	mul.w	r4, r1, r0
 8004eda:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    ep->is_in = 0U;
 8004ede:	442c      	add	r4, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee0:	4429      	add	r1, r5
    ep->is_in = 0U;
 8004ee2:	f884 6169 	strb.w	r6, [r4, #361]	; 0x169
 8004ee6:	e7dd      	b.n	8004ea4 <HAL_PCD_EP_Open+0x1c>
  __HAL_LOCK(hpcd);
 8004ee8:	2002      	movs	r0, #2
 8004eea:	e7f2      	b.n	8004ed2 <HAL_PCD_EP_Open+0x4a>

08004eec <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8004eec:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f001 0207 	and.w	r2, r1, #7
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	f04f 0128 	mov.w	r1, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8004efc:	d013      	beq.n	8004f26 <HAL_PCD_EP_Close+0x3a>
    ep->is_in = 1U;
 8004efe:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f00:	fb02 1101 	mla	r1, r2, r1, r1
 8004f04:	4401      	add	r1, r0
    ep->is_in = 1U;
 8004f06:	704b      	strb	r3, [r1, #1]
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004f08:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8004f0a:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d013      	beq.n	8004f3a <HAL_PCD_EP_Close+0x4e>
 8004f12:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f14:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004f16:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f1a:	f001 fd2d 	bl	8006978 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004f24:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f26:	fb01 f302 	mul.w	r3, r1, r2
 8004f2a:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8004f2e:	4401      	add	r1, r0
    ep->is_in = 0U;
 8004f30:	4403      	add	r3, r0
 8004f32:	2000      	movs	r0, #0
 8004f34:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8004f38:	e7e6      	b.n	8004f08 <HAL_PCD_EP_Close+0x1c>
  __HAL_LOCK(hpcd);
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	e7f2      	b.n	8004f24 <HAL_PCD_EP_Close+0x38>

08004f3e <HAL_PCD_EP_Receive>:
{
 8004f3e:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8004f40:	2428      	movs	r4, #40	; 0x28
  ep->xfer_count = 0U;
 8004f42:	2600      	movs	r6, #0
 8004f44:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 8004f48:	434c      	muls	r4, r1
 8004f4a:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f4c:	f885 1168 	strb.w	r1, [r5, #360]	; 0x168
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f50:	f504 71b4 	add.w	r1, r4, #360	; 0x168
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f54:	4401      	add	r1, r0
  ep->xfer_len = len;
 8004f56:	e9c5 235f 	strd	r2, r3, [r5, #380]	; 0x17c
  ep->xfer_count = 0U;
 8004f5a:	f8c5 6184 	str.w	r6, [r5, #388]	; 0x184
  ep->is_in = 0U;
 8004f5e:	f885 6169 	strb.w	r6, [r5, #361]	; 0x169
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	f001 fe72 	bl	8006c4c <USB_EPStartXfer>
}
 8004f68:	4630      	mov	r0, r6
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}

08004f6c <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f6c:	2328      	movs	r3, #40	; 0x28
 8004f6e:	f001 0107 	and.w	r1, r1, #7
 8004f72:	fb03 0101 	mla	r1, r3, r1, r0
}
 8004f76:	f8d1 0184 	ldr.w	r0, [r1, #388]	; 0x184
 8004f7a:	4770      	bx	lr

08004f7c <HAL_PCD_EP_Transmit>:
{
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	f001 0507 	and.w	r5, r1, #7
  ep->xfer_buff = pBuf;
 8004f82:	2128      	movs	r1, #40	; 0x28
 8004f84:	fb01 0405 	mla	r4, r1, r5, r0
  ep->xfer_count = 0U;
 8004f88:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8004f8a:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 8004f8e:	2201      	movs	r2, #1
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f90:	fb05 1101 	mla	r1, r5, r1, r1
  ep->xfer_fill_db = 1U;
 8004f94:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f98:	4401      	add	r1, r0
  ep->xfer_len_db = len;
 8004f9a:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->xfer_count = 0U;
 8004f9c:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8004f9e:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fa2:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fa6:	6800      	ldr	r0, [r0, #0]
 8004fa8:	f001 fe50 	bl	8006c4c <USB_EPStartXfer>
}
 8004fac:	4630      	mov	r0, r6
 8004fae:	bd70      	pop	{r4, r5, r6, pc}

08004fb0 <HAL_PCD_EP_SetStall>:
{
 8004fb0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fb2:	6843      	ldr	r3, [r0, #4]
 8004fb4:	f001 0507 	and.w	r5, r1, #7
 8004fb8:	429d      	cmp	r5, r3
{
 8004fba:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fbc:	d828      	bhi.n	8005010 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8004fbe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004fc2:	f04f 0328 	mov.w	r3, #40	; 0x28
 8004fc6:	d01a      	beq.n	8004ffe <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc8:	fb05 3303 	mla	r3, r5, r3, r3
 8004fcc:	18c1      	adds	r1, r0, r3
    ep->is_in = 1U;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 1U;
 8004fd2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fd4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8004fd6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8004fd8:	f894 22a8 	ldrb.w	r2, [r4, #680]	; 0x2a8
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d019      	beq.n	8005014 <HAL_PCD_EP_SetStall+0x64>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fe0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8004fe2:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fe6:	f001 fda6 	bl	8006b36 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fea:	b925      	cbnz	r5, 8004ff6 <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	f504 712c 	add.w	r1, r4, #688	; 0x2b0
 8004ff2:	f001 fe19 	bl	8006c28 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8004ff6:	2000      	movs	r0, #0
 8004ff8:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8004ffe:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005000:	434b      	muls	r3, r1
 8005002:	f503 71b4 	add.w	r1, r3, #360	; 0x168
    ep->is_in = 0U;
 8005006:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8005008:	4401      	add	r1, r0
    ep->is_in = 0U;
 800500a:	f883 2169 	strb.w	r2, [r3, #361]	; 0x169
 800500e:	e7e0      	b.n	8004fd2 <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 8005010:	2001      	movs	r0, #1
 8005012:	e7f3      	b.n	8004ffc <HAL_PCD_EP_SetStall+0x4c>
  __HAL_LOCK(hpcd);
 8005014:	2002      	movs	r0, #2
 8005016:	e7f1      	b.n	8004ffc <HAL_PCD_EP_SetStall+0x4c>

08005018 <HAL_PCD_EP_ClrStall>:
{
 8005018:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800501a:	6843      	ldr	r3, [r0, #4]
 800501c:	f001 020f 	and.w	r2, r1, #15
 8005020:	429a      	cmp	r2, r3
{
 8005022:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005024:	d826      	bhi.n	8005074 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8005026:	f011 0f80 	tst.w	r1, #128	; 0x80
 800502a:	f001 0207 	and.w	r2, r1, #7
 800502e:	f04f 0128 	mov.w	r1, #40	; 0x28
 8005032:	d015      	beq.n	8005060 <HAL_PCD_EP_ClrStall+0x48>
    ep->is_in = 1U;
 8005034:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005036:	fb02 1101 	mla	r1, r2, r1, r1
 800503a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800503c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 800503e:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005040:	700a      	strb	r2, [r1, #0]
  ep->is_stall = 0U;
 8005042:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8005044:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8005048:	2b01      	cmp	r3, #1
 800504a:	d015      	beq.n	8005078 <HAL_PCD_EP_ClrStall+0x60>
 800504c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800504e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005050:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005054:	f001 fd8f 	bl	8006b76 <USB_EPClearStall>
  return HAL_OK;
 8005058:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800505a:	f884 52a8 	strb.w	r5, [r4, #680]	; 0x2a8
}
 800505e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005060:	fb01 f302 	mul.w	r3, r1, r2
 8005064:	f503 71b4 	add.w	r1, r3, #360	; 0x168
 8005068:	4401      	add	r1, r0
    ep->is_in = 0U;
 800506a:	4403      	add	r3, r0
 800506c:	2000      	movs	r0, #0
 800506e:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
 8005072:	e7e4      	b.n	800503e <HAL_PCD_EP_ClrStall+0x26>
    return HAL_ERROR;
 8005074:	2001      	movs	r0, #1
 8005076:	e7f2      	b.n	800505e <HAL_PCD_EP_ClrStall+0x46>
  __HAL_LOCK(hpcd);
 8005078:	2002      	movs	r0, #2
 800507a:	e7f0      	b.n	800505e <HAL_PCD_EP_ClrStall+0x46>

0800507c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800507c:	b510      	push	{r4, lr}
 800507e:	2428      	movs	r4, #40	; 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005080:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005084:	bf1b      	ittet	ne
 8005086:	f001 0107 	andne.w	r1, r1, #7
 800508a:	fb01 4104 	mlane	r1, r1, r4, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800508e:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005092:	1840      	addne	r0, r0, r1
    ep = &hpcd->OUT_ep[ep_addr];
 8005094:	bf08      	it	eq
 8005096:	f500 70b4 	addeq.w	r0, r0, #360	; 0x168
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800509a:	b299      	uxth	r1, r3
 800509c:	b91a      	cbnz	r2, 80050a6 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800509e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80050a0:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80050a2:	2000      	movs	r0, #0
 80050a4:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80050a6:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80050a8:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80050aa:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80050ac:	e7f9      	b.n	80050a2 <HAL_PCDEx_PMAConfig+0x26>
	...

080050b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050b4:	4605      	mov	r5, r0
 80050b6:	b338      	cbz	r0, 8005108 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050b8:	6803      	ldr	r3, [r0, #0]
 80050ba:	07db      	lsls	r3, r3, #31
 80050bc:	d410      	bmi.n	80050e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	079f      	lsls	r7, r3, #30
 80050c2:	d45e      	bmi.n	8005182 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c4:	682b      	ldr	r3, [r5, #0]
 80050c6:	0719      	lsls	r1, r3, #28
 80050c8:	f100 8095 	bmi.w	80051f6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	075a      	lsls	r2, r3, #29
 80050d0:	f100 80bf 	bmi.w	8005252 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050d4:	69e8      	ldr	r0, [r5, #28]
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f040 812c 	bne.w	8005334 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80050dc:	2000      	movs	r0, #0
 80050de:	e029      	b.n	8005134 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050e0:	4c8f      	ldr	r4, [pc, #572]	; (8005320 <HAL_RCC_OscConfig+0x270>)
 80050e2:	6863      	ldr	r3, [r4, #4]
 80050e4:	f003 030c 	and.w	r3, r3, #12
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d007      	beq.n	80050fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d10a      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
 80050f6:	6863      	ldr	r3, [r4, #4]
 80050f8:	03de      	lsls	r6, r3, #15
 80050fa:	d507      	bpl.n	800510c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	039c      	lsls	r4, r3, #14
 8005100:	d5dd      	bpl.n	80050be <HAL_RCC_OscConfig+0xe>
 8005102:	686b      	ldr	r3, [r5, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1da      	bne.n	80050be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8005108:	2001      	movs	r0, #1
 800510a:	e013      	b.n	8005134 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	686b      	ldr	r3, [r5, #4]
 800510e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005112:	d112      	bne.n	800513a <HAL_RCC_OscConfig+0x8a>
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800511c:	f7fd fed6 	bl	8002ecc <HAL_GetTick>
 8005120:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	0398      	lsls	r0, r3, #14
 8005126:	d4ca      	bmi.n	80050be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005128:	f7fd fed0 	bl	8002ecc <HAL_GetTick>
 800512c:	1b80      	subs	r0, r0, r6
 800512e:	2864      	cmp	r0, #100	; 0x64
 8005130:	d9f7      	bls.n	8005122 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005132:	2003      	movs	r0, #3
}
 8005134:	b002      	add	sp, #8
 8005136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800513a:	b99b      	cbnz	r3, 8005164 <HAL_RCC_OscConfig+0xb4>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	6023      	str	r3, [r4, #0]
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800514c:	f7fd febe 	bl	8002ecc <HAL_GetTick>
 8005150:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	0399      	lsls	r1, r3, #14
 8005156:	d5b2      	bpl.n	80050be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005158:	f7fd feb8 	bl	8002ecc <HAL_GetTick>
 800515c:	1b80      	subs	r0, r0, r6
 800515e:	2864      	cmp	r0, #100	; 0x64
 8005160:	d9f7      	bls.n	8005152 <HAL_RCC_OscConfig+0xa2>
 8005162:	e7e6      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	d103      	bne.n	8005174 <HAL_RCC_OscConfig+0xc4>
 800516c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	e7cf      	b.n	8005114 <HAL_RCC_OscConfig+0x64>
 8005174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005180:	e7cb      	b.n	800511a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005182:	4c67      	ldr	r4, [pc, #412]	; (8005320 <HAL_RCC_OscConfig+0x270>)
 8005184:	6863      	ldr	r3, [r4, #4]
 8005186:	f013 0f0c 	tst.w	r3, #12
 800518a:	d007      	beq.n	800519c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800518c:	6863      	ldr	r3, [r4, #4]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b08      	cmp	r3, #8
 8005194:	d110      	bne.n	80051b8 <HAL_RCC_OscConfig+0x108>
 8005196:	6863      	ldr	r3, [r4, #4]
 8005198:	03da      	lsls	r2, r3, #15
 800519a:	d40d      	bmi.n	80051b8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	079b      	lsls	r3, r3, #30
 80051a0:	d502      	bpl.n	80051a8 <HAL_RCC_OscConfig+0xf8>
 80051a2:	692b      	ldr	r3, [r5, #16]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d1af      	bne.n	8005108 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	696a      	ldr	r2, [r5, #20]
 80051ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	e785      	b.n	80050c4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051b8:	692a      	ldr	r2, [r5, #16]
 80051ba:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <HAL_RCC_OscConfig+0x274>)
 80051bc:	b16a      	cbz	r2, 80051da <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80051be:	2201      	movs	r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051c2:	f7fd fe83 	bl	8002ecc <HAL_GetTick>
 80051c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	079f      	lsls	r7, r3, #30
 80051cc:	d4ec      	bmi.n	80051a8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ce:	f7fd fe7d 	bl	8002ecc <HAL_GetTick>
 80051d2:	1b80      	subs	r0, r0, r6
 80051d4:	2802      	cmp	r0, #2
 80051d6:	d9f7      	bls.n	80051c8 <HAL_RCC_OscConfig+0x118>
 80051d8:	e7ab      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80051da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80051dc:	f7fd fe76 	bl	8002ecc <HAL_GetTick>
 80051e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	0798      	lsls	r0, r3, #30
 80051e6:	f57f af6d 	bpl.w	80050c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ea:	f7fd fe6f 	bl	8002ecc <HAL_GetTick>
 80051ee:	1b80      	subs	r0, r0, r6
 80051f0:	2802      	cmp	r0, #2
 80051f2:	d9f6      	bls.n	80051e2 <HAL_RCC_OscConfig+0x132>
 80051f4:	e79d      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051f6:	69aa      	ldr	r2, [r5, #24]
 80051f8:	4e49      	ldr	r6, [pc, #292]	; (8005320 <HAL_RCC_OscConfig+0x270>)
 80051fa:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <HAL_RCC_OscConfig+0x278>)
 80051fc:	b1da      	cbz	r2, 8005236 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005202:	f7fd fe63 	bl	8002ecc <HAL_GetTick>
 8005206:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005208:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800520a:	079b      	lsls	r3, r3, #30
 800520c:	d50d      	bpl.n	800522a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800520e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005212:	4b46      	ldr	r3, [pc, #280]	; (800532c <HAL_RCC_OscConfig+0x27c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	fbb3 f3f2 	udiv	r3, r3, r2
 800521a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800521c:	bf00      	nop
  }
  while (Delay --);
 800521e:	9b01      	ldr	r3, [sp, #4]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	9201      	str	r2, [sp, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1f9      	bne.n	800521c <HAL_RCC_OscConfig+0x16c>
 8005228:	e750      	b.n	80050cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522a:	f7fd fe4f 	bl	8002ecc <HAL_GetTick>
 800522e:	1b00      	subs	r0, r0, r4
 8005230:	2802      	cmp	r0, #2
 8005232:	d9e9      	bls.n	8005208 <HAL_RCC_OscConfig+0x158>
 8005234:	e77d      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005236:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005238:	f7fd fe48 	bl	8002ecc <HAL_GetTick>
 800523c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005240:	079f      	lsls	r7, r3, #30
 8005242:	f57f af43 	bpl.w	80050cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005246:	f7fd fe41 	bl	8002ecc <HAL_GetTick>
 800524a:	1b00      	subs	r0, r0, r4
 800524c:	2802      	cmp	r0, #2
 800524e:	d9f6      	bls.n	800523e <HAL_RCC_OscConfig+0x18e>
 8005250:	e76f      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005252:	4c33      	ldr	r4, [pc, #204]	; (8005320 <HAL_RCC_OscConfig+0x270>)
 8005254:	69e3      	ldr	r3, [r4, #28]
 8005256:	00d8      	lsls	r0, r3, #3
 8005258:	d424      	bmi.n	80052a4 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 800525a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800525c:	69e3      	ldr	r3, [r4, #28]
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	61e3      	str	r3, [r4, #28]
 8005264:	69e3      	ldr	r3, [r4, #28]
 8005266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526e:	4e30      	ldr	r6, [pc, #192]	; (8005330 <HAL_RCC_OscConfig+0x280>)
 8005270:	6833      	ldr	r3, [r6, #0]
 8005272:	05d9      	lsls	r1, r3, #23
 8005274:	d518      	bpl.n	80052a8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005276:	68eb      	ldr	r3, [r5, #12]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d126      	bne.n	80052ca <HAL_RCC_OscConfig+0x21a>
 800527c:	6a23      	ldr	r3, [r4, #32]
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005284:	f7fd fe22 	bl	8002ecc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005288:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800528c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800528e:	6a23      	ldr	r3, [r4, #32]
 8005290:	079b      	lsls	r3, r3, #30
 8005292:	d53f      	bpl.n	8005314 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8005294:	2f00      	cmp	r7, #0
 8005296:	f43f af1d 	beq.w	80050d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800529a:	69e3      	ldr	r3, [r4, #28]
 800529c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052a0:	61e3      	str	r3, [r4, #28]
 80052a2:	e717      	b.n	80050d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80052a4:	2700      	movs	r7, #0
 80052a6:	e7e2      	b.n	800526e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a8:	6833      	ldr	r3, [r6, #0]
 80052aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80052b0:	f7fd fe0c 	bl	8002ecc <HAL_GetTick>
 80052b4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b6:	6833      	ldr	r3, [r6, #0]
 80052b8:	05da      	lsls	r2, r3, #23
 80052ba:	d4dc      	bmi.n	8005276 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052bc:	f7fd fe06 	bl	8002ecc <HAL_GetTick>
 80052c0:	eba0 0008 	sub.w	r0, r0, r8
 80052c4:	2864      	cmp	r0, #100	; 0x64
 80052c6:	d9f6      	bls.n	80052b6 <HAL_RCC_OscConfig+0x206>
 80052c8:	e733      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ca:	b9ab      	cbnz	r3, 80052f8 <HAL_RCC_OscConfig+0x248>
 80052cc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	6223      	str	r3, [r4, #32]
 80052d8:	6a23      	ldr	r3, [r4, #32]
 80052da:	f023 0304 	bic.w	r3, r3, #4
 80052de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80052e0:	f7fd fdf4 	bl	8002ecc <HAL_GetTick>
 80052e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052e6:	6a23      	ldr	r3, [r4, #32]
 80052e8:	0798      	lsls	r0, r3, #30
 80052ea:	d5d3      	bpl.n	8005294 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fd fdee 	bl	8002ecc <HAL_GetTick>
 80052f0:	1b80      	subs	r0, r0, r6
 80052f2:	4540      	cmp	r0, r8
 80052f4:	d9f7      	bls.n	80052e6 <HAL_RCC_OscConfig+0x236>
 80052f6:	e71c      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f8:	2b05      	cmp	r3, #5
 80052fa:	6a23      	ldr	r3, [r4, #32]
 80052fc:	d103      	bne.n	8005306 <HAL_RCC_OscConfig+0x256>
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	6223      	str	r3, [r4, #32]
 8005304:	e7ba      	b.n	800527c <HAL_RCC_OscConfig+0x1cc>
 8005306:	f023 0301 	bic.w	r3, r3, #1
 800530a:	6223      	str	r3, [r4, #32]
 800530c:	6a23      	ldr	r3, [r4, #32]
 800530e:	f023 0304 	bic.w	r3, r3, #4
 8005312:	e7b6      	b.n	8005282 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd fdda 	bl	8002ecc <HAL_GetTick>
 8005318:	1b80      	subs	r0, r0, r6
 800531a:	4540      	cmp	r0, r8
 800531c:	d9b7      	bls.n	800528e <HAL_RCC_OscConfig+0x1de>
 800531e:	e708      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
 8005320:	40021000 	.word	0x40021000
 8005324:	42420000 	.word	0x42420000
 8005328:	42420480 	.word	0x42420480
 800532c:	20000000 	.word	0x20000000
 8005330:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005334:	4b2a      	ldr	r3, [pc, #168]	; (80053e0 <HAL_RCC_OscConfig+0x330>)
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	461c      	mov	r4, r3
 800533a:	f002 020c 	and.w	r2, r2, #12
 800533e:	2a08      	cmp	r2, #8
 8005340:	d03d      	beq.n	80053be <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005342:	2300      	movs	r3, #0
 8005344:	4e27      	ldr	r6, [pc, #156]	; (80053e4 <HAL_RCC_OscConfig+0x334>)
 8005346:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8005348:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534a:	d12b      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800534c:	f7fd fdbe 	bl	8002ecc <HAL_GetTick>
 8005350:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	0199      	lsls	r1, r3, #6
 8005356:	d41f      	bmi.n	8005398 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005358:	6a2b      	ldr	r3, [r5, #32]
 800535a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800535e:	d105      	bne.n	800536c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005360:	6862      	ldr	r2, [r4, #4]
 8005362:	68a9      	ldr	r1, [r5, #8]
 8005364:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005368:	430a      	orrs	r2, r1
 800536a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800536c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800536e:	6862      	ldr	r2, [r4, #4]
 8005370:	430b      	orrs	r3, r1
 8005372:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8005376:	4313      	orrs	r3, r2
 8005378:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800537a:	2301      	movs	r3, #1
 800537c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800537e:	f7fd fda5 	bl	8002ecc <HAL_GetTick>
 8005382:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	019a      	lsls	r2, r3, #6
 8005388:	f53f aea8 	bmi.w	80050dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538c:	f7fd fd9e 	bl	8002ecc <HAL_GetTick>
 8005390:	1b40      	subs	r0, r0, r5
 8005392:	2802      	cmp	r0, #2
 8005394:	d9f6      	bls.n	8005384 <HAL_RCC_OscConfig+0x2d4>
 8005396:	e6cc      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fd fd98 	bl	8002ecc <HAL_GetTick>
 800539c:	1bc0      	subs	r0, r0, r7
 800539e:	2802      	cmp	r0, #2
 80053a0:	d9d7      	bls.n	8005352 <HAL_RCC_OscConfig+0x2a2>
 80053a2:	e6c6      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80053a4:	f7fd fd92 	bl	8002ecc <HAL_GetTick>
 80053a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053aa:	6823      	ldr	r3, [r4, #0]
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	f57f ae95 	bpl.w	80050dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fd fd8b 	bl	8002ecc <HAL_GetTick>
 80053b6:	1b40      	subs	r0, r0, r5
 80053b8:	2802      	cmp	r0, #2
 80053ba:	d9f6      	bls.n	80053aa <HAL_RCC_OscConfig+0x2fa>
 80053bc:	e6b9      	b.n	8005132 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053be:	2801      	cmp	r0, #1
 80053c0:	f43f aeb8 	beq.w	8005134 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80053c4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053c6:	6a2a      	ldr	r2, [r5, #32]
 80053c8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80053cc:	4291      	cmp	r1, r2
 80053ce:	f47f ae9b 	bne.w	8005108 <HAL_RCC_OscConfig+0x58>
 80053d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80053d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d8:	4293      	cmp	r3, r2
 80053da:	f43f ae7f 	beq.w	80050dc <HAL_RCC_OscConfig+0x2c>
 80053de:	e693      	b.n	8005108 <HAL_RCC_OscConfig+0x58>
 80053e0:	40021000 	.word	0x40021000
 80053e4:	42420060 	.word	0x42420060

080053e8 <HAL_RCC_GetSysClockFreq>:
{
 80053e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053ea:	4b18      	ldr	r3, [pc, #96]	; (800544c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80053ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053ee:	ac02      	add	r4, sp, #8
 80053f0:	f103 0510 	add.w	r5, r3, #16
 80053f4:	4622      	mov	r2, r4
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	6859      	ldr	r1, [r3, #4]
 80053fa:	3308      	adds	r3, #8
 80053fc:	c203      	stmia	r2!, {r0, r1}
 80053fe:	42ab      	cmp	r3, r5
 8005400:	4614      	mov	r4, r2
 8005402:	d1f7      	bne.n	80053f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005404:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8005408:	4911      	ldr	r1, [pc, #68]	; (8005450 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800540a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800540e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005410:	f003 020c 	and.w	r2, r3, #12
 8005414:	2a08      	cmp	r2, #8
 8005416:	d117      	bne.n	8005448 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005418:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800541c:	a806      	add	r0, sp, #24
 800541e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005420:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005422:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005426:	d50c      	bpl.n	8005442 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005428:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800542a:	480a      	ldr	r0, [pc, #40]	; (8005454 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800542c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005430:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005432:	aa06      	add	r2, sp, #24
 8005434:	4413      	add	r3, r2
 8005436:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800543a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800543e:	b007      	add	sp, #28
 8005440:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005442:	4805      	ldr	r0, [pc, #20]	; (8005458 <HAL_RCC_GetSysClockFreq+0x70>)
 8005444:	4350      	muls	r0, r2
 8005446:	e7fa      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8005448:	4802      	ldr	r0, [pc, #8]	; (8005454 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800544a:	e7f8      	b.n	800543e <HAL_RCC_GetSysClockFreq+0x56>
 800544c:	0800dd18 	.word	0x0800dd18
 8005450:	40021000 	.word	0x40021000
 8005454:	007a1200 	.word	0x007a1200
 8005458:	003d0900 	.word	0x003d0900

0800545c <HAL_RCC_ClockConfig>:
{
 800545c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005460:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005462:	4604      	mov	r4, r0
 8005464:	b910      	cbnz	r0, 800546c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005466:	2001      	movs	r0, #1
}
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4a44      	ldr	r2, [pc, #272]	; (8005580 <HAL_RCC_ClockConfig+0x124>)
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	428b      	cmp	r3, r1
 8005476:	d328      	bcc.n	80054ca <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005478:	6821      	ldr	r1, [r4, #0]
 800547a:	078e      	lsls	r6, r1, #30
 800547c:	d430      	bmi.n	80054e0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800547e:	07ca      	lsls	r2, r1, #31
 8005480:	d443      	bmi.n	800550a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005482:	4a3f      	ldr	r2, [pc, #252]	; (8005580 <HAL_RCC_ClockConfig+0x124>)
 8005484:	6813      	ldr	r3, [r2, #0]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	42ab      	cmp	r3, r5
 800548c:	d865      	bhi.n	800555a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548e:	6822      	ldr	r2, [r4, #0]
 8005490:	4d3c      	ldr	r5, [pc, #240]	; (8005584 <HAL_RCC_ClockConfig+0x128>)
 8005492:	f012 0f04 	tst.w	r2, #4
 8005496:	d16c      	bne.n	8005572 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005498:	0713      	lsls	r3, r2, #28
 800549a:	d506      	bpl.n	80054aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800549c:	686b      	ldr	r3, [r5, #4]
 800549e:	6922      	ldr	r2, [r4, #16]
 80054a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80054a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80054a8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054aa:	f7ff ff9d 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 80054ae:	686b      	ldr	r3, [r5, #4]
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <HAL_RCC_ClockConfig+0x12c>)
 80054b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80054b6:	5cd3      	ldrb	r3, [r2, r3]
 80054b8:	40d8      	lsrs	r0, r3
 80054ba:	4b34      	ldr	r3, [pc, #208]	; (800558c <HAL_RCC_ClockConfig+0x130>)
 80054bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80054be:	4b34      	ldr	r3, [pc, #208]	; (8005590 <HAL_RCC_ClockConfig+0x134>)
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	f7fc fc37 	bl	8001d34 <HAL_InitTick>
  return HAL_OK;
 80054c6:	2000      	movs	r0, #0
 80054c8:	e7ce      	b.n	8005468 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d4:	6813      	ldr	r3, [r2, #0]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	428b      	cmp	r3, r1
 80054dc:	d1c3      	bne.n	8005466 <HAL_RCC_ClockConfig+0xa>
 80054de:	e7cb      	b.n	8005478 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <HAL_RCC_ClockConfig+0x128>)
 80054e2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e6:	bf1e      	ittt	ne
 80054e8:	685a      	ldrne	r2, [r3, #4]
 80054ea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80054ee:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054f2:	bf42      	ittt	mi
 80054f4:	685a      	ldrmi	r2, [r3, #4]
 80054f6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80054fa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68a0      	ldr	r0, [r4, #8]
 8005500:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005504:	4302      	orrs	r2, r0
 8005506:	605a      	str	r2, [r3, #4]
 8005508:	e7b9      	b.n	800547e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	4e1d      	ldr	r6, [pc, #116]	; (8005584 <HAL_RCC_ClockConfig+0x128>)
 800550e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005510:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005512:	d11a      	bne.n	800554a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005514:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005518:	d0a5      	beq.n	8005466 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800551a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005520:	f023 0303 	bic.w	r3, r3, #3
 8005524:	4313      	orrs	r3, r2
 8005526:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005528:	f7fd fcd0 	bl	8002ecc <HAL_GetTick>
 800552c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800552e:	6873      	ldr	r3, [r6, #4]
 8005530:	6862      	ldr	r2, [r4, #4]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800553a:	d0a2      	beq.n	8005482 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800553c:	f7fd fcc6 	bl	8002ecc <HAL_GetTick>
 8005540:	1bc0      	subs	r0, r0, r7
 8005542:	4540      	cmp	r0, r8
 8005544:	d9f3      	bls.n	800552e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005546:	2003      	movs	r0, #3
 8005548:	e78e      	b.n	8005468 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800554a:	2a02      	cmp	r2, #2
 800554c:	d102      	bne.n	8005554 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800554e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005552:	e7e1      	b.n	8005518 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	f013 0f02 	tst.w	r3, #2
 8005558:	e7de      	b.n	8005518 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f023 0307 	bic.w	r3, r3, #7
 8005560:	432b      	orrs	r3, r5
 8005562:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005564:	6813      	ldr	r3, [r2, #0]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	42ab      	cmp	r3, r5
 800556c:	f47f af7b 	bne.w	8005466 <HAL_RCC_ClockConfig+0xa>
 8005570:	e78d      	b.n	800548e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005572:	686b      	ldr	r3, [r5, #4]
 8005574:	68e1      	ldr	r1, [r4, #12]
 8005576:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800557a:	430b      	orrs	r3, r1
 800557c:	606b      	str	r3, [r5, #4]
 800557e:	e78b      	b.n	8005498 <HAL_RCC_ClockConfig+0x3c>
 8005580:	40022000 	.word	0x40022000
 8005584:	40021000 	.word	0x40021000
 8005588:	0800c964 	.word	0x0800c964
 800558c:	20000000 	.word	0x20000000
 8005590:	20000008 	.word	0x20000008

08005594 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005596:	4a05      	ldr	r2, [pc, #20]	; (80055ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800559e:	5cd3      	ldrb	r3, [r2, r3]
 80055a0:	4a03      	ldr	r2, [pc, #12]	; (80055b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80055a2:	6810      	ldr	r0, [r2, #0]
}
 80055a4:	40d8      	lsrs	r0, r3
 80055a6:	4770      	bx	lr
 80055a8:	40021000 	.word	0x40021000
 80055ac:	0800c974 	.word	0x0800c974
 80055b0:	20000000 	.word	0x20000000

080055b4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055b4:	4b04      	ldr	r3, [pc, #16]	; (80055c8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <HAL_RCC_GetPCLK2Freq+0x18>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80055be:	5cd3      	ldrb	r3, [r2, r3]
 80055c0:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80055c2:	6810      	ldr	r0, [r2, #0]
}
 80055c4:	40d8      	lsrs	r0, r3
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	0800c974 	.word	0x0800c974
 80055d0:	20000000 	.word	0x20000000

080055d4 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055d4:	230f      	movs	r3, #15
 80055d6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	; (8005608 <HAL_RCC_GetClockConfig+0x34>)
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	f002 0203 	and.w	r2, r2, #3
 80055e0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80055e8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80055f0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055fa:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <HAL_RCC_GetClockConfig+0x38>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	600b      	str	r3, [r1, #0]
}
 8005606:	4770      	bx	lr
 8005608:	40021000 	.word	0x40021000
 800560c:	40022000 	.word	0x40022000

08005610 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005610:	6803      	ldr	r3, [r0, #0]
{
 8005612:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005616:	07d9      	lsls	r1, r3, #31
{
 8005618:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800561a:	d520      	bpl.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800561c:	4c35      	ldr	r4, [pc, #212]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800561e:	69e3      	ldr	r3, [r4, #28]
 8005620:	00da      	lsls	r2, r3, #3
 8005622:	d432      	bmi.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8005624:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005626:	69e3      	ldr	r3, [r4, #28]
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800562c:	61e3      	str	r3, [r4, #28]
 800562e:	69e3      	ldr	r3, [r4, #28]
 8005630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005638:	4e2f      	ldr	r6, [pc, #188]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800563a:	6833      	ldr	r3, [r6, #0]
 800563c:	05db      	lsls	r3, r3, #23
 800563e:	d526      	bpl.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005640:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005642:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005646:	d136      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005648:	6a23      	ldr	r3, [r4, #32]
 800564a:	686a      	ldr	r2, [r5, #4]
 800564c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005650:	4313      	orrs	r3, r2
 8005652:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005654:	b11f      	cbz	r7, 800565e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005656:	69e3      	ldr	r3, [r4, #28]
 8005658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800565c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800565e:	6828      	ldr	r0, [r5, #0]
 8005660:	0783      	lsls	r3, r0, #30
 8005662:	d506      	bpl.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005664:	4923      	ldr	r1, [pc, #140]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8005666:	68ab      	ldr	r3, [r5, #8]
 8005668:	684a      	ldr	r2, [r1, #4]
 800566a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800566e:	431a      	orrs	r2, r3
 8005670:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005672:	f010 0010 	ands.w	r0, r0, #16
 8005676:	d01b      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800567a:	68e9      	ldr	r1, [r5, #12]
 800567c:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800567e:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005680:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005684:	430b      	orrs	r3, r1
 8005686:	6053      	str	r3, [r2, #4]
 8005688:	e012      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 800568a:	2700      	movs	r7, #0
 800568c:	e7d4      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800568e:	6833      	ldr	r3, [r6, #0]
 8005690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005694:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005696:	f7fd fc19 	bl	8002ecc <HAL_GetTick>
 800569a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800569c:	6833      	ldr	r3, [r6, #0]
 800569e:	05d8      	lsls	r0, r3, #23
 80056a0:	d4ce      	bmi.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a2:	f7fd fc13 	bl	8002ecc <HAL_GetTick>
 80056a6:	eba0 0008 	sub.w	r0, r0, r8
 80056aa:	2864      	cmp	r0, #100	; 0x64
 80056ac:	d9f6      	bls.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80056ae:	2003      	movs	r0, #3
}
 80056b0:	b002      	add	sp, #8
 80056b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056b6:	686a      	ldr	r2, [r5, #4]
 80056b8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0c3      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c0:	2001      	movs	r0, #1
 80056c2:	4a0e      	ldr	r2, [pc, #56]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056c4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c6:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056c8:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ce:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80056d0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80056d2:	07d9      	lsls	r1, r3, #31
 80056d4:	d5b8      	bpl.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80056d6:	f7fd fbf9 	bl	8002ecc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80056de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	6a23      	ldr	r3, [r4, #32]
 80056e2:	079a      	lsls	r2, r3, #30
 80056e4:	d4b0      	bmi.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056e6:	f7fd fbf1 	bl	8002ecc <HAL_GetTick>
 80056ea:	1b80      	subs	r0, r0, r6
 80056ec:	4540      	cmp	r0, r8
 80056ee:	d9f7      	bls.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80056f0:	e7dd      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80056f2:	bf00      	nop
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40007000 	.word	0x40007000
 80056fc:	42420440 	.word	0x42420440

08005700 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005704:	461c      	mov	r4, r3
 8005706:	4616      	mov	r6, r2
 8005708:	460f      	mov	r7, r1
 800570a:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800570c:	f7fd fbde 	bl	8002ecc <HAL_GetTick>
 8005710:	4434      	add	r4, r6
 8005712:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005714:	f7fd fbda 	bl	8002ecc <HAL_GetTick>
 8005718:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005722:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005724:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8005726:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005728:	6893      	ldr	r3, [r2, #8]
 800572a:	ea37 0303 	bics.w	r3, r7, r3
 800572e:	d001      	beq.n	8005734 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8005730:	2000      	movs	r0, #0
 8005732:	e02e      	b.n	8005792 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005734:	1c73      	adds	r3, r6, #1
 8005736:	d0f7      	beq.n	8005728 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005738:	f7fd fbc8 	bl	8002ecc <HAL_GetTick>
 800573c:	eba0 0008 	sub.w	r0, r0, r8
 8005740:	42a0      	cmp	r0, r4
 8005742:	d329      	bcc.n	8005798 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800574c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574e:	686a      	ldr	r2, [r5, #4]
 8005750:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8005754:	d10a      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005756:	68aa      	ldr	r2, [r5, #8]
 8005758:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800575c:	d002      	beq.n	8005764 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005762:	d103      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800576a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800576c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800576e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005772:	d107      	bne.n	8005784 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005782:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005784:	2301      	movs	r3, #1
 8005786:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800578a:	2300      	movs	r3, #0
 800578c:	2003      	movs	r0, #3
 800578e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8005792:	b002      	add	sp, #8
 8005794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8005798:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800579a:	2b00      	cmp	r3, #0
      count--;
 800579c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800579e:	bf08      	it	eq
 80057a0:	2400      	moveq	r4, #0
      count--;
 80057a2:	3b01      	subs	r3, #1
 80057a4:	e7be      	b.n	8005724 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 80057a6:	bf00      	nop
 80057a8:	20000000 	.word	0x20000000

080057ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b538      	push	{r3, r4, r5, lr}
 80057ae:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b0:	6842      	ldr	r2, [r0, #4]
{
 80057b2:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80057b8:	d116      	bne.n	80057e8 <SPI_EndRxTransaction+0x3c>
 80057ba:	6882      	ldr	r2, [r0, #8]
 80057bc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80057c0:	d002      	beq.n	80057c8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80057c6:	d10f      	bne.n	80057e8 <SPI_EndRxTransaction+0x3c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057c8:	6825      	ldr	r5, [r4, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80057ca:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80057ce:	6828      	ldr	r0, [r5, #0]
 80057d0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80057d4:	6028      	str	r0, [r5, #0]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80057d6:	d107      	bne.n	80057e8 <SPI_EndRxTransaction+0x3c>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	460a      	mov	r2, r1
 80057da:	2101      	movs	r1, #1
 80057dc:	4620      	mov	r0, r4
 80057de:	f7ff ff8f 	bl	8005700 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80057e2:	b920      	cbnz	r0, 80057ee <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80057e4:	2000      	movs	r0, #0
}
 80057e6:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e8:	460a      	mov	r2, r1
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	e7f6      	b.n	80057dc <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f0:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f2:	f043 0320 	orr.w	r3, r3, #32
 80057f6:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f8:	e7f5      	b.n	80057e6 <SPI_EndRxTransaction+0x3a>

080057fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057fa:	b510      	push	{r4, lr}
 80057fc:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057fe:	460a      	mov	r2, r1
 8005800:	2180      	movs	r1, #128	; 0x80
{
 8005802:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005804:	f7ff ff7c 	bl	8005700 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8005808:	b120      	cbz	r0, 8005814 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 800580a:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800580e:	f043 0320 	orr.w	r3, r3, #32
 8005812:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8005814:	bd10      	pop	{r4, pc}

08005816 <HAL_SPI_Init>:
{
 8005816:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8005818:	4604      	mov	r4, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d051      	beq.n	80058c2 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800581e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	d14a      	bne.n	80058ba <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005824:	6842      	ldr	r2, [r0, #4]
 8005826:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800582a:	d000      	beq.n	800582e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800582c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582e:	2300      	movs	r3, #0
 8005830:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005832:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8005836:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800583a:	b923      	cbnz	r3, 8005846 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800583c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800583e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8005842:	f7fc f92f 	bl	8001aa4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005846:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8005848:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800584a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800584e:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005850:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8005852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005856:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800585e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8005862:	4303      	orrs	r3, r0
 8005864:	68e0      	ldr	r0, [r4, #12]
 8005866:	69a1      	ldr	r1, [r4, #24]
 8005868:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800586c:	4303      	orrs	r3, r0
 800586e:	6920      	ldr	r0, [r4, #16]
 8005870:	f000 0002 	and.w	r0, r0, #2
 8005874:	4303      	orrs	r3, r0
 8005876:	6960      	ldr	r0, [r4, #20]
 8005878:	f000 0001 	and.w	r0, r0, #1
 800587c:	4303      	orrs	r3, r0
 800587e:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8005882:	4303      	orrs	r3, r0
 8005884:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005886:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005888:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800588c:	4303      	orrs	r3, r0
 800588e:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005890:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005894:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8005898:	4303      	orrs	r3, r0
 800589a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800589c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80058a0:	4303      	orrs	r3, r0
 80058a2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80058a4:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a6:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058a8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ae:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80058b0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80058b8:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058ba:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058c0:	e7b5      	b.n	800582e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80058c2:	2001      	movs	r0, #1
 80058c4:	e7f8      	b.n	80058b8 <HAL_SPI_Init+0xa2>

080058c6 <HAL_SPI_TransmitReceive>:
{
 80058c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80058ca:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80058cc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80058d0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80058d2:	2b01      	cmp	r3, #1
{
 80058d4:	460d      	mov	r5, r1
 80058d6:	4691      	mov	r9, r2
 80058d8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80058dc:	f000 80e0 	beq.w	8005aa0 <HAL_SPI_TransmitReceive+0x1da>
 80058e0:	2301      	movs	r3, #1
 80058e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80058e6:	f7fd faf1 	bl	8002ecc <HAL_GetTick>
  tmp_state           = hspi->State;
 80058ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80058ee:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058f0:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80058f2:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80058f4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058f6:	d00a      	beq.n	800590e <HAL_SPI_TransmitReceive+0x48>
 80058f8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80058fc:	f040 80ce 	bne.w	8005a9c <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005900:	68a3      	ldr	r3, [r4, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	f040 80ca 	bne.w	8005a9c <HAL_SPI_TransmitReceive+0x1d6>
 8005908:	2904      	cmp	r1, #4
 800590a:	f040 80c7 	bne.w	8005a9c <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800590e:	2d00      	cmp	r5, #0
 8005910:	d03f      	beq.n	8005992 <HAL_SPI_TransmitReceive+0xcc>
 8005912:	f1b9 0f00 	cmp.w	r9, #0
 8005916:	d03c      	beq.n	8005992 <HAL_SPI_TransmitReceive+0xcc>
 8005918:	2e00      	cmp	r6, #0
 800591a:	d03a      	beq.n	8005992 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800591c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005920:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005924:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005926:	bf1c      	itt	ne
 8005928:	2305      	movne	r3, #5
 800592a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800592e:	2300      	movs	r3, #0
 8005930:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8005932:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005936:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8005938:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800593a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800593c:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800593e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005940:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005942:	bf58      	it	pl
 8005944:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005946:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8005948:	bf58      	it	pl
 800594a:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 800594e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8005950:	bf58      	it	pl
 8005952:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005954:	68e1      	ldr	r1, [r4, #12]
 8005956:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800595a:	d151      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800595c:	b10a      	cbz	r2, 8005962 <HAL_SPI_TransmitReceive+0x9c>
 800595e:	2e01      	cmp	r6, #1
 8005960:	d107      	bne.n	8005972 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005962:	f835 2b02 	ldrh.w	r2, [r5], #2
 8005966:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005968:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800596a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800596c:	3b01      	subs	r3, #1
 800596e:	b29b      	uxth	r3, r3
 8005970:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005972:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005974:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005976:	b29b      	uxth	r3, r3
 8005978:	b96b      	cbnz	r3, 8005996 <HAL_SPI_TransmitReceive+0xd0>
 800597a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800597c:	b29b      	uxth	r3, r3
 800597e:	b953      	cbnz	r3, 8005996 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005980:	463a      	mov	r2, r7
 8005982:	4641      	mov	r1, r8
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff ff38 	bl	80057fa <SPI_EndRxTxTransaction>
 800598a:	2800      	cmp	r0, #0
 800598c:	d07b      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800598e:	2320      	movs	r3, #32
 8005990:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005992:	2001      	movs	r0, #1
 8005994:	e02b      	b.n	80059ee <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005996:	6821      	ldr	r1, [r4, #0]
 8005998:	688b      	ldr	r3, [r1, #8]
 800599a:	079a      	lsls	r2, r3, #30
 800599c:	d50d      	bpl.n	80059ba <HAL_SPI_TransmitReceive+0xf4>
 800599e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b153      	cbz	r3, 80059ba <HAL_SPI_TransmitReceive+0xf4>
 80059a4:	b14d      	cbz	r5, 80059ba <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 80059a6:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80059aa:	f833 2b02 	ldrh.w	r2, [r3], #2
 80059ae:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059b0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80059b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059ba:	688a      	ldr	r2, [r1, #8]
 80059bc:	f012 0201 	ands.w	r2, r2, #1
 80059c0:	d00c      	beq.n	80059dc <HAL_SPI_TransmitReceive+0x116>
 80059c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	b14b      	cbz	r3, 80059dc <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 80059c8:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ca:	68c9      	ldr	r1, [r1, #12]
 80059cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80059ce:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059d2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80059d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29b      	uxth	r3, r3
 80059da:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059dc:	f7fd fa76 	bl	8002ecc <HAL_GetTick>
 80059e0:	1bc0      	subs	r0, r0, r7
 80059e2:	4540      	cmp	r0, r8
 80059e4:	d3c6      	bcc.n	8005974 <HAL_SPI_TransmitReceive+0xae>
 80059e6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80059ea:	d0c3      	beq.n	8005974 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80059ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059f4:	2300      	movs	r3, #0
 80059f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80059fa:	b003      	add	sp, #12
 80059fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a00:	b10a      	cbz	r2, 8005a06 <HAL_SPI_TransmitReceive+0x140>
 8005a02:	2e01      	cmp	r6, #1
 8005a04:	d108      	bne.n	8005a18 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a06:	782a      	ldrb	r2, [r5, #0]
 8005a08:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005a10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8005a18:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	b91b      	cbnz	r3, 8005a28 <HAL_SPI_TransmitReceive+0x162>
 8005a20:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ab      	beq.n	8005980 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a28:	6822      	ldr	r2, [r4, #0]
 8005a2a:	6893      	ldr	r3, [r2, #8]
 8005a2c:	079b      	lsls	r3, r3, #30
 8005a2e:	d50e      	bpl.n	8005a4e <HAL_SPI_TransmitReceive+0x188>
 8005a30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	b15b      	cbz	r3, 8005a4e <HAL_SPI_TransmitReceive+0x188>
 8005a36:	b155      	cbz	r5, 8005a4e <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8005a38:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8005a40:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a42:	3301      	adds	r3, #1
 8005a44:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005a46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	6891      	ldr	r1, [r2, #8]
 8005a52:	f011 0101 	ands.w	r1, r1, #1
 8005a56:	d00d      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x1ae>
 8005a58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	b153      	cbz	r3, 8005a74 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 8005a5e:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a60:	68d2      	ldr	r2, [r2, #12]
 8005a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a68:	3301      	adds	r3, #1
 8005a6a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005a6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a74:	f7fd fa2a 	bl	8002ecc <HAL_GetTick>
 8005a78:	1bc0      	subs	r0, r0, r7
 8005a7a:	4540      	cmp	r0, r8
 8005a7c:	d3cd      	bcc.n	8005a1a <HAL_SPI_TransmitReceive+0x154>
 8005a7e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a82:	d0ca      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x154>
 8005a84:	e7b2      	b.n	80059ec <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a86:	68a3      	ldr	r3, [r4, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1b0      	bne.n	80059ee <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	9001      	str	r0, [sp, #4]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	9201      	str	r2, [sp, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	9b01      	ldr	r3, [sp, #4]
 8005a9a:	e7a8      	b.n	80059ee <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8005a9c:	2002      	movs	r0, #2
 8005a9e:	e7a6      	b.n	80059ee <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8005aa0:	2002      	movs	r0, #2
 8005aa2:	e7aa      	b.n	80059fa <HAL_SPI_TransmitReceive+0x134>

08005aa4 <HAL_SPI_Receive>:
{
 8005aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005aa8:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005aaa:	6843      	ldr	r3, [r0, #4]
{
 8005aac:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8005ab2:	4688      	mov	r8, r1
 8005ab4:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ab6:	d10c      	bne.n	8005ad2 <HAL_SPI_Receive+0x2e>
 8005ab8:	6883      	ldr	r3, [r0, #8]
 8005aba:	b953      	cbnz	r3, 8005ad2 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005abc:	2304      	movs	r3, #4
 8005abe:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	9500      	str	r5, [sp, #0]
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	f7ff fefd 	bl	80058c6 <HAL_SPI_TransmitReceive>
}
 8005acc:	b002      	add	sp, #8
 8005ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8005ad2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d07d      	beq.n	8005bd6 <HAL_SPI_Receive+0x132>
 8005ada:	2301      	movs	r3, #1
 8005adc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8005ae0:	f7fd f9f4 	bl	8002ecc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8005ae4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8005ae8:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	b2d8      	uxtb	r0, r3
 8005aee:	d170      	bne.n	8005bd2 <HAL_SPI_Receive+0x12e>
  if ((pData == NULL) || (Size == 0U))
 8005af0:	f1b8 0f00 	cmp.w	r8, #0
 8005af4:	d05b      	beq.n	8005bae <HAL_SPI_Receive+0x10a>
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	d059      	beq.n	8005bae <HAL_SPI_Receive+0x10a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005afa:	2304      	movs	r3, #4
 8005afc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b00:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b04:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b06:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->TxISR       = NULL;
 8005b0a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005b0e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b10:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b12:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b14:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b16:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b1e:	d107      	bne.n	8005b30 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b2e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8005b34:	bf5e      	ittt	pl
 8005b36:	681a      	ldrpl	r2, [r3, #0]
 8005b38:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8005b3c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b3e:	68e3      	ldr	r3, [r4, #12]
 8005b40:	b1f3      	cbz	r3, 8005b80 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8005b42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	b1fb      	cbz	r3, 8005b88 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b48:	6823      	ldr	r3, [r4, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	07d2      	lsls	r2, r2, #31
 8005b4e:	d535      	bpl.n	8005bbc <HAL_SPI_Receive+0x118>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b54:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b58:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005b5a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8005b62:	e7ee      	b.n	8005b42 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	07d0      	lsls	r0, r2, #31
 8005b6a:	d518      	bpl.n	8005b9e <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b6c:	7b1b      	ldrb	r3, [r3, #12]
 8005b6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005b70:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005b74:	3301      	adds	r3, #1
 8005b76:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8005b78:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8005b80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ed      	bne.n	8005b64 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b88:	463a      	mov	r2, r7
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f7ff fe0d 	bl	80057ac <SPI_EndRxTransaction>
 8005b92:	b9d8      	cbnz	r0, 8005bcc <HAL_SPI_Receive+0x128>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b94:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8005b96:	3800      	subs	r0, #0
 8005b98:	bf18      	it	ne
 8005b9a:	2001      	movne	r0, #1
error :
 8005b9c:	e007      	b.n	8005bae <HAL_SPI_Receive+0x10a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9e:	f7fd f995 	bl	8002ecc <HAL_GetTick>
 8005ba2:	1bc0      	subs	r0, r0, r7
 8005ba4:	42a8      	cmp	r0, r5
 8005ba6:	d3eb      	bcc.n	8005b80 <HAL_SPI_Receive+0xdc>
 8005ba8:	1c69      	adds	r1, r5, #1
 8005baa:	d0e9      	beq.n	8005b80 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 8005bac:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8005bba:	e787      	b.n	8005acc <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbc:	f7fd f986 	bl	8002ecc <HAL_GetTick>
 8005bc0:	1bc0      	subs	r0, r0, r7
 8005bc2:	42a8      	cmp	r0, r5
 8005bc4:	d3bd      	bcc.n	8005b42 <HAL_SPI_Receive+0x9e>
 8005bc6:	1c6b      	adds	r3, r5, #1
 8005bc8:	d0bb      	beq.n	8005b42 <HAL_SPI_Receive+0x9e>
 8005bca:	e7ef      	b.n	8005bac <HAL_SPI_Receive+0x108>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bcc:	2320      	movs	r3, #32
 8005bce:	6563      	str	r3, [r4, #84]	; 0x54
 8005bd0:	e7e0      	b.n	8005b94 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 8005bd2:	2002      	movs	r0, #2
 8005bd4:	e7eb      	b.n	8005bae <HAL_SPI_Receive+0x10a>
  __HAL_LOCK(hspi);
 8005bd6:	2002      	movs	r0, #2
 8005bd8:	e778      	b.n	8005acc <HAL_SPI_Receive+0x28>

08005bda <HAL_SPI_ErrorCallback>:
 8005bda:	4770      	bx	lr

08005bdc <HAL_SPI_IRQHandler>:
{
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005bde:	6803      	ldr	r3, [r0, #0]
{
 8005be0:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005be2:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005be4:	689a      	ldr	r2, [r3, #8]
{
 8005be6:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be8:	0656      	lsls	r6, r2, #25
 8005bea:	ea4f 1592 	mov.w	r5, r2, lsr #6
 8005bee:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8005bf2:	d408      	bmi.n	8005c06 <HAL_SPI_IRQHandler+0x2a>
 8005bf4:	07d6      	lsls	r6, r2, #31
 8005bf6:	d506      	bpl.n	8005c06 <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bf8:	064e      	lsls	r6, r1, #25
 8005bfa:	d504      	bpl.n	8005c06 <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8005bfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
}
 8005bfe:	b005      	add	sp, #20
 8005c00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8005c04:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c06:	0796      	lsls	r6, r2, #30
 8005c08:	d504      	bpl.n	8005c14 <HAL_SPI_IRQHandler+0x38>
 8005c0a:	0608      	lsls	r0, r1, #24
 8005c0c:	d502      	bpl.n	8005c14 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8005c0e:	4620      	mov	r0, r4
 8005c10:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c12:	e7f4      	b.n	8005bfe <HAL_SPI_IRQHandler+0x22>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8005c14:	0956      	lsrs	r6, r2, #5
 8005c16:	ea45 1252 	orr.w	r2, r5, r2, lsr #5
 8005c1a:	07d2      	lsls	r2, r2, #31
 8005c1c:	d54c      	bpl.n	8005cb8 <HAL_SPI_IRQHandler+0xdc>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c1e:	068d      	lsls	r5, r1, #26
 8005c20:	d54a      	bpl.n	8005cb8 <HAL_SPI_IRQHandler+0xdc>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c22:	b177      	cbz	r7, 8005c42 <HAL_SPI_IRQHandler+0x66>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c24:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8005c28:	2000      	movs	r0, #0
 8005c2a:	2a03      	cmp	r2, #3
 8005c2c:	d03e      	beq.n	8005cac <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c2e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c30:	f042 0204 	orr.w	r2, r2, #4
 8005c34:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c36:	9001      	str	r0, [sp, #4]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	9201      	str	r2, [sp, #4]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	9201      	str	r2, [sp, #4]
 8005c40:	9a01      	ldr	r2, [sp, #4]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c42:	07f0      	lsls	r0, r6, #31
 8005c44:	d50c      	bpl.n	8005c60 <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c46:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	9203      	str	r2, [sp, #12]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	9203      	str	r2, [sp, #12]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
 8005c5e:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c60:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c62:	b34a      	cbz	r2, 8005cb8 <HAL_SPI_IRQHandler+0xdc>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c6a:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c72:	078a      	lsls	r2, r1, #30
 8005c74:	d022      	beq.n	8005cbc <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c76:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005c78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c7a:	f022 0203 	bic.w	r2, r2, #3
 8005c7e:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005c80:	b140      	cbz	r0, 8005c94 <HAL_SPI_IRQHandler+0xb8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c82:	4b10      	ldr	r3, [pc, #64]	; (8005cc4 <HAL_SPI_IRQHandler+0xe8>)
 8005c84:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005c86:	f7fd f9b9 	bl	8002ffc <HAL_DMA_Abort_IT>
 8005c8a:	b118      	cbz	r0, 8005c94 <HAL_SPI_IRQHandler+0xb8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005c8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c92:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005c94:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005c96:	b178      	cbz	r0, 8005cb8 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <HAL_SPI_IRQHandler+0xe8>)
 8005c9a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005c9c:	f7fd f9ae 	bl	8002ffc <HAL_DMA_Abort_IT>
 8005ca0:	b150      	cbz	r0, 8005cb8 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ca2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca8:	6563      	str	r3, [r4, #84]	; 0x54
 8005caa:	e005      	b.n	8005cb8 <HAL_SPI_IRQHandler+0xdc>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cac:	9002      	str	r0, [sp, #8]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	9202      	str	r2, [sp, #8]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	9302      	str	r3, [sp, #8]
 8005cb6:	9b02      	ldr	r3, [sp, #8]
}
 8005cb8:	b005      	add	sp, #20
 8005cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	f7ff ff8c 	bl	8005bda <HAL_SPI_ErrorCallback>
 8005cc2:	e7f9      	b.n	8005cb8 <HAL_SPI_IRQHandler+0xdc>
 8005cc4:	08005cc9 	.word	0x08005cc9

08005cc8 <SPI_DMAAbortOnError>:
{
 8005cc8:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 8005cca:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ccc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8005cce:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005cd0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8005cd2:	f7ff ff82 	bl	8005bda <HAL_SPI_ErrorCallback>
}
 8005cd6:	bd08      	pop	{r3, pc}

08005cd8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd8:	6a03      	ldr	r3, [r0, #32]
{
 8005cda:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cdc:	f023 0301 	bic.w	r3, r3, #1
 8005ce0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005cee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cf0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005cf6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf8:	4d0a      	ldr	r5, [pc, #40]	; (8005d24 <TIM_OC1_SetConfig+0x4c>)
 8005cfa:	42a8      	cmp	r0, r5
 8005cfc:	d10b      	bne.n	8005d16 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cfe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d00:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005d04:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d06:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d0a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005d0e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d10:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d14:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d16:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d18:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d1a:	684a      	ldr	r2, [r1, #4]
 8005d1c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1e:	6203      	str	r3, [r0, #32]
}
 8005d20:	bd70      	pop	{r4, r5, r6, pc}
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00

08005d28 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d28:	6a03      	ldr	r3, [r0, #32]
{
 8005d2a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d30:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d36:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d3a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005d3e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d40:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005d42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d46:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d4a:	4d0b      	ldr	r5, [pc, #44]	; (8005d78 <TIM_OC3_SetConfig+0x50>)
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d10d      	bne.n	8005d6c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d50:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d5a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8005d62:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d68:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d70:	684a      	ldr	r2, [r1, #4]
 8005d72:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d74:	6203      	str	r3, [r0, #32]
}
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	40012c00 	.word	0x40012c00

08005d7c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d7c:	6a03      	ldr	r3, [r0, #32]
{
 8005d7e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d84:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d8a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d8e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d92:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	4d06      	ldr	r5, [pc, #24]	; (8005dbc <TIM_OC4_SetConfig+0x40>)
 8005da2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005da4:	bf02      	ittt	eq
 8005da6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005da8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dac:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db4:	684a      	ldr	r2, [r1, #4]
 8005db6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	6203      	str	r3, [r0, #32]
}
 8005dba:	bd30      	pop	{r4, r5, pc}
 8005dbc:	40012c00 	.word	0x40012c00

08005dc0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005dc0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11c      	bne.n	8005e02 <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc8:	2302      	movs	r3, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dca:	4a0f      	ldr	r2, [pc, #60]	; (8005e08 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005dcc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd0:	6803      	ldr	r3, [r0, #0]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00a      	beq.n	8005dec <HAL_TIM_Base_Start+0x2c>
 8005dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dda:	d007      	beq.n	8005dec <HAL_TIM_Base_Start+0x2c>
 8005ddc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d003      	beq.n	8005dec <HAL_TIM_Base_Start+0x2c>
 8005de4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df2:	2a06      	cmp	r2, #6
 8005df4:	d003      	beq.n	8005dfe <HAL_TIM_Base_Start+0x3e>
    __HAL_TIM_ENABLE(htim);
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005dfe:	2000      	movs	r0, #0
}
 8005e00:	4770      	bx	lr
    return HAL_ERROR;
 8005e02:	2001      	movs	r0, #1
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40012c00 	.word	0x40012c00

08005e0c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005e0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d120      	bne.n	8005e56 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e14:	2302      	movs	r3, #2
 8005e16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e1a:	6803      	ldr	r3, [r0, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e24:	4a0d      	ldr	r2, [pc, #52]	; (8005e5c <HAL_TIM_Base_Start_IT+0x50>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00a      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x34>
 8005e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2e:	d007      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x34>
 8005e30:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x34>
 8005e38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d104      	bne.n	8005e4a <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e46:	2a06      	cmp	r2, #6
 8005e48:	d003      	beq.n	8005e52 <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005e52:	2000      	movs	r0, #0
}
 8005e54:	4770      	bx	lr
    return HAL_ERROR;
 8005e56:	2001      	movs	r0, #1
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00

08005e60 <HAL_TIM_PWM_MspInit>:
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_Encoder_Start>:
{
 8005e62:	4603      	mov	r3, r0
 8005e64:	b530      	push	{r4, r5, lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e66:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e6a:	f890 003f 	ldrb.w	r0, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e6e:	f893 5042 	ldrb.w	r5, [r3, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e72:	f893 4043 	ldrb.w	r4, [r3, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e76:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e78:	b2c0      	uxtb	r0, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e7a:	b2ed      	uxtb	r5, r5
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e7c:	b2e4      	uxtb	r4, r4
  if (Channel == TIM_CHANNEL_1)
 8005e7e:	b9c1      	cbnz	r1, 8005eb2 <HAL_TIM_Encoder_Start+0x50>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e80:	2a01      	cmp	r2, #1
 8005e82:	d145      	bne.n	8005f10 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e84:	2d01      	cmp	r5, #1
 8005e86:	d145      	bne.n	8005f14 <HAL_TIM_Encoder_Start+0xb2>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e92:	681a      	ldr	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e94:	6a11      	ldr	r1, [r2, #32]
 8005e96:	f021 0101 	bic.w	r1, r1, #1
 8005e9a:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e9c:	6a11      	ldr	r1, [r2, #32]
 8005e9e:	f041 0101 	orr.w	r1, r1, #1
  return HAL_OK;
 8005ea2:	2000      	movs	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ea4:	6211      	str	r1, [r2, #32]
  __HAL_TIM_ENABLE(htim);
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	6813      	ldr	r3, [r2, #0]
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	6013      	str	r3, [r2, #0]
}
 8005eb0:	bd30      	pop	{r4, r5, pc}
  else if (Channel == TIM_CHANNEL_2)
 8005eb2:	2904      	cmp	r1, #4
 8005eb4:	d111      	bne.n	8005eda <HAL_TIM_Encoder_Start+0x78>
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d12a      	bne.n	8005f10 <HAL_TIM_Encoder_Start+0xae>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eba:	2c01      	cmp	r4, #1
 8005ebc:	d1f8      	bne.n	8005eb0 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ec8:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005eca:	6a11      	ldr	r1, [r2, #32]
 8005ecc:	f021 0110 	bic.w	r1, r1, #16
 8005ed0:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ed2:	6a11      	ldr	r1, [r2, #32]
 8005ed4:	f041 0110 	orr.w	r1, r1, #16
 8005ed8:	e7e3      	b.n	8005ea2 <HAL_TIM_Encoder_Start+0x40>
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eda:	2a01      	cmp	r2, #1
 8005edc:	d118      	bne.n	8005f10 <HAL_TIM_Encoder_Start+0xae>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ede:	2801      	cmp	r0, #1
 8005ee0:	d118      	bne.n	8005f14 <HAL_TIM_Encoder_Start+0xb2>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee2:	2d01      	cmp	r5, #1
 8005ee4:	d1e4      	bne.n	8005eb0 <HAL_TIM_Encoder_Start+0x4e>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ee6:	2c01      	cmp	r4, #1
 8005ee8:	d1e2      	bne.n	8005eb0 <HAL_TIM_Encoder_Start+0x4e>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  switch (Channel)
 8005efc:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~tmp;
 8005efe:	6a11      	ldr	r1, [r2, #32]
 8005f00:	f021 0101 	bic.w	r1, r1, #1
 8005f04:	6211      	str	r1, [r2, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f06:	6a11      	ldr	r1, [r2, #32]
 8005f08:	f041 0101 	orr.w	r1, r1, #1
 8005f0c:	6211      	str	r1, [r2, #32]
 8005f0e:	e7dc      	b.n	8005eca <HAL_TIM_Encoder_Start+0x68>
      return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
 8005f12:	e7cd      	b.n	8005eb0 <HAL_TIM_Encoder_Start+0x4e>
 8005f14:	4610      	mov	r0, r2
 8005f16:	e7cb      	b.n	8005eb0 <HAL_TIM_Encoder_Start+0x4e>

08005f18 <HAL_TIM_OC_DelayElapsedCallback>:
 8005f18:	4770      	bx	lr

08005f1a <HAL_TIM_IC_CaptureCallback>:
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_TriggerCallback>:
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f20:	6803      	ldr	r3, [r0, #0]
{
 8005f22:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f24:	691a      	ldr	r2, [r3, #16]
{
 8005f26:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f28:	0791      	lsls	r1, r2, #30
 8005f2a:	d50e      	bpl.n	8005f4a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	0792      	lsls	r2, r2, #30
 8005f30:	d50b      	bpl.n	8005f4a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f32:	f06f 0202 	mvn.w	r2, #2
 8005f36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f38:	2201      	movs	r2, #1
 8005f3a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	079b      	lsls	r3, r3, #30
 8005f40:	d077      	beq.n	8006032 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8005f42:	f7ff ffea 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	2300      	movs	r3, #0
 8005f48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	0750      	lsls	r0, r2, #29
 8005f50:	d510      	bpl.n	8005f74 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	0751      	lsls	r1, r2, #29
 8005f56:	d50d      	bpl.n	8005f74 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f58:	f06f 0204 	mvn.w	r2, #4
 8005f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f5e:	2202      	movs	r2, #2
 8005f60:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f62:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8005f64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f66:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005f6a:	d068      	beq.n	800603e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f6c:	f7ff ffd5 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f70:	2300      	movs	r3, #0
 8005f72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	0712      	lsls	r2, r2, #28
 8005f7a:	d50f      	bpl.n	8005f9c <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f7c:	68da      	ldr	r2, [r3, #12]
 8005f7e:	0710      	lsls	r0, r2, #28
 8005f80:	d50c      	bpl.n	8005f9c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f82:	f06f 0208 	mvn.w	r2, #8
 8005f86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f88:	2204      	movs	r2, #4
 8005f8a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f8c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005f8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f90:	0799      	lsls	r1, r3, #30
 8005f92:	d05a      	beq.n	800604a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005f94:	f7ff ffc1 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	06d2      	lsls	r2, r2, #27
 8005fa2:	d510      	bpl.n	8005fc6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	06d0      	lsls	r0, r2, #27
 8005fa8:	d50d      	bpl.n	8005fc6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005faa:	f06f 0210 	mvn.w	r2, #16
 8005fae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fb0:	2208      	movs	r2, #8
 8005fb2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fb8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005fbc:	d04b      	beq.n	8006056 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8005fbe:	f7ff ffac 	bl	8005f1a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	07d1      	lsls	r1, r2, #31
 8005fcc:	d508      	bpl.n	8005fe0 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	07d2      	lsls	r2, r2, #31
 8005fd2:	d505      	bpl.n	8005fe0 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fda:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fdc:	f7fb fbce 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	691a      	ldr	r2, [r3, #16]
 8005fe4:	0610      	lsls	r0, r2, #24
 8005fe6:	d508      	bpl.n	8005ffa <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	0611      	lsls	r1, r2, #24
 8005fec:	d505      	bpl.n	8005ffa <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fee:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8005ff2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ff4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005ff6:	f000 face 	bl	8006596 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	0652      	lsls	r2, r2, #25
 8006000:	d508      	bpl.n	8006014 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	0650      	lsls	r0, r2, #25
 8006006:	d505      	bpl.n	8006014 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006008:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800600c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800600e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006010:	f7ff ff85 	bl	8005f1e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	0691      	lsls	r1, r2, #26
 800601a:	d522      	bpl.n	8006062 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	0692      	lsls	r2, r2, #26
 8006020:	d51f      	bpl.n	8006062 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006022:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006026:	4620      	mov	r0, r4
}
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800602c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800602e:	f000 bab1 	b.w	8006594 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006032:	f7ff ff71 	bl	8005f18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006036:	4620      	mov	r0, r4
 8006038:	f7ff ff70 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
 800603c:	e783      	b.n	8005f46 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	f7ff ff6b 	bl	8005f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006042:	4620      	mov	r0, r4
 8006044:	f7ff ff6a 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8006048:	e792      	b.n	8005f70 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800604a:	f7ff ff65 	bl	8005f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	4620      	mov	r0, r4
 8006050:	f7ff ff64 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8006054:	e7a0      	b.n	8005f98 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006056:	f7ff ff5f 	bl	8005f18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800605a:	4620      	mov	r0, r4
 800605c:	f7ff ff5e 	bl	8005f1c <HAL_TIM_PWM_PulseFinishedCallback>
 8006060:	e7af      	b.n	8005fc2 <HAL_TIM_IRQHandler+0xa2>
}
 8006062:	bd10      	pop	{r4, pc}

08006064 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006064:	4a1a      	ldr	r2, [pc, #104]	; (80060d0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8006066:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006068:	4290      	cmp	r0, r2
 800606a:	d00a      	beq.n	8006082 <TIM_Base_SetConfig+0x1e>
 800606c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006070:	d007      	beq.n	8006082 <TIM_Base_SetConfig+0x1e>
 8006072:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006076:	4290      	cmp	r0, r2
 8006078:	d003      	beq.n	8006082 <TIM_Base_SetConfig+0x1e>
 800607a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800607e:	4290      	cmp	r0, r2
 8006080:	d115      	bne.n	80060ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8006082:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006088:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608a:	4a11      	ldr	r2, [pc, #68]	; (80060d0 <TIM_Base_SetConfig+0x6c>)
 800608c:	4290      	cmp	r0, r2
 800608e:	d00a      	beq.n	80060a6 <TIM_Base_SetConfig+0x42>
 8006090:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006094:	d007      	beq.n	80060a6 <TIM_Base_SetConfig+0x42>
 8006096:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800609a:	4290      	cmp	r0, r2
 800609c:	d003      	beq.n	80060a6 <TIM_Base_SetConfig+0x42>
 800609e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80060a2:	4290      	cmp	r0, r2
 80060a4:	d103      	bne.n	80060ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060a6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060ae:	694a      	ldr	r2, [r1, #20]
 80060b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80060b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060b8:	688b      	ldr	r3, [r1, #8]
 80060ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80060bc:	680b      	ldr	r3, [r1, #0]
 80060be:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <TIM_Base_SetConfig+0x6c>)
 80060c2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80060c4:	bf04      	itt	eq
 80060c6:	690b      	ldreq	r3, [r1, #16]
 80060c8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80060ca:	2301      	movs	r3, #1
 80060cc:	6143      	str	r3, [r0, #20]
}
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00

080060d4 <HAL_TIM_Base_Init>:
{
 80060d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060d6:	4604      	mov	r4, r0
 80060d8:	b330      	cbz	r0, 8006128 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060e2:	b91b      	cbnz	r3, 80060ec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80060e8:	f7fb fd56 	bl	8001b98 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060f4:	1d21      	adds	r1, r4, #4
 80060f6:	f7ff ffb5 	bl	8006064 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fa:	2301      	movs	r3, #1
  return HAL_OK;
 80060fc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006102:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8006106:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800610a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800610e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006116:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800611a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800611e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8006122:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006126:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006128:	2001      	movs	r0, #1
 800612a:	e7fc      	b.n	8006126 <HAL_TIM_Base_Init+0x52>

0800612c <HAL_TIM_PWM_Init>:
{
 800612c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800612e:	4604      	mov	r4, r0
 8006130:	b330      	cbz	r0, 8006180 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006132:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006136:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800613a:	b91b      	cbnz	r3, 8006144 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800613c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006140:	f7ff fe8e 	bl	8005e60 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006144:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006146:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614c:	1d21      	adds	r1, r4, #4
 800614e:	f7ff ff89 	bl	8006064 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006152:	2301      	movs	r3, #1
  return HAL_OK;
 8006154:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006156:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800615e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8006162:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006166:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800616e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006172:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8006176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800617a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800617e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006180:	2001      	movs	r0, #1
 8006182:	e7fc      	b.n	800617e <HAL_TIM_PWM_Init+0x52>

08006184 <HAL_TIM_Encoder_Init>:
{
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	460d      	mov	r5, r1
  if (htim == NULL)
 8006188:	4604      	mov	r4, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	d04d      	beq.n	800622a <HAL_TIM_Encoder_Init+0xa6>
  if (htim->State == HAL_TIM_STATE_RESET)
 800618e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006192:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006196:	b91b      	cbnz	r3, 80061a0 <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8006198:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 800619c:	f7fb fd32 	bl	8001c04 <HAL_TIM_Encoder_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80061a0:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061a2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80061a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80061a8:	f851 0b04 	ldr.w	r0, [r1], #4
 80061ac:	6883      	ldr	r3, [r0, #8]
 80061ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b2:	f023 0307 	bic.w	r3, r3, #7
 80061b6:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061b8:	f7ff ff54 	bl	8006064 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sConfig->EncoderMode;
 80061be:	682b      	ldr	r3, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 80061c0:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80061c2:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061c4:	68a9      	ldr	r1, [r5, #8]
  tmpsmcr |= sConfig->EncoderMode;
 80061c6:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061c8:	69ab      	ldr	r3, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061ca:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061ce:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061d2:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 80061d6:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061d8:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061dc:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061de:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80061e6:	68e9      	ldr	r1, [r5, #12]
  tmpccer = htim->Instance->CCER;
 80061e8:	6a07      	ldr	r7, [r0, #32]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6a29      	ldr	r1, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061ee:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061f2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80061f6:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061f8:	6969      	ldr	r1, [r5, #20]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80061fa:	f027 0222 	bic.w	r2, r7, #34	; 0x22
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80061fe:	686f      	ldr	r7, [r5, #4]
  htim->Instance->SMCR = tmpsmcr;
 8006200:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006202:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 8006206:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006208:	4317      	orrs	r7, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800620a:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 800620c:	6207      	str	r7, [r0, #32]
  return HAL_OK;
 800620e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006210:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006214:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006218:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 8006224:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8006228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800622a:	2001      	movs	r0, #1
 800622c:	e7fc      	b.n	8006228 <HAL_TIM_Encoder_Init+0xa4>
	...

08006230 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006230:	6a03      	ldr	r3, [r0, #32]
{
 8006232:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006234:	f023 0310 	bic.w	r3, r3, #16
 8006238:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800623a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800623c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800623e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006240:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006242:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006246:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800624a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800624c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006250:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006254:	4d0b      	ldr	r5, [pc, #44]	; (8006284 <TIM_OC2_SetConfig+0x54>)
 8006256:	42a8      	cmp	r0, r5
 8006258:	d10d      	bne.n	8006276 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800625a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800625c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006260:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006264:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006268:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800626c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800626e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006272:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8006276:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006278:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800627a:	684a      	ldr	r2, [r1, #4]
 800627c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800627e:	6203      	str	r3, [r0, #32]
}
 8006280:	bd70      	pop	{r4, r5, r6, pc}
 8006282:	bf00      	nop
 8006284:	40012c00 	.word	0x40012c00

08006288 <HAL_TIM_PWM_ConfigChannel>:
{
 8006288:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800628a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800628e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006290:	2b01      	cmp	r3, #1
 8006292:	d052      	beq.n	800633a <HAL_TIM_PWM_ConfigChannel+0xb2>
 8006294:	2301      	movs	r3, #1
  switch (Channel)
 8006296:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006298:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800629c:	d03c      	beq.n	8006318 <HAL_TIM_PWM_ConfigChannel+0x90>
 800629e:	d806      	bhi.n	80062ae <HAL_TIM_PWM_ConfigChannel+0x26>
 80062a0:	b1c2      	cbz	r2, 80062d4 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80062a2:	2a04      	cmp	r2, #4
 80062a4:	d027      	beq.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 80062a6:	2000      	movs	r0, #0
 80062a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80062ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80062ae:	2a0c      	cmp	r2, #12
 80062b0:	d1f9      	bne.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062b2:	6800      	ldr	r0, [r0, #0]
 80062b4:	f7ff fd62 	bl	8005d7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062c4:	69da      	ldr	r2, [r3, #28]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062cc:	69da      	ldr	r2, [r3, #28]
 80062ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062d2:	e030      	b.n	8006336 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062d4:	6800      	ldr	r0, [r0, #0]
 80062d6:	f7ff fcff 	bl	8005cd8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062de:	699a      	ldr	r2, [r3, #24]
 80062e0:	f042 0208 	orr.w	r2, r2, #8
 80062e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062e6:	699a      	ldr	r2, [r3, #24]
 80062e8:	f022 0204 	bic.w	r2, r2, #4
 80062ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062f2:	619a      	str	r2, [r3, #24]
      break;
 80062f4:	e7d7      	b.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f6:	6800      	ldr	r0, [r0, #0]
 80062f8:	f7ff ff9a 	bl	8006230 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800630e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006316:	e7ec      	b.n	80062f2 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006318:	6800      	ldr	r0, [r0, #0]
 800631a:	f7ff fd05 	bl	8005d28 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800631e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006320:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	f042 0208 	orr.w	r2, r2, #8
 8006328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	f022 0204 	bic.w	r2, r2, #4
 8006330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006336:	61da      	str	r2, [r3, #28]
      break;
 8006338:	e7b5      	b.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 800633a:	2002      	movs	r0, #2
 800633c:	e7b6      	b.n	80062ac <HAL_TIM_PWM_ConfigChannel+0x24>

0800633e <TIM_ETR_SetConfig>:
{
 800633e:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8006340:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006342:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006348:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800634c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800634e:	6082      	str	r2, [r0, #8]
}
 8006350:	bd10      	pop	{r4, pc}

08006352 <HAL_TIM_ConfigClockSource>:
{
 8006352:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8006354:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8006358:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800635a:	2b01      	cmp	r3, #1
 800635c:	f04f 0002 	mov.w	r0, #2
 8006360:	d027      	beq.n	80063b2 <HAL_TIM_ConfigClockSource+0x60>
 8006362:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006368:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800636a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800636e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006374:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8006378:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800637a:	680b      	ldr	r3, [r1, #0]
 800637c:	2b60      	cmp	r3, #96	; 0x60
 800637e:	d04d      	beq.n	800641c <HAL_TIM_ConfigClockSource+0xca>
 8006380:	d832      	bhi.n	80063e8 <HAL_TIM_ConfigClockSource+0x96>
 8006382:	2b40      	cmp	r3, #64	; 0x40
 8006384:	d062      	beq.n	800644c <HAL_TIM_ConfigClockSource+0xfa>
 8006386:	d815      	bhi.n	80063b4 <HAL_TIM_ConfigClockSource+0x62>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d003      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0x42>
 800638c:	d809      	bhi.n	80063a2 <HAL_TIM_ConfigClockSource+0x50>
 800638e:	f033 0210 	bics.w	r2, r3, #16
 8006392:	d108      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 8006394:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006396:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800639a:	4313      	orrs	r3, r2
 800639c:	f043 0307 	orr.w	r3, r3, #7
 80063a0:	e020      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80063a2:	2b30      	cmp	r3, #48	; 0x30
 80063a4:	d0f6      	beq.n	8006394 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80063a8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80063aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80063ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80063b4:	2b50      	cmp	r3, #80	; 0x50
 80063b6:	d1f6      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b8:	684a      	ldr	r2, [r1, #4]
 80063ba:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80063bc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063be:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c4:	f025 0501 	bic.w	r5, r5, #1
 80063c8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ca:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80063cc:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80063d6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80063d8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063da:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80063e4:	6083      	str	r3, [r0, #8]
}
 80063e6:	e7de      	b.n	80063a6 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80063e8:	2b70      	cmp	r3, #112	; 0x70
 80063ea:	d00c      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0xb4>
 80063ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f0:	d1d9      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80063f2:	68cb      	ldr	r3, [r1, #12]
 80063f4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80063f8:	f7ff ffa1 	bl	800633e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063fc:	6822      	ldr	r2, [r4, #0]
 80063fe:	6893      	ldr	r3, [r2, #8]
 8006400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006404:	e008      	b.n	8006418 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8006406:	68cb      	ldr	r3, [r1, #12]
 8006408:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800640c:	f7ff ff97 	bl	800633e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006410:	6822      	ldr	r2, [r4, #0]
 8006412:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006414:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006418:	6093      	str	r3, [r2, #8]
      break;
 800641a:	e7c4      	b.n	80063a6 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800641c:	684d      	ldr	r5, [r1, #4]
 800641e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006420:	6a01      	ldr	r1, [r0, #32]
 8006422:	f021 0110 	bic.w	r1, r1, #16
 8006426:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006428:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800642a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800642c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006430:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006434:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006438:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800643c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800643e:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006440:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006446:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800644a:	e7cb      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644c:	684a      	ldr	r2, [r1, #4]
 800644e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006450:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006454:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006458:	f025 0501 	bic.w	r5, r5, #1
 800645c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8006460:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006466:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800646a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800646c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800646e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006474:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8006478:	e7b4      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x92>

0800647a <TIM_CCxChannelCmd>:
{
 800647a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800647c:	2401      	movs	r4, #1
  TIMx->CCER &= ~tmp;
 800647e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006480:	f001 011f 	and.w	r1, r1, #31
 8006484:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006486:	ea23 0304 	bic.w	r3, r3, r4
 800648a:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800648c:	6a03      	ldr	r3, [r0, #32]
 800648e:	408a      	lsls	r2, r1
 8006490:	431a      	orrs	r2, r3
 8006492:	6202      	str	r2, [r0, #32]
}
 8006494:	bd10      	pop	{r4, pc}
	...

08006498 <HAL_TIM_OC_Start>:
{
 8006498:	b510      	push	{r4, lr}
 800649a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800649c:	b929      	cbnz	r1, 80064aa <HAL_TIM_OC_Start+0x12>
 800649e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d01d      	beq.n	80064e2 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 80064a6:	2001      	movs	r0, #1
}
 80064a8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064aa:	2904      	cmp	r1, #4
 80064ac:	d107      	bne.n	80064be <HAL_TIM_OC_Start+0x26>
 80064ae:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d1f7      	bne.n	80064a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b6:	2302      	movs	r3, #2
 80064b8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80064bc:	e014      	b.n	80064e8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064be:	2908      	cmp	r1, #8
 80064c0:	d107      	bne.n	80064d2 <HAL_TIM_OC_Start+0x3a>
 80064c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d1ed      	bne.n	80064a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ca:	2302      	movs	r3, #2
 80064cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80064d0:	e00a      	b.n	80064e8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064d2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d1e5      	bne.n	80064a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064da:	2302      	movs	r3, #2
 80064dc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80064e0:	e002      	b.n	80064e8 <HAL_TIM_OC_Start+0x50>
 80064e2:	2302      	movs	r3, #2
 80064e4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e8:	2201      	movs	r2, #1
 80064ea:	6820      	ldr	r0, [r4, #0]
 80064ec:	f7ff ffc5 	bl	800647a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	4a0e      	ldr	r2, [pc, #56]	; (800652c <HAL_TIM_OC_Start+0x94>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10a      	bne.n	800650e <HAL_TIM_OC_Start+0x76>
    __HAL_TIM_MOE_ENABLE(htim);
 80064f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006506:	2a06      	cmp	r2, #6
 8006508:	d10b      	bne.n	8006522 <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 800650a:	2000      	movs	r0, #0
 800650c:	e7cc      	b.n	80064a8 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800650e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006512:	d0f5      	beq.n	8006500 <HAL_TIM_OC_Start+0x68>
 8006514:	4a06      	ldr	r2, [pc, #24]	; (8006530 <HAL_TIM_OC_Start+0x98>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d0f2      	beq.n	8006500 <HAL_TIM_OC_Start+0x68>
 800651a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800651e:	4293      	cmp	r3, r2
 8006520:	d0ee      	beq.n	8006500 <HAL_TIM_OC_Start+0x68>
    __HAL_TIM_ENABLE(htim);
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e7ee      	b.n	800650a <HAL_TIM_OC_Start+0x72>
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40000400 	.word	0x40000400

08006534 <HAL_TIM_PWM_Start>:
 8006534:	f7ff bfb0 	b.w	8006498 <HAL_TIM_OC_Start>

08006538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006538:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800653e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8006540:	2b01      	cmp	r3, #1
 8006542:	f04f 0002 	mov.w	r0, #2
 8006546:	d022      	beq.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006548:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800654a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800654e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006550:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006552:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006556:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006558:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800655a:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655c:	4c0c      	ldr	r4, [pc, #48]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800655e:	42a3      	cmp	r3, r4
 8006560:	d00a      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d007      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006568:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800656c:	42a3      	cmp	r3, r4
 800656e:	d003      	beq.n	8006578 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006570:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006574:	42a3      	cmp	r3, r4
 8006576:	d104      	bne.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006578:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800657e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006580:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006582:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006584:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006586:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800658a:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800658e:	bd30      	pop	{r4, r5, pc}
 8006590:	40012c00 	.word	0x40012c00

08006594 <HAL_TIMEx_CommutCallback>:
 8006594:	4770      	bx	lr

08006596 <HAL_TIMEx_BreakCallback>:
 8006596:	4770      	bx	lr

08006598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	b510      	push	{r4, lr}
 800659a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800659c:	6803      	ldr	r3, [r0, #0]
 800659e:	68c1      	ldr	r1, [r0, #12]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80065a6:	430a      	orrs	r2, r1
 80065a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065aa:	6882      	ldr	r2, [r0, #8]
 80065ac:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80065ae:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065b0:	4302      	orrs	r2, r0
 80065b2:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80065b4:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80065b8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80065bc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80065be:	430a      	orrs	r2, r1
 80065c0:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065c2:	695a      	ldr	r2, [r3, #20]
 80065c4:	69a1      	ldr	r1, [r4, #24]
 80065c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80065ca:	430a      	orrs	r2, r1
 80065cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80065ce:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <UART_SetConfig+0x70>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d115      	bne.n	8006600 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80065d4:	f7fe ffee 	bl	80055b4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065d8:	2319      	movs	r3, #25
 80065da:	4343      	muls	r3, r0
 80065dc:	6862      	ldr	r2, [r4, #4]
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	0092      	lsls	r2, r2, #2
 80065e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e6:	2264      	movs	r2, #100	; 0x64
 80065e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80065ec:	fb02 3311 	mls	r3, r2, r1, r3
 80065f0:	011b      	lsls	r3, r3, #4
 80065f2:	3332      	adds	r3, #50	; 0x32
 80065f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065f8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80065fc:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80065fe:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8006600:	f7fe ffc8 	bl	8005594 <HAL_RCC_GetPCLK1Freq>
 8006604:	e7e8      	b.n	80065d8 <UART_SetConfig+0x40>
 8006606:	bf00      	nop
 8006608:	40013800 	.word	0x40013800

0800660c <HAL_UART_Init>:
{
 800660c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800660e:	4604      	mov	r4, r0
 8006610:	b340      	cbz	r0, 8006664 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006612:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006616:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800661a:	b91b      	cbnz	r3, 8006624 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800661c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8006620:	f7fb fb4e 	bl	8001cc0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006624:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006626:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006628:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800662c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800662e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006630:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006634:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006636:	f7ff ffaf 	bl	8006598 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006646:	695a      	ldr	r2, [r3, #20]
 8006648:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800664c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006654:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006656:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006658:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800665a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800665e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8006662:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006664:	2001      	movs	r0, #1
 8006666:	e7fc      	b.n	8006662 <HAL_UART_Init+0x56>

08006668 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006668:	b084      	sub	sp, #16
 800666a:	a801      	add	r0, sp, #4
 800666c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006670:	b004      	add	sp, #16
 8006672:	2000      	movs	r0, #0
 8006674:	4770      	bx	lr

08006676 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006676:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006678:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
  USBx->ISTR = 0U;
 800667c:	2000      	movs	r0, #0
 800667e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006682:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8006686:	4770      	bx	lr

08006688 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006688:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800668c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006690:	045b      	lsls	r3, r3, #17
 8006692:	0c5b      	lsrs	r3, r3, #17
 8006694:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8006698:	2000      	movs	r0, #0
 800669a:	4770      	bx	lr

0800669c <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800669c:	2000      	movs	r0, #0
 800669e:	4770      	bx	lr

080066a0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80066a0:	b084      	sub	sp, #16
 80066a2:	b510      	push	{r4, lr}
 80066a4:	4604      	mov	r4, r0
 80066a6:	a803      	add	r0, sp, #12
 80066a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80066ac:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80066ae:	2301      	movs	r3, #1
 80066b0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0U;
 80066b4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80066b8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80066bc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50

  return HAL_OK;
}
 80066c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066c4:	b004      	add	sp, #16
 80066c6:	4770      	bx	lr

080066c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80066ca:	780d      	ldrb	r5, [r1, #0]
{
 80066cc:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80066ce:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 80066d2:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80066d4:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80066d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80066dc:	0412      	lsls	r2, r2, #16
 80066de:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 80066e0:	2803      	cmp	r0, #3
 80066e2:	d84f      	bhi.n	8006784 <USB_ActivateEndpoint+0xbc>
 80066e4:	e8df f000 	tbb	[pc, r0]
 80066e8:	47494b02 	.word	0x47494b02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80066f0:	f248 0480 	movw	r4, #32896	; 0x8080
 80066f4:	4322      	orrs	r2, r4
 80066f6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80066fa:	780e      	ldrb	r6, [r1, #0]
 80066fc:	4d9b      	ldr	r5, [pc, #620]	; (800696c <USB_ActivateEndpoint+0x2a4>)
 80066fe:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8006702:	b292      	uxth	r2, r2
 8006704:	402a      	ands	r2, r5
 8006706:	4332      	orrs	r2, r6
 8006708:	4322      	orrs	r2, r4
 800670a:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 800670e:	7b0c      	ldrb	r4, [r1, #12]
 8006710:	780a      	ldrb	r2, [r1, #0]
 8006712:	2c00      	cmp	r4, #0
 8006714:	f040 8089 	bne.w	800682a <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8006718:	88cc      	ldrh	r4, [r1, #6]
 800671a:	784e      	ldrb	r6, [r1, #1]
 800671c:	0864      	lsrs	r4, r4, #1
 800671e:	0064      	lsls	r4, r4, #1
 8006720:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006724:	b386      	cbz	r6, 8006788 <USB_ActivateEndpoint+0xc0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006726:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800672a:	b2b6      	uxth	r6, r6
 800672c:	4432      	add	r2, r6
 800672e:	f8a2 4400 	strh.w	r4, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006732:	780c      	ldrb	r4, [r1, #0]
 8006734:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006738:	0652      	lsls	r2, r2, #25
 800673a:	d509      	bpl.n	8006750 <USB_ActivateEndpoint+0x88>
 800673c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006740:	b292      	uxth	r2, r2
 8006742:	402a      	ands	r2, r5
 8006744:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006748:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800674c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006750:	78ca      	ldrb	r2, [r1, #3]
 8006752:	780c      	ldrb	r4, [r1, #0]
 8006754:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006756:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800675a:	4985      	ldr	r1, [pc, #532]	; (8006970 <USB_ActivateEndpoint+0x2a8>)
 800675c:	b292      	uxth	r2, r2
 800675e:	ea02 0201 	and.w	r2, r2, r1
 8006762:	bf18      	it	ne
 8006764:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006768:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800676c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006770:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return ret;
}
 8006774:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_INTERRUPT;
 8006776:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800677a:	2000      	movs	r0, #0
      break;
 800677c:	e7b8      	b.n	80066f0 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800677e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 8006782:	e7fa      	b.n	800677a <USB_ActivateEndpoint+0xb2>
      ret = HAL_ERROR;
 8006784:	2001      	movs	r0, #1
 8006786:	e7b3      	b.n	80066f0 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006788:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800678c:	690e      	ldr	r6, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800678e:	b2ad      	uxth	r5, r5
 8006790:	442a      	add	r2, r5
 8006792:	f8a2 4408 	strh.w	r4, [r2, #1032]	; 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006796:	780a      	ldrb	r2, [r1, #0]
 8006798:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800679c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80067a0:	b2a4      	uxth	r4, r4
 80067a2:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 80067a6:	bb7e      	cbnz	r6, 8006808 <USB_ActivateEndpoint+0x140>
 80067a8:	5b15      	ldrh	r5, [r2, r4]
 80067aa:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 80067ae:	042d      	lsls	r5, r5, #16
 80067b0:	0c2d      	lsrs	r5, r5, #16
 80067b2:	5315      	strh	r5, [r2, r4]
 80067b4:	5b15      	ldrh	r5, [r2, r4]
 80067b6:	ea6f 4545 	mvn.w	r5, r5, lsl #17
 80067ba:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80067be:	b2ad      	uxth	r5, r5
 80067c0:	5315      	strh	r5, [r2, r4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067c2:	780c      	ldrb	r4, [r1, #0]
 80067c4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80067c8:	0455      	lsls	r5, r2, #17
 80067ca:	d50d      	bpl.n	80067e8 <USB_ActivateEndpoint+0x120>
 80067cc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80067d0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80067d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067d8:	0412      	lsls	r2, r2, #16
 80067da:	0c12      	lsrs	r2, r2, #16
 80067dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80067e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067e8:	7809      	ldrb	r1, [r1, #0]
 80067ea:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80067ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067f6:	0412      	lsls	r2, r2, #16
 80067f8:	0c12      	lsrs	r2, r2, #16
 80067fa:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80067fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006806:	e071      	b.n	80068ec <USB_ActivateEndpoint+0x224>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006808:	2e3e      	cmp	r6, #62	; 0x3e
 800680a:	d805      	bhi.n	8006818 <USB_ActivateEndpoint+0x150>
 800680c:	0875      	lsrs	r5, r6, #1
 800680e:	07f7      	lsls	r7, r6, #31
 8006810:	bf48      	it	mi
 8006812:	3501      	addmi	r5, #1
 8006814:	02ad      	lsls	r5, r5, #10
 8006816:	e7d2      	b.n	80067be <USB_ActivateEndpoint+0xf6>
 8006818:	0977      	lsrs	r7, r6, #5
 800681a:	4d56      	ldr	r5, [pc, #344]	; (8006974 <USB_ActivateEndpoint+0x2ac>)
 800681c:	06f6      	lsls	r6, r6, #27
 800681e:	bf08      	it	eq
 8006820:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006824:	ea45 2587 	orr.w	r5, r5, r7, lsl #10
 8006828:	e7c9      	b.n	80067be <USB_ActivateEndpoint+0xf6>
    PCD_SET_EP_DBUF(USBx, ep->num);
 800682a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 800682e:	b2a4      	uxth	r4, r4
 8006830:	402c      	ands	r4, r5
 8006832:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8006836:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800683a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800683e:	780a      	ldrb	r2, [r1, #0]
 8006840:	890c      	ldrh	r4, [r1, #8]
 8006842:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8006846:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800684a:	0864      	lsrs	r4, r4, #1
 800684c:	b2b6      	uxth	r6, r6
 800684e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006852:	0064      	lsls	r4, r4, #1
 8006854:	5394      	strh	r4, [r2, r6]
 8006856:	780a      	ldrb	r2, [r1, #0]
 8006858:	894c      	ldrh	r4, [r1, #10]
 800685a:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 800685e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8006862:	0864      	lsrs	r4, r4, #1
 8006864:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8006868:	0064      	lsls	r4, r4, #1
 800686a:	b2b6      	uxth	r6, r6
 800686c:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 800686e:	784a      	ldrb	r2, [r1, #1]
 8006870:	780c      	ldrb	r4, [r1, #0]
 8006872:	2a00      	cmp	r2, #0
 8006874:	d13d      	bne.n	80068f2 <USB_ActivateEndpoint+0x22a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006876:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800687a:	0452      	lsls	r2, r2, #17
 800687c:	d509      	bpl.n	8006892 <USB_ActivateEndpoint+0x1ca>
 800687e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006882:	b292      	uxth	r2, r2
 8006884:	402a      	ands	r2, r5
 8006886:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800688a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800688e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006892:	780c      	ldrb	r4, [r1, #0]
 8006894:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006898:	0657      	lsls	r7, r2, #25
 800689a:	d50d      	bpl.n	80068b8 <USB_ActivateEndpoint+0x1f0>
 800689c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068a8:	0412      	lsls	r2, r2, #16
 80068aa:	0c12      	lsrs	r2, r2, #16
 80068ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80068b4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068b8:	f248 0480 	movw	r4, #32896	; 0x8080
 80068bc:	780d      	ldrb	r5, [r1, #0]
 80068be:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 80068c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068ca:	0412      	lsls	r2, r2, #16
 80068cc:	0c12      	lsrs	r2, r2, #16
 80068ce:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80068d2:	4322      	orrs	r2, r4
 80068d4:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068d8:	7809      	ldrb	r1, [r1, #0]
 80068da:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80068de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80068e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e6:	0412      	lsls	r2, r2, #16
 80068e8:	0c12      	lsrs	r2, r2, #16
 80068ea:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80068ec:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 80068f0:	e740      	b.n	8006774 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068f6:	0456      	lsls	r6, r2, #17
 80068f8:	d509      	bpl.n	800690e <USB_ActivateEndpoint+0x246>
 80068fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80068fe:	b292      	uxth	r2, r2
 8006900:	402a      	ands	r2, r5
 8006902:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8006906:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800690a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800690e:	780c      	ldrb	r4, [r1, #0]
 8006910:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8006914:	0652      	lsls	r2, r2, #25
 8006916:	d50d      	bpl.n	8006934 <USB_ActivateEndpoint+0x26c>
 8006918:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800691c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006920:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006924:	0412      	lsls	r2, r2, #16
 8006926:	0c12      	lsrs	r2, r2, #16
 8006928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800692c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8006930:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8006934:	78ca      	ldrb	r2, [r1, #3]
 8006936:	780c      	ldrb	r4, [r1, #0]
 8006938:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800693a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800693e:	4d0c      	ldr	r5, [pc, #48]	; (8006970 <USB_ActivateEndpoint+0x2a8>)
 8006940:	b292      	uxth	r2, r2
 8006942:	ea02 0205 	and.w	r2, r2, r5
 8006946:	bf18      	it	ne
 8006948:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800694c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006950:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006954:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006958:	7809      	ldrb	r1, [r1, #0]
 800695a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800695e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006962:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006966:	0412      	lsls	r2, r2, #16
 8006968:	0c12      	lsrs	r2, r2, #16
 800696a:	e748      	b.n	80067fe <USB_ActivateEndpoint+0x136>
 800696c:	ffff8f8f 	.word	0xffff8f8f
 8006970:	ffff8fbf 	.word	0xffff8fbf
 8006974:	ffff8000 	.word	0xffff8000

08006978 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006978:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800697a:	7b0c      	ldrb	r4, [r1, #12]
 800697c:	784b      	ldrb	r3, [r1, #1]
 800697e:	780a      	ldrb	r2, [r1, #0]
 8006980:	2c00      	cmp	r4, #0
 8006982:	d13d      	bne.n	8006a00 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8006984:	b313      	cbz	r3, 80069cc <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006986:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800698a:	065c      	lsls	r4, r3, #25
 800698c:	d50d      	bpl.n	80069aa <USB_DeactivateEndpoint+0x32>
 800698e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	041b      	lsls	r3, r3, #16
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069aa:	780a      	ldrb	r2, [r1, #0]
 80069ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069b8:	041b      	lsls	r3, r3, #16
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80069c8:	2000      	movs	r0, #0
 80069ca:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069cc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80069d0:	045b      	lsls	r3, r3, #17
 80069d2:	d50d      	bpl.n	80069f0 <USB_DeactivateEndpoint+0x78>
 80069d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ec:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069f0:	780a      	ldrb	r2, [r1, #0]
 80069f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80069f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fe:	e7db      	b.n	80069b8 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d14e      	bne.n	8006aa2 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a08:	045c      	lsls	r4, r3, #17
 8006a0a:	d50d      	bpl.n	8006a28 <USB_DeactivateEndpoint+0xb0>
 8006a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a18:	041b      	lsls	r3, r3, #16
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a24:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a28:	780a      	ldrb	r2, [r1, #0]
 8006a2a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a2e:	065b      	lsls	r3, r3, #25
 8006a30:	d50d      	bpl.n	8006a4e <USB_DeactivateEndpoint+0xd6>
 8006a32:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	0c1b      	lsrs	r3, r3, #16
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a4a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8006a4e:	780a      	ldrb	r2, [r1, #0]
 8006a50:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	041b      	lsls	r3, r3, #16
 8006a5e:	0c1b      	lsrs	r3, r3, #16
 8006a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a64:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a68:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a6c:	f248 0280 	movw	r2, #32896	; 0x8080
 8006a70:	780c      	ldrb	r4, [r1, #0]
 8006a72:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	4313      	orrs	r3, r2
 8006a84:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a88:	7809      	ldrb	r1, [r1, #0]
 8006a8a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a96:	041b      	lsls	r3, r3, #16
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8006aa0:	e792      	b.n	80069c8 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006aa2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006aa6:	045c      	lsls	r4, r3, #17
 8006aa8:	d50d      	bpl.n	8006ac6 <USB_DeactivateEndpoint+0x14e>
 8006aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006aae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	0c1b      	lsrs	r3, r3, #16
 8006aba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac6:	780a      	ldrb	r2, [r1, #0]
 8006ac8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006acc:	065b      	lsls	r3, r3, #25
 8006ace:	d50d      	bpl.n	8006aec <USB_DeactivateEndpoint+0x174>
 8006ad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006adc:	041b      	lsls	r3, r3, #16
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8006aec:	780a      	ldrb	r2, [r1, #0]
 8006aee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	0c1b      	lsrs	r3, r3, #16
 8006afe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b06:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b0a:	f248 0280 	movw	r2, #32896	; 0x8080
 8006b0e:	780c      	ldrb	r4, [r1, #0]
 8006b10:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8006b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b1c:	041b      	lsls	r3, r3, #16
 8006b1e:	0c1b      	lsrs	r3, r3, #16
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b26:	7809      	ldrb	r1, [r1, #0]
 8006b28:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8006b2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b34:	e7af      	b.n	8006a96 <USB_DeactivateEndpoint+0x11e>

08006b36 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006b36:	784b      	ldrb	r3, [r1, #1]
 8006b38:	780a      	ldrb	r2, [r1, #0]
 8006b3a:	b18b      	cbz	r3, 8006b60 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006b3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b48:	041b      	lsls	r3, r3, #16
 8006b4a:	0c1b      	lsrs	r3, r3, #16
 8006b4c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006b60:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	041b      	lsls	r3, r3, #16
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b74:	e7ec      	b.n	8006b50 <USB_EPSetStall+0x1a>

08006b76 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006b76:	7b0b      	ldrb	r3, [r1, #12]
 8006b78:	bb43      	cbnz	r3, 8006bcc <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 8006b7a:	784b      	ldrb	r3, [r1, #1]
 8006b7c:	780a      	ldrb	r2, [r1, #0]
 8006b7e:	b33b      	cbz	r3, 8006bd0 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b84:	065b      	lsls	r3, r3, #25
 8006b86:	d50d      	bpl.n	8006ba4 <USB_EPClearStall+0x2e>
 8006b88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006b8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ba0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006ba4:	78cb      	ldrb	r3, [r1, #3]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d010      	beq.n	8006bcc <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006baa:	780a      	ldrb	r2, [r1, #0]
 8006bac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	0c1b      	lsrs	r3, r3, #16
 8006bbc:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 8006bcc:	2000      	movs	r0, #0
 8006bce:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bd4:	045b      	lsls	r3, r3, #17
 8006bd6:	d50d      	bpl.n	8006bf4 <USB_EPClearStall+0x7e>
 8006bd8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bf0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006bf4:	780a      	ldrb	r2, [r1, #0]
 8006bf6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8006c0a:	e7d9      	b.n	8006bc0 <USB_EPClearStall+0x4a>

08006c0c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8006c0c:	b911      	cbnz	r1, 8006c14 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c0e:	2380      	movs	r3, #128	; 0x80
 8006c10:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 8006c14:	2000      	movs	r0, #0
 8006c16:	4770      	bx	lr

08006c18 <USB_DevConnect>:
 8006c18:	2000      	movs	r0, #0
 8006c1a:	4770      	bx	lr

08006c1c <USB_DevDisconnect>:
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	4770      	bx	lr

08006c20 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c20:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8006c24:	b280      	uxth	r0, r0
 8006c26:	4770      	bx	lr

08006c28 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006c28:	2000      	movs	r0, #0
 8006c2a:	4770      	bx	lr

08006c2c <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c2c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c30:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c36:	085b      	lsrs	r3, r3, #1
 8006c38:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d100      	bne.n	8006c42 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8006c40:	4770      	bx	lr
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c42:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8006c46:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0U; i--)
 8006c4a:	e7f7      	b.n	8006c3c <USB_WritePMA+0x10>

08006c4c <USB_EPStartXfer>:
{
 8006c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8006c50:	7849      	ldrb	r1, [r1, #1]
{
 8006c52:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8006c54:	2901      	cmp	r1, #1
 8006c56:	7b2a      	ldrb	r2, [r5, #12]
 8006c58:	f040 81a1 	bne.w	8006f9e <USB_EPStartXfer+0x352>
    if (ep->xfer_len > ep->maxpacket)
 8006c5c:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006c60:	69ae      	ldr	r6, [r5, #24]
 8006c62:	6969      	ldr	r1, [r5, #20]
 8006c64:	4566      	cmp	r6, ip
 8006c66:	bf28      	it	cs
 8006c68:	4666      	movcs	r6, ip
    if (ep->doublebuffer == 0U)
 8006c6a:	bb02      	cbnz	r2, 8006cae <USB_EPStartXfer+0x62>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006c6c:	b2b6      	uxth	r6, r6
 8006c6e:	88ea      	ldrh	r2, [r5, #6]
 8006c70:	4633      	mov	r3, r6
 8006c72:	f7ff ffdb 	bl	8006c2c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c76:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006c7a:	7829      	ldrb	r1, [r5, #0]
 8006c7c:	b290      	uxth	r0, r2
 8006c7e:	f204 4204 	addw	r2, r4, #1028	; 0x404
 8006c82:	0109      	lsls	r1, r1, #4
 8006c84:	4402      	add	r2, r0
 8006c86:	528e      	strh	r6, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c88:	782a      	ldrb	r2, [r5, #0]
 8006c8a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  return HAL_OK;
 8006c9e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8006cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8006cae:	78eb      	ldrb	r3, [r5, #3]
 8006cb0:	782f      	ldrb	r7, [r5, #0]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	f040 8138 	bne.w	8006f28 <USB_EPStartXfer+0x2dc>
        if (ep->xfer_len_db > ep->maxpacket)
 8006cb8:	6a2b      	ldr	r3, [r5, #32]
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006cba:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 8006cbe:	459c      	cmp	ip, r3
 8006cc0:	f080 811a 	bcs.w	8006ef8 <USB_EPStartXfer+0x2ac>
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006cc4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006cc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ccc:	0412      	lsls	r2, r2, #16
 8006cce:	0c12      	lsrs	r2, r2, #16
 8006cd0:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8006cd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cd8:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006cdc:	782a      	ldrb	r2, [r5, #0]
          ep->xfer_len_db -= len;
 8006cde:	1b9b      	subs	r3, r3, r6
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ce0:	f830 0022 	ldrh.w	r0, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8006ce4:	622b      	str	r3, [r5, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006cea:	b2b3      	uxth	r3, r6
 8006cec:	7868      	ldrb	r0, [r5, #1]
 8006cee:	f000 8083 	beq.w	8006df8 <USB_EPStartXfer+0x1ac>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d152      	bne.n	8006d9c <USB_EPStartXfer+0x150>
 8006cf6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006cfa:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8006cfe:	b280      	uxth	r0, r0
 8006d00:	4438      	add	r0, r7
 8006d02:	0112      	lsls	r2, r2, #4
 8006d04:	2e00      	cmp	r6, #0
 8006d06:	d136      	bne.n	8006d76 <USB_EPStartXfer+0x12a>
 8006d08:	5a87      	ldrh	r7, [r0, r2]
 8006d0a:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8006d0e:	043f      	lsls	r7, r7, #16
 8006d10:	0c3f      	lsrs	r7, r7, #16
 8006d12:	5287      	strh	r7, [r0, r2]
 8006d14:	5a87      	ldrh	r7, [r0, r2]
 8006d16:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8006d1a:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8006d1e:	b2bf      	uxth	r7, r7
 8006d20:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d22:	4620      	mov	r0, r4
 8006d24:	896a      	ldrh	r2, [r5, #10]
 8006d26:	f7ff ff81 	bl	8006c2c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006d2a:	6a2a      	ldr	r2, [r5, #32]
 8006d2c:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 8006d2e:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006d30:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8006d32:	bf8a      	itet	hi
 8006d34:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8006d36:	2300      	movls	r3, #0
 8006d38:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d3a:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 8006d3c:	4431      	add	r1, r6
 8006d3e:	622b      	str	r3, [r5, #32]
 8006d40:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006d42:	b293      	uxth	r3, r2
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d14b      	bne.n	8006de0 <USB_EPStartXfer+0x194>
 8006d48:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006d4c:	782e      	ldrb	r6, [r5, #0]
 8006d4e:	b280      	uxth	r0, r0
 8006d50:	f204 4704 	addw	r7, r4, #1028	; 0x404
 8006d54:	0136      	lsls	r6, r6, #4
 8006d56:	4438      	add	r0, r7
 8006d58:	bb5a      	cbnz	r2, 8006db2 <USB_EPStartXfer+0x166>
 8006d5a:	5a32      	ldrh	r2, [r6, r0]
 8006d5c:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006d60:	0412      	lsls	r2, r2, #16
 8006d62:	0c12      	lsrs	r2, r2, #16
 8006d64:	5232      	strh	r2, [r6, r0]
 8006d66:	5a32      	ldrh	r2, [r6, r0]
 8006d68:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006d6c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006d70:	b292      	uxth	r2, r2
 8006d72:	5232      	strh	r2, [r6, r0]
 8006d74:	e026      	b.n	8006dc4 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d76:	2e3e      	cmp	r6, #62	; 0x3e
 8006d78:	d806      	bhi.n	8006d88 <USB_EPStartXfer+0x13c>
 8006d7a:	0877      	lsrs	r7, r6, #1
 8006d7c:	f016 0f01 	tst.w	r6, #1
 8006d80:	bf18      	it	ne
 8006d82:	3701      	addne	r7, #1
 8006d84:	02bf      	lsls	r7, r7, #10
 8006d86:	e7ca      	b.n	8006d1e <USB_EPStartXfer+0xd2>
 8006d88:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8006d8c:	06f7      	lsls	r7, r6, #27
 8006d8e:	4fa3      	ldr	r7, [pc, #652]	; (800701c <USB_EPStartXfer+0x3d0>)
 8006d90:	bf08      	it	eq
 8006d92:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006d96:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8006d9a:	e7c0      	b.n	8006d1e <USB_EPStartXfer+0xd2>
 8006d9c:	2801      	cmp	r0, #1
 8006d9e:	d1c0      	bne.n	8006d22 <USB_EPStartXfer+0xd6>
 8006da0:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006da4:	0112      	lsls	r2, r2, #4
 8006da6:	b287      	uxth	r7, r0
 8006da8:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 8006dac:	4438      	add	r0, r7
 8006dae:	5283      	strh	r3, [r0, r2]
 8006db0:	e7b7      	b.n	8006d22 <USB_EPStartXfer+0xd6>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006db2:	2a3e      	cmp	r2, #62	; 0x3e
 8006db4:	d80b      	bhi.n	8006dce <USB_EPStartXfer+0x182>
 8006db6:	0857      	lsrs	r7, r2, #1
 8006db8:	07d2      	lsls	r2, r2, #31
 8006dba:	bf48      	it	mi
 8006dbc:	3701      	addmi	r7, #1
 8006dbe:	02bf      	lsls	r7, r7, #10
 8006dc0:	b2bf      	uxth	r7, r7
 8006dc2:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc4:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc6:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006dc8:	f7ff ff30 	bl	8006c2c <USB_WritePMA>
 8006dcc:	e75c      	b.n	8006c88 <USB_EPStartXfer+0x3c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006dce:	0957      	lsrs	r7, r2, #5
 8006dd0:	06d2      	lsls	r2, r2, #27
 8006dd2:	4a92      	ldr	r2, [pc, #584]	; (800701c <USB_EPStartXfer+0x3d0>)
 8006dd4:	bf08      	it	eq
 8006dd6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006dda:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006dde:	e7c7      	b.n	8006d70 <USB_EPStartXfer+0x124>
 8006de0:	2801      	cmp	r0, #1
 8006de2:	d1ef      	bne.n	8006dc4 <USB_EPStartXfer+0x178>
 8006de4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006de8:	7828      	ldrb	r0, [r5, #0]
 8006dea:	b296      	uxth	r6, r2
 8006dec:	f204 4204 	addw	r2, r4, #1028	; 0x404
 8006df0:	0100      	lsls	r0, r0, #4
 8006df2:	4432      	add	r2, r6
 8006df4:	5283      	strh	r3, [r0, r2]
 8006df6:	e7e5      	b.n	8006dc4 <USB_EPStartXfer+0x178>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d152      	bne.n	8006ea2 <USB_EPStartXfer+0x256>
 8006dfc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006e00:	f204 4704 	addw	r7, r4, #1028	; 0x404
 8006e04:	b280      	uxth	r0, r0
 8006e06:	4438      	add	r0, r7
 8006e08:	0112      	lsls	r2, r2, #4
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d136      	bne.n	8006e7c <USB_EPStartXfer+0x230>
 8006e0e:	5a87      	ldrh	r7, [r0, r2]
 8006e10:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 8006e14:	043f      	lsls	r7, r7, #16
 8006e16:	0c3f      	lsrs	r7, r7, #16
 8006e18:	5287      	strh	r7, [r0, r2]
 8006e1a:	5a87      	ldrh	r7, [r0, r2]
 8006e1c:	ea6f 4747 	mvn.w	r7, r7, lsl #17
 8006e20:	ea6f 4757 	mvn.w	r7, r7, lsr #17
 8006e24:	b2bf      	uxth	r7, r7
 8006e26:	5287      	strh	r7, [r0, r2]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e28:	4620      	mov	r0, r4
 8006e2a:	892a      	ldrh	r2, [r5, #8]
 8006e2c:	f7ff fefe 	bl	8006c2c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8006e30:	6a2a      	ldr	r2, [r5, #32]
 8006e32:	692b      	ldr	r3, [r5, #16]
            ep->xfer_buff += len;
 8006e34:	6969      	ldr	r1, [r5, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8006e36:	429a      	cmp	r2, r3
              ep->xfer_len_db -= len;
 8006e38:	bf8a      	itet	hi
 8006e3a:	1b93      	subhi	r3, r2, r6
              ep->xfer_len_db = 0U;
 8006e3c:	2300      	movls	r3, #0
 8006e3e:	4632      	movhi	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e40:	7868      	ldrb	r0, [r5, #1]
            ep->xfer_buff += len;
 8006e42:	4431      	add	r1, r6
 8006e44:	622b      	str	r3, [r5, #32]
 8006e46:	6169      	str	r1, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e48:	b293      	uxth	r3, r2
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d148      	bne.n	8006ee0 <USB_EPStartXfer+0x294>
 8006e4e:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006e52:	782e      	ldrb	r6, [r5, #0]
 8006e54:	b280      	uxth	r0, r0
 8006e56:	f204 470c 	addw	r7, r4, #1036	; 0x40c
 8006e5a:	0136      	lsls	r6, r6, #4
 8006e5c:	4438      	add	r0, r7
 8006e5e:	bb5a      	cbnz	r2, 8006eb8 <USB_EPStartXfer+0x26c>
 8006e60:	5a32      	ldrh	r2, [r6, r0]
 8006e62:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8006e66:	0412      	lsls	r2, r2, #16
 8006e68:	0c12      	lsrs	r2, r2, #16
 8006e6a:	5232      	strh	r2, [r6, r0]
 8006e6c:	5a32      	ldrh	r2, [r6, r0]
 8006e6e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8006e72:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8006e76:	b292      	uxth	r2, r2
 8006e78:	5232      	strh	r2, [r6, r0]
 8006e7a:	e026      	b.n	8006eca <USB_EPStartXfer+0x27e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006e7c:	2e3e      	cmp	r6, #62	; 0x3e
 8006e7e:	d806      	bhi.n	8006e8e <USB_EPStartXfer+0x242>
 8006e80:	0877      	lsrs	r7, r6, #1
 8006e82:	f016 0f01 	tst.w	r6, #1
 8006e86:	bf18      	it	ne
 8006e88:	3701      	addne	r7, #1
 8006e8a:	02bf      	lsls	r7, r7, #10
 8006e8c:	e7ca      	b.n	8006e24 <USB_EPStartXfer+0x1d8>
 8006e8e:	ea4f 1c56 	mov.w	ip, r6, lsr #5
 8006e92:	06f7      	lsls	r7, r6, #27
 8006e94:	4f61      	ldr	r7, [pc, #388]	; (800701c <USB_EPStartXfer+0x3d0>)
 8006e96:	bf08      	it	eq
 8006e98:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8006e9c:	ea47 278c 	orr.w	r7, r7, ip, lsl #10
 8006ea0:	e7c0      	b.n	8006e24 <USB_EPStartXfer+0x1d8>
 8006ea2:	2801      	cmp	r0, #1
 8006ea4:	d1c0      	bne.n	8006e28 <USB_EPStartXfer+0x1dc>
 8006ea6:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8006eaa:	0112      	lsls	r2, r2, #4
 8006eac:	b287      	uxth	r7, r0
 8006eae:	f204 4004 	addw	r0, r4, #1028	; 0x404
 8006eb2:	4438      	add	r0, r7
 8006eb4:	5283      	strh	r3, [r0, r2]
 8006eb6:	e7b7      	b.n	8006e28 <USB_EPStartXfer+0x1dc>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006eb8:	2a3e      	cmp	r2, #62	; 0x3e
 8006eba:	d808      	bhi.n	8006ece <USB_EPStartXfer+0x282>
 8006ebc:	0857      	lsrs	r7, r2, #1
 8006ebe:	07d2      	lsls	r2, r2, #31
 8006ec0:	bf48      	it	mi
 8006ec2:	3701      	addmi	r7, #1
 8006ec4:	02bf      	lsls	r7, r7, #10
 8006ec6:	b2bf      	uxth	r7, r7
 8006ec8:	5237      	strh	r7, [r6, r0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eca:	896a      	ldrh	r2, [r5, #10]
 8006ecc:	e77b      	b.n	8006dc6 <USB_EPStartXfer+0x17a>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006ece:	0957      	lsrs	r7, r2, #5
 8006ed0:	06d2      	lsls	r2, r2, #27
 8006ed2:	4a52      	ldr	r2, [pc, #328]	; (800701c <USB_EPStartXfer+0x3d0>)
 8006ed4:	bf08      	it	eq
 8006ed6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8006eda:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8006ede:	e7ca      	b.n	8006e76 <USB_EPStartXfer+0x22a>
 8006ee0:	2801      	cmp	r0, #1
 8006ee2:	d1f2      	bne.n	8006eca <USB_EPStartXfer+0x27e>
 8006ee4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8006ee8:	7828      	ldrb	r0, [r5, #0]
 8006eea:	b296      	uxth	r6, r2
 8006eec:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 8006ef0:	0100      	lsls	r0, r0, #4
 8006ef2:	4432      	add	r2, r6
 8006ef4:	5283      	strh	r3, [r0, r2]
 8006ef6:	e7e8      	b.n	8006eca <USB_EPStartXfer+0x27e>
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006ef8:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8006efc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006f00:	0412      	lsls	r2, r2, #16
 8006f02:	0c12      	lsrs	r2, r2, #16
 8006f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f0c:	f820 2027 	strh.w	r2, [r0, r7, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f10:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006f14:	782e      	ldrb	r6, [r5, #0]
 8006f16:	b297      	uxth	r7, r2
 8006f18:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8006f1c:	443a      	add	r2, r7
 8006f1e:	0136      	lsls	r6, r6, #4
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	52b3      	strh	r3, [r6, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f24:	892a      	ldrh	r2, [r5, #8]
 8006f26:	e74f      	b.n	8006dc8 <USB_EPStartXfer+0x17c>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f28:	f830 2027 	ldrh.w	r2, [r0, r7, lsl #2]
 8006f2c:	b2b3      	uxth	r3, r6
 8006f2e:	f012 0f40 	tst.w	r2, #64	; 0x40
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f32:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8006f36:	ea4f 1707 	mov.w	r7, r7, lsl #4
 8006f3a:	b290      	uxth	r0, r2
 8006f3c:	bf15      	itete	ne
 8006f3e:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f42:	f204 4204 	addweq	r2, r4, #1028	; 0x404
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f46:	1812      	addne	r2, r2, r0
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f48:	1812      	addeq	r2, r2, r0
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f4a:	bf15      	itete	ne
 8006f4c:	53d3      	strhne	r3, [r2, r7]
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f4e:	53d3      	strheq	r3, [r2, r7]
          pmabuffer = ep->pmaaddr1;
 8006f50:	896a      	ldrhne	r2, [r5, #10]
          pmabuffer = ep->pmaaddr0;
 8006f52:	892a      	ldrheq	r2, [r5, #8]
        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff fe69 	bl	8006c2c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006f5a:	786b      	ldrb	r3, [r5, #1]
 8006f5c:	782a      	ldrb	r2, [r5, #0]
 8006f5e:	b973      	cbnz	r3, 8006f7e <USB_EPStartXfer+0x332>
 8006f60:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006f64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f78:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8006f7c:	e684      	b.n	8006c88 <USB_EPStartXfer+0x3c>
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	f47f ae82 	bne.w	8006c88 <USB_EPStartXfer+0x3c>
 8006f84:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006f88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	0c1b      	lsrs	r3, r3, #16
 8006f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9c:	e7ec      	b.n	8006f78 <USB_EPStartXfer+0x32c>
    if (ep->doublebuffer == 0U)
 8006f9e:	2a00      	cmp	r2, #0
 8006fa0:	d13e      	bne.n	8007020 <USB_EPStartXfer+0x3d4>
      if (ep->xfer_len > ep->maxpacket)
 8006fa2:	69ab      	ldr	r3, [r5, #24]
 8006fa4:	6929      	ldr	r1, [r5, #16]
 8006fa6:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8006fa8:	bf84      	itt	hi
 8006faa:	1a5a      	subhi	r2, r3, r1
 8006fac:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006fae:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8006fb2:	7828      	ldrb	r0, [r5, #0]
 8006fb4:	61aa      	str	r2, [r5, #24]
 8006fb6:	b28a      	uxth	r2, r1
 8006fb8:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8006fbc:	0100      	lsls	r0, r0, #4
 8006fbe:	4411      	add	r1, r2
 8006fc0:	b96b      	cbnz	r3, 8006fde <USB_EPStartXfer+0x392>
 8006fc2:	5a43      	ldrh	r3, [r0, r1]
 8006fc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	0c1b      	lsrs	r3, r3, #16
 8006fcc:	5243      	strh	r3, [r0, r1]
 8006fce:	5a43      	ldrh	r3, [r0, r1]
 8006fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	5243      	strh	r3, [r0, r1]
 8006fdc:	e008      	b.n	8006ff0 <USB_EPStartXfer+0x3a4>
 8006fde:	2b3e      	cmp	r3, #62	; 0x3e
 8006fe0:	d812      	bhi.n	8007008 <USB_EPStartXfer+0x3bc>
 8006fe2:	085a      	lsrs	r2, r3, #1
 8006fe4:	07df      	lsls	r7, r3, #31
 8006fe6:	bf48      	it	mi
 8006fe8:	3201      	addmi	r2, #1
 8006fea:	0292      	lsls	r2, r2, #10
 8006fec:	b292      	uxth	r2, r2
 8006fee:	5242      	strh	r2, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ff0:	782a      	ldrb	r2, [r5, #0]
 8006ff2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8006ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	041b      	lsls	r3, r3, #16
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8007006:	e64a      	b.n	8006c9e <USB_EPStartXfer+0x52>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007008:	095a      	lsrs	r2, r3, #5
 800700a:	06de      	lsls	r6, r3, #27
 800700c:	4b03      	ldr	r3, [pc, #12]	; (800701c <USB_EPStartXfer+0x3d0>)
 800700e:	bf08      	it	eq
 8007010:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8007014:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8007018:	e7de      	b.n	8006fd8 <USB_EPStartXfer+0x38c>
 800701a:	bf00      	nop
 800701c:	ffff8000 	.word	0xffff8000
      if (ep->type == EP_TYPE_BULK)
 8007020:	78eb      	ldrb	r3, [r5, #3]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d17e      	bne.n	8007124 <USB_EPStartXfer+0x4d8>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007026:	b9b9      	cbnz	r1, 8007058 <USB_EPStartXfer+0x40c>
 8007028:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800702c:	7829      	ldrb	r1, [r5, #0]
 800702e:	b293      	uxth	r3, r2
 8007030:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8007034:	6928      	ldr	r0, [r5, #16]
 8007036:	0109      	lsls	r1, r1, #4
 8007038:	441a      	add	r2, r3
 800703a:	2800      	cmp	r0, #0
 800703c:	d144      	bne.n	80070c8 <USB_EPStartXfer+0x47c>
 800703e:	5a8b      	ldrh	r3, [r1, r2]
 8007040:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	0c1b      	lsrs	r3, r3, #16
 8007048:	528b      	strh	r3, [r1, r2]
 800704a:	5a8b      	ldrh	r3, [r1, r2]
 800704c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007054:	b29b      	uxth	r3, r3
 8007056:	528b      	strh	r3, [r1, r2]
 8007058:	786a      	ldrb	r2, [r5, #1]
 800705a:	782b      	ldrb	r3, [r5, #0]
 800705c:	2a00      	cmp	r2, #0
 800705e:	d155      	bne.n	800710c <USB_EPStartXfer+0x4c0>
 8007060:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8007064:	6928      	ldr	r0, [r5, #16]
 8007066:	b28a      	uxth	r2, r1
 8007068:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 800706c:	4411      	add	r1, r2
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	2800      	cmp	r0, #0
 8007072:	d13a      	bne.n	80070ea <USB_EPStartXfer+0x49e>
 8007074:	5aca      	ldrh	r2, [r1, r3]
 8007076:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800707a:	0412      	lsls	r2, r2, #16
 800707c:	0c12      	lsrs	r2, r2, #16
 800707e:	52ca      	strh	r2, [r1, r3]
 8007080:	5aca      	ldrh	r2, [r1, r3]
 8007082:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007086:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800708a:	b292      	uxth	r2, r2
 800708c:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 800708e:	69eb      	ldr	r3, [r5, #28]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0ad      	beq.n	8006ff0 <USB_EPStartXfer+0x3a4>
 8007094:	f244 0340 	movw	r3, #16448	; 0x4040
 8007098:	782a      	ldrb	r2, [r5, #0]
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800709a:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800709e:	ea03 0001 	and.w	r0, r3, r1
 80070a2:	438b      	bics	r3, r1
 80070a4:	d001      	beq.n	80070aa <USB_EPStartXfer+0x45e>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1a2      	bne.n	8006ff0 <USB_EPStartXfer+0x3a4>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80070aa:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80070ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	041b      	lsls	r3, r3, #16
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80070c2:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80070c6:	e793      	b.n	8006ff0 <USB_EPStartXfer+0x3a4>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070c8:	283e      	cmp	r0, #62	; 0x3e
 80070ca:	d805      	bhi.n	80070d8 <USB_EPStartXfer+0x48c>
 80070cc:	0843      	lsrs	r3, r0, #1
 80070ce:	07c0      	lsls	r0, r0, #31
 80070d0:	bf48      	it	mi
 80070d2:	3301      	addmi	r3, #1
 80070d4:	029b      	lsls	r3, r3, #10
 80070d6:	e7bd      	b.n	8007054 <USB_EPStartXfer+0x408>
 80070d8:	0946      	lsrs	r6, r0, #5
 80070da:	4b4a      	ldr	r3, [pc, #296]	; (8007204 <USB_EPStartXfer+0x5b8>)
 80070dc:	06c7      	lsls	r7, r0, #27
 80070de:	bf08      	it	eq
 80070e0:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80070e4:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80070e8:	e7b4      	b.n	8007054 <USB_EPStartXfer+0x408>
 80070ea:	283e      	cmp	r0, #62	; 0x3e
 80070ec:	d805      	bhi.n	80070fa <USB_EPStartXfer+0x4ae>
 80070ee:	0842      	lsrs	r2, r0, #1
 80070f0:	07c0      	lsls	r0, r0, #31
 80070f2:	bf48      	it	mi
 80070f4:	3201      	addmi	r2, #1
 80070f6:	0292      	lsls	r2, r2, #10
 80070f8:	e7c7      	b.n	800708a <USB_EPStartXfer+0x43e>
 80070fa:	0946      	lsrs	r6, r0, #5
 80070fc:	4a41      	ldr	r2, [pc, #260]	; (8007204 <USB_EPStartXfer+0x5b8>)
 80070fe:	06c7      	lsls	r7, r0, #27
 8007100:	bf08      	it	eq
 8007102:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007106:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 800710a:	e7be      	b.n	800708a <USB_EPStartXfer+0x43e>
 800710c:	2a01      	cmp	r2, #1
 800710e:	d1be      	bne.n	800708e <USB_EPStartXfer+0x442>
 8007110:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	b291      	uxth	r1, r2
 8007118:	f204 420c 	addw	r2, r4, #1036	; 0x40c
 800711c:	440a      	add	r2, r1
 800711e:	8a29      	ldrh	r1, [r5, #16]
 8007120:	52d1      	strh	r1, [r2, r3]
 8007122:	e7b4      	b.n	800708e <USB_EPStartXfer+0x442>
      else if (ep->type == EP_TYPE_ISOC)
 8007124:	2b01      	cmp	r3, #1
 8007126:	d16a      	bne.n	80071fe <USB_EPStartXfer+0x5b2>
        if (ep->xfer_len > ep->maxpacket)
 8007128:	69ab      	ldr	r3, [r5, #24]
 800712a:	692a      	ldr	r2, [r5, #16]
 800712c:	4293      	cmp	r3, r2
          ep->xfer_len = 0U;
 800712e:	bf94      	ite	ls
 8007130:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007132:	1a98      	subhi	r0, r3, r2
 8007134:	61a8      	str	r0, [r5, #24]
 8007136:	bf88      	it	hi
 8007138:	4613      	movhi	r3, r2
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800713a:	b9a9      	cbnz	r1, 8007168 <USB_EPStartXfer+0x51c>
 800713c:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8007140:	7828      	ldrb	r0, [r5, #0]
 8007142:	b28a      	uxth	r2, r1
 8007144:	f204 4104 	addw	r1, r4, #1028	; 0x404
 8007148:	0100      	lsls	r0, r0, #4
 800714a:	4411      	add	r1, r2
 800714c:	bb33      	cbnz	r3, 800719c <USB_EPStartXfer+0x550>
 800714e:	5a42      	ldrh	r2, [r0, r1]
 8007150:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8007154:	0412      	lsls	r2, r2, #16
 8007156:	0c12      	lsrs	r2, r2, #16
 8007158:	5242      	strh	r2, [r0, r1]
 800715a:	5a42      	ldrh	r2, [r0, r1]
 800715c:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007160:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8007164:	b292      	uxth	r2, r2
 8007166:	5242      	strh	r2, [r0, r1]
 8007168:	7869      	ldrb	r1, [r5, #1]
 800716a:	782a      	ldrb	r2, [r5, #0]
 800716c:	2900      	cmp	r1, #0
 800716e:	d139      	bne.n	80071e4 <USB_EPStartXfer+0x598>
 8007170:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8007174:	0112      	lsls	r2, r2, #4
 8007176:	b281      	uxth	r1, r0
 8007178:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800717c:	4408      	add	r0, r1
 800717e:	b9f3      	cbnz	r3, 80071be <USB_EPStartXfer+0x572>
 8007180:	5a83      	ldrh	r3, [r0, r2]
 8007182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	5283      	strh	r3, [r0, r2]
 800718c:	5a83      	ldrh	r3, [r0, r2]
 800718e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007196:	b29b      	uxth	r3, r3
 8007198:	5283      	strh	r3, [r0, r2]
 800719a:	e729      	b.n	8006ff0 <USB_EPStartXfer+0x3a4>
 800719c:	2b3e      	cmp	r3, #62	; 0x3e
 800719e:	d805      	bhi.n	80071ac <USB_EPStartXfer+0x560>
 80071a0:	085a      	lsrs	r2, r3, #1
 80071a2:	07de      	lsls	r6, r3, #31
 80071a4:	bf48      	it	mi
 80071a6:	3201      	addmi	r2, #1
 80071a8:	0292      	lsls	r2, r2, #10
 80071aa:	e7db      	b.n	8007164 <USB_EPStartXfer+0x518>
 80071ac:	095e      	lsrs	r6, r3, #5
 80071ae:	4a15      	ldr	r2, [pc, #84]	; (8007204 <USB_EPStartXfer+0x5b8>)
 80071b0:	06df      	lsls	r7, r3, #27
 80071b2:	bf08      	it	eq
 80071b4:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80071b8:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 80071bc:	e7d2      	b.n	8007164 <USB_EPStartXfer+0x518>
 80071be:	2b3e      	cmp	r3, #62	; 0x3e
 80071c0:	d807      	bhi.n	80071d2 <USB_EPStartXfer+0x586>
 80071c2:	0859      	lsrs	r1, r3, #1
 80071c4:	07de      	lsls	r6, r3, #31
 80071c6:	bf48      	it	mi
 80071c8:	3101      	addmi	r1, #1
 80071ca:	0289      	lsls	r1, r1, #10
 80071cc:	b289      	uxth	r1, r1
 80071ce:	5281      	strh	r1, [r0, r2]
 80071d0:	e70e      	b.n	8006ff0 <USB_EPStartXfer+0x3a4>
 80071d2:	0959      	lsrs	r1, r3, #5
 80071d4:	06db      	lsls	r3, r3, #27
 80071d6:	4b0b      	ldr	r3, [pc, #44]	; (8007204 <USB_EPStartXfer+0x5b8>)
 80071d8:	bf08      	it	eq
 80071da:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80071de:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80071e2:	e7d8      	b.n	8007196 <USB_EPStartXfer+0x54a>
 80071e4:	2901      	cmp	r1, #1
 80071e6:	f47f af03 	bne.w	8006ff0 <USB_EPStartXfer+0x3a4>
 80071ea:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 80071ee:	0112      	lsls	r2, r2, #4
 80071f0:	b288      	uxth	r0, r1
 80071f2:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 80071f6:	4401      	add	r1, r0
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	528b      	strh	r3, [r1, r2]
 80071fc:	e6f8      	b.n	8006ff0 <USB_EPStartXfer+0x3a4>
        return HAL_ERROR;
 80071fe:	2001      	movs	r0, #1
 8007200:	e554      	b.n	8006cac <USB_EPStartXfer+0x60>
 8007202:	bf00      	nop
 8007204:	ffff8000 	.word	0xffff8000

08007208 <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007208:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 800720c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800720e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007212:	085d      	lsrs	r5, r3, #1

  for (i = n; i != 0U; i--)
 8007214:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007216:	4617      	mov	r7, r2
  for (i = n; i != 0U; i--)
 8007218:	462e      	mov	r6, r5
 800721a:	3402      	adds	r4, #2
 800721c:	b936      	cbnz	r6, 800722c <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800721e:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8007220:	bf44      	itt	mi
 8007222:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007226:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 800722c:	f837 0b04 	ldrh.w	r0, [r7], #4
  for (i = n; i != 0U; i--)
 8007230:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8007232:	b280      	uxth	r0, r0
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007234:	f804 0c02 	strb.w	r0, [r4, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007238:	0a00      	lsrs	r0, r0, #8
 800723a:	f804 0c01 	strb.w	r0, [r4, #-1]
  for (i = n; i != 0U; i--)
 800723e:	e7ec      	b.n	800721a <USB_ReadPMA+0x12>

08007240 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007240:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8007244:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007246:	b16b      	cbz	r3, 8007264 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007248:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800724c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8007250:	28ff      	cmp	r0, #255	; 0xff
 8007252:	d007      	beq.n	8007264 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	4621      	mov	r1, r4
 8007258:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800725c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800725e:	23ff      	movs	r3, #255	; 0xff
 8007260:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8007264:	2000      	movs	r0, #0
 8007266:	bd10      	pop	{r4, pc}

08007268 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007268:	2343      	movs	r3, #67	; 0x43
 800726a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800726c:	4800      	ldr	r0, [pc, #0]	; (8007270 <USBD_CDC_GetFSCfgDesc+0x8>)
 800726e:	4770      	bx	lr
 8007270:	20000044 	.word	0x20000044

08007274 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007274:	2343      	movs	r3, #67	; 0x43
 8007276:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007278:	4800      	ldr	r0, [pc, #0]	; (800727c <USBD_CDC_GetHSCfgDesc+0x8>)
 800727a:	4770      	bx	lr
 800727c:	20000088 	.word	0x20000088

08007280 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007280:	2343      	movs	r3, #67	; 0x43
 8007282:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007284:	4800      	ldr	r0, [pc, #0]	; (8007288 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007286:	4770      	bx	lr
 8007288:	200000d8 	.word	0x200000d8

0800728c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800728c:	230a      	movs	r3, #10
 800728e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007290:	4800      	ldr	r0, [pc, #0]	; (8007294 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007292:	4770      	bx	lr
 8007294:	200000cc 	.word	0x200000cc

08007298 <USBD_CDC_DataOut>:
{
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800729c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072a0:	f002 fb92 	bl	80099c8 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80072a4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072a8:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80072ac:	b14b      	cbz	r3, 80072c2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072ae:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80072b2:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80072bc:	4798      	blx	r3
    return USBD_OK;
 80072be:	2000      	movs	r0, #0
}
 80072c0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80072c2:	2002      	movs	r0, #2
 80072c4:	e7fc      	b.n	80072c0 <USBD_CDC_DataOut+0x28>

080072c6 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072c6:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80072ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData != NULL)
 80072cc:	b1d2      	cbz	r2, 8007304 <USBD_CDC_DataIn+0x3e>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072ce:	2714      	movs	r7, #20
 80072d0:	fb07 0701 	mla	r7, r7, r1, r0
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	b18b      	cbz	r3, 80072fc <USBD_CDC_DataIn+0x36>
 80072d8:	2628      	movs	r6, #40	; 0x28
 80072da:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 80072de:	fb06 4501 	mla	r5, r6, r1, r4
 80072e2:	6bad      	ldr	r5, [r5, #56]	; 0x38
 80072e4:	fbb3 f4f5 	udiv	r4, r3, r5
 80072e8:	fb05 3414 	mls	r4, r5, r4, r3
 80072ec:	b934      	cbnz	r4, 80072fc <USBD_CDC_DataIn+0x36>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072ee:	4623      	mov	r3, r4
 80072f0:	4622      	mov	r2, r4
      pdev->ep_in[epnum].total_length = 0U;
 80072f2:	61fc      	str	r4, [r7, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072f4:	f002 fb4c 	bl	8009990 <USBD_LL_Transmit>
    return USBD_OK;
 80072f8:	4620      	mov	r0, r4
}
 80072fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80072fc:	2000      	movs	r0, #0
 80072fe:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8007302:	e7fa      	b.n	80072fa <USBD_CDC_DataIn+0x34>
    return USBD_FAIL;
 8007304:	2002      	movs	r0, #2
 8007306:	e7f8      	b.n	80072fa <USBD_CDC_DataIn+0x34>

08007308 <USBD_CDC_Setup>:
{
 8007308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 800730c:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007310:	780a      	ldrb	r2, [r1, #0]
{
 8007312:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007314:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8007318:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800731a:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 800731e:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 8007322:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007326:	d028      	beq.n	800737a <USBD_CDC_Setup+0x72>
 8007328:	2c20      	cmp	r4, #32
 800732a:	d142      	bne.n	80073b2 <USBD_CDC_Setup+0xaa>
      if (req->wLength)
 800732c:	88cc      	ldrh	r4, [r1, #6]
 800732e:	784b      	ldrb	r3, [r1, #1]
 8007330:	b1e4      	cbz	r4, 800736c <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 8007332:	0612      	lsls	r2, r2, #24
 8007334:	d511      	bpl.n	800735a <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007336:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800733a:	4639      	mov	r1, r7
 800733c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007340:	4618      	mov	r0, r3
 8007342:	4622      	mov	r2, r4
 8007344:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007346:	4639      	mov	r1, r7
 8007348:	4628      	mov	r0, r5
 800734a:	88f2      	ldrh	r2, [r6, #6]
 800734c:	f000 fc4b 	bl	8007be6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8007350:	4644      	mov	r4, r8
}
 8007352:	4620      	mov	r0, r4
 8007354:	b003      	add	sp, #12
 8007356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800735a:	4622      	mov	r2, r4
 800735c:	4639      	mov	r1, r7
          hcdc->CmdOpCode = req->bRequest;
 800735e:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007362:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007366:	f000 fc53 	bl	8007c10 <USBD_CtlPrepareRx>
 800736a:	e7f1      	b.n	8007350 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800736c:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8007370:	4618      	mov	r0, r3
 8007372:	6895      	ldr	r5, [r2, #8]
 8007374:	4622      	mov	r2, r4
 8007376:	47a8      	blx	r5
 8007378:	e7eb      	b.n	8007352 <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 800737a:	784b      	ldrb	r3, [r1, #1]
 800737c:	2b0a      	cmp	r3, #10
 800737e:	d00c      	beq.n	800739a <USBD_CDC_Setup+0x92>
 8007380:	2b0b      	cmp	r3, #11
 8007382:	d012      	beq.n	80073aa <USBD_CDC_Setup+0xa2>
 8007384:	b9ab      	cbnz	r3, 80073b2 <USBD_CDC_Setup+0xaa>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007386:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800738a:	2b03      	cmp	r3, #3
 800738c:	d111      	bne.n	80073b2 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800738e:	2202      	movs	r2, #2
 8007390:	f10d 0106 	add.w	r1, sp, #6
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007394:	f000 fc27 	bl	8007be6 <USBD_CtlSendData>
 8007398:	e7db      	b.n	8007352 <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800739a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d107      	bne.n	80073b2 <USBD_CDC_Setup+0xaa>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80073a2:	2201      	movs	r2, #1
 80073a4:	f10d 0105 	add.w	r1, sp, #5
 80073a8:	e7f4      	b.n	8007394 <USBD_CDC_Setup+0x8c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073aa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d0cf      	beq.n	8007352 <USBD_CDC_Setup+0x4a>
          USBD_CtlError(pdev, req);
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	f000 fbef 	bl	8007b98 <USBD_CtlError>
          ret = USBD_FAIL;
 80073ba:	2402      	movs	r4, #2
          break;
 80073bc:	e7c9      	b.n	8007352 <USBD_CDC_Setup+0x4a>

080073be <USBD_CDC_DeInit>:
{
 80073be:	b538      	push	{r3, r4, r5, lr}
 80073c0:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073c2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80073c4:	2181      	movs	r1, #129	; 0x81
 80073c6:	f002 fa99 	bl	80098fc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073ca:	2101      	movs	r1, #1
 80073cc:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80073ce:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80073d0:	f002 fa94 	bl	80098fc <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073d4:	2182      	movs	r1, #130	; 0x82
 80073d6:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80073d8:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80073dc:	f002 fa8e 	bl	80098fc <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80073e0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80073e4:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80073e6:	b14b      	cbz	r3, 80073fc <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80073e8:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80073f0:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 80073f4:	f002 faf0 	bl	80099d8 <USBD_static_free>
    pdev->pClassData = NULL;
 80073f8:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 80073fc:	2000      	movs	r0, #0
 80073fe:	bd38      	pop	{r3, r4, r5, pc}

08007400 <USBD_CDC_Init>:
{
 8007400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007404:	7c03      	ldrb	r3, [r0, #16]
{
 8007406:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007408:	bbbb      	cbnz	r3, 800747a <USBD_CDC_Init+0x7a>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800740a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800740e:	2202      	movs	r2, #2
 8007410:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007412:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007414:	f002 fa62 	bl	80098dc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007418:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800741c:	62e5      	str	r5, [r4, #44]	; 0x2c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800741e:	2701      	movs	r7, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007420:	4629      	mov	r1, r5
 8007422:	2202      	movs	r2, #2
 8007424:	4620      	mov	r0, r4
 8007426:	f002 fa59 	bl	80098dc <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800742a:	2308      	movs	r3, #8
 800742c:	2203      	movs	r2, #3
 800742e:	2182      	movs	r1, #130	; 0x82
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007430:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007434:	4620      	mov	r0, r4
 8007436:	f002 fa51 	bl	80098dc <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800743a:	f44f 7007 	mov.w	r0, #540	; 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800743e:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007440:	f002 fac6 	bl	80099d0 <USBD_static_malloc>
 8007444:	4605      	mov	r5, r0
 8007446:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800744a:	b340      	cbz	r0, 800749e <USBD_CDC_Init+0x9e>
    hcdc->TxState = 0U;
 800744c:	f04f 0800 	mov.w	r8, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007450:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4798      	blx	r3
    hcdc->TxState = 0U;
 8007458:	f8c5 8214 	str.w	r8, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 800745c:	f8c5 8218 	str.w	r8, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007460:	7c26      	ldrb	r6, [r4, #16]
 8007462:	b99e      	cbnz	r6, 800748c <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007468:	4639      	mov	r1, r7
 800746a:	4620      	mov	r0, r4
 800746c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007470:	f002 fa9c 	bl	80099ac <USBD_LL_PrepareReceive>
}
 8007474:	4630      	mov	r0, r6
 8007476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800747a:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800747c:	2340      	movs	r3, #64	; 0x40
 800747e:	2202      	movs	r2, #2
 8007480:	2181      	movs	r1, #129	; 0x81
 8007482:	f002 fa2b 	bl	80098dc <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007486:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007488:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800748a:	e7c8      	b.n	800741e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800748c:	2340      	movs	r3, #64	; 0x40
 800748e:	4639      	mov	r1, r7
 8007490:	4620      	mov	r0, r4
 8007492:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8007496:	f002 fa89 	bl	80099ac <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800749a:	4646      	mov	r6, r8
 800749c:	e7ea      	b.n	8007474 <USBD_CDC_Init+0x74>
    ret = 1U;
 800749e:	463e      	mov	r6, r7
 80074a0:	e7e8      	b.n	8007474 <USBD_CDC_Init+0x74>

080074a2 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80074a2:	b119      	cbz	r1, 80074ac <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80074a4:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80074ac:	2002      	movs	r0, #2
  }

  return ret;
}
 80074ae:	4770      	bx	lr

080074b0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074b0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80074b4:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80074b6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074ba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80074be:	4770      	bx	lr

080074c0 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80074c0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80074c4:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80074c6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 80074ca:	4770      	bx	lr

080074cc <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074cc:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 80074d0:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 80074d2:	b182      	cbz	r2, 80074f6 <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 80074d4:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 80074d8:	2301      	movs	r3, #1
 80074da:	b974      	cbnz	r4, 80074fa <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80074dc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074e0:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80074e4:	2181      	movs	r1, #129	; 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80074e6:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80074e8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	f002 fa4f 	bl	8009990 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80074f2:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80074f4:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80074f6:	2002      	movs	r0, #2
 80074f8:	e7fc      	b.n	80074f4 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80074fa:	4618      	mov	r0, r3
 80074fc:	e7fa      	b.n	80074f4 <USBD_CDC_TransmitPacket+0x28>

080074fe <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074fe:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8007502:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007504:	b182      	cbz	r2, 8007528 <USBD_CDC_ReceivePacket+0x2a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	7c04      	ldrb	r4, [r0, #16]
 8007508:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800750c:	b934      	cbnz	r4, 800751c <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800750e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007512:	2101      	movs	r1, #1
 8007514:	f002 fa4a 	bl	80099ac <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8007518:	4620      	mov	r0, r4
 800751a:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800751c:	2340      	movs	r3, #64	; 0x40
 800751e:	2101      	movs	r1, #1
 8007520:	f002 fa44 	bl	80099ac <USBD_LL_PrepareReceive>
    return USBD_OK;
 8007524:	2400      	movs	r4, #0
 8007526:	e7f7      	b.n	8007518 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8007528:	2402      	movs	r4, #2
 800752a:	e7f5      	b.n	8007518 <USBD_CDC_ReceivePacket+0x1a>

0800752c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800752c:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800752e:	b180      	cbz	r0, 8007552 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007530:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007534:	b113      	cbz	r3, 800753c <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007536:	2300      	movs	r3, #0
 8007538:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800753c:	b109      	cbz	r1, 8007542 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800753e:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007542:	2301      	movs	r3, #1
  pdev->id = id;
 8007544:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007546:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800754a:	f002 f977 	bl	800983c <USBD_LL_Init>

  return USBD_OK;
 800754e:	2000      	movs	r0, #0
}
 8007550:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007552:	2002      	movs	r0, #2
 8007554:	e7fc      	b.n	8007550 <USBD_Init+0x24>

08007556 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007556:	b119      	cbz	r1, 8007560 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007558:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 800755c:	2000      	movs	r0, #0
 800755e:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007560:	2002      	movs	r0, #2
  }

  return status;
}
 8007562:	4770      	bx	lr

08007564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007564:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007566:	f002 f9ab 	bl	80098c0 <USBD_LL_Start>

  return USBD_OK;
}
 800756a:	2000      	movs	r0, #0
 800756c:	bd08      	pop	{r3, pc}

0800756e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800756e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8007570:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007574:	b90b      	cbnz	r3, 800757a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007576:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007578:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4798      	blx	r3
 800757e:	2800      	cmp	r0, #0
 8007580:	d0fa      	beq.n	8007578 <USBD_SetClassConfig+0xa>
 8007582:	e7f8      	b.n	8007576 <USBD_SetClassConfig+0x8>

08007584 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007584:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007586:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4798      	blx	r3

  return USBD_OK;
}
 800758e:	2000      	movs	r0, #0
 8007590:	bd08      	pop	{r3, pc}

08007592 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007592:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007594:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8007598:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800759a:	4628      	mov	r0, r5
 800759c:	f000 fae8 	bl	8007b70 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075a0:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 80075a2:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 80075a6:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 80075aa:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 80075ae:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 80075b2:	f001 031f 	and.w	r3, r1, #31
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d008      	beq.n	80075cc <USBD_LL_SetupStage+0x3a>
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d00b      	beq.n	80075d6 <USBD_LL_SetupStage+0x44>
 80075be:	b97b      	cbnz	r3, 80075e0 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80075c0:	4629      	mov	r1, r5
 80075c2:	4620      	mov	r0, r4
 80075c4:	f000 f8fc 	bl	80077c0 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80075c8:	2000      	movs	r0, #0
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80075cc:	4629      	mov	r1, r5
 80075ce:	4620      	mov	r0, r4
 80075d0:	f000 fa20 	bl	8007a14 <USBD_StdItfReq>
      break;
 80075d4:	e7f8      	b.n	80075c8 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 80075d6:	4629      	mov	r1, r5
 80075d8:	4620      	mov	r0, r4
 80075da:	f000 fa3f 	bl	8007a5c <USBD_StdEPReq>
      break;
 80075de:	e7f3      	b.n	80075c8 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80075e6:	f002 f997 	bl	8009918 <USBD_LL_StallEP>
      break;
 80075ea:	e7ed      	b.n	80075c8 <USBD_LL_SetupStage+0x36>

080075ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075f2:	460d      	mov	r5, r1
 80075f4:	bb39      	cbnz	r1, 8007646 <USBD_LL_DataOutStage+0x5a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075f6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80075fa:	2b03      	cmp	r3, #3
 80075fc:	d11c      	bne.n	8007638 <USBD_LL_DataOutStage+0x4c>
    {
      if (pep->rem_length > pep->maxpacket)
 80075fe:	e9d0 1258 	ldrd	r1, r2, [r0, #352]	; 0x160
 8007602:	4291      	cmp	r1, r2
 8007604:	d90b      	bls.n	800761e <USBD_LL_DataOutStage+0x32>
      {
        pep->rem_length -= pep->maxpacket;
 8007606:	1a89      	subs	r1, r1, r2

        USBD_CtlContinueRx(pdev, pdata,
 8007608:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 800760a:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 800760e:	bf8c      	ite	hi
 8007610:	b28a      	uxthhi	r2, r1
 8007612:	b292      	uxthls	r2, r2
 8007614:	4631      	mov	r1, r6
 8007616:	f000 fb08 	bl	8007c2a <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800761a:	4628      	mov	r0, r5
 800761c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800761e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	b123      	cbz	r3, 8007630 <USBD_LL_DataOutStage+0x44>
 8007626:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800762a:	2a03      	cmp	r2, #3
 800762c:	d100      	bne.n	8007630 <USBD_LL_DataOutStage+0x44>
          pdev->pClass->EP0_RxReady(pdev);
 800762e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fb02 	bl	8007c3a <USBD_CtlSendStatus>
 8007636:	e7f0      	b.n	800761a <USBD_LL_DataOutStage+0x2e>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007638:	2b05      	cmp	r3, #5
 800763a:	d1ee      	bne.n	800761a <USBD_LL_DataOutStage+0x2e>
        pdev->ep0_state = USBD_EP0_IDLE;
 800763c:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007640:	f002 f96a 	bl	8009918 <USBD_LL_StallEP>
 8007644:	e7e9      	b.n	800761a <USBD_LL_DataOutStage+0x2e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8007646:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	b133      	cbz	r3, 800765c <USBD_LL_DataOutStage+0x70>
 800764e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007652:	2a03      	cmp	r2, #3
 8007654:	d102      	bne.n	800765c <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8007656:	4798      	blx	r3
  return USBD_OK;
 8007658:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 800765a:	e7de      	b.n	800761a <USBD_LL_DataOutStage+0x2e>
    return USBD_FAIL;
 800765c:	2502      	movs	r5, #2
 800765e:	e7dc      	b.n	800761a <USBD_LL_DataOutStage+0x2e>

08007660 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4604      	mov	r4, r0
 8007664:	4617      	mov	r7, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007666:	460d      	mov	r5, r1
 8007668:	2900      	cmp	r1, #0
 800766a:	d147      	bne.n	80076fc <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800766c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007670:	2b02      	cmp	r3, #2
 8007672:	d13c      	bne.n	80076ee <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007674:	e9d0 6308 	ldrd	r6, r3, [r0, #32]
 8007678:	429e      	cmp	r6, r3
 800767a:	d914      	bls.n	80076a6 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800767c:	1af3      	subs	r3, r6, r3

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800767e:	4639      	mov	r1, r7
        pep->rem_length -= pep->maxpacket;
 8007680:	6203      	str	r3, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007682:	b29a      	uxth	r2, r3
 8007684:	f000 fabc 	bl	8007c00 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007688:	462b      	mov	r3, r5
 800768a:	462a      	mov	r2, r5
 800768c:	4629      	mov	r1, r5
 800768e:	4620      	mov	r0, r4
 8007690:	f002 f98c 	bl	80099ac <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007694:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80076a2:	4628      	mov	r0, r5
 80076a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80076a6:	69c2      	ldr	r2, [r0, #28]
 80076a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80076ac:	fb03 2616 	mls	r6, r3, r6, r2
 80076b0:	b95e      	cbnz	r6, 80076ca <USBD_LL_DataInStage+0x6a>
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d809      	bhi.n	80076ca <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 80076b6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d205      	bcs.n	80076ca <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076be:	460a      	mov	r2, r1
 80076c0:	f000 fa9e 	bl	8007c00 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076c4:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 80076c8:	e7de      	b.n	8007688 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076ca:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	b12b      	cbz	r3, 80076de <USBD_LL_DataInStage+0x7e>
 80076d2:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 80076d6:	2a03      	cmp	r2, #3
 80076d8:	d101      	bne.n	80076de <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 80076da:	4620      	mov	r0, r4
 80076dc:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	4620      	mov	r0, r4
 80076e2:	f002 f919 	bl	8009918 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 fab2 	bl	8007c50 <USBD_CtlReceiveStatus>
 80076ec:	e7d2      	b.n	8007694 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076ee:	f033 0304 	bics.w	r3, r3, #4
 80076f2:	d1cf      	bne.n	8007694 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	f002 f90f 	bl	8009918 <USBD_LL_StallEP>
 80076fa:	e7cb      	b.n	8007694 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80076fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	b133      	cbz	r3, 8007712 <USBD_LL_DataInStage+0xb2>
 8007704:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007708:	2a03      	cmp	r2, #3
 800770a:	d102      	bne.n	8007712 <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 800770c:	4798      	blx	r3
  return USBD_OK;
 800770e:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8007710:	e7c7      	b.n	80076a2 <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8007712:	2502      	movs	r5, #2
 8007714:	e7c5      	b.n	80076a2 <USBD_LL_DataInStage+0x42>

08007716 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007716:	2200      	movs	r2, #0
{
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800771c:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800771e:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007720:	4611      	mov	r1, r2
 8007722:	2340      	movs	r3, #64	; 0x40
 8007724:	f002 f8da 	bl	80098dc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007728:	4633      	mov	r3, r6
 800772a:	2180      	movs	r1, #128	; 0x80
 800772c:	2200      	movs	r2, #0
 800772e:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007730:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007734:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007738:	f002 f8d0 	bl	80098dc <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 800773c:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 800773e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007742:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007744:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007746:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800774a:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 800774e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007750:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8007754:	b123      	cbz	r3, 8007760 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007756:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 800775a:	4620      	mov	r0, r4
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007760:	2000      	movs	r0, #0
 8007762:	bd70      	pop	{r4, r5, r6, pc}

08007764 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007764:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007766:	2000      	movs	r0, #0
 8007768:	4770      	bx	lr

0800776a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800776a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800776e:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007772:	2304      	movs	r3, #4
 8007774:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8007778:	2000      	movs	r0, #0
 800777a:	4770      	bx	lr

0800777c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800777c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007780:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007782:	bf04      	itt	eq
 8007784:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8007788:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800778c:	2000      	movs	r0, #0
 800778e:	4770      	bx	lr

08007790 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007790:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007796:	2a03      	cmp	r2, #3
 8007798:	d104      	bne.n	80077a4 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 800779a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800779e:	69db      	ldr	r3, [r3, #28]
 80077a0:	b103      	cbz	r3, 80077a4 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80077a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80077a4:	2000      	movs	r0, #0
 80077a6:	bd08      	pop	{r3, pc}

080077a8 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80077a8:	b510      	push	{r4, lr}
 80077aa:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80077ac:	2180      	movs	r1, #128	; 0x80
 80077ae:	f002 f8b3 	bl	8009918 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80077b2:	4620      	mov	r0, r4
}
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80077b8:	2100      	movs	r1, #0
 80077ba:	f002 b8ad 	b.w	8009918 <USBD_LL_StallEP>
	...

080077c0 <USBD_StdDevReq>:
{
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	780b      	ldrb	r3, [r1, #0]
 80077c4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ca:	2b20      	cmp	r3, #32
{
 80077cc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ce:	d012      	beq.n	80077f6 <USBD_StdDevReq+0x36>
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d010      	beq.n	80077f6 <USBD_StdDevReq+0x36>
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d151      	bne.n	800787c <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 80077d8:	784b      	ldrb	r3, [r1, #1]
 80077da:	2b09      	cmp	r3, #9
 80077dc:	d84e      	bhi.n	800787c <USBD_StdDevReq+0xbc>
 80077de:	e8df f013 	tbh	[pc, r3, lsl #1]
 80077e2:	00ee      	.short	0x00ee
 80077e4:	004d010a 	.word	0x004d010a
 80077e8:	004d0103 	.word	0x004d0103
 80077ec:	00130087 	.word	0x00130087
 80077f0:	00d6004d 	.word	0x00d6004d
 80077f4:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 80077f6:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80077fa:	4629      	mov	r1, r5
 80077fc:	4620      	mov	r0, r4
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	4798      	blx	r3
}
 8007802:	2000      	movs	r0, #0
 8007804:	b003      	add	sp, #12
 8007806:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8007808:	2300      	movs	r3, #0
 800780a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800780e:	884b      	ldrh	r3, [r1, #2]
 8007810:	0a1a      	lsrs	r2, r3, #8
 8007812:	3a01      	subs	r2, #1
 8007814:	2a06      	cmp	r2, #6
 8007816:	d831      	bhi.n	800787c <USBD_StdDevReq+0xbc>
 8007818:	e8df f002 	tbb	[pc, r2]
 800781c:	30231604 	.word	0x30231604
 8007820:	4830      	.short	0x4830
 8007822:	52          	.byte	0x52
 8007823:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007824:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007828:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800782a:	7c20      	ldrb	r0, [r4, #16]
 800782c:	f10d 0106 	add.w	r1, sp, #6
 8007830:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007832:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007836:	2a00      	cmp	r2, #0
 8007838:	d056      	beq.n	80078e8 <USBD_StdDevReq+0x128>
 800783a:	88eb      	ldrh	r3, [r5, #6]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d14a      	bne.n	80078d6 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 8007840:	4620      	mov	r0, r4
 8007842:	f000 f9fa 	bl	8007c3a <USBD_CtlSendStatus>
 8007846:	e7dc      	b.n	8007802 <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007848:	7c02      	ldrb	r2, [r0, #16]
 800784a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800784e:	b932      	cbnz	r2, 800785e <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007852:	f10d 0006 	add.w	r0, sp, #6
 8007856:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007858:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800785a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800785c:	e7e9      	b.n	8007832 <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	e7f7      	b.n	8007852 <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b05      	cmp	r3, #5
 8007866:	d809      	bhi.n	800787c <USBD_StdDevReq+0xbc>
 8007868:	e8df f003 	tbb	[pc, r3]
 800786c:	14100c03 	.word	0x14100c03
 8007870:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007872:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007876:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1d6      	bne.n	800782a <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff ff93 	bl	80077a8 <USBD_CtlError.constprop.0>
        break;
 8007882:	e7be      	b.n	8007802 <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007884:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	e7f5      	b.n	8007878 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800788c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	e7f1      	b.n	8007878 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007894:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	e7ed      	b.n	8007878 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800789c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	e7e9      	b.n	8007878 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078a4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	e7e5      	b.n	8007878 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ac:	7c03      	ldrb	r3, [r0, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1e4      	bne.n	800787c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80078b2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078b6:	f10d 0006 	add.w	r0, sp, #6
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	4798      	blx	r3
  if (err != 0U)
 80078be:	e7b8      	b.n	8007832 <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078c0:	7c03      	ldrb	r3, [r0, #16]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1da      	bne.n	800787c <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078c6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80078ca:	f10d 0006 	add.w	r0, sp, #6
 80078ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078d2:	2307      	movs	r3, #7
 80078d4:	e7c1      	b.n	800785a <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 80078d6:	429a      	cmp	r2, r3
 80078d8:	bf28      	it	cs
 80078da:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078dc:	4601      	mov	r1, r0
 80078de:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 80078e0:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078e4:	f000 f97f 	bl	8007be6 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80078e8:	88eb      	ldrh	r3, [r5, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d189      	bne.n	8007802 <USBD_StdDevReq+0x42>
 80078ee:	e7a7      	b.n	8007840 <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078f0:	888b      	ldrh	r3, [r1, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1c2      	bne.n	800787c <USBD_StdDevReq+0xbc>
 80078f6:	88cb      	ldrh	r3, [r1, #6]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1bf      	bne.n	800787c <USBD_StdDevReq+0xbc>
 80078fc:	884d      	ldrh	r5, [r1, #2]
 80078fe:	2d7f      	cmp	r5, #127	; 0x7f
 8007900:	d8bc      	bhi.n	800787c <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007902:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007906:	2b03      	cmp	r3, #3
 8007908:	d0b8      	beq.n	800787c <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800790a:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 800790c:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007910:	f002 f830 	bl	8009974 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007914:	4620      	mov	r0, r4
 8007916:	f000 f990 	bl	8007c3a <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800791a:	b11d      	cbz	r5, 8007924 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800791c:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800791e:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8007922:	e76e      	b.n	8007802 <USBD_StdDevReq+0x42>
 8007924:	2301      	movs	r3, #1
 8007926:	e7fa      	b.n	800791e <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8007928:	7889      	ldrb	r1, [r1, #2]
 800792a:	4d39      	ldr	r5, [pc, #228]	; (8007a10 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800792c:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800792e:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007930:	d8a4      	bhi.n	800787c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007932:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007936:	2b02      	cmp	r3, #2
 8007938:	d008      	beq.n	800794c <USBD_StdDevReq+0x18c>
 800793a:	2b03      	cmp	r3, #3
 800793c:	d015      	beq.n	800796a <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800793e:	f7ff ff33 	bl	80077a8 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007942:	4620      	mov	r0, r4
 8007944:	7829      	ldrb	r1, [r5, #0]
 8007946:	f7ff fe1d 	bl	8007584 <USBD_ClrClassConfig>
        break;
 800794a:	e75a      	b.n	8007802 <USBD_StdDevReq+0x42>
        if (cfgidx)
 800794c:	2900      	cmp	r1, #0
 800794e:	f43f af77 	beq.w	8007840 <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 8007952:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007954:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007956:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007958:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800795c:	4620      	mov	r0, r4
 800795e:	f7ff fe06 	bl	800756e <USBD_SetClassConfig>
 8007962:	2802      	cmp	r0, #2
 8007964:	f47f af6c 	bne.w	8007840 <USBD_StdDevReq+0x80>
 8007968:	e788      	b.n	800787c <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 800796a:	b931      	cbnz	r1, 800797a <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800796c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 800796e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007970:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007974:	f7ff fe06 	bl	8007584 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007978:	e762      	b.n	8007840 <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 800797a:	6841      	ldr	r1, [r0, #4]
 800797c:	2901      	cmp	r1, #1
 800797e:	f43f af5f 	beq.w	8007840 <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007982:	b2c9      	uxtb	r1, r1
 8007984:	f7ff fdfe 	bl	8007584 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007988:	7829      	ldrb	r1, [r5, #0]
 800798a:	6061      	str	r1, [r4, #4]
 800798c:	e7e6      	b.n	800795c <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 800798e:	88ca      	ldrh	r2, [r1, #6]
 8007990:	2a01      	cmp	r2, #1
 8007992:	f47f af73 	bne.w	800787c <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 8007996:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800799a:	2b02      	cmp	r3, #2
 800799c:	d80a      	bhi.n	80079b4 <USBD_StdDevReq+0x1f4>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f43f af6c 	beq.w	800787c <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 80079a4:	4601      	mov	r1, r0
 80079a6:	2300      	movs	r3, #0
 80079a8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f91a 	bl	8007be6 <USBD_CtlSendData>
      break;
 80079b2:	e726      	b.n	8007802 <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	f47f af61 	bne.w	800787c <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80079ba:	1d01      	adds	r1, r0, #4
 80079bc:	e7f6      	b.n	80079ac <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 80079be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80079c2:	3b01      	subs	r3, #1
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	f63f af59 	bhi.w	800787c <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 80079ca:	88cb      	ldrh	r3, [r1, #6]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	f47f af55 	bne.w	800787c <USBD_StdDevReq+0xbc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079d2:	2301      	movs	r3, #1
 80079d4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 80079d6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80079da:	b10b      	cbz	r3, 80079e0 <USBD_StdDevReq+0x220>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079dc:	2303      	movs	r3, #3
 80079de:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079e0:	2202      	movs	r2, #2
 80079e2:	f104 010c 	add.w	r1, r4, #12
 80079e6:	e7e1      	b.n	80079ac <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079e8:	884b      	ldrh	r3, [r1, #2]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	f47f af09 	bne.w	8007802 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80079f0:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 80079f4:	e724      	b.n	8007840 <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 80079f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	f63f af3d 	bhi.w	800787c <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a02:	884b      	ldrh	r3, [r1, #2]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	f47f aefc 	bne.w	8007802 <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e7f0      	b.n	80079f0 <USBD_StdDevReq+0x230>
 8007a0e:	bf00      	nop
 8007a10:	20000e2f 	.word	0x20000e2f

08007a14 <USBD_StdItfReq>:
{
 8007a14:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a16:	780b      	ldrb	r3, [r1, #0]
{
 8007a18:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a1a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8007a1e:	2a40      	cmp	r2, #64	; 0x40
{
 8007a20:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a22:	d001      	beq.n	8007a28 <USBD_StdItfReq+0x14>
 8007a24:	065b      	lsls	r3, r3, #25
 8007a26:	d415      	bmi.n	8007a54 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8007a28:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d810      	bhi.n	8007a54 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a32:	792b      	ldrb	r3, [r5, #4]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d80d      	bhi.n	8007a54 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a38:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	4620      	mov	r0, r4
 8007a42:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a44:	88eb      	ldrh	r3, [r5, #6]
 8007a46:	b91b      	cbnz	r3, 8007a50 <USBD_StdItfReq+0x3c>
 8007a48:	b910      	cbnz	r0, 8007a50 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 f8f5 	bl	8007c3a <USBD_CtlSendStatus>
}
 8007a50:	2000      	movs	r0, #0
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007a54:	4620      	mov	r0, r4
 8007a56:	f7ff fea7 	bl	80077a8 <USBD_CtlError.constprop.0>
          break;
 8007a5a:	e7f9      	b.n	8007a50 <USBD_StdItfReq+0x3c>

08007a5c <USBD_StdEPReq>:
{
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	780a      	ldrb	r2, [r1, #0]
 8007a60:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a62:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8007a66:	2a20      	cmp	r2, #32
{
 8007a68:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a6a:	d027      	beq.n	8007abc <USBD_StdEPReq+0x60>
 8007a6c:	2a40      	cmp	r2, #64	; 0x40
 8007a6e:	d025      	beq.n	8007abc <USBD_StdEPReq+0x60>
 8007a70:	bb92      	cbnz	r2, 8007ad8 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 8007a72:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007a74:	888d      	ldrh	r5, [r1, #4]
 8007a76:	2a01      	cmp	r2, #1
 8007a78:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8007a7a:	d03d      	beq.n	8007af8 <USBD_StdEPReq+0x9c>
 8007a7c:	2a03      	cmp	r2, #3
 8007a7e:	d025      	beq.n	8007acc <USBD_StdEPReq+0x70>
 8007a80:	bb52      	cbnz	r2, 8007ad8 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 8007a82:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d04d      	beq.n	8007b26 <USBD_StdEPReq+0xca>
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d124      	bne.n	8007ad8 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 8007a8e:	2214      	movs	r2, #20
 8007a90:	f001 030f 	and.w	r3, r1, #15
 8007a94:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a98:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8007a9c:	d054      	beq.n	8007b48 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	b1d3      	cbz	r3, 8007ad8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007aa2:	2314      	movs	r3, #20
 8007aa4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8007aa8:	fb05 3303 	mla	r3, r5, r3, r3
 8007aac:	18c5      	adds	r5, r0, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aae:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8007ab2:	d155      	bne.n	8007b60 <USBD_StdEPReq+0x104>
                pep->status = 0x0001U;
 8007ab4:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	4629      	mov	r1, r5
 8007aba:	e041      	b.n	8007b40 <USBD_StdEPReq+0xe4>
      pdev->pClass->Setup(pdev, req);
 8007abc:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	6892      	ldr	r2, [r2, #8]
 8007ac6:	4790      	blx	r2
}
 8007ac8:	2000      	movs	r0, #0
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8007acc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007ad0:	2a02      	cmp	r2, #2
 8007ad2:	d01f      	beq.n	8007b14 <USBD_StdEPReq+0xb8>
 8007ad4:	2a03      	cmp	r2, #3
 8007ad6:	d003      	beq.n	8007ae0 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f7ff fe65 	bl	80077a8 <USBD_CtlError.constprop.0>
              break;
 8007ade:	e7f3      	b.n	8007ac8 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ae0:	885a      	ldrh	r2, [r3, #2]
 8007ae2:	b92a      	cbnz	r2, 8007af0 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 8007ae4:	064a      	lsls	r2, r1, #25
 8007ae6:	d003      	beq.n	8007af0 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	b90b      	cbnz	r3, 8007af0 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007aec:	f001 ff14 	bl	8009918 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 f8a2 	bl	8007c3a <USBD_CtlSendStatus>
              break;
 8007af6:	e7e7      	b.n	8007ac8 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8007af8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8007afc:	2a02      	cmp	r2, #2
 8007afe:	d009      	beq.n	8007b14 <USBD_StdEPReq+0xb8>
 8007b00:	2a03      	cmp	r2, #3
 8007b02:	d1e9      	bne.n	8007ad8 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b04:	885b      	ldrh	r3, [r3, #2]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1de      	bne.n	8007ac8 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b0a:	064d      	lsls	r5, r1, #25
 8007b0c:	d0f0      	beq.n	8007af0 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b0e:	f001 ff11 	bl	8009934 <USBD_LL_ClearStallEP>
 8007b12:	e7ed      	b.n	8007af0 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b14:	064b      	lsls	r3, r1, #25
 8007b16:	d0df      	beq.n	8007ad8 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8007b18:	f001 fefe 	bl	8009918 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b1c:	2180      	movs	r1, #128	; 0x80
 8007b1e:	4620      	mov	r0, r4
 8007b20:	f001 fefa 	bl	8009918 <USBD_LL_StallEP>
 8007b24:	e7d0      	b.n	8007ac8 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b26:	064a      	lsls	r2, r1, #25
 8007b28:	d1d6      	bne.n	8007ad8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2a:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8007b2c:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b30:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b34:	bf4c      	ite	mi
 8007b36:	f100 0114 	addmi.w	r1, r0, #20
 8007b3a:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8007b3e:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b40:	4620      	mov	r0, r4
 8007b42:	f000 f850 	bl	8007be6 <USBD_CtlSendData>
              break;
 8007b46:	e7bf      	b.n	8007ac8 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b48:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c3      	beq.n	8007ad8 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b50:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b52:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b56:	fb03 0505 	mla	r5, r3, r5, r0
 8007b5a:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8007b5e:	e7a6      	b.n	8007aae <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b60:	4620      	mov	r0, r4
 8007b62:	f001 fef5 	bl	8009950 <USBD_LL_IsStallEP>
 8007b66:	b108      	cbz	r0, 8007b6c <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e7a3      	b.n	8007ab4 <USBD_StdEPReq+0x58>
                pep->status = 0x0000U;
 8007b6c:	6028      	str	r0, [r5, #0]
 8007b6e:	e7a2      	b.n	8007ab6 <USBD_StdEPReq+0x5a>

08007b70 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007b70:	780b      	ldrb	r3, [r1, #0]
 8007b72:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007b74:	784b      	ldrb	r3, [r1, #1]
 8007b76:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007b78:	78ca      	ldrb	r2, [r1, #3]
 8007b7a:	788b      	ldrb	r3, [r1, #2]
 8007b7c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007b80:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007b82:	794a      	ldrb	r2, [r1, #5]
 8007b84:	790b      	ldrb	r3, [r1, #4]
 8007b86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007b8a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007b8c:	79ca      	ldrb	r2, [r1, #7]
 8007b8e:	798b      	ldrb	r3, [r1, #6]
 8007b90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007b94:	80c3      	strh	r3, [r0, #6]
}
 8007b96:	4770      	bx	lr

08007b98 <USBD_CtlError>:
{
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007b9c:	2180      	movs	r1, #128	; 0x80
 8007b9e:	f001 febb 	bl	8009918 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007ba2:	4620      	mov	r0, r4
}
 8007ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f001 beb5 	b.w	8009918 <USBD_LL_StallEP>

08007bae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007bae:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8007bb0:	b188      	cbz	r0, 8007bd6 <USBD_GetString+0x28>
 8007bb2:	2500      	movs	r5, #0
 8007bb4:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	3501      	adds	r5, #1
 8007bba:	5d44      	ldrb	r4, [r0, r5]
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d1fa      	bne.n	8007bb6 <USBD_GetString+0x8>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007bc8:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	704b      	strb	r3, [r1, #1]
 8007bce:	2302      	movs	r3, #2
    while (*desc != '\0')
 8007bd0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007bd4:	b905      	cbnz	r5, 8007bd8 <USBD_GetString+0x2a>
}
 8007bd6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8007bd8:	1c5a      	adds	r2, r3, #1
 8007bda:	54cd      	strb	r5, [r1, r3]
 8007bdc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8007bde:	3302      	adds	r3, #2
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	548c      	strb	r4, [r1, r2]
 8007be4:	e7f4      	b.n	8007bd0 <USBD_GetString+0x22>

08007be6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007be6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007be8:	2202      	movs	r2, #2
{
 8007bea:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007bec:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bf0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf4:	460a      	mov	r2, r1
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	f001 feca 	bl	8009990 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	bd10      	pop	{r4, pc}

08007c00 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c00:	b508      	push	{r3, lr}
 8007c02:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c04:	460a      	mov	r2, r1
 8007c06:	2100      	movs	r1, #0
 8007c08:	f001 fec2 	bl	8009990 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	bd08      	pop	{r3, pc}

08007c10 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007c10:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c12:	2203      	movs	r2, #3
{
 8007c14:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8007c16:	e9c0 3357 	strd	r3, r3, [r0, #348]	; 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c1a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c1e:	460a      	mov	r2, r1
 8007c20:	2100      	movs	r1, #0
 8007c22:	f001 fec3 	bl	80099ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c26:	2000      	movs	r0, #0
 8007c28:	bd10      	pop	{r4, pc}

08007c2a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c2a:	b508      	push	{r3, lr}
 8007c2c:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c2e:	460a      	mov	r2, r1
 8007c30:	2100      	movs	r1, #0
 8007c32:	f001 febb 	bl	80099ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c36:	2000      	movs	r0, #0
 8007c38:	bd08      	pop	{r3, pc}

08007c3a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c3a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c42:	2300      	movs	r3, #0
 8007c44:	461a      	mov	r2, r3
 8007c46:	4619      	mov	r1, r3
 8007c48:	f001 fea2 	bl	8009990 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	bd08      	pop	{r3, pc}

08007c50 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c50:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c52:	2305      	movs	r3, #5
 8007c54:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	f001 fea5 	bl	80099ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007c62:	2000      	movs	r0, #0
 8007c64:	bd08      	pop	{r3, pc}

08007c66 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c66:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8007c68:	f000 fd8c 	bl	8008784 <vTaskStartScheduler>
  
  return osOK;
}
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	bd08      	pop	{r3, pc}

08007c70 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c74:	6946      	ldr	r6, [r0, #20]
{
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9d0 1000 	ldrd	r1, r0, [r0]
 8007c7c:	692a      	ldr	r2, [r5, #16]
 8007c7e:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
 8007c82:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007c84:	b176      	cbz	r6, 8007ca4 <osThreadCreate+0x34>
 8007c86:	69ad      	ldr	r5, [r5, #24]
 8007c88:	b165      	cbz	r5, 8007ca4 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8007c8a:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c8c:	bf0c      	ite	eq
 8007c8e:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007c90:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c92:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8007c96:	9400      	str	r4, [sp, #0]
 8007c98:	f000 fd10 	bl	80086bc <xTaskCreateStatic>
 8007c9c:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c9e:	9805      	ldr	r0, [sp, #20]
}
 8007ca0:	b006      	add	sp, #24
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8007ca4:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8007caa:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cac:	ad05      	add	r5, sp, #20
 8007cae:	e9cd 4500 	strd	r4, r5, [sp]
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	f000 fd39 	bl	800872a <xTaskCreate>
 8007cb8:	2801      	cmp	r0, #1
 8007cba:	d0f0      	beq.n	8007c9e <osThreadCreate+0x2e>
      return NULL;
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e7ef      	b.n	8007ca0 <osThreadCreate+0x30>

08007cc0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cc0:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cc2:	2801      	cmp	r0, #1
 8007cc4:	bf38      	it	cc
 8007cc6:	2001      	movcc	r0, #1
 8007cc8:	f000 feb6 	bl	8008a38 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ccc:	2000      	movs	r0, #0
 8007cce:	bd08      	pop	{r3, pc}

08007cd0 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007cd0:	b513      	push	{r0, r1, r4, lr}
 8007cd2:	c811      	ldmia	r0, {r0, r4}
 8007cd4:	3901      	subs	r1, #1
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	424a      	negs	r2, r1
 8007cda:	414a      	adcs	r2, r1
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007cdc:	b13c      	cbz	r4, 8007cee <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8007cde:	e9cd 0400 	strd	r0, r4, [sp]
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4805      	ldr	r0, [pc, #20]	; (8007cfc <osTimerCreate+0x2c>)
 8007ce6:	f001 f88a 	bl	8008dfe <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8007cea:	b002      	add	sp, #8
 8007cec:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8007cee:	9000      	str	r0, [sp, #0]
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	4802      	ldr	r0, [pc, #8]	; (8007cfc <osTimerCreate+0x2c>)
 8007cf4:	f001 f85c 	bl	8008db0 <xTimerCreate>
 8007cf8:	e7f7      	b.n	8007cea <osTimerCreate+0x1a>
 8007cfa:	bf00      	nop
 8007cfc:	0800c953 	.word	0x0800c953

08007d00 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8007d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8007d02:	2400      	movs	r4, #0
 8007d04:	2901      	cmp	r1, #1
 8007d06:	460a      	mov	r2, r1
 8007d08:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8007d0a:	bf38      	it	cc
 8007d0c:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d0e:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8007d12:	b1a3      	cbz	r3, 8007d3e <osTimerStart+0x3e>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007d14:	2109      	movs	r1, #9
 8007d16:	9400      	str	r4, [sp, #0]
 8007d18:	ab03      	add	r3, sp, #12
 8007d1a:	f001 f8ad 	bl	8008e78 <xTimerGenericCommand>
 8007d1e:	2801      	cmp	r0, #1
 8007d20:	d113      	bne.n	8007d4a <osTimerStart+0x4a>
    {
      result = osErrorOS;
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007d22:	9b03      	ldr	r3, [sp, #12]
 8007d24:	b913      	cbnz	r3, 8007d2c <osTimerStart+0x2c>
  osStatus result = osOK;
 8007d26:	2000      	movs	r0, #0

#else 
  result = osErrorOS;
#endif
  return result;
}
 8007d28:	b004      	add	sp, #16
 8007d2a:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8007d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d30:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <osTimerStart+0x50>)
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	e7f3      	b.n	8007d26 <osTimerStart+0x26>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007d3e:	2104      	movs	r1, #4
 8007d40:	9300      	str	r3, [sp, #0]
 8007d42:	f001 f899 	bl	8008e78 <xTimerGenericCommand>
 8007d46:	2801      	cmp	r0, #1
 8007d48:	d0ed      	beq.n	8007d26 <osTimerStart+0x26>
      result = osErrorOS;
 8007d4a:	20ff      	movs	r0, #255	; 0xff
  return result;
 8007d4c:	e7ec      	b.n	8007d28 <osTimerStart+0x28>
 8007d4e:	bf00      	nop
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d54:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d58:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d60:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d62:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d68:	4770      	bx	lr

08007d6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d6e:	4770      	bx	lr

08007d70 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d70:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d72:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8007d74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d76:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d7c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007d7e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d80:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007d82:	3301      	adds	r3, #1
 8007d84:	6003      	str	r3, [r0, #0]
}
 8007d86:	4770      	bx	lr

08007d88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d88:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d8a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d8c:	1c63      	adds	r3, r4, #1
 8007d8e:	d10a      	bne.n	8007da6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d90:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d92:	685a      	ldr	r2, [r3, #4]
 8007d94:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d96:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d98:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d9a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8007d9c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d9e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007da0:	3301      	adds	r3, #1
 8007da2:	6003      	str	r3, [r0, #0]
}
 8007da4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007da6:	f100 0208 	add.w	r2, r0, #8
 8007daa:	4613      	mov	r3, r2
 8007dac:	6852      	ldr	r2, [r2, #4]
 8007dae:	6815      	ldr	r5, [r2, #0]
 8007db0:	42a5      	cmp	r5, r4
 8007db2:	d9fa      	bls.n	8007daa <vListInsert+0x22>
 8007db4:	e7ed      	b.n	8007d92 <vListInsert+0xa>

08007db6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007db6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007db8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8007dbc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dbe:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dc0:	6859      	ldr	r1, [r3, #4]
 8007dc2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007dc4:	bf08      	it	eq
 8007dc6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007dc8:	2200      	movs	r2, #0
 8007dca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007dd2:	6818      	ldr	r0, [r3, #0]
}
 8007dd4:	4770      	bx	lr

08007dd6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dda:	f001 f9fb 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dde:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8007de0:	f001 fa1a 	bl	8009218 <vPortExitCritical>

	return xReturn;
}
 8007de4:	fab4 f084 	clz	r0, r4
 8007de8:	0940      	lsrs	r0, r0, #5
 8007dea:	bd10      	pop	{r4, pc}

08007dec <prvCopyDataToQueue>:
{
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007df0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8007df2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007df6:	b162      	cbz	r2, 8007e12 <prvCopyDataToQueue+0x26>
	else if( xPosition == queueSEND_TO_BACK )
 8007df8:	b97e      	cbnz	r6, 8007e1a <prvCopyDataToQueue+0x2e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007dfa:	6880      	ldr	r0, [r0, #8]
 8007dfc:	f001 fe18 	bl	8009a30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007e00:	68a3      	ldr	r3, [r4, #8]
 8007e02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e04:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e06:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007e08:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d301      	bcc.n	8007e12 <prvCopyDataToQueue+0x26>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	60a3      	str	r3, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e12:	3501      	adds	r5, #1
}
 8007e14:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e16:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8007e18:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e1a:	68c0      	ldr	r0, [r0, #12]
 8007e1c:	f001 fe08 	bl	8009a30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007e20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e22:	68e3      	ldr	r3, [r4, #12]
 8007e24:	4251      	negs	r1, r2
 8007e26:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e28:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007e2a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e2c:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007e2e:	bf3e      	ittt	cc
 8007e30:	6863      	ldrcc	r3, [r4, #4]
 8007e32:	185b      	addcc	r3, r3, r1
 8007e34:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007e36:	2e02      	cmp	r6, #2
 8007e38:	d1eb      	bne.n	8007e12 <prvCopyDataToQueue+0x26>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e3a:	2d00      	cmp	r5, #0
 8007e3c:	d0e9      	beq.n	8007e12 <prvCopyDataToQueue+0x26>
				--uxMessagesWaiting;
 8007e3e:	3d01      	subs	r5, #1
 8007e40:	e7e7      	b.n	8007e12 <prvCopyDataToQueue+0x26>

08007e42 <prvCopyDataFromQueue>:
{
 8007e42:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8007e46:	4608      	mov	r0, r1
 8007e48:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e4a:	b162      	cbz	r2, 8007e66 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007e4c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e4e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007e50:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e52:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e54:	bf28      	it	cs
 8007e56:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007e58:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8007e5a:	bf28      	it	cs
 8007e5c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e5e:	68d9      	ldr	r1, [r3, #12]
}
 8007e60:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8007e62:	f001 bde5 	b.w	8009a30 <memcpy>
}
 8007e66:	bc10      	pop	{r4}
 8007e68:	4770      	bx	lr

08007e6a <prvUnlockQueue>:
{
 8007e6a:	b570      	push	{r4, r5, r6, lr}
 8007e6c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007e6e:	f001 f9b1 	bl	80091d4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007e72:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e76:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8007e7a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	dc14      	bgt.n	8007eaa <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007e80:	23ff      	movs	r3, #255	; 0xff
 8007e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8007e86:	f001 f9c7 	bl	8009218 <vPortExitCritical>
	taskENTER_CRITICAL();
 8007e8a:	f001 f9a3 	bl	80091d4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007e8e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e92:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007e96:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	dc12      	bgt.n	8007ec2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8007e9c:	23ff      	movs	r3, #255	; 0xff
 8007e9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8007ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007ea6:	f001 b9b7 	b.w	8009218 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0e7      	beq.n	8007e80 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f000 fe59 	bl	8008b68 <xTaskRemoveFromEventList>
 8007eb6:	b108      	cbz	r0, 8007ebc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8007eb8:	f000 fee0 	bl	8008c7c <vTaskMissedYield>
			--cTxLock;
 8007ebc:	3d01      	subs	r5, #1
 8007ebe:	b26d      	sxtb	r5, r5
 8007ec0:	e7dc      	b.n	8007e7c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ec2:	6923      	ldr	r3, [r4, #16]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0e9      	beq.n	8007e9c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec8:	4630      	mov	r0, r6
 8007eca:	f000 fe4d 	bl	8008b68 <xTaskRemoveFromEventList>
 8007ece:	b108      	cbz	r0, 8007ed4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8007ed0:	f000 fed4 	bl	8008c7c <vTaskMissedYield>
				--cRxLock;
 8007ed4:	3d01      	subs	r5, #1
 8007ed6:	b26d      	sxtb	r5, r5
 8007ed8:	e7de      	b.n	8007e98 <prvUnlockQueue+0x2e>
	...

08007edc <xQueueGenericReset>:
{
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8007ee0:	4604      	mov	r4, r0
 8007ee2:	b940      	cbnz	r0, 8007ef6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8007ef6:	f001 f96d 	bl	80091d4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007efa:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8007efe:	434b      	muls	r3, r1
 8007f00:	6822      	ldr	r2, [r4, #0]
 8007f02:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f04:	1a5b      	subs	r3, r3, r1
 8007f06:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007f08:	6060      	str	r0, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007f0a:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f0c:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8007f0e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f10:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f12:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8007f1c:	b995      	cbnz	r5, 8007f44 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	b163      	cbz	r3, 8007f3c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f22:	f104 0010 	add.w	r0, r4, #16
 8007f26:	f000 fe1f 	bl	8008b68 <xTaskRemoveFromEventList>
 8007f2a:	b138      	cbz	r0, 8007f3c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8007f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <xQueueGenericReset+0x7c>)
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007f3c:	f001 f96c 	bl	8009218 <vPortExitCritical>
}
 8007f40:	2001      	movs	r0, #1
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f44:	f104 0010 	add.w	r0, r4, #16
 8007f48:	f7ff ff04 	bl	8007d54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007f50:	f7ff ff00 	bl	8007d54 <vListInitialise>
 8007f54:	e7f2      	b.n	8007f3c <xQueueGenericReset+0x60>
 8007f56:	bf00      	nop
 8007f58:	e000ed04 	.word	0xe000ed04

08007f5c <xQueueGenericCreateStatic>:
	{
 8007f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f5e:	460d      	mov	r5, r1
 8007f60:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f62:	b940      	cbnz	r0, 8007f76 <xQueueGenericCreateStatic+0x1a>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	e7fe      	b.n	8007f74 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007f76:	b943      	cbnz	r3, 8007f8a <xQueueGenericCreateStatic+0x2e>
 8007f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7c:	f383 8811 	msr	BASEPRI, r3
 8007f80:	f3bf 8f6f 	isb	sy
 8007f84:	f3bf 8f4f 	dsb	sy
 8007f88:	e7fe      	b.n	8007f88 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f8a:	b14a      	cbz	r2, 8007fa0 <xQueueGenericCreateStatic+0x44>
 8007f8c:	b991      	cbnz	r1, 8007fb4 <xQueueGenericCreateStatic+0x58>
 8007f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	e7fe      	b.n	8007f9e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fa0:	b141      	cbz	r1, 8007fb4 <xQueueGenericCreateStatic+0x58>
 8007fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	e7fe      	b.n	8007fb2 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fb4:	2348      	movs	r3, #72	; 0x48
 8007fb6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fb8:	9b01      	ldr	r3, [sp, #4]
 8007fba:	2b48      	cmp	r3, #72	; 0x48
 8007fbc:	d008      	beq.n	8007fd0 <xQueueGenericCreateStatic+0x74>
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	e7fe      	b.n	8007fce <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fd0:	2101      	movs	r1, #1
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007fd2:	2d00      	cmp	r5, #0
 8007fd4:	bf08      	it	eq
 8007fd6:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8007fd8:	e9c4 050f 	strd	r0, r5, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fdc:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	6022      	str	r2, [r4, #0]
 8007fe4:	f7ff ff7a 	bl	8007edc <xQueueGenericReset>
	}
 8007fe8:	4620      	mov	r0, r4
 8007fea:	b003      	add	sp, #12
 8007fec:	bd30      	pop	{r4, r5, pc}
	...

08007ff0 <xQueueGenericSend>:
{
 8007ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff4:	4688      	mov	r8, r1
 8007ff6:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8007ff8:	4604      	mov	r4, r0
{
 8007ffa:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8007ffc:	b940      	cbnz	r0, 8008010 <xQueueGenericSend+0x20>
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	e7fe      	b.n	800800e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008010:	b951      	cbnz	r1, 8008028 <xQueueGenericSend+0x38>
 8008012:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008014:	b143      	cbz	r3, 8008028 <xQueueGenericSend+0x38>
 8008016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	e7fe      	b.n	8008026 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008028:	2f02      	cmp	r7, #2
 800802a:	d10b      	bne.n	8008044 <xQueueGenericSend+0x54>
 800802c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d008      	beq.n	8008044 <xQueueGenericSend+0x54>
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	e7fe      	b.n	8008042 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008044:	f000 fe20 	bl	8008c88 <xTaskGetSchedulerState>
 8008048:	4606      	mov	r6, r0
 800804a:	b950      	cbnz	r0, 8008062 <xQueueGenericSend+0x72>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	b14b      	cbz	r3, 8008064 <xQueueGenericSend+0x74>
 8008050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	e7fe      	b.n	8008060 <xQueueGenericSend+0x70>
 8008062:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008064:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8008068:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008150 <xQueueGenericSend+0x160>
 800806c:	e037      	b.n	80080de <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 800806e:	9d01      	ldr	r5, [sp, #4]
 8008070:	b91d      	cbnz	r5, 800807a <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8008072:	f001 f8d1 	bl	8009218 <vPortExitCritical>
			return errQUEUE_FULL;
 8008076:	2000      	movs	r0, #0
 8008078:	e050      	b.n	800811c <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800807a:	b916      	cbnz	r6, 8008082 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800807c:	a802      	add	r0, sp, #8
 800807e:	f000 fdb5 	bl	8008bec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008082:	f001 f8c9 	bl	8009218 <vPortExitCritical>
		vTaskSuspendAll();
 8008086:	f000 fbc1 	bl	800880c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800808a:	f001 f8a3 	bl	80091d4 <vPortEnterCritical>
 800808e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008092:	2bff      	cmp	r3, #255	; 0xff
 8008094:	bf08      	it	eq
 8008096:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800809a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800809e:	2bff      	cmp	r3, #255	; 0xff
 80080a0:	bf08      	it	eq
 80080a2:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80080a6:	f001 f8b7 	bl	8009218 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080aa:	a901      	add	r1, sp, #4
 80080ac:	a802      	add	r0, sp, #8
 80080ae:	f000 fda9 	bl	8008c04 <xTaskCheckForTimeOut>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	d146      	bne.n	8008144 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080b6:	f001 f88d 	bl	80091d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080be:	429a      	cmp	r2, r3
 80080c0:	d12f      	bne.n	8008122 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80080c2:	f001 f8a9 	bl	8009218 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080c6:	9901      	ldr	r1, [sp, #4]
 80080c8:	f104 0010 	add.w	r0, r4, #16
 80080cc:	f000 fd12 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080d0:	4620      	mov	r0, r4
 80080d2:	f7ff feca 	bl	8007e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080d6:	f000 fc39 	bl	800894c <xTaskResumeAll>
 80080da:	b350      	cbz	r0, 8008132 <xQueueGenericSend+0x142>
 80080dc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80080de:	f001 f879 	bl	80091d4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80080e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80080e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d301      	bcc.n	80080ee <xQueueGenericSend+0xfe>
 80080ea:	2f02      	cmp	r7, #2
 80080ec:	d1bf      	bne.n	800806e <xQueueGenericSend+0x7e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80080ee:	463a      	mov	r2, r7
 80080f0:	4641      	mov	r1, r8
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff fe7a 	bl	8007dec <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080fa:	b11b      	cbz	r3, 8008104 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008100:	f000 fd32 	bl	8008b68 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8008104:	b138      	cbz	r0, 8008116 <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 8008106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810a:	4b11      	ldr	r3, [pc, #68]	; (8008150 <xQueueGenericSend+0x160>)
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008116:	f001 f87f 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 800811a:	2001      	movs	r0, #1
}
 800811c:	b004      	add	sp, #16
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8008122:	f001 f879 	bl	8009218 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8008126:	4620      	mov	r0, r4
 8008128:	f7ff fe9f 	bl	8007e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800812c:	f000 fc0e 	bl	800894c <xTaskResumeAll>
 8008130:	e7d4      	b.n	80080dc <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 8008132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008136:	f8ca 3000 	str.w	r3, [sl]
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	e7cb      	b.n	80080dc <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 8008144:	4620      	mov	r0, r4
 8008146:	f7ff fe90 	bl	8007e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800814a:	f000 fbff 	bl	800894c <xTaskResumeAll>
 800814e:	e792      	b.n	8008076 <xQueueGenericSend+0x86>
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <xQueueGenericSendFromISR>:
{
 8008154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008158:	4689      	mov	r9, r1
 800815a:	4690      	mov	r8, r2
 800815c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800815e:	4604      	mov	r4, r0
 8008160:	b940      	cbnz	r0, 8008174 <xQueueGenericSendFromISR+0x20>
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	e7fe      	b.n	8008172 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008174:	b951      	cbnz	r1, 800818c <xQueueGenericSendFromISR+0x38>
 8008176:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008178:	b143      	cbz	r3, 800818c <xQueueGenericSendFromISR+0x38>
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	f383 8811 	msr	BASEPRI, r3
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	f3bf 8f4f 	dsb	sy
 800818a:	e7fe      	b.n	800818a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800818c:	2f02      	cmp	r7, #2
 800818e:	d10b      	bne.n	80081a8 <xQueueGenericSendFromISR+0x54>
 8008190:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d008      	beq.n	80081a8 <xQueueGenericSendFromISR+0x54>
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	e7fe      	b.n	80081a6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a8:	f001 f8f4 	bl	8009394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081ac:	f3ef 8611 	mrs	r6, BASEPRI
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80081c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d301      	bcc.n	80081cc <xQueueGenericSendFromISR+0x78>
 80081c8:	2f02      	cmp	r7, #2
 80081ca:	d122      	bne.n	8008212 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80081cc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d0:	463a      	mov	r2, r7
 80081d2:	4649      	mov	r1, r9
 80081d4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80081d6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d8:	f7ff fe08 	bl	8007dec <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80081dc:	1c6b      	adds	r3, r5, #1
 80081de:	d113      	bne.n	8008208 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081e2:	b90b      	cbnz	r3, 80081e8 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80081e4:	2001      	movs	r0, #1
 80081e6:	e00b      	b.n	8008200 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80081ec:	f000 fcbc 	bl	8008b68 <xTaskRemoveFromEventList>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0f7      	beq.n	80081e4 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80081f4:	f1b8 0f00 	cmp.w	r8, #0
 80081f8:	d0f4      	beq.n	80081e4 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081fa:	2001      	movs	r0, #1
 80081fc:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008200:	f386 8811 	msr	BASEPRI, r6
}
 8008204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008208:	3501      	adds	r5, #1
 800820a:	b26d      	sxtb	r5, r5
 800820c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008210:	e7e8      	b.n	80081e4 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 8008212:	2000      	movs	r0, #0
 8008214:	e7f4      	b.n	8008200 <xQueueGenericSendFromISR+0xac>
	...

08008218 <xQueueReceive>:
{
 8008218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800821c:	b085      	sub	sp, #20
 800821e:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8008220:	4604      	mov	r4, r0
{
 8008222:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008224:	b940      	cbnz	r0, 8008238 <xQueueReceive+0x20>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	e7fe      	b.n	8008236 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008238:	b951      	cbnz	r1, 8008250 <xQueueReceive+0x38>
 800823a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800823c:	b143      	cbz	r3, 8008250 <xQueueReceive+0x38>
 800823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	e7fe      	b.n	800824e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008250:	f000 fd1a 	bl	8008c88 <xTaskGetSchedulerState>
 8008254:	4606      	mov	r6, r0
 8008256:	b950      	cbnz	r0, 800826e <xQueueReceive+0x56>
 8008258:	9b01      	ldr	r3, [sp, #4]
 800825a:	b14b      	cbz	r3, 8008270 <xQueueReceive+0x58>
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	e7fe      	b.n	800826c <xQueueReceive+0x54>
 800826e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008270:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8008274:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8008354 <xQueueReceive+0x13c>
 8008278:	e03b      	b.n	80082f2 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800827a:	9d01      	ldr	r5, [sp, #4]
 800827c:	b91d      	cbnz	r5, 8008286 <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 800827e:	f000 ffcb 	bl	8009218 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008282:	2000      	movs	r0, #0
 8008284:	e052      	b.n	800832c <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 8008286:	b916      	cbnz	r6, 800828e <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008288:	a802      	add	r0, sp, #8
 800828a:	f000 fcaf 	bl	8008bec <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800828e:	f000 ffc3 	bl	8009218 <vPortExitCritical>
		vTaskSuspendAll();
 8008292:	f000 fabb 	bl	800880c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008296:	f000 ff9d 	bl	80091d4 <vPortEnterCritical>
 800829a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800829e:	2bff      	cmp	r3, #255	; 0xff
 80082a0:	bf08      	it	eq
 80082a2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80082a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80082aa:	2bff      	cmp	r3, #255	; 0xff
 80082ac:	bf08      	it	eq
 80082ae:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80082b2:	f000 ffb1 	bl	8009218 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082b6:	a901      	add	r1, sp, #4
 80082b8:	a802      	add	r0, sp, #8
 80082ba:	f000 fca3 	bl	8008c04 <xTaskCheckForTimeOut>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d13d      	bne.n	800833e <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082c2:	4620      	mov	r0, r4
 80082c4:	f7ff fd87 	bl	8007dd6 <prvIsQueueEmpty>
 80082c8:	b398      	cbz	r0, 8008332 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082ca:	9901      	ldr	r1, [sp, #4]
 80082cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80082d0:	f000 fc10 	bl	8008af4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80082d4:	4620      	mov	r0, r4
 80082d6:	f7ff fdc8 	bl	8007e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80082da:	f000 fb37 	bl	800894c <xTaskResumeAll>
 80082de:	b938      	cbnz	r0, 80082f0 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 80082e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082e4:	f8c9 3000 	str.w	r3, [r9]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80082f2:	f000 ff6f 	bl	80091d4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082f8:	2d00      	cmp	r5, #0
 80082fa:	d0be      	beq.n	800827a <xQueueReceive+0x62>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80082fc:	4639      	mov	r1, r7
 80082fe:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008300:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008302:	f7ff fd9e 	bl	8007e42 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008306:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008308:	6923      	ldr	r3, [r4, #16]
 800830a:	b163      	cbz	r3, 8008326 <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830c:	f104 0010 	add.w	r0, r4, #16
 8008310:	f000 fc2a 	bl	8008b68 <xTaskRemoveFromEventList>
 8008314:	b138      	cbz	r0, 8008326 <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 8008316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800831a:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <xQueueReceive+0x13c>)
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008326:	f000 ff77 	bl	8009218 <vPortExitCritical>
				return pdPASS;
 800832a:	2001      	movs	r0, #1
}
 800832c:	b005      	add	sp, #20
 800832e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008332:	4620      	mov	r0, r4
 8008334:	f7ff fd99 	bl	8007e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008338:	f000 fb08 	bl	800894c <xTaskResumeAll>
 800833c:	e7d8      	b.n	80082f0 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff fd93 	bl	8007e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008344:	f000 fb02 	bl	800894c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008348:	4620      	mov	r0, r4
 800834a:	f7ff fd44 	bl	8007dd6 <prvIsQueueEmpty>
 800834e:	2800      	cmp	r0, #0
 8008350:	d0ce      	beq.n	80082f0 <xQueueReceive+0xd8>
 8008352:	e796      	b.n	8008282 <xQueueReceive+0x6a>
 8008354:	e000ed04 	.word	0xe000ed04

08008358 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008358:	2300      	movs	r3, #0
	{
 800835a:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800835c:	4a06      	ldr	r2, [pc, #24]	; (8008378 <vQueueAddToRegistry+0x20>)
 800835e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8008362:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008366:	b91d      	cbnz	r5, 8008370 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008368:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800836c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800836e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008370:	3301      	adds	r3, #1
 8008372:	2b08      	cmp	r3, #8
 8008374:	d1f3      	bne.n	800835e <vQueueAddToRegistry+0x6>
 8008376:	e7fa      	b.n	800836e <vQueueAddToRegistry+0x16>
 8008378:	2000232c 	.word	0x2000232c

0800837c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008384:	f000 ff26 	bl	80091d4 <vPortEnterCritical>
 8008388:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800838c:	2bff      	cmp	r3, #255	; 0xff
 800838e:	bf04      	itt	eq
 8008390:	2300      	moveq	r3, #0
 8008392:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008396:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800839a:	2bff      	cmp	r3, #255	; 0xff
 800839c:	bf04      	itt	eq
 800839e:	2300      	moveq	r3, #0
 80083a0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80083a4:	f000 ff38 	bl	8009218 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80083a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80083aa:	b92b      	cbnz	r3, 80083b8 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80083ac:	4632      	mov	r2, r6
 80083ae:	4629      	mov	r1, r5
 80083b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083b4:	f000 fbb8 	bl	8008b28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80083b8:	4620      	mov	r0, r4
	}
 80083ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80083be:	f7ff bd54 	b.w	8007e6a <prvUnlockQueue>
	...

080083c4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80083c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c8:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80083ca:	f000 ff03 	bl	80091d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80083ce:	4b34      	ldr	r3, [pc, #208]	; (80084a0 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80083d0:	4d34      	ldr	r5, [pc, #208]	; (80084a4 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4e34      	ldr	r6, [pc, #208]	; (80084a8 <prvAddNewTaskToReadyList+0xe4>)
 80083d6:	3201      	adds	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80083da:	682a      	ldr	r2, [r5, #0]
 80083dc:	2a00      	cmp	r2, #0
 80083de:	d154      	bne.n	800848a <prvAddNewTaskToReadyList+0xc6>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80083e0:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d12b      	bne.n	8008440 <prvAddNewTaskToReadyList+0x7c>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083e8:	4830      	ldr	r0, [pc, #192]	; (80084ac <prvAddNewTaskToReadyList+0xe8>)
 80083ea:	f7ff fcb3 	bl	8007d54 <vListInitialise>
 80083ee:	4830      	ldr	r0, [pc, #192]	; (80084b0 <prvAddNewTaskToReadyList+0xec>)
 80083f0:	f7ff fcb0 	bl	8007d54 <vListInitialise>
 80083f4:	482f      	ldr	r0, [pc, #188]	; (80084b4 <prvAddNewTaskToReadyList+0xf0>)
 80083f6:	f7ff fcad 	bl	8007d54 <vListInitialise>
 80083fa:	482f      	ldr	r0, [pc, #188]	; (80084b8 <prvAddNewTaskToReadyList+0xf4>)
 80083fc:	f7ff fcaa 	bl	8007d54 <vListInitialise>
 8008400:	482e      	ldr	r0, [pc, #184]	; (80084bc <prvAddNewTaskToReadyList+0xf8>)
 8008402:	f7ff fca7 	bl	8007d54 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008406:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80084ec <prvAddNewTaskToReadyList+0x128>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800840a:	482d      	ldr	r0, [pc, #180]	; (80084c0 <prvAddNewTaskToReadyList+0xfc>)
 800840c:	f7ff fca2 	bl	8007d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008410:	4f2c      	ldr	r7, [pc, #176]	; (80084c4 <prvAddNewTaskToReadyList+0x100>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008412:	482d      	ldr	r0, [pc, #180]	; (80084c8 <prvAddNewTaskToReadyList+0x104>)
 8008414:	f7ff fc9e 	bl	8007d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8008418:	4640      	mov	r0, r8
 800841a:	f7ff fc9b 	bl	8007d54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800841e:	4638      	mov	r0, r7
 8008420:	f7ff fc98 	bl	8007d54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008424:	4829      	ldr	r0, [pc, #164]	; (80084cc <prvAddNewTaskToReadyList+0x108>)
 8008426:	f7ff fc95 	bl	8007d54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800842a:	4829      	ldr	r0, [pc, #164]	; (80084d0 <prvAddNewTaskToReadyList+0x10c>)
 800842c:	f7ff fc92 	bl	8007d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008430:	4828      	ldr	r0, [pc, #160]	; (80084d4 <prvAddNewTaskToReadyList+0x110>)
 8008432:	f7ff fc8f 	bl	8007d54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008436:	4b28      	ldr	r3, [pc, #160]	; (80084d8 <prvAddNewTaskToReadyList+0x114>)
 8008438:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800843c:	4b27      	ldr	r3, [pc, #156]	; (80084dc <prvAddNewTaskToReadyList+0x118>)
 800843e:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8008440:	4a27      	ldr	r2, [pc, #156]	; (80084e0 <prvAddNewTaskToReadyList+0x11c>)
		prvAddTaskToReadyList( pxNewTCB );
 8008442:	4928      	ldr	r1, [pc, #160]	; (80084e4 <prvAddNewTaskToReadyList+0x120>)
		uxTaskNumber++;
 8008444:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008446:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8008448:	3301      	adds	r3, #1
 800844a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800844c:	2301      	movs	r3, #1
 800844e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008450:	4093      	lsls	r3, r2
 8008452:	4303      	orrs	r3, r0
 8008454:	2014      	movs	r0, #20
 8008456:	600b      	str	r3, [r1, #0]
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <prvAddNewTaskToReadyList+0xe8>)
 800845a:	1d21      	adds	r1, r4, #4
 800845c:	fb00 3002 	mla	r0, r0, r2, r3
 8008460:	f7ff fc86 	bl	8007d70 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008464:	f000 fed8 	bl	8009218 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008468:	6833      	ldr	r3, [r6, #0]
 800846a:	b163      	cbz	r3, 8008486 <prvAddNewTaskToReadyList+0xc2>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800846c:	682b      	ldr	r3, [r5, #0]
 800846e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008470:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008472:	429a      	cmp	r2, r3
 8008474:	d207      	bcs.n	8008486 <prvAddNewTaskToReadyList+0xc2>
			taskYIELD_IF_USING_PREEMPTION();
 8008476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800847a:	4b1b      	ldr	r3, [pc, #108]	; (80084e8 <prvAddNewTaskToReadyList+0x124>)
 800847c:	601a      	str	r2, [r3, #0]
 800847e:	f3bf 8f4f 	dsb	sy
 8008482:	f3bf 8f6f 	isb	sy
}
 8008486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800848a:	6833      	ldr	r3, [r6, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1d7      	bne.n	8008440 <prvAddNewTaskToReadyList+0x7c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008496:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008498:	bf98      	it	ls
 800849a:	602c      	strls	r4, [r5, #0]
 800849c:	e7d0      	b.n	8008440 <prvAddNewTaskToReadyList+0x7c>
 800849e:	bf00      	nop
 80084a0:	20000ec8 	.word	0x20000ec8
 80084a4:	20000e30 	.word	0x20000e30
 80084a8:	20000f24 	.word	0x20000f24
 80084ac:	20000e3c 	.word	0x20000e3c
 80084b0:	20000e50 	.word	0x20000e50
 80084b4:	20000e64 	.word	0x20000e64
 80084b8:	20000e78 	.word	0x20000e78
 80084bc:	20000e8c 	.word	0x20000e8c
 80084c0:	20000ea0 	.word	0x20000ea0
 80084c4:	20000ef4 	.word	0x20000ef4
 80084c8:	20000eb4 	.word	0x20000eb4
 80084cc:	20000f10 	.word	0x20000f10
 80084d0:	20000f3c 	.word	0x20000f3c
 80084d4:	20000f28 	.word	0x20000f28
 80084d8:	20000e34 	.word	0x20000e34
 80084dc:	20000e38 	.word	0x20000e38
 80084e0:	20000ed8 	.word	0x20000ed8
 80084e4:	20000edc 	.word	0x20000edc
 80084e8:	e000ed04 	.word	0xe000ed04
 80084ec:	20000ee0 	.word	0x20000ee0

080084f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f0:	4a06      	ldr	r2, [pc, #24]	; (800850c <prvResetNextTaskUnblockTime+0x1c>)
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	6819      	ldr	r1, [r3, #0]
 80084f6:	4b06      	ldr	r3, [pc, #24]	; (8008510 <prvResetNextTaskUnblockTime+0x20>)
 80084f8:	b919      	cbnz	r1, 8008502 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80084fa:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084fe:	601a      	str	r2, [r3, #0]
	}
}
 8008500:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008502:	6812      	ldr	r2, [r2, #0]
 8008504:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008506:	68d2      	ldr	r2, [r2, #12]
 8008508:	6852      	ldr	r2, [r2, #4]
 800850a:	e7f8      	b.n	80084fe <prvResetNextTaskUnblockTime+0xe>
 800850c:	20000e34 	.word	0x20000e34
 8008510:	20000f08 	.word	0x20000f08

08008514 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	4607      	mov	r7, r0
 800851a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800851e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
 8008522:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8008524:	3801      	subs	r0, #1
 8008526:	eb06 0680 	add.w	r6, r6, r0, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800852a:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800852c:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008530:	1e4b      	subs	r3, r1, #1
 8008532:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008536:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008538:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800853c:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8008540:	7818      	ldrb	r0, [r3, #0]
 8008542:	b108      	cbz	r0, 8008548 <prvInitialiseNewTask.isra.0+0x34>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008544:	428b      	cmp	r3, r1
 8008546:	d1f7      	bne.n	8008538 <prvInitialiseNewTask.isra.0+0x24>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008548:	9d08      	ldr	r5, [sp, #32]
 800854a:	f04f 0a00 	mov.w	sl, #0
 800854e:	2d06      	cmp	r5, #6
 8008550:	bf28      	it	cs
 8008552:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008554:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8008556:	62e5      	str	r5, [r4, #44]	; 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008558:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800855c:	f7ff fc05 	bl	8007d6a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008560:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008564:	f104 0018 	add.w	r0, r4, #24
 8008568:	f7ff fbff 	bl	8007d6a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800856c:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008570:	464a      	mov	r2, r9
 8008572:	4639      	mov	r1, r7
 8008574:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008576:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008578:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800857a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800857c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008580:	f000 fe04 	bl	800918c <pxPortInitialiseStack>
 8008584:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008586:	f1b8 0f00 	cmp.w	r8, #0
 800858a:	d001      	beq.n	8008590 <prvInitialiseNewTask.isra.0+0x7c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800858c:	f8c8 4000 	str.w	r4, [r8]
}
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008594 <prvDeleteTCB>:
	{
 8008594:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008596:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
	{
 800859a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800859c:	b93b      	cbnz	r3, 80085ae <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800859e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80085a0:	f000 ffd4 	bl	800954c <vPortFree>
				vPortFree( pxTCB );
 80085a4:	4620      	mov	r0, r4
	}
 80085a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80085aa:	f000 bfcf 	b.w	800954c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d0f9      	beq.n	80085a6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d008      	beq.n	80085c8 <prvDeleteTCB+0x34>
 80085b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	e7fe      	b.n	80085c6 <prvDeleteTCB+0x32>
	}
 80085c8:	bd10      	pop	{r4, pc}
	...

080085cc <prvIdleTask>:
{
 80085cc:	b580      	push	{r7, lr}
				taskYIELD();
 80085ce:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800862c <prvIdleTask+0x60>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085d2:	4f12      	ldr	r7, [pc, #72]	; (800861c <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085d4:	4c12      	ldr	r4, [pc, #72]	; (8008620 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80085d6:	4d13      	ldr	r5, [pc, #76]	; (8008624 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	b963      	cbnz	r3, 80085f6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085dc:	4b12      	ldr	r3, [pc, #72]	; (8008628 <prvIdleTask+0x5c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d9f8      	bls.n	80085d6 <prvIdleTask+0xa>
				taskYIELD();
 80085e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085e8:	f8c8 3000 	str.w	r3, [r8]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	e7ee      	b.n	80085d4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80085f6:	f000 fded 	bl	80091d4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fe:	1d30      	adds	r0, r6, #4
 8008600:	f7ff fbd9 	bl	8007db6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008604:	682b      	ldr	r3, [r5, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	3b01      	subs	r3, #1
 800860e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8008610:	f000 fe02 	bl	8009218 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8008614:	4630      	mov	r0, r6
 8008616:	f7ff ffbd 	bl	8008594 <prvDeleteTCB>
 800861a:	e7dd      	b.n	80085d8 <prvIdleTask+0xc>
 800861c:	20000f3c 	.word	0x20000f3c
 8008620:	20000ecc 	.word	0x20000ecc
 8008624:	20000ec8 	.word	0x20000ec8
 8008628:	20000e3c 	.word	0x20000e3c
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008632:	4b1b      	ldr	r3, [pc, #108]	; (80086a0 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008634:	4f1b      	ldr	r7, [pc, #108]	; (80086a4 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8008636:	681c      	ldr	r4, [r3, #0]
{
 8008638:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863a:	6838      	ldr	r0, [r7, #0]
{
 800863c:	460e      	mov	r6, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863e:	3004      	adds	r0, #4
 8008640:	f7ff fbb9 	bl	8007db6 <uxListRemove>
 8008644:	463b      	mov	r3, r7
 8008646:	b940      	cbnz	r0, 800865a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	4817      	ldr	r0, [pc, #92]	; (80086a8 <prvAddCurrentTaskToDelayedList+0x78>)
 800864c:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 800864e:	2101      	movs	r1, #1
 8008650:	6802      	ldr	r2, [r0, #0]
 8008652:	40b9      	lsls	r1, r7
 8008654:	ea22 0201 	bic.w	r2, r2, r1
 8008658:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800865a:	1c6a      	adds	r2, r5, #1
 800865c:	d107      	bne.n	800866e <prvAddCurrentTaskToDelayedList+0x3e>
 800865e:	b136      	cbz	r6, 800866e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008660:	6819      	ldr	r1, [r3, #0]
 8008662:	4812      	ldr	r0, [pc, #72]	; (80086ac <prvAddCurrentTaskToDelayedList+0x7c>)
 8008664:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800866a:	f7ff bb81 	b.w	8007d70 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	1964      	adds	r4, r4, r5
 8008672:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8008674:	d307      	bcc.n	8008686 <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008676:	4a0e      	ldr	r2, [pc, #56]	; (80086b0 <prvAddCurrentTaskToDelayedList+0x80>)
 8008678:	6810      	ldr	r0, [r2, #0]
 800867a:	6819      	ldr	r1, [r3, #0]
}
 800867c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008680:	3104      	adds	r1, #4
 8008682:	f7ff bb81 	b.w	8007d88 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008686:	4a0b      	ldr	r2, [pc, #44]	; (80086b4 <prvAddCurrentTaskToDelayedList+0x84>)
 8008688:	6810      	ldr	r0, [r2, #0]
 800868a:	6819      	ldr	r1, [r3, #0]
 800868c:	3104      	adds	r1, #4
 800868e:	f7ff fb7b 	bl	8007d88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008692:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <prvAddCurrentTaskToDelayedList+0x88>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8008698:	bf88      	it	hi
 800869a:	601c      	strhi	r4, [r3, #0]
}
 800869c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000f50 	.word	0x20000f50
 80086a4:	20000e30 	.word	0x20000e30
 80086a8:	20000edc 	.word	0x20000edc
 80086ac:	20000f28 	.word	0x20000f28
 80086b0:	20000e38 	.word	0x20000e38
 80086b4:	20000e34 	.word	0x20000e34
 80086b8:	20000f08 	.word	0x20000f08

080086bc <xTaskCreateStatic>:
	{
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80086c4:	b945      	cbnz	r5, 80086d8 <xTaskCreateStatic+0x1c>
 80086c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	e7fe      	b.n	80086d6 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80086d8:	b944      	cbnz	r4, 80086ec <xTaskCreateStatic+0x30>
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	e7fe      	b.n	80086ea <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80086ec:	264c      	movs	r6, #76	; 0x4c
 80086ee:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086f0:	9e04      	ldr	r6, [sp, #16]
 80086f2:	2e4c      	cmp	r6, #76	; 0x4c
 80086f4:	d008      	beq.n	8008708 <xTaskCreateStatic+0x4c>
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	e7fe      	b.n	8008706 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008708:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800870a:	2502      	movs	r5, #2
 800870c:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008710:	ad05      	add	r5, sp, #20
 8008712:	9501      	str	r5, [sp, #4]
 8008714:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008716:	9402      	str	r4, [sp, #8]
 8008718:	9500      	str	r5, [sp, #0]
 800871a:	f7ff fefb 	bl	8008514 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800871e:	4620      	mov	r0, r4
 8008720:	f7ff fe50 	bl	80083c4 <prvAddNewTaskToReadyList>
	}
 8008724:	9805      	ldr	r0, [sp, #20]
 8008726:	b006      	add	sp, #24
 8008728:	bd70      	pop	{r4, r5, r6, pc}

0800872a <xTaskCreate>:
	{
 800872a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800872e:	4607      	mov	r7, r0
 8008730:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008732:	0090      	lsls	r0, r2, #2
	{
 8008734:	4688      	mov	r8, r1
 8008736:	4616      	mov	r6, r2
 8008738:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873a:	f000 fe7d 	bl	8009438 <pvPortMalloc>
			if( pxStack != NULL )
 800873e:	4605      	mov	r5, r0
 8008740:	b1e8      	cbz	r0, 800877e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008742:	204c      	movs	r0, #76	; 0x4c
 8008744:	f000 fe78 	bl	8009438 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008748:	4604      	mov	r4, r0
 800874a:	b1a8      	cbz	r0, 8008778 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800874c:	2300      	movs	r3, #0
 800874e:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 8008754:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800875a:	4632      	mov	r2, r6
 800875c:	4641      	mov	r1, r8
 800875e:	9002      	str	r0, [sp, #8]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4638      	mov	r0, r7
 8008764:	464b      	mov	r3, r9
 8008766:	f7ff fed5 	bl	8008514 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff fe2a 	bl	80083c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008770:	2001      	movs	r0, #1
	}
 8008772:	b005      	add	sp, #20
 8008774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8008778:	4628      	mov	r0, r5
 800877a:	f000 fee7 	bl	800954c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800877e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8008782:	e7f6      	b.n	8008772 <xTaskCreate+0x48>

08008784 <vTaskStartScheduler>:
{
 8008784:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008786:	2400      	movs	r4, #0
{
 8008788:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800878a:	aa07      	add	r2, sp, #28
 800878c:	a906      	add	r1, sp, #24
 800878e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008790:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008794:	f7f8 fc6c 	bl	8001070 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008798:	9b05      	ldr	r3, [sp, #20]
 800879a:	9a07      	ldr	r2, [sp, #28]
 800879c:	9302      	str	r3, [sp, #8]
 800879e:	9b06      	ldr	r3, [sp, #24]
 80087a0:	4915      	ldr	r1, [pc, #84]	; (80087f8 <vTaskStartScheduler+0x74>)
 80087a2:	e9cd 4300 	strd	r4, r3, [sp]
 80087a6:	4815      	ldr	r0, [pc, #84]	; (80087fc <vTaskStartScheduler+0x78>)
 80087a8:	4623      	mov	r3, r4
 80087aa:	f7ff ff87 	bl	80086bc <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80087ae:	b1a8      	cbz	r0, 80087dc <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 80087b0:	f000 facc 	bl	8008d4c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80087b4:	2801      	cmp	r0, #1
 80087b6:	d113      	bne.n	80087e0 <vTaskStartScheduler+0x5c>
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80087c8:	f04f 32ff 	mov.w	r2, #4294967295
 80087cc:	4b0c      	ldr	r3, [pc, #48]	; (8008800 <vTaskStartScheduler+0x7c>)
 80087ce:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <vTaskStartScheduler+0x80>)
 80087d2:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <vTaskStartScheduler+0x84>)
 80087d6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80087d8:	f000 fd84 	bl	80092e4 <xPortStartScheduler>
}
 80087dc:	b008      	add	sp, #32
 80087de:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087e0:	3001      	adds	r0, #1
 80087e2:	d1fb      	bne.n	80087dc <vTaskStartScheduler+0x58>
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	e7fe      	b.n	80087f4 <vTaskStartScheduler+0x70>
 80087f6:	bf00      	nop
 80087f8:	0800dd29 	.word	0x0800dd29
 80087fc:	080085cd 	.word	0x080085cd
 8008800:	20000f08 	.word	0x20000f08
 8008804:	20000f24 	.word	0x20000f24
 8008808:	20000f50 	.word	0x20000f50

0800880c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800880c:	4a02      	ldr	r2, [pc, #8]	; (8008818 <vTaskSuspendAll+0xc>)
 800880e:	6813      	ldr	r3, [r2, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	6013      	str	r3, [r2, #0]
}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	20000ed4 	.word	0x20000ed4

0800881c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800881c:	4b01      	ldr	r3, [pc, #4]	; (8008824 <xTaskGetTickCount+0x8>)
 800881e:	6818      	ldr	r0, [r3, #0]
}
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop
 8008824:	20000f50 	.word	0x20000f50

08008828 <xTaskIncrementTick>:
{
 8008828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800882c:	4b3c      	ldr	r3, [pc, #240]	; (8008920 <xTaskIncrementTick+0xf8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d16e      	bne.n	8008912 <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008834:	4b3b      	ldr	r3, [pc, #236]	; (8008924 <xTaskIncrementTick+0xfc>)
 8008836:	681d      	ldr	r5, [r3, #0]
 8008838:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800883a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800883c:	b9bd      	cbnz	r5, 800886e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800883e:	4b3a      	ldr	r3, [pc, #232]	; (8008928 <xTaskIncrementTick+0x100>)
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	b142      	cbz	r2, 8008858 <xTaskIncrementTick+0x30>
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	e7fe      	b.n	8008856 <xTaskIncrementTick+0x2e>
 8008858:	4a34      	ldr	r2, [pc, #208]	; (800892c <xTaskIncrementTick+0x104>)
 800885a:	6819      	ldr	r1, [r3, #0]
 800885c:	6810      	ldr	r0, [r2, #0]
 800885e:	6018      	str	r0, [r3, #0]
 8008860:	6011      	str	r1, [r2, #0]
 8008862:	4a33      	ldr	r2, [pc, #204]	; (8008930 <xTaskIncrementTick+0x108>)
 8008864:	6813      	ldr	r3, [r2, #0]
 8008866:	3301      	adds	r3, #1
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	f7ff fe41 	bl	80084f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800886e:	4e31      	ldr	r6, [pc, #196]	; (8008934 <xTaskIncrementTick+0x10c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008870:	2400      	movs	r4, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008872:	6833      	ldr	r3, [r6, #0]
 8008874:	4f30      	ldr	r7, [pc, #192]	; (8008938 <xTaskIncrementTick+0x110>)
 8008876:	42ab      	cmp	r3, r5
 8008878:	d910      	bls.n	800889c <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800887a:	4b30      	ldr	r3, [pc, #192]	; (800893c <xTaskIncrementTick+0x114>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008880:	2314      	movs	r3, #20
 8008882:	4353      	muls	r3, r2
 8008884:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8008886:	2b02      	cmp	r3, #2
 8008888:	bf28      	it	cs
 800888a:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 800888c:	4b2c      	ldr	r3, [pc, #176]	; (8008940 <xTaskIncrementTick+0x118>)
 800888e:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8008890:	2b00      	cmp	r3, #0
}
 8008892:	bf0c      	ite	eq
 8008894:	4620      	moveq	r0, r4
 8008896:	2001      	movne	r0, #1
 8008898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800889c:	f8df a088 	ldr.w	sl, [pc, #136]	; 8008928 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80088a0:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008948 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088a4:	f8da 3000 	ldr.w	r3, [sl]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	b91b      	cbnz	r3, 80088b4 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ac:	f04f 33ff 	mov.w	r3, #4294967295
 80088b0:	6033      	str	r3, [r6, #0]
					break;
 80088b2:	e7e2      	b.n	800887a <xTaskIncrementTick+0x52>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80088b4:	f8da 3000 	ldr.w	r3, [sl]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088be:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 80088c2:	4295      	cmp	r5, r2
 80088c4:	d201      	bcs.n	80088ca <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80088c6:	6032      	str	r2, [r6, #0]
						break;
 80088c8:	e7d7      	b.n	800887a <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088ca:	f10b 0804 	add.w	r8, fp, #4
 80088ce:	4640      	mov	r0, r8
 80088d0:	f7ff fa71 	bl	8007db6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088d4:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 80088d8:	b11a      	cbz	r2, 80088e2 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088da:	f10b 0018 	add.w	r0, fp, #24
 80088de:	f7ff fa6a 	bl	8007db6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088e2:	2201      	movs	r2, #1
 80088e4:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80088e8:	f8d9 3000 	ldr.w	r3, [r9]
 80088ec:	4082      	lsls	r2, r0
 80088ee:	431a      	orrs	r2, r3
 80088f0:	f8c9 2000 	str.w	r2, [r9]
 80088f4:	2214      	movs	r2, #20
 80088f6:	4641      	mov	r1, r8
 80088f8:	fb02 7000 	mla	r0, r2, r0, r7
 80088fc:	f7ff fa38 	bl	8007d70 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008900:	4b0e      	ldr	r3, [pc, #56]	; (800893c <xTaskIncrementTick+0x114>)
 8008902:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8008906:	6819      	ldr	r1, [r3, #0]
 8008908:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800890a:	429a      	cmp	r2, r3
 800890c:	bf28      	it	cs
 800890e:	2401      	movcs	r4, #1
 8008910:	e7c8      	b.n	80088a4 <xTaskIncrementTick+0x7c>
		++uxPendedTicks;
 8008912:	4a0c      	ldr	r2, [pc, #48]	; (8008944 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8008914:	2400      	movs	r4, #0
		++uxPendedTicks;
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	3301      	adds	r3, #1
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	e7b6      	b.n	800888c <xTaskIncrementTick+0x64>
 800891e:	bf00      	nop
 8008920:	20000ed4 	.word	0x20000ed4
 8008924:	20000f50 	.word	0x20000f50
 8008928:	20000e34 	.word	0x20000e34
 800892c:	20000e38 	.word	0x20000e38
 8008930:	20000f0c 	.word	0x20000f0c
 8008934:	20000f08 	.word	0x20000f08
 8008938:	20000e3c 	.word	0x20000e3c
 800893c:	20000e30 	.word	0x20000e30
 8008940:	20000f54 	.word	0x20000f54
 8008944:	20000ed0 	.word	0x20000ed0
 8008948:	20000edc 	.word	0x20000edc

0800894c <xTaskResumeAll>:
{
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8008950:	4c30      	ldr	r4, [pc, #192]	; (8008a14 <xTaskResumeAll+0xc8>)
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	b943      	cbnz	r3, 8008968 <xTaskResumeAll+0x1c>
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	e7fe      	b.n	8008966 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8008968:	f000 fc34 	bl	80091d4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	3b01      	subs	r3, #1
 8008970:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008972:	6824      	ldr	r4, [r4, #0]
 8008974:	b12c      	cbz	r4, 8008982 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8008976:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008978:	f000 fc4e 	bl	8009218 <vPortExitCritical>
}
 800897c:	4620      	mov	r0, r4
 800897e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008982:	4b25      	ldr	r3, [pc, #148]	; (8008a18 <xTaskResumeAll+0xcc>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d0f5      	beq.n	8008976 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800898a:	4d24      	ldr	r5, [pc, #144]	; (8008a1c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800898c:	4e24      	ldr	r6, [pc, #144]	; (8008a20 <xTaskResumeAll+0xd4>)
 800898e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8008a34 <xTaskResumeAll+0xe8>
 8008992:	e01f      	b.n	80089d4 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008994:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8008996:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008998:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800899a:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800899e:	f104 0018 	add.w	r0, r4, #24
 80089a2:	f7ff fa08 	bl	8007db6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089a6:	4648      	mov	r0, r9
 80089a8:	f7ff fa05 	bl	8007db6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089ac:	2014      	movs	r0, #20
 80089ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80089b0:	6831      	ldr	r1, [r6, #0]
 80089b2:	fa07 f302 	lsl.w	r3, r7, r2
 80089b6:	430b      	orrs	r3, r1
 80089b8:	fb00 8002 	mla	r0, r0, r2, r8
 80089bc:	4649      	mov	r1, r9
 80089be:	6033      	str	r3, [r6, #0]
 80089c0:	f7ff f9d6 	bl	8007d70 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089c4:	4b17      	ldr	r3, [pc, #92]	; (8008a24 <xTaskResumeAll+0xd8>)
 80089c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d301      	bcc.n	80089d4 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 80089d0:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xTaskResumeAll+0xdc>)
 80089d2:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1dc      	bne.n	8008994 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80089da:	b10c      	cbz	r4, 80089e0 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80089dc:	f7ff fd88 	bl	80084f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80089e0:	4d12      	ldr	r5, [pc, #72]	; (8008a2c <xTaskResumeAll+0xe0>)
 80089e2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80089e4:	b144      	cbz	r4, 80089f8 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 80089e6:	2701      	movs	r7, #1
 80089e8:	4e0f      	ldr	r6, [pc, #60]	; (8008a28 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80089ea:	f7ff ff1d 	bl	8008828 <xTaskIncrementTick>
 80089ee:	b100      	cbz	r0, 80089f2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80089f0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80089f2:	3c01      	subs	r4, #1
 80089f4:	d1f9      	bne.n	80089ea <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80089f6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80089f8:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <xTaskResumeAll+0xdc>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d0ba      	beq.n	8008976 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8008a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a04:	4b0a      	ldr	r3, [pc, #40]	; (8008a30 <xTaskResumeAll+0xe4>)
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8008a10:	2401      	movs	r4, #1
 8008a12:	e7b1      	b.n	8008978 <xTaskResumeAll+0x2c>
 8008a14:	20000ed4 	.word	0x20000ed4
 8008a18:	20000ec8 	.word	0x20000ec8
 8008a1c:	20000f10 	.word	0x20000f10
 8008a20:	20000edc 	.word	0x20000edc
 8008a24:	20000e30 	.word	0x20000e30
 8008a28:	20000f54 	.word	0x20000f54
 8008a2c:	20000ed0 	.word	0x20000ed0
 8008a30:	e000ed04 	.word	0xe000ed04
 8008a34:	20000e3c 	.word	0x20000e3c

08008a38 <vTaskDelay>:
	{
 8008a38:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a3a:	b940      	cbnz	r0, 8008a4e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <vTaskDelay+0x40>)
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
	}
 8008a4c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <vTaskDelay+0x44>)
 8008a50:	6819      	ldr	r1, [r3, #0]
 8008a52:	b141      	cbz	r1, 8008a66 <vTaskDelay+0x2e>
 8008a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a58:	f383 8811 	msr	BASEPRI, r3
 8008a5c:	f3bf 8f6f 	isb	sy
 8008a60:	f3bf 8f4f 	dsb	sy
 8008a64:	e7fe      	b.n	8008a64 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008a66:	f7ff fed1 	bl	800880c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a6a:	f7ff fde1 	bl	8008630 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008a6e:	f7ff ff6d 	bl	800894c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d0e2      	beq.n	8008a3c <vTaskDelay+0x4>
 8008a76:	e7e9      	b.n	8008a4c <vTaskDelay+0x14>
 8008a78:	e000ed04 	.word	0xe000ed04
 8008a7c:	20000ed4 	.word	0x20000ed4

08008a80 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a80:	4b17      	ldr	r3, [pc, #92]	; (8008ae0 <vTaskSwitchContext+0x60>)
{
 8008a82:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	4b17      	ldr	r3, [pc, #92]	; (8008ae4 <vTaskSwitchContext+0x64>)
 8008a88:	b112      	cbz	r2, 8008a90 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8008a8a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a8c:	601a      	str	r2, [r3, #0]
}
 8008a8e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8008a90:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <vTaskSwitchContext+0x68>)
 8008a94:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008a96:	fab3 f383 	clz	r3, r3
 8008a9a:	2214      	movs	r2, #20
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	f1c3 031f 	rsb	r3, r3, #31
 8008aa2:	435a      	muls	r2, r3
 8008aa4:	4911      	ldr	r1, [pc, #68]	; (8008aec <vTaskSwitchContext+0x6c>)
 8008aa6:	588c      	ldr	r4, [r1, r2]
 8008aa8:	1888      	adds	r0, r1, r2
 8008aaa:	b944      	cbnz	r4, 8008abe <vTaskSwitchContext+0x3e>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	e7fe      	b.n	8008abc <vTaskSwitchContext+0x3c>
 8008abe:	6844      	ldr	r4, [r0, #4]
 8008ac0:	3208      	adds	r2, #8
 8008ac2:	6864      	ldr	r4, [r4, #4]
 8008ac4:	440a      	add	r2, r1
 8008ac6:	4294      	cmp	r4, r2
 8008ac8:	bf08      	it	eq
 8008aca:	6862      	ldreq	r2, [r4, #4]
 8008acc:	6044      	str	r4, [r0, #4]
 8008ace:	bf08      	it	eq
 8008ad0:	6042      	streq	r2, [r0, #4]
 8008ad2:	2214      	movs	r2, #20
 8008ad4:	fb02 1303 	mla	r3, r2, r3, r1
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <vTaskSwitchContext+0x70>)
 8008ade:	e7d5      	b.n	8008a8c <vTaskSwitchContext+0xc>
 8008ae0:	20000ed4 	.word	0x20000ed4
 8008ae4:	20000f54 	.word	0x20000f54
 8008ae8:	20000edc 	.word	0x20000edc
 8008aec:	20000e3c 	.word	0x20000e3c
 8008af0:	20000e30 	.word	0x20000e30

08008af4 <vTaskPlaceOnEventList>:
{
 8008af4:	b510      	push	{r4, lr}
 8008af6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8008af8:	b940      	cbnz	r0, 8008b0c <vTaskPlaceOnEventList+0x18>
 8008afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	e7fe      	b.n	8008b0a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b0c:	4b05      	ldr	r3, [pc, #20]	; (8008b24 <vTaskPlaceOnEventList+0x30>)
 8008b0e:	6819      	ldr	r1, [r3, #0]
 8008b10:	3118      	adds	r1, #24
 8008b12:	f7ff f939 	bl	8007d88 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b16:	4620      	mov	r0, r4
}
 8008b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	f7ff bd87 	b.w	8008630 <prvAddCurrentTaskToDelayedList>
 8008b22:	bf00      	nop
 8008b24:	20000e30 	.word	0x20000e30

08008b28 <vTaskPlaceOnEventListRestricted>:
	{
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8008b2e:	b940      	cbnz	r0, 8008b42 <vTaskPlaceOnEventListRestricted+0x1a>
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	e7fe      	b.n	8008b40 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b42:	4b08      	ldr	r3, [pc, #32]	; (8008b64 <vTaskPlaceOnEventListRestricted+0x3c>)
 8008b44:	6819      	ldr	r1, [r3, #0]
 8008b46:	3118      	adds	r1, #24
 8008b48:	f7ff f912 	bl	8007d70 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8008b4c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b4e:	4621      	mov	r1, r4
 8008b50:	bf08      	it	eq
 8008b52:	4628      	moveq	r0, r5
	}
 8008b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b58:	bf18      	it	ne
 8008b5a:	f04f 30ff 	movne.w	r0, #4294967295
 8008b5e:	f7ff bd67 	b.w	8008630 <prvAddCurrentTaskToDelayedList>
 8008b62:	bf00      	nop
 8008b64:	20000e30 	.word	0x20000e30

08008b68 <xTaskRemoveFromEventList>:
{
 8008b68:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008b6a:	68c3      	ldr	r3, [r0, #12]
 8008b6c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8008b6e:	b944      	cbnz	r4, 8008b82 <xTaskRemoveFromEventList+0x1a>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	e7fe      	b.n	8008b80 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b82:	f104 0518 	add.w	r5, r4, #24
 8008b86:	4628      	mov	r0, r5
 8008b88:	f7ff f915 	bl	8007db6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8c:	4b11      	ldr	r3, [pc, #68]	; (8008bd4 <xTaskRemoveFromEventList+0x6c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b9e3      	cbnz	r3, 8008bcc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008b92:	1d25      	adds	r5, r4, #4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f7ff f90e 	bl	8007db6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	490e      	ldr	r1, [pc, #56]	; (8008bd8 <xTaskRemoveFromEventList+0x70>)
 8008b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008ba0:	6808      	ldr	r0, [r1, #0]
 8008ba2:	4093      	lsls	r3, r2
 8008ba4:	4303      	orrs	r3, r0
 8008ba6:	2014      	movs	r0, #20
 8008ba8:	600b      	str	r3, [r1, #0]
 8008baa:	4629      	mov	r1, r5
 8008bac:	4b0b      	ldr	r3, [pc, #44]	; (8008bdc <xTaskRemoveFromEventList+0x74>)
 8008bae:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bb2:	f7ff f8dd 	bl	8007d70 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bb6:	4b0a      	ldr	r3, [pc, #40]	; (8008be0 <xTaskRemoveFromEventList+0x78>)
 8008bb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8008bc0:	bf85      	ittet	hi
 8008bc2:	2001      	movhi	r0, #1
 8008bc4:	4b07      	ldrhi	r3, [pc, #28]	; (8008be4 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8008bc6:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8008bc8:	6018      	strhi	r0, [r3, #0]
}
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008bcc:	4629      	mov	r1, r5
 8008bce:	4806      	ldr	r0, [pc, #24]	; (8008be8 <xTaskRemoveFromEventList+0x80>)
 8008bd0:	e7ef      	b.n	8008bb2 <xTaskRemoveFromEventList+0x4a>
 8008bd2:	bf00      	nop
 8008bd4:	20000ed4 	.word	0x20000ed4
 8008bd8:	20000edc 	.word	0x20000edc
 8008bdc:	20000e3c 	.word	0x20000e3c
 8008be0:	20000e30 	.word	0x20000e30
 8008be4:	20000f54 	.word	0x20000f54
 8008be8:	20000f10 	.word	0x20000f10

08008bec <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008bec:	4b03      	ldr	r3, [pc, #12]	; (8008bfc <vTaskInternalSetTimeOutState+0x10>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <vTaskInternalSetTimeOutState+0x14>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6043      	str	r3, [r0, #4]
}
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	20000f0c 	.word	0x20000f0c
 8008c00:	20000f50 	.word	0x20000f50

08008c04 <xTaskCheckForTimeOut>:
{
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8008c08:	4605      	mov	r5, r0
 8008c0a:	b940      	cbnz	r0, 8008c1e <xTaskCheckForTimeOut+0x1a>
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	e7fe      	b.n	8008c1c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8008c1e:	b941      	cbnz	r1, 8008c32 <xTaskCheckForTimeOut+0x2e>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	e7fe      	b.n	8008c30 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8008c32:	f000 facf 	bl	80091d4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <xTaskCheckForTimeOut+0x70>)
 8008c38:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	d010      	beq.n	8008c62 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c40:	480d      	ldr	r0, [pc, #52]	; (8008c78 <xTaskCheckForTimeOut+0x74>)
 8008c42:	682e      	ldr	r6, [r5, #0]
 8008c44:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c46:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008c48:	4286      	cmp	r6, r0
 8008c4a:	d001      	beq.n	8008c50 <xTaskCheckForTimeOut+0x4c>
 8008c4c:	428a      	cmp	r2, r1
 8008c4e:	d90f      	bls.n	8008c70 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008c50:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c52:	4283      	cmp	r3, r0
 8008c54:	d90a      	bls.n	8008c6c <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8008c56:	1a5b      	subs	r3, r3, r1
 8008c58:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c5a:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8008c5c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c5e:	f7ff ffc5 	bl	8008bec <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8008c62:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008c64:	f000 fad8 	bl	8009218 <vPortExitCritical>
}
 8008c68:	4620      	mov	r0, r4
 8008c6a:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008c70:	2401      	movs	r4, #1
 8008c72:	e7f7      	b.n	8008c64 <xTaskCheckForTimeOut+0x60>
 8008c74:	20000f50 	.word	0x20000f50
 8008c78:	20000f0c 	.word	0x20000f0c

08008c7c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	4b01      	ldr	r3, [pc, #4]	; (8008c84 <vTaskMissedYield+0x8>)
 8008c80:	601a      	str	r2, [r3, #0]
}
 8008c82:	4770      	bx	lr
 8008c84:	20000f54 	.word	0x20000f54

08008c88 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <xTaskGetSchedulerState+0x18>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	b133      	cbz	r3, 8008c9c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c8e:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <xTaskGetSchedulerState+0x1c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c94:	bf0c      	ite	eq
 8008c96:	2002      	moveq	r0, #2
 8008c98:	2000      	movne	r0, #0
 8008c9a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c9c:	2001      	movs	r0, #1
	}
 8008c9e:	4770      	bx	lr
 8008ca0:	20000f24 	.word	0x20000f24
 8008ca4:	20000ed4 	.word	0x20000ed4

08008ca8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008caa:	4c11      	ldr	r4, [pc, #68]	; (8008cf0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008cac:	f000 fa92 	bl	80091d4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008cb0:	6825      	ldr	r5, [r4, #0]
 8008cb2:	b9bd      	cbnz	r5, 8008ce4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008cb4:	4f0f      	ldr	r7, [pc, #60]	; (8008cf4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8008cb6:	4e10      	ldr	r6, [pc, #64]	; (8008cf8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff f84b 	bl	8007d54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff f848 	bl	8007d54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cc4:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cc6:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8008cc8:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cca:	4b0d      	ldr	r3, [pc, #52]	; (8008d00 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ccc:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8008cce:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cd0:	4a0c      	ldr	r2, [pc, #48]	; (8008d04 <prvCheckForValidListAndQueue+0x5c>)
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <prvCheckForValidListAndQueue+0x60>)
 8008cd4:	9500      	str	r5, [sp, #0]
 8008cd6:	f7ff f941 	bl	8007f5c <xQueueGenericCreateStatic>
 8008cda:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cdc:	b110      	cbz	r0, 8008ce4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008cde:	490b      	ldr	r1, [pc, #44]	; (8008d0c <prvCheckForValidListAndQueue+0x64>)
 8008ce0:	f7ff fb3a 	bl	8008358 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8008ce4:	b003      	add	sp, #12
 8008ce6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008cea:	f000 ba95 	b.w	8009218 <vPortExitCritical>
 8008cee:	bf00      	nop
 8008cf0:	2000104c 	.word	0x2000104c
 8008cf4:	20000fd8 	.word	0x20000fd8
 8008cf8:	20000fec 	.word	0x20000fec
 8008cfc:	20000f58 	.word	0x20000f58
 8008d00:	20000f5c 	.word	0x20000f5c
 8008d04:	20000f60 	.word	0x20000f60
 8008d08:	20001004 	.word	0x20001004
 8008d0c:	0800dd2e 	.word	0x0800dd2e

08008d10 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8008d10:	4291      	cmp	r1, r2
{
 8008d12:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008d14:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d16:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8008d18:	d80a      	bhi.n	8008d30 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d1a:	1ad2      	subs	r2, r2, r3
 8008d1c:	6983      	ldr	r3, [r0, #24]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d20d      	bcs.n	8008d3e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008d22:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <prvInsertTimerInActiveList+0x34>)
 8008d24:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	f7ff f82e 	bl	8007d88 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008d2c:	2000      	movs	r0, #0
}
 8008d2e:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d201      	bcs.n	8008d38 <prvInsertTimerInActiveList+0x28>
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d202      	bcs.n	8008d3e <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d38:	4b03      	ldr	r3, [pc, #12]	; (8008d48 <prvInsertTimerInActiveList+0x38>)
 8008d3a:	1d01      	adds	r1, r0, #4
 8008d3c:	e7f3      	b.n	8008d26 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008d3e:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008d40:	e7f5      	b.n	8008d2e <prvInsertTimerInActiveList+0x1e>
 8008d42:	bf00      	nop
 8008d44:	20000f5c 	.word	0x20000f5c
 8008d48:	20000f58 	.word	0x20000f58

08008d4c <xTimerCreateTimerTask>:
{
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8008d50:	f7ff ffaa 	bl	8008ca8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8008d54:	4b12      	ldr	r3, [pc, #72]	; (8008da0 <xTimerCreateTimerTask+0x54>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	b1b3      	cbz	r3, 8008d88 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d5a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d5c:	aa07      	add	r2, sp, #28
 8008d5e:	a906      	add	r1, sp, #24
 8008d60:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d62:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d66:	f7f8 f98f 	bl	8001088 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d6a:	9b05      	ldr	r3, [sp, #20]
 8008d6c:	9a07      	ldr	r2, [sp, #28]
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	9b06      	ldr	r3, [sp, #24]
 8008d72:	490c      	ldr	r1, [pc, #48]	; (8008da4 <xTimerCreateTimerTask+0x58>)
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	2302      	movs	r3, #2
 8008d78:	480b      	ldr	r0, [pc, #44]	; (8008da8 <xTimerCreateTimerTask+0x5c>)
 8008d7a:	9300      	str	r3, [sp, #0]
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	f7ff fc9d 	bl	80086bc <xTaskCreateStatic>
 8008d82:	4b0a      	ldr	r3, [pc, #40]	; (8008dac <xTimerCreateTimerTask+0x60>)
 8008d84:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008d86:	b940      	cbnz	r0, 8008d9a <xTimerCreateTimerTask+0x4e>
 8008d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008d98:	e7fe      	b.n	8008d98 <xTimerCreateTimerTask+0x4c>
}
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	b008      	add	sp, #32
 8008d9e:	bd10      	pop	{r4, pc}
 8008da0:	2000104c 	.word	0x2000104c
 8008da4:	0800dd33 	.word	0x0800dd33
 8008da8:	08008f49 	.word	0x08008f49
 8008dac:	20001050 	.word	0x20001050

08008db0 <xTimerCreate>:
	{
 8008db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db4:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008db6:	202c      	movs	r0, #44	; 0x2c
	{
 8008db8:	460d      	mov	r5, r1
 8008dba:	4617      	mov	r7, r2
 8008dbc:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8008dbe:	f000 fb3b 	bl	8009438 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	b1c0      	cbz	r0, 8008df8 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008dc6:	b945      	cbnz	r5, 8008dda <xTimerCreate+0x2a>
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	e7fe      	b.n	8008dd8 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8008dda:	f7ff ff65 	bl	8008ca8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008dde:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008de0:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008de4:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8008de6:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8008dea:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008dec:	1d20      	adds	r0, r4, #4
 8008dee:	f7fe ffbc 	bl	8007d6a <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8008df8:	4620      	mov	r0, r4
 8008dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008dfe <xTimerCreateStatic>:
	{
 8008dfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008e02:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e04:	232c      	movs	r3, #44	; 0x2c
 8008e06:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e08:	9b01      	ldr	r3, [sp, #4]
	{
 8008e0a:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e0c:	2b2c      	cmp	r3, #44	; 0x2c
	{
 8008e0e:	460d      	mov	r5, r1
 8008e10:	4617      	mov	r7, r2
 8008e12:	9c09      	ldr	r4, [sp, #36]	; 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e14:	d008      	beq.n	8008e28 <xTimerCreateStatic+0x2a>
 8008e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	e7fe      	b.n	8008e26 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8008e28:	b944      	cbnz	r4, 8008e3c <xTimerCreateStatic+0x3e>
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	e7fe      	b.n	8008e3a <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008e3c:	b941      	cbnz	r1, 8008e50 <xTimerCreateStatic+0x52>
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	e7fe      	b.n	8008e4e <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8008e50:	f7ff ff2a 	bl	8008ca8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008e54:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008e56:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008e58:	6263      	str	r3, [r4, #36]	; 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8008e5a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8008e5e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8008e62:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008e64:	f7fe ff81 	bl	8007d6a <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008e68:	2301      	movs	r3, #1
	}
 8008e6a:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8008e6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	}
 8008e70:	b002      	add	sp, #8
 8008e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008e78 <xTimerGenericCommand>:
{
 8008e78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008e7a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008e7c:	4604      	mov	r4, r0
{
 8008e7e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008e80:	b940      	cbnz	r0, 8008e94 <xTimerGenericCommand+0x1c>
 8008e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e86:	f383 8811 	msr	BASEPRI, r3
 8008e8a:	f3bf 8f6f 	isb	sy
 8008e8e:	f3bf 8f4f 	dsb	sy
 8008e92:	e7fe      	b.n	8008e92 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008e94:	4d0c      	ldr	r5, [pc, #48]	; (8008ec8 <xTimerGenericCommand+0x50>)
 8008e96:	6828      	ldr	r0, [r5, #0]
 8008e98:	b178      	cbz	r0, 8008eba <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e9a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e9c:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8008ea0:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ea2:	dc0c      	bgt.n	8008ebe <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ea4:	f7ff fef0 	bl	8008c88 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ea8:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eaa:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eac:	bf14      	ite	ne
 8008eae:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eb0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008eb2:	6828      	ldr	r0, [r5, #0]
 8008eb4:	a901      	add	r1, sp, #4
 8008eb6:	f7ff f89b 	bl	8007ff0 <xQueueGenericSend>
}
 8008eba:	b004      	add	sp, #16
 8008ebc:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	a901      	add	r1, sp, #4
 8008ec2:	f7ff f947 	bl	8008154 <xQueueGenericSendFromISR>
 8008ec6:	e7f8      	b.n	8008eba <xTimerGenericCommand+0x42>
 8008ec8:	2000104c 	.word	0x2000104c

08008ecc <prvSwitchTimerLists>:
{
 8008ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ed0:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ed4:	4d1a      	ldr	r5, [pc, #104]	; (8008f40 <prvSwitchTimerLists+0x74>)
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	b932      	cbnz	r2, 8008eea <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8008edc:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <prvSwitchTimerLists+0x78>)
 8008ede:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ee0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ee2:	6029      	str	r1, [r5, #0]
}
 8008ee4:	b002      	add	sp, #8
 8008ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eea:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eec:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008eee:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ef0:	1d27      	adds	r7, r4, #4
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	f7fe ff5f 	bl	8007db6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ef8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008efa:	4620      	mov	r0, r4
 8008efc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008efe:	69e3      	ldr	r3, [r4, #28]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d1e8      	bne.n	8008ed6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f04:	69a3      	ldr	r3, [r4, #24]
 8008f06:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8008f08:	429e      	cmp	r6, r3
 8008f0a:	d206      	bcs.n	8008f1a <prvSwitchTimerLists+0x4e>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f0c:	4639      	mov	r1, r7
 8008f0e:	6828      	ldr	r0, [r5, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f10:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f12:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f14:	f7fe ff38 	bl	8007d88 <vListInsert>
 8008f18:	e7dd      	b.n	8008ed6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4632      	mov	r2, r6
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4620      	mov	r0, r4
 8008f22:	f8cd 8000 	str.w	r8, [sp]
 8008f26:	f7ff ffa7 	bl	8008e78 <xTimerGenericCommand>
				configASSERT( xResult );
 8008f2a:	2800      	cmp	r0, #0
 8008f2c:	d1d3      	bne.n	8008ed6 <prvSwitchTimerLists+0xa>
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	e7fe      	b.n	8008f3e <prvSwitchTimerLists+0x72>
 8008f40:	20000f58 	.word	0x20000f58
 8008f44:	20000f5c 	.word	0x20000f5c

08008f48 <prvTimerTask>:
{
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f4c:	4e72      	ldr	r6, [pc, #456]	; (8009118 <prvTimerTask+0x1d0>)
					portYIELD_WITHIN_API();
 8008f4e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8009128 <prvTimerTask+0x1e0>
 8008f52:	46b0      	mov	r8, r6
{
 8008f54:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008f56:	6833      	ldr	r3, [r6, #0]
 8008f58:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8008f5c:	f1bb 0f00 	cmp.w	fp, #0
 8008f60:	d04a      	beq.n	8008ff8 <prvTimerTask+0xb0>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8008f68:	f7ff fc50 	bl	800880c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8008f6c:	f7ff fc56 	bl	800881c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008f70:	4d6a      	ldr	r5, [pc, #424]	; (800911c <prvTimerTask+0x1d4>)
	xTimeNow = xTaskGetTickCount();
 8008f72:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	462f      	mov	r7, r5
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	d23f      	bcs.n	8008ffc <prvTimerTask+0xb4>
		prvSwitchTimerLists();
 8008f7c:	f7ff ffa6 	bl	8008ecc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008f80:	602c      	str	r4, [r5, #0]
			( void ) xTaskResumeAll();
 8008f82:	f7ff fce3 	bl	800894c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f86:	f04f 0b00 	mov.w	fp, #0
 8008f8a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8009124 <prvTimerTask+0x1dc>
 8008f8e:	2200      	movs	r2, #0
 8008f90:	f8da 0000 	ldr.w	r0, [sl]
 8008f94:	a903      	add	r1, sp, #12
 8008f96:	f7ff f93f 	bl	8008218 <xQueueReceive>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d0db      	beq.n	8008f56 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f9e:	9b03      	ldr	r3, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	dbf4      	blt.n	8008f8e <prvTimerTask+0x46>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fa4:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fa6:	6963      	ldr	r3, [r4, #20]
 8008fa8:	b113      	cbz	r3, 8008fb0 <prvTimerTask+0x68>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008faa:	1d20      	adds	r0, r4, #4
 8008fac:	f7fe ff03 	bl	8007db6 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8008fb0:	f7ff fc34 	bl	800881c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008fb4:	683b      	ldr	r3, [r7, #0]
	xTimeNow = xTaskGetTickCount();
 8008fb6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8008fb8:	4298      	cmp	r0, r3
 8008fba:	d201      	bcs.n	8008fc0 <prvTimerTask+0x78>
		prvSwitchTimerLists();
 8008fbc:	f7ff ff86 	bl	8008ecc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	603d      	str	r5, [r7, #0]
			switch( xMessage.xMessageID )
 8008fc4:	2b09      	cmp	r3, #9
 8008fc6:	d8e2      	bhi.n	8008f8e <prvTimerTask+0x46>
 8008fc8:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <prvTimerTask+0x88>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08009091 	.word	0x08009091
 8008fd4:	08009091 	.word	0x08009091
 8008fd8:	08009091 	.word	0x08009091
 8008fdc:	08008f8f 	.word	0x08008f8f
 8008fe0:	080090df 	.word	0x080090df
 8008fe4:	08009105 	.word	0x08009105
 8008fe8:	08009091 	.word	0x08009091
 8008fec:	08009091 	.word	0x08009091
 8008ff0:	08008f8f 	.word	0x08008f8f
 8008ff4:	080090df 	.word	0x080090df
		xNextExpireTime = ( TickType_t ) 0U;
 8008ff8:	46da      	mov	sl, fp
 8008ffa:	e7b5      	b.n	8008f68 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8008ffc:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ffe:	f1bb 0f00 	cmp.w	fp, #0
 8009002:	d02a      	beq.n	800905a <prvTimerTask+0x112>
 8009004:	4582      	cmp	sl, r0
 8009006:	d841      	bhi.n	800908c <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8009008:	f7ff fca0 	bl	800894c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800900c:	f8d8 3000 	ldr.w	r3, [r8]
 8009010:	68db      	ldr	r3, [r3, #12]
 8009012:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009014:	1d28      	adds	r0, r5, #4
 8009016:	f7fe fece 	bl	8007db6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800901a:	69eb      	ldr	r3, [r5, #28]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d118      	bne.n	8009052 <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009020:	69a9      	ldr	r1, [r5, #24]
 8009022:	4653      	mov	r3, sl
 8009024:	4622      	mov	r2, r4
 8009026:	4628      	mov	r0, r5
 8009028:	4451      	add	r1, sl
 800902a:	f7ff fe71 	bl	8008d10 <prvInsertTimerInActiveList>
 800902e:	b180      	cbz	r0, 8009052 <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009030:	2300      	movs	r3, #0
 8009032:	4652      	mov	r2, sl
 8009034:	4619      	mov	r1, r3
 8009036:	4628      	mov	r0, r5
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	f7ff ff1d 	bl	8008e78 <xTimerGenericCommand>
			configASSERT( xResult );
 800903e:	b940      	cbnz	r0, 8009052 <prvTimerTask+0x10a>
 8009040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009044:	f383 8811 	msr	BASEPRI, r3
 8009048:	f3bf 8f6f 	isb	sy
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	e7fe      	b.n	8009050 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009052:	4628      	mov	r0, r5
 8009054:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009056:	4798      	blx	r3
}
 8009058:	e795      	b.n	8008f86 <prvTimerTask+0x3e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800905a:	4b31      	ldr	r3, [pc, #196]	; (8009120 <prvTimerTask+0x1d8>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	fab2 f282 	clz	r2, r2
 8009064:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009066:	4b2f      	ldr	r3, [pc, #188]	; (8009124 <prvTimerTask+0x1dc>)
 8009068:	ebaa 0104 	sub.w	r1, sl, r4
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	f7ff f985 	bl	800837c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009072:	f7ff fc6b 	bl	800894c <xTaskResumeAll>
 8009076:	2800      	cmp	r0, #0
 8009078:	d185      	bne.n	8008f86 <prvTimerTask+0x3e>
					portYIELD_WITHIN_API();
 800907a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800907e:	f8c9 3000 	str.w	r3, [r9]
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	f3bf 8f6f 	isb	sy
 800908a:	e77c      	b.n	8008f86 <prvTimerTask+0x3e>
 800908c:	2200      	movs	r2, #0
 800908e:	e7ea      	b.n	8009066 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009090:	69a1      	ldr	r1, [r4, #24]
 8009092:	9b04      	ldr	r3, [sp, #16]
 8009094:	462a      	mov	r2, r5
 8009096:	4620      	mov	r0, r4
 8009098:	4419      	add	r1, r3
 800909a:	f7ff fe39 	bl	8008d10 <prvInsertTimerInActiveList>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f af75 	beq.w	8008f8e <prvTimerTask+0x46>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090a6:	4620      	mov	r0, r4
 80090a8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80090aa:	69e3      	ldr	r3, [r4, #28]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	f47f af6e 	bne.w	8008f8e <prvTimerTask+0x46>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090b2:	2300      	movs	r3, #0
 80090b4:	69a2      	ldr	r2, [r4, #24]
 80090b6:	9904      	ldr	r1, [sp, #16]
 80090b8:	4620      	mov	r0, r4
 80090ba:	440a      	add	r2, r1
 80090bc:	f8cd b000 	str.w	fp, [sp]
 80090c0:	4619      	mov	r1, r3
 80090c2:	f7ff fed9 	bl	8008e78 <xTimerGenericCommand>
							configASSERT( xResult );
 80090c6:	2800      	cmp	r0, #0
 80090c8:	f47f af61 	bne.w	8008f8e <prvTimerTask+0x46>
 80090cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	e7fe      	b.n	80090dc <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090de:	9904      	ldr	r1, [sp, #16]
 80090e0:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090e2:	b941      	cbnz	r1, 80090f6 <prvTimerTask+0x1ae>
 80090e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e8:	f383 8811 	msr	BASEPRI, r3
 80090ec:	f3bf 8f6f 	isb	sy
 80090f0:	f3bf 8f4f 	dsb	sy
 80090f4:	e7fe      	b.n	80090f4 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090f6:	462b      	mov	r3, r5
 80090f8:	462a      	mov	r2, r5
 80090fa:	4620      	mov	r0, r4
 80090fc:	4429      	add	r1, r5
 80090fe:	f7ff fe07 	bl	8008d10 <prvInsertTimerInActiveList>
					break;
 8009102:	e744      	b.n	8008f8e <prvTimerTask+0x46>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009104:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	f47f af40 	bne.w	8008f8e <prvTimerTask+0x46>
							vPortFree( pxTimer );
 800910e:	4620      	mov	r0, r4
 8009110:	f000 fa1c 	bl	800954c <vPortFree>
 8009114:	e73b      	b.n	8008f8e <prvTimerTask+0x46>
 8009116:	bf00      	nop
 8009118:	20000f58 	.word	0x20000f58
 800911c:	20001000 	.word	0x20001000
 8009120:	20000f5c 	.word	0x20000f5c
 8009124:	2000104c 	.word	0x2000104c
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800912c:	4806      	ldr	r0, [pc, #24]	; (8009148 <prvPortStartFirstTask+0x1c>)
 800912e:	6800      	ldr	r0, [r0, #0]
 8009130:	6800      	ldr	r0, [r0, #0]
 8009132:	f380 8808 	msr	MSP, r0
 8009136:	b662      	cpsie	i
 8009138:	b661      	cpsie	f
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	f3bf 8f6f 	isb	sy
 8009142:	df00      	svc	0
 8009144:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009146:	0000      	.short	0x0000
 8009148:	e000ed08 	.word	0xe000ed08

0800914c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800914c:	2300      	movs	r3, #0
{
 800914e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009150:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009152:	4b0d      	ldr	r3, [pc, #52]	; (8009188 <prvTaskExitError+0x3c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3301      	adds	r3, #1
 8009158:	d008      	beq.n	800916c <prvTaskExitError+0x20>
 800915a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915e:	f383 8811 	msr	BASEPRI, r3
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	f3bf 8f4f 	dsb	sy
 800916a:	e7fe      	b.n	800916a <prvTaskExitError+0x1e>
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800917c:	9b01      	ldr	r3, [sp, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0fc      	beq.n	800917c <prvTaskExitError+0x30>
}
 8009182:	b002      	add	sp, #8
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000011c 	.word	0x2000011c

0800918c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800918c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009190:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009194:	4b05      	ldr	r3, [pc, #20]	; (80091ac <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009196:	f021 0101 	bic.w	r1, r1, #1
 800919a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800919e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80091a2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80091a6:	3840      	subs	r0, #64	; 0x40
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	0800914d 	.word	0x0800914d

080091b0 <SVC_Handler>:
	__asm volatile (
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <pxCurrentTCBConst2>)
 80091b2:	6819      	ldr	r1, [r3, #0]
 80091b4:	6808      	ldr	r0, [r1, #0]
 80091b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80091ba:	f380 8809 	msr	PSP, r0
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f04f 0000 	mov.w	r0, #0
 80091c6:	f380 8811 	msr	BASEPRI, r0
 80091ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80091ce:	4770      	bx	lr

080091d0 <pxCurrentTCBConst2>:
 80091d0:	20000e30 	.word	0x20000e30

080091d4 <vPortEnterCritical>:
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80091e4:	4a0a      	ldr	r2, [pc, #40]	; (8009210 <vPortEnterCritical+0x3c>)
 80091e6:	6813      	ldr	r3, [r2, #0]
 80091e8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80091ea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80091ec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80091ee:	d10d      	bne.n	800920c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80091f0:	4b08      	ldr	r3, [pc, #32]	; (8009214 <vPortEnterCritical+0x40>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80091f8:	d008      	beq.n	800920c <vPortEnterCritical+0x38>
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	e7fe      	b.n	800920a <vPortEnterCritical+0x36>
	}
}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	2000011c 	.word	0x2000011c
 8009214:	e000ed04 	.word	0xe000ed04

08009218 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009218:	4a08      	ldr	r2, [pc, #32]	; (800923c <vPortExitCritical+0x24>)
 800921a:	6813      	ldr	r3, [r2, #0]
 800921c:	b943      	cbnz	r3, 8009230 <vPortExitCritical+0x18>
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	e7fe      	b.n	800922e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009230:	3b01      	subs	r3, #1
 8009232:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009234:	b90b      	cbnz	r3, 800923a <vPortExitCritical+0x22>
	__asm volatile
 8009236:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800923a:	4770      	bx	lr
 800923c:	2000011c 	.word	0x2000011c

08009240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009240:	f3ef 8009 	mrs	r0, PSP
 8009244:	f3bf 8f6f 	isb	sy
 8009248:	4b0d      	ldr	r3, [pc, #52]	; (8009280 <pxCurrentTCBConst>)
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009250:	6010      	str	r0, [r2, #0]
 8009252:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009256:	f04f 0050 	mov.w	r0, #80	; 0x50
 800925a:	f380 8811 	msr	BASEPRI, r0
 800925e:	f7ff fc0f 	bl	8008a80 <vTaskSwitchContext>
 8009262:	f04f 0000 	mov.w	r0, #0
 8009266:	f380 8811 	msr	BASEPRI, r0
 800926a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800926e:	6819      	ldr	r1, [r3, #0]
 8009270:	6808      	ldr	r0, [r1, #0]
 8009272:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009276:	f380 8809 	msr	PSP, r0
 800927a:	f3bf 8f6f 	isb	sy
 800927e:	4770      	bx	lr

08009280 <pxCurrentTCBConst>:
 8009280:	20000e30 	.word	0x20000e30

08009284 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009284:	b508      	push	{r3, lr}
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009296:	f7ff fac7 	bl	8008828 <xTaskIncrementTick>
 800929a:	b118      	cbz	r0, 80092a4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800929c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <SysTick_Handler+0x28>)
 80092a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80092a4:	2300      	movs	r3, #0
 80092a6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80092aa:	bd08      	pop	{r3, pc}
 80092ac:	e000ed04 	.word	0xe000ed04

080092b0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b0:	2300      	movs	r3, #0
 80092b2:	4a08      	ldr	r2, [pc, #32]	; (80092d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b4:	4908      	ldr	r1, [pc, #32]	; (80092d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80092b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80092b8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80092ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092be:	4b07      	ldr	r3, [pc, #28]	; (80092dc <vPortSetupTimerInterrupt+0x2c>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80092c6:	4906      	ldr	r1, [pc, #24]	; (80092e0 <vPortSetupTimerInterrupt+0x30>)
 80092c8:	3b01      	subs	r3, #1
 80092ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80092cc:	2307      	movs	r3, #7
 80092ce:	6013      	str	r3, [r2, #0]
}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	e000e010 	.word	0xe000e010
 80092d8:	e000e018 	.word	0xe000e018
 80092dc:	20000000 	.word	0x20000000
 80092e0:	e000e014 	.word	0xe000e014

080092e4 <xPortStartScheduler>:
{
 80092e4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092e6:	4b26      	ldr	r3, [pc, #152]	; (8009380 <xPortStartScheduler+0x9c>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092e8:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092ea:	781a      	ldrb	r2, [r3, #0]
 80092ec:	b2d2      	uxtb	r2, r2
 80092ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092f0:	22ff      	movs	r2, #255	; 0xff
 80092f2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f4:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092f6:	4a23      	ldr	r2, [pc, #140]	; (8009384 <xPortStartScheduler+0xa0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092fe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009302:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009306:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009308:	2307      	movs	r3, #7
 800930a:	4a1f      	ldr	r2, [pc, #124]	; (8009388 <xPortStartScheduler+0xa4>)
 800930c:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800930e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009312:	1e5c      	subs	r4, r3, #1
 8009314:	0600      	lsls	r0, r0, #24
 8009316:	d40c      	bmi.n	8009332 <xPortStartScheduler+0x4e>
 8009318:	b111      	cbz	r1, 8009320 <xPortStartScheduler+0x3c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800931a:	2b03      	cmp	r3, #3
 800931c:	6013      	str	r3, [r2, #0]
 800931e:	d011      	beq.n	8009344 <xPortStartScheduler+0x60>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	e7fe      	b.n	8009330 <xPortStartScheduler+0x4c>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009332:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009336:	2101      	movs	r1, #1
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f88d 3003 	strb.w	r3, [sp, #3]
 8009340:	4623      	mov	r3, r4
 8009342:	e7e4      	b.n	800930e <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009344:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8009348:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800934a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	4a0c      	ldr	r2, [pc, #48]	; (8009380 <xPortStartScheduler+0x9c>)
 8009350:	b2db      	uxtb	r3, r3
 8009352:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009354:	4b0d      	ldr	r3, [pc, #52]	; (800938c <xPortStartScheduler+0xa8>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800935c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009364:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009366:	f7ff ffa3 	bl	80092b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800936a:	4b09      	ldr	r3, [pc, #36]	; (8009390 <xPortStartScheduler+0xac>)
 800936c:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 800936e:	f7ff fedd 	bl	800912c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009372:	f7ff fb85 	bl	8008a80 <vTaskSwitchContext>
	prvTaskExitError();
 8009376:	f7ff fee9 	bl	800914c <prvTaskExitError>
}
 800937a:	4620      	mov	r0, r4
 800937c:	b002      	add	sp, #8
 800937e:	bd10      	pop	{r4, pc}
 8009380:	e000e400 	.word	0xe000e400
 8009384:	20001054 	.word	0x20001054
 8009388:	20001058 	.word	0x20001058
 800938c:	e000ed20 	.word	0xe000ed20
 8009390:	2000011c 	.word	0x2000011c

08009394 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009394:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009398:	2b0f      	cmp	r3, #15
 800939a:	d90e      	bls.n	80093ba <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800939c:	4a10      	ldr	r2, [pc, #64]	; (80093e0 <vPortValidateInterruptPriority+0x4c>)
 800939e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80093a0:	4a10      	ldr	r2, [pc, #64]	; (80093e4 <vPortValidateInterruptPriority+0x50>)
 80093a2:	7812      	ldrb	r2, [r2, #0]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d908      	bls.n	80093ba <vPortValidateInterruptPriority+0x26>
 80093a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ac:	f383 8811 	msr	BASEPRI, r3
 80093b0:	f3bf 8f6f 	isb	sy
 80093b4:	f3bf 8f4f 	dsb	sy
 80093b8:	e7fe      	b.n	80093b8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80093ba:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <vPortValidateInterruptPriority+0x54>)
 80093bc:	4a0b      	ldr	r2, [pc, #44]	; (80093ec <vPortValidateInterruptPriority+0x58>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6812      	ldr	r2, [r2, #0]
 80093c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d908      	bls.n	80093dc <vPortValidateInterruptPriority+0x48>
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	f383 8811 	msr	BASEPRI, r3
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	f3bf 8f4f 	dsb	sy
 80093da:	e7fe      	b.n	80093da <vPortValidateInterruptPriority+0x46>
	}
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000e3f0 	.word	0xe000e3f0
 80093e4:	20001054 	.word	0x20001054
 80093e8:	e000ed0c 	.word	0xe000ed0c
 80093ec:	20001058 	.word	0x20001058

080093f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093f0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093f2:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <prvInsertBlockIntoFreeList+0x40>)
 80093f4:	461a      	mov	r2, r3
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4283      	cmp	r3, r0
 80093fa:	d3fb      	bcc.n	80093f4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093fc:	6854      	ldr	r4, [r2, #4]
 80093fe:	1911      	adds	r1, r2, r4
 8009400:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009402:	bf01      	itttt	eq
 8009404:	6841      	ldreq	r1, [r0, #4]
 8009406:	4610      	moveq	r0, r2
 8009408:	1909      	addeq	r1, r1, r4
 800940a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800940c:	6844      	ldr	r4, [r0, #4]
 800940e:	1901      	adds	r1, r0, r4
 8009410:	428b      	cmp	r3, r1
 8009412:	d107      	bne.n	8009424 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009414:	4907      	ldr	r1, [pc, #28]	; (8009434 <prvInsertBlockIntoFreeList+0x44>)
 8009416:	6809      	ldr	r1, [r1, #0]
 8009418:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800941a:	bf1f      	itttt	ne
 800941c:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800941e:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009420:	1909      	addne	r1, r1, r4
 8009422:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009424:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009426:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009428:	bf18      	it	ne
 800942a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800942c:	bd10      	pop	{r4, pc}
 800942e:	bf00      	nop
 8009430:	20001c6c 	.word	0x20001c6c
 8009434:	2000105c 	.word	0x2000105c

08009438 <pvPortMalloc>:
{
 8009438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800943e:	f7ff f9e5 	bl	800880c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009442:	4b3b      	ldr	r3, [pc, #236]	; (8009530 <pvPortMalloc+0xf8>)
 8009444:	483b      	ldr	r0, [pc, #236]	; (8009534 <pvPortMalloc+0xfc>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	469c      	mov	ip, r3
 800944a:	b9d2      	cbnz	r2, 8009482 <pvPortMalloc+0x4a>
	xStart.xBlockSize = ( size_t ) 0;
 800944c:	2100      	movs	r1, #0
	uxAddress = ( size_t ) ucHeap;
 800944e:	4a3a      	ldr	r2, [pc, #232]	; (8009538 <pvPortMalloc+0x100>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009450:	4b3a      	ldr	r3, [pc, #232]	; (800953c <pvPortMalloc+0x104>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009452:	0755      	lsls	r5, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009454:	bf1c      	itt	ne
 8009456:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009458:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800945c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800945e:	6059      	str	r1, [r3, #4]
	uxAddress -= xHeapStructSize;
 8009460:	4b37      	ldr	r3, [pc, #220]	; (8009540 <pvPortMalloc+0x108>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009462:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8009466:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800946a:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800946c:	e9c2 3100 	strd	r3, r1, [r2]
	pxEnd = ( void * ) uxAddress;
 8009470:	f8cc 3000 	str.w	r3, [ip]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009474:	4b33      	ldr	r3, [pc, #204]	; (8009544 <pvPortMalloc+0x10c>)
 8009476:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009478:	4b33      	ldr	r3, [pc, #204]	; (8009548 <pvPortMalloc+0x110>)
 800947a:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800947c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009480:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009482:	6807      	ldr	r7, [r0, #0]
 8009484:	4227      	tst	r7, r4
 8009486:	d14e      	bne.n	8009526 <pvPortMalloc+0xee>
			if( xWantedSize > 0 )
 8009488:	2c00      	cmp	r4, #0
 800948a:	d03f      	beq.n	800950c <pvPortMalloc+0xd4>
				xWantedSize += xHeapStructSize;
 800948c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009490:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009492:	bf1c      	itt	ne
 8009494:	f023 0307 	bicne.w	r3, r3, #7
 8009498:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800949a:	2b00      	cmp	r3, #0
 800949c:	d043      	beq.n	8009526 <pvPortMalloc+0xee>
 800949e:	4a2a      	ldr	r2, [pc, #168]	; (8009548 <pvPortMalloc+0x110>)
 80094a0:	6816      	ldr	r6, [r2, #0]
 80094a2:	4690      	mov	r8, r2
 80094a4:	429e      	cmp	r6, r3
 80094a6:	d33e      	bcc.n	8009526 <pvPortMalloc+0xee>
				pxBlock = xStart.pxNextFreeBlock;
 80094a8:	4a24      	ldr	r2, [pc, #144]	; (800953c <pvPortMalloc+0x104>)
 80094aa:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094ac:	6869      	ldr	r1, [r5, #4]
 80094ae:	4299      	cmp	r1, r3
 80094b0:	d201      	bcs.n	80094b6 <pvPortMalloc+0x7e>
 80094b2:	6828      	ldr	r0, [r5, #0]
 80094b4:	b9a8      	cbnz	r0, 80094e2 <pvPortMalloc+0xaa>
				if( pxBlock != pxEnd )
 80094b6:	f8dc 0000 	ldr.w	r0, [ip]
 80094ba:	42a8      	cmp	r0, r5
 80094bc:	d033      	beq.n	8009526 <pvPortMalloc+0xee>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094be:	6828      	ldr	r0, [r5, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094c0:	1ac9      	subs	r1, r1, r3
 80094c2:	2910      	cmp	r1, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80094c4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80094c6:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80094c8:	d912      	bls.n	80094f0 <pvPortMalloc+0xb8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80094ca:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094cc:	0742      	lsls	r2, r0, #29
 80094ce:	d00b      	beq.n	80094e8 <pvPortMalloc+0xb0>
 80094d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d4:	f383 8811 	msr	BASEPRI, r3
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	e7fe      	b.n	80094e0 <pvPortMalloc+0xa8>
 80094e2:	462a      	mov	r2, r5
 80094e4:	4605      	mov	r5, r0
 80094e6:	e7e1      	b.n	80094ac <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80094e8:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80094ea:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80094ec:	f7ff ff80 	bl	80093f0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094f0:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094f2:	4914      	ldr	r1, [pc, #80]	; (8009544 <pvPortMalloc+0x10c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094f4:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80094f6:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80094f8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80094fa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80094fc:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009500:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009502:	bf38      	it	cc
 8009504:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009506:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009508:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800950a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800950c:	f7ff fa1e 	bl	800894c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009510:	0763      	lsls	r3, r4, #29
 8009512:	d00a      	beq.n	800952a <pvPortMalloc+0xf2>
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	e7fe      	b.n	8009524 <pvPortMalloc+0xec>
void *pvReturn = NULL;
 8009526:	2400      	movs	r4, #0
 8009528:	e7f0      	b.n	800950c <pvPortMalloc+0xd4>
}
 800952a:	4620      	mov	r0, r4
 800952c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009530:	2000105c 	.word	0x2000105c
 8009534:	20001c60 	.word	0x20001c60
 8009538:	20001060 	.word	0x20001060
 800953c:	20001c6c 	.word	0x20001c6c
 8009540:	20001c58 	.word	0x20001c58
 8009544:	20001c68 	.word	0x20001c68
 8009548:	20001c64 	.word	0x20001c64

0800954c <vPortFree>:
{
 800954c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800954e:	4604      	mov	r4, r0
 8009550:	b370      	cbz	r0, 80095b0 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009552:	4a18      	ldr	r2, [pc, #96]	; (80095b4 <vPortFree+0x68>)
 8009554:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009558:	6812      	ldr	r2, [r2, #0]
 800955a:	4213      	tst	r3, r2
 800955c:	d108      	bne.n	8009570 <vPortFree+0x24>
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	e7fe      	b.n	800956e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009570:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009574:	b141      	cbz	r1, 8009588 <vPortFree+0x3c>
 8009576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	e7fe      	b.n	8009586 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009588:	ea23 0302 	bic.w	r3, r3, r2
 800958c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009590:	f7ff f93c 	bl	800880c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009594:	4a08      	ldr	r2, [pc, #32]	; (80095b8 <vPortFree+0x6c>)
 8009596:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800959a:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800959c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80095a0:	440b      	add	r3, r1
 80095a2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80095a4:	f7ff ff24 	bl	80093f0 <prvInsertBlockIntoFreeList>
}
 80095a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80095ac:	f7ff b9ce 	b.w	800894c <xTaskResumeAll>
}
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	20001c60 	.word	0x20001c60
 80095b8:	20001c64 	.word	0x20001c64

080095bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80095bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80095be:	2200      	movs	r2, #0
 80095c0:	490e      	ldr	r1, [pc, #56]	; (80095fc <MX_USB_DEVICE_Init+0x40>)
 80095c2:	480f      	ldr	r0, [pc, #60]	; (8009600 <MX_USB_DEVICE_Init+0x44>)
 80095c4:	f7fd ffb2 	bl	800752c <USBD_Init>
 80095c8:	b108      	cbz	r0, 80095ce <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80095ca:	f7f8 f8e1 	bl	8001790 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80095ce:	490d      	ldr	r1, [pc, #52]	; (8009604 <MX_USB_DEVICE_Init+0x48>)
 80095d0:	480b      	ldr	r0, [pc, #44]	; (8009600 <MX_USB_DEVICE_Init+0x44>)
 80095d2:	f7fd ffc0 	bl	8007556 <USBD_RegisterClass>
 80095d6:	b108      	cbz	r0, 80095dc <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 80095d8:	f7f8 f8da 	bl	8001790 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80095dc:	490a      	ldr	r1, [pc, #40]	; (8009608 <MX_USB_DEVICE_Init+0x4c>)
 80095de:	4808      	ldr	r0, [pc, #32]	; (8009600 <MX_USB_DEVICE_Init+0x44>)
 80095e0:	f7fd ff5f 	bl	80074a2 <USBD_CDC_RegisterInterface>
 80095e4:	b108      	cbz	r0, 80095ea <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80095e6:	f7f8 f8d3 	bl	8001790 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80095ea:	4805      	ldr	r0, [pc, #20]	; (8009600 <MX_USB_DEVICE_Init+0x44>)
 80095ec:	f7fd ffba 	bl	8007564 <USBD_Start>
 80095f0:	b118      	cbz	r0, 80095fa <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80095f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80095f6:	f7f8 b8cb 	b.w	8001790 <Error_Handler>
}
 80095fa:	bd08      	pop	{r3, pc}
 80095fc:	20000130 	.word	0x20000130
 8009600:	2000236c 	.word	0x2000236c
 8009604:	2000000c 	.word	0x2000000c
 8009608:	20000120 	.word	0x20000120

0800960c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800960c:	2000      	movs	r0, #0
 800960e:	4770      	bx	lr

08009610 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8009610:	2000      	movs	r0, #0
 8009612:	4770      	bx	lr

08009614 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009614:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009616:	4c05      	ldr	r4, [pc, #20]	; (800962c <CDC_Receive_FS+0x18>)
{
 8009618:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800961a:	4620      	mov	r0, r4
 800961c:	f7fd ff50 	bl	80074c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009620:	4620      	mov	r0, r4
 8009622:	f7fd ff6c 	bl	80074fe <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8009626:	2000      	movs	r0, #0
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	2000236c 	.word	0x2000236c

08009630 <CDC_Init_FS>:
{
 8009630:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009632:	4c06      	ldr	r4, [pc, #24]	; (800964c <CDC_Init_FS+0x1c>)
 8009634:	2200      	movs	r2, #0
 8009636:	4620      	mov	r0, r4
 8009638:	4905      	ldr	r1, [pc, #20]	; (8009650 <CDC_Init_FS+0x20>)
 800963a:	f7fd ff39 	bl	80074b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800963e:	4620      	mov	r0, r4
 8009640:	4904      	ldr	r1, [pc, #16]	; (8009654 <CDC_Init_FS+0x24>)
 8009642:	f7fd ff3d 	bl	80074c0 <USBD_CDC_SetRxBuffer>
}
 8009646:	2000      	movs	r0, #0
 8009648:	bd10      	pop	{r4, pc}
 800964a:	bf00      	nop
 800964c:	2000236c 	.word	0x2000236c
 8009650:	20002630 	.word	0x20002630
 8009654:	20002a18 	.word	0x20002a18

08009658 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009658:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800965a:	4c09      	ldr	r4, [pc, #36]	; (8009680 <CDC_Transmit_FS+0x28>)
{
 800965c:	460a      	mov	r2, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800965e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 8009662:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009666:	b943      	cbnz	r3, 800967a <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009668:	4601      	mov	r1, r0
 800966a:	4620      	mov	r0, r4
 800966c:	f7fd ff20 	bl	80074b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009670:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8009672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009676:	f7fd bf29 	b.w	80074cc <USBD_CDC_TransmitPacket>
}
 800967a:	2001      	movs	r0, #1
 800967c:	bd10      	pop	{r4, pc}
 800967e:	bf00      	nop
 8009680:	2000236c 	.word	0x2000236c

08009684 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009684:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8009686:	4801      	ldr	r0, [pc, #4]	; (800968c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8009688:	800b      	strh	r3, [r1, #0]
}
 800968a:	4770      	bx	lr
 800968c:	2000014c 	.word	0x2000014c

08009690 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009690:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8009692:	4801      	ldr	r0, [pc, #4]	; (8009698 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8009694:	800b      	strh	r3, [r1, #0]
}
 8009696:	4770      	bx	lr
 8009698:	20000160 	.word	0x20000160

0800969c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800969c:	2300      	movs	r3, #0
 800969e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80096a0:	461e      	mov	r6, r3
 80096a2:	1c4d      	adds	r5, r1, #1
    if (((value >> 28)) < 0xA)
 80096a4:	0f04      	lsrs	r4, r0, #28
 80096a6:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80096aa:	bf34      	ite	cc
 80096ac:	3430      	addcc	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096ae:	3437      	addcs	r4, #55	; 0x37
 80096b0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 80096b4:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 80096b8:	3301      	adds	r3, #1
  for (idx = 0; idx < len; idx++)
 80096ba:	b2dc      	uxtb	r4, r3
 80096bc:	42a2      	cmp	r2, r4
    value = value << 4;
 80096be:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80096c2:	d8ef      	bhi.n	80096a4 <IntToUnicode+0x8>
  }
}
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080096c8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80096c8:	231a      	movs	r3, #26
{
 80096ca:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80096cc:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <USBD_FS_SerialStrDescriptor+0x2c>)
 80096d0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096d2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80096d4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80096d6:	18c0      	adds	r0, r0, r3
 80096d8:	d00a      	beq.n	80096f0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096da:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096dc:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096de:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096e0:	4906      	ldr	r1, [pc, #24]	; (80096fc <USBD_FS_SerialStrDescriptor+0x34>)
 80096e2:	f7ff ffdb 	bl	800969c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e6:	2204      	movs	r2, #4
 80096e8:	4620      	mov	r0, r4
 80096ea:	4905      	ldr	r1, [pc, #20]	; (8009700 <USBD_FS_SerialStrDescriptor+0x38>)
 80096ec:	f7ff ffd6 	bl	800969c <IntToUnicode>
}
 80096f0:	4804      	ldr	r0, [pc, #16]	; (8009704 <USBD_FS_SerialStrDescriptor+0x3c>)
 80096f2:	bd10      	pop	{r4, pc}
 80096f4:	1ffff7e8 	.word	0x1ffff7e8
 80096f8:	1ffff7ec 	.word	0x1ffff7ec
 80096fc:	20000166 	.word	0x20000166
 8009700:	20000176 	.word	0x20000176
 8009704:	20000164 	.word	0x20000164

08009708 <USBD_FS_ManufacturerStrDescriptor>:
{
 8009708:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800970a:	4c04      	ldr	r4, [pc, #16]	; (800971c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800970c:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800970e:	4804      	ldr	r0, [pc, #16]	; (8009720 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8009710:	4621      	mov	r1, r4
 8009712:	f7fe fa4c 	bl	8007bae <USBD_GetString>
}
 8009716:	4620      	mov	r0, r4
 8009718:	bd10      	pop	{r4, pc}
 800971a:	bf00      	nop
 800971c:	20002e00 	.word	0x20002e00
 8009720:	0800dd3b 	.word	0x0800dd3b

08009724 <USBD_FS_ProductStrDescriptor>:
{
 8009724:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009726:	4c04      	ldr	r4, [pc, #16]	; (8009738 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8009728:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800972a:	4804      	ldr	r0, [pc, #16]	; (800973c <USBD_FS_ProductStrDescriptor+0x18>)
 800972c:	4621      	mov	r1, r4
 800972e:	f7fe fa3e 	bl	8007bae <USBD_GetString>
}
 8009732:	4620      	mov	r0, r4
 8009734:	bd10      	pop	{r4, pc}
 8009736:	bf00      	nop
 8009738:	20002e00 	.word	0x20002e00
 800973c:	0800dd4e 	.word	0x0800dd4e

08009740 <USBD_FS_ConfigStrDescriptor>:
{
 8009740:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009742:	4c04      	ldr	r4, [pc, #16]	; (8009754 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8009744:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009746:	4804      	ldr	r0, [pc, #16]	; (8009758 <USBD_FS_ConfigStrDescriptor+0x18>)
 8009748:	4621      	mov	r1, r4
 800974a:	f7fe fa30 	bl	8007bae <USBD_GetString>
}
 800974e:	4620      	mov	r0, r4
 8009750:	bd10      	pop	{r4, pc}
 8009752:	bf00      	nop
 8009754:	20002e00 	.word	0x20002e00
 8009758:	0800dd64 	.word	0x0800dd64

0800975c <USBD_FS_InterfaceStrDescriptor>:
{
 800975c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800975e:	4c04      	ldr	r4, [pc, #16]	; (8009770 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8009760:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009762:	4804      	ldr	r0, [pc, #16]	; (8009774 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8009764:	4621      	mov	r1, r4
 8009766:	f7fe fa22 	bl	8007bae <USBD_GetString>
}
 800976a:	4620      	mov	r0, r4
 800976c:	bd10      	pop	{r4, pc}
 800976e:	bf00      	nop
 8009770:	20002e00 	.word	0x20002e00
 8009774:	0800dd6f 	.word	0x0800dd6f

08009778 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009778:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <HAL_PCD_MspInit+0x3c>)
 800977c:	6802      	ldr	r2, [r0, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d115      	bne.n	80097ae <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009782:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8009786:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009788:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 800978a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800978e:	61da      	str	r2, [r3, #28]
 8009790:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8009792:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8009794:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009798:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800979a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800979c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 800979e:	f7f9 fbbf 	bl	8002f20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097a2:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80097a4:	b003      	add	sp, #12
 80097a6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80097aa:	f7f9 bbeb 	b.w	8002f84 <HAL_NVIC_EnableIRQ>
}
 80097ae:	b003      	add	sp, #12
 80097b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80097b4:	40005c00 	.word	0x40005c00

080097b8 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80097b8:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80097bc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80097c0:	f7fd bee7 	b.w	8007592 <USBD_LL_SetupStage>

080097c4 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80097c4:	2328      	movs	r3, #40	; 0x28
 80097c6:	fb03 0301 	mla	r3, r3, r1, r0
 80097ca:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80097ce:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80097d2:	f7fd bf0b 	b.w	80075ec <USBD_LL_DataOutStage>

080097d6 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097d6:	2328      	movs	r3, #40	; 0x28
 80097d8:	fb03 0301 	mla	r3, r3, r1, r0
 80097dc:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80097e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097e2:	f7fd bf3d 	b.w	8007660 <USBD_LL_DataInStage>

080097e6 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097e6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80097ea:	f7fd bfd1 	b.w	8007790 <USBD_LL_SOF>

080097ee <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ee:	6883      	ldr	r3, [r0, #8]
{
 80097f0:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097f2:	2b02      	cmp	r3, #2
{
 80097f4:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097f6:	d001      	beq.n	80097fc <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 80097f8:	f7f7 ffca 	bl	8001790 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097fc:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8009800:	2101      	movs	r1, #1
 8009802:	f7fd ffaf 	bl	8007764 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009806:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
}
 800980a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800980e:	f7fd bf82 	b.w	8007716 <USBD_LL_Reset>
	...

08009814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009814:	b510      	push	{r4, lr}
 8009816:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009818:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800981c:	f7fd ffa5 	bl	800776a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009820:	69a3      	ldr	r3, [r4, #24]
 8009822:	b123      	cbz	r3, 800982e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009824:	4a02      	ldr	r2, [pc, #8]	; (8009830 <HAL_PCD_SuspendCallback+0x1c>)
 8009826:	6913      	ldr	r3, [r2, #16]
 8009828:	f043 0306 	orr.w	r3, r3, #6
 800982c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800982e:	bd10      	pop	{r4, pc}
 8009830:	e000ed00 	.word	0xe000ed00

08009834 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009834:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8009838:	f7fd bfa0 	b.w	800777c <USBD_LL_Resume>

0800983c <USBD_LL_Init>:
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800983c:	2308      	movs	r3, #8
{
 800983e:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009840:	4a1d      	ldr	r2, [pc, #116]	; (80098b8 <USBD_LL_Init+0x7c>)
{
 8009842:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8009844:	481d      	ldr	r0, [pc, #116]	; (80098bc <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009846:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800984a:	2302      	movs	r3, #2
 800984c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800984e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8009850:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009854:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009858:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800985c:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800985e:	f7fa fe2f 	bl	80044c0 <HAL_PCD_Init>
 8009862:	b108      	cbz	r0, 8009868 <USBD_LL_Init+0x2c>
  {
    Error_Handler( );
 8009864:	f7f7 ff94 	bl	8001790 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009868:	2200      	movs	r2, #0
 800986a:	2318      	movs	r3, #24
 800986c:	4611      	mov	r1, r2
 800986e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009872:	f7fb fc03 	bl	800507c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009876:	2358      	movs	r3, #88	; 0x58
 8009878:	2200      	movs	r2, #0
 800987a:	2180      	movs	r1, #128	; 0x80
 800987c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8009880:	f7fb fbfc 	bl	800507c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009884:	23c0      	movs	r3, #192	; 0xc0
 8009886:	2200      	movs	r2, #0
 8009888:	2181      	movs	r1, #129	; 0x81
 800988a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800988e:	f7fb fbf5 	bl	800507c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009892:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009896:	2200      	movs	r2, #0
 8009898:	2101      	movs	r1, #1
 800989a:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 800989e:	f7fb fbed 	bl	800507c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098a6:	2200      	movs	r2, #0
 80098a8:	2182      	movs	r1, #130	; 0x82
 80098aa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80098ae:	f7fb fbe5 	bl	800507c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80098b2:	2000      	movs	r0, #0
 80098b4:	bd10      	pop	{r4, pc}
 80098b6:	bf00      	nop
 80098b8:	40005c00 	.word	0x40005c00
 80098bc:	20003000 	.word	0x20003000

080098c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80098c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80098c2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80098c6:	f7fa fe74 	bl	80045b2 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80098ca:	2803      	cmp	r0, #3
 80098cc:	bf96      	itet	ls
 80098ce:	4b02      	ldrls	r3, [pc, #8]	; (80098d8 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 80098d0:	2002      	movhi	r0, #2
 80098d2:	5c18      	ldrbls	r0, [r3, r0]
}
 80098d4:	bd08      	pop	{r3, pc}
 80098d6:	bf00      	nop
 80098d8:	0800dd7d 	.word	0x0800dd7d

080098dc <USBD_LL_OpenEP>:
{
 80098dc:	b510      	push	{r4, lr}
 80098de:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
{
 80098e4:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098e6:	4623      	mov	r3, r4
 80098e8:	f7fb face 	bl	8004e88 <HAL_PCD_EP_Open>
  switch (hal_status)
 80098ec:	2803      	cmp	r0, #3
 80098ee:	bf96      	itet	ls
 80098f0:	4b01      	ldrls	r3, [pc, #4]	; (80098f8 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80098f2:	2002      	movhi	r0, #2
 80098f4:	5c18      	ldrbls	r0, [r3, r0]
}
 80098f6:	bd10      	pop	{r4, pc}
 80098f8:	0800dd7d 	.word	0x0800dd7d

080098fc <USBD_LL_CloseEP>:
{
 80098fc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098fe:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009902:	f7fb faf3 	bl	8004eec <HAL_PCD_EP_Close>
  switch (hal_status)
 8009906:	2803      	cmp	r0, #3
 8009908:	bf96      	itet	ls
 800990a:	4b02      	ldrls	r3, [pc, #8]	; (8009914 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800990c:	2002      	movhi	r0, #2
 800990e:	5c18      	ldrbls	r0, [r3, r0]
}
 8009910:	bd08      	pop	{r3, pc}
 8009912:	bf00      	nop
 8009914:	0800dd7d 	.word	0x0800dd7d

08009918 <USBD_LL_StallEP>:
{
 8009918:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800991a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800991e:	f7fb fb47 	bl	8004fb0 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8009922:	2803      	cmp	r0, #3
 8009924:	bf96      	itet	ls
 8009926:	4b02      	ldrls	r3, [pc, #8]	; (8009930 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009928:	2002      	movhi	r0, #2
 800992a:	5c18      	ldrbls	r0, [r3, r0]
}
 800992c:	bd08      	pop	{r3, pc}
 800992e:	bf00      	nop
 8009930:	0800dd7d 	.word	0x0800dd7d

08009934 <USBD_LL_ClearStallEP>:
{
 8009934:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009936:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800993a:	f7fb fb6d 	bl	8005018 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 800993e:	2803      	cmp	r0, #3
 8009940:	bf96      	itet	ls
 8009942:	4b02      	ldrls	r3, [pc, #8]	; (800994c <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009944:	2002      	movhi	r0, #2
 8009946:	5c18      	ldrbls	r0, [r3, r0]
}
 8009948:	bd08      	pop	{r3, pc}
 800994a:	bf00      	nop
 800994c:	0800dd7d 	.word	0x0800dd7d

08009950 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009950:	2328      	movs	r3, #40	; 0x28
  if((ep_addr & 0x80) == 0x80)
 8009952:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009956:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800995a:	bf1b      	ittet	ne
 800995c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8009960:	fb01 3103 	mlane	r1, r1, r3, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009964:	fb03 2101 	mlaeq	r1, r3, r1, r2
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009968:	1889      	addne	r1, r1, r2
 800996a:	bf14      	ite	ne
 800996c:	7888      	ldrbne	r0, [r1, #2]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800996e:	f891 016a 	ldrbeq.w	r0, [r1, #362]	; 0x16a
}
 8009972:	4770      	bx	lr

08009974 <USBD_LL_SetUSBAddress>:
{
 8009974:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009976:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800997a:	f7fa fe33 	bl	80045e4 <HAL_PCD_SetAddress>
  switch (hal_status)
 800997e:	2803      	cmp	r0, #3
 8009980:	bf96      	itet	ls
 8009982:	4b02      	ldrls	r3, [pc, #8]	; (800998c <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009984:	2002      	movhi	r0, #2
 8009986:	5c18      	ldrbls	r0, [r3, r0]
}
 8009988:	bd08      	pop	{r3, pc}
 800998a:	bf00      	nop
 800998c:	0800dd7d 	.word	0x0800dd7d

08009990 <USBD_LL_Transmit>:
{
 8009990:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009992:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8009996:	f7fb faf1 	bl	8004f7c <HAL_PCD_EP_Transmit>
  switch (hal_status)
 800999a:	2803      	cmp	r0, #3
 800999c:	bf96      	itet	ls
 800999e:	4b02      	ldrls	r3, [pc, #8]	; (80099a8 <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80099a0:	2002      	movhi	r0, #2
 80099a2:	5c18      	ldrbls	r0, [r3, r0]
}
 80099a4:	bd08      	pop	{r3, pc}
 80099a6:	bf00      	nop
 80099a8:	0800dd7d 	.word	0x0800dd7d

080099ac <USBD_LL_PrepareReceive>:
{
 80099ac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80099b2:	f7fb fac4 	bl	8004f3e <HAL_PCD_EP_Receive>
  switch (hal_status)
 80099b6:	2803      	cmp	r0, #3
 80099b8:	bf96      	itet	ls
 80099ba:	4b02      	ldrls	r3, [pc, #8]	; (80099c4 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099bc:	2002      	movhi	r0, #2
 80099be:	5c18      	ldrbls	r0, [r3, r0]
}
 80099c0:	bd08      	pop	{r3, pc}
 80099c2:	bf00      	nop
 80099c4:	0800dd7d 	.word	0x0800dd7d

080099c8 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80099cc:	f7fb bace 	b.w	8004f6c <HAL_PCD_EP_GetRxCount>

080099d0 <USBD_static_malloc>:
}
 80099d0:	4800      	ldr	r0, [pc, #0]	; (80099d4 <USBD_static_malloc+0x4>)
 80099d2:	4770      	bx	lr
 80099d4:	20001c74 	.word	0x20001c74

080099d8 <USBD_static_free>:
}
 80099d8:	4770      	bx	lr

080099da <HAL_PCDEx_SetConnectionState>:
}
 80099da:	4770      	bx	lr

080099dc <__errno>:
 80099dc:	4b01      	ldr	r3, [pc, #4]	; (80099e4 <__errno+0x8>)
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000180 	.word	0x20000180

080099e8 <__libc_init_array>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	2600      	movs	r6, #0
 80099ec:	4d0c      	ldr	r5, [pc, #48]	; (8009a20 <__libc_init_array+0x38>)
 80099ee:	4c0d      	ldr	r4, [pc, #52]	; (8009a24 <__libc_init_array+0x3c>)
 80099f0:	1b64      	subs	r4, r4, r5
 80099f2:	10a4      	asrs	r4, r4, #2
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	d109      	bne.n	8009a0c <__libc_init_array+0x24>
 80099f8:	f002 feba 	bl	800c770 <_init>
 80099fc:	2600      	movs	r6, #0
 80099fe:	4d0a      	ldr	r5, [pc, #40]	; (8009a28 <__libc_init_array+0x40>)
 8009a00:	4c0a      	ldr	r4, [pc, #40]	; (8009a2c <__libc_init_array+0x44>)
 8009a02:	1b64      	subs	r4, r4, r5
 8009a04:	10a4      	asrs	r4, r4, #2
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	d105      	bne.n	8009a16 <__libc_init_array+0x2e>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a10:	4798      	blx	r3
 8009a12:	3601      	adds	r6, #1
 8009a14:	e7ee      	b.n	80099f4 <__libc_init_array+0xc>
 8009a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1a:	4798      	blx	r3
 8009a1c:	3601      	adds	r6, #1
 8009a1e:	e7f2      	b.n	8009a06 <__libc_init_array+0x1e>
 8009a20:	0800e164 	.word	0x0800e164
 8009a24:	0800e164 	.word	0x0800e164
 8009a28:	0800e164 	.word	0x0800e164
 8009a2c:	0800e168 	.word	0x0800e168

08009a30 <memcpy>:
 8009a30:	440a      	add	r2, r1
 8009a32:	4291      	cmp	r1, r2
 8009a34:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a38:	d100      	bne.n	8009a3c <memcpy+0xc>
 8009a3a:	4770      	bx	lr
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a42:	4291      	cmp	r1, r2
 8009a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a48:	d1f9      	bne.n	8009a3e <memcpy+0xe>
 8009a4a:	bd10      	pop	{r4, pc}

08009a4c <memset>:
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4402      	add	r2, r0
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d100      	bne.n	8009a56 <memset+0xa>
 8009a54:	4770      	bx	lr
 8009a56:	f803 1b01 	strb.w	r1, [r3], #1
 8009a5a:	e7f9      	b.n	8009a50 <memset+0x4>

08009a5c <__cvt>:
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a62:	461f      	mov	r7, r3
 8009a64:	bfbb      	ittet	lt
 8009a66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009a6a:	461f      	movlt	r7, r3
 8009a6c:	2300      	movge	r3, #0
 8009a6e:	232d      	movlt	r3, #45	; 0x2d
 8009a70:	b088      	sub	sp, #32
 8009a72:	4614      	mov	r4, r2
 8009a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009a78:	7013      	strb	r3, [r2, #0]
 8009a7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a7c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009a80:	f023 0820 	bic.w	r8, r3, #32
 8009a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a88:	d005      	beq.n	8009a96 <__cvt+0x3a>
 8009a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a8e:	d100      	bne.n	8009a92 <__cvt+0x36>
 8009a90:	3501      	adds	r5, #1
 8009a92:	2302      	movs	r3, #2
 8009a94:	e000      	b.n	8009a98 <__cvt+0x3c>
 8009a96:	2303      	movs	r3, #3
 8009a98:	aa07      	add	r2, sp, #28
 8009a9a:	9204      	str	r2, [sp, #16]
 8009a9c:	aa06      	add	r2, sp, #24
 8009a9e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009aa2:	e9cd 3500 	strd	r3, r5, [sp]
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	463b      	mov	r3, r7
 8009aaa:	f000 fce5 	bl	800a478 <_dtoa_r>
 8009aae:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	d102      	bne.n	8009abc <__cvt+0x60>
 8009ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ab8:	07db      	lsls	r3, r3, #31
 8009aba:	d522      	bpl.n	8009b02 <__cvt+0xa6>
 8009abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ac0:	eb06 0905 	add.w	r9, r6, r5
 8009ac4:	d110      	bne.n	8009ae8 <__cvt+0x8c>
 8009ac6:	7833      	ldrb	r3, [r6, #0]
 8009ac8:	2b30      	cmp	r3, #48	; 0x30
 8009aca:	d10a      	bne.n	8009ae2 <__cvt+0x86>
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	4639      	mov	r1, r7
 8009ad4:	f7f6 ff68 	bl	80009a8 <__aeabi_dcmpeq>
 8009ad8:	b918      	cbnz	r0, 8009ae2 <__cvt+0x86>
 8009ada:	f1c5 0501 	rsb	r5, r5, #1
 8009ade:	f8ca 5000 	str.w	r5, [sl]
 8009ae2:	f8da 3000 	ldr.w	r3, [sl]
 8009ae6:	4499      	add	r9, r3
 8009ae8:	2200      	movs	r2, #0
 8009aea:	2300      	movs	r3, #0
 8009aec:	4620      	mov	r0, r4
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f6 ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8009af4:	b108      	cbz	r0, 8009afa <__cvt+0x9e>
 8009af6:	f8cd 901c 	str.w	r9, [sp, #28]
 8009afa:	2230      	movs	r2, #48	; 0x30
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	454b      	cmp	r3, r9
 8009b00:	d307      	bcc.n	8009b12 <__cvt+0xb6>
 8009b02:	4630      	mov	r0, r6
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b08:	1b9b      	subs	r3, r3, r6
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	b008      	add	sp, #32
 8009b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	9107      	str	r1, [sp, #28]
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e7f0      	b.n	8009afc <__cvt+0xa0>

08009b1a <__exponent>:
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	f803 2b02 	strb.w	r2, [r3], #2
 8009b24:	bfb6      	itet	lt
 8009b26:	222d      	movlt	r2, #45	; 0x2d
 8009b28:	222b      	movge	r2, #43	; 0x2b
 8009b2a:	4249      	neglt	r1, r1
 8009b2c:	2909      	cmp	r1, #9
 8009b2e:	7042      	strb	r2, [r0, #1]
 8009b30:	dd2b      	ble.n	8009b8a <__exponent+0x70>
 8009b32:	f10d 0407 	add.w	r4, sp, #7
 8009b36:	46a4      	mov	ip, r4
 8009b38:	270a      	movs	r7, #10
 8009b3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b3e:	460a      	mov	r2, r1
 8009b40:	46a6      	mov	lr, r4
 8009b42:	fb07 1516 	mls	r5, r7, r6, r1
 8009b46:	2a63      	cmp	r2, #99	; 0x63
 8009b48:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b56:	dcf0      	bgt.n	8009b3a <__exponent+0x20>
 8009b58:	3130      	adds	r1, #48	; 0x30
 8009b5a:	f1ae 0502 	sub.w	r5, lr, #2
 8009b5e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b62:	4629      	mov	r1, r5
 8009b64:	1c44      	adds	r4, r0, #1
 8009b66:	4561      	cmp	r1, ip
 8009b68:	d30a      	bcc.n	8009b80 <__exponent+0x66>
 8009b6a:	f10d 0209 	add.w	r2, sp, #9
 8009b6e:	eba2 020e 	sub.w	r2, r2, lr
 8009b72:	4565      	cmp	r5, ip
 8009b74:	bf88      	it	hi
 8009b76:	2200      	movhi	r2, #0
 8009b78:	4413      	add	r3, r2
 8009b7a:	1a18      	subs	r0, r3, r0
 8009b7c:	b003      	add	sp, #12
 8009b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b80:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b84:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b88:	e7ed      	b.n	8009b66 <__exponent+0x4c>
 8009b8a:	2330      	movs	r3, #48	; 0x30
 8009b8c:	3130      	adds	r1, #48	; 0x30
 8009b8e:	7083      	strb	r3, [r0, #2]
 8009b90:	70c1      	strb	r1, [r0, #3]
 8009b92:	1d03      	adds	r3, r0, #4
 8009b94:	e7f1      	b.n	8009b7a <__exponent+0x60>
	...

08009b98 <_printf_float>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	b091      	sub	sp, #68	; 0x44
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	4605      	mov	r5, r0
 8009baa:	f001 fb49 	bl	800b240 <_localeconv_r>
 8009bae:	6803      	ldr	r3, [r0, #0]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb4:	f7f6 facc 	bl	8000150 <strlen>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	930e      	str	r3, [sp, #56]	; 0x38
 8009bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8009bc0:	900a      	str	r0, [sp, #40]	; 0x28
 8009bc2:	3307      	adds	r3, #7
 8009bc4:	f023 0307 	bic.w	r3, r3, #7
 8009bc8:	f103 0208 	add.w	r2, r3, #8
 8009bcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009bd0:	f8d4 b000 	ldr.w	fp, [r4]
 8009bd4:	f8c8 2000 	str.w	r2, [r8]
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009be0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009be4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009be8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bea:	f04f 32ff 	mov.w	r2, #4294967295
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4b9c      	ldr	r3, [pc, #624]	; (8009e64 <_printf_float+0x2cc>)
 8009bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009bf4:	f7f6 ff0a 	bl	8000a0c <__aeabi_dcmpun>
 8009bf8:	bb70      	cbnz	r0, 8009c58 <_printf_float+0xc0>
 8009bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4b98      	ldr	r3, [pc, #608]	; (8009e64 <_printf_float+0x2cc>)
 8009c02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c04:	f7f6 fee4 	bl	80009d0 <__aeabi_dcmple>
 8009c08:	bb30      	cbnz	r0, 8009c58 <_printf_float+0xc0>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4640      	mov	r0, r8
 8009c10:	4651      	mov	r1, sl
 8009c12:	f7f6 fed3 	bl	80009bc <__aeabi_dcmplt>
 8009c16:	b110      	cbz	r0, 8009c1e <_printf_float+0x86>
 8009c18:	232d      	movs	r3, #45	; 0x2d
 8009c1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c1e:	4b92      	ldr	r3, [pc, #584]	; (8009e68 <_printf_float+0x2d0>)
 8009c20:	4892      	ldr	r0, [pc, #584]	; (8009e6c <_printf_float+0x2d4>)
 8009c22:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009c26:	bf94      	ite	ls
 8009c28:	4698      	movls	r8, r3
 8009c2a:	4680      	movhi	r8, r0
 8009c2c:	2303      	movs	r3, #3
 8009c2e:	f04f 0a00 	mov.w	sl, #0
 8009c32:	6123      	str	r3, [r4, #16]
 8009c34:	f02b 0304 	bic.w	r3, fp, #4
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	4633      	mov	r3, r6
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	4628      	mov	r0, r5
 8009c40:	9700      	str	r7, [sp, #0]
 8009c42:	aa0f      	add	r2, sp, #60	; 0x3c
 8009c44:	f000 f9d4 	bl	8009ff0 <_printf_common>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	f040 8090 	bne.w	8009d6e <_printf_float+0x1d6>
 8009c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c52:	b011      	add	sp, #68	; 0x44
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	4642      	mov	r2, r8
 8009c5a:	4653      	mov	r3, sl
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4651      	mov	r1, sl
 8009c60:	f7f6 fed4 	bl	8000a0c <__aeabi_dcmpun>
 8009c64:	b148      	cbz	r0, 8009c7a <_printf_float+0xe2>
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	bfb8      	it	lt
 8009c6c:	232d      	movlt	r3, #45	; 0x2d
 8009c6e:	4880      	ldr	r0, [pc, #512]	; (8009e70 <_printf_float+0x2d8>)
 8009c70:	bfb8      	it	lt
 8009c72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c76:	4b7f      	ldr	r3, [pc, #508]	; (8009e74 <_printf_float+0x2dc>)
 8009c78:	e7d3      	b.n	8009c22 <_printf_float+0x8a>
 8009c7a:	6863      	ldr	r3, [r4, #4]
 8009c7c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	d142      	bne.n	8009d0a <_printf_float+0x172>
 8009c84:	2306      	movs	r3, #6
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	9206      	str	r2, [sp, #24]
 8009c8c:	aa0e      	add	r2, sp, #56	; 0x38
 8009c8e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009c92:	aa0d      	add	r2, sp, #52	; 0x34
 8009c94:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009c98:	9203      	str	r2, [sp, #12]
 8009c9a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009c9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009ca2:	6023      	str	r3, [r4, #0]
 8009ca4:	6863      	ldr	r3, [r4, #4]
 8009ca6:	4642      	mov	r2, r8
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	4628      	mov	r0, r5
 8009cac:	4653      	mov	r3, sl
 8009cae:	910b      	str	r1, [sp, #44]	; 0x2c
 8009cb0:	f7ff fed4 	bl	8009a5c <__cvt>
 8009cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	2947      	cmp	r1, #71	; 0x47
 8009cba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009cbc:	d108      	bne.n	8009cd0 <_printf_float+0x138>
 8009cbe:	1cc8      	adds	r0, r1, #3
 8009cc0:	db02      	blt.n	8009cc8 <_printf_float+0x130>
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	4299      	cmp	r1, r3
 8009cc6:	dd40      	ble.n	8009d4a <_printf_float+0x1b2>
 8009cc8:	f1a9 0902 	sub.w	r9, r9, #2
 8009ccc:	fa5f f989 	uxtb.w	r9, r9
 8009cd0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cd4:	d81f      	bhi.n	8009d16 <_printf_float+0x17e>
 8009cd6:	464a      	mov	r2, r9
 8009cd8:	3901      	subs	r1, #1
 8009cda:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cde:	910d      	str	r1, [sp, #52]	; 0x34
 8009ce0:	f7ff ff1b 	bl	8009b1a <__exponent>
 8009ce4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ce6:	4682      	mov	sl, r0
 8009ce8:	1813      	adds	r3, r2, r0
 8009cea:	2a01      	cmp	r2, #1
 8009cec:	6123      	str	r3, [r4, #16]
 8009cee:	dc02      	bgt.n	8009cf6 <_printf_float+0x15e>
 8009cf0:	6822      	ldr	r2, [r4, #0]
 8009cf2:	07d2      	lsls	r2, r2, #31
 8009cf4:	d501      	bpl.n	8009cfa <_printf_float+0x162>
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	6123      	str	r3, [r4, #16]
 8009cfa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d09b      	beq.n	8009c3a <_printf_float+0xa2>
 8009d02:	232d      	movs	r3, #45	; 0x2d
 8009d04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d08:	e797      	b.n	8009c3a <_printf_float+0xa2>
 8009d0a:	2947      	cmp	r1, #71	; 0x47
 8009d0c:	d1bc      	bne.n	8009c88 <_printf_float+0xf0>
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1ba      	bne.n	8009c88 <_printf_float+0xf0>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e7b7      	b.n	8009c86 <_printf_float+0xee>
 8009d16:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009d1a:	d118      	bne.n	8009d4e <_printf_float+0x1b6>
 8009d1c:	2900      	cmp	r1, #0
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	dd0b      	ble.n	8009d3a <_printf_float+0x1a2>
 8009d22:	6121      	str	r1, [r4, #16]
 8009d24:	b913      	cbnz	r3, 8009d2c <_printf_float+0x194>
 8009d26:	6822      	ldr	r2, [r4, #0]
 8009d28:	07d0      	lsls	r0, r2, #31
 8009d2a:	d502      	bpl.n	8009d32 <_printf_float+0x19a>
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	440b      	add	r3, r1
 8009d30:	6123      	str	r3, [r4, #16]
 8009d32:	f04f 0a00 	mov.w	sl, #0
 8009d36:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d38:	e7df      	b.n	8009cfa <_printf_float+0x162>
 8009d3a:	b913      	cbnz	r3, 8009d42 <_printf_float+0x1aa>
 8009d3c:	6822      	ldr	r2, [r4, #0]
 8009d3e:	07d2      	lsls	r2, r2, #31
 8009d40:	d501      	bpl.n	8009d46 <_printf_float+0x1ae>
 8009d42:	3302      	adds	r3, #2
 8009d44:	e7f4      	b.n	8009d30 <_printf_float+0x198>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e7f2      	b.n	8009d30 <_printf_float+0x198>
 8009d4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009d4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d50:	4299      	cmp	r1, r3
 8009d52:	db05      	blt.n	8009d60 <_printf_float+0x1c8>
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	6121      	str	r1, [r4, #16]
 8009d58:	07d8      	lsls	r0, r3, #31
 8009d5a:	d5ea      	bpl.n	8009d32 <_printf_float+0x19a>
 8009d5c:	1c4b      	adds	r3, r1, #1
 8009d5e:	e7e7      	b.n	8009d30 <_printf_float+0x198>
 8009d60:	2900      	cmp	r1, #0
 8009d62:	bfcc      	ite	gt
 8009d64:	2201      	movgt	r2, #1
 8009d66:	f1c1 0202 	rsble	r2, r1, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	e7e0      	b.n	8009d30 <_printf_float+0x198>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	055a      	lsls	r2, r3, #21
 8009d72:	d407      	bmi.n	8009d84 <_printf_float+0x1ec>
 8009d74:	6923      	ldr	r3, [r4, #16]
 8009d76:	4642      	mov	r2, r8
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	d12b      	bne.n	8009dda <_printf_float+0x242>
 8009d82:	e764      	b.n	8009c4e <_printf_float+0xb6>
 8009d84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d88:	f240 80dd 	bls.w	8009f46 <_printf_float+0x3ae>
 8009d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d90:	2200      	movs	r2, #0
 8009d92:	2300      	movs	r3, #0
 8009d94:	f7f6 fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8009d98:	2800      	cmp	r0, #0
 8009d9a:	d033      	beq.n	8009e04 <_printf_float+0x26c>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	4a35      	ldr	r2, [pc, #212]	; (8009e78 <_printf_float+0x2e0>)
 8009da4:	47b8      	blx	r7
 8009da6:	3001      	adds	r0, #1
 8009da8:	f43f af51 	beq.w	8009c4e <_printf_float+0xb6>
 8009dac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009db0:	429a      	cmp	r2, r3
 8009db2:	db02      	blt.n	8009dba <_printf_float+0x222>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	07d8      	lsls	r0, r3, #31
 8009db8:	d50f      	bpl.n	8009dda <_printf_float+0x242>
 8009dba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dbe:	4631      	mov	r1, r6
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b8      	blx	r7
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	f43f af42 	beq.w	8009c4e <_printf_float+0xb6>
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	f104 091a 	add.w	r9, r4, #26
 8009dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	4543      	cmp	r3, r8
 8009dd8:	dc09      	bgt.n	8009dee <_printf_float+0x256>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	079b      	lsls	r3, r3, #30
 8009dde:	f100 8102 	bmi.w	8009fe6 <_printf_float+0x44e>
 8009de2:	68e0      	ldr	r0, [r4, #12]
 8009de4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009de6:	4298      	cmp	r0, r3
 8009de8:	bfb8      	it	lt
 8009dea:	4618      	movlt	r0, r3
 8009dec:	e731      	b.n	8009c52 <_printf_float+0xba>
 8009dee:	2301      	movs	r3, #1
 8009df0:	464a      	mov	r2, r9
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f af28 	beq.w	8009c4e <_printf_float+0xb6>
 8009dfe:	f108 0801 	add.w	r8, r8, #1
 8009e02:	e7e6      	b.n	8009dd2 <_printf_float+0x23a>
 8009e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	dc38      	bgt.n	8009e7c <_printf_float+0x2e4>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	4a19      	ldr	r2, [pc, #100]	; (8009e78 <_printf_float+0x2e0>)
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	f43f af1a 	beq.w	8009c4e <_printf_float+0xb6>
 8009e1a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	d102      	bne.n	8009e28 <_printf_float+0x290>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	07d9      	lsls	r1, r3, #31
 8009e26:	d5d8      	bpl.n	8009dda <_printf_float+0x242>
 8009e28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e2c:	4631      	mov	r1, r6
 8009e2e:	4628      	mov	r0, r5
 8009e30:	47b8      	blx	r7
 8009e32:	3001      	adds	r0, #1
 8009e34:	f43f af0b 	beq.w	8009c4e <_printf_float+0xb6>
 8009e38:	f04f 0900 	mov.w	r9, #0
 8009e3c:	f104 0a1a 	add.w	sl, r4, #26
 8009e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e42:	425b      	negs	r3, r3
 8009e44:	454b      	cmp	r3, r9
 8009e46:	dc01      	bgt.n	8009e4c <_printf_float+0x2b4>
 8009e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e4a:	e794      	b.n	8009d76 <_printf_float+0x1de>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	4652      	mov	r2, sl
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f aef9 	beq.w	8009c4e <_printf_float+0xb6>
 8009e5c:	f109 0901 	add.w	r9, r9, #1
 8009e60:	e7ee      	b.n	8009e40 <_printf_float+0x2a8>
 8009e62:	bf00      	nop
 8009e64:	7fefffff 	.word	0x7fefffff
 8009e68:	0800dd88 	.word	0x0800dd88
 8009e6c:	0800dd8c 	.word	0x0800dd8c
 8009e70:	0800dd94 	.word	0x0800dd94
 8009e74:	0800dd90 	.word	0x0800dd90
 8009e78:	0800dd98 	.word	0x0800dd98
 8009e7c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e80:	429a      	cmp	r2, r3
 8009e82:	bfa8      	it	ge
 8009e84:	461a      	movge	r2, r3
 8009e86:	2a00      	cmp	r2, #0
 8009e88:	4691      	mov	r9, r2
 8009e8a:	dc37      	bgt.n	8009efc <_printf_float+0x364>
 8009e8c:	f04f 0b00 	mov.w	fp, #0
 8009e90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e94:	f104 021a 	add.w	r2, r4, #26
 8009e98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009e9c:	ebaa 0309 	sub.w	r3, sl, r9
 8009ea0:	455b      	cmp	r3, fp
 8009ea2:	dc33      	bgt.n	8009f0c <_printf_float+0x374>
 8009ea4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	db3b      	blt.n	8009f24 <_printf_float+0x38c>
 8009eac:	6823      	ldr	r3, [r4, #0]
 8009eae:	07da      	lsls	r2, r3, #31
 8009eb0:	d438      	bmi.n	8009f24 <_printf_float+0x38c>
 8009eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009eb6:	eba2 030a 	sub.w	r3, r2, sl
 8009eba:	eba2 0901 	sub.w	r9, r2, r1
 8009ebe:	4599      	cmp	r9, r3
 8009ec0:	bfa8      	it	ge
 8009ec2:	4699      	movge	r9, r3
 8009ec4:	f1b9 0f00 	cmp.w	r9, #0
 8009ec8:	dc34      	bgt.n	8009f34 <_printf_float+0x39c>
 8009eca:	f04f 0800 	mov.w	r8, #0
 8009ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ed2:	f104 0a1a 	add.w	sl, r4, #26
 8009ed6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	eba3 0309 	sub.w	r3, r3, r9
 8009ee0:	4543      	cmp	r3, r8
 8009ee2:	f77f af7a 	ble.w	8009dda <_printf_float+0x242>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	4652      	mov	r2, sl
 8009eea:	4631      	mov	r1, r6
 8009eec:	4628      	mov	r0, r5
 8009eee:	47b8      	blx	r7
 8009ef0:	3001      	adds	r0, #1
 8009ef2:	f43f aeac 	beq.w	8009c4e <_printf_float+0xb6>
 8009ef6:	f108 0801 	add.w	r8, r8, #1
 8009efa:	e7ec      	b.n	8009ed6 <_printf_float+0x33e>
 8009efc:	4613      	mov	r3, r2
 8009efe:	4631      	mov	r1, r6
 8009f00:	4642      	mov	r2, r8
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	d1c0      	bne.n	8009e8c <_printf_float+0x2f4>
 8009f0a:	e6a0      	b.n	8009c4e <_printf_float+0xb6>
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f14:	47b8      	blx	r7
 8009f16:	3001      	adds	r0, #1
 8009f18:	f43f ae99 	beq.w	8009c4e <_printf_float+0xb6>
 8009f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f1e:	f10b 0b01 	add.w	fp, fp, #1
 8009f22:	e7b9      	b.n	8009e98 <_printf_float+0x300>
 8009f24:	4631      	mov	r1, r6
 8009f26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d1bf      	bne.n	8009eb2 <_printf_float+0x31a>
 8009f32:	e68c      	b.n	8009c4e <_printf_float+0xb6>
 8009f34:	464b      	mov	r3, r9
 8009f36:	4631      	mov	r1, r6
 8009f38:	4628      	mov	r0, r5
 8009f3a:	eb08 020a 	add.w	r2, r8, sl
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	d1c2      	bne.n	8009eca <_printf_float+0x332>
 8009f44:	e683      	b.n	8009c4e <_printf_float+0xb6>
 8009f46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f48:	2a01      	cmp	r2, #1
 8009f4a:	dc01      	bgt.n	8009f50 <_printf_float+0x3b8>
 8009f4c:	07db      	lsls	r3, r3, #31
 8009f4e:	d537      	bpl.n	8009fc0 <_printf_float+0x428>
 8009f50:	2301      	movs	r3, #1
 8009f52:	4642      	mov	r2, r8
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f ae77 	beq.w	8009c4e <_printf_float+0xb6>
 8009f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f ae6f 	beq.w	8009c4e <_printf_float+0xb6>
 8009f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f74:	2200      	movs	r2, #0
 8009f76:	2300      	movs	r3, #0
 8009f78:	f7f6 fd16 	bl	80009a8 <__aeabi_dcmpeq>
 8009f7c:	b9d8      	cbnz	r0, 8009fb6 <_printf_float+0x41e>
 8009f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f80:	f108 0201 	add.w	r2, r8, #1
 8009f84:	3b01      	subs	r3, #1
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	d10e      	bne.n	8009fae <_printf_float+0x416>
 8009f90:	e65d      	b.n	8009c4e <_printf_float+0xb6>
 8009f92:	2301      	movs	r3, #1
 8009f94:	464a      	mov	r2, r9
 8009f96:	4631      	mov	r1, r6
 8009f98:	4628      	mov	r0, r5
 8009f9a:	47b8      	blx	r7
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	f43f ae56 	beq.w	8009c4e <_printf_float+0xb6>
 8009fa2:	f108 0801 	add.w	r8, r8, #1
 8009fa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	4543      	cmp	r3, r8
 8009fac:	dcf1      	bgt.n	8009f92 <_printf_float+0x3fa>
 8009fae:	4653      	mov	r3, sl
 8009fb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fb4:	e6e0      	b.n	8009d78 <_printf_float+0x1e0>
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	f104 091a 	add.w	r9, r4, #26
 8009fbe:	e7f2      	b.n	8009fa6 <_printf_float+0x40e>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	e7df      	b.n	8009f86 <_printf_float+0x3ee>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	464a      	mov	r2, r9
 8009fca:	4631      	mov	r1, r6
 8009fcc:	4628      	mov	r0, r5
 8009fce:	47b8      	blx	r7
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	f43f ae3c 	beq.w	8009c4e <_printf_float+0xb6>
 8009fd6:	f108 0801 	add.w	r8, r8, #1
 8009fda:	68e3      	ldr	r3, [r4, #12]
 8009fdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009fde:	1a5b      	subs	r3, r3, r1
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	dcf0      	bgt.n	8009fc6 <_printf_float+0x42e>
 8009fe4:	e6fd      	b.n	8009de2 <_printf_float+0x24a>
 8009fe6:	f04f 0800 	mov.w	r8, #0
 8009fea:	f104 0919 	add.w	r9, r4, #25
 8009fee:	e7f4      	b.n	8009fda <_printf_float+0x442>

08009ff0 <_printf_common>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	4616      	mov	r6, r2
 8009ff6:	4699      	mov	r9, r3
 8009ff8:	688a      	ldr	r2, [r1, #8]
 8009ffa:	690b      	ldr	r3, [r1, #16]
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	4293      	cmp	r3, r2
 800a000:	bfb8      	it	lt
 800a002:	4613      	movlt	r3, r2
 800a004:	6033      	str	r3, [r6, #0]
 800a006:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a00a:	460c      	mov	r4, r1
 800a00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a010:	b10a      	cbz	r2, 800a016 <_printf_common+0x26>
 800a012:	3301      	adds	r3, #1
 800a014:	6033      	str	r3, [r6, #0]
 800a016:	6823      	ldr	r3, [r4, #0]
 800a018:	0699      	lsls	r1, r3, #26
 800a01a:	bf42      	ittt	mi
 800a01c:	6833      	ldrmi	r3, [r6, #0]
 800a01e:	3302      	addmi	r3, #2
 800a020:	6033      	strmi	r3, [r6, #0]
 800a022:	6825      	ldr	r5, [r4, #0]
 800a024:	f015 0506 	ands.w	r5, r5, #6
 800a028:	d106      	bne.n	800a038 <_printf_common+0x48>
 800a02a:	f104 0a19 	add.w	sl, r4, #25
 800a02e:	68e3      	ldr	r3, [r4, #12]
 800a030:	6832      	ldr	r2, [r6, #0]
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	42ab      	cmp	r3, r5
 800a036:	dc28      	bgt.n	800a08a <_printf_common+0x9a>
 800a038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a03c:	1e13      	subs	r3, r2, #0
 800a03e:	6822      	ldr	r2, [r4, #0]
 800a040:	bf18      	it	ne
 800a042:	2301      	movne	r3, #1
 800a044:	0692      	lsls	r2, r2, #26
 800a046:	d42d      	bmi.n	800a0a4 <_printf_common+0xb4>
 800a048:	4649      	mov	r1, r9
 800a04a:	4638      	mov	r0, r7
 800a04c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a050:	47c0      	blx	r8
 800a052:	3001      	adds	r0, #1
 800a054:	d020      	beq.n	800a098 <_printf_common+0xa8>
 800a056:	6823      	ldr	r3, [r4, #0]
 800a058:	68e5      	ldr	r5, [r4, #12]
 800a05a:	f003 0306 	and.w	r3, r3, #6
 800a05e:	2b04      	cmp	r3, #4
 800a060:	bf18      	it	ne
 800a062:	2500      	movne	r5, #0
 800a064:	6832      	ldr	r2, [r6, #0]
 800a066:	f04f 0600 	mov.w	r6, #0
 800a06a:	68a3      	ldr	r3, [r4, #8]
 800a06c:	bf08      	it	eq
 800a06e:	1aad      	subeq	r5, r5, r2
 800a070:	6922      	ldr	r2, [r4, #16]
 800a072:	bf08      	it	eq
 800a074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a078:	4293      	cmp	r3, r2
 800a07a:	bfc4      	itt	gt
 800a07c:	1a9b      	subgt	r3, r3, r2
 800a07e:	18ed      	addgt	r5, r5, r3
 800a080:	341a      	adds	r4, #26
 800a082:	42b5      	cmp	r5, r6
 800a084:	d11a      	bne.n	800a0bc <_printf_common+0xcc>
 800a086:	2000      	movs	r0, #0
 800a088:	e008      	b.n	800a09c <_printf_common+0xac>
 800a08a:	2301      	movs	r3, #1
 800a08c:	4652      	mov	r2, sl
 800a08e:	4649      	mov	r1, r9
 800a090:	4638      	mov	r0, r7
 800a092:	47c0      	blx	r8
 800a094:	3001      	adds	r0, #1
 800a096:	d103      	bne.n	800a0a0 <_printf_common+0xb0>
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a0:	3501      	adds	r5, #1
 800a0a2:	e7c4      	b.n	800a02e <_printf_common+0x3e>
 800a0a4:	2030      	movs	r0, #48	; 0x30
 800a0a6:	18e1      	adds	r1, r4, r3
 800a0a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0b2:	4422      	add	r2, r4
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0ba:	e7c5      	b.n	800a048 <_printf_common+0x58>
 800a0bc:	2301      	movs	r3, #1
 800a0be:	4622      	mov	r2, r4
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	4638      	mov	r0, r7
 800a0c4:	47c0      	blx	r8
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d0e6      	beq.n	800a098 <_printf_common+0xa8>
 800a0ca:	3601      	adds	r6, #1
 800a0cc:	e7d9      	b.n	800a082 <_printf_common+0x92>
	...

0800a0d0 <_printf_i>:
 800a0d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	460c      	mov	r4, r1
 800a0d6:	7e27      	ldrb	r7, [r4, #24]
 800a0d8:	4691      	mov	r9, r2
 800a0da:	2f78      	cmp	r7, #120	; 0x78
 800a0dc:	4680      	mov	r8, r0
 800a0de:	469a      	mov	sl, r3
 800a0e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0e6:	d807      	bhi.n	800a0f8 <_printf_i+0x28>
 800a0e8:	2f62      	cmp	r7, #98	; 0x62
 800a0ea:	d80a      	bhi.n	800a102 <_printf_i+0x32>
 800a0ec:	2f00      	cmp	r7, #0
 800a0ee:	f000 80d9 	beq.w	800a2a4 <_printf_i+0x1d4>
 800a0f2:	2f58      	cmp	r7, #88	; 0x58
 800a0f4:	f000 80a4 	beq.w	800a240 <_printf_i+0x170>
 800a0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a100:	e03a      	b.n	800a178 <_printf_i+0xa8>
 800a102:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a106:	2b15      	cmp	r3, #21
 800a108:	d8f6      	bhi.n	800a0f8 <_printf_i+0x28>
 800a10a:	a001      	add	r0, pc, #4	; (adr r0, 800a110 <_printf_i+0x40>)
 800a10c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a110:	0800a169 	.word	0x0800a169
 800a114:	0800a17d 	.word	0x0800a17d
 800a118:	0800a0f9 	.word	0x0800a0f9
 800a11c:	0800a0f9 	.word	0x0800a0f9
 800a120:	0800a0f9 	.word	0x0800a0f9
 800a124:	0800a0f9 	.word	0x0800a0f9
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a0f9 	.word	0x0800a0f9
 800a130:	0800a0f9 	.word	0x0800a0f9
 800a134:	0800a0f9 	.word	0x0800a0f9
 800a138:	0800a0f9 	.word	0x0800a0f9
 800a13c:	0800a28b 	.word	0x0800a28b
 800a140:	0800a1ad 	.word	0x0800a1ad
 800a144:	0800a26d 	.word	0x0800a26d
 800a148:	0800a0f9 	.word	0x0800a0f9
 800a14c:	0800a0f9 	.word	0x0800a0f9
 800a150:	0800a2ad 	.word	0x0800a2ad
 800a154:	0800a0f9 	.word	0x0800a0f9
 800a158:	0800a1ad 	.word	0x0800a1ad
 800a15c:	0800a0f9 	.word	0x0800a0f9
 800a160:	0800a0f9 	.word	0x0800a0f9
 800a164:	0800a275 	.word	0x0800a275
 800a168:	680b      	ldr	r3, [r1, #0]
 800a16a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a16e:	1d1a      	adds	r2, r3, #4
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	600a      	str	r2, [r1, #0]
 800a174:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a178:	2301      	movs	r3, #1
 800a17a:	e0a4      	b.n	800a2c6 <_printf_i+0x1f6>
 800a17c:	6825      	ldr	r5, [r4, #0]
 800a17e:	6808      	ldr	r0, [r1, #0]
 800a180:	062e      	lsls	r6, r5, #24
 800a182:	f100 0304 	add.w	r3, r0, #4
 800a186:	d50a      	bpl.n	800a19e <_printf_i+0xce>
 800a188:	6805      	ldr	r5, [r0, #0]
 800a18a:	600b      	str	r3, [r1, #0]
 800a18c:	2d00      	cmp	r5, #0
 800a18e:	da03      	bge.n	800a198 <_printf_i+0xc8>
 800a190:	232d      	movs	r3, #45	; 0x2d
 800a192:	426d      	negs	r5, r5
 800a194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a198:	230a      	movs	r3, #10
 800a19a:	485e      	ldr	r0, [pc, #376]	; (800a314 <_printf_i+0x244>)
 800a19c:	e019      	b.n	800a1d2 <_printf_i+0x102>
 800a19e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a1a2:	6805      	ldr	r5, [r0, #0]
 800a1a4:	600b      	str	r3, [r1, #0]
 800a1a6:	bf18      	it	ne
 800a1a8:	b22d      	sxthne	r5, r5
 800a1aa:	e7ef      	b.n	800a18c <_printf_i+0xbc>
 800a1ac:	680b      	ldr	r3, [r1, #0]
 800a1ae:	6825      	ldr	r5, [r4, #0]
 800a1b0:	1d18      	adds	r0, r3, #4
 800a1b2:	6008      	str	r0, [r1, #0]
 800a1b4:	0628      	lsls	r0, r5, #24
 800a1b6:	d501      	bpl.n	800a1bc <_printf_i+0xec>
 800a1b8:	681d      	ldr	r5, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <_printf_i+0xf2>
 800a1bc:	0669      	lsls	r1, r5, #25
 800a1be:	d5fb      	bpl.n	800a1b8 <_printf_i+0xe8>
 800a1c0:	881d      	ldrh	r5, [r3, #0]
 800a1c2:	2f6f      	cmp	r7, #111	; 0x6f
 800a1c4:	bf0c      	ite	eq
 800a1c6:	2308      	moveq	r3, #8
 800a1c8:	230a      	movne	r3, #10
 800a1ca:	4852      	ldr	r0, [pc, #328]	; (800a314 <_printf_i+0x244>)
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1d2:	6866      	ldr	r6, [r4, #4]
 800a1d4:	2e00      	cmp	r6, #0
 800a1d6:	bfa8      	it	ge
 800a1d8:	6821      	ldrge	r1, [r4, #0]
 800a1da:	60a6      	str	r6, [r4, #8]
 800a1dc:	bfa4      	itt	ge
 800a1de:	f021 0104 	bicge.w	r1, r1, #4
 800a1e2:	6021      	strge	r1, [r4, #0]
 800a1e4:	b90d      	cbnz	r5, 800a1ea <_printf_i+0x11a>
 800a1e6:	2e00      	cmp	r6, #0
 800a1e8:	d04d      	beq.n	800a286 <_printf_i+0x1b6>
 800a1ea:	4616      	mov	r6, r2
 800a1ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1f0:	fb03 5711 	mls	r7, r3, r1, r5
 800a1f4:	5dc7      	ldrb	r7, [r0, r7]
 800a1f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1fa:	462f      	mov	r7, r5
 800a1fc:	42bb      	cmp	r3, r7
 800a1fe:	460d      	mov	r5, r1
 800a200:	d9f4      	bls.n	800a1ec <_printf_i+0x11c>
 800a202:	2b08      	cmp	r3, #8
 800a204:	d10b      	bne.n	800a21e <_printf_i+0x14e>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	07df      	lsls	r7, r3, #31
 800a20a:	d508      	bpl.n	800a21e <_printf_i+0x14e>
 800a20c:	6923      	ldr	r3, [r4, #16]
 800a20e:	6861      	ldr	r1, [r4, #4]
 800a210:	4299      	cmp	r1, r3
 800a212:	bfde      	ittt	le
 800a214:	2330      	movle	r3, #48	; 0x30
 800a216:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a21a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a21e:	1b92      	subs	r2, r2, r6
 800a220:	6122      	str	r2, [r4, #16]
 800a222:	464b      	mov	r3, r9
 800a224:	4621      	mov	r1, r4
 800a226:	4640      	mov	r0, r8
 800a228:	f8cd a000 	str.w	sl, [sp]
 800a22c:	aa03      	add	r2, sp, #12
 800a22e:	f7ff fedf 	bl	8009ff0 <_printf_common>
 800a232:	3001      	adds	r0, #1
 800a234:	d14c      	bne.n	800a2d0 <_printf_i+0x200>
 800a236:	f04f 30ff 	mov.w	r0, #4294967295
 800a23a:	b004      	add	sp, #16
 800a23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a240:	4834      	ldr	r0, [pc, #208]	; (800a314 <_printf_i+0x244>)
 800a242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a246:	680e      	ldr	r6, [r1, #0]
 800a248:	6823      	ldr	r3, [r4, #0]
 800a24a:	f856 5b04 	ldr.w	r5, [r6], #4
 800a24e:	061f      	lsls	r7, r3, #24
 800a250:	600e      	str	r6, [r1, #0]
 800a252:	d514      	bpl.n	800a27e <_printf_i+0x1ae>
 800a254:	07d9      	lsls	r1, r3, #31
 800a256:	bf44      	itt	mi
 800a258:	f043 0320 	orrmi.w	r3, r3, #32
 800a25c:	6023      	strmi	r3, [r4, #0]
 800a25e:	b91d      	cbnz	r5, 800a268 <_printf_i+0x198>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	f023 0320 	bic.w	r3, r3, #32
 800a266:	6023      	str	r3, [r4, #0]
 800a268:	2310      	movs	r3, #16
 800a26a:	e7af      	b.n	800a1cc <_printf_i+0xfc>
 800a26c:	6823      	ldr	r3, [r4, #0]
 800a26e:	f043 0320 	orr.w	r3, r3, #32
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	2378      	movs	r3, #120	; 0x78
 800a276:	4828      	ldr	r0, [pc, #160]	; (800a318 <_printf_i+0x248>)
 800a278:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a27c:	e7e3      	b.n	800a246 <_printf_i+0x176>
 800a27e:	065e      	lsls	r6, r3, #25
 800a280:	bf48      	it	mi
 800a282:	b2ad      	uxthmi	r5, r5
 800a284:	e7e6      	b.n	800a254 <_printf_i+0x184>
 800a286:	4616      	mov	r6, r2
 800a288:	e7bb      	b.n	800a202 <_printf_i+0x132>
 800a28a:	680b      	ldr	r3, [r1, #0]
 800a28c:	6826      	ldr	r6, [r4, #0]
 800a28e:	1d1d      	adds	r5, r3, #4
 800a290:	6960      	ldr	r0, [r4, #20]
 800a292:	600d      	str	r5, [r1, #0]
 800a294:	0635      	lsls	r5, r6, #24
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	d501      	bpl.n	800a29e <_printf_i+0x1ce>
 800a29a:	6018      	str	r0, [r3, #0]
 800a29c:	e002      	b.n	800a2a4 <_printf_i+0x1d4>
 800a29e:	0671      	lsls	r1, r6, #25
 800a2a0:	d5fb      	bpl.n	800a29a <_printf_i+0x1ca>
 800a2a2:	8018      	strh	r0, [r3, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4616      	mov	r6, r2
 800a2a8:	6123      	str	r3, [r4, #16]
 800a2aa:	e7ba      	b.n	800a222 <_printf_i+0x152>
 800a2ac:	680b      	ldr	r3, [r1, #0]
 800a2ae:	1d1a      	adds	r2, r3, #4
 800a2b0:	600a      	str	r2, [r1, #0]
 800a2b2:	681e      	ldr	r6, [r3, #0]
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	6862      	ldr	r2, [r4, #4]
 800a2ba:	f000 ffd1 	bl	800b260 <memchr>
 800a2be:	b108      	cbz	r0, 800a2c4 <_printf_i+0x1f4>
 800a2c0:	1b80      	subs	r0, r0, r6
 800a2c2:	6060      	str	r0, [r4, #4]
 800a2c4:	6863      	ldr	r3, [r4, #4]
 800a2c6:	6123      	str	r3, [r4, #16]
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ce:	e7a8      	b.n	800a222 <_printf_i+0x152>
 800a2d0:	4632      	mov	r2, r6
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	4640      	mov	r0, r8
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	47d0      	blx	sl
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d0ab      	beq.n	800a236 <_printf_i+0x166>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	079b      	lsls	r3, r3, #30
 800a2e2:	d413      	bmi.n	800a30c <_printf_i+0x23c>
 800a2e4:	68e0      	ldr	r0, [r4, #12]
 800a2e6:	9b03      	ldr	r3, [sp, #12]
 800a2e8:	4298      	cmp	r0, r3
 800a2ea:	bfb8      	it	lt
 800a2ec:	4618      	movlt	r0, r3
 800a2ee:	e7a4      	b.n	800a23a <_printf_i+0x16a>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4632      	mov	r2, r6
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	47d0      	blx	sl
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	d09b      	beq.n	800a236 <_printf_i+0x166>
 800a2fe:	3501      	adds	r5, #1
 800a300:	68e3      	ldr	r3, [r4, #12]
 800a302:	9903      	ldr	r1, [sp, #12]
 800a304:	1a5b      	subs	r3, r3, r1
 800a306:	42ab      	cmp	r3, r5
 800a308:	dcf2      	bgt.n	800a2f0 <_printf_i+0x220>
 800a30a:	e7eb      	b.n	800a2e4 <_printf_i+0x214>
 800a30c:	2500      	movs	r5, #0
 800a30e:	f104 0619 	add.w	r6, r4, #25
 800a312:	e7f5      	b.n	800a300 <_printf_i+0x230>
 800a314:	0800dd9a 	.word	0x0800dd9a
 800a318:	0800ddab 	.word	0x0800ddab

0800a31c <siprintf>:
 800a31c:	b40e      	push	{r1, r2, r3}
 800a31e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a322:	b500      	push	{lr}
 800a324:	b09c      	sub	sp, #112	; 0x70
 800a326:	ab1d      	add	r3, sp, #116	; 0x74
 800a328:	9002      	str	r0, [sp, #8]
 800a32a:	9006      	str	r0, [sp, #24]
 800a32c:	9107      	str	r1, [sp, #28]
 800a32e:	9104      	str	r1, [sp, #16]
 800a330:	4808      	ldr	r0, [pc, #32]	; (800a354 <siprintf+0x38>)
 800a332:	4909      	ldr	r1, [pc, #36]	; (800a358 <siprintf+0x3c>)
 800a334:	f853 2b04 	ldr.w	r2, [r3], #4
 800a338:	9105      	str	r1, [sp, #20]
 800a33a:	6800      	ldr	r0, [r0, #0]
 800a33c:	a902      	add	r1, sp, #8
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	f001 fc2e 	bl	800bba0 <_svfiprintf_r>
 800a344:	2200      	movs	r2, #0
 800a346:	9b02      	ldr	r3, [sp, #8]
 800a348:	701a      	strb	r2, [r3, #0]
 800a34a:	b01c      	add	sp, #112	; 0x70
 800a34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a350:	b003      	add	sp, #12
 800a352:	4770      	bx	lr
 800a354:	20000180 	.word	0x20000180
 800a358:	ffff0208 	.word	0xffff0208

0800a35c <quorem>:
 800a35c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	6903      	ldr	r3, [r0, #16]
 800a362:	690c      	ldr	r4, [r1, #16]
 800a364:	4607      	mov	r7, r0
 800a366:	42a3      	cmp	r3, r4
 800a368:	f2c0 8083 	blt.w	800a472 <quorem+0x116>
 800a36c:	3c01      	subs	r4, #1
 800a36e:	f100 0514 	add.w	r5, r0, #20
 800a372:	f101 0814 	add.w	r8, r1, #20
 800a376:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a380:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a384:	3301      	adds	r3, #1
 800a386:	429a      	cmp	r2, r3
 800a388:	fbb2 f6f3 	udiv	r6, r2, r3
 800a38c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a390:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a394:	d332      	bcc.n	800a3fc <quorem+0xa0>
 800a396:	f04f 0e00 	mov.w	lr, #0
 800a39a:	4640      	mov	r0, r8
 800a39c:	46ac      	mov	ip, r5
 800a39e:	46f2      	mov	sl, lr
 800a3a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a3a4:	b293      	uxth	r3, r2
 800a3a6:	fb06 e303 	mla	r3, r6, r3, lr
 800a3aa:	0c12      	lsrs	r2, r2, #16
 800a3ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a3b0:	fb06 e202 	mla	r2, r6, r2, lr
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	ebaa 0303 	sub.w	r3, sl, r3
 800a3ba:	f8dc a000 	ldr.w	sl, [ip]
 800a3be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a3c2:	fa1f fa8a 	uxth.w	sl, sl
 800a3c6:	4453      	add	r3, sl
 800a3c8:	fa1f fa82 	uxth.w	sl, r2
 800a3cc:	f8dc 2000 	ldr.w	r2, [ip]
 800a3d0:	4581      	cmp	r9, r0
 800a3d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a3d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a3e4:	f84c 3b04 	str.w	r3, [ip], #4
 800a3e8:	d2da      	bcs.n	800a3a0 <quorem+0x44>
 800a3ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800a3ee:	b92b      	cbnz	r3, 800a3fc <quorem+0xa0>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	429d      	cmp	r5, r3
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	d32f      	bcc.n	800a45a <quorem+0xfe>
 800a3fa:	613c      	str	r4, [r7, #16]
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f001 f9b7 	bl	800b770 <__mcmp>
 800a402:	2800      	cmp	r0, #0
 800a404:	db25      	blt.n	800a452 <quorem+0xf6>
 800a406:	4628      	mov	r0, r5
 800a408:	f04f 0c00 	mov.w	ip, #0
 800a40c:	3601      	adds	r6, #1
 800a40e:	f858 1b04 	ldr.w	r1, [r8], #4
 800a412:	f8d0 e000 	ldr.w	lr, [r0]
 800a416:	b28b      	uxth	r3, r1
 800a418:	ebac 0303 	sub.w	r3, ip, r3
 800a41c:	fa1f f28e 	uxth.w	r2, lr
 800a420:	4413      	add	r3, r2
 800a422:	0c0a      	lsrs	r2, r1, #16
 800a424:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a428:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a432:	45c1      	cmp	r9, r8
 800a434:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a438:	f840 3b04 	str.w	r3, [r0], #4
 800a43c:	d2e7      	bcs.n	800a40e <quorem+0xb2>
 800a43e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a442:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a446:	b922      	cbnz	r2, 800a452 <quorem+0xf6>
 800a448:	3b04      	subs	r3, #4
 800a44a:	429d      	cmp	r5, r3
 800a44c:	461a      	mov	r2, r3
 800a44e:	d30a      	bcc.n	800a466 <quorem+0x10a>
 800a450:	613c      	str	r4, [r7, #16]
 800a452:	4630      	mov	r0, r6
 800a454:	b003      	add	sp, #12
 800a456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	3b04      	subs	r3, #4
 800a45e:	2a00      	cmp	r2, #0
 800a460:	d1cb      	bne.n	800a3fa <quorem+0x9e>
 800a462:	3c01      	subs	r4, #1
 800a464:	e7c6      	b.n	800a3f4 <quorem+0x98>
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	3b04      	subs	r3, #4
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	d1f0      	bne.n	800a450 <quorem+0xf4>
 800a46e:	3c01      	subs	r4, #1
 800a470:	e7eb      	b.n	800a44a <quorem+0xee>
 800a472:	2000      	movs	r0, #0
 800a474:	e7ee      	b.n	800a454 <quorem+0xf8>
	...

0800a478 <_dtoa_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	4616      	mov	r6, r2
 800a47e:	461f      	mov	r7, r3
 800a480:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a482:	b099      	sub	sp, #100	; 0x64
 800a484:	4605      	mov	r5, r0
 800a486:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a48a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a48e:	b974      	cbnz	r4, 800a4ae <_dtoa_r+0x36>
 800a490:	2010      	movs	r0, #16
 800a492:	f000 fedd 	bl	800b250 <malloc>
 800a496:	4602      	mov	r2, r0
 800a498:	6268      	str	r0, [r5, #36]	; 0x24
 800a49a:	b920      	cbnz	r0, 800a4a6 <_dtoa_r+0x2e>
 800a49c:	21ea      	movs	r1, #234	; 0xea
 800a49e:	4bae      	ldr	r3, [pc, #696]	; (800a758 <_dtoa_r+0x2e0>)
 800a4a0:	48ae      	ldr	r0, [pc, #696]	; (800a75c <_dtoa_r+0x2e4>)
 800a4a2:	f001 fda3 	bl	800bfec <__assert_func>
 800a4a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4aa:	6004      	str	r4, [r0, #0]
 800a4ac:	60c4      	str	r4, [r0, #12]
 800a4ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4b0:	6819      	ldr	r1, [r3, #0]
 800a4b2:	b151      	cbz	r1, 800a4ca <_dtoa_r+0x52>
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	4093      	lsls	r3, r2
 800a4ba:	604a      	str	r2, [r1, #4]
 800a4bc:	608b      	str	r3, [r1, #8]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 ff1c 	bl	800b2fc <_Bfree>
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	1e3b      	subs	r3, r7, #0
 800a4cc:	bfaf      	iteee	ge
 800a4ce:	2300      	movge	r3, #0
 800a4d0:	2201      	movlt	r2, #1
 800a4d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a4d6:	9305      	strlt	r3, [sp, #20]
 800a4d8:	bfa8      	it	ge
 800a4da:	f8c8 3000 	strge.w	r3, [r8]
 800a4de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a4e2:	4b9f      	ldr	r3, [pc, #636]	; (800a760 <_dtoa_r+0x2e8>)
 800a4e4:	bfb8      	it	lt
 800a4e6:	f8c8 2000 	strlt.w	r2, [r8]
 800a4ea:	ea33 0309 	bics.w	r3, r3, r9
 800a4ee:	d119      	bne.n	800a524 <_dtoa_r+0xac>
 800a4f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a4f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a4f6:	6013      	str	r3, [r2, #0]
 800a4f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4fc:	4333      	orrs	r3, r6
 800a4fe:	f000 8580 	beq.w	800b002 <_dtoa_r+0xb8a>
 800a502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a504:	b953      	cbnz	r3, 800a51c <_dtoa_r+0xa4>
 800a506:	4b97      	ldr	r3, [pc, #604]	; (800a764 <_dtoa_r+0x2ec>)
 800a508:	e022      	b.n	800a550 <_dtoa_r+0xd8>
 800a50a:	4b97      	ldr	r3, [pc, #604]	; (800a768 <_dtoa_r+0x2f0>)
 800a50c:	9308      	str	r3, [sp, #32]
 800a50e:	3308      	adds	r3, #8
 800a510:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	9808      	ldr	r0, [sp, #32]
 800a516:	b019      	add	sp, #100	; 0x64
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	4b91      	ldr	r3, [pc, #580]	; (800a764 <_dtoa_r+0x2ec>)
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	3303      	adds	r3, #3
 800a522:	e7f5      	b.n	800a510 <_dtoa_r+0x98>
 800a524:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a528:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a52c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a530:	2200      	movs	r2, #0
 800a532:	2300      	movs	r3, #0
 800a534:	f7f6 fa38 	bl	80009a8 <__aeabi_dcmpeq>
 800a538:	4680      	mov	r8, r0
 800a53a:	b158      	cbz	r0, 800a554 <_dtoa_r+0xdc>
 800a53c:	2301      	movs	r3, #1
 800a53e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a544:	2b00      	cmp	r3, #0
 800a546:	f000 8559 	beq.w	800affc <_dtoa_r+0xb84>
 800a54a:	4888      	ldr	r0, [pc, #544]	; (800a76c <_dtoa_r+0x2f4>)
 800a54c:	6018      	str	r0, [r3, #0]
 800a54e:	1e43      	subs	r3, r0, #1
 800a550:	9308      	str	r3, [sp, #32]
 800a552:	e7df      	b.n	800a514 <_dtoa_r+0x9c>
 800a554:	ab16      	add	r3, sp, #88	; 0x58
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	ab17      	add	r3, sp, #92	; 0x5c
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	4628      	mov	r0, r5
 800a55e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a562:	f001 f9b1 	bl	800b8c8 <__d2b>
 800a566:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a56a:	4682      	mov	sl, r0
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	d07e      	beq.n	800a66e <_dtoa_r+0x1f6>
 800a570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a576:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a57a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a57e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a582:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a586:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a58a:	2200      	movs	r2, #0
 800a58c:	4b78      	ldr	r3, [pc, #480]	; (800a770 <_dtoa_r+0x2f8>)
 800a58e:	f7f5 fdeb 	bl	8000168 <__aeabi_dsub>
 800a592:	a36b      	add	r3, pc, #428	; (adr r3, 800a740 <_dtoa_r+0x2c8>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f7f5 ff9e 	bl	80004d8 <__aeabi_dmul>
 800a59c:	a36a      	add	r3, pc, #424	; (adr r3, 800a748 <_dtoa_r+0x2d0>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	f7f5 fde3 	bl	800016c <__adddf3>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	460f      	mov	r7, r1
 800a5ac:	f7f5 ff2a 	bl	8000404 <__aeabi_i2d>
 800a5b0:	a367      	add	r3, pc, #412	; (adr r3, 800a750 <_dtoa_r+0x2d8>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 ff8f 	bl	80004d8 <__aeabi_dmul>
 800a5ba:	4602      	mov	r2, r0
 800a5bc:	460b      	mov	r3, r1
 800a5be:	4630      	mov	r0, r6
 800a5c0:	4639      	mov	r1, r7
 800a5c2:	f7f5 fdd3 	bl	800016c <__adddf3>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	460f      	mov	r7, r1
 800a5ca:	f7f6 fa35 	bl	8000a38 <__aeabi_d2iz>
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	4681      	mov	r9, r0
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 f9f0 	bl	80009bc <__aeabi_dcmplt>
 800a5dc:	b148      	cbz	r0, 800a5f2 <_dtoa_r+0x17a>
 800a5de:	4648      	mov	r0, r9
 800a5e0:	f7f5 ff10 	bl	8000404 <__aeabi_i2d>
 800a5e4:	4632      	mov	r2, r6
 800a5e6:	463b      	mov	r3, r7
 800a5e8:	f7f6 f9de 	bl	80009a8 <__aeabi_dcmpeq>
 800a5ec:	b908      	cbnz	r0, 800a5f2 <_dtoa_r+0x17a>
 800a5ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5f2:	f1b9 0f16 	cmp.w	r9, #22
 800a5f6:	d857      	bhi.n	800a6a8 <_dtoa_r+0x230>
 800a5f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5fc:	4b5d      	ldr	r3, [pc, #372]	; (800a774 <_dtoa_r+0x2fc>)
 800a5fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a606:	f7f6 f9d9 	bl	80009bc <__aeabi_dcmplt>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d04e      	beq.n	800a6ac <_dtoa_r+0x234>
 800a60e:	2300      	movs	r3, #0
 800a610:	f109 39ff 	add.w	r9, r9, #4294967295
 800a614:	930f      	str	r3, [sp, #60]	; 0x3c
 800a616:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a618:	1b1c      	subs	r4, r3, r4
 800a61a:	1e63      	subs	r3, r4, #1
 800a61c:	9309      	str	r3, [sp, #36]	; 0x24
 800a61e:	bf49      	itett	mi
 800a620:	f1c4 0301 	rsbmi	r3, r4, #1
 800a624:	2300      	movpl	r3, #0
 800a626:	9306      	strmi	r3, [sp, #24]
 800a628:	2300      	movmi	r3, #0
 800a62a:	bf54      	ite	pl
 800a62c:	9306      	strpl	r3, [sp, #24]
 800a62e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a630:	f1b9 0f00 	cmp.w	r9, #0
 800a634:	db3c      	blt.n	800a6b0 <_dtoa_r+0x238>
 800a636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a638:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a63c:	444b      	add	r3, r9
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	2300      	movs	r3, #0
 800a642:	930a      	str	r3, [sp, #40]	; 0x28
 800a644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a646:	2b09      	cmp	r3, #9
 800a648:	d86c      	bhi.n	800a724 <_dtoa_r+0x2ac>
 800a64a:	2b05      	cmp	r3, #5
 800a64c:	bfc4      	itt	gt
 800a64e:	3b04      	subgt	r3, #4
 800a650:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a654:	bfc8      	it	gt
 800a656:	2400      	movgt	r4, #0
 800a658:	f1a3 0302 	sub.w	r3, r3, #2
 800a65c:	bfd8      	it	le
 800a65e:	2401      	movle	r4, #1
 800a660:	2b03      	cmp	r3, #3
 800a662:	f200 808b 	bhi.w	800a77c <_dtoa_r+0x304>
 800a666:	e8df f003 	tbb	[pc, r3]
 800a66a:	4f2d      	.short	0x4f2d
 800a66c:	5b4d      	.short	0x5b4d
 800a66e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a672:	441c      	add	r4, r3
 800a674:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a678:	2b20      	cmp	r3, #32
 800a67a:	bfc3      	ittte	gt
 800a67c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a680:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a684:	fa09 f303 	lslgt.w	r3, r9, r3
 800a688:	f1c3 0320 	rsble	r3, r3, #32
 800a68c:	bfc6      	itte	gt
 800a68e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a692:	4318      	orrgt	r0, r3
 800a694:	fa06 f003 	lslle.w	r0, r6, r3
 800a698:	f7f5 fea4 	bl	80003e4 <__aeabi_ui2d>
 800a69c:	2301      	movs	r3, #1
 800a69e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a6a2:	3c01      	subs	r4, #1
 800a6a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a6a6:	e770      	b.n	800a58a <_dtoa_r+0x112>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e7b3      	b.n	800a614 <_dtoa_r+0x19c>
 800a6ac:	900f      	str	r0, [sp, #60]	; 0x3c
 800a6ae:	e7b2      	b.n	800a616 <_dtoa_r+0x19e>
 800a6b0:	9b06      	ldr	r3, [sp, #24]
 800a6b2:	eba3 0309 	sub.w	r3, r3, r9
 800a6b6:	9306      	str	r3, [sp, #24]
 800a6b8:	f1c9 0300 	rsb	r3, r9, #0
 800a6bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a6be:	2300      	movs	r3, #0
 800a6c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a6c2:	e7bf      	b.n	800a644 <_dtoa_r+0x1cc>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dc59      	bgt.n	800a782 <_dtoa_r+0x30a>
 800a6ce:	f04f 0b01 	mov.w	fp, #1
 800a6d2:	465b      	mov	r3, fp
 800a6d4:	f8cd b008 	str.w	fp, [sp, #8]
 800a6d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800a6dc:	2200      	movs	r2, #0
 800a6de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a6e0:	6042      	str	r2, [r0, #4]
 800a6e2:	2204      	movs	r2, #4
 800a6e4:	f102 0614 	add.w	r6, r2, #20
 800a6e8:	429e      	cmp	r6, r3
 800a6ea:	6841      	ldr	r1, [r0, #4]
 800a6ec:	d94f      	bls.n	800a78e <_dtoa_r+0x316>
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 fdc4 	bl	800b27c <_Balloc>
 800a6f4:	9008      	str	r0, [sp, #32]
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	d14d      	bne.n	800a796 <_dtoa_r+0x31e>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a700:	4b1d      	ldr	r3, [pc, #116]	; (800a778 <_dtoa_r+0x300>)
 800a702:	e6cd      	b.n	800a4a0 <_dtoa_r+0x28>
 800a704:	2301      	movs	r3, #1
 800a706:	e7de      	b.n	800a6c6 <_dtoa_r+0x24e>
 800a708:	2300      	movs	r3, #0
 800a70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a70e:	eb09 0b03 	add.w	fp, r9, r3
 800a712:	f10b 0301 	add.w	r3, fp, #1
 800a716:	2b01      	cmp	r3, #1
 800a718:	9302      	str	r3, [sp, #8]
 800a71a:	bfb8      	it	lt
 800a71c:	2301      	movlt	r3, #1
 800a71e:	e7dd      	b.n	800a6dc <_dtoa_r+0x264>
 800a720:	2301      	movs	r3, #1
 800a722:	e7f2      	b.n	800a70a <_dtoa_r+0x292>
 800a724:	2401      	movs	r4, #1
 800a726:	2300      	movs	r3, #0
 800a728:	940b      	str	r4, [sp, #44]	; 0x2c
 800a72a:	9322      	str	r3, [sp, #136]	; 0x88
 800a72c:	f04f 3bff 	mov.w	fp, #4294967295
 800a730:	2200      	movs	r2, #0
 800a732:	2312      	movs	r3, #18
 800a734:	f8cd b008 	str.w	fp, [sp, #8]
 800a738:	9223      	str	r2, [sp, #140]	; 0x8c
 800a73a:	e7cf      	b.n	800a6dc <_dtoa_r+0x264>
 800a73c:	f3af 8000 	nop.w
 800a740:	636f4361 	.word	0x636f4361
 800a744:	3fd287a7 	.word	0x3fd287a7
 800a748:	8b60c8b3 	.word	0x8b60c8b3
 800a74c:	3fc68a28 	.word	0x3fc68a28
 800a750:	509f79fb 	.word	0x509f79fb
 800a754:	3fd34413 	.word	0x3fd34413
 800a758:	0800ddc9 	.word	0x0800ddc9
 800a75c:	0800dde0 	.word	0x0800dde0
 800a760:	7ff00000 	.word	0x7ff00000
 800a764:	0800ddc5 	.word	0x0800ddc5
 800a768:	0800ddbc 	.word	0x0800ddbc
 800a76c:	0800dd99 	.word	0x0800dd99
 800a770:	3ff80000 	.word	0x3ff80000
 800a774:	0800df38 	.word	0x0800df38
 800a778:	0800de3f 	.word	0x0800de3f
 800a77c:	2301      	movs	r3, #1
 800a77e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a780:	e7d4      	b.n	800a72c <_dtoa_r+0x2b4>
 800a782:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800a786:	465b      	mov	r3, fp
 800a788:	f8cd b008 	str.w	fp, [sp, #8]
 800a78c:	e7a6      	b.n	800a6dc <_dtoa_r+0x264>
 800a78e:	3101      	adds	r1, #1
 800a790:	6041      	str	r1, [r0, #4]
 800a792:	0052      	lsls	r2, r2, #1
 800a794:	e7a6      	b.n	800a6e4 <_dtoa_r+0x26c>
 800a796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a798:	9a08      	ldr	r2, [sp, #32]
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	9b02      	ldr	r3, [sp, #8]
 800a79e:	2b0e      	cmp	r3, #14
 800a7a0:	f200 80a8 	bhi.w	800a8f4 <_dtoa_r+0x47c>
 800a7a4:	2c00      	cmp	r4, #0
 800a7a6:	f000 80a5 	beq.w	800a8f4 <_dtoa_r+0x47c>
 800a7aa:	f1b9 0f00 	cmp.w	r9, #0
 800a7ae:	dd34      	ble.n	800a81a <_dtoa_r+0x3a2>
 800a7b0:	4a9a      	ldr	r2, [pc, #616]	; (800aa1c <_dtoa_r+0x5a4>)
 800a7b2:	f009 030f 	and.w	r3, r9, #15
 800a7b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a7ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 800a7be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a7c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a7c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800a7ca:	d016      	beq.n	800a7fa <_dtoa_r+0x382>
 800a7cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7d0:	4b93      	ldr	r3, [pc, #588]	; (800aa20 <_dtoa_r+0x5a8>)
 800a7d2:	2703      	movs	r7, #3
 800a7d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7d8:	f7f5 ffa8 	bl	800072c <__aeabi_ddiv>
 800a7dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7e0:	f004 040f 	and.w	r4, r4, #15
 800a7e4:	4e8e      	ldr	r6, [pc, #568]	; (800aa20 <_dtoa_r+0x5a8>)
 800a7e6:	b954      	cbnz	r4, 800a7fe <_dtoa_r+0x386>
 800a7e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7f0:	f7f5 ff9c 	bl	800072c <__aeabi_ddiv>
 800a7f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f8:	e029      	b.n	800a84e <_dtoa_r+0x3d6>
 800a7fa:	2702      	movs	r7, #2
 800a7fc:	e7f2      	b.n	800a7e4 <_dtoa_r+0x36c>
 800a7fe:	07e1      	lsls	r1, r4, #31
 800a800:	d508      	bpl.n	800a814 <_dtoa_r+0x39c>
 800a802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a806:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a80a:	f7f5 fe65 	bl	80004d8 <__aeabi_dmul>
 800a80e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a812:	3701      	adds	r7, #1
 800a814:	1064      	asrs	r4, r4, #1
 800a816:	3608      	adds	r6, #8
 800a818:	e7e5      	b.n	800a7e6 <_dtoa_r+0x36e>
 800a81a:	f000 80a5 	beq.w	800a968 <_dtoa_r+0x4f0>
 800a81e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a822:	f1c9 0400 	rsb	r4, r9, #0
 800a826:	4b7d      	ldr	r3, [pc, #500]	; (800aa1c <_dtoa_r+0x5a4>)
 800a828:	f004 020f 	and.w	r2, r4, #15
 800a82c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	f7f5 fe50 	bl	80004d8 <__aeabi_dmul>
 800a838:	2702      	movs	r7, #2
 800a83a:	2300      	movs	r3, #0
 800a83c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a840:	4e77      	ldr	r6, [pc, #476]	; (800aa20 <_dtoa_r+0x5a8>)
 800a842:	1124      	asrs	r4, r4, #4
 800a844:	2c00      	cmp	r4, #0
 800a846:	f040 8084 	bne.w	800a952 <_dtoa_r+0x4da>
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d1d2      	bne.n	800a7f4 <_dtoa_r+0x37c>
 800a84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a850:	2b00      	cmp	r3, #0
 800a852:	f000 808b 	beq.w	800a96c <_dtoa_r+0x4f4>
 800a856:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a85a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a85e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a862:	2200      	movs	r2, #0
 800a864:	4b6f      	ldr	r3, [pc, #444]	; (800aa24 <_dtoa_r+0x5ac>)
 800a866:	f7f6 f8a9 	bl	80009bc <__aeabi_dcmplt>
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d07e      	beq.n	800a96c <_dtoa_r+0x4f4>
 800a86e:	9b02      	ldr	r3, [sp, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d07b      	beq.n	800a96c <_dtoa_r+0x4f4>
 800a874:	f1bb 0f00 	cmp.w	fp, #0
 800a878:	dd38      	ble.n	800a8ec <_dtoa_r+0x474>
 800a87a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a87e:	2200      	movs	r2, #0
 800a880:	4b69      	ldr	r3, [pc, #420]	; (800aa28 <_dtoa_r+0x5b0>)
 800a882:	f7f5 fe29 	bl	80004d8 <__aeabi_dmul>
 800a886:	465c      	mov	r4, fp
 800a888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a88c:	f109 38ff 	add.w	r8, r9, #4294967295
 800a890:	3701      	adds	r7, #1
 800a892:	4638      	mov	r0, r7
 800a894:	f7f5 fdb6 	bl	8000404 <__aeabi_i2d>
 800a898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a89c:	f7f5 fe1c 	bl	80004d8 <__aeabi_dmul>
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	4b62      	ldr	r3, [pc, #392]	; (800aa2c <_dtoa_r+0x5b4>)
 800a8a4:	f7f5 fc62 	bl	800016c <__adddf3>
 800a8a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a8ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a8b0:	9611      	str	r6, [sp, #68]	; 0x44
 800a8b2:	2c00      	cmp	r4, #0
 800a8b4:	d15d      	bne.n	800a972 <_dtoa_r+0x4fa>
 800a8b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4b5c      	ldr	r3, [pc, #368]	; (800aa30 <_dtoa_r+0x5b8>)
 800a8be:	f7f5 fc53 	bl	8000168 <__aeabi_dsub>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8ca:	4633      	mov	r3, r6
 800a8cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8ce:	f7f6 f893 	bl	80009f8 <__aeabi_dcmpgt>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f040 829e 	bne.w	800ae14 <_dtoa_r+0x99c>
 800a8d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a8e2:	f7f6 f86b 	bl	80009bc <__aeabi_dcmplt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	f040 8292 	bne.w	800ae10 <_dtoa_r+0x998>
 800a8ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a8f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f2c0 8153 	blt.w	800aba2 <_dtoa_r+0x72a>
 800a8fc:	f1b9 0f0e 	cmp.w	r9, #14
 800a900:	f300 814f 	bgt.w	800aba2 <_dtoa_r+0x72a>
 800a904:	4b45      	ldr	r3, [pc, #276]	; (800aa1c <_dtoa_r+0x5a4>)
 800a906:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a90a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a90e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a914:	2b00      	cmp	r3, #0
 800a916:	f280 80db 	bge.w	800aad0 <_dtoa_r+0x658>
 800a91a:	9b02      	ldr	r3, [sp, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f300 80d7 	bgt.w	800aad0 <_dtoa_r+0x658>
 800a922:	f040 8274 	bne.w	800ae0e <_dtoa_r+0x996>
 800a926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a92a:	2200      	movs	r2, #0
 800a92c:	4b40      	ldr	r3, [pc, #256]	; (800aa30 <_dtoa_r+0x5b8>)
 800a92e:	f7f5 fdd3 	bl	80004d8 <__aeabi_dmul>
 800a932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a936:	f7f6 f855 	bl	80009e4 <__aeabi_dcmpge>
 800a93a:	9c02      	ldr	r4, [sp, #8]
 800a93c:	4626      	mov	r6, r4
 800a93e:	2800      	cmp	r0, #0
 800a940:	f040 824a 	bne.w	800add8 <_dtoa_r+0x960>
 800a944:	2331      	movs	r3, #49	; 0x31
 800a946:	9f08      	ldr	r7, [sp, #32]
 800a948:	f109 0901 	add.w	r9, r9, #1
 800a94c:	f807 3b01 	strb.w	r3, [r7], #1
 800a950:	e246      	b.n	800ade0 <_dtoa_r+0x968>
 800a952:	07e2      	lsls	r2, r4, #31
 800a954:	d505      	bpl.n	800a962 <_dtoa_r+0x4ea>
 800a956:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a95a:	f7f5 fdbd 	bl	80004d8 <__aeabi_dmul>
 800a95e:	2301      	movs	r3, #1
 800a960:	3701      	adds	r7, #1
 800a962:	1064      	asrs	r4, r4, #1
 800a964:	3608      	adds	r6, #8
 800a966:	e76d      	b.n	800a844 <_dtoa_r+0x3cc>
 800a968:	2702      	movs	r7, #2
 800a96a:	e770      	b.n	800a84e <_dtoa_r+0x3d6>
 800a96c:	46c8      	mov	r8, r9
 800a96e:	9c02      	ldr	r4, [sp, #8]
 800a970:	e78f      	b.n	800a892 <_dtoa_r+0x41a>
 800a972:	9908      	ldr	r1, [sp, #32]
 800a974:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <_dtoa_r+0x5a4>)
 800a976:	4421      	add	r1, r4
 800a978:	9112      	str	r1, [sp, #72]	; 0x48
 800a97a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a97c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a980:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a984:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a988:	2900      	cmp	r1, #0
 800a98a:	d055      	beq.n	800aa38 <_dtoa_r+0x5c0>
 800a98c:	2000      	movs	r0, #0
 800a98e:	4929      	ldr	r1, [pc, #164]	; (800aa34 <_dtoa_r+0x5bc>)
 800a990:	f7f5 fecc 	bl	800072c <__aeabi_ddiv>
 800a994:	463b      	mov	r3, r7
 800a996:	4632      	mov	r2, r6
 800a998:	f7f5 fbe6 	bl	8000168 <__aeabi_dsub>
 800a99c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a9a0:	9f08      	ldr	r7, [sp, #32]
 800a9a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9a6:	f7f6 f847 	bl	8000a38 <__aeabi_d2iz>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	f7f5 fd2a 	bl	8000404 <__aeabi_i2d>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9b8:	f7f5 fbd6 	bl	8000168 <__aeabi_dsub>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	460b      	mov	r3, r1
 800a9c0:	3430      	adds	r4, #48	; 0x30
 800a9c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9ca:	f807 4b01 	strb.w	r4, [r7], #1
 800a9ce:	f7f5 fff5 	bl	80009bc <__aeabi_dcmplt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d174      	bne.n	800aac0 <_dtoa_r+0x648>
 800a9d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9da:	2000      	movs	r0, #0
 800a9dc:	4911      	ldr	r1, [pc, #68]	; (800aa24 <_dtoa_r+0x5ac>)
 800a9de:	f7f5 fbc3 	bl	8000168 <__aeabi_dsub>
 800a9e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a9e6:	f7f5 ffe9 	bl	80009bc <__aeabi_dcmplt>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	f040 80b6 	bne.w	800ab5c <_dtoa_r+0x6e4>
 800a9f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9f2:	429f      	cmp	r7, r3
 800a9f4:	f43f af7a 	beq.w	800a8ec <_dtoa_r+0x474>
 800a9f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <_dtoa_r+0x5b0>)
 800aa00:	f7f5 fd6a 	bl	80004d8 <__aeabi_dmul>
 800aa04:	2200      	movs	r2, #0
 800aa06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa0e:	4b06      	ldr	r3, [pc, #24]	; (800aa28 <_dtoa_r+0x5b0>)
 800aa10:	f7f5 fd62 	bl	80004d8 <__aeabi_dmul>
 800aa14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa18:	e7c3      	b.n	800a9a2 <_dtoa_r+0x52a>
 800aa1a:	bf00      	nop
 800aa1c:	0800df38 	.word	0x0800df38
 800aa20:	0800df10 	.word	0x0800df10
 800aa24:	3ff00000 	.word	0x3ff00000
 800aa28:	40240000 	.word	0x40240000
 800aa2c:	401c0000 	.word	0x401c0000
 800aa30:	40140000 	.word	0x40140000
 800aa34:	3fe00000 	.word	0x3fe00000
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f5 fd4c 	bl	80004d8 <__aeabi_dmul>
 800aa40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa42:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa46:	9c08      	ldr	r4, [sp, #32]
 800aa48:	9314      	str	r3, [sp, #80]	; 0x50
 800aa4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa4e:	f7f5 fff3 	bl	8000a38 <__aeabi_d2iz>
 800aa52:	9015      	str	r0, [sp, #84]	; 0x54
 800aa54:	f7f5 fcd6 	bl	8000404 <__aeabi_i2d>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa60:	f7f5 fb82 	bl	8000168 <__aeabi_dsub>
 800aa64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa66:	4606      	mov	r6, r0
 800aa68:	3330      	adds	r3, #48	; 0x30
 800aa6a:	f804 3b01 	strb.w	r3, [r4], #1
 800aa6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aa70:	460f      	mov	r7, r1
 800aa72:	429c      	cmp	r4, r3
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	d124      	bne.n	800aac4 <_dtoa_r+0x64c>
 800aa7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa7e:	4bb3      	ldr	r3, [pc, #716]	; (800ad4c <_dtoa_r+0x8d4>)
 800aa80:	f7f5 fb74 	bl	800016c <__adddf3>
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f5 ffb4 	bl	80009f8 <__aeabi_dcmpgt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d162      	bne.n	800ab5a <_dtoa_r+0x6e2>
 800aa94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa98:	2000      	movs	r0, #0
 800aa9a:	49ac      	ldr	r1, [pc, #688]	; (800ad4c <_dtoa_r+0x8d4>)
 800aa9c:	f7f5 fb64 	bl	8000168 <__aeabi_dsub>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	f7f5 ff88 	bl	80009bc <__aeabi_dcmplt>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	f43f af1d 	beq.w	800a8ec <_dtoa_r+0x474>
 800aab2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aab4:	1e7b      	subs	r3, r7, #1
 800aab6:	9314      	str	r3, [sp, #80]	; 0x50
 800aab8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800aabc:	2b30      	cmp	r3, #48	; 0x30
 800aabe:	d0f8      	beq.n	800aab2 <_dtoa_r+0x63a>
 800aac0:	46c1      	mov	r9, r8
 800aac2:	e03a      	b.n	800ab3a <_dtoa_r+0x6c2>
 800aac4:	4ba2      	ldr	r3, [pc, #648]	; (800ad50 <_dtoa_r+0x8d8>)
 800aac6:	f7f5 fd07 	bl	80004d8 <__aeabi_dmul>
 800aaca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aace:	e7bc      	b.n	800aa4a <_dtoa_r+0x5d2>
 800aad0:	9f08      	ldr	r7, [sp, #32]
 800aad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aada:	f7f5 fe27 	bl	800072c <__aeabi_ddiv>
 800aade:	f7f5 ffab 	bl	8000a38 <__aeabi_d2iz>
 800aae2:	4604      	mov	r4, r0
 800aae4:	f7f5 fc8e 	bl	8000404 <__aeabi_i2d>
 800aae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaec:	f7f5 fcf4 	bl	80004d8 <__aeabi_dmul>
 800aaf0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aafc:	f7f5 fb34 	bl	8000168 <__aeabi_dsub>
 800ab00:	f807 6b01 	strb.w	r6, [r7], #1
 800ab04:	9e08      	ldr	r6, [sp, #32]
 800ab06:	9b02      	ldr	r3, [sp, #8]
 800ab08:	1bbe      	subs	r6, r7, r6
 800ab0a:	42b3      	cmp	r3, r6
 800ab0c:	d13a      	bne.n	800ab84 <_dtoa_r+0x70c>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	f7f5 fb2b 	bl	800016c <__adddf3>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab22:	f7f5 ff69 	bl	80009f8 <__aeabi_dcmpgt>
 800ab26:	bb58      	cbnz	r0, 800ab80 <_dtoa_r+0x708>
 800ab28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab30:	f7f5 ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 800ab34:	b108      	cbz	r0, 800ab3a <_dtoa_r+0x6c2>
 800ab36:	07e1      	lsls	r1, r4, #31
 800ab38:	d422      	bmi.n	800ab80 <_dtoa_r+0x708>
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	4651      	mov	r1, sl
 800ab3e:	f000 fbdd 	bl	800b2fc <_Bfree>
 800ab42:	2300      	movs	r3, #0
 800ab44:	703b      	strb	r3, [r7, #0]
 800ab46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ab48:	f109 0001 	add.w	r0, r9, #1
 800ab4c:	6018      	str	r0, [r3, #0]
 800ab4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f43f acdf 	beq.w	800a514 <_dtoa_r+0x9c>
 800ab56:	601f      	str	r7, [r3, #0]
 800ab58:	e4dc      	b.n	800a514 <_dtoa_r+0x9c>
 800ab5a:	4627      	mov	r7, r4
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	461f      	mov	r7, r3
 800ab60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab64:	2a39      	cmp	r2, #57	; 0x39
 800ab66:	d107      	bne.n	800ab78 <_dtoa_r+0x700>
 800ab68:	9a08      	ldr	r2, [sp, #32]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d1f7      	bne.n	800ab5e <_dtoa_r+0x6e6>
 800ab6e:	2230      	movs	r2, #48	; 0x30
 800ab70:	9908      	ldr	r1, [sp, #32]
 800ab72:	f108 0801 	add.w	r8, r8, #1
 800ab76:	700a      	strb	r2, [r1, #0]
 800ab78:	781a      	ldrb	r2, [r3, #0]
 800ab7a:	3201      	adds	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
 800ab7e:	e79f      	b.n	800aac0 <_dtoa_r+0x648>
 800ab80:	46c8      	mov	r8, r9
 800ab82:	e7eb      	b.n	800ab5c <_dtoa_r+0x6e4>
 800ab84:	2200      	movs	r2, #0
 800ab86:	4b72      	ldr	r3, [pc, #456]	; (800ad50 <_dtoa_r+0x8d8>)
 800ab88:	f7f5 fca6 	bl	80004d8 <__aeabi_dmul>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	460b      	mov	r3, r1
 800ab90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab94:	2200      	movs	r2, #0
 800ab96:	2300      	movs	r3, #0
 800ab98:	f7f5 ff06 	bl	80009a8 <__aeabi_dcmpeq>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d098      	beq.n	800aad2 <_dtoa_r+0x65a>
 800aba0:	e7cb      	b.n	800ab3a <_dtoa_r+0x6c2>
 800aba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	f000 80cd 	beq.w	800ad44 <_dtoa_r+0x8cc>
 800abaa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800abac:	2a01      	cmp	r2, #1
 800abae:	f300 80af 	bgt.w	800ad10 <_dtoa_r+0x898>
 800abb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800abb4:	2a00      	cmp	r2, #0
 800abb6:	f000 80a7 	beq.w	800ad08 <_dtoa_r+0x890>
 800abba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800abbe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800abc0:	9f06      	ldr	r7, [sp, #24]
 800abc2:	9a06      	ldr	r2, [sp, #24]
 800abc4:	2101      	movs	r1, #1
 800abc6:	441a      	add	r2, r3
 800abc8:	9206      	str	r2, [sp, #24]
 800abca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abcc:	4628      	mov	r0, r5
 800abce:	441a      	add	r2, r3
 800abd0:	9209      	str	r2, [sp, #36]	; 0x24
 800abd2:	f000 fc4d 	bl	800b470 <__i2b>
 800abd6:	4606      	mov	r6, r0
 800abd8:	2f00      	cmp	r7, #0
 800abda:	dd0c      	ble.n	800abf6 <_dtoa_r+0x77e>
 800abdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dd09      	ble.n	800abf6 <_dtoa_r+0x77e>
 800abe2:	42bb      	cmp	r3, r7
 800abe4:	bfa8      	it	ge
 800abe6:	463b      	movge	r3, r7
 800abe8:	9a06      	ldr	r2, [sp, #24]
 800abea:	1aff      	subs	r7, r7, r3
 800abec:	1ad2      	subs	r2, r2, r3
 800abee:	9206      	str	r2, [sp, #24]
 800abf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	9309      	str	r3, [sp, #36]	; 0x24
 800abf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abf8:	b1f3      	cbz	r3, 800ac38 <_dtoa_r+0x7c0>
 800abfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f000 80a9 	beq.w	800ad54 <_dtoa_r+0x8dc>
 800ac02:	2c00      	cmp	r4, #0
 800ac04:	dd10      	ble.n	800ac28 <_dtoa_r+0x7b0>
 800ac06:	4631      	mov	r1, r6
 800ac08:	4622      	mov	r2, r4
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	f000 fcea 	bl	800b5e4 <__pow5mult>
 800ac10:	4652      	mov	r2, sl
 800ac12:	4601      	mov	r1, r0
 800ac14:	4606      	mov	r6, r0
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 fc40 	bl	800b49c <__multiply>
 800ac1c:	4680      	mov	r8, r0
 800ac1e:	4651      	mov	r1, sl
 800ac20:	4628      	mov	r0, r5
 800ac22:	f000 fb6b 	bl	800b2fc <_Bfree>
 800ac26:	46c2      	mov	sl, r8
 800ac28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2a:	1b1a      	subs	r2, r3, r4
 800ac2c:	d004      	beq.n	800ac38 <_dtoa_r+0x7c0>
 800ac2e:	4651      	mov	r1, sl
 800ac30:	4628      	mov	r0, r5
 800ac32:	f000 fcd7 	bl	800b5e4 <__pow5mult>
 800ac36:	4682      	mov	sl, r0
 800ac38:	2101      	movs	r1, #1
 800ac3a:	4628      	mov	r0, r5
 800ac3c:	f000 fc18 	bl	800b470 <__i2b>
 800ac40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac42:	4604      	mov	r4, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	f340 8087 	ble.w	800ad58 <_dtoa_r+0x8e0>
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f000 fcc8 	bl	800b5e4 <__pow5mult>
 800ac54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac56:	4604      	mov	r4, r0
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	f340 8080 	ble.w	800ad5e <_dtoa_r+0x8e6>
 800ac5e:	f04f 0800 	mov.w	r8, #0
 800ac62:	6923      	ldr	r3, [r4, #16]
 800ac64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac68:	6918      	ldr	r0, [r3, #16]
 800ac6a:	f000 fbb3 	bl	800b3d4 <__hi0bits>
 800ac6e:	f1c0 0020 	rsb	r0, r0, #32
 800ac72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac74:	4418      	add	r0, r3
 800ac76:	f010 001f 	ands.w	r0, r0, #31
 800ac7a:	f000 8092 	beq.w	800ada2 <_dtoa_r+0x92a>
 800ac7e:	f1c0 0320 	rsb	r3, r0, #32
 800ac82:	2b04      	cmp	r3, #4
 800ac84:	f340 808a 	ble.w	800ad9c <_dtoa_r+0x924>
 800ac88:	f1c0 001c 	rsb	r0, r0, #28
 800ac8c:	9b06      	ldr	r3, [sp, #24]
 800ac8e:	4407      	add	r7, r0
 800ac90:	4403      	add	r3, r0
 800ac92:	9306      	str	r3, [sp, #24]
 800ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac96:	4403      	add	r3, r0
 800ac98:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9a:	9b06      	ldr	r3, [sp, #24]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd05      	ble.n	800acac <_dtoa_r+0x834>
 800aca0:	4651      	mov	r1, sl
 800aca2:	461a      	mov	r2, r3
 800aca4:	4628      	mov	r0, r5
 800aca6:	f000 fcf7 	bl	800b698 <__lshift>
 800acaa:	4682      	mov	sl, r0
 800acac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dd05      	ble.n	800acbe <_dtoa_r+0x846>
 800acb2:	4621      	mov	r1, r4
 800acb4:	461a      	mov	r2, r3
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 fcee 	bl	800b698 <__lshift>
 800acbc:	4604      	mov	r4, r0
 800acbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d070      	beq.n	800ada6 <_dtoa_r+0x92e>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4650      	mov	r0, sl
 800acc8:	f000 fd52 	bl	800b770 <__mcmp>
 800accc:	2800      	cmp	r0, #0
 800acce:	da6a      	bge.n	800ada6 <_dtoa_r+0x92e>
 800acd0:	2300      	movs	r3, #0
 800acd2:	4651      	mov	r1, sl
 800acd4:	220a      	movs	r2, #10
 800acd6:	4628      	mov	r0, r5
 800acd8:	f000 fb32 	bl	800b340 <__multadd>
 800acdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acde:	4682      	mov	sl, r0
 800ace0:	f109 39ff 	add.w	r9, r9, #4294967295
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8193 	beq.w	800b010 <_dtoa_r+0xb98>
 800acea:	4631      	mov	r1, r6
 800acec:	2300      	movs	r3, #0
 800acee:	220a      	movs	r2, #10
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 fb25 	bl	800b340 <__multadd>
 800acf6:	f1bb 0f00 	cmp.w	fp, #0
 800acfa:	4606      	mov	r6, r0
 800acfc:	f300 8093 	bgt.w	800ae26 <_dtoa_r+0x9ae>
 800ad00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	dc57      	bgt.n	800adb6 <_dtoa_r+0x93e>
 800ad06:	e08e      	b.n	800ae26 <_dtoa_r+0x9ae>
 800ad08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ad0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ad0e:	e756      	b.n	800abbe <_dtoa_r+0x746>
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	1e5c      	subs	r4, r3, #1
 800ad14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad16:	42a3      	cmp	r3, r4
 800ad18:	bfb7      	itett	lt
 800ad1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ad1c:	1b1c      	subge	r4, r3, r4
 800ad1e:	1ae2      	sublt	r2, r4, r3
 800ad20:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ad22:	bfbe      	ittt	lt
 800ad24:	940a      	strlt	r4, [sp, #40]	; 0x28
 800ad26:	189b      	addlt	r3, r3, r2
 800ad28:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	bfb8      	it	lt
 800ad2e:	2400      	movlt	r4, #0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bfbb      	ittet	lt
 800ad34:	9b06      	ldrlt	r3, [sp, #24]
 800ad36:	9a02      	ldrlt	r2, [sp, #8]
 800ad38:	9f06      	ldrge	r7, [sp, #24]
 800ad3a:	1a9f      	sublt	r7, r3, r2
 800ad3c:	bfac      	ite	ge
 800ad3e:	9b02      	ldrge	r3, [sp, #8]
 800ad40:	2300      	movlt	r3, #0
 800ad42:	e73e      	b.n	800abc2 <_dtoa_r+0x74a>
 800ad44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad46:	9f06      	ldr	r7, [sp, #24]
 800ad48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ad4a:	e745      	b.n	800abd8 <_dtoa_r+0x760>
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	40240000 	.word	0x40240000
 800ad54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad56:	e76a      	b.n	800ac2e <_dtoa_r+0x7b6>
 800ad58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	dc19      	bgt.n	800ad92 <_dtoa_r+0x91a>
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	b9bb      	cbnz	r3, 800ad92 <_dtoa_r+0x91a>
 800ad62:	9b05      	ldr	r3, [sp, #20]
 800ad64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad68:	b99b      	cbnz	r3, 800ad92 <_dtoa_r+0x91a>
 800ad6a:	9b05      	ldr	r3, [sp, #20]
 800ad6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad70:	0d1b      	lsrs	r3, r3, #20
 800ad72:	051b      	lsls	r3, r3, #20
 800ad74:	b183      	cbz	r3, 800ad98 <_dtoa_r+0x920>
 800ad76:	f04f 0801 	mov.w	r8, #1
 800ad7a:	9b06      	ldr	r3, [sp, #24]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	9306      	str	r3, [sp, #24]
 800ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad82:	3301      	adds	r3, #1
 800ad84:	9309      	str	r3, [sp, #36]	; 0x24
 800ad86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f47f af6a 	bne.w	800ac62 <_dtoa_r+0x7ea>
 800ad8e:	2001      	movs	r0, #1
 800ad90:	e76f      	b.n	800ac72 <_dtoa_r+0x7fa>
 800ad92:	f04f 0800 	mov.w	r8, #0
 800ad96:	e7f6      	b.n	800ad86 <_dtoa_r+0x90e>
 800ad98:	4698      	mov	r8, r3
 800ad9a:	e7f4      	b.n	800ad86 <_dtoa_r+0x90e>
 800ad9c:	f43f af7d 	beq.w	800ac9a <_dtoa_r+0x822>
 800ada0:	4618      	mov	r0, r3
 800ada2:	301c      	adds	r0, #28
 800ada4:	e772      	b.n	800ac8c <_dtoa_r+0x814>
 800ada6:	9b02      	ldr	r3, [sp, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	dc36      	bgt.n	800ae1a <_dtoa_r+0x9a2>
 800adac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adae:	2b02      	cmp	r3, #2
 800adb0:	dd33      	ble.n	800ae1a <_dtoa_r+0x9a2>
 800adb2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800adb6:	f1bb 0f00 	cmp.w	fp, #0
 800adba:	d10d      	bne.n	800add8 <_dtoa_r+0x960>
 800adbc:	4621      	mov	r1, r4
 800adbe:	465b      	mov	r3, fp
 800adc0:	2205      	movs	r2, #5
 800adc2:	4628      	mov	r0, r5
 800adc4:	f000 fabc 	bl	800b340 <__multadd>
 800adc8:	4601      	mov	r1, r0
 800adca:	4604      	mov	r4, r0
 800adcc:	4650      	mov	r0, sl
 800adce:	f000 fccf 	bl	800b770 <__mcmp>
 800add2:	2800      	cmp	r0, #0
 800add4:	f73f adb6 	bgt.w	800a944 <_dtoa_r+0x4cc>
 800add8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800adda:	9f08      	ldr	r7, [sp, #32]
 800addc:	ea6f 0903 	mvn.w	r9, r3
 800ade0:	f04f 0800 	mov.w	r8, #0
 800ade4:	4621      	mov	r1, r4
 800ade6:	4628      	mov	r0, r5
 800ade8:	f000 fa88 	bl	800b2fc <_Bfree>
 800adec:	2e00      	cmp	r6, #0
 800adee:	f43f aea4 	beq.w	800ab3a <_dtoa_r+0x6c2>
 800adf2:	f1b8 0f00 	cmp.w	r8, #0
 800adf6:	d005      	beq.n	800ae04 <_dtoa_r+0x98c>
 800adf8:	45b0      	cmp	r8, r6
 800adfa:	d003      	beq.n	800ae04 <_dtoa_r+0x98c>
 800adfc:	4641      	mov	r1, r8
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 fa7c 	bl	800b2fc <_Bfree>
 800ae04:	4631      	mov	r1, r6
 800ae06:	4628      	mov	r0, r5
 800ae08:	f000 fa78 	bl	800b2fc <_Bfree>
 800ae0c:	e695      	b.n	800ab3a <_dtoa_r+0x6c2>
 800ae0e:	2400      	movs	r4, #0
 800ae10:	4626      	mov	r6, r4
 800ae12:	e7e1      	b.n	800add8 <_dtoa_r+0x960>
 800ae14:	46c1      	mov	r9, r8
 800ae16:	4626      	mov	r6, r4
 800ae18:	e594      	b.n	800a944 <_dtoa_r+0x4cc>
 800ae1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 80fc 	beq.w	800b01e <_dtoa_r+0xba6>
 800ae26:	2f00      	cmp	r7, #0
 800ae28:	dd05      	ble.n	800ae36 <_dtoa_r+0x9be>
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4628      	mov	r0, r5
 800ae30:	f000 fc32 	bl	800b698 <__lshift>
 800ae34:	4606      	mov	r6, r0
 800ae36:	f1b8 0f00 	cmp.w	r8, #0
 800ae3a:	d05c      	beq.n	800aef6 <_dtoa_r+0xa7e>
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	6871      	ldr	r1, [r6, #4]
 800ae40:	f000 fa1c 	bl	800b27c <_Balloc>
 800ae44:	4607      	mov	r7, r0
 800ae46:	b928      	cbnz	r0, 800ae54 <_dtoa_r+0x9dc>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ae4e:	4b7e      	ldr	r3, [pc, #504]	; (800b048 <_dtoa_r+0xbd0>)
 800ae50:	f7ff bb26 	b.w	800a4a0 <_dtoa_r+0x28>
 800ae54:	6932      	ldr	r2, [r6, #16]
 800ae56:	f106 010c 	add.w	r1, r6, #12
 800ae5a:	3202      	adds	r2, #2
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	300c      	adds	r0, #12
 800ae60:	f7fe fde6 	bl	8009a30 <memcpy>
 800ae64:	2201      	movs	r2, #1
 800ae66:	4639      	mov	r1, r7
 800ae68:	4628      	mov	r0, r5
 800ae6a:	f000 fc15 	bl	800b698 <__lshift>
 800ae6e:	46b0      	mov	r8, r6
 800ae70:	4606      	mov	r6, r0
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	3301      	adds	r3, #1
 800ae76:	9302      	str	r3, [sp, #8]
 800ae78:	9b08      	ldr	r3, [sp, #32]
 800ae7a:	445b      	add	r3, fp
 800ae7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae7e:	9b04      	ldr	r3, [sp, #16]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	9309      	str	r3, [sp, #36]	; 0x24
 800ae86:	9b02      	ldr	r3, [sp, #8]
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4650      	mov	r0, sl
 800ae8c:	f103 3bff 	add.w	fp, r3, #4294967295
 800ae90:	f7ff fa64 	bl	800a35c <quorem>
 800ae94:	4603      	mov	r3, r0
 800ae96:	4641      	mov	r1, r8
 800ae98:	3330      	adds	r3, #48	; 0x30
 800ae9a:	9004      	str	r0, [sp, #16]
 800ae9c:	4650      	mov	r0, sl
 800ae9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aea0:	f000 fc66 	bl	800b770 <__mcmp>
 800aea4:	4632      	mov	r2, r6
 800aea6:	9006      	str	r0, [sp, #24]
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f000 fc7c 	bl	800b7a8 <__mdiff>
 800aeb0:	68c2      	ldr	r2, [r0, #12]
 800aeb2:	4607      	mov	r7, r0
 800aeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb6:	bb02      	cbnz	r2, 800aefa <_dtoa_r+0xa82>
 800aeb8:	4601      	mov	r1, r0
 800aeba:	4650      	mov	r0, sl
 800aebc:	f000 fc58 	bl	800b770 <__mcmp>
 800aec0:	4602      	mov	r2, r0
 800aec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aec4:	4639      	mov	r1, r7
 800aec6:	4628      	mov	r0, r5
 800aec8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800aecc:	f000 fa16 	bl	800b2fc <_Bfree>
 800aed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aed2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aed4:	9f02      	ldr	r7, [sp, #8]
 800aed6:	ea43 0102 	orr.w	r1, r3, r2
 800aeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aedc:	430b      	orrs	r3, r1
 800aede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aee0:	d10d      	bne.n	800aefe <_dtoa_r+0xa86>
 800aee2:	2b39      	cmp	r3, #57	; 0x39
 800aee4:	d027      	beq.n	800af36 <_dtoa_r+0xabe>
 800aee6:	9a06      	ldr	r2, [sp, #24]
 800aee8:	2a00      	cmp	r2, #0
 800aeea:	dd01      	ble.n	800aef0 <_dtoa_r+0xa78>
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	3331      	adds	r3, #49	; 0x31
 800aef0:	f88b 3000 	strb.w	r3, [fp]
 800aef4:	e776      	b.n	800ade4 <_dtoa_r+0x96c>
 800aef6:	4630      	mov	r0, r6
 800aef8:	e7b9      	b.n	800ae6e <_dtoa_r+0x9f6>
 800aefa:	2201      	movs	r2, #1
 800aefc:	e7e2      	b.n	800aec4 <_dtoa_r+0xa4c>
 800aefe:	9906      	ldr	r1, [sp, #24]
 800af00:	2900      	cmp	r1, #0
 800af02:	db04      	blt.n	800af0e <_dtoa_r+0xa96>
 800af04:	9822      	ldr	r0, [sp, #136]	; 0x88
 800af06:	4301      	orrs	r1, r0
 800af08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af0a:	4301      	orrs	r1, r0
 800af0c:	d120      	bne.n	800af50 <_dtoa_r+0xad8>
 800af0e:	2a00      	cmp	r2, #0
 800af10:	ddee      	ble.n	800aef0 <_dtoa_r+0xa78>
 800af12:	4651      	mov	r1, sl
 800af14:	2201      	movs	r2, #1
 800af16:	4628      	mov	r0, r5
 800af18:	9302      	str	r3, [sp, #8]
 800af1a:	f000 fbbd 	bl	800b698 <__lshift>
 800af1e:	4621      	mov	r1, r4
 800af20:	4682      	mov	sl, r0
 800af22:	f000 fc25 	bl	800b770 <__mcmp>
 800af26:	2800      	cmp	r0, #0
 800af28:	9b02      	ldr	r3, [sp, #8]
 800af2a:	dc02      	bgt.n	800af32 <_dtoa_r+0xaba>
 800af2c:	d1e0      	bne.n	800aef0 <_dtoa_r+0xa78>
 800af2e:	07da      	lsls	r2, r3, #31
 800af30:	d5de      	bpl.n	800aef0 <_dtoa_r+0xa78>
 800af32:	2b39      	cmp	r3, #57	; 0x39
 800af34:	d1da      	bne.n	800aeec <_dtoa_r+0xa74>
 800af36:	2339      	movs	r3, #57	; 0x39
 800af38:	f88b 3000 	strb.w	r3, [fp]
 800af3c:	463b      	mov	r3, r7
 800af3e:	461f      	mov	r7, r3
 800af40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800af44:	3b01      	subs	r3, #1
 800af46:	2a39      	cmp	r2, #57	; 0x39
 800af48:	d050      	beq.n	800afec <_dtoa_r+0xb74>
 800af4a:	3201      	adds	r2, #1
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	e749      	b.n	800ade4 <_dtoa_r+0x96c>
 800af50:	2a00      	cmp	r2, #0
 800af52:	dd03      	ble.n	800af5c <_dtoa_r+0xae4>
 800af54:	2b39      	cmp	r3, #57	; 0x39
 800af56:	d0ee      	beq.n	800af36 <_dtoa_r+0xabe>
 800af58:	3301      	adds	r3, #1
 800af5a:	e7c9      	b.n	800aef0 <_dtoa_r+0xa78>
 800af5c:	9a02      	ldr	r2, [sp, #8]
 800af5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800af60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af64:	428a      	cmp	r2, r1
 800af66:	d02a      	beq.n	800afbe <_dtoa_r+0xb46>
 800af68:	4651      	mov	r1, sl
 800af6a:	2300      	movs	r3, #0
 800af6c:	220a      	movs	r2, #10
 800af6e:	4628      	mov	r0, r5
 800af70:	f000 f9e6 	bl	800b340 <__multadd>
 800af74:	45b0      	cmp	r8, r6
 800af76:	4682      	mov	sl, r0
 800af78:	f04f 0300 	mov.w	r3, #0
 800af7c:	f04f 020a 	mov.w	r2, #10
 800af80:	4641      	mov	r1, r8
 800af82:	4628      	mov	r0, r5
 800af84:	d107      	bne.n	800af96 <_dtoa_r+0xb1e>
 800af86:	f000 f9db 	bl	800b340 <__multadd>
 800af8a:	4680      	mov	r8, r0
 800af8c:	4606      	mov	r6, r0
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	3301      	adds	r3, #1
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	e777      	b.n	800ae86 <_dtoa_r+0xa0e>
 800af96:	f000 f9d3 	bl	800b340 <__multadd>
 800af9a:	4631      	mov	r1, r6
 800af9c:	4680      	mov	r8, r0
 800af9e:	2300      	movs	r3, #0
 800afa0:	220a      	movs	r2, #10
 800afa2:	4628      	mov	r0, r5
 800afa4:	f000 f9cc 	bl	800b340 <__multadd>
 800afa8:	4606      	mov	r6, r0
 800afaa:	e7f0      	b.n	800af8e <_dtoa_r+0xb16>
 800afac:	f1bb 0f00 	cmp.w	fp, #0
 800afb0:	bfcc      	ite	gt
 800afb2:	465f      	movgt	r7, fp
 800afb4:	2701      	movle	r7, #1
 800afb6:	f04f 0800 	mov.w	r8, #0
 800afba:	9a08      	ldr	r2, [sp, #32]
 800afbc:	4417      	add	r7, r2
 800afbe:	4651      	mov	r1, sl
 800afc0:	2201      	movs	r2, #1
 800afc2:	4628      	mov	r0, r5
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	f000 fb67 	bl	800b698 <__lshift>
 800afca:	4621      	mov	r1, r4
 800afcc:	4682      	mov	sl, r0
 800afce:	f000 fbcf 	bl	800b770 <__mcmp>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	dcb2      	bgt.n	800af3c <_dtoa_r+0xac4>
 800afd6:	d102      	bne.n	800afde <_dtoa_r+0xb66>
 800afd8:	9b02      	ldr	r3, [sp, #8]
 800afda:	07db      	lsls	r3, r3, #31
 800afdc:	d4ae      	bmi.n	800af3c <_dtoa_r+0xac4>
 800afde:	463b      	mov	r3, r7
 800afe0:	461f      	mov	r7, r3
 800afe2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afe6:	2a30      	cmp	r2, #48	; 0x30
 800afe8:	d0fa      	beq.n	800afe0 <_dtoa_r+0xb68>
 800afea:	e6fb      	b.n	800ade4 <_dtoa_r+0x96c>
 800afec:	9a08      	ldr	r2, [sp, #32]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d1a5      	bne.n	800af3e <_dtoa_r+0xac6>
 800aff2:	2331      	movs	r3, #49	; 0x31
 800aff4:	f109 0901 	add.w	r9, r9, #1
 800aff8:	7013      	strb	r3, [r2, #0]
 800affa:	e6f3      	b.n	800ade4 <_dtoa_r+0x96c>
 800affc:	4b13      	ldr	r3, [pc, #76]	; (800b04c <_dtoa_r+0xbd4>)
 800affe:	f7ff baa7 	b.w	800a550 <_dtoa_r+0xd8>
 800b002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b004:	2b00      	cmp	r3, #0
 800b006:	f47f aa80 	bne.w	800a50a <_dtoa_r+0x92>
 800b00a:	4b11      	ldr	r3, [pc, #68]	; (800b050 <_dtoa_r+0xbd8>)
 800b00c:	f7ff baa0 	b.w	800a550 <_dtoa_r+0xd8>
 800b010:	f1bb 0f00 	cmp.w	fp, #0
 800b014:	dc03      	bgt.n	800b01e <_dtoa_r+0xba6>
 800b016:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b018:	2b02      	cmp	r3, #2
 800b01a:	f73f aecc 	bgt.w	800adb6 <_dtoa_r+0x93e>
 800b01e:	9f08      	ldr	r7, [sp, #32]
 800b020:	4621      	mov	r1, r4
 800b022:	4650      	mov	r0, sl
 800b024:	f7ff f99a 	bl	800a35c <quorem>
 800b028:	9a08      	ldr	r2, [sp, #32]
 800b02a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b02e:	f807 3b01 	strb.w	r3, [r7], #1
 800b032:	1aba      	subs	r2, r7, r2
 800b034:	4593      	cmp	fp, r2
 800b036:	ddb9      	ble.n	800afac <_dtoa_r+0xb34>
 800b038:	4651      	mov	r1, sl
 800b03a:	2300      	movs	r3, #0
 800b03c:	220a      	movs	r2, #10
 800b03e:	4628      	mov	r0, r5
 800b040:	f000 f97e 	bl	800b340 <__multadd>
 800b044:	4682      	mov	sl, r0
 800b046:	e7eb      	b.n	800b020 <_dtoa_r+0xba8>
 800b048:	0800de3f 	.word	0x0800de3f
 800b04c:	0800dd98 	.word	0x0800dd98
 800b050:	0800ddbc 	.word	0x0800ddbc

0800b054 <std>:
 800b054:	2300      	movs	r3, #0
 800b056:	b510      	push	{r4, lr}
 800b058:	4604      	mov	r4, r0
 800b05a:	e9c0 3300 	strd	r3, r3, [r0]
 800b05e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b062:	6083      	str	r3, [r0, #8]
 800b064:	8181      	strh	r1, [r0, #12]
 800b066:	6643      	str	r3, [r0, #100]	; 0x64
 800b068:	81c2      	strh	r2, [r0, #14]
 800b06a:	6183      	str	r3, [r0, #24]
 800b06c:	4619      	mov	r1, r3
 800b06e:	2208      	movs	r2, #8
 800b070:	305c      	adds	r0, #92	; 0x5c
 800b072:	f7fe fceb 	bl	8009a4c <memset>
 800b076:	4b05      	ldr	r3, [pc, #20]	; (800b08c <std+0x38>)
 800b078:	6224      	str	r4, [r4, #32]
 800b07a:	6263      	str	r3, [r4, #36]	; 0x24
 800b07c:	4b04      	ldr	r3, [pc, #16]	; (800b090 <std+0x3c>)
 800b07e:	62a3      	str	r3, [r4, #40]	; 0x28
 800b080:	4b04      	ldr	r3, [pc, #16]	; (800b094 <std+0x40>)
 800b082:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b084:	4b04      	ldr	r3, [pc, #16]	; (800b098 <std+0x44>)
 800b086:	6323      	str	r3, [r4, #48]	; 0x30
 800b088:	bd10      	pop	{r4, pc}
 800b08a:	bf00      	nop
 800b08c:	0800bdc1 	.word	0x0800bdc1
 800b090:	0800bde3 	.word	0x0800bde3
 800b094:	0800be1b 	.word	0x0800be1b
 800b098:	0800be3f 	.word	0x0800be3f

0800b09c <_cleanup_r>:
 800b09c:	4901      	ldr	r1, [pc, #4]	; (800b0a4 <_cleanup_r+0x8>)
 800b09e:	f000 b8af 	b.w	800b200 <_fwalk_reent>
 800b0a2:	bf00      	nop
 800b0a4:	0800c155 	.word	0x0800c155

0800b0a8 <__sfmoreglue>:
 800b0a8:	b570      	push	{r4, r5, r6, lr}
 800b0aa:	2568      	movs	r5, #104	; 0x68
 800b0ac:	1e4a      	subs	r2, r1, #1
 800b0ae:	4355      	muls	r5, r2
 800b0b0:	460e      	mov	r6, r1
 800b0b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b0b6:	f000 fcbd 	bl	800ba34 <_malloc_r>
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	b140      	cbz	r0, 800b0d0 <__sfmoreglue+0x28>
 800b0be:	2100      	movs	r1, #0
 800b0c0:	e9c0 1600 	strd	r1, r6, [r0]
 800b0c4:	300c      	adds	r0, #12
 800b0c6:	60a0      	str	r0, [r4, #8]
 800b0c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b0cc:	f7fe fcbe 	bl	8009a4c <memset>
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}

0800b0d4 <__sfp_lock_acquire>:
 800b0d4:	4801      	ldr	r0, [pc, #4]	; (800b0dc <__sfp_lock_acquire+0x8>)
 800b0d6:	f000 b8b8 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800b0da:	bf00      	nop
 800b0dc:	200032f0 	.word	0x200032f0

0800b0e0 <__sfp_lock_release>:
 800b0e0:	4801      	ldr	r0, [pc, #4]	; (800b0e8 <__sfp_lock_release+0x8>)
 800b0e2:	f000 b8b3 	b.w	800b24c <__retarget_lock_release_recursive>
 800b0e6:	bf00      	nop
 800b0e8:	200032f0 	.word	0x200032f0

0800b0ec <__sinit_lock_acquire>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <__sinit_lock_acquire+0x8>)
 800b0ee:	f000 b8ac 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	200032ef 	.word	0x200032ef

0800b0f8 <__sinit_lock_release>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__sinit_lock_release+0x8>)
 800b0fa:	f000 b8a7 	b.w	800b24c <__retarget_lock_release_recursive>
 800b0fe:	bf00      	nop
 800b100:	200032ef 	.word	0x200032ef

0800b104 <__sinit>:
 800b104:	b510      	push	{r4, lr}
 800b106:	4604      	mov	r4, r0
 800b108:	f7ff fff0 	bl	800b0ec <__sinit_lock_acquire>
 800b10c:	69a3      	ldr	r3, [r4, #24]
 800b10e:	b11b      	cbz	r3, 800b118 <__sinit+0x14>
 800b110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b114:	f7ff bff0 	b.w	800b0f8 <__sinit_lock_release>
 800b118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b11c:	6523      	str	r3, [r4, #80]	; 0x50
 800b11e:	4b13      	ldr	r3, [pc, #76]	; (800b16c <__sinit+0x68>)
 800b120:	4a13      	ldr	r2, [pc, #76]	; (800b170 <__sinit+0x6c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	62a2      	str	r2, [r4, #40]	; 0x28
 800b126:	42a3      	cmp	r3, r4
 800b128:	bf08      	it	eq
 800b12a:	2301      	moveq	r3, #1
 800b12c:	4620      	mov	r0, r4
 800b12e:	bf08      	it	eq
 800b130:	61a3      	streq	r3, [r4, #24]
 800b132:	f000 f81f 	bl	800b174 <__sfp>
 800b136:	6060      	str	r0, [r4, #4]
 800b138:	4620      	mov	r0, r4
 800b13a:	f000 f81b 	bl	800b174 <__sfp>
 800b13e:	60a0      	str	r0, [r4, #8]
 800b140:	4620      	mov	r0, r4
 800b142:	f000 f817 	bl	800b174 <__sfp>
 800b146:	2200      	movs	r2, #0
 800b148:	2104      	movs	r1, #4
 800b14a:	60e0      	str	r0, [r4, #12]
 800b14c:	6860      	ldr	r0, [r4, #4]
 800b14e:	f7ff ff81 	bl	800b054 <std>
 800b152:	2201      	movs	r2, #1
 800b154:	2109      	movs	r1, #9
 800b156:	68a0      	ldr	r0, [r4, #8]
 800b158:	f7ff ff7c 	bl	800b054 <std>
 800b15c:	2202      	movs	r2, #2
 800b15e:	2112      	movs	r1, #18
 800b160:	68e0      	ldr	r0, [r4, #12]
 800b162:	f7ff ff77 	bl	800b054 <std>
 800b166:	2301      	movs	r3, #1
 800b168:	61a3      	str	r3, [r4, #24]
 800b16a:	e7d1      	b.n	800b110 <__sinit+0xc>
 800b16c:	0800dd84 	.word	0x0800dd84
 800b170:	0800b09d 	.word	0x0800b09d

0800b174 <__sfp>:
 800b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b176:	4607      	mov	r7, r0
 800b178:	f7ff ffac 	bl	800b0d4 <__sfp_lock_acquire>
 800b17c:	4b1e      	ldr	r3, [pc, #120]	; (800b1f8 <__sfp+0x84>)
 800b17e:	681e      	ldr	r6, [r3, #0]
 800b180:	69b3      	ldr	r3, [r6, #24]
 800b182:	b913      	cbnz	r3, 800b18a <__sfp+0x16>
 800b184:	4630      	mov	r0, r6
 800b186:	f7ff ffbd 	bl	800b104 <__sinit>
 800b18a:	3648      	adds	r6, #72	; 0x48
 800b18c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b190:	3b01      	subs	r3, #1
 800b192:	d503      	bpl.n	800b19c <__sfp+0x28>
 800b194:	6833      	ldr	r3, [r6, #0]
 800b196:	b30b      	cbz	r3, 800b1dc <__sfp+0x68>
 800b198:	6836      	ldr	r6, [r6, #0]
 800b19a:	e7f7      	b.n	800b18c <__sfp+0x18>
 800b19c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b1a0:	b9d5      	cbnz	r5, 800b1d8 <__sfp+0x64>
 800b1a2:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <__sfp+0x88>)
 800b1a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b1a8:	60e3      	str	r3, [r4, #12]
 800b1aa:	6665      	str	r5, [r4, #100]	; 0x64
 800b1ac:	f000 f84c 	bl	800b248 <__retarget_lock_init_recursive>
 800b1b0:	f7ff ff96 	bl	800b0e0 <__sfp_lock_release>
 800b1b4:	2208      	movs	r2, #8
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b1bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b1c0:	6025      	str	r5, [r4, #0]
 800b1c2:	61a5      	str	r5, [r4, #24]
 800b1c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b1c8:	f7fe fc40 	bl	8009a4c <memset>
 800b1cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b1d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d8:	3468      	adds	r4, #104	; 0x68
 800b1da:	e7d9      	b.n	800b190 <__sfp+0x1c>
 800b1dc:	2104      	movs	r1, #4
 800b1de:	4638      	mov	r0, r7
 800b1e0:	f7ff ff62 	bl	800b0a8 <__sfmoreglue>
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	6030      	str	r0, [r6, #0]
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d1d5      	bne.n	800b198 <__sfp+0x24>
 800b1ec:	f7ff ff78 	bl	800b0e0 <__sfp_lock_release>
 800b1f0:	230c      	movs	r3, #12
 800b1f2:	603b      	str	r3, [r7, #0]
 800b1f4:	e7ee      	b.n	800b1d4 <__sfp+0x60>
 800b1f6:	bf00      	nop
 800b1f8:	0800dd84 	.word	0x0800dd84
 800b1fc:	ffff0001 	.word	0xffff0001

0800b200 <_fwalk_reent>:
 800b200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b204:	4606      	mov	r6, r0
 800b206:	4688      	mov	r8, r1
 800b208:	2700      	movs	r7, #0
 800b20a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b20e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b212:	f1b9 0901 	subs.w	r9, r9, #1
 800b216:	d505      	bpl.n	800b224 <_fwalk_reent+0x24>
 800b218:	6824      	ldr	r4, [r4, #0]
 800b21a:	2c00      	cmp	r4, #0
 800b21c:	d1f7      	bne.n	800b20e <_fwalk_reent+0xe>
 800b21e:	4638      	mov	r0, r7
 800b220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b224:	89ab      	ldrh	r3, [r5, #12]
 800b226:	2b01      	cmp	r3, #1
 800b228:	d907      	bls.n	800b23a <_fwalk_reent+0x3a>
 800b22a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b22e:	3301      	adds	r3, #1
 800b230:	d003      	beq.n	800b23a <_fwalk_reent+0x3a>
 800b232:	4629      	mov	r1, r5
 800b234:	4630      	mov	r0, r6
 800b236:	47c0      	blx	r8
 800b238:	4307      	orrs	r7, r0
 800b23a:	3568      	adds	r5, #104	; 0x68
 800b23c:	e7e9      	b.n	800b212 <_fwalk_reent+0x12>
	...

0800b240 <_localeconv_r>:
 800b240:	4800      	ldr	r0, [pc, #0]	; (800b244 <_localeconv_r+0x4>)
 800b242:	4770      	bx	lr
 800b244:	200002d4 	.word	0x200002d4

0800b248 <__retarget_lock_init_recursive>:
 800b248:	4770      	bx	lr

0800b24a <__retarget_lock_acquire_recursive>:
 800b24a:	4770      	bx	lr

0800b24c <__retarget_lock_release_recursive>:
 800b24c:	4770      	bx	lr
	...

0800b250 <malloc>:
 800b250:	4b02      	ldr	r3, [pc, #8]	; (800b25c <malloc+0xc>)
 800b252:	4601      	mov	r1, r0
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	f000 bbed 	b.w	800ba34 <_malloc_r>
 800b25a:	bf00      	nop
 800b25c:	20000180 	.word	0x20000180

0800b260 <memchr>:
 800b260:	4603      	mov	r3, r0
 800b262:	b510      	push	{r4, lr}
 800b264:	b2c9      	uxtb	r1, r1
 800b266:	4402      	add	r2, r0
 800b268:	4293      	cmp	r3, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	d101      	bne.n	800b272 <memchr+0x12>
 800b26e:	2000      	movs	r0, #0
 800b270:	e003      	b.n	800b27a <memchr+0x1a>
 800b272:	7804      	ldrb	r4, [r0, #0]
 800b274:	3301      	adds	r3, #1
 800b276:	428c      	cmp	r4, r1
 800b278:	d1f6      	bne.n	800b268 <memchr+0x8>
 800b27a:	bd10      	pop	{r4, pc}

0800b27c <_Balloc>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	b976      	cbnz	r6, 800b2a4 <_Balloc+0x28>
 800b286:	2010      	movs	r0, #16
 800b288:	f7ff ffe2 	bl	800b250 <malloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6260      	str	r0, [r4, #36]	; 0x24
 800b290:	b920      	cbnz	r0, 800b29c <_Balloc+0x20>
 800b292:	2166      	movs	r1, #102	; 0x66
 800b294:	4b17      	ldr	r3, [pc, #92]	; (800b2f4 <_Balloc+0x78>)
 800b296:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <_Balloc+0x7c>)
 800b298:	f000 fea8 	bl	800bfec <__assert_func>
 800b29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a0:	6006      	str	r6, [r0, #0]
 800b2a2:	60c6      	str	r6, [r0, #12]
 800b2a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2a6:	68f3      	ldr	r3, [r6, #12]
 800b2a8:	b183      	cbz	r3, 800b2cc <_Balloc+0x50>
 800b2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <_Balloc+0x68>
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ba:	1d72      	adds	r2, r6, #5
 800b2bc:	4620      	mov	r0, r4
 800b2be:	0092      	lsls	r2, r2, #2
 800b2c0:	f000 fb5e 	bl	800b980 <_calloc_r>
 800b2c4:	b160      	cbz	r0, 800b2e0 <_Balloc+0x64>
 800b2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ca:	e00e      	b.n	800b2ea <_Balloc+0x6e>
 800b2cc:	2221      	movs	r2, #33	; 0x21
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb55 	bl	800b980 <_calloc_r>
 800b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d8:	60f0      	str	r0, [r6, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <_Balloc+0x2e>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	6802      	ldr	r2, [r0, #0]
 800b2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f0:	e7f7      	b.n	800b2e2 <_Balloc+0x66>
 800b2f2:	bf00      	nop
 800b2f4:	0800ddc9 	.word	0x0800ddc9
 800b2f8:	0800deb0 	.word	0x0800deb0

0800b2fc <_Bfree>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Bfree+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ffa2 	bl	800b250 <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6268      	str	r0, [r5, #36]	; 0x24
 800b310:	b920      	cbnz	r0, 800b31c <_Bfree+0x20>
 800b312:	218a      	movs	r1, #138	; 0x8a
 800b314:	4b08      	ldr	r3, [pc, #32]	; (800b338 <_Bfree+0x3c>)
 800b316:	4809      	ldr	r0, [pc, #36]	; (800b33c <_Bfree+0x40>)
 800b318:	f000 fe68 	bl	800bfec <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	b13c      	cbz	r4, 800b336 <_Bfree+0x3a>
 800b326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b330:	6021      	str	r1, [r4, #0]
 800b332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	0800ddc9 	.word	0x0800ddc9
 800b33c:	0800deb0 	.word	0x0800deb0

0800b340 <__multadd>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	4698      	mov	r8, r3
 800b346:	460c      	mov	r4, r1
 800b348:	2300      	movs	r3, #0
 800b34a:	690e      	ldr	r6, [r1, #16]
 800b34c:	4607      	mov	r7, r0
 800b34e:	f101 0014 	add.w	r0, r1, #20
 800b352:	6805      	ldr	r5, [r0, #0]
 800b354:	3301      	adds	r3, #1
 800b356:	b2a9      	uxth	r1, r5
 800b358:	fb02 8101 	mla	r1, r2, r1, r8
 800b35c:	0c2d      	lsrs	r5, r5, #16
 800b35e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b362:	fb02 c505 	mla	r5, r2, r5, ip
 800b366:	b289      	uxth	r1, r1
 800b368:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b36c:	429e      	cmp	r6, r3
 800b36e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b372:	f840 1b04 	str.w	r1, [r0], #4
 800b376:	dcec      	bgt.n	800b352 <__multadd+0x12>
 800b378:	f1b8 0f00 	cmp.w	r8, #0
 800b37c:	d022      	beq.n	800b3c4 <__multadd+0x84>
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	42b3      	cmp	r3, r6
 800b382:	dc19      	bgt.n	800b3b8 <__multadd+0x78>
 800b384:	6861      	ldr	r1, [r4, #4]
 800b386:	4638      	mov	r0, r7
 800b388:	3101      	adds	r1, #1
 800b38a:	f7ff ff77 	bl	800b27c <_Balloc>
 800b38e:	4605      	mov	r5, r0
 800b390:	b928      	cbnz	r0, 800b39e <__multadd+0x5e>
 800b392:	4602      	mov	r2, r0
 800b394:	21b5      	movs	r1, #181	; 0xb5
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <__multadd+0x8c>)
 800b398:	480d      	ldr	r0, [pc, #52]	; (800b3d0 <__multadd+0x90>)
 800b39a:	f000 fe27 	bl	800bfec <__assert_func>
 800b39e:	6922      	ldr	r2, [r4, #16]
 800b3a0:	f104 010c 	add.w	r1, r4, #12
 800b3a4:	3202      	adds	r2, #2
 800b3a6:	0092      	lsls	r2, r2, #2
 800b3a8:	300c      	adds	r0, #12
 800b3aa:	f7fe fb41 	bl	8009a30 <memcpy>
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f7ff ffa3 	bl	800b2fc <_Bfree>
 800b3b6:	462c      	mov	r4, r5
 800b3b8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b3bc:	3601      	adds	r6, #1
 800b3be:	f8c3 8014 	str.w	r8, [r3, #20]
 800b3c2:	6126      	str	r6, [r4, #16]
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ca:	bf00      	nop
 800b3cc:	0800de3f 	.word	0x0800de3f
 800b3d0:	0800deb0 	.word	0x0800deb0

0800b3d4 <__hi0bits>:
 800b3d4:	0c02      	lsrs	r2, r0, #16
 800b3d6:	0412      	lsls	r2, r2, #16
 800b3d8:	4603      	mov	r3, r0
 800b3da:	b9ca      	cbnz	r2, 800b410 <__hi0bits+0x3c>
 800b3dc:	0403      	lsls	r3, r0, #16
 800b3de:	2010      	movs	r0, #16
 800b3e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b3e4:	bf04      	itt	eq
 800b3e6:	021b      	lsleq	r3, r3, #8
 800b3e8:	3008      	addeq	r0, #8
 800b3ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	011b      	lsleq	r3, r3, #4
 800b3f2:	3004      	addeq	r0, #4
 800b3f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b3f8:	bf04      	itt	eq
 800b3fa:	009b      	lsleq	r3, r3, #2
 800b3fc:	3002      	addeq	r0, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	db05      	blt.n	800b40e <__hi0bits+0x3a>
 800b402:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b406:	f100 0001 	add.w	r0, r0, #1
 800b40a:	bf08      	it	eq
 800b40c:	2020      	moveq	r0, #32
 800b40e:	4770      	bx	lr
 800b410:	2000      	movs	r0, #0
 800b412:	e7e5      	b.n	800b3e0 <__hi0bits+0xc>

0800b414 <__lo0bits>:
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	4602      	mov	r2, r0
 800b418:	f013 0007 	ands.w	r0, r3, #7
 800b41c:	d00b      	beq.n	800b436 <__lo0bits+0x22>
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d422      	bmi.n	800b468 <__lo0bits+0x54>
 800b422:	0798      	lsls	r0, r3, #30
 800b424:	bf49      	itett	mi
 800b426:	085b      	lsrmi	r3, r3, #1
 800b428:	089b      	lsrpl	r3, r3, #2
 800b42a:	2001      	movmi	r0, #1
 800b42c:	6013      	strmi	r3, [r2, #0]
 800b42e:	bf5c      	itt	pl
 800b430:	2002      	movpl	r0, #2
 800b432:	6013      	strpl	r3, [r2, #0]
 800b434:	4770      	bx	lr
 800b436:	b299      	uxth	r1, r3
 800b438:	b909      	cbnz	r1, 800b43e <__lo0bits+0x2a>
 800b43a:	2010      	movs	r0, #16
 800b43c:	0c1b      	lsrs	r3, r3, #16
 800b43e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b442:	bf04      	itt	eq
 800b444:	0a1b      	lsreq	r3, r3, #8
 800b446:	3008      	addeq	r0, #8
 800b448:	0719      	lsls	r1, r3, #28
 800b44a:	bf04      	itt	eq
 800b44c:	091b      	lsreq	r3, r3, #4
 800b44e:	3004      	addeq	r0, #4
 800b450:	0799      	lsls	r1, r3, #30
 800b452:	bf04      	itt	eq
 800b454:	089b      	lsreq	r3, r3, #2
 800b456:	3002      	addeq	r0, #2
 800b458:	07d9      	lsls	r1, r3, #31
 800b45a:	d403      	bmi.n	800b464 <__lo0bits+0x50>
 800b45c:	085b      	lsrs	r3, r3, #1
 800b45e:	f100 0001 	add.w	r0, r0, #1
 800b462:	d003      	beq.n	800b46c <__lo0bits+0x58>
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	4770      	bx	lr
 800b468:	2000      	movs	r0, #0
 800b46a:	4770      	bx	lr
 800b46c:	2020      	movs	r0, #32
 800b46e:	4770      	bx	lr

0800b470 <__i2b>:
 800b470:	b510      	push	{r4, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	2101      	movs	r1, #1
 800b476:	f7ff ff01 	bl	800b27c <_Balloc>
 800b47a:	4602      	mov	r2, r0
 800b47c:	b928      	cbnz	r0, 800b48a <__i2b+0x1a>
 800b47e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b482:	4b04      	ldr	r3, [pc, #16]	; (800b494 <__i2b+0x24>)
 800b484:	4804      	ldr	r0, [pc, #16]	; (800b498 <__i2b+0x28>)
 800b486:	f000 fdb1 	bl	800bfec <__assert_func>
 800b48a:	2301      	movs	r3, #1
 800b48c:	6144      	str	r4, [r0, #20]
 800b48e:	6103      	str	r3, [r0, #16]
 800b490:	bd10      	pop	{r4, pc}
 800b492:	bf00      	nop
 800b494:	0800de3f 	.word	0x0800de3f
 800b498:	0800deb0 	.word	0x0800deb0

0800b49c <__multiply>:
 800b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	690a      	ldr	r2, [r1, #16]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	460d      	mov	r5, r1
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	bfbe      	ittt	lt
 800b4ac:	460b      	movlt	r3, r1
 800b4ae:	4625      	movlt	r5, r4
 800b4b0:	461c      	movlt	r4, r3
 800b4b2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b4b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b4ba:	68ab      	ldr	r3, [r5, #8]
 800b4bc:	6869      	ldr	r1, [r5, #4]
 800b4be:	eb0a 0709 	add.w	r7, sl, r9
 800b4c2:	42bb      	cmp	r3, r7
 800b4c4:	b085      	sub	sp, #20
 800b4c6:	bfb8      	it	lt
 800b4c8:	3101      	addlt	r1, #1
 800b4ca:	f7ff fed7 	bl	800b27c <_Balloc>
 800b4ce:	b930      	cbnz	r0, 800b4de <__multiply+0x42>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	f240 115d 	movw	r1, #349	; 0x15d
 800b4d6:	4b41      	ldr	r3, [pc, #260]	; (800b5dc <__multiply+0x140>)
 800b4d8:	4841      	ldr	r0, [pc, #260]	; (800b5e0 <__multiply+0x144>)
 800b4da:	f000 fd87 	bl	800bfec <__assert_func>
 800b4de:	f100 0614 	add.w	r6, r0, #20
 800b4e2:	4633      	mov	r3, r6
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b4ea:	4543      	cmp	r3, r8
 800b4ec:	d31e      	bcc.n	800b52c <__multiply+0x90>
 800b4ee:	f105 0c14 	add.w	ip, r5, #20
 800b4f2:	f104 0314 	add.w	r3, r4, #20
 800b4f6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b4fa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b4fe:	9202      	str	r2, [sp, #8]
 800b500:	ebac 0205 	sub.w	r2, ip, r5
 800b504:	3a15      	subs	r2, #21
 800b506:	f022 0203 	bic.w	r2, r2, #3
 800b50a:	3204      	adds	r2, #4
 800b50c:	f105 0115 	add.w	r1, r5, #21
 800b510:	458c      	cmp	ip, r1
 800b512:	bf38      	it	cc
 800b514:	2204      	movcc	r2, #4
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	9a02      	ldr	r2, [sp, #8]
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d808      	bhi.n	800b532 <__multiply+0x96>
 800b520:	2f00      	cmp	r7, #0
 800b522:	dc55      	bgt.n	800b5d0 <__multiply+0x134>
 800b524:	6107      	str	r7, [r0, #16]
 800b526:	b005      	add	sp, #20
 800b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	f843 2b04 	str.w	r2, [r3], #4
 800b530:	e7db      	b.n	800b4ea <__multiply+0x4e>
 800b532:	f8b3 a000 	ldrh.w	sl, [r3]
 800b536:	f1ba 0f00 	cmp.w	sl, #0
 800b53a:	d020      	beq.n	800b57e <__multiply+0xe2>
 800b53c:	46b1      	mov	r9, r6
 800b53e:	2200      	movs	r2, #0
 800b540:	f105 0e14 	add.w	lr, r5, #20
 800b544:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b548:	f8d9 b000 	ldr.w	fp, [r9]
 800b54c:	b2a1      	uxth	r1, r4
 800b54e:	fa1f fb8b 	uxth.w	fp, fp
 800b552:	fb0a b101 	mla	r1, sl, r1, fp
 800b556:	4411      	add	r1, r2
 800b558:	f8d9 2000 	ldr.w	r2, [r9]
 800b55c:	0c24      	lsrs	r4, r4, #16
 800b55e:	0c12      	lsrs	r2, r2, #16
 800b560:	fb0a 2404 	mla	r4, sl, r4, r2
 800b564:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b568:	b289      	uxth	r1, r1
 800b56a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b56e:	45f4      	cmp	ip, lr
 800b570:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b574:	f849 1b04 	str.w	r1, [r9], #4
 800b578:	d8e4      	bhi.n	800b544 <__multiply+0xa8>
 800b57a:	9901      	ldr	r1, [sp, #4]
 800b57c:	5072      	str	r2, [r6, r1]
 800b57e:	9a03      	ldr	r2, [sp, #12]
 800b580:	3304      	adds	r3, #4
 800b582:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b586:	f1b9 0f00 	cmp.w	r9, #0
 800b58a:	d01f      	beq.n	800b5cc <__multiply+0x130>
 800b58c:	46b6      	mov	lr, r6
 800b58e:	f04f 0a00 	mov.w	sl, #0
 800b592:	6834      	ldr	r4, [r6, #0]
 800b594:	f105 0114 	add.w	r1, r5, #20
 800b598:	880a      	ldrh	r2, [r1, #0]
 800b59a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b59e:	b2a4      	uxth	r4, r4
 800b5a0:	fb09 b202 	mla	r2, r9, r2, fp
 800b5a4:	4492      	add	sl, r2
 800b5a6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b5aa:	f84e 4b04 	str.w	r4, [lr], #4
 800b5ae:	f851 4b04 	ldr.w	r4, [r1], #4
 800b5b2:	f8be 2000 	ldrh.w	r2, [lr]
 800b5b6:	0c24      	lsrs	r4, r4, #16
 800b5b8:	fb09 2404 	mla	r4, r9, r4, r2
 800b5bc:	458c      	cmp	ip, r1
 800b5be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b5c2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b5c6:	d8e7      	bhi.n	800b598 <__multiply+0xfc>
 800b5c8:	9a01      	ldr	r2, [sp, #4]
 800b5ca:	50b4      	str	r4, [r6, r2]
 800b5cc:	3604      	adds	r6, #4
 800b5ce:	e7a3      	b.n	800b518 <__multiply+0x7c>
 800b5d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1a5      	bne.n	800b524 <__multiply+0x88>
 800b5d8:	3f01      	subs	r7, #1
 800b5da:	e7a1      	b.n	800b520 <__multiply+0x84>
 800b5dc:	0800de3f 	.word	0x0800de3f
 800b5e0:	0800deb0 	.word	0x0800deb0

0800b5e4 <__pow5mult>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	4615      	mov	r5, r2
 800b5ea:	f012 0203 	ands.w	r2, r2, #3
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	460f      	mov	r7, r1
 800b5f2:	d007      	beq.n	800b604 <__pow5mult+0x20>
 800b5f4:	4c25      	ldr	r4, [pc, #148]	; (800b68c <__pow5mult+0xa8>)
 800b5f6:	3a01      	subs	r2, #1
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b5fe:	f7ff fe9f 	bl	800b340 <__multadd>
 800b602:	4607      	mov	r7, r0
 800b604:	10ad      	asrs	r5, r5, #2
 800b606:	d03d      	beq.n	800b684 <__pow5mult+0xa0>
 800b608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b60a:	b97c      	cbnz	r4, 800b62c <__pow5mult+0x48>
 800b60c:	2010      	movs	r0, #16
 800b60e:	f7ff fe1f 	bl	800b250 <malloc>
 800b612:	4602      	mov	r2, r0
 800b614:	6270      	str	r0, [r6, #36]	; 0x24
 800b616:	b928      	cbnz	r0, 800b624 <__pow5mult+0x40>
 800b618:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b61c:	4b1c      	ldr	r3, [pc, #112]	; (800b690 <__pow5mult+0xac>)
 800b61e:	481d      	ldr	r0, [pc, #116]	; (800b694 <__pow5mult+0xb0>)
 800b620:	f000 fce4 	bl	800bfec <__assert_func>
 800b624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b628:	6004      	str	r4, [r0, #0]
 800b62a:	60c4      	str	r4, [r0, #12]
 800b62c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b634:	b94c      	cbnz	r4, 800b64a <__pow5mult+0x66>
 800b636:	f240 2171 	movw	r1, #625	; 0x271
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7ff ff18 	bl	800b470 <__i2b>
 800b640:	2300      	movs	r3, #0
 800b642:	4604      	mov	r4, r0
 800b644:	f8c8 0008 	str.w	r0, [r8, #8]
 800b648:	6003      	str	r3, [r0, #0]
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	07eb      	lsls	r3, r5, #31
 800b650:	d50a      	bpl.n	800b668 <__pow5mult+0x84>
 800b652:	4639      	mov	r1, r7
 800b654:	4622      	mov	r2, r4
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff ff20 	bl	800b49c <__multiply>
 800b65c:	4680      	mov	r8, r0
 800b65e:	4639      	mov	r1, r7
 800b660:	4630      	mov	r0, r6
 800b662:	f7ff fe4b 	bl	800b2fc <_Bfree>
 800b666:	4647      	mov	r7, r8
 800b668:	106d      	asrs	r5, r5, #1
 800b66a:	d00b      	beq.n	800b684 <__pow5mult+0xa0>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	b938      	cbnz	r0, 800b680 <__pow5mult+0x9c>
 800b670:	4622      	mov	r2, r4
 800b672:	4621      	mov	r1, r4
 800b674:	4630      	mov	r0, r6
 800b676:	f7ff ff11 	bl	800b49c <__multiply>
 800b67a:	6020      	str	r0, [r4, #0]
 800b67c:	f8c0 9000 	str.w	r9, [r0]
 800b680:	4604      	mov	r4, r0
 800b682:	e7e4      	b.n	800b64e <__pow5mult+0x6a>
 800b684:	4638      	mov	r0, r7
 800b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b68a:	bf00      	nop
 800b68c:	0800e000 	.word	0x0800e000
 800b690:	0800ddc9 	.word	0x0800ddc9
 800b694:	0800deb0 	.word	0x0800deb0

0800b698 <__lshift>:
 800b698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b69c:	460c      	mov	r4, r1
 800b69e:	4607      	mov	r7, r0
 800b6a0:	4691      	mov	r9, r2
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	6849      	ldr	r1, [r1, #4]
 800b6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6aa:	68a3      	ldr	r3, [r4, #8]
 800b6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b0:	f108 0601 	add.w	r6, r8, #1
 800b6b4:	42b3      	cmp	r3, r6
 800b6b6:	db0b      	blt.n	800b6d0 <__lshift+0x38>
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	f7ff fddf 	bl	800b27c <_Balloc>
 800b6be:	4605      	mov	r5, r0
 800b6c0:	b948      	cbnz	r0, 800b6d6 <__lshift+0x3e>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6c8:	4b27      	ldr	r3, [pc, #156]	; (800b768 <__lshift+0xd0>)
 800b6ca:	4828      	ldr	r0, [pc, #160]	; (800b76c <__lshift+0xd4>)
 800b6cc:	f000 fc8e 	bl	800bfec <__assert_func>
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	e7ee      	b.n	800b6b4 <__lshift+0x1c>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f100 0114 	add.w	r1, r0, #20
 800b6dc:	f100 0210 	add.w	r2, r0, #16
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	4553      	cmp	r3, sl
 800b6e4:	db33      	blt.n	800b74e <__lshift+0xb6>
 800b6e6:	6920      	ldr	r0, [r4, #16]
 800b6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6ec:	f104 0314 	add.w	r3, r4, #20
 800b6f0:	f019 091f 	ands.w	r9, r9, #31
 800b6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b6f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b6fc:	d02b      	beq.n	800b756 <__lshift+0xbe>
 800b6fe:	468a      	mov	sl, r1
 800b700:	2200      	movs	r2, #0
 800b702:	f1c9 0e20 	rsb	lr, r9, #32
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	fa00 f009 	lsl.w	r0, r0, r9
 800b70c:	4302      	orrs	r2, r0
 800b70e:	f84a 2b04 	str.w	r2, [sl], #4
 800b712:	f853 2b04 	ldr.w	r2, [r3], #4
 800b716:	459c      	cmp	ip, r3
 800b718:	fa22 f20e 	lsr.w	r2, r2, lr
 800b71c:	d8f3      	bhi.n	800b706 <__lshift+0x6e>
 800b71e:	ebac 0304 	sub.w	r3, ip, r4
 800b722:	3b15      	subs	r3, #21
 800b724:	f023 0303 	bic.w	r3, r3, #3
 800b728:	3304      	adds	r3, #4
 800b72a:	f104 0015 	add.w	r0, r4, #21
 800b72e:	4584      	cmp	ip, r0
 800b730:	bf38      	it	cc
 800b732:	2304      	movcc	r3, #4
 800b734:	50ca      	str	r2, [r1, r3]
 800b736:	b10a      	cbz	r2, 800b73c <__lshift+0xa4>
 800b738:	f108 0602 	add.w	r6, r8, #2
 800b73c:	3e01      	subs	r6, #1
 800b73e:	4638      	mov	r0, r7
 800b740:	4621      	mov	r1, r4
 800b742:	612e      	str	r6, [r5, #16]
 800b744:	f7ff fdda 	bl	800b2fc <_Bfree>
 800b748:	4628      	mov	r0, r5
 800b74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b752:	3301      	adds	r3, #1
 800b754:	e7c5      	b.n	800b6e2 <__lshift+0x4a>
 800b756:	3904      	subs	r1, #4
 800b758:	f853 2b04 	ldr.w	r2, [r3], #4
 800b75c:	459c      	cmp	ip, r3
 800b75e:	f841 2f04 	str.w	r2, [r1, #4]!
 800b762:	d8f9      	bhi.n	800b758 <__lshift+0xc0>
 800b764:	e7ea      	b.n	800b73c <__lshift+0xa4>
 800b766:	bf00      	nop
 800b768:	0800de3f 	.word	0x0800de3f
 800b76c:	0800deb0 	.word	0x0800deb0

0800b770 <__mcmp>:
 800b770:	4603      	mov	r3, r0
 800b772:	690a      	ldr	r2, [r1, #16]
 800b774:	6900      	ldr	r0, [r0, #16]
 800b776:	b530      	push	{r4, r5, lr}
 800b778:	1a80      	subs	r0, r0, r2
 800b77a:	d10d      	bne.n	800b798 <__mcmp+0x28>
 800b77c:	3314      	adds	r3, #20
 800b77e:	3114      	adds	r1, #20
 800b780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b78c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b790:	4295      	cmp	r5, r2
 800b792:	d002      	beq.n	800b79a <__mcmp+0x2a>
 800b794:	d304      	bcc.n	800b7a0 <__mcmp+0x30>
 800b796:	2001      	movs	r0, #1
 800b798:	bd30      	pop	{r4, r5, pc}
 800b79a:	42a3      	cmp	r3, r4
 800b79c:	d3f4      	bcc.n	800b788 <__mcmp+0x18>
 800b79e:	e7fb      	b.n	800b798 <__mcmp+0x28>
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	e7f8      	b.n	800b798 <__mcmp+0x28>
	...

0800b7a8 <__mdiff>:
 800b7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	460c      	mov	r4, r1
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	4692      	mov	sl, r2
 800b7b6:	f7ff ffdb 	bl	800b770 <__mcmp>
 800b7ba:	1e05      	subs	r5, r0, #0
 800b7bc:	d111      	bne.n	800b7e2 <__mdiff+0x3a>
 800b7be:	4629      	mov	r1, r5
 800b7c0:	4630      	mov	r0, r6
 800b7c2:	f7ff fd5b 	bl	800b27c <_Balloc>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	b928      	cbnz	r0, 800b7d6 <__mdiff+0x2e>
 800b7ca:	f240 2132 	movw	r1, #562	; 0x232
 800b7ce:	4b3c      	ldr	r3, [pc, #240]	; (800b8c0 <__mdiff+0x118>)
 800b7d0:	483c      	ldr	r0, [pc, #240]	; (800b8c4 <__mdiff+0x11c>)
 800b7d2:	f000 fc0b 	bl	800bfec <__assert_func>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7dc:	4610      	mov	r0, r2
 800b7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	bfa4      	itt	ge
 800b7e4:	4653      	movge	r3, sl
 800b7e6:	46a2      	movge	sl, r4
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f8da 1004 	ldr.w	r1, [sl, #4]
 800b7ee:	bfa6      	itte	ge
 800b7f0:	461c      	movge	r4, r3
 800b7f2:	2500      	movge	r5, #0
 800b7f4:	2501      	movlt	r5, #1
 800b7f6:	f7ff fd41 	bl	800b27c <_Balloc>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	b918      	cbnz	r0, 800b806 <__mdiff+0x5e>
 800b7fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b802:	4b2f      	ldr	r3, [pc, #188]	; (800b8c0 <__mdiff+0x118>)
 800b804:	e7e4      	b.n	800b7d0 <__mdiff+0x28>
 800b806:	f100 0814 	add.w	r8, r0, #20
 800b80a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800b80e:	60c5      	str	r5, [r0, #12]
 800b810:	f04f 0c00 	mov.w	ip, #0
 800b814:	f10a 0514 	add.w	r5, sl, #20
 800b818:	f10a 0010 	add.w	r0, sl, #16
 800b81c:	46c2      	mov	sl, r8
 800b81e:	6926      	ldr	r6, [r4, #16]
 800b820:	f104 0914 	add.w	r9, r4, #20
 800b824:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800b828:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b82c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800b830:	f859 3b04 	ldr.w	r3, [r9], #4
 800b834:	fa1f f18b 	uxth.w	r1, fp
 800b838:	4461      	add	r1, ip
 800b83a:	fa1f fc83 	uxth.w	ip, r3
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	eba1 010c 	sub.w	r1, r1, ip
 800b844:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b848:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b84c:	b289      	uxth	r1, r1
 800b84e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b852:	454e      	cmp	r6, r9
 800b854:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b858:	f84a 3b04 	str.w	r3, [sl], #4
 800b85c:	d8e6      	bhi.n	800b82c <__mdiff+0x84>
 800b85e:	1b33      	subs	r3, r6, r4
 800b860:	3b15      	subs	r3, #21
 800b862:	f023 0303 	bic.w	r3, r3, #3
 800b866:	3415      	adds	r4, #21
 800b868:	3304      	adds	r3, #4
 800b86a:	42a6      	cmp	r6, r4
 800b86c:	bf38      	it	cc
 800b86e:	2304      	movcc	r3, #4
 800b870:	441d      	add	r5, r3
 800b872:	4443      	add	r3, r8
 800b874:	461e      	mov	r6, r3
 800b876:	462c      	mov	r4, r5
 800b878:	4574      	cmp	r4, lr
 800b87a:	d30e      	bcc.n	800b89a <__mdiff+0xf2>
 800b87c:	f10e 0103 	add.w	r1, lr, #3
 800b880:	1b49      	subs	r1, r1, r5
 800b882:	f021 0103 	bic.w	r1, r1, #3
 800b886:	3d03      	subs	r5, #3
 800b888:	45ae      	cmp	lr, r5
 800b88a:	bf38      	it	cc
 800b88c:	2100      	movcc	r1, #0
 800b88e:	4419      	add	r1, r3
 800b890:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b894:	b18b      	cbz	r3, 800b8ba <__mdiff+0x112>
 800b896:	6117      	str	r7, [r2, #16]
 800b898:	e7a0      	b.n	800b7dc <__mdiff+0x34>
 800b89a:	f854 8b04 	ldr.w	r8, [r4], #4
 800b89e:	fa1f f188 	uxth.w	r1, r8
 800b8a2:	4461      	add	r1, ip
 800b8a4:	1408      	asrs	r0, r1, #16
 800b8a6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800b8aa:	b289      	uxth	r1, r1
 800b8ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8b4:	f846 1b04 	str.w	r1, [r6], #4
 800b8b8:	e7de      	b.n	800b878 <__mdiff+0xd0>
 800b8ba:	3f01      	subs	r7, #1
 800b8bc:	e7e8      	b.n	800b890 <__mdiff+0xe8>
 800b8be:	bf00      	nop
 800b8c0:	0800de3f 	.word	0x0800de3f
 800b8c4:	0800deb0 	.word	0x0800deb0

0800b8c8 <__d2b>:
 800b8c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b8cc:	2101      	movs	r1, #1
 800b8ce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b8d2:	4690      	mov	r8, r2
 800b8d4:	461d      	mov	r5, r3
 800b8d6:	f7ff fcd1 	bl	800b27c <_Balloc>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	b930      	cbnz	r0, 800b8ec <__d2b+0x24>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	f240 310a 	movw	r1, #778	; 0x30a
 800b8e4:	4b24      	ldr	r3, [pc, #144]	; (800b978 <__d2b+0xb0>)
 800b8e6:	4825      	ldr	r0, [pc, #148]	; (800b97c <__d2b+0xb4>)
 800b8e8:	f000 fb80 	bl	800bfec <__assert_func>
 800b8ec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b8f0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b8f4:	bb2d      	cbnz	r5, 800b942 <__d2b+0x7a>
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	f1b8 0300 	subs.w	r3, r8, #0
 800b8fc:	d026      	beq.n	800b94c <__d2b+0x84>
 800b8fe:	4668      	mov	r0, sp
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	f7ff fd87 	bl	800b414 <__lo0bits>
 800b906:	9900      	ldr	r1, [sp, #0]
 800b908:	b1f0      	cbz	r0, 800b948 <__d2b+0x80>
 800b90a:	9a01      	ldr	r2, [sp, #4]
 800b90c:	f1c0 0320 	rsb	r3, r0, #32
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	430b      	orrs	r3, r1
 800b916:	40c2      	lsrs	r2, r0
 800b918:	6163      	str	r3, [r4, #20]
 800b91a:	9201      	str	r2, [sp, #4]
 800b91c:	9b01      	ldr	r3, [sp, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	bf14      	ite	ne
 800b922:	2102      	movne	r1, #2
 800b924:	2101      	moveq	r1, #1
 800b926:	61a3      	str	r3, [r4, #24]
 800b928:	6121      	str	r1, [r4, #16]
 800b92a:	b1c5      	cbz	r5, 800b95e <__d2b+0x96>
 800b92c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b930:	4405      	add	r5, r0
 800b932:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b936:	603d      	str	r5, [r7, #0]
 800b938:	6030      	str	r0, [r6, #0]
 800b93a:	4620      	mov	r0, r4
 800b93c:	b002      	add	sp, #8
 800b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b946:	e7d6      	b.n	800b8f6 <__d2b+0x2e>
 800b948:	6161      	str	r1, [r4, #20]
 800b94a:	e7e7      	b.n	800b91c <__d2b+0x54>
 800b94c:	a801      	add	r0, sp, #4
 800b94e:	f7ff fd61 	bl	800b414 <__lo0bits>
 800b952:	2101      	movs	r1, #1
 800b954:	9b01      	ldr	r3, [sp, #4]
 800b956:	6121      	str	r1, [r4, #16]
 800b958:	6163      	str	r3, [r4, #20]
 800b95a:	3020      	adds	r0, #32
 800b95c:	e7e5      	b.n	800b92a <__d2b+0x62>
 800b95e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b962:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b966:	6038      	str	r0, [r7, #0]
 800b968:	6918      	ldr	r0, [r3, #16]
 800b96a:	f7ff fd33 	bl	800b3d4 <__hi0bits>
 800b96e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b972:	6031      	str	r1, [r6, #0]
 800b974:	e7e1      	b.n	800b93a <__d2b+0x72>
 800b976:	bf00      	nop
 800b978:	0800de3f 	.word	0x0800de3f
 800b97c:	0800deb0 	.word	0x0800deb0

0800b980 <_calloc_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	fb02 f501 	mul.w	r5, r2, r1
 800b986:	4629      	mov	r1, r5
 800b988:	f000 f854 	bl	800ba34 <_malloc_r>
 800b98c:	4604      	mov	r4, r0
 800b98e:	b118      	cbz	r0, 800b998 <_calloc_r+0x18>
 800b990:	462a      	mov	r2, r5
 800b992:	2100      	movs	r1, #0
 800b994:	f7fe f85a 	bl	8009a4c <memset>
 800b998:	4620      	mov	r0, r4
 800b99a:	bd38      	pop	{r3, r4, r5, pc}

0800b99c <_free_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4605      	mov	r5, r0
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	d043      	beq.n	800ba2c <_free_r+0x90>
 800b9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a8:	1f0c      	subs	r4, r1, #4
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bfb8      	it	lt
 800b9ae:	18e4      	addlt	r4, r4, r3
 800b9b0:	f000 fcc0 	bl	800c334 <__malloc_lock>
 800b9b4:	4a1e      	ldr	r2, [pc, #120]	; (800ba30 <_free_r+0x94>)
 800b9b6:	6813      	ldr	r3, [r2, #0]
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	b933      	cbnz	r3, 800b9ca <_free_r+0x2e>
 800b9bc:	6063      	str	r3, [r4, #4]
 800b9be:	6014      	str	r4, [r2, #0]
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c6:	f000 bcbb 	b.w	800c340 <__malloc_unlock>
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	d90a      	bls.n	800b9e4 <_free_r+0x48>
 800b9ce:	6821      	ldr	r1, [r4, #0]
 800b9d0:	1862      	adds	r2, r4, r1
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	bf01      	itttt	eq
 800b9d6:	681a      	ldreq	r2, [r3, #0]
 800b9d8:	685b      	ldreq	r3, [r3, #4]
 800b9da:	1852      	addeq	r2, r2, r1
 800b9dc:	6022      	streq	r2, [r4, #0]
 800b9de:	6063      	str	r3, [r4, #4]
 800b9e0:	6004      	str	r4, [r0, #0]
 800b9e2:	e7ed      	b.n	800b9c0 <_free_r+0x24>
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	b10b      	cbz	r3, 800b9ee <_free_r+0x52>
 800b9ea:	42a3      	cmp	r3, r4
 800b9ec:	d9fa      	bls.n	800b9e4 <_free_r+0x48>
 800b9ee:	6811      	ldr	r1, [r2, #0]
 800b9f0:	1850      	adds	r0, r2, r1
 800b9f2:	42a0      	cmp	r0, r4
 800b9f4:	d10b      	bne.n	800ba0e <_free_r+0x72>
 800b9f6:	6820      	ldr	r0, [r4, #0]
 800b9f8:	4401      	add	r1, r0
 800b9fa:	1850      	adds	r0, r2, r1
 800b9fc:	4283      	cmp	r3, r0
 800b9fe:	6011      	str	r1, [r2, #0]
 800ba00:	d1de      	bne.n	800b9c0 <_free_r+0x24>
 800ba02:	6818      	ldr	r0, [r3, #0]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	4401      	add	r1, r0
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	6053      	str	r3, [r2, #4]
 800ba0c:	e7d8      	b.n	800b9c0 <_free_r+0x24>
 800ba0e:	d902      	bls.n	800ba16 <_free_r+0x7a>
 800ba10:	230c      	movs	r3, #12
 800ba12:	602b      	str	r3, [r5, #0]
 800ba14:	e7d4      	b.n	800b9c0 <_free_r+0x24>
 800ba16:	6820      	ldr	r0, [r4, #0]
 800ba18:	1821      	adds	r1, r4, r0
 800ba1a:	428b      	cmp	r3, r1
 800ba1c:	bf01      	itttt	eq
 800ba1e:	6819      	ldreq	r1, [r3, #0]
 800ba20:	685b      	ldreq	r3, [r3, #4]
 800ba22:	1809      	addeq	r1, r1, r0
 800ba24:	6021      	streq	r1, [r4, #0]
 800ba26:	6063      	str	r3, [r4, #4]
 800ba28:	6054      	str	r4, [r2, #4]
 800ba2a:	e7c9      	b.n	800b9c0 <_free_r+0x24>
 800ba2c:	bd38      	pop	{r3, r4, r5, pc}
 800ba2e:	bf00      	nop
 800ba30:	20001e94 	.word	0x20001e94

0800ba34 <_malloc_r>:
 800ba34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba36:	1ccd      	adds	r5, r1, #3
 800ba38:	f025 0503 	bic.w	r5, r5, #3
 800ba3c:	3508      	adds	r5, #8
 800ba3e:	2d0c      	cmp	r5, #12
 800ba40:	bf38      	it	cc
 800ba42:	250c      	movcc	r5, #12
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	4606      	mov	r6, r0
 800ba48:	db01      	blt.n	800ba4e <_malloc_r+0x1a>
 800ba4a:	42a9      	cmp	r1, r5
 800ba4c:	d903      	bls.n	800ba56 <_malloc_r+0x22>
 800ba4e:	230c      	movs	r3, #12
 800ba50:	6033      	str	r3, [r6, #0]
 800ba52:	2000      	movs	r0, #0
 800ba54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba56:	f000 fc6d 	bl	800c334 <__malloc_lock>
 800ba5a:	4921      	ldr	r1, [pc, #132]	; (800bae0 <_malloc_r+0xac>)
 800ba5c:	680a      	ldr	r2, [r1, #0]
 800ba5e:	4614      	mov	r4, r2
 800ba60:	b99c      	cbnz	r4, 800ba8a <_malloc_r+0x56>
 800ba62:	4f20      	ldr	r7, [pc, #128]	; (800bae4 <_malloc_r+0xb0>)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	b923      	cbnz	r3, 800ba72 <_malloc_r+0x3e>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	f000 f998 	bl	800bda0 <_sbrk_r>
 800ba70:	6038      	str	r0, [r7, #0]
 800ba72:	4629      	mov	r1, r5
 800ba74:	4630      	mov	r0, r6
 800ba76:	f000 f993 	bl	800bda0 <_sbrk_r>
 800ba7a:	1c43      	adds	r3, r0, #1
 800ba7c:	d123      	bne.n	800bac6 <_malloc_r+0x92>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	4630      	mov	r0, r6
 800ba82:	6033      	str	r3, [r6, #0]
 800ba84:	f000 fc5c 	bl	800c340 <__malloc_unlock>
 800ba88:	e7e3      	b.n	800ba52 <_malloc_r+0x1e>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	1b5b      	subs	r3, r3, r5
 800ba8e:	d417      	bmi.n	800bac0 <_malloc_r+0x8c>
 800ba90:	2b0b      	cmp	r3, #11
 800ba92:	d903      	bls.n	800ba9c <_malloc_r+0x68>
 800ba94:	6023      	str	r3, [r4, #0]
 800ba96:	441c      	add	r4, r3
 800ba98:	6025      	str	r5, [r4, #0]
 800ba9a:	e004      	b.n	800baa6 <_malloc_r+0x72>
 800ba9c:	6863      	ldr	r3, [r4, #4]
 800ba9e:	42a2      	cmp	r2, r4
 800baa0:	bf0c      	ite	eq
 800baa2:	600b      	streq	r3, [r1, #0]
 800baa4:	6053      	strne	r3, [r2, #4]
 800baa6:	4630      	mov	r0, r6
 800baa8:	f000 fc4a 	bl	800c340 <__malloc_unlock>
 800baac:	f104 000b 	add.w	r0, r4, #11
 800bab0:	1d23      	adds	r3, r4, #4
 800bab2:	f020 0007 	bic.w	r0, r0, #7
 800bab6:	1ac2      	subs	r2, r0, r3
 800bab8:	d0cc      	beq.n	800ba54 <_malloc_r+0x20>
 800baba:	1a1b      	subs	r3, r3, r0
 800babc:	50a3      	str	r3, [r4, r2]
 800babe:	e7c9      	b.n	800ba54 <_malloc_r+0x20>
 800bac0:	4622      	mov	r2, r4
 800bac2:	6864      	ldr	r4, [r4, #4]
 800bac4:	e7cc      	b.n	800ba60 <_malloc_r+0x2c>
 800bac6:	1cc4      	adds	r4, r0, #3
 800bac8:	f024 0403 	bic.w	r4, r4, #3
 800bacc:	42a0      	cmp	r0, r4
 800bace:	d0e3      	beq.n	800ba98 <_malloc_r+0x64>
 800bad0:	1a21      	subs	r1, r4, r0
 800bad2:	4630      	mov	r0, r6
 800bad4:	f000 f964 	bl	800bda0 <_sbrk_r>
 800bad8:	3001      	adds	r0, #1
 800bada:	d1dd      	bne.n	800ba98 <_malloc_r+0x64>
 800badc:	e7cf      	b.n	800ba7e <_malloc_r+0x4a>
 800bade:	bf00      	nop
 800bae0:	20001e94 	.word	0x20001e94
 800bae4:	20001e98 	.word	0x20001e98

0800bae8 <__ssputs_r>:
 800bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baec:	688e      	ldr	r6, [r1, #8]
 800baee:	4682      	mov	sl, r0
 800baf0:	429e      	cmp	r6, r3
 800baf2:	460c      	mov	r4, r1
 800baf4:	4690      	mov	r8, r2
 800baf6:	461f      	mov	r7, r3
 800baf8:	d838      	bhi.n	800bb6c <__ssputs_r+0x84>
 800bafa:	898a      	ldrh	r2, [r1, #12]
 800bafc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb00:	d032      	beq.n	800bb68 <__ssputs_r+0x80>
 800bb02:	6825      	ldr	r5, [r4, #0]
 800bb04:	6909      	ldr	r1, [r1, #16]
 800bb06:	3301      	adds	r3, #1
 800bb08:	eba5 0901 	sub.w	r9, r5, r1
 800bb0c:	6965      	ldr	r5, [r4, #20]
 800bb0e:	444b      	add	r3, r9
 800bb10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb18:	106d      	asrs	r5, r5, #1
 800bb1a:	429d      	cmp	r5, r3
 800bb1c:	bf38      	it	cc
 800bb1e:	461d      	movcc	r5, r3
 800bb20:	0553      	lsls	r3, r2, #21
 800bb22:	d531      	bpl.n	800bb88 <__ssputs_r+0xa0>
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7ff ff85 	bl	800ba34 <_malloc_r>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	b950      	cbnz	r0, 800bb44 <__ssputs_r+0x5c>
 800bb2e:	230c      	movs	r3, #12
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295
 800bb34:	f8ca 3000 	str.w	r3, [sl]
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb44:	464a      	mov	r2, r9
 800bb46:	6921      	ldr	r1, [r4, #16]
 800bb48:	f7fd ff72 	bl	8009a30 <memcpy>
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb56:	81a3      	strh	r3, [r4, #12]
 800bb58:	6126      	str	r6, [r4, #16]
 800bb5a:	444e      	add	r6, r9
 800bb5c:	6026      	str	r6, [r4, #0]
 800bb5e:	463e      	mov	r6, r7
 800bb60:	6165      	str	r5, [r4, #20]
 800bb62:	eba5 0509 	sub.w	r5, r5, r9
 800bb66:	60a5      	str	r5, [r4, #8]
 800bb68:	42be      	cmp	r6, r7
 800bb6a:	d900      	bls.n	800bb6e <__ssputs_r+0x86>
 800bb6c:	463e      	mov	r6, r7
 800bb6e:	4632      	mov	r2, r6
 800bb70:	4641      	mov	r1, r8
 800bb72:	6820      	ldr	r0, [r4, #0]
 800bb74:	f000 fbc4 	bl	800c300 <memmove>
 800bb78:	68a3      	ldr	r3, [r4, #8]
 800bb7a:	6822      	ldr	r2, [r4, #0]
 800bb7c:	1b9b      	subs	r3, r3, r6
 800bb7e:	4432      	add	r2, r6
 800bb80:	2000      	movs	r0, #0
 800bb82:	60a3      	str	r3, [r4, #8]
 800bb84:	6022      	str	r2, [r4, #0]
 800bb86:	e7db      	b.n	800bb40 <__ssputs_r+0x58>
 800bb88:	462a      	mov	r2, r5
 800bb8a:	f000 fbdf 	bl	800c34c <_realloc_r>
 800bb8e:	4606      	mov	r6, r0
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d1e1      	bne.n	800bb58 <__ssputs_r+0x70>
 800bb94:	4650      	mov	r0, sl
 800bb96:	6921      	ldr	r1, [r4, #16]
 800bb98:	f7ff ff00 	bl	800b99c <_free_r>
 800bb9c:	e7c7      	b.n	800bb2e <__ssputs_r+0x46>
	...

0800bba0 <_svfiprintf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	4698      	mov	r8, r3
 800bba6:	898b      	ldrh	r3, [r1, #12]
 800bba8:	4607      	mov	r7, r0
 800bbaa:	061b      	lsls	r3, r3, #24
 800bbac:	460d      	mov	r5, r1
 800bbae:	4614      	mov	r4, r2
 800bbb0:	b09d      	sub	sp, #116	; 0x74
 800bbb2:	d50e      	bpl.n	800bbd2 <_svfiprintf_r+0x32>
 800bbb4:	690b      	ldr	r3, [r1, #16]
 800bbb6:	b963      	cbnz	r3, 800bbd2 <_svfiprintf_r+0x32>
 800bbb8:	2140      	movs	r1, #64	; 0x40
 800bbba:	f7ff ff3b 	bl	800ba34 <_malloc_r>
 800bbbe:	6028      	str	r0, [r5, #0]
 800bbc0:	6128      	str	r0, [r5, #16]
 800bbc2:	b920      	cbnz	r0, 800bbce <_svfiprintf_r+0x2e>
 800bbc4:	230c      	movs	r3, #12
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbcc:	e0d1      	b.n	800bd72 <_svfiprintf_r+0x1d2>
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	616b      	str	r3, [r5, #20]
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd6:	2320      	movs	r3, #32
 800bbd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbdc:	2330      	movs	r3, #48	; 0x30
 800bbde:	f04f 0901 	mov.w	r9, #1
 800bbe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd8c <_svfiprintf_r+0x1ec>
 800bbea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbee:	4623      	mov	r3, r4
 800bbf0:	469a      	mov	sl, r3
 800bbf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf6:	b10a      	cbz	r2, 800bbfc <_svfiprintf_r+0x5c>
 800bbf8:	2a25      	cmp	r2, #37	; 0x25
 800bbfa:	d1f9      	bne.n	800bbf0 <_svfiprintf_r+0x50>
 800bbfc:	ebba 0b04 	subs.w	fp, sl, r4
 800bc00:	d00b      	beq.n	800bc1a <_svfiprintf_r+0x7a>
 800bc02:	465b      	mov	r3, fp
 800bc04:	4622      	mov	r2, r4
 800bc06:	4629      	mov	r1, r5
 800bc08:	4638      	mov	r0, r7
 800bc0a:	f7ff ff6d 	bl	800bae8 <__ssputs_r>
 800bc0e:	3001      	adds	r0, #1
 800bc10:	f000 80aa 	beq.w	800bd68 <_svfiprintf_r+0x1c8>
 800bc14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc16:	445a      	add	r2, fp
 800bc18:	9209      	str	r2, [sp, #36]	; 0x24
 800bc1a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80a2 	beq.w	800bd68 <_svfiprintf_r+0x1c8>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc2e:	f10a 0a01 	add.w	sl, sl, #1
 800bc32:	9304      	str	r3, [sp, #16]
 800bc34:	9307      	str	r3, [sp, #28]
 800bc36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc3a:	931a      	str	r3, [sp, #104]	; 0x68
 800bc3c:	4654      	mov	r4, sl
 800bc3e:	2205      	movs	r2, #5
 800bc40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc44:	4851      	ldr	r0, [pc, #324]	; (800bd8c <_svfiprintf_r+0x1ec>)
 800bc46:	f7ff fb0b 	bl	800b260 <memchr>
 800bc4a:	9a04      	ldr	r2, [sp, #16]
 800bc4c:	b9d8      	cbnz	r0, 800bc86 <_svfiprintf_r+0xe6>
 800bc4e:	06d0      	lsls	r0, r2, #27
 800bc50:	bf44      	itt	mi
 800bc52:	2320      	movmi	r3, #32
 800bc54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc58:	0711      	lsls	r1, r2, #28
 800bc5a:	bf44      	itt	mi
 800bc5c:	232b      	movmi	r3, #43	; 0x2b
 800bc5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc62:	f89a 3000 	ldrb.w	r3, [sl]
 800bc66:	2b2a      	cmp	r3, #42	; 0x2a
 800bc68:	d015      	beq.n	800bc96 <_svfiprintf_r+0xf6>
 800bc6a:	4654      	mov	r4, sl
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f04f 0c0a 	mov.w	ip, #10
 800bc72:	9a07      	ldr	r2, [sp, #28]
 800bc74:	4621      	mov	r1, r4
 800bc76:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc7a:	3b30      	subs	r3, #48	; 0x30
 800bc7c:	2b09      	cmp	r3, #9
 800bc7e:	d94e      	bls.n	800bd1e <_svfiprintf_r+0x17e>
 800bc80:	b1b0      	cbz	r0, 800bcb0 <_svfiprintf_r+0x110>
 800bc82:	9207      	str	r2, [sp, #28]
 800bc84:	e014      	b.n	800bcb0 <_svfiprintf_r+0x110>
 800bc86:	eba0 0308 	sub.w	r3, r0, r8
 800bc8a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	46a2      	mov	sl, r4
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	e7d2      	b.n	800bc3c <_svfiprintf_r+0x9c>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	1d19      	adds	r1, r3, #4
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	9103      	str	r1, [sp, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	bfbb      	ittet	lt
 800bca2:	425b      	neglt	r3, r3
 800bca4:	f042 0202 	orrlt.w	r2, r2, #2
 800bca8:	9307      	strge	r3, [sp, #28]
 800bcaa:	9307      	strlt	r3, [sp, #28]
 800bcac:	bfb8      	it	lt
 800bcae:	9204      	strlt	r2, [sp, #16]
 800bcb0:	7823      	ldrb	r3, [r4, #0]
 800bcb2:	2b2e      	cmp	r3, #46	; 0x2e
 800bcb4:	d10c      	bne.n	800bcd0 <_svfiprintf_r+0x130>
 800bcb6:	7863      	ldrb	r3, [r4, #1]
 800bcb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcba:	d135      	bne.n	800bd28 <_svfiprintf_r+0x188>
 800bcbc:	9b03      	ldr	r3, [sp, #12]
 800bcbe:	3402      	adds	r4, #2
 800bcc0:	1d1a      	adds	r2, r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	9203      	str	r2, [sp, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bfb8      	it	lt
 800bcca:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcce:	9305      	str	r3, [sp, #20]
 800bcd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd9c <_svfiprintf_r+0x1fc>
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	7821      	ldrb	r1, [r4, #0]
 800bcda:	f7ff fac1 	bl	800b260 <memchr>
 800bcde:	b140      	cbz	r0, 800bcf2 <_svfiprintf_r+0x152>
 800bce0:	2340      	movs	r3, #64	; 0x40
 800bce2:	eba0 000a 	sub.w	r0, r0, sl
 800bce6:	fa03 f000 	lsl.w	r0, r3, r0
 800bcea:	9b04      	ldr	r3, [sp, #16]
 800bcec:	3401      	adds	r4, #1
 800bcee:	4303      	orrs	r3, r0
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf6:	2206      	movs	r2, #6
 800bcf8:	4825      	ldr	r0, [pc, #148]	; (800bd90 <_svfiprintf_r+0x1f0>)
 800bcfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcfe:	f7ff faaf 	bl	800b260 <memchr>
 800bd02:	2800      	cmp	r0, #0
 800bd04:	d038      	beq.n	800bd78 <_svfiprintf_r+0x1d8>
 800bd06:	4b23      	ldr	r3, [pc, #140]	; (800bd94 <_svfiprintf_r+0x1f4>)
 800bd08:	bb1b      	cbnz	r3, 800bd52 <_svfiprintf_r+0x1b2>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	3307      	adds	r3, #7
 800bd0e:	f023 0307 	bic.w	r3, r3, #7
 800bd12:	3308      	adds	r3, #8
 800bd14:	9303      	str	r3, [sp, #12]
 800bd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd18:	4433      	add	r3, r6
 800bd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd1c:	e767      	b.n	800bbee <_svfiprintf_r+0x4e>
 800bd1e:	460c      	mov	r4, r1
 800bd20:	2001      	movs	r0, #1
 800bd22:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd26:	e7a5      	b.n	800bc74 <_svfiprintf_r+0xd4>
 800bd28:	2300      	movs	r3, #0
 800bd2a:	f04f 0c0a 	mov.w	ip, #10
 800bd2e:	4619      	mov	r1, r3
 800bd30:	3401      	adds	r4, #1
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	4620      	mov	r0, r4
 800bd36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd3a:	3a30      	subs	r2, #48	; 0x30
 800bd3c:	2a09      	cmp	r2, #9
 800bd3e:	d903      	bls.n	800bd48 <_svfiprintf_r+0x1a8>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d0c5      	beq.n	800bcd0 <_svfiprintf_r+0x130>
 800bd44:	9105      	str	r1, [sp, #20]
 800bd46:	e7c3      	b.n	800bcd0 <_svfiprintf_r+0x130>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd50:	e7f0      	b.n	800bd34 <_svfiprintf_r+0x194>
 800bd52:	ab03      	add	r3, sp, #12
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	462a      	mov	r2, r5
 800bd58:	4638      	mov	r0, r7
 800bd5a:	4b0f      	ldr	r3, [pc, #60]	; (800bd98 <_svfiprintf_r+0x1f8>)
 800bd5c:	a904      	add	r1, sp, #16
 800bd5e:	f7fd ff1b 	bl	8009b98 <_printf_float>
 800bd62:	1c42      	adds	r2, r0, #1
 800bd64:	4606      	mov	r6, r0
 800bd66:	d1d6      	bne.n	800bd16 <_svfiprintf_r+0x176>
 800bd68:	89ab      	ldrh	r3, [r5, #12]
 800bd6a:	065b      	lsls	r3, r3, #25
 800bd6c:	f53f af2c 	bmi.w	800bbc8 <_svfiprintf_r+0x28>
 800bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd72:	b01d      	add	sp, #116	; 0x74
 800bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd78:	ab03      	add	r3, sp, #12
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	462a      	mov	r2, r5
 800bd7e:	4638      	mov	r0, r7
 800bd80:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <_svfiprintf_r+0x1f8>)
 800bd82:	a904      	add	r1, sp, #16
 800bd84:	f7fe f9a4 	bl	800a0d0 <_printf_i>
 800bd88:	e7eb      	b.n	800bd62 <_svfiprintf_r+0x1c2>
 800bd8a:	bf00      	nop
 800bd8c:	0800e00c 	.word	0x0800e00c
 800bd90:	0800e016 	.word	0x0800e016
 800bd94:	08009b99 	.word	0x08009b99
 800bd98:	0800bae9 	.word	0x0800bae9
 800bd9c:	0800e012 	.word	0x0800e012

0800bda0 <_sbrk_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	2300      	movs	r3, #0
 800bda4:	4d05      	ldr	r5, [pc, #20]	; (800bdbc <_sbrk_r+0x1c>)
 800bda6:	4604      	mov	r4, r0
 800bda8:	4608      	mov	r0, r1
 800bdaa:	602b      	str	r3, [r5, #0]
 800bdac:	f7f6 f876 	bl	8001e9c <_sbrk>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_sbrk_r+0x1a>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_sbrk_r+0x1a>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	200032f8 	.word	0x200032f8

0800bdc0 <__sread>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	f000 fc3e 	bl	800c648 <_read_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	bfab      	itete	ge
 800bdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd4:	181b      	addge	r3, r3, r0
 800bdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdda:	bfac      	ite	ge
 800bddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdde:	81a3      	strhlt	r3, [r4, #12]
 800bde0:	bd10      	pop	{r4, pc}

0800bde2 <__swrite>:
 800bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	461f      	mov	r7, r3
 800bde8:	898b      	ldrh	r3, [r1, #12]
 800bdea:	4605      	mov	r5, r0
 800bdec:	05db      	lsls	r3, r3, #23
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d505      	bpl.n	800be00 <__swrite+0x1e>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdfc:	f000 f9f8 	bl	800c1f0 <_lseek_r>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	4632      	mov	r2, r6
 800be04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be08:	81a3      	strh	r3, [r4, #12]
 800be0a:	4628      	mov	r0, r5
 800be0c:	463b      	mov	r3, r7
 800be0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	f000 b869 	b.w	800beec <_write_r>

0800be1a <__sseek>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be22:	f000 f9e5 	bl	800c1f0 <_lseek_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	bf15      	itete	ne
 800be2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be36:	81a3      	strheq	r3, [r4, #12]
 800be38:	bf18      	it	ne
 800be3a:	81a3      	strhne	r3, [r4, #12]
 800be3c:	bd10      	pop	{r4, pc}

0800be3e <__sclose>:
 800be3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be42:	f000 b8f1 	b.w	800c028 <_close_r>
	...

0800be48 <__swbuf_r>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	460e      	mov	r6, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	4605      	mov	r5, r0
 800be50:	b118      	cbz	r0, 800be5a <__swbuf_r+0x12>
 800be52:	6983      	ldr	r3, [r0, #24]
 800be54:	b90b      	cbnz	r3, 800be5a <__swbuf_r+0x12>
 800be56:	f7ff f955 	bl	800b104 <__sinit>
 800be5a:	4b21      	ldr	r3, [pc, #132]	; (800bee0 <__swbuf_r+0x98>)
 800be5c:	429c      	cmp	r4, r3
 800be5e:	d12b      	bne.n	800beb8 <__swbuf_r+0x70>
 800be60:	686c      	ldr	r4, [r5, #4]
 800be62:	69a3      	ldr	r3, [r4, #24]
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	071a      	lsls	r2, r3, #28
 800be6a:	d52f      	bpl.n	800becc <__swbuf_r+0x84>
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b36b      	cbz	r3, 800becc <__swbuf_r+0x84>
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	6820      	ldr	r0, [r4, #0]
 800be74:	b2f6      	uxtb	r6, r6
 800be76:	1ac0      	subs	r0, r0, r3
 800be78:	6963      	ldr	r3, [r4, #20]
 800be7a:	4637      	mov	r7, r6
 800be7c:	4283      	cmp	r3, r0
 800be7e:	dc04      	bgt.n	800be8a <__swbuf_r+0x42>
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f966 	bl	800c154 <_fflush_r>
 800be88:	bb30      	cbnz	r0, 800bed8 <__swbuf_r+0x90>
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	3001      	adds	r0, #1
 800be8e:	3b01      	subs	r3, #1
 800be90:	60a3      	str	r3, [r4, #8]
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	6022      	str	r2, [r4, #0]
 800be98:	701e      	strb	r6, [r3, #0]
 800be9a:	6963      	ldr	r3, [r4, #20]
 800be9c:	4283      	cmp	r3, r0
 800be9e:	d004      	beq.n	800beaa <__swbuf_r+0x62>
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	07db      	lsls	r3, r3, #31
 800bea4:	d506      	bpl.n	800beb4 <__swbuf_r+0x6c>
 800bea6:	2e0a      	cmp	r6, #10
 800bea8:	d104      	bne.n	800beb4 <__swbuf_r+0x6c>
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f000 f951 	bl	800c154 <_fflush_r>
 800beb2:	b988      	cbnz	r0, 800bed8 <__swbuf_r+0x90>
 800beb4:	4638      	mov	r0, r7
 800beb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb8:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <__swbuf_r+0x9c>)
 800beba:	429c      	cmp	r4, r3
 800bebc:	d101      	bne.n	800bec2 <__swbuf_r+0x7a>
 800bebe:	68ac      	ldr	r4, [r5, #8]
 800bec0:	e7cf      	b.n	800be62 <__swbuf_r+0x1a>
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <__swbuf_r+0xa0>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	bf08      	it	eq
 800bec8:	68ec      	ldreq	r4, [r5, #12]
 800beca:	e7ca      	b.n	800be62 <__swbuf_r+0x1a>
 800becc:	4621      	mov	r1, r4
 800bece:	4628      	mov	r0, r5
 800bed0:	f000 f81e 	bl	800bf10 <__swsetup_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d0cb      	beq.n	800be70 <__swbuf_r+0x28>
 800bed8:	f04f 37ff 	mov.w	r7, #4294967295
 800bedc:	e7ea      	b.n	800beb4 <__swbuf_r+0x6c>
 800bede:	bf00      	nop
 800bee0:	0800de70 	.word	0x0800de70
 800bee4:	0800de90 	.word	0x0800de90
 800bee8:	0800de50 	.word	0x0800de50

0800beec <_write_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	4611      	mov	r1, r2
 800bef4:	2200      	movs	r2, #0
 800bef6:	4d05      	ldr	r5, [pc, #20]	; (800bf0c <_write_r+0x20>)
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7f5 ffb5 	bl	8001e6a <_write>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_write_r+0x1e>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_write_r+0x1e>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	200032f8 	.word	0x200032f8

0800bf10 <__swsetup_r>:
 800bf10:	4b32      	ldr	r3, [pc, #200]	; (800bfdc <__swsetup_r+0xcc>)
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	681d      	ldr	r5, [r3, #0]
 800bf16:	4606      	mov	r6, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	b125      	cbz	r5, 800bf26 <__swsetup_r+0x16>
 800bf1c:	69ab      	ldr	r3, [r5, #24]
 800bf1e:	b913      	cbnz	r3, 800bf26 <__swsetup_r+0x16>
 800bf20:	4628      	mov	r0, r5
 800bf22:	f7ff f8ef 	bl	800b104 <__sinit>
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <__swsetup_r+0xd0>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	d10f      	bne.n	800bf4c <__swsetup_r+0x3c>
 800bf2c:	686c      	ldr	r4, [r5, #4]
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf34:	0719      	lsls	r1, r3, #28
 800bf36:	d42c      	bmi.n	800bf92 <__swsetup_r+0x82>
 800bf38:	06dd      	lsls	r5, r3, #27
 800bf3a:	d411      	bmi.n	800bf60 <__swsetup_r+0x50>
 800bf3c:	2309      	movs	r3, #9
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	81a3      	strh	r3, [r4, #12]
 800bf4a:	e03e      	b.n	800bfca <__swsetup_r+0xba>
 800bf4c:	4b25      	ldr	r3, [pc, #148]	; (800bfe4 <__swsetup_r+0xd4>)
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d101      	bne.n	800bf56 <__swsetup_r+0x46>
 800bf52:	68ac      	ldr	r4, [r5, #8]
 800bf54:	e7eb      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf56:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <__swsetup_r+0xd8>)
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	bf08      	it	eq
 800bf5c:	68ec      	ldreq	r4, [r5, #12]
 800bf5e:	e7e6      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf60:	0758      	lsls	r0, r3, #29
 800bf62:	d512      	bpl.n	800bf8a <__swsetup_r+0x7a>
 800bf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf66:	b141      	cbz	r1, 800bf7a <__swsetup_r+0x6a>
 800bf68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d002      	beq.n	800bf76 <__swsetup_r+0x66>
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7ff fd13 	bl	800b99c <_free_r>
 800bf76:	2300      	movs	r3, #0
 800bf78:	6363      	str	r3, [r4, #52]	; 0x34
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	2300      	movs	r3, #0
 800bf84:	6063      	str	r3, [r4, #4]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f043 0308 	orr.w	r3, r3, #8
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	b94b      	cbnz	r3, 800bfaa <__swsetup_r+0x9a>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa0:	d003      	beq.n	800bfaa <__swsetup_r+0x9a>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 f959 	bl	800c25c <__smakebuf_r>
 800bfaa:	89a0      	ldrh	r0, [r4, #12]
 800bfac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb0:	f010 0301 	ands.w	r3, r0, #1
 800bfb4:	d00a      	beq.n	800bfcc <__swsetup_r+0xbc>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60a3      	str	r3, [r4, #8]
 800bfba:	6963      	ldr	r3, [r4, #20]
 800bfbc:	425b      	negs	r3, r3
 800bfbe:	61a3      	str	r3, [r4, #24]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	b943      	cbnz	r3, 800bfd6 <__swsetup_r+0xc6>
 800bfc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfc8:	d1ba      	bne.n	800bf40 <__swsetup_r+0x30>
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	0781      	lsls	r1, r0, #30
 800bfce:	bf58      	it	pl
 800bfd0:	6963      	ldrpl	r3, [r4, #20]
 800bfd2:	60a3      	str	r3, [r4, #8]
 800bfd4:	e7f4      	b.n	800bfc0 <__swsetup_r+0xb0>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e7f7      	b.n	800bfca <__swsetup_r+0xba>
 800bfda:	bf00      	nop
 800bfdc:	20000180 	.word	0x20000180
 800bfe0:	0800de70 	.word	0x0800de70
 800bfe4:	0800de90 	.word	0x0800de90
 800bfe8:	0800de50 	.word	0x0800de50

0800bfec <__assert_func>:
 800bfec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bfee:	4614      	mov	r4, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4b09      	ldr	r3, [pc, #36]	; (800c018 <__assert_func+0x2c>)
 800bff4:	4605      	mov	r5, r0
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68d8      	ldr	r0, [r3, #12]
 800bffa:	b14c      	cbz	r4, 800c010 <__assert_func+0x24>
 800bffc:	4b07      	ldr	r3, [pc, #28]	; (800c01c <__assert_func+0x30>)
 800bffe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c002:	9100      	str	r1, [sp, #0]
 800c004:	462b      	mov	r3, r5
 800c006:	4906      	ldr	r1, [pc, #24]	; (800c020 <__assert_func+0x34>)
 800c008:	f000 f8e0 	bl	800c1cc <fiprintf>
 800c00c:	f000 fb3b 	bl	800c686 <abort>
 800c010:	4b04      	ldr	r3, [pc, #16]	; (800c024 <__assert_func+0x38>)
 800c012:	461c      	mov	r4, r3
 800c014:	e7f3      	b.n	800bffe <__assert_func+0x12>
 800c016:	bf00      	nop
 800c018:	20000180 	.word	0x20000180
 800c01c:	0800e01d 	.word	0x0800e01d
 800c020:	0800e02a 	.word	0x0800e02a
 800c024:	0800c953 	.word	0x0800c953

0800c028 <_close_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	2300      	movs	r3, #0
 800c02c:	4d05      	ldr	r5, [pc, #20]	; (800c044 <_close_r+0x1c>)
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f5 ff26 	bl	8001e84 <_close>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_close_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_close_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	200032f8 	.word	0x200032f8

0800c048 <__sflush_r>:
 800c048:	898a      	ldrh	r2, [r1, #12]
 800c04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c04e:	4605      	mov	r5, r0
 800c050:	0710      	lsls	r0, r2, #28
 800c052:	460c      	mov	r4, r1
 800c054:	d458      	bmi.n	800c108 <__sflush_r+0xc0>
 800c056:	684b      	ldr	r3, [r1, #4]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	dc05      	bgt.n	800c068 <__sflush_r+0x20>
 800c05c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	dc02      	bgt.n	800c068 <__sflush_r+0x20>
 800c062:	2000      	movs	r0, #0
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c06a:	2e00      	cmp	r6, #0
 800c06c:	d0f9      	beq.n	800c062 <__sflush_r+0x1a>
 800c06e:	2300      	movs	r3, #0
 800c070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c074:	682f      	ldr	r7, [r5, #0]
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	d032      	beq.n	800c0e0 <__sflush_r+0x98>
 800c07a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	075a      	lsls	r2, r3, #29
 800c080:	d505      	bpl.n	800c08e <__sflush_r+0x46>
 800c082:	6863      	ldr	r3, [r4, #4]
 800c084:	1ac0      	subs	r0, r0, r3
 800c086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c088:	b10b      	cbz	r3, 800c08e <__sflush_r+0x46>
 800c08a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c08c:	1ac0      	subs	r0, r0, r3
 800c08e:	2300      	movs	r3, #0
 800c090:	4602      	mov	r2, r0
 800c092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c094:	4628      	mov	r0, r5
 800c096:	6a21      	ldr	r1, [r4, #32]
 800c098:	47b0      	blx	r6
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	d106      	bne.n	800c0ae <__sflush_r+0x66>
 800c0a0:	6829      	ldr	r1, [r5, #0]
 800c0a2:	291d      	cmp	r1, #29
 800c0a4:	d82c      	bhi.n	800c100 <__sflush_r+0xb8>
 800c0a6:	4a2a      	ldr	r2, [pc, #168]	; (800c150 <__sflush_r+0x108>)
 800c0a8:	40ca      	lsrs	r2, r1
 800c0aa:	07d6      	lsls	r6, r2, #31
 800c0ac:	d528      	bpl.n	800c100 <__sflush_r+0xb8>
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	6062      	str	r2, [r4, #4]
 800c0b2:	6922      	ldr	r2, [r4, #16]
 800c0b4:	04d9      	lsls	r1, r3, #19
 800c0b6:	6022      	str	r2, [r4, #0]
 800c0b8:	d504      	bpl.n	800c0c4 <__sflush_r+0x7c>
 800c0ba:	1c42      	adds	r2, r0, #1
 800c0bc:	d101      	bne.n	800c0c2 <__sflush_r+0x7a>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b903      	cbnz	r3, 800c0c4 <__sflush_r+0x7c>
 800c0c2:	6560      	str	r0, [r4, #84]	; 0x54
 800c0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0c6:	602f      	str	r7, [r5, #0]
 800c0c8:	2900      	cmp	r1, #0
 800c0ca:	d0ca      	beq.n	800c062 <__sflush_r+0x1a>
 800c0cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	d002      	beq.n	800c0da <__sflush_r+0x92>
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f7ff fc61 	bl	800b99c <_free_r>
 800c0da:	2000      	movs	r0, #0
 800c0dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c0de:	e7c1      	b.n	800c064 <__sflush_r+0x1c>
 800c0e0:	6a21      	ldr	r1, [r4, #32]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b0      	blx	r6
 800c0e8:	1c41      	adds	r1, r0, #1
 800c0ea:	d1c7      	bne.n	800c07c <__sflush_r+0x34>
 800c0ec:	682b      	ldr	r3, [r5, #0]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d0c4      	beq.n	800c07c <__sflush_r+0x34>
 800c0f2:	2b1d      	cmp	r3, #29
 800c0f4:	d001      	beq.n	800c0fa <__sflush_r+0xb2>
 800c0f6:	2b16      	cmp	r3, #22
 800c0f8:	d101      	bne.n	800c0fe <__sflush_r+0xb6>
 800c0fa:	602f      	str	r7, [r5, #0]
 800c0fc:	e7b1      	b.n	800c062 <__sflush_r+0x1a>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c104:	81a3      	strh	r3, [r4, #12]
 800c106:	e7ad      	b.n	800c064 <__sflush_r+0x1c>
 800c108:	690f      	ldr	r7, [r1, #16]
 800c10a:	2f00      	cmp	r7, #0
 800c10c:	d0a9      	beq.n	800c062 <__sflush_r+0x1a>
 800c10e:	0793      	lsls	r3, r2, #30
 800c110:	bf18      	it	ne
 800c112:	2300      	movne	r3, #0
 800c114:	680e      	ldr	r6, [r1, #0]
 800c116:	bf08      	it	eq
 800c118:	694b      	ldreq	r3, [r1, #20]
 800c11a:	eba6 0807 	sub.w	r8, r6, r7
 800c11e:	600f      	str	r7, [r1, #0]
 800c120:	608b      	str	r3, [r1, #8]
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	dd9c      	ble.n	800c062 <__sflush_r+0x1a>
 800c128:	4643      	mov	r3, r8
 800c12a:	463a      	mov	r2, r7
 800c12c:	4628      	mov	r0, r5
 800c12e:	6a21      	ldr	r1, [r4, #32]
 800c130:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c132:	47b0      	blx	r6
 800c134:	2800      	cmp	r0, #0
 800c136:	dc06      	bgt.n	800c146 <__sflush_r+0xfe>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	f04f 30ff 	mov.w	r0, #4294967295
 800c13e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c142:	81a3      	strh	r3, [r4, #12]
 800c144:	e78e      	b.n	800c064 <__sflush_r+0x1c>
 800c146:	4407      	add	r7, r0
 800c148:	eba8 0800 	sub.w	r8, r8, r0
 800c14c:	e7e9      	b.n	800c122 <__sflush_r+0xda>
 800c14e:	bf00      	nop
 800c150:	20400001 	.word	0x20400001

0800c154 <_fflush_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	690b      	ldr	r3, [r1, #16]
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	b913      	cbnz	r3, 800c164 <_fflush_r+0x10>
 800c15e:	2500      	movs	r5, #0
 800c160:	4628      	mov	r0, r5
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	b118      	cbz	r0, 800c16e <_fflush_r+0x1a>
 800c166:	6983      	ldr	r3, [r0, #24]
 800c168:	b90b      	cbnz	r3, 800c16e <_fflush_r+0x1a>
 800c16a:	f7fe ffcb 	bl	800b104 <__sinit>
 800c16e:	4b14      	ldr	r3, [pc, #80]	; (800c1c0 <_fflush_r+0x6c>)
 800c170:	429c      	cmp	r4, r3
 800c172:	d11b      	bne.n	800c1ac <_fflush_r+0x58>
 800c174:	686c      	ldr	r4, [r5, #4]
 800c176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d0ef      	beq.n	800c15e <_fflush_r+0xa>
 800c17e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c180:	07d0      	lsls	r0, r2, #31
 800c182:	d404      	bmi.n	800c18e <_fflush_r+0x3a>
 800c184:	0599      	lsls	r1, r3, #22
 800c186:	d402      	bmi.n	800c18e <_fflush_r+0x3a>
 800c188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c18a:	f7ff f85e 	bl	800b24a <__retarget_lock_acquire_recursive>
 800c18e:	4628      	mov	r0, r5
 800c190:	4621      	mov	r1, r4
 800c192:	f7ff ff59 	bl	800c048 <__sflush_r>
 800c196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c198:	4605      	mov	r5, r0
 800c19a:	07da      	lsls	r2, r3, #31
 800c19c:	d4e0      	bmi.n	800c160 <_fflush_r+0xc>
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	059b      	lsls	r3, r3, #22
 800c1a2:	d4dd      	bmi.n	800c160 <_fflush_r+0xc>
 800c1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1a6:	f7ff f851 	bl	800b24c <__retarget_lock_release_recursive>
 800c1aa:	e7d9      	b.n	800c160 <_fflush_r+0xc>
 800c1ac:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <_fflush_r+0x70>)
 800c1ae:	429c      	cmp	r4, r3
 800c1b0:	d101      	bne.n	800c1b6 <_fflush_r+0x62>
 800c1b2:	68ac      	ldr	r4, [r5, #8]
 800c1b4:	e7df      	b.n	800c176 <_fflush_r+0x22>
 800c1b6:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <_fflush_r+0x74>)
 800c1b8:	429c      	cmp	r4, r3
 800c1ba:	bf08      	it	eq
 800c1bc:	68ec      	ldreq	r4, [r5, #12]
 800c1be:	e7da      	b.n	800c176 <_fflush_r+0x22>
 800c1c0:	0800de70 	.word	0x0800de70
 800c1c4:	0800de90 	.word	0x0800de90
 800c1c8:	0800de50 	.word	0x0800de50

0800c1cc <fiprintf>:
 800c1cc:	b40e      	push	{r1, r2, r3}
 800c1ce:	b503      	push	{r0, r1, lr}
 800c1d0:	4601      	mov	r1, r0
 800c1d2:	ab03      	add	r3, sp, #12
 800c1d4:	4805      	ldr	r0, [pc, #20]	; (800c1ec <fiprintf+0x20>)
 800c1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1da:	6800      	ldr	r0, [r0, #0]
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	f000 f903 	bl	800c3e8 <_vfiprintf_r>
 800c1e2:	b002      	add	sp, #8
 800c1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e8:	b003      	add	sp, #12
 800c1ea:	4770      	bx	lr
 800c1ec:	20000180 	.word	0x20000180

0800c1f0 <_lseek_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4604      	mov	r4, r0
 800c1f4:	4608      	mov	r0, r1
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	4d05      	ldr	r5, [pc, #20]	; (800c210 <_lseek_r+0x20>)
 800c1fc:	602a      	str	r2, [r5, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	f7f5 fe4a 	bl	8001e98 <_lseek>
 800c204:	1c43      	adds	r3, r0, #1
 800c206:	d102      	bne.n	800c20e <_lseek_r+0x1e>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	b103      	cbz	r3, 800c20e <_lseek_r+0x1e>
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	bd38      	pop	{r3, r4, r5, pc}
 800c210:	200032f8 	.word	0x200032f8

0800c214 <__swhatbuf_r>:
 800c214:	b570      	push	{r4, r5, r6, lr}
 800c216:	460e      	mov	r6, r1
 800c218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21c:	4614      	mov	r4, r2
 800c21e:	2900      	cmp	r1, #0
 800c220:	461d      	mov	r5, r3
 800c222:	b096      	sub	sp, #88	; 0x58
 800c224:	da07      	bge.n	800c236 <__swhatbuf_r+0x22>
 800c226:	2300      	movs	r3, #0
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	89b3      	ldrh	r3, [r6, #12]
 800c22c:	061a      	lsls	r2, r3, #24
 800c22e:	d410      	bmi.n	800c252 <__swhatbuf_r+0x3e>
 800c230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c234:	e00e      	b.n	800c254 <__swhatbuf_r+0x40>
 800c236:	466a      	mov	r2, sp
 800c238:	f000 fa2c 	bl	800c694 <_fstat_r>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	dbf2      	blt.n	800c226 <__swhatbuf_r+0x12>
 800c240:	9a01      	ldr	r2, [sp, #4]
 800c242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c24a:	425a      	negs	r2, r3
 800c24c:	415a      	adcs	r2, r3
 800c24e:	602a      	str	r2, [r5, #0]
 800c250:	e7ee      	b.n	800c230 <__swhatbuf_r+0x1c>
 800c252:	2340      	movs	r3, #64	; 0x40
 800c254:	2000      	movs	r0, #0
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	b016      	add	sp, #88	; 0x58
 800c25a:	bd70      	pop	{r4, r5, r6, pc}

0800c25c <__smakebuf_r>:
 800c25c:	898b      	ldrh	r3, [r1, #12]
 800c25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c260:	079d      	lsls	r5, r3, #30
 800c262:	4606      	mov	r6, r0
 800c264:	460c      	mov	r4, r1
 800c266:	d507      	bpl.n	800c278 <__smakebuf_r+0x1c>
 800c268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	6123      	str	r3, [r4, #16]
 800c270:	2301      	movs	r3, #1
 800c272:	6163      	str	r3, [r4, #20]
 800c274:	b002      	add	sp, #8
 800c276:	bd70      	pop	{r4, r5, r6, pc}
 800c278:	466a      	mov	r2, sp
 800c27a:	ab01      	add	r3, sp, #4
 800c27c:	f7ff ffca 	bl	800c214 <__swhatbuf_r>
 800c280:	9900      	ldr	r1, [sp, #0]
 800c282:	4605      	mov	r5, r0
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff fbd5 	bl	800ba34 <_malloc_r>
 800c28a:	b948      	cbnz	r0, 800c2a0 <__smakebuf_r+0x44>
 800c28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c290:	059a      	lsls	r2, r3, #22
 800c292:	d4ef      	bmi.n	800c274 <__smakebuf_r+0x18>
 800c294:	f023 0303 	bic.w	r3, r3, #3
 800c298:	f043 0302 	orr.w	r3, r3, #2
 800c29c:	81a3      	strh	r3, [r4, #12]
 800c29e:	e7e3      	b.n	800c268 <__smakebuf_r+0xc>
 800c2a0:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <__smakebuf_r+0x7c>)
 800c2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	6020      	str	r0, [r4, #0]
 800c2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ac:	81a3      	strh	r3, [r4, #12]
 800c2ae:	9b00      	ldr	r3, [sp, #0]
 800c2b0:	6120      	str	r0, [r4, #16]
 800c2b2:	6163      	str	r3, [r4, #20]
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	b15b      	cbz	r3, 800c2d0 <__smakebuf_r+0x74>
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2be:	f000 f9fb 	bl	800c6b8 <_isatty_r>
 800c2c2:	b128      	cbz	r0, 800c2d0 <__smakebuf_r+0x74>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f023 0303 	bic.w	r3, r3, #3
 800c2ca:	f043 0301 	orr.w	r3, r3, #1
 800c2ce:	81a3      	strh	r3, [r4, #12]
 800c2d0:	89a0      	ldrh	r0, [r4, #12]
 800c2d2:	4305      	orrs	r5, r0
 800c2d4:	81a5      	strh	r5, [r4, #12]
 800c2d6:	e7cd      	b.n	800c274 <__smakebuf_r+0x18>
 800c2d8:	0800b09d 	.word	0x0800b09d

0800c2dc <__ascii_mbtowc>:
 800c2dc:	b082      	sub	sp, #8
 800c2de:	b901      	cbnz	r1, 800c2e2 <__ascii_mbtowc+0x6>
 800c2e0:	a901      	add	r1, sp, #4
 800c2e2:	b142      	cbz	r2, 800c2f6 <__ascii_mbtowc+0x1a>
 800c2e4:	b14b      	cbz	r3, 800c2fa <__ascii_mbtowc+0x1e>
 800c2e6:	7813      	ldrb	r3, [r2, #0]
 800c2e8:	600b      	str	r3, [r1, #0]
 800c2ea:	7812      	ldrb	r2, [r2, #0]
 800c2ec:	1e10      	subs	r0, r2, #0
 800c2ee:	bf18      	it	ne
 800c2f0:	2001      	movne	r0, #1
 800c2f2:	b002      	add	sp, #8
 800c2f4:	4770      	bx	lr
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	e7fb      	b.n	800c2f2 <__ascii_mbtowc+0x16>
 800c2fa:	f06f 0001 	mvn.w	r0, #1
 800c2fe:	e7f8      	b.n	800c2f2 <__ascii_mbtowc+0x16>

0800c300 <memmove>:
 800c300:	4288      	cmp	r0, r1
 800c302:	b510      	push	{r4, lr}
 800c304:	eb01 0402 	add.w	r4, r1, r2
 800c308:	d902      	bls.n	800c310 <memmove+0x10>
 800c30a:	4284      	cmp	r4, r0
 800c30c:	4623      	mov	r3, r4
 800c30e:	d807      	bhi.n	800c320 <memmove+0x20>
 800c310:	1e43      	subs	r3, r0, #1
 800c312:	42a1      	cmp	r1, r4
 800c314:	d008      	beq.n	800c328 <memmove+0x28>
 800c316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c31a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c31e:	e7f8      	b.n	800c312 <memmove+0x12>
 800c320:	4601      	mov	r1, r0
 800c322:	4402      	add	r2, r0
 800c324:	428a      	cmp	r2, r1
 800c326:	d100      	bne.n	800c32a <memmove+0x2a>
 800c328:	bd10      	pop	{r4, pc}
 800c32a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c32e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c332:	e7f7      	b.n	800c324 <memmove+0x24>

0800c334 <__malloc_lock>:
 800c334:	4801      	ldr	r0, [pc, #4]	; (800c33c <__malloc_lock+0x8>)
 800c336:	f7fe bf88 	b.w	800b24a <__retarget_lock_acquire_recursive>
 800c33a:	bf00      	nop
 800c33c:	200032ec 	.word	0x200032ec

0800c340 <__malloc_unlock>:
 800c340:	4801      	ldr	r0, [pc, #4]	; (800c348 <__malloc_unlock+0x8>)
 800c342:	f7fe bf83 	b.w	800b24c <__retarget_lock_release_recursive>
 800c346:	bf00      	nop
 800c348:	200032ec 	.word	0x200032ec

0800c34c <_realloc_r>:
 800c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34e:	4607      	mov	r7, r0
 800c350:	4614      	mov	r4, r2
 800c352:	460e      	mov	r6, r1
 800c354:	b921      	cbnz	r1, 800c360 <_realloc_r+0x14>
 800c356:	4611      	mov	r1, r2
 800c358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c35c:	f7ff bb6a 	b.w	800ba34 <_malloc_r>
 800c360:	b922      	cbnz	r2, 800c36c <_realloc_r+0x20>
 800c362:	f7ff fb1b 	bl	800b99c <_free_r>
 800c366:	4625      	mov	r5, r4
 800c368:	4628      	mov	r0, r5
 800c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c36c:	f000 f9b4 	bl	800c6d8 <_malloc_usable_size_r>
 800c370:	42a0      	cmp	r0, r4
 800c372:	d20f      	bcs.n	800c394 <_realloc_r+0x48>
 800c374:	4621      	mov	r1, r4
 800c376:	4638      	mov	r0, r7
 800c378:	f7ff fb5c 	bl	800ba34 <_malloc_r>
 800c37c:	4605      	mov	r5, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d0f2      	beq.n	800c368 <_realloc_r+0x1c>
 800c382:	4631      	mov	r1, r6
 800c384:	4622      	mov	r2, r4
 800c386:	f7fd fb53 	bl	8009a30 <memcpy>
 800c38a:	4631      	mov	r1, r6
 800c38c:	4638      	mov	r0, r7
 800c38e:	f7ff fb05 	bl	800b99c <_free_r>
 800c392:	e7e9      	b.n	800c368 <_realloc_r+0x1c>
 800c394:	4635      	mov	r5, r6
 800c396:	e7e7      	b.n	800c368 <_realloc_r+0x1c>

0800c398 <__sfputc_r>:
 800c398:	6893      	ldr	r3, [r2, #8]
 800c39a:	b410      	push	{r4}
 800c39c:	3b01      	subs	r3, #1
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	6093      	str	r3, [r2, #8]
 800c3a2:	da07      	bge.n	800c3b4 <__sfputc_r+0x1c>
 800c3a4:	6994      	ldr	r4, [r2, #24]
 800c3a6:	42a3      	cmp	r3, r4
 800c3a8:	db01      	blt.n	800c3ae <__sfputc_r+0x16>
 800c3aa:	290a      	cmp	r1, #10
 800c3ac:	d102      	bne.n	800c3b4 <__sfputc_r+0x1c>
 800c3ae:	bc10      	pop	{r4}
 800c3b0:	f7ff bd4a 	b.w	800be48 <__swbuf_r>
 800c3b4:	6813      	ldr	r3, [r2, #0]
 800c3b6:	1c58      	adds	r0, r3, #1
 800c3b8:	6010      	str	r0, [r2, #0]
 800c3ba:	7019      	strb	r1, [r3, #0]
 800c3bc:	4608      	mov	r0, r1
 800c3be:	bc10      	pop	{r4}
 800c3c0:	4770      	bx	lr

0800c3c2 <__sfputs_r>:
 800c3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c4:	4606      	mov	r6, r0
 800c3c6:	460f      	mov	r7, r1
 800c3c8:	4614      	mov	r4, r2
 800c3ca:	18d5      	adds	r5, r2, r3
 800c3cc:	42ac      	cmp	r4, r5
 800c3ce:	d101      	bne.n	800c3d4 <__sfputs_r+0x12>
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e007      	b.n	800c3e4 <__sfputs_r+0x22>
 800c3d4:	463a      	mov	r2, r7
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3dc:	f7ff ffdc 	bl	800c398 <__sfputc_r>
 800c3e0:	1c43      	adds	r3, r0, #1
 800c3e2:	d1f3      	bne.n	800c3cc <__sfputs_r+0xa>
 800c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3e8 <_vfiprintf_r>:
 800c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ec:	460d      	mov	r5, r1
 800c3ee:	4614      	mov	r4, r2
 800c3f0:	4698      	mov	r8, r3
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	b09d      	sub	sp, #116	; 0x74
 800c3f6:	b118      	cbz	r0, 800c400 <_vfiprintf_r+0x18>
 800c3f8:	6983      	ldr	r3, [r0, #24]
 800c3fa:	b90b      	cbnz	r3, 800c400 <_vfiprintf_r+0x18>
 800c3fc:	f7fe fe82 	bl	800b104 <__sinit>
 800c400:	4b89      	ldr	r3, [pc, #548]	; (800c628 <_vfiprintf_r+0x240>)
 800c402:	429d      	cmp	r5, r3
 800c404:	d11b      	bne.n	800c43e <_vfiprintf_r+0x56>
 800c406:	6875      	ldr	r5, [r6, #4]
 800c408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c40a:	07d9      	lsls	r1, r3, #31
 800c40c:	d405      	bmi.n	800c41a <_vfiprintf_r+0x32>
 800c40e:	89ab      	ldrh	r3, [r5, #12]
 800c410:	059a      	lsls	r2, r3, #22
 800c412:	d402      	bmi.n	800c41a <_vfiprintf_r+0x32>
 800c414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c416:	f7fe ff18 	bl	800b24a <__retarget_lock_acquire_recursive>
 800c41a:	89ab      	ldrh	r3, [r5, #12]
 800c41c:	071b      	lsls	r3, r3, #28
 800c41e:	d501      	bpl.n	800c424 <_vfiprintf_r+0x3c>
 800c420:	692b      	ldr	r3, [r5, #16]
 800c422:	b9eb      	cbnz	r3, 800c460 <_vfiprintf_r+0x78>
 800c424:	4629      	mov	r1, r5
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff fd72 	bl	800bf10 <__swsetup_r>
 800c42c:	b1c0      	cbz	r0, 800c460 <_vfiprintf_r+0x78>
 800c42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c430:	07dc      	lsls	r4, r3, #31
 800c432:	d50e      	bpl.n	800c452 <_vfiprintf_r+0x6a>
 800c434:	f04f 30ff 	mov.w	r0, #4294967295
 800c438:	b01d      	add	sp, #116	; 0x74
 800c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43e:	4b7b      	ldr	r3, [pc, #492]	; (800c62c <_vfiprintf_r+0x244>)
 800c440:	429d      	cmp	r5, r3
 800c442:	d101      	bne.n	800c448 <_vfiprintf_r+0x60>
 800c444:	68b5      	ldr	r5, [r6, #8]
 800c446:	e7df      	b.n	800c408 <_vfiprintf_r+0x20>
 800c448:	4b79      	ldr	r3, [pc, #484]	; (800c630 <_vfiprintf_r+0x248>)
 800c44a:	429d      	cmp	r5, r3
 800c44c:	bf08      	it	eq
 800c44e:	68f5      	ldreq	r5, [r6, #12]
 800c450:	e7da      	b.n	800c408 <_vfiprintf_r+0x20>
 800c452:	89ab      	ldrh	r3, [r5, #12]
 800c454:	0598      	lsls	r0, r3, #22
 800c456:	d4ed      	bmi.n	800c434 <_vfiprintf_r+0x4c>
 800c458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c45a:	f7fe fef7 	bl	800b24c <__retarget_lock_release_recursive>
 800c45e:	e7e9      	b.n	800c434 <_vfiprintf_r+0x4c>
 800c460:	2300      	movs	r3, #0
 800c462:	9309      	str	r3, [sp, #36]	; 0x24
 800c464:	2320      	movs	r3, #32
 800c466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c46a:	2330      	movs	r3, #48	; 0x30
 800c46c:	f04f 0901 	mov.w	r9, #1
 800c470:	f8cd 800c 	str.w	r8, [sp, #12]
 800c474:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c634 <_vfiprintf_r+0x24c>
 800c478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c47c:	4623      	mov	r3, r4
 800c47e:	469a      	mov	sl, r3
 800c480:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c484:	b10a      	cbz	r2, 800c48a <_vfiprintf_r+0xa2>
 800c486:	2a25      	cmp	r2, #37	; 0x25
 800c488:	d1f9      	bne.n	800c47e <_vfiprintf_r+0x96>
 800c48a:	ebba 0b04 	subs.w	fp, sl, r4
 800c48e:	d00b      	beq.n	800c4a8 <_vfiprintf_r+0xc0>
 800c490:	465b      	mov	r3, fp
 800c492:	4622      	mov	r2, r4
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f7ff ff93 	bl	800c3c2 <__sfputs_r>
 800c49c:	3001      	adds	r0, #1
 800c49e:	f000 80aa 	beq.w	800c5f6 <_vfiprintf_r+0x20e>
 800c4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4a4:	445a      	add	r2, fp
 800c4a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c4a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	f000 80a2 	beq.w	800c5f6 <_vfiprintf_r+0x20e>
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4bc:	f10a 0a01 	add.w	sl, sl, #1
 800c4c0:	9304      	str	r3, [sp, #16]
 800c4c2:	9307      	str	r3, [sp, #28]
 800c4c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ca:	4654      	mov	r4, sl
 800c4cc:	2205      	movs	r2, #5
 800c4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4d2:	4858      	ldr	r0, [pc, #352]	; (800c634 <_vfiprintf_r+0x24c>)
 800c4d4:	f7fe fec4 	bl	800b260 <memchr>
 800c4d8:	9a04      	ldr	r2, [sp, #16]
 800c4da:	b9d8      	cbnz	r0, 800c514 <_vfiprintf_r+0x12c>
 800c4dc:	06d1      	lsls	r1, r2, #27
 800c4de:	bf44      	itt	mi
 800c4e0:	2320      	movmi	r3, #32
 800c4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4e6:	0713      	lsls	r3, r2, #28
 800c4e8:	bf44      	itt	mi
 800c4ea:	232b      	movmi	r3, #43	; 0x2b
 800c4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4f6:	d015      	beq.n	800c524 <_vfiprintf_r+0x13c>
 800c4f8:	4654      	mov	r4, sl
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	f04f 0c0a 	mov.w	ip, #10
 800c500:	9a07      	ldr	r2, [sp, #28]
 800c502:	4621      	mov	r1, r4
 800c504:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c508:	3b30      	subs	r3, #48	; 0x30
 800c50a:	2b09      	cmp	r3, #9
 800c50c:	d94e      	bls.n	800c5ac <_vfiprintf_r+0x1c4>
 800c50e:	b1b0      	cbz	r0, 800c53e <_vfiprintf_r+0x156>
 800c510:	9207      	str	r2, [sp, #28]
 800c512:	e014      	b.n	800c53e <_vfiprintf_r+0x156>
 800c514:	eba0 0308 	sub.w	r3, r0, r8
 800c518:	fa09 f303 	lsl.w	r3, r9, r3
 800c51c:	4313      	orrs	r3, r2
 800c51e:	46a2      	mov	sl, r4
 800c520:	9304      	str	r3, [sp, #16]
 800c522:	e7d2      	b.n	800c4ca <_vfiprintf_r+0xe2>
 800c524:	9b03      	ldr	r3, [sp, #12]
 800c526:	1d19      	adds	r1, r3, #4
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	9103      	str	r1, [sp, #12]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	bfbb      	ittet	lt
 800c530:	425b      	neglt	r3, r3
 800c532:	f042 0202 	orrlt.w	r2, r2, #2
 800c536:	9307      	strge	r3, [sp, #28]
 800c538:	9307      	strlt	r3, [sp, #28]
 800c53a:	bfb8      	it	lt
 800c53c:	9204      	strlt	r2, [sp, #16]
 800c53e:	7823      	ldrb	r3, [r4, #0]
 800c540:	2b2e      	cmp	r3, #46	; 0x2e
 800c542:	d10c      	bne.n	800c55e <_vfiprintf_r+0x176>
 800c544:	7863      	ldrb	r3, [r4, #1]
 800c546:	2b2a      	cmp	r3, #42	; 0x2a
 800c548:	d135      	bne.n	800c5b6 <_vfiprintf_r+0x1ce>
 800c54a:	9b03      	ldr	r3, [sp, #12]
 800c54c:	3402      	adds	r4, #2
 800c54e:	1d1a      	adds	r2, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9203      	str	r2, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfb8      	it	lt
 800c558:	f04f 33ff 	movlt.w	r3, #4294967295
 800c55c:	9305      	str	r3, [sp, #20]
 800c55e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c644 <_vfiprintf_r+0x25c>
 800c562:	2203      	movs	r2, #3
 800c564:	4650      	mov	r0, sl
 800c566:	7821      	ldrb	r1, [r4, #0]
 800c568:	f7fe fe7a 	bl	800b260 <memchr>
 800c56c:	b140      	cbz	r0, 800c580 <_vfiprintf_r+0x198>
 800c56e:	2340      	movs	r3, #64	; 0x40
 800c570:	eba0 000a 	sub.w	r0, r0, sl
 800c574:	fa03 f000 	lsl.w	r0, r3, r0
 800c578:	9b04      	ldr	r3, [sp, #16]
 800c57a:	3401      	adds	r4, #1
 800c57c:	4303      	orrs	r3, r0
 800c57e:	9304      	str	r3, [sp, #16]
 800c580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c584:	2206      	movs	r2, #6
 800c586:	482c      	ldr	r0, [pc, #176]	; (800c638 <_vfiprintf_r+0x250>)
 800c588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c58c:	f7fe fe68 	bl	800b260 <memchr>
 800c590:	2800      	cmp	r0, #0
 800c592:	d03f      	beq.n	800c614 <_vfiprintf_r+0x22c>
 800c594:	4b29      	ldr	r3, [pc, #164]	; (800c63c <_vfiprintf_r+0x254>)
 800c596:	bb1b      	cbnz	r3, 800c5e0 <_vfiprintf_r+0x1f8>
 800c598:	9b03      	ldr	r3, [sp, #12]
 800c59a:	3307      	adds	r3, #7
 800c59c:	f023 0307 	bic.w	r3, r3, #7
 800c5a0:	3308      	adds	r3, #8
 800c5a2:	9303      	str	r3, [sp, #12]
 800c5a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a6:	443b      	add	r3, r7
 800c5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5aa:	e767      	b.n	800c47c <_vfiprintf_r+0x94>
 800c5ac:	460c      	mov	r4, r1
 800c5ae:	2001      	movs	r0, #1
 800c5b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5b4:	e7a5      	b.n	800c502 <_vfiprintf_r+0x11a>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f04f 0c0a 	mov.w	ip, #10
 800c5bc:	4619      	mov	r1, r3
 800c5be:	3401      	adds	r4, #1
 800c5c0:	9305      	str	r3, [sp, #20]
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5c8:	3a30      	subs	r2, #48	; 0x30
 800c5ca:	2a09      	cmp	r2, #9
 800c5cc:	d903      	bls.n	800c5d6 <_vfiprintf_r+0x1ee>
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0c5      	beq.n	800c55e <_vfiprintf_r+0x176>
 800c5d2:	9105      	str	r1, [sp, #20]
 800c5d4:	e7c3      	b.n	800c55e <_vfiprintf_r+0x176>
 800c5d6:	4604      	mov	r4, r0
 800c5d8:	2301      	movs	r3, #1
 800c5da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5de:	e7f0      	b.n	800c5c2 <_vfiprintf_r+0x1da>
 800c5e0:	ab03      	add	r3, sp, #12
 800c5e2:	9300      	str	r3, [sp, #0]
 800c5e4:	462a      	mov	r2, r5
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4b15      	ldr	r3, [pc, #84]	; (800c640 <_vfiprintf_r+0x258>)
 800c5ea:	a904      	add	r1, sp, #16
 800c5ec:	f7fd fad4 	bl	8009b98 <_printf_float>
 800c5f0:	4607      	mov	r7, r0
 800c5f2:	1c78      	adds	r0, r7, #1
 800c5f4:	d1d6      	bne.n	800c5a4 <_vfiprintf_r+0x1bc>
 800c5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f8:	07d9      	lsls	r1, r3, #31
 800c5fa:	d405      	bmi.n	800c608 <_vfiprintf_r+0x220>
 800c5fc:	89ab      	ldrh	r3, [r5, #12]
 800c5fe:	059a      	lsls	r2, r3, #22
 800c600:	d402      	bmi.n	800c608 <_vfiprintf_r+0x220>
 800c602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c604:	f7fe fe22 	bl	800b24c <__retarget_lock_release_recursive>
 800c608:	89ab      	ldrh	r3, [r5, #12]
 800c60a:	065b      	lsls	r3, r3, #25
 800c60c:	f53f af12 	bmi.w	800c434 <_vfiprintf_r+0x4c>
 800c610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c612:	e711      	b.n	800c438 <_vfiprintf_r+0x50>
 800c614:	ab03      	add	r3, sp, #12
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	462a      	mov	r2, r5
 800c61a:	4630      	mov	r0, r6
 800c61c:	4b08      	ldr	r3, [pc, #32]	; (800c640 <_vfiprintf_r+0x258>)
 800c61e:	a904      	add	r1, sp, #16
 800c620:	f7fd fd56 	bl	800a0d0 <_printf_i>
 800c624:	e7e4      	b.n	800c5f0 <_vfiprintf_r+0x208>
 800c626:	bf00      	nop
 800c628:	0800de70 	.word	0x0800de70
 800c62c:	0800de90 	.word	0x0800de90
 800c630:	0800de50 	.word	0x0800de50
 800c634:	0800e00c 	.word	0x0800e00c
 800c638:	0800e016 	.word	0x0800e016
 800c63c:	08009b99 	.word	0x08009b99
 800c640:	0800c3c3 	.word	0x0800c3c3
 800c644:	0800e012 	.word	0x0800e012

0800c648 <_read_r>:
 800c648:	b538      	push	{r3, r4, r5, lr}
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	4611      	mov	r1, r2
 800c650:	2200      	movs	r2, #0
 800c652:	4d05      	ldr	r5, [pc, #20]	; (800c668 <_read_r+0x20>)
 800c654:	602a      	str	r2, [r5, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	f7f5 fbfa 	bl	8001e50 <_read>
 800c65c:	1c43      	adds	r3, r0, #1
 800c65e:	d102      	bne.n	800c666 <_read_r+0x1e>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	b103      	cbz	r3, 800c666 <_read_r+0x1e>
 800c664:	6023      	str	r3, [r4, #0]
 800c666:	bd38      	pop	{r3, r4, r5, pc}
 800c668:	200032f8 	.word	0x200032f8

0800c66c <__ascii_wctomb>:
 800c66c:	4603      	mov	r3, r0
 800c66e:	4608      	mov	r0, r1
 800c670:	b141      	cbz	r1, 800c684 <__ascii_wctomb+0x18>
 800c672:	2aff      	cmp	r2, #255	; 0xff
 800c674:	d904      	bls.n	800c680 <__ascii_wctomb+0x14>
 800c676:	228a      	movs	r2, #138	; 0x8a
 800c678:	f04f 30ff 	mov.w	r0, #4294967295
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	4770      	bx	lr
 800c680:	2001      	movs	r0, #1
 800c682:	700a      	strb	r2, [r1, #0]
 800c684:	4770      	bx	lr

0800c686 <abort>:
 800c686:	2006      	movs	r0, #6
 800c688:	b508      	push	{r3, lr}
 800c68a:	f000 f855 	bl	800c738 <raise>
 800c68e:	2001      	movs	r0, #1
 800c690:	f7f5 fbd8 	bl	8001e44 <_exit>

0800c694 <_fstat_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	2300      	movs	r3, #0
 800c698:	4d06      	ldr	r5, [pc, #24]	; (800c6b4 <_fstat_r+0x20>)
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	4611      	mov	r1, r2
 800c6a0:	602b      	str	r3, [r5, #0]
 800c6a2:	f7f5 fbf2 	bl	8001e8a <_fstat>
 800c6a6:	1c43      	adds	r3, r0, #1
 800c6a8:	d102      	bne.n	800c6b0 <_fstat_r+0x1c>
 800c6aa:	682b      	ldr	r3, [r5, #0]
 800c6ac:	b103      	cbz	r3, 800c6b0 <_fstat_r+0x1c>
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	bd38      	pop	{r3, r4, r5, pc}
 800c6b2:	bf00      	nop
 800c6b4:	200032f8 	.word	0x200032f8

0800c6b8 <_isatty_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	4d05      	ldr	r5, [pc, #20]	; (800c6d4 <_isatty_r+0x1c>)
 800c6be:	4604      	mov	r4, r0
 800c6c0:	4608      	mov	r0, r1
 800c6c2:	602b      	str	r3, [r5, #0]
 800c6c4:	f7f5 fbe6 	bl	8001e94 <_isatty>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_isatty_r+0x1a>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_isatty_r+0x1a>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	200032f8 	.word	0x200032f8

0800c6d8 <_malloc_usable_size_r>:
 800c6d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6dc:	1f18      	subs	r0, r3, #4
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	bfbc      	itt	lt
 800c6e2:	580b      	ldrlt	r3, [r1, r0]
 800c6e4:	18c0      	addlt	r0, r0, r3
 800c6e6:	4770      	bx	lr

0800c6e8 <_raise_r>:
 800c6e8:	291f      	cmp	r1, #31
 800c6ea:	b538      	push	{r3, r4, r5, lr}
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	d904      	bls.n	800c6fc <_raise_r+0x14>
 800c6f2:	2316      	movs	r3, #22
 800c6f4:	6003      	str	r3, [r0, #0]
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c6fa:	bd38      	pop	{r3, r4, r5, pc}
 800c6fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6fe:	b112      	cbz	r2, 800c706 <_raise_r+0x1e>
 800c700:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c704:	b94b      	cbnz	r3, 800c71a <_raise_r+0x32>
 800c706:	4620      	mov	r0, r4
 800c708:	f000 f830 	bl	800c76c <_getpid_r>
 800c70c:	462a      	mov	r2, r5
 800c70e:	4601      	mov	r1, r0
 800c710:	4620      	mov	r0, r4
 800c712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c716:	f000 b817 	b.w	800c748 <_kill_r>
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d00a      	beq.n	800c734 <_raise_r+0x4c>
 800c71e:	1c59      	adds	r1, r3, #1
 800c720:	d103      	bne.n	800c72a <_raise_r+0x42>
 800c722:	2316      	movs	r3, #22
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	2001      	movs	r0, #1
 800c728:	e7e7      	b.n	800c6fa <_raise_r+0x12>
 800c72a:	2400      	movs	r4, #0
 800c72c:	4628      	mov	r0, r5
 800c72e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c732:	4798      	blx	r3
 800c734:	2000      	movs	r0, #0
 800c736:	e7e0      	b.n	800c6fa <_raise_r+0x12>

0800c738 <raise>:
 800c738:	4b02      	ldr	r3, [pc, #8]	; (800c744 <raise+0xc>)
 800c73a:	4601      	mov	r1, r0
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	f7ff bfd3 	b.w	800c6e8 <_raise_r>
 800c742:	bf00      	nop
 800c744:	20000180 	.word	0x20000180

0800c748 <_kill_r>:
 800c748:	b538      	push	{r3, r4, r5, lr}
 800c74a:	2300      	movs	r3, #0
 800c74c:	4d06      	ldr	r5, [pc, #24]	; (800c768 <_kill_r+0x20>)
 800c74e:	4604      	mov	r4, r0
 800c750:	4608      	mov	r0, r1
 800c752:	4611      	mov	r1, r2
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	f7f5 fb6d 	bl	8001e34 <_kill>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d102      	bne.n	800c764 <_kill_r+0x1c>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	b103      	cbz	r3, 800c764 <_kill_r+0x1c>
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	bd38      	pop	{r3, r4, r5, pc}
 800c766:	bf00      	nop
 800c768:	200032f8 	.word	0x200032f8

0800c76c <_getpid_r>:
 800c76c:	f7f5 bb60 	b.w	8001e30 <_getpid>

0800c770 <_init>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr

0800c77c <_fini>:
 800c77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c77e:	bf00      	nop
 800c780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c782:	bc08      	pop	{r3}
 800c784:	469e      	mov	lr, r3
 800c786:	4770      	bx	lr
